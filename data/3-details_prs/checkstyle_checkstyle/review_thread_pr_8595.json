{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTU0NTI4", "number": 8595, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzozMzo0OFrOEWf8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDowMjowMFrOEcOTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI3NjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzozMzo0OFrOG91IYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo1MzoyM1rOG_dzow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NjgxNw==", "bodyText": "This can be done using TokenUtils::forEachChild", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r467486817", "createdAt": "2020-08-08T17:33:48Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0ODM2NA==", "bodyText": "Can you give me an example?  forEachChild() performs an action on each child, I'm not sure how that applies here.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r468748364", "createdAt": "2020-08-11T17:32:23Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NjgxNw=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDc2MQ==", "bodyText": "TokenUtil.forEachChild(recordComponents,\n                TokenTypes.RECORD_COMPONENT_DEF, node -> counter.increment());\nWhat your code actually does:\n\nFor each child from the first child find one with type==TokenTypes.RECORD_COMPONENT_DEF.\nDouble check the type. Then increment the counter.\nloop over the rest of children\nIt can be simplified to\n\n        DetailAST componentToCount = recordComponents.getFirstChild();\n        while (componentToCount != null) {\n            if (componentToCount.getType() == TokenTypes.RECORD_COMPONENT_DEF) {\n                counter.increment();\n            }\n            componentToCount = componentToCount.getNextSibling();\n        }\n... and this is exactly what TokenUtils::forEachChild does:\n\nloop for each child\ncompare type\nif match, invoke callback", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r469034761", "createdAt": "2020-08-12T06:34:09Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NjgxNw=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTgyNw==", "bodyText": "Thanks a lot, @pbludov .  It is done.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r469201827", "createdAt": "2020-08-12T11:53:23Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NjgxNw=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI3OTM4OnYy", "diffSide": "RIGHT", "path": "src/xdocs/checks.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzozODo0MlrOG91JxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0MjozOVrOG_CfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NzE3Mw==", "bodyText": "Extra space after <td>", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r467487173", "createdAt": "2020-08-08T17:38:42Z", "author": {"login": "pbludov"}, "path": "src/xdocs/checks.xml", "diffHunk": "@@ -729,6 +729,10 @@\n               Checks that pattern variable names conform to a specified pattern.\n             </td>\n           </tr>\n+          <tr>\n+            <td><a href=\"config_sizes.html#RecordComponentNumber\">RecordComponentNumber</a></td>\n+            <td> Checks the number of record components in the header of a record definition.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1NDIwNg==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r468754206", "createdAt": "2020-08-11T17:42:39Z", "author": {"login": "nmancus1"}, "path": "src/xdocs/checks.xml", "diffHunk": "@@ -729,6 +729,10 @@\n               Checks that pattern variable names conform to a specified pattern.\n             </td>\n           </tr>\n+          <tr>\n+            <td><a href=\"config_sizes.html#RecordComponentNumber\">RecordComponentNumber</a></td>\n+            <td> Checks the number of record components in the header of a record definition.</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NzE3Mw=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI4NDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzo0NToxNVrOG91MCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0MjozMVrOG_Ceuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Nzc1NA==", "bodyText": "Now the indent is a single space. Please revert or reformat this expression completely, may be\nfor (DetailAST token = aMods.getFirstChild();\n        token != null && returnValue == Scope.PACKAGE;\n        token = token.getNextSibling()) {\n    if (\"public\".equals(token.getText())) {\n?", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r467487754", "createdAt": "2020-08-08T17:45:15Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -44,7 +44,7 @@ public static Scope getScopeFromMods(DetailAST aMods) {\n         Scope returnValue = Scope.PACKAGE;\n         for (DetailAST token = aMods.getFirstChild(); token != null\n                 && returnValue == Scope.PACKAGE;\n-                token = token.getNextSibling()) {\n+             token = token.getNextSibling()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1NDEwNw==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r468754107", "createdAt": "2020-08-11T17:42:31Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -44,7 +44,7 @@ public static Scope getScopeFromMods(DetailAST aMods) {\n         Scope returnValue = Scope.PACKAGE;\n         for (DetailAST token = aMods.getFirstChild(); token != null\n                 && returnValue == Scope.PACKAGE;\n-                token = token.getNextSibling()) {\n+             token = token.getNextSibling()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Nzc1NA=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI4NTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzo0NjozMFrOG91MYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0MjoyM1rOG_CeeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Nzg0MQ==", "bodyText": "Extra blank line in the end of the comment", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r467487841", "createdAt": "2020-08-08T17:46:30Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =\n+                recordComponents.findFirstToken(TokenTypes.RECORD_COMPONENT_DEF);\n+\n+        while (componentToCount != null) {\n+\n+            if (componentToCount.getType() == TokenTypes.RECORD_COMPONENT_DEF) {\n+                counter.increment();\n+            }\n+            componentToCount = componentToCount.getNextSibling();\n+\n+        }\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        final Scope scope = counter.getScope();\n+        if (scope == Scope.PRIVATE) {\n+            checkMax(maxPrivate, counter.getTotal(),\n+                    MSG_PRIVATE_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PUBLIC) {\n+            checkMax(maxPublic, counter.getTotal(),\n+                    MSG_PUBLIC_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PROTECTED) {\n+            checkMax(maxProtected, counter.getTotal(),\n+                    MSG_PROTECTED_COMPONENTS, ast);\n+        }\n+        else {\n+            checkMax(maxPackage, counter.getTotal(),\n+                    MSG_PACKAGE_COMPONENTS, ast);\n+        }\n+    }\n+\n+    /**\n+     * Method for reporting if a maximum has been exceeded.\n+     *\n+     * @param max the maximum allowed value\n+     * @param value the actual value\n+     * @param msg the message to log. Takes two arguments of value and maximum.\n+     * @param ast the AST to associate with the message.\n+     */\n+    private void checkMax(int max, int value, String msg, DetailAST ast) {\n+        if (max < value) {\n+            log(ast, msg, value, max);\n+        }\n+    }\n+\n+    /**\n+     * Counter class used to track the scope of the record definition and the number of\n+     * components in the record component list.\n+     *\n+     */\n+    private static class ComponentCounter {\n+\n+        /** The scope of the record definition. */\n+        private Scope scope;\n+\n+        /** Tracks the total. */\n+        private int total;\n+\n+        /**\n+         * Increments to counter by one.\n+         *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1NDA0MQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r468754041", "createdAt": "2020-08-11T17:42:23Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =\n+                recordComponents.findFirstToken(TokenTypes.RECORD_COMPONENT_DEF);\n+\n+        while (componentToCount != null) {\n+\n+            if (componentToCount.getType() == TokenTypes.RECORD_COMPONENT_DEF) {\n+                counter.increment();\n+            }\n+            componentToCount = componentToCount.getNextSibling();\n+\n+        }\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        final Scope scope = counter.getScope();\n+        if (scope == Scope.PRIVATE) {\n+            checkMax(maxPrivate, counter.getTotal(),\n+                    MSG_PRIVATE_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PUBLIC) {\n+            checkMax(maxPublic, counter.getTotal(),\n+                    MSG_PUBLIC_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PROTECTED) {\n+            checkMax(maxProtected, counter.getTotal(),\n+                    MSG_PROTECTED_COMPONENTS, ast);\n+        }\n+        else {\n+            checkMax(maxPackage, counter.getTotal(),\n+                    MSG_PACKAGE_COMPONENTS, ast);\n+        }\n+    }\n+\n+    /**\n+     * Method for reporting if a maximum has been exceeded.\n+     *\n+     * @param max the maximum allowed value\n+     * @param value the actual value\n+     * @param msg the message to log. Takes two arguments of value and maximum.\n+     * @param ast the AST to associate with the message.\n+     */\n+    private void checkMax(int max, int value, String msg, DetailAST ast) {\n+        if (max < value) {\n+            log(ast, msg, value, max);\n+        }\n+    }\n+\n+    /**\n+     * Counter class used to track the scope of the record definition and the number of\n+     * components in the record component list.\n+     *\n+     */\n+    private static class ComponentCounter {\n+\n+        /** The scope of the record definition. */\n+        private Scope scope;\n+\n+        /** Tracks the total. */\n+        private int total;\n+\n+        /**\n+         * Increments to counter by one.\n+         *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Nzg0MQ=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI4NTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzo0Njo1MlrOG91MkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0MjoxN1rOG_CeQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Nzg4OQ==", "bodyText": "Extra blank line in the end of the comment", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r467487889", "createdAt": "2020-08-08T17:46:52Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =\n+                recordComponents.findFirstToken(TokenTypes.RECORD_COMPONENT_DEF);\n+\n+        while (componentToCount != null) {\n+\n+            if (componentToCount.getType() == TokenTypes.RECORD_COMPONENT_DEF) {\n+                counter.increment();\n+            }\n+            componentToCount = componentToCount.getNextSibling();\n+\n+        }\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        final Scope scope = counter.getScope();\n+        if (scope == Scope.PRIVATE) {\n+            checkMax(maxPrivate, counter.getTotal(),\n+                    MSG_PRIVATE_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PUBLIC) {\n+            checkMax(maxPublic, counter.getTotal(),\n+                    MSG_PUBLIC_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PROTECTED) {\n+            checkMax(maxProtected, counter.getTotal(),\n+                    MSG_PROTECTED_COMPONENTS, ast);\n+        }\n+        else {\n+            checkMax(maxPackage, counter.getTotal(),\n+                    MSG_PACKAGE_COMPONENTS, ast);\n+        }\n+    }\n+\n+    /**\n+     * Method for reporting if a maximum has been exceeded.\n+     *\n+     * @param max the maximum allowed value\n+     * @param value the actual value\n+     * @param msg the message to log. Takes two arguments of value and maximum.\n+     * @param ast the AST to associate with the message.\n+     */\n+    private void checkMax(int max, int value, String msg, DetailAST ast) {\n+        if (max < value) {\n+            log(ast, msg, value, max);\n+        }\n+    }\n+\n+    /**\n+     * Counter class used to track the scope of the record definition and the number of\n+     * components in the record component list.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1Mzk4Ng==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r468753986", "createdAt": "2020-08-11T17:42:17Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+        final DetailAST modifiers =\n+                ast.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        counter.setScope(ScopeUtil.getScopeFromMods(modifiers));\n+\n+        DetailAST componentToCount =\n+                recordComponents.findFirstToken(TokenTypes.RECORD_COMPONENT_DEF);\n+\n+        while (componentToCount != null) {\n+\n+            if (componentToCount.getType() == TokenTypes.RECORD_COMPONENT_DEF) {\n+                counter.increment();\n+            }\n+            componentToCount = componentToCount.getNextSibling();\n+\n+        }\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        final Scope scope = counter.getScope();\n+        if (scope == Scope.PRIVATE) {\n+            checkMax(maxPrivate, counter.getTotal(),\n+                    MSG_PRIVATE_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PUBLIC) {\n+            checkMax(maxPublic, counter.getTotal(),\n+                    MSG_PUBLIC_COMPONENTS, ast);\n+        }\n+        else if (scope == Scope.PROTECTED) {\n+            checkMax(maxProtected, counter.getTotal(),\n+                    MSG_PROTECTED_COMPONENTS, ast);\n+        }\n+        else {\n+            checkMax(maxPackage, counter.getTotal(),\n+                    MSG_PACKAGE_COMPONENTS, ast);\n+        }\n+    }\n+\n+    /**\n+     * Method for reporting if a maximum has been exceeded.\n+     *\n+     * @param max the maximum allowed value\n+     * @param value the actual value\n+     * @param msg the message to log. Takes two arguments of value and maximum.\n+     * @param ast the AST to associate with the message.\n+     */\n+    private void checkMax(int max, int value, String msg, DetailAST ast) {\n+        if (max < value) {\n+            log(ast, msg, value, max);\n+        }\n+    }\n+\n+    /**\n+     * Counter class used to track the scope of the record definition and the number of\n+     * components in the record component list.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4Nzg4OQ=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDI4NTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNzo0NzowNVrOG91Mpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0MjowOFrOG_Cd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NzkxMA==", "bodyText": "Extra blank line in the end of the comment", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r467487910", "createdAt": "2020-08-08T17:47:05Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1Mzg4MQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r468753881", "createdAt": "2020-08-11T17:42:08Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,356 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPackage} - Specify the maximum number of {@code package} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxProtected} - Specify the maximum number of {@code protected} components\n+ * allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code maxPublic} - Specify the maximum number of {@code public} components allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all scope levels for a record definition:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxPackage\" value=\"5\"/&gt;\n+ *   &lt;property name=\"maxProtected\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxPrivate\" value=\"3\"/&gt;\n+ *   &lt;property name=\"maxPublic\" value=\"10\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.packageComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.privateComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.protectedComponents}\n+ * </li>\n+ * <li>\n+ * {@code too.many.publicComponents}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PRIVATE_COMPONENTS = \"too.many.privateComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PACKAGE_COMPONENTS = \"too.many.packageComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PROTECTED_COMPONENTS = \"too.many.protectedComponents\";\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_PUBLIC_COMPONENTS = \"too.many.publicComponents\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of {@code private} components allowed. */\n+    private int maxPrivate = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code package} components allowed. */\n+    private int maxPackage = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code protected} components allowed. */\n+    private int maxProtected = DEFAULT_MAX_COMPONENTS;\n+    /** Specify the maximum number of {@code public} components allowed. */\n+    private int maxPublic = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Setter to specify the maximum number of {@code private} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPrivate(int value) {\n+        maxPrivate = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code package} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPackage(int value) {\n+        maxPackage = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code protected} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxProtected(int value) {\n+        maxProtected = value;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of {@code public} components allowed.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxPublic(int value) {\n+        maxPublic = value;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NzkxMA=="}, "originalCommit": {"oid": "30418fdfc7295981ad166a7282ecfc5c1969eee4"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzU0NTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxNzowNVrOHExRGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNjowOToyMlrOHFC5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MzU0Ng==", "bodyText": "it confuse me. I read it as max value of private components in record.\ndid you mean ?\n Property {@code maxInPrivateRecord} - Specify the maximum number of components allowed in {@code private} records.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r474763546", "createdAt": "2020-08-21T15:17:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,345 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e49ca3e9b23884f19c95994a04142d4040c6f28"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1MjQwNQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r475052405", "createdAt": "2020-08-22T06:09:22Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,345 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.Scope;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxPrivate} - Specify the maximum number of {@code private} components allowed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MzU0Ng=="}, "originalCommit": {"oid": "4e49ca3e9b23884f19c95994a04142d4040c6f28"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjU5NzQ0OnYy", "diffSide": "RIGHT", "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber2.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzozNTowOFrOHGECqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowMzozNFrOHGHrGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExOTcyMg==", "bodyText": "maxComponents", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476119722", "createdAt": "2020-08-25T03:35:08Z", "author": {"login": "romani"}, "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber2.java", "diffHunk": "@@ -0,0 +1,13 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+/* Config:\n+ * maxPublic = 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1ODQyMw==", "bodyText": "maxComponents -> max", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476158423", "createdAt": "2020-08-25T04:31:12Z", "author": {"login": "nmancus1"}, "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber2.java", "diffHunk": "@@ -0,0 +1,13 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+/* Config:\n+ * maxPublic = 10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExOTcyMg=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTIyNw==", "bodyText": "Not done", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476179227", "createdAt": "2020-08-25T05:03:34Z", "author": {"login": "romani"}, "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber2.java", "diffHunk": "@@ -0,0 +1,13 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+/* Config:\n+ * maxPublic = 10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExOTcyMg=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjYwNjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzozNzoyMlrOHGEINA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDozMTowMlrOHGGZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMTE0MA==", "bodyText": "Other properties like this just named max", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476121140", "createdAt": "2020-08-25T03:37:22Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1ODI5NQ==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476158295", "createdAt": "2020-08-25T04:31:02Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMTE0MA=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjYxNDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzozOToyMFrOHGENyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNjo1OVrOHGXMYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMjU3MA==", "bodyText": "Please move this to visitToken method, we should see logic in that method", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476122570", "createdAt": "2020-08-25T03:39:20Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {\n+        maxComponents = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+\n+        counter.setAccessModifierOption(getAccessModifier(ast));\n+\n+        TokenUtil.forEachChild(recordComponents,\n+                TokenTypes.RECORD_COMPONENT_DEF, node -> counter.increment());\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        if (matchAccessModifiers(counter.getAccessModifierOption())\n+                && counter.getTotal() > maxComponents) {\n+            log(ast, MSG_KEY, counter.getTotal(), maxComponents);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1ODE4MA==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476158180", "createdAt": "2020-08-25T04:30:52Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {\n+        maxComponents = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+\n+        counter.setAccessModifierOption(getAccessModifier(ast));\n+\n+        TokenUtil.forEachChild(recordComponents,\n+                TokenTypes.RECORD_COMPONENT_DEF, node -> counter.increment());\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        if (matchAccessModifiers(counter.getAccessModifierOption())\n+                && counter.getTotal() > maxComponents) {\n+            log(ast, MSG_KEY, counter.getTotal(), maxComponents);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMjU3MA=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzUwNQ==", "bodyText": "Improved further.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476433505", "createdAt": "2020-08-25T13:06:59Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {\n+        maxComponents = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);\n+\n+        // Check counter and report violations\n+        checkCounter(counter, ast);\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param counter the ComponentCounter instance for this check\n+     * @param ast the ast to check\n+     */\n+    private static void countComponents(ComponentCounter counter, DetailAST ast) {\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+\n+        counter.setAccessModifierOption(getAccessModifier(ast));\n+\n+        TokenUtil.forEachChild(recordComponents,\n+                TokenTypes.RECORD_COMPONENT_DEF, node -> counter.increment());\n+\n+    }\n+\n+    /**\n+     * Check the counter and report violations.\n+     *\n+     * @param counter the component counter to check\n+     * @param ast to report violations against.\n+     */\n+    private void checkCounter(ComponentCounter counter, DetailAST ast) {\n+        if (matchAccessModifiers(counter.getAccessModifierOption())\n+                && counter.getTotal() > maxComponents) {\n+            log(ast, MSG_KEY, counter.getTotal(), maxComponents);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMjU3MA=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjYxODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzo0MDoyMVrOHGEQsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNjozOVrOHGXLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMzMxNQ==", "bodyText": "Return a value from this method", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476123315", "createdAt": "2020-08-25T03:40:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {\n+        maxComponents = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1ODA3MA==", "bodyText": "I've returned a ComponentCounter, so that we can also track the access modifier associated with the components we are counting.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476158070", "createdAt": "2020-08-25T04:30:43Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {\n+        maxComponents = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMzMxNQ=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzMyNA==", "bodyText": "now returning an int, fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476433324", "createdAt": "2020-08-25T13:06:39Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,298 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code maxComponents} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"maxComponents\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int maxComponents = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMaxComponents(int value) {\n+        maxComponents = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Instantiate new component counter\n+        final ComponentCounter counter = new ComponentCounter();\n+\n+        // Count record components in this record definition\n+        countComponents(counter, ast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyMzMxNQ=="}, "originalCommit": {"oid": "33f125bf6434ee48d083d995f2f800da619a55a3"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk0MDkxOnYy", "diffSide": "RIGHT", "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowMjo0OVrOHGHqZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNzozN1rOHGXNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTA0Nw==", "bodyText": "?", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476179047", "createdAt": "2020-08-25T05:02:49Z", "author": {"login": "romani"}, "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber1.java", "diffHunk": "@@ -0,0 +1,18 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+/* Config:\n+ * maxPublic = 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "019eb82b788086963d9ea34017e58db8feb72766"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzgzNw==", "bodyText": "Got sleep, and fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476433837", "createdAt": "2020-08-25T13:07:37Z", "author": {"login": "nmancus1"}, "path": "src/it/resources-noncompilable/org/checkstyle/suppressionxpathfilter/recordcomponentnumber/SuppressionXpathRecordComponentNumber1.java", "diffHunk": "@@ -0,0 +1,18 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+/* Config:\n+ * maxPublic = 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTA0Nw=="}, "originalCommit": {"oid": "019eb82b788086963d9ea34017e58db8feb72766"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk0Mzk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowNDo0NVrOHGHsUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNTozNlrOHGXJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTUzNg==", "bodyText": "Do not even count if modifier is not matching", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476179536", "createdAt": "2020-08-25T05:04:45Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,288 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Count record components in this record definition\n+        final ComponentCounter counter = countComponents(ast);\n+\n+        // Check counter and report violations\n+        if (matchAccessModifiers(counter.getAccessModifierOption())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "019eb82b788086963d9ea34017e58db8feb72766"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjY2MA==", "bodyText": "Much better, done.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476432660", "createdAt": "2020-08-25T13:05:36Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,288 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Count record components in this record definition\n+        final ComponentCounter counter = countComponents(ast);\n+\n+        // Check counter and report violations\n+        if (matchAccessModifiers(counter.getAccessModifierOption())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTUzNg=="}, "originalCommit": {"oid": "019eb82b788086963d9ea34017e58db8feb72766"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk0NjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowNTo0NlrOHGHtgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNTo0N1rOHGXJlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTg0Mw==", "bodyText": "Please remove this class, to just count you need single variable.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476179843", "createdAt": "2020-08-25T05:05:46Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,288 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Count record components in this record definition\n+        final ComponentCounter counter = countComponents(ast);\n+\n+        // Check counter and report violations\n+        if (matchAccessModifiers(counter.getAccessModifierOption())\n+            && counter.getTotal() > max) {\n+            log(ast, MSG_KEY, counter.getTotal(), max);\n+        }\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param ast the ast to check\n+     * @return instance of component counter with count of components and\n+     *     access modifier of record definition.\n+     */\n+    private static ComponentCounter countComponents(DetailAST ast) {\n+        final ComponentCounter counter = new ComponentCounter();\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+\n+        counter.setAccessModifierOption(getAccessModifier(ast));\n+\n+        TokenUtil.forEachChild(recordComponents,\n+                TokenTypes.RECORD_COMPONENT_DEF, node -> counter.increment());\n+\n+        return counter;\n+    }\n+\n+    /**\n+     * Returns the access modifier of the record definition at the specified AST. If\n+     * the record definition is in an interface or annotation block,\n+     * the access modifier is assumed to be public.\n+     *\n+     * @param ast the token of the method/constructor.\n+     * @return the access modifier of the method/constructor.\n+     */\n+    private static AccessModifierOption getAccessModifier(final DetailAST ast) {\n+        final DetailAST modsToken = ast.findFirstToken(TokenTypes.MODIFIERS);\n+        return CheckUtil.getAccessModifierFromModifiersToken(modsToken);\n+    }\n+\n+    /**\n+     * Checks whether a record definition has the correct access modifier to be checked.\n+     *\n+     * @param accessModifier the access modifier of the record definition.\n+     * @return whether the record definition matches the expected access modifier.\n+     */\n+    private boolean matchAccessModifiers(final AccessModifierOption accessModifier) {\n+        return Arrays.stream(accessModifiers)\n+                .anyMatch(modifier -> modifier == accessModifier);\n+    }\n+\n+    /**\n+     * Counter class used to track the access modifier of the record definition and the number of\n+     * components in the record component list.\n+     */\n+    private static class ComponentCounter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "019eb82b788086963d9ea34017e58db8feb72766"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjc4OQ==", "bodyText": "Removed, thank you.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476432789", "createdAt": "2020-08-25T13:05:47Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,288 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Count record components in this record definition\n+        final ComponentCounter counter = countComponents(ast);\n+\n+        // Check counter and report violations\n+        if (matchAccessModifiers(counter.getAccessModifierOption())\n+            && counter.getTotal() > max) {\n+            log(ast, MSG_KEY, counter.getTotal(), max);\n+        }\n+    }\n+\n+    /**\n+     * Determine the visibility modifier, then iterate through the record component list\n+     * and increment the counter.\n+     *\n+     * @param ast the ast to check\n+     * @return instance of component counter with count of components and\n+     *     access modifier of record definition.\n+     */\n+    private static ComponentCounter countComponents(DetailAST ast) {\n+        final ComponentCounter counter = new ComponentCounter();\n+        final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+\n+        counter.setAccessModifierOption(getAccessModifier(ast));\n+\n+        TokenUtil.forEachChild(recordComponents,\n+                TokenTypes.RECORD_COMPONENT_DEF, node -> counter.increment());\n+\n+        return counter;\n+    }\n+\n+    /**\n+     * Returns the access modifier of the record definition at the specified AST. If\n+     * the record definition is in an interface or annotation block,\n+     * the access modifier is assumed to be public.\n+     *\n+     * @param ast the token of the method/constructor.\n+     * @return the access modifier of the method/constructor.\n+     */\n+    private static AccessModifierOption getAccessModifier(final DetailAST ast) {\n+        final DetailAST modsToken = ast.findFirstToken(TokenTypes.MODIFIERS);\n+        return CheckUtil.getAccessModifierFromModifiersToken(modsToken);\n+    }\n+\n+    /**\n+     * Checks whether a record definition has the correct access modifier to be checked.\n+     *\n+     * @param accessModifier the access modifier of the record definition.\n+     * @return whether the record definition matches the expected access modifier.\n+     */\n+    private boolean matchAccessModifiers(final AccessModifierOption accessModifier) {\n+        return Arrays.stream(accessModifiers)\n+                .anyMatch(modifier -> modifier == accessModifier);\n+    }\n+\n+    /**\n+     * Counter class used to track the access modifier of the record definition and the number of\n+     * components in the record component list.\n+     */\n+    private static class ComponentCounter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTg0Mw=="}, "originalCommit": {"oid": "019eb82b788086963d9ea34017e58db8feb72766"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODgxOTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo1ODo0NFrOHGZbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMjowM1rOHGdw-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MDE0MA==", "bodyText": "headers why in plural ?\nplease do singular.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476470140", "createdAt": "2020-08-25T13:58:44Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MTE3OA==", "bodyText": "Plural -> singular", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476541178", "createdAt": "2020-08-25T15:32:03Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MDE0MA=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODgyOTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowMDo0OFrOHGZhzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMTo1NFrOHGmFew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MTc1Nw==", "bodyText": "it would be awesome to find some link in jdk that explain what is \"header\"", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476471757", "createdAt": "2020-08-25T14:00:48Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDc5Nw==", "bodyText": "Linked.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540797", "createdAt": "2020-08-25T15:31:38Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MTc1Nw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTU3NA==", "bodyText": "please use http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.1\nto point closely to where it is mentioned.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476629574", "createdAt": "2020-08-25T17:46:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MTc1Nw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzNzQ3OQ==", "bodyText": "I agree, but it makes the line too long, or breaks the link in the javadoc. I couldn't figure out a way to \"continue the line\" like with \\ in bash.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476637479", "createdAt": "2020-08-25T17:59:42Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MTc1Nw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NTM1Mg==", "bodyText": "Fixed, I thought that Checkstyle would complain about line length > 100.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476675352", "createdAt": "2020-08-25T19:07:50Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MTc1Nw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NzQ5OQ==", "bodyText": "Check is skipping lines with http just for this reason", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476677499", "createdAt": "2020-08-25T19:11:54Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MTc1Nw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODgzMjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowMTozMlrOHGZjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMTozMVrOHGdvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MjIyMg==", "bodyText": "please add example of code for default config to should behavior on default config", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476472222", "createdAt": "2020-08-25T14:01:32Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzNjg4OQ==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476536889", "createdAt": "2020-08-25T15:26:14Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MjIyMg=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDcwNw==", "bodyText": "Added.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540707", "createdAt": "2020-08-25T15:31:31Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MjIyMg=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODgzNjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowMjoxNlrOHGZlpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMToyNlrOHGdu4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3Mjc0Mw==", "bodyText": "reuse getAcceptableTokens()", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476472743", "createdAt": "2020-08-25T14:02:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDY0Mw==", "bodyText": "Reused.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540643", "createdAt": "2020-08-25T15:31:26Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3Mjc0Mw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODg0MTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowMzoxNlrOHGZorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMToxOFrOHGduiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MzUxNw==", "bodyText": "remove comment, code is self descriptive", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476473517", "createdAt": "2020-08-25T14:03:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Check access modifier of record definition\n+        final DetailAST modifiers =\n+            ast.findFirstToken(TokenTypes.MODIFIERS);\n+        final AccessModifierOption accessModifier =\n+            CheckUtil.getAccessModifierFromModifiersToken(modifiers);\n+\n+        // If access modifier of record definition matches access modifier options,\n+        // count components", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDU1Mw==", "bodyText": "Removed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540553", "createdAt": "2020-08-25T15:31:18Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Check access modifier of record definition\n+        final DetailAST modifiers =\n+            ast.findFirstToken(TokenTypes.MODIFIERS);\n+        final AccessModifierOption accessModifier =\n+            CheckUtil.getAccessModifierFromModifiersToken(modifiers);\n+\n+        // If access modifier of record definition matches access modifier options,\n+        // count components", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MzUxNw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODg0MTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowMzoyM1rOHGZo_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMTowN1rOHGduCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MzU5OQ==", "bodyText": "removoe comment", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476473599", "createdAt": "2020-08-25T14:03:23Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Check access modifier of record definition\n+        final DetailAST modifiers =\n+            ast.findFirstToken(TokenTypes.MODIFIERS);\n+        final AccessModifierOption accessModifier =\n+            CheckUtil.getAccessModifierFromModifiersToken(modifiers);\n+\n+        // If access modifier of record definition matches access modifier options,\n+        // count components\n+        if (matchAccessModifiers(accessModifier)) {\n+            final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+            final int componentCount = countComponents(recordComponents);\n+\n+            // Check counter and report violations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDQyNw==", "bodyText": "Removed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540427", "createdAt": "2020-08-25T15:31:07Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Check access modifier of record definition\n+        final DetailAST modifiers =\n+            ast.findFirstToken(TokenTypes.MODIFIERS);\n+        final AccessModifierOption accessModifier =\n+            CheckUtil.getAccessModifierFromModifiersToken(modifiers);\n+\n+        // If access modifier of record definition matches access modifier options,\n+        // count components\n+        if (matchAccessModifiers(accessModifier)) {\n+            final DetailAST recordComponents =\n+                ast.findFirstToken(TokenTypes.RECORD_COMPONENTS);\n+            final int componentCount = countComponents(recordComponents);\n+\n+            // Check counter and report violations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3MzU5OQ=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODg0MzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowMzozOFrOHGZpxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMTowMFrOHGdtoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3Mzc5Nw==", "bodyText": "remvoe coment", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476473797", "createdAt": "2020-08-25T14:03:38Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Check access modifier of record definition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDMyMQ==", "bodyText": "Removed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540321", "createdAt": "2020-08-25T15:31:00Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,230 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the header of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed\n+ * in record definition headers.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck\n+public class RecordComponentNumberCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"too.many.components\";\n+\n+    /** Default maximum number of allowed components. */\n+    private static final int DEFAULT_MAX_COMPONENTS = 8;\n+\n+    /** Specify the maximum number of components allowed in record definition headers. */\n+    private int max = DEFAULT_MAX_COMPONENTS;\n+\n+    /**\n+     * Access modifiers of record definitions where the number\n+     * of record components should be checked.\n+     */\n+    private AccessModifierOption[] accessModifiers = {\n+        AccessModifierOption.PUBLIC,\n+        AccessModifierOption.PROTECTED,\n+        AccessModifierOption.PACKAGE,\n+        AccessModifierOption.PRIVATE,\n+    };\n+\n+    /**\n+     * Setter to specify the maximum number of components allowed in record definition headers.\n+     *\n+     * @param value the maximum allowed.\n+     */\n+    public void setMax(int value) {\n+        max = value;\n+    }\n+\n+    /**\n+     * Setter to access modifiers of record definitions where the number of record\n+     * components should be checked.\n+     *\n+     * @param accessModifiers access modifiers of record definitions which should be checked.\n+     */\n+    public void setAccessModifiers(AccessModifierOption... accessModifiers) {\n+        this.accessModifiers =\n+                Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getAcceptableTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {\n+            TokenTypes.RECORD_DEF,\n+        };\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        // Check access modifier of record definition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3Mzc5Nw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODg0NzAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowNDoyNlrOHGZsLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMDo0M1rOHGds4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3NDQxMw==", "bodyText": "if this is formattign refactoring , please move to  separate commit.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476474413", "createdAt": "2020-08-25T14:04:26Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -42,9 +42,9 @@ private ScopeUtil() {\n     public static Scope getScopeFromMods(DetailAST aMods) {\n         // default scope\n         Scope returnValue = Scope.PACKAGE;\n-        for (DetailAST token = aMods.getFirstChild(); token != null\n-                && returnValue == Scope.PACKAGE;\n-                token = token.getNextSibling()) {\n+        for (DetailAST token = aMods.getFirstChild();\n+                 token != null && returnValue == Scope.PACKAGE;\n+                 token = token.getNextSibling()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MDEzMQ==", "bodyText": "Reverted.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476540131", "createdAt": "2020-08-25T15:30:43Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -42,9 +42,9 @@ private ScopeUtil() {\n     public static Scope getScopeFromMods(DetailAST aMods) {\n         // default scope\n         Scope returnValue = Scope.PACKAGE;\n-        for (DetailAST token = aMods.getFirstChild(); token != null\n-                && returnValue == Scope.PACKAGE;\n-                token = token.getNextSibling()) {\n+        for (DetailAST token = aMods.getFirstChild();\n+                 token != null && returnValue == Scope.PACKAGE;\n+                 token = token.getNextSibling()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3NDQxMw=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODg1MTAxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_tr.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDowNToxMFrOHGZueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozMDoyNlrOHGdsEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3NTAwMA==", "bodyText": "re- formatting should be done in separate commit.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476475000", "createdAt": "2020-08-25T14:05:10Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_tr.properties", "diffHunk": "@@ -1,19 +1,14 @@\n #Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)\n-\n-executableStatementCount = Y\u00fcr\u00fct\u00fclebilir ifade say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-\n-maxLen.anonInner = \u0130simsiz i\u00e7 s\u0131n\u0131f uzunlu\u011fu  {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).\n-maxLen.file      = Dosya uzunlu\u011fu {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).\n-maxLen.method    = Metot uzunlu\u011fu {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).\n-\n-maxLineLen = Sat\u0131r {0,number,integer} de\u011ferinden daha uzun ({1,number,integer} de\u011fer bulundu).\n-\n-maxOuterTypes = Tan\u0131mlanan d\u0131\u015f t\u00fcr say\u0131s\u0131  {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-\n-maxParam = {0,number,integer} de\u011ferinden daha fazla parametre mevcut {1,number,integer} de\u011fer bulundu).\n-\n-too.many.methods          = Toplam metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.packageMethods   = Toplam ''package'' eri\u015fimli metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.privateMethods   = Toplam ''private'' metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.protectedMethods = Toplam ''protected'' metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.publicMethods    = Toplam ''public'' metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n+executableStatementCount=Y\u00fcr\u00fct\u00fclebilir ifade say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n+maxLen.anonInner=\u0130simsiz i\u00e7 s\u0131n\u0131f uzunlu\u011fu  {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzOTkyMA==", "bodyText": "Fixed, it was automatic formatting by Intellij that I missed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476539920", "createdAt": "2020-08-25T15:30:26Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_tr.properties", "diffHunk": "@@ -1,19 +1,14 @@\n #Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)\n-\n-executableStatementCount = Y\u00fcr\u00fct\u00fclebilir ifade say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-\n-maxLen.anonInner = \u0130simsiz i\u00e7 s\u0131n\u0131f uzunlu\u011fu  {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).\n-maxLen.file      = Dosya uzunlu\u011fu {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).\n-maxLen.method    = Metot uzunlu\u011fu {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).\n-\n-maxLineLen = Sat\u0131r {0,number,integer} de\u011ferinden daha uzun ({1,number,integer} de\u011fer bulundu).\n-\n-maxOuterTypes = Tan\u0131mlanan d\u0131\u015f t\u00fcr say\u0131s\u0131  {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-\n-maxParam = {0,number,integer} de\u011ferinden daha fazla parametre mevcut {1,number,integer} de\u011fer bulundu).\n-\n-too.many.methods          = Toplam metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.packageMethods   = Toplam ''package'' eri\u015fimli metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.privateMethods   = Toplam ''private'' metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.protectedMethods = Toplam ''protected'' metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n-too.many.publicMethods    = Toplam ''public'' metot say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n+executableStatementCount=Y\u00fcr\u00fct\u00fclebilir ifade say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011fer {1,number,integer}).\n+maxLen.anonInner=\u0130simsiz i\u00e7 s\u0131n\u0131f uzunlu\u011fu  {0,number,integer} sat\u0131r (maksimum izin verilen de\u011fer {1,number,integer}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3NTAwMA=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODg4MjI1OnYy", "diffSide": "RIGHT", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/recordcomponentnumber/InputRecordComponentNumberDifferentMaxForScope.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoxMTowMFrOHGaBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToyOTo0M1rOHGdqIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3OTgxNA==", "bodyText": "lets avoid this.\nin future we will load config from this comment, this approach will complicate everything.\nsingle instance of Check should be used for file.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476479814", "createdAt": "2020-08-25T14:11:00Z", "author": {"login": "romani"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/recordcomponentnumber/InputRecordComponentNumberDifferentMaxForScope.java", "diffHunk": "@@ -0,0 +1,140 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+import java.awt.Point;\n+import java.awt.Shape;\n+import java.util.ArrayDeque;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import org.w3c.dom.Node;\n+\n+/* Config:\n+ *\n+ * public \"max\" = 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NjkzNA==", "bodyText": "Can I just remove this test then?  The point of this one was to prove that we can use multiple configs for different access modifiers.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476486934", "createdAt": "2020-08-25T14:20:29Z", "author": {"login": "nmancus1"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/recordcomponentnumber/InputRecordComponentNumberDifferentMaxForScope.java", "diffHunk": "@@ -0,0 +1,140 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+import java.awt.Point;\n+import java.awt.Shape;\n+import java.util.ArrayDeque;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import org.w3c.dom.Node;\n+\n+/* Config:\n+ *\n+ * public \"max\" = 5", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3OTgxNA=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MDQwNQ==", "bodyText": "yes, just  remove test", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476490405", "createdAt": "2020-08-25T14:24:57Z", "author": {"login": "romani"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/recordcomponentnumber/InputRecordComponentNumberDifferentMaxForScope.java", "diffHunk": "@@ -0,0 +1,140 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+import java.awt.Point;\n+import java.awt.Shape;\n+import java.util.ArrayDeque;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import org.w3c.dom.Node;\n+\n+/* Config:\n+ *\n+ * public \"max\" = 5", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3OTgxNA=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzOTQyNA==", "bodyText": "Removed and added  a new one, set to only \"private\" access modifier.  This was required for test coverage.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476539424", "createdAt": "2020-08-25T15:29:43Z", "author": {"login": "nmancus1"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/recordcomponentnumber/InputRecordComponentNumberDifferentMaxForScope.java", "diffHunk": "@@ -0,0 +1,140 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\n+\n+import java.awt.Point;\n+import java.awt.Shape;\n+import java.util.ArrayDeque;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import org.w3c.dom.Node;\n+\n+/* Config:\n+ *\n+ * public \"max\" = 5", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3OTgxNA=="}, "originalCommit": {"oid": "19cac768b89ed40f44678281a48deb477bba6b39"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTgzOTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0OToxNFrOHGjRDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowNzowMFrOHGl7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMTMxMA==", "bodyText": "it is stateless.\nstateless means ready for  Multithread mode (our future)", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476631310", "createdAt": "2020-08-25T17:49:14Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,241 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the\n+ * <a href=\"http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html\">\n+ * header</a> of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed in the header of a\n+ * record definition.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y) { // ok, 2 components\n+ *     ...\n+ * }\n+ *\n+ * record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data\n+ *                           String location, Date date, Image image) { // violation, 9 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac987d85d26984918ce27be4d25f678e1c8cae56"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NDkxMQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476674911", "createdAt": "2020-08-25T19:07:00Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,241 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the\n+ * <a href=\"http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html\">\n+ * header</a> of a record definition.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of components allowed in the header of a\n+ * record definition.\n+ * Type is {@code int}.\n+ * Default value is {@code 8}.\n+ * </li>\n+ * <li>\n+ * Property {@code accessModifiers} - Access modifiers of record definitions where\n+ * the number of record components should be checked.\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption[]}.\n+ * Default value is {@code public, protected, package, private}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y) { // ok, 2 components\n+ *     ...\n+ * }\n+ *\n+ * record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data\n+ *                           String location, Date date, Image image) { // violation, 9 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 5 record components at all access modifier levels\n+ * for record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, 3 components\n+ *     ...\n+ * }\n+ *\n+ * public record MyRecord2(int x, int y, String str,\n+ *                           Node node, Order order, Data data) { // violation, 6 components\n+ *     ...\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow 10 record components for a public record definition,\n+ * but 3 for private record definitions:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"3\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"private\"/&gt;\n+ * &lt;/module&gt;\n+ * &lt;module name=\"RecordComponentNumber\"&gt;\n+ *   &lt;property name=\"max\" value=\"10\"/&gt;\n+ *   &lt;property name=\"accessModifiers\" value=\"public\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Java code example:\n+ * </p>\n+ * <pre>\n+ * public record MyRecord1(int x, int y, String str) { // ok, public record definition allowed 10\n+ *     ...\n+ * }\n+ *\n+ * private record MyRecord2(int x, int y, String str, Node node) { // violation\n+ *     ...                                // private record definition allowed 3 components\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code too.many.components}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@FileStatefulCheck", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMTMxMA=="}, "originalCommit": {"oid": "ac987d85d26984918ce27be4d25f678e1c8cae56"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDI5ODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDowMjowMFrOHGnuXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDoyMjowMVrOHGoVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNDM0OA==", "bodyText": "https://docs.oracle.com/javase/specs/jls/se14/preview/specs/records-jls.html#jls-8.10.1\n?", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476704348", "createdAt": "2020-08-25T20:02:00Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,241 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the\n+ * <a href=\"http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.1\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40815f338b209478b7bf031fdec14b99c564052f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNTEyMg==", "bodyText": "#8595 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476705122", "createdAt": "2020-08-25T20:03:35Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,241 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the\n+ * <a href=\"http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.1\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNDM0OA=="}, "originalCommit": {"oid": "40815f338b209478b7bf031fdec14b99c564052f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNzY5MA==", "bodyText": "Your link will allow us to remove gbierman from whitelist.words,  I will change it.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476707690", "createdAt": "2020-08-25T20:08:38Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,241 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the\n+ * <a href=\"http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.1\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNDM0OA=="}, "originalCommit": {"oid": "40815f338b209478b7bf031fdec14b99c564052f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxNDI5MA==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8595#discussion_r476714290", "createdAt": "2020-08-25T20:22:01Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java", "diffHunk": "@@ -0,0 +1,241 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the number of record components in the\n+ * <a href=\"http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.1\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNDM0OA=="}, "originalCommit": {"oid": "40815f338b209478b7bf031fdec14b99c564052f"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 759, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}