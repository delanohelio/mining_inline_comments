{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDE0ODM0", "number": 7714, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzoxMzo0NFrODk2ckg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzo0NDowOVrODqHftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTY3Mzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzoxMzo0NFrOFxaEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNDo0Nzo1MVrOF9SVsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ==", "bodyText": "Please make example of default config and make note that by default Check do nothing. No code sample is required for default.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r387351659", "createdAt": "2020-03-03T23:13:44Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjA3OA==", "bodyText": "this is not done.\nhere is example on how to do this - \n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java\n    \n    \n         Line 64\n      in\n      d62ad1a\n    \n    \n    \n    \n\n        \n          \n            * <p>", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392596078", "createdAt": "2020-03-14T15:22:26Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyNzc4NA==", "bodyText": "this is mandatory !\nplease do.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392727784", "createdAt": "2020-03-15T23:47:02Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzOTE5Mg==", "bodyText": "@Malintha1996 , this is still not done.\nthere should be config like <module name=\"RegexpSingleline\" \\> (no properties defined)", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r396039192", "createdAt": "2020-03-21T23:38:36Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MDg2MQ==", "bodyText": "@Malintha1996 , this is still not done.\nthere should be config like <module name=\"RegexpSingleline\" \\> (no properties defined)\n\ndone", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r396190861", "createdAt": "2020-03-23T02:55:24Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MjM5MA==", "bodyText": "@Malintha1996 , please add text as\n\n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java\n    \n    \n        Lines 70 to 74\n      in\n      d62ad1a\n    \n    \n    \n    \n\n        \n          \n            * <p> \n        \n\n        \n          \n            *   This configuration does not match to anything, \n        \n\n        \n          \n            *   so we do not provide any code example for it \n        \n\n        \n          \n            *   as no violation will ever be reported. \n        \n\n        \n          \n            * </p> \n        \n    \n  \n\n\nas I requested originally, user need to see what is happening on default config usage.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r399672390", "createdAt": "2020-03-28T15:07:15Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MzQ0OQ==", "bodyText": "@Malintha1996 , please add text as\n\n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java\n    \n    \n        Lines 70 to 74\n      in\n      d62ad1a\n    \n    \n    \n    \n\n        \n          \n            * <p> \n        \n\n        \n          \n            *   This configuration does not match to anything, \n        \n\n        \n          \n            *   so we do not provide any code example for it \n        \n\n        \n          \n            *   as no violation will ever be reported. \n        \n\n        \n          \n            * </p> \n        \n    \n  \n\n\nas I requested originally, user need to see what is happening on default config usage.\n\ndone", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r399683449", "createdAt": "2020-03-28T16:49:06Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzkyMw==", "bodyText": "you have to keep To configure the check with default values\nplease do this exactly as it is in provided example.\nTo configure the check with default values:\nCONFIG\n....explanation why we can not show a code ....", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r399807923", "createdAt": "2020-03-29T14:47:51Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -70,6 +70,12 @@\n  *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MTY1OQ=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTY3OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzoxNjowNVrOFxaHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNDozNTo0OFrOFzMjrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MjQ4MA==", "bodyText": "Please review configs, and make sure all properties of Checks are showed in examples. You are ok to create new configs/samples for them.\nOne of property is file extension. So for config you should have two code blocks with definition of name outside of pre tag", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r387352480", "createdAt": "2020-03-03T23:16:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,8 +107,18 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyNzQzNg==", "bodyText": "@romani  made the changes. could you review them", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r389227436", "createdAt": "2020-03-07T04:35:48Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,8 +107,18 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MjQ4MA=="}, "originalCommit": {"oid": "9804ed3b7444e09ea490ddf02071bb3b9ea57da6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzIxNzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMTo1NDoxMVrOFzZIVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMjo0MjozOFrOF2ZZ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMzQyOQ==", "bodyText": "@since should not show up as having a difference. Please fix this. It looks like you added double space.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r389433429", "createdAt": "2020-03-09T01:54:11Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,8 +110,55 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n- * @since 5.0\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, as the file contains a copyright statement.\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;**\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // violation, as the file doesn't contain a copyright statement.\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, Check ignores the case of the term.\n+ * }\n+ * </pre>\n+ *  @since 5.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4MzYzOA==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392583638", "createdAt": "2020-03-14T12:42:38Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,8 +110,55 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n- * @since 5.0\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, as the file contains a copyright statement.\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;**\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // violation, as the file doesn't contain a copyright statement.\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, Check ignores the case of the term.\n+ * }\n+ * </pre>\n+ *  @since 5.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMzQyOQ=="}, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzIyMDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMTo1NzoxNlrOFzZKMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMjo0MjozMFrOF2ZZiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMzkwNQ==", "bodyText": "Violation message go on the same line as where the violation will be reported by util.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r389433905", "createdAt": "2020-03-09T01:57:16Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,22 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...\n+ *      private int myInt;...\n+ *      //Ok, as only two occurrences of trailing whitespace are available.\n+ * }\n+ * </pre>\n+ * <pre>\n+ * class MyClass {\n+ *     private String myString;...\n+ *     private int myInt;...\n+ *     public MyClass() {};...\n+ *     // violation, since more than two occurrences of trailing whitespace are available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4MzU2Mw==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392583563", "createdAt": "2020-03-14T12:42:30Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,22 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...\n+ *      private int myInt;...\n+ *      //Ok, as only two occurrences of trailing whitespace are available.\n+ * }\n+ * </pre>\n+ * <pre>\n+ * class MyClass {\n+ *     private String myString;...\n+ *     private int myInt;...\n+ *     public MyClass() {};...\n+ *     // violation, since more than two occurrences of trailing whitespace are available.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMzkwNQ=="}, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzIyMDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMTo1NzozMlrOFzZKUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMjo0MjoxN1rOF2ZZGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMzkzOA==", "bodyText": "Always have 1 space after comment and before text.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r389433938", "createdAt": "2020-03-09T01:57:32Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,22 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...\n+ *      private int myInt;...\n+ *      //Ok, as only two occurrences of trailing whitespace are available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4MzQ0OQ==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392583449", "createdAt": "2020-03-14T12:42:17Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,22 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...\n+ *      private int myInt;...\n+ *      //Ok, as only two occurrences of trailing whitespace are available.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMzkzOA=="}, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzIyMjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMTo1ODo0OFrOFzZLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMjo0MjowNVrOF2ZZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzNDE2Mw==", "bodyText": "All examples should have a \"good\" case and a \"bad\" case. Violation versus non-violation.\nViolation example should be first to show users this is how to make bad code good.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r389434163", "createdAt": "2020-03-09T01:58:48Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,8 +110,55 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n- * @since 5.0\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, as the file contains a copyright statement.\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;**\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // violation, as the file doesn't contain a copyright statement.\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, Check ignores the case of the term.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4MzQzMw==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392583433", "createdAt": "2020-03-14T12:42:05Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,8 +110,55 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n- * @since 5.0\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, as the file contains a copyright statement.\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;**\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // violation, as the file doesn't contain a copyright statement.\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ *      // Ok, Check ignores the case of the term.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzNDE2Mw=="}, "originalCommit": {"oid": "bf323d5a7b6fa9b83761411d496d7064bc4a133e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNjoyM1rOF2aIvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwODo0OTowNlrOF2drRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTY0NA==", "bodyText": "please remove \"...\" , examples should be compile-able, they might be weird in look and artificial, BUT they must be able to compile.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392595644", "createdAt": "2020-03-14T15:16:23Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTg5NQ==", "bodyText": "sure. How should I indicate trailing whitespace?", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392595895", "createdAt": "2020-03-14T15:20:14Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTY0NA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjM2Ng==", "bodyText": "// violation this line has trailing spaces", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392596366", "createdAt": "2020-03-14T15:27:30Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTY0NA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjQzMQ==", "bodyText": "Please update PR description and use javac on each example file, to make sure it pass.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392596431", "createdAt": "2020-03-14T15:28:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTY0NA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjgwMQ==", "bodyText": "got it. thanks.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392596801", "createdAt": "2020-03-14T15:33:17Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTY0NA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MzYzNg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392653636", "createdAt": "2020-03-15T08:49:06Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      private String myString;...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTY0NA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxNzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNzo0N1rOF2aJGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwODo0Nzo0MVrOF2dq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTczOA==", "bodyText": "please remove fields in such examples, lets keep user focus on what is target ... it is header.\nplease remove extra code from all other examples.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392595738", "createdAt": "2020-03-14T15:17:47Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License. // Ok, Check ignores the case of the term.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTk3NA==", "bodyText": "sure, will do", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392595974", "createdAt": "2020-03-14T15:21:00Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License. // Ok, Check ignores the case of the term.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTczOA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyNjU0MQ==", "bodyText": "Please avoid messages as \"I got it\" or \"I will\". It creates no meaning ntifications for me that I spend time to review all of them.\nPlease reply only \"done\" or some comment to get more details or discussion.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392626541", "createdAt": "2020-03-14T23:09:35Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License. // Ok, Check ignores the case of the term.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTczOA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MzU0NQ==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392653545", "createdAt": "2020-03-15T08:47:41Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * AP 2.0 License. // Ok, Check ignores the case of the term.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTczOA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMyMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyMzo0NFrOF2aKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwODo0ODo0NVrOF2drLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjE1MA==", "bodyText": "please make example for non-java file, make it for *.sql file for example.\nThis Check can work on any files (as Check has parent Checker) , https://checkstyle.org/config_regexp.html#RegexpSingleline , we need to show this to user.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392596150", "createdAt": "2020-03-14T15:23:44Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjQ5Nw==", "bodyText": "okay, I will make the changes soon", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392596497", "createdAt": "2020-03-14T15:29:22Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjE1MA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MzYxNA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392653614", "createdAt": "2020-03-15T08:48:45Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,60 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n- *\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n+ *      private String myString;\n+ *      private int myInt;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure java files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;\n+ *     &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n+ *     &lt;!--  Configure a message to be shown on violation of the Check. --&gt;\n+ *     &lt;property name=\"message\"\n+ *           value=\"File must contain at least one occurrence of 'license' term\"/&gt;\n+*      &lt;!--  Perform the Check only on files with java extension. --&gt;\n+ *     &lt;property name=\"fileExtensions\" value=\"java\"/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjE1MA=="}, "originalCommit": {"oid": "215a8780a55f0b04a7242a2ca809ec4dc5e4bcc3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDMxMTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMzo1OTo1NFrOF2iSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MDoyOVrOF3prUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTEwNQ==", "bodyText": "sorry this examples is  weird, and reason is weird config.\nLets change config to catch System.exit( to be no more than 1 per file.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392729105", "createdAt": "2020-03-15T23:59:54Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3ODEwMQ==", "bodyText": "This is an example configuration that already existed before I modified the doc. May I modify it.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392778101", "createdAt": "2020-03-16T04:32:29Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTEwNQ=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTU0Nw==", "bodyText": "yes, you can. Please do. We need example to be close to real life to show that Check is useful real life code problems.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r393725547", "createdAt": "2020-03-17T14:35:26Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTEwNQ=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5ODgzMg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r393898832", "createdAt": "2020-03-17T18:50:29Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -82,6 +82,20 @@\n  *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTEwNQ=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDMxMzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMDowMjoyMVrOF2iTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MTowOFrOF3pskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTM1Ng==", "bodyText": "why 10 ?\ncan we avoid this parameter?", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392729356", "createdAt": "2020-03-16T00:02:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,52 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n  *\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure sql files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MDk0OQ==", "bodyText": "I think if we specify a minimum we must specify a maximum as well since the default value for the maximum is 0.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r392780949", "createdAt": "2020-03-16T04:47:39Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,52 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n  *\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure sql files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTM1Ng=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5MTA3OQ==", "bodyText": "@romani will you review my comments?", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r393491079", "createdAt": "2020-03-17T07:42:05Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,52 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n  *\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure sql files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTM1Ng=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyOTU0NA==", "bodyText": "please make it 9999 to make it clear we do not care about max occurrences.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r393729544", "createdAt": "2020-03-17T14:40:56Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,52 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n  *\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure sql files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTM1Ng=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5OTE1NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r393899155", "createdAt": "2020-03-17T18:51:08Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -94,7 +108,52 @@\n  *   &lt;property name=\"maximum\" value=\"10\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * &#47;**\n+ * * This file is copyrighted under CC. // Ok, as the file contains a copyright statement.\n+ * *&#47;\n+ * class MyClass {\n+ *\n+ * }\n+ * </pre>\n+ * <pre>\n+ * &#47;** // violation, as the file doesn't contain a copyright statement.\n+ * * MyClass as a configuration example.\n+ * *&#47;\n+ * class MyClass {\n  *\n+ * }\n+ * </pre>\n+ * <p>\n+ *  An example of how to configure the check to make sure sql files contains the term 'license'.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RegexpSingleline\"&gt;\n+ *     &lt;property name=\"format\" value=\"license\"/&gt;\n+ *     &lt;property name=\"minimum\" value=\"1\"/&gt;\n+ *     &lt;property name=\"maximum\" value=\"10\"/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcyOTM1Ng=="}, "originalCommit": {"oid": "0c82df5401dd35bcd6e5d1cc73b24a6803960a24"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDg5NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMzo0NDowOVrOF5sVbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo1NTowNVrOF51kVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzOTUzNQ==", "bodyText": "please move  System.exit(0) to be after doSomething.", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r396039535", "createdAt": "2020-03-21T23:44:09Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -71,17 +71,46 @@\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * To configure the check to find trailing whitespace at the end of a line,\n- * with some <i>slack</i> of allowing two occurrences per file:\n+ * To configure the check to find occurrences of 'System.exit('\n+ * with some <i>slack</i> of allowing only one occurrence per file:\n  * </p>\n  * <pre>\n  * &lt;module name=\"RegexpSingleline\"&gt;\n- *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n+ *   &lt;property name=\"format\" value=\"System.exit\\(\"/&gt;\n  *   &lt;!-- next line not required as 0 is the default --&gt;\n  *   &lt;property name=\"minimum\" value=\"0\"/&gt;\n- *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n+ *   &lt;property name=\"maximum\" value=\"1\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      void myFunction() {\n+ *          try{\n+ *             doSomething();\n+ *          } catch (Exception e) {\n+ *             System.exit(1) // OK, as only there is only one occurrence.\n+ *          } finally {\n+ *              System.println(\"success!\")\n+ *          }\n+ *      }\n+ *      void doSomething(){};\n+ * }\n+ * </pre>\n+ * <pre>\n+ * class MyClass {\n+ *     void myFunction() {\n+ *         try{\n+ *             doSomething();\n+ *         } catch (Exception e) {\n+ *             System.exit(1)\n+ *         } finally {\n+ *             System.exit(0) // violation, as there are more than one occurrence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3000807a19e44b96cc38fe753c5510e2cb30fd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MDgwNQ==", "bodyText": "please move  System.exit(0) to be after doSomething.\n\ndone", "url": "https://github.com/checkstyle/checkstyle/pull/7714#discussion_r396190805", "createdAt": "2020-03-23T02:55:05Z", "author": {"login": "malinthar"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "diffHunk": "@@ -71,17 +71,46 @@\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * To configure the check to find trailing whitespace at the end of a line,\n- * with some <i>slack</i> of allowing two occurrences per file:\n+ * To configure the check to find occurrences of 'System.exit('\n+ * with some <i>slack</i> of allowing only one occurrence per file:\n  * </p>\n  * <pre>\n  * &lt;module name=\"RegexpSingleline\"&gt;\n- *   &lt;property name=\"format\" value=\"\\s+$\"/&gt;\n+ *   &lt;property name=\"format\" value=\"System.exit\\(\"/&gt;\n  *   &lt;!-- next line not required as 0 is the default --&gt;\n  *   &lt;property name=\"minimum\" value=\"0\"/&gt;\n- *   &lt;property name=\"maximum\" value=\"2\"/&gt;\n+ *   &lt;property name=\"maximum\" value=\"1\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * class MyClass {\n+ *      void myFunction() {\n+ *          try{\n+ *             doSomething();\n+ *          } catch (Exception e) {\n+ *             System.exit(1) // OK, as only there is only one occurrence.\n+ *          } finally {\n+ *              System.println(\"success!\")\n+ *          }\n+ *      }\n+ *      void doSomething(){};\n+ * }\n+ * </pre>\n+ * <pre>\n+ * class MyClass {\n+ *     void myFunction() {\n+ *         try{\n+ *             doSomething();\n+ *         } catch (Exception e) {\n+ *             System.exit(1)\n+ *         } finally {\n+ *             System.exit(0) // violation, as there are more than one occurrence.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzOTUzNQ=="}, "originalCommit": {"oid": "6c3000807a19e44b96cc38fe753c5510e2cb30fd"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1376, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}