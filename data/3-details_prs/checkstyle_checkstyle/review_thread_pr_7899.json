{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwODAwOTYw", "number": 7899, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1Nzo1M1rODp7Kew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1OTo0NFrODp7NRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjg3NTQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1Nzo1M1rOF5Zo4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo1NDozNlrOF7kzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzIxOQ==", "bodyText": "Please ensure we have cases where there will be a violation and the violation shows the correct information.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r395733219", "createdAt": "2020-03-20T15:57:53Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "diffHunk": "@@ -1759,6 +1759,16 @@ public void testLambda2() throws Exception {\n         verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n     }\n \n+    @Test\n+    public void testLambda3() throws Exception {\n+        final DefaultConfiguration checkConfig = createModuleConfig(IndentationCheck.class);\n+        checkConfig.addAttribute(\"tabWidth\", \"4\");\n+        checkConfig.addAttribute(\"basicOffset\", \"4\");\n+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"8\");\n+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n+        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwMjkyOQ==", "bodyText": "Already done.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r396102929", "createdAt": "2020-03-22T14:57:56Z", "author": {"login": "liach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "diffHunk": "@@ -1759,6 +1759,16 @@ public void testLambda2() throws Exception {\n         verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n     }\n \n+    @Test\n+    public void testLambda3() throws Exception {\n+        final DefaultConfiguration checkConfig = createModuleConfig(IndentationCheck.class);\n+        checkConfig.addAttribute(\"tabWidth\", \"4\");\n+        checkConfig.addAttribute(\"basicOffset\", \"4\");\n+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"8\");\n+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n+        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzIxOQ=="}, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM5MDc2Nw==", "bodyText": "What happened to the file with no violations? We should have both good cases and bad cases. Also ensure that the case from the issue is part of the UTs.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r396390767", "createdAt": "2020-03-23T11:44:27Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "diffHunk": "@@ -1759,6 +1759,16 @@ public void testLambda2() throws Exception {\n         verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n     }\n \n+    @Test\n+    public void testLambda3() throws Exception {\n+        final DefaultConfiguration checkConfig = createModuleConfig(IndentationCheck.class);\n+        checkConfig.addAttribute(\"tabWidth\", \"4\");\n+        checkConfig.addAttribute(\"basicOffset\", \"4\");\n+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"8\");\n+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n+        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzIxOQ=="}, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NjkxOA==", "bodyText": "Added back, waiting for ci for now.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r397586918", "createdAt": "2020-03-25T03:16:25Z", "author": {"login": "liach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "diffHunk": "@@ -1759,6 +1759,16 @@ public void testLambda2() throws Exception {\n         verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n     }\n \n+    @Test\n+    public void testLambda3() throws Exception {\n+        final DefaultConfiguration checkConfig = createModuleConfig(IndentationCheck.class);\n+        checkConfig.addAttribute(\"tabWidth\", \"4\");\n+        checkConfig.addAttribute(\"basicOffset\", \"4\");\n+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"8\");\n+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n+        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzIxOQ=="}, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxMzIxMw==", "bodyText": "Done, ci build now passes.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r398013213", "createdAt": "2020-03-25T16:54:36Z", "author": {"login": "liach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "diffHunk": "@@ -1759,6 +1759,16 @@ public void testLambda2() throws Exception {\n         verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n     }\n \n+    @Test\n+    public void testLambda3() throws Exception {\n+        final DefaultConfiguration checkConfig = createModuleConfig(IndentationCheck.class);\n+        checkConfig.addAttribute(\"tabWidth\", \"4\");\n+        checkConfig.addAttribute(\"basicOffset\", \"4\");\n+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"8\");\n+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n+        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzIxOQ=="}, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjg4MjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1OTo0NFrOF5Ztqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjowMjowOVrOF5ZzVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNDQ0Mw==", "bodyText": "Change looks good but from #7675 (comment) :\n\nLambda does not start the line and should not have been the one reporting the problem if the indentation was wrong.\n\nWas my initial analysis wrong and we are already ensuring the AST we are checking does start the line? One way to check this would be to turn on forceStrictCondition.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r395734443", "createdAt": "2020-03-20T15:59:44Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java", "diffHunk": "@@ -66,7 +66,7 @@ protected IndentLevel getIndentImpl() {\n         // If the start of the lambda is the first element on the line;\n         // assume line wrapping with respect to its parent.\n         final DetailAST firstChild = getMainAst().getFirstChild();\n-        if (getLineStart(firstChild) == firstChild.getColumnNo()) {\n+        if (getLineStart(firstChild) == expandedTabsColumnNo(firstChild)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNTcxMg==", "bodyText": "Ignore this. The left is getting the start of the line and ensuring it matches.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r395735712", "createdAt": "2020-03-20T16:01:51Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java", "diffHunk": "@@ -66,7 +66,7 @@ protected IndentLevel getIndentImpl() {\n         // If the start of the lambda is the first element on the line;\n         // assume line wrapping with respect to its parent.\n         final DetailAST firstChild = getMainAst().getFirstChild();\n-        if (getLineStart(firstChild) == firstChild.getColumnNo()) {\n+        if (getLineStart(firstChild) == expandedTabsColumnNo(firstChild)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNDQ0Mw=="}, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNTg5NQ==", "bodyText": "Imo your analysis is wrong. getLineStart returns a tab expanded column number while firstChild.getColumnNo counts tab as single-width.", "url": "https://github.com/checkstyle/checkstyle/pull/7899#discussion_r395735895", "createdAt": "2020-03-20T16:02:09Z", "author": {"login": "liach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java", "diffHunk": "@@ -66,7 +66,7 @@ protected IndentLevel getIndentImpl() {\n         // If the start of the lambda is the first element on the line;\n         // assume line wrapping with respect to its parent.\n         final DetailAST firstChild = getMainAst().getFirstChild();\n-        if (getLineStart(firstChild) == firstChild.getColumnNo()) {\n+        if (getLineStart(firstChild) == expandedTabsColumnNo(firstChild)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNDQ0Mw=="}, "originalCommit": {"oid": "759f0db7f48a56bdef86eaa9416fbc9411cc8701"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1227, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}