{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjAwNDc2", "number": 7955, "title": "Issue #7473: JavadocMethod: false positive with validateThrows", "bodyText": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method\nLogic has been tweaked as follows:\n\nFor every use of the throws literal, check the AST node's ancestors to see where it comes from\nIf we find that it is from a lambda or try block, we disregard that node. Update: Local and anonymous classes defined in the method will also be ignored.\ncatch and finally literals are considered children of the try literal. However they should not be ignored because exceptions can be thrown there that go uncaught. Hence if we encounter catch and finally on the way up then we need to 'skip' the next ancestor (the try literal).\n\nRegression: https://wltan.github.io/checkstyle-reports/2020-04-20/javadocmethod-throws/index (updated)", "createdAt": "2020-03-24T18:59:26Z", "url": "https://github.com/checkstyle/checkstyle/pull/7955", "merged": true, "mergeCommit": {"oid": "050c68d3cce4e8f6486681ae8a15e146b6897c5b"}, "closed": true, "closedAt": "2020-04-29T12:29:02Z", "author": {"login": "wltan"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ_opMgBqjMxNjI0MTQ3MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccXpP9AFqTQwMjYxNzQwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5531a80e640a1bf4445c2f44777392400dff88c8", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5531a80e640a1bf4445c2f44777392400dff88c8", "committedDate": "2020-03-24T14:37:51Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method"}, "afterCommit": {"oid": "7a5698cc1153cec24078c4c0e3c52be269d5bc51", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7a5698cc1153cec24078c4c0e3c52be269d5bc51", "committedDate": "2020-03-25T04:16:44Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDg4NTQy", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-382488542", "createdAt": "2020-03-26T23:28:22Z", "commit": {"oid": "7a5698cc1153cec24078c4c0e3c52be269d5bc51"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyODoyM1rOF8eD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozMjowOFrOF8eJKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTQyMg==", "bodyText": "DetailAST ancestor = throwAst;\n\n-->\nDetailAST ancestor = throwAst.getParent();\n\nWe do not need to check throw AST itself in while as I understand", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r398951422", "createdAt": "2020-03-26T23:28:23Z", "author": {"login": "baratali"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -701,12 +701,29 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                DetailAST ancestor = throwAst;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a5698cc1153cec24078c4c0e3c52be269d5bc51"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Mjc0Nw==", "bodyText": "It's better to extract this part to a method. And I would rename blockAst to methodBodyAst (or something similar).\nAnd then:\nif (!isInTryOrLambda(methodBodyAst, throwAst)) {\n...\n}", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r398952747", "createdAt": "2020-03-26T23:32:08Z", "author": {"login": "baratali"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -701,12 +701,29 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                DetailAST ancestor = throwAst;\n+                while (ancestor != blockAst) {\n+                    if (ancestor.getType() == TokenTypes.LITERAL_TRY\n+                            || ancestor.getType() == TokenTypes.LAMBDA) {\n+                        // if the throw is inside a try block or lambda, ignore it\n+                        break;\n+                    }\n+                    if (ancestor.getType() == TokenTypes.LITERAL_CATCH\n+                            || ancestor.getType() == TokenTypes.LITERAL_FINALLY) {\n+                        // if the throw is inside a catch or finally block,\n+                        // skip the immediate ancestor (try token)\n+                        ancestor = ancestor.getParent();\n+                    }\n+                    ancestor = ancestor.getParent();\n+                }\n+                if (ancestor == blockAst) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a5698cc1153cec24078c4c0e3c52be269d5bc51"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a5698cc1153cec24078c4c0e3c52be269d5bc51", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7a5698cc1153cec24078c4c0e3c52be269d5bc51", "committedDate": "2020-03-25T04:16:44Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method"}, "afterCommit": {"oid": "6b89b3666871547f3cd61fcdb163e6a284fa8025", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6b89b3666871547f3cd61fcdb163e6a284fa8025", "committedDate": "2020-03-27T12:06:04Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b89b3666871547f3cd61fcdb163e6a284fa8025", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6b89b3666871547f3cd61fcdb163e6a284fa8025", "committedDate": "2020-03-27T12:06:04Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method"}, "afterCommit": {"oid": "6b37779e37526001b87ee13d165a29069c4c07fb", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6b37779e37526001b87ee13d165a29069c4c07fb", "committedDate": "2020-03-27T14:03:29Z", "message": "minor: typo in exceptionInfo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzM1NDYy", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-383335462", "createdAt": "2020-03-28T18:04:55Z", "commit": {"oid": "6b37779e37526001b87ee13d165a29069c4c07fb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b37779e37526001b87ee13d165a29069c4c07fb", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6b37779e37526001b87ee13d165a29069c4c07fb", "committedDate": "2020-03-27T14:03:29Z", "message": "minor: typo in exceptionInfo"}, "afterCommit": {"oid": "812601d228334ca2fb2608463d6366cb6a2e1ff2", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/812601d228334ca2fb2608463d6366cb6a2e1ff2", "committedDate": "2020-03-29T05:35:03Z", "message": "minor: typo in exceptionInfo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "812601d228334ca2fb2608463d6366cb6a2e1ff2", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/812601d228334ca2fb2608463d6366cb6a2e1ff2", "committedDate": "2020-03-29T05:35:03Z", "message": "minor: typo in exceptionInfo"}, "afterCommit": {"oid": "353d3e5354f81cc26264edcf777977cf016a701f", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/353d3e5354f81cc26264edcf777977cf016a701f", "committedDate": "2020-03-29T05:39:32Z", "message": "minor: typo in exceptionInfo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "353d3e5354f81cc26264edcf777977cf016a701f", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/353d3e5354f81cc26264edcf777977cf016a701f", "committedDate": "2020-03-29T05:39:32Z", "message": "minor: typo in exceptionInfo"}, "afterCommit": {"oid": "a39a36058db911c150b8150b83094fa9477909c5", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a39a36058db911c150b8150b83094fa9477909c5", "committedDate": "2020-03-29T07:15:25Z", "message": "minor: typo in exceptionInfo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MTU3NDUx", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-385157451", "createdAt": "2020-03-31T22:48:08Z", "commit": {"oid": "92b4f931fc78cceb7c4a0ef46f506284338c0248"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo0ODowOFrOF-q85A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo1MTo0MlrOF-rBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1OTc0OA==", "bodyText": "Please rename method to state that we check only try with catch.\nisInTryWithCatchOrLambda or isInTryCatchOrLambda or something else", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r401259748", "createdAt": "2020-03-31T22:48:08Z", "author": {"login": "baratali"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -701,18 +701,48 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                if (!isInTryOrLambda(blockAst, throwAst)) {\n+                    final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n+                    if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n+                        final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n+                        final ExceptionInfo exceptionInfo = new ExceptionInfo(\n+                                createClassInfo(new Token(ident), currentClassName));\n+                        returnValue.add(exceptionInfo);\n+                    }\n                 }\n             }\n         }\n         return returnValue;\n     }\n \n+    /**\n+     * Checks if a 'throw' usage is contained within a try block or lambda expression.\n+     * Note that a try block without catch is not considered.\n+     * @param methodBodyAst DetailAST node representing the method body\n+     * @param throwAst DetailAST node representing the 'throw' literal\n+     * @return true if throwAst is inside a try block or lambda\n+     */\n+    private static boolean isInTryOrLambda(DetailAST methodBodyAst, DetailAST throwAst) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b4f931fc78cceb7c4a0ef46f506284338c0248"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MDk3Mg==", "bodyText": "you should throw exception from try to test the check", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r401260972", "createdAt": "2020-03-31T22:51:42Z", "author": {"login": "baratali"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodIgnoreThrows.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmethod;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+\n+public class InputJavadocMethodIgnoreThrows {\n+\n+   /**\n+     * Ignore try block, but keep catch and finally blocks.\n+     *\n+     * @param s String to parse\n+     * @return A positive integer\n+     */\n+    private static int parsePositiveInt(String s) {\n+        try {\n+            int value = Integer.parseInt(s);\n+            if (value <= 0) {\n+                throw new NumberFormatException(value + \" is negative/zero\"); // ok, try\n+            }\n+            return value;\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalArgumentException(\"Invalid number\", ex); // violation, catch\n+        } finally {\n+            throw new IllegalStateException(\"Should never reach here\"); // violation, finally\n+        }\n+    }\n+\n+    /**\n+     * Ignore everything inside lambda.\n+     *\n+     * @param maxLength Max length\n+     * @return A function to truncate string\n+     */\n+    private static Function<String, String> getTruncateFunction(int maxLength) {\n+        return s -> {\n+            if (s == null) {\n+                throw new IllegalArgumentException(\"Cannot truncate null\"); // ok, inside lambda\n+            }\n+            return s.length() > maxLength ? s.substring(0, maxLength) : s;\n+        };\n+    }\n+\n+    /**\n+     * Try-with-resources should also be ignored if there is a catch block.\n+     *\n+     * @param input file to read\n+     */\n+    private static void ignoreTryWithResources(String input) {\n+        try (BufferedReader in = new BufferedReader(new FileReader(input))) {\n+            System.out.println(in.readLine());\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b4f931fc78cceb7c4a0ef46f506284338c0248"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a39a36058db911c150b8150b83094fa9477909c5", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a39a36058db911c150b8150b83094fa9477909c5", "committedDate": "2020-03-29T07:15:25Z", "message": "minor: typo in exceptionInfo"}, "afterCommit": {"oid": "1dfaf1e7fa8b93d4be93abe7b3c91baa88719a92", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1dfaf1e7fa8b93d4be93abe7b3c91baa88719a92", "committedDate": "2020-04-01T04:08:34Z", "message": "spelling: typo in exceptionInfo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dfaf1e7fa8b93d4be93abe7b3c91baa88719a92", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1dfaf1e7fa8b93d4be93abe7b3c91baa88719a92", "committedDate": "2020-04-01T04:08:34Z", "message": "spelling: typo in exceptionInfo"}, "afterCommit": {"oid": "6794c603f52cedf916528c055fb295cbdb5f60ee", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6794c603f52cedf916528c055fb295cbdb5f60ee", "committedDate": "2020-04-02T04:00:11Z", "message": "spelling: typo in exceptionInfo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzE4Njk1", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-387718695", "createdAt": "2020-04-04T17:31:29Z", "commit": {"oid": "6794c603f52cedf916528c055fb295cbdb5f60ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6794c603f52cedf916528c055fb295cbdb5f60ee", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6794c603f52cedf916528c055fb295cbdb5f60ee", "committedDate": "2020-04-02T04:00:11Z", "message": "spelling: typo in exceptionInfo"}, "afterCommit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/272f87f98e74b888ba3d02d4f906c959fb56108d", "committedDate": "2020-04-07T06:18:29Z", "message": "spelling: typo in exceptionInfo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjMwMTc5", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-394630179", "createdAt": "2020-04-16T13:26:45Z", "commit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyNjo0NVrOGGlM8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNToyNlrOGGlkng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDE2MA==", "bodyText": "please put \"// violation\" comment on the same line where violation is placed. One day we will make test to validate this.\nExtra explanation you can put in other lines, but it is better to shorten code new Exception(\"\"); // violation ....", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409554160", "createdAt": "2020-04-16T13:26:45Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodIgnoreThrows.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmethod;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+\n+public class InputJavadocMethodIgnoreThrows {\n+\n+   /**\n+     * Ignore try block, but keep catch and finally blocks.\n+     *\n+     * @param s String to parse\n+     * @return A positive integer\n+     */\n+    private static int parsePositiveInt(String s) {\n+        try {\n+            int value = Integer.parseInt(s);\n+            if (value <= 0) {\n+                throw new NumberFormatException(value + \" is negative/zero\"); // ok, try\n+            }\n+            return value;\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalArgumentException(\"Invalid number\", ex); // violation, catch\n+        } finally {\n+            throw new IllegalStateException(\"Should never reach here\"); // violation, finally\n+        }\n+    }\n+\n+    /**\n+     * Ignore everything inside lambda.\n+     *\n+     * @param maxLength Max length\n+     * @return A function to truncate string\n+     */\n+    private static Function<String, String> getTruncateFunction(int maxLength) {\n+        return s -> {\n+            if (s == null) {\n+                throw new IllegalArgumentException(\"Cannot truncate null\"); // ok, inside lambda\n+            }\n+            return s.length() > maxLength ? s.substring(0, maxLength) : s;\n+        };\n+    }\n+\n+    /**\n+     * Try-with-resources should also be ignored if there is a catch block.\n+     *\n+     * @param input file to read\n+     */\n+    private static void ignoreTryWithResources(String input) {\n+        try (BufferedReader in = new BufferedReader(new FileReader(input))) {\n+            String s = in.readLine();\n+            System.out.println(s);\n+            if (s.length() == 0) {\n+                // false negative, unable to tell what was caught\n+                throw new IllegalArgumentException(\"empty input\");\n+            }\n+            else {\n+                throw new IOException(); // ok, exception was caught\n+            }\n+        } catch (IOException e) {\n+            System.out.println(\"Error reading file\");\n+        }\n+    }\n+\n+    /**\n+     * However, do not ignore try block without catch.\n+     */\n+    private static void keepTryWithoutCatch() {\n+        try (Scanner sc = new Scanner(System.in)) {\n+            if (sc.nextInt() <= 0) {\n+                // violation, not caught and no @param\n+                throw new IllegalArgumentException(\"Please enter a positive integer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NTE5Nw==", "bodyText": "This PR will not be simple and quick.\nPlease move  this already separated commit to separate PR, we will merge it quicker. So it will help us to keep this PR more focused on functional changes.", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409555197", "createdAt": "2020-04-16T13:28:15Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -718,9 +748,9 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n     private static List<ExceptionInfo> combineExceptionInfo(List<ExceptionInfo> list1,\n                                                      List<ExceptionInfo> list2) {\n         final List<ExceptionInfo> result = new ArrayList<>(list1);\n-        for (ExceptionInfo expectionInfo : list2) {\n-            if (result.stream().noneMatch(item -> isExceptionInfoSame(item, expectionInfo))) {\n-                result.add(expectionInfo);\n+        for (ExceptionInfo exceptionInfo : list2) {\n+            if (result.stream().noneMatch(item -> isExceptionInfoSame(item, exceptionInfo))) {\n+                result.add(exceptionInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1ODA1NQ==", "bodyText": "We probably should make example in xdoc to explain user that ignore lambdas at all because we do not know for sure when it will be evaluated (in method or later on smoewhere else) as it is kind-of-anonymous-class with method, so it should have its own javadoc (but nobody do javadocs for lambda .... so we ignore it).", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409558055", "createdAt": "2020-04-16T13:32:17Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -697,18 +697,48 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                if (!isInTryCatchOrLambda(blockAst, throwAst)) {\n+                    final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n+                    if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n+                        final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n+                        final ExceptionInfo exceptionInfo = new ExceptionInfo(\n+                                createClassInfo(new Token(ident), currentClassName));\n+                        returnValue.add(exceptionInfo);\n+                    }\n                 }\n             }\n         }\n         return returnValue;\n     }\n \n+    /**\n+     * Checks if a 'throw' usage is contained within a try block or lambda expression.\n+     * Note that a try block without catch is not considered.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg==", "bodyText": "please add above comment and place there config as we do in others recent Inputs.\nplease also add to our Inputs a bit more test cases,  3 test cases is not enough for such controversial issue.\nPlease take bunch of interesting cases from your regression report. We should not rely on regression testing that much, we need to grow out Inputs code base.", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409560222", "createdAt": "2020-04-16T13:35:26Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodIgnoreThrows.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmethod;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+\n+public class InputJavadocMethodIgnoreThrows {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/272f87f98e74b888ba3d02d4f906c959fb56108d", "committedDate": "2020-04-07T06:18:29Z", "message": "spelling: typo in exceptionInfo"}, "afterCommit": {"oid": "35846db7189f0924f0040a6000bc1e6f9b73b397", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/35846db7189f0924f0040a6000bc1e6f9b73b397", "committedDate": "2020-04-19T13:47:39Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2631fd7f922d98140719b2ff59ed34df6db1ffcd", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2631fd7f922d98140719b2ff59ed34df6db1ffcd", "committedDate": "2020-04-21T15:44:45Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}, "afterCommit": {"oid": "e927eebaafc87cec9392f6edda620df6c1c5fdb4", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e927eebaafc87cec9392f6edda620df6c1c5fdb4", "committedDate": "2020-04-22T03:39:51Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e927eebaafc87cec9392f6edda620df6c1c5fdb4", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e927eebaafc87cec9392f6edda620df6c1c5fdb4", "committedDate": "2020-04-22T03:39:51Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}, "afterCommit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/4e6d9baf64552580876a756fc7696cdf310686c5", "committedDate": "2020-04-22T07:04:22Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTk0MDYw", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-398194060", "createdAt": "2020-04-22T13:32:48Z", "commit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODg3MjY4", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-399887268", "createdAt": "2020-04-24T12:08:08Z", "commit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowODowOFrOGLUmVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0MTowM1rOGNflNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNTAxNQ==", "bodyText": "Should Note be separated from Attention? Attention is talking about class heirarchy and note is talking about when throw new is not checked.", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r414525015", "createdAt": "2020-04-24T12:08:08Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -55,14 +55,35 @@\n  * a different <a href=\"https://checkstyle.org/property_types.html#scope\">scope</a>.\n  * </p>\n  * <p>\n- * Violates parameters and type parameters for which no param tags are present\n- * can be suppressed by defining property {@code allowMissingParamTags}.\n- * Violates methods which return non-void but for which no return tag is present\n- * can be suppressed by defining property {@code allowMissingReturnTag}.\n- * Violates exceptions which are declared to be thrown, but for which no throws\n- * tag is present by activation of property {@code validateThrows}.\n+ * Violates parameters and type parameters for which no param tags are present can\n+ * be suppressed by defining property {@code allowMissingParamTags}.\n  * </p>\n  * <p>\n+ * Violates methods which return non-void but for which no return tag is present can\n+ * be suppressed by defining property {@code allowMissingReturnTag}.\n+ * </p>\n+ * <p>\n+ * Violates exceptions which are declared to be thrown (by 'throws' in the method\n+ * signature or by 'throw new' in the method body), but for which no throws tag is\n+ * present by activation of property {@code validateThrows}.\n+ * ATTENTION: Checkstyle does not have information about hierarchy of exception types\n+ * so usage of base class is considered as separate exception type.\n+ * As workaround you need to specify both types in javadoc (parent and exact type).\n+ * Note that 'throw new' is not checked in the following places:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNTg0Mg==", "bodyText": "Place throw new in a code block.", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r414525842", "createdAt": "2020-04-24T12:09:23Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -55,14 +55,35 @@\n  * a different <a href=\"https://checkstyle.org/property_types.html#scope\">scope</a>.\n  * </p>\n  * <p>\n- * Violates parameters and type parameters for which no param tags are present\n- * can be suppressed by defining property {@code allowMissingParamTags}.\n- * Violates methods which return non-void but for which no return tag is present\n- * can be suppressed by defining property {@code allowMissingReturnTag}.\n- * Violates exceptions which are declared to be thrown, but for which no throws\n- * tag is present by activation of property {@code validateThrows}.\n+ * Violates parameters and type parameters for which no param tags are present can\n+ * be suppressed by defining property {@code allowMissingParamTags}.\n  * </p>\n  * <p>\n+ * Violates methods which return non-void but for which no return tag is present can\n+ * be suppressed by defining property {@code allowMissingReturnTag}.\n+ * </p>\n+ * <p>\n+ * Violates exceptions which are declared to be thrown (by 'throws' in the method\n+ * signature or by 'throw new' in the method body), but for which no throws tag is\n+ * present by activation of property {@code validateThrows}.\n+ * ATTENTION: Checkstyle does not have information about hierarchy of exception types\n+ * so usage of base class is considered as separate exception type.\n+ * As workaround you need to specify both types in javadoc (parent and exact type).\n+ * Note that 'throw new' is not checked in the following places:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMjEwMQ==", "bodyText": "Should attention be separated from the rest. Site was not generated but I believe \"ATTENTION\" will appear mid-line and not at the start.", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r416802101", "createdAt": "2020-04-28T17:41:03Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -55,14 +55,35 @@\n  * a different <a href=\"https://checkstyle.org/property_types.html#scope\">scope</a>.\n  * </p>\n  * <p>\n- * Violates parameters and type parameters for which no param tags are present\n- * can be suppressed by defining property {@code allowMissingParamTags}.\n- * Violates methods which return non-void but for which no return tag is present\n- * can be suppressed by defining property {@code allowMissingReturnTag}.\n- * Violates exceptions which are declared to be thrown, but for which no throws\n- * tag is present by activation of property {@code validateThrows}.\n+ * Violates parameters and type parameters for which no param tags are present can\n+ * be suppressed by defining property {@code allowMissingParamTags}.\n  * </p>\n  * <p>\n+ * Violates methods which return non-void but for which no return tag is present can\n+ * be suppressed by defining property {@code allowMissingReturnTag}.\n+ * </p>\n+ * <p>\n+ * Violates exceptions which are declared to be thrown (by 'throws' in the method\n+ * signature or by 'throw new' in the method body), but for which no throws tag is\n+ * present by activation of property {@code validateThrows}.\n+ * ATTENTION: Checkstyle does not have information about hierarchy of exception types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ca1820016f958189c6637792f75e57ce0abaf2", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/47ca1820016f958189c6637792f75e57ce0abaf2", "committedDate": "2020-04-29T05:57:54Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/4e6d9baf64552580876a756fc7696cdf310686c5", "committedDate": "2020-04-22T07:04:22Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}, "afterCommit": {"oid": "47ca1820016f958189c6637792f75e57ce0abaf2", "author": {"user": {"login": "wltan", "name": "Tan Wei Liang"}}, "url": "https://github.com/checkstyle/checkstyle/commit/47ca1820016f958189c6637792f75e57ce0abaf2", "committedDate": "2020-04-29T05:57:54Z", "message": "Issue #7473: JavadocMethod: false positive with validateThrows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjE3NDAz", "url": "https://github.com/checkstyle/checkstyle/pull/7955#pullrequestreview-402617403", "createdAt": "2020-04-29T12:28:50Z", "commit": {"oid": "47ca1820016f958189c6637792f75e57ce0abaf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 974, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}