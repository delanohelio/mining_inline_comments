{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODYxNDQz", "number": 7703, "title": "Issue #7698: Add code examples for RegexpSinglelineJava", "bodyText": "Resolve #7698\n\n\n\nOuput of default example\n\nThe default config does not match to anything, so there is no need for an example for it.\n\nOuput of non-default example 1\n$ cat config.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n<module name=\"Checker\">\n    <property name=\"charset\" value=\"UTF-8\"/>\n    <module name=\"TreeWalker\">\n           <module name=\"RegexpSinglelineJava\">\n\t\t<property name=\"format\" value=\"System\\.out\\.println\"/>\n\t\t<property name=\"ignoreComments\" value=\"true\"/>\n\t  </module>\n    </module>\n</module>\n$ cat Test.java\npublic class Test {\n\n\tpublic void main(){\n\t\tSystem.out.println(\"\"); // violation, the illegal pattern is matched on a single line\n\t\tSystem.out.\n\t\t\tprintln(\"\"); // OK\t\t\n\t\t/* System.out.println */ // OK, comments are ignored\n\t}\n}\n$ java -jar checkstyle-8.29-all.jar -c config.xml Test.java\nStarting audit...\n[ERROR] /var/tmp/Test.java:4: Line matches the illegal pattern 'System\\.out\\.println'. [RegexpSinglelineJava]\nAudit done.\nCheckstyle ends with 1 errors.\n\nOuput of non-default example 2\n$ cat config.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n<module name=\"Checker\">\n    <property name=\"charset\" value=\"UTF-8\"/>\n    <module name=\"TreeWalker\">\n           <module name=\"RegexpSinglelineJava\">\n\t\t<property name=\"format\" value=\"public\"/>\n\t\t<property name=\"ignoreComments\" value=\"true\"/>\n\t\t<property name=\"minimum\" value=\"2\"/>\n\t  </module>\n    </module>\n</module>\n$ cat Test.java\nclass Foo{\n  private int a;\n  /* public comment */ // OK, comment is ignored\n  public void bar1() {} // violation\n  public void bar2() {} // violation\n}\n$ java -jar checkstyle-8.29-all.jar -c config.xml Test.java\nStarting audit...\n[ERROR] /var/tmp/Test.java:4: Line matches the illegal pattern 'public'. [RegexpSinglelineJava]\n[ERROR] /var/tmp/Test.java:5: Line matches the illegal pattern 'public'. [RegexpSinglelineJava]\nAudit done.\nCheckstyle ends with 2 errors.\n\nOuput of non-default example 3\n$ cat config.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n<module name=\"Checker\">\n    <property name=\"charset\" value=\"UTF-8\"/>\n    <module name=\"TreeWalker\">\n           <module name=\"RegexpSinglelineJava\">\n\t\t<property name=\"format\" value=\"\\.read(.*)|\\.write(.*)\"/>\n\t\t<property name=\"message\" value=\"IO found\"/>\n\t  </module>\n    </module>\n</module>\n$ cat Test.java\nclass Foo{\n  public void bar(){\n  FileReader in = new FileReader(\"path/to/input\");\n  int ch = in.read(); // violation\n  while(ch != -1) {\n    System.out.print((char)ch);\n    ch = in.read(); // violation\n  }\n \n  FileWriter out = new FileWriter(\"path/to/output\");\n  out.write(\"something\"); // violation\n }\n}\n$ java -jar checkstyle-8.29-all.jar -c config.xml Test.java\nStarting audit...\n[ERROR] /var/tmp/Test.java:6: IO found [RegexpSinglelineJava]\n[ERROR] /var/tmp/Test.java:9: IO found [RegexpSinglelineJava]\n[ERROR] /var/tmp/Test.java:13: IO found [RegexpSinglelineJava]\nAudit done.\nCheckstyle ends with 3 errors.", "createdAt": "2020-02-29T14:50:14Z", "url": "https://github.com/checkstyle/checkstyle/pull/7703", "merged": true, "mergeCommit": {"oid": "d62ad1a21b094f8ec115fd96cd593862d4ef8d32"}, "closed": true, "closedAt": "2020-03-11T21:53:42Z", "author": {"login": "wilcoln"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJF9QXABqjMwODQ3ODkwNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMl5MgAFqTM3MjY5NjEzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f16af92a86a7e701ed15539350fd0eb8078a3e3", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/9f16af92a86a7e701ed15539350fd0eb8078a3e3", "committedDate": "2020-02-29T09:17:37Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "238006db9d5138aa04372ce0610695e204cd54ba", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/238006db9d5138aa04372ce0610695e204cd54ba", "committedDate": "2020-02-29T15:06:35Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODI1NTk0", "url": "https://github.com/checkstyle/checkstyle/pull/7703#pullrequestreview-366825594", "createdAt": "2020-02-29T23:29:53Z", "commit": {"oid": "238006db9d5138aa04372ce0610695e204cd54ba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMzoyOTo1NFrOFwLbUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMzoyOTo1NFrOFwLbUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MzE4Ng==", "bodyText": "this PR should be only for RegexpSinglelineJava changes.", "url": "https://github.com/checkstyle/checkstyle/pull/7703#discussion_r386063186", "createdAt": "2020-02-29T23:29:54Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java", "diffHunk": "@@ -43,7 +43,26 @@\n  * <pre>\n  * &lt;module name=&quot;MissingSwitchDefault&quot;/&gt;\n  * </pre>\n- *\n+ * <p>Example of violation:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238006db9d5138aa04372ce0610695e204cd54ba"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "238006db9d5138aa04372ce0610695e204cd54ba", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/238006db9d5138aa04372ce0610695e204cd54ba", "committedDate": "2020-02-29T15:06:35Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "e2e05834e68d7abcc23e2e375304c10b9567638b", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e2e05834e68d7abcc23e2e375304c10b9567638b", "committedDate": "2020-03-01T10:15:41Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTM1Mjg1", "url": "https://github.com/checkstyle/checkstyle/pull/7703#pullrequestreview-368135285", "createdAt": "2020-03-03T16:33:40Z", "commit": {"oid": "e2e05834e68d7abcc23e2e375304c10b9567638b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjozMzo0MFrOFxNZHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjozMzo0MFrOFxNZHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0Mzk2Ng==", "bodyText": "We need example if default config. It does nothing, so please explain in words above it that it will catch nothing. No code sample is required for such default.\nPlease add config/examples for all properties that Check has.", "url": "https://github.com/checkstyle/checkstyle/pull/7703#discussion_r387143966", "createdAt": "2020-03-03T16:33:40Z", "author": {"login": "romani"}, "path": "src/xdocs/config_regexp.xml", "diffHunk": "@@ -1104,7 +1104,13 @@ void method() {\n   &lt;property name=&quot;ignoreComments&quot; value=&quot;true&quot;/&gt;\n &lt;/module&gt;\n         </source>\n-\n+        <p>Example:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e05834e68d7abcc23e2e375304c10b9567638b"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e05834e68d7abcc23e2e375304c10b9567638b", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e2e05834e68d7abcc23e2e375304c10b9567638b", "committedDate": "2020-03-01T10:15:41Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "0114409d05550afcc499509553246c328baeba67", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0114409d05550afcc499509553246c328baeba67", "committedDate": "2020-03-09T22:18:55Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0114409d05550afcc499509553246c328baeba67", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0114409d05550afcc499509553246c328baeba67", "committedDate": "2020-03-09T22:18:55Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "a747779804b72f714286d11287ca23feccfe12a8", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a747779804b72f714286d11287ca23feccfe12a8", "committedDate": "2020-03-10T06:04:03Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a747779804b72f714286d11287ca23feccfe12a8", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a747779804b72f714286d11287ca23feccfe12a8", "committedDate": "2020-03-10T06:04:03Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/476c92df255d5c9a517d86955afd12c1a57a1049", "committedDate": "2020-03-10T09:05:41Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTIzNDEx", "url": "https://github.com/checkstyle/checkstyle/pull/7703#pullrequestreview-371923411", "createdAt": "2020-03-10T12:55:07Z", "commit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo1NTowOFrOF0NhCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowMToyNVrOF0NuDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5MTcyMA==", "bodyText": "wrong indentation. please move these two lines left to align with other text in <p> block", "url": "https://github.com/checkstyle/checkstyle/pull/7703#discussion_r390291720", "createdAt": "2020-03-10T12:55:08Z", "author": {"login": "baratali"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java", "diffHunk": "@@ -81,7 +88,90 @@\n  *   &lt;property name=\"ignoreCase\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * int debug = 0; // violation, variable name matches illegal pattern\n+ * public class Debug { // violation, class name matches illegal pattern\n+ * &#47;* this is for de\n+ *   bug only; *&#47; // OK\n+ * </pre>\n+ * <p>\n+ * To configure the check to find occurrences of\n+ * &quot;\\.read(.*)|\\.write(.*)&quot;\n+ * and display &quot;IO found&quot; for each violation.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+ *   &lt;property name=&quot;format&quot; value=&quot;\\.read(.*)|\\.write(.*)&quot;/&gt;\n+ *   &lt;property name=&quot;message&quot; value=&quot;IO found&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * FileReader in = new FileReader(\"path/to/input\");\n+ * int ch = in.read(); // violation\n+ * while(ch != -1) {\n+ *   System.out.print((char)ch);\n+ *   ch = in.read(); // violation\n+ * }\n  *\n+ * FileWriter out = new FileWriter(\"path/to/output\");\n+ * out.write(\"something\"); // violation\n+ * </pre>\n+ * <p>\n+ * To configure the check to find occurrences of\n+ * &quot;\\.log(.*)&quot;. We want to allow a maximum of 2 occurrences.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+ *   &lt;property name=&quot;format&quot; value=&quot;\\.log(.*)&quot;/&gt;\n+ *   &lt;property name=&quot;maximum&quot; value=&quot;2&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class Foo{\n+ *   public bar(){\n+ *     Logger.log(\"first\"); // OK, first occurrence is allowed\n+ *     Logger.log(\"second\"); // OK, second occurrence is allowed\n+ *     Logger.log(\"third\"); // violation\n+ *     System.out.println(\"fourth\");\n+ *     Logger.log(\"fifth\"); // violation\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to find all occurrences of\n+ * &quot;public&quot;. We want to ignore comments,\n+ *     display &quot;public member found&quot; for each violation\n+ *     and say if less than 2 occurrences.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NDAxMA==", "bodyText": "wrong indentation of this block and text inside", "url": "https://github.com/checkstyle/checkstyle/pull/7703#discussion_r390294010", "createdAt": "2020-03-10T12:59:20Z", "author": {"login": "baratali"}, "path": "src/xdocs/config_regexp.xml", "diffHunk": "@@ -1115,6 +1121,90 @@ void method() {\n   &lt;property name=&quot;ignoreCase&quot; value=&quot;true&quot;/&gt;\n &lt;/module&gt;\n         </source>\n+        <p>Example:</p>\n+        <source>\n+int debug = 0; // violation, variable name matches illegal pattern\n+public class Debug { // violation, class name matches illegal pattern\n+/* this is for de\n+   bug only; */ // OK\n+        </source>\n+          <p>\n+          To configure the check to find occurrences of\n+          &quot;\\.read(.*)|\\.write(.*)&quot;\n+          and display &quot;IO found&quot; for each violation.\n+        </p>\n+        <source>\n+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+  &lt;property name=&quot;format&quot; value=&quot;\\.read(.*)|\\.write(.*)&quot;/&gt;\n+  &lt;property name=&quot;message&quot; value=&quot;IO found&quot;/&gt;\n+&lt;/module&gt;\n+        </source>\n+        <p>Example:</p>\n+        <source>\n+FileReader in = new FileReader(\"path/to/input\");\n+int ch = in.read(); // violation\n+while(ch != -1) {\n+  System.out.print((char)ch);\n+  ch = in.read(); // violation\n+}\n+\n+FileWriter out = new FileWriter(\"path/to/output\");\n+out.write(\"something\"); // violation\n+        </source>\n+          <p>\n+          To configure the check to find occurrences of\n+          &quot;\\.log(.*)&quot;. We want to allow a maximum of 2 occurrences.\n+        </p>\n+        <source>\n+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+  &lt;property name=&quot;format&quot; value=&quot;\\.log(.*)&quot;/&gt;\n+  &lt;property name=&quot;maximum&quot; value=&quot;2&quot;/&gt;\n+&lt;/module&gt;\n+        </source>\n+        <p>Example:</p>\n+        <source>\n+public class Foo{\n+  public bar(){\n+    Logger.log(\"first\"); // OK, first occurrence is allowed\n+    Logger.log(\"second\"); // OK, second occurrence is allowed\n+    Logger.log(\"third\"); // violation\n+    System.out.println(\"fourth\");\n+    Logger.log(\"fifth\"); // violation\n+  }\n+}\n+        </source>\n+          <p>\n+          To configure the check to find all occurrences of\n+          &quot;public&quot;. We want to ignore comments,\n+              display &quot;public member found&quot; for each violation\n+              and say if less than 2 occurrences.\n+         </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NDgzNg==", "bodyText": "wrong indentation of this block", "url": "https://github.com/checkstyle/checkstyle/pull/7703#discussion_r390294836", "createdAt": "2020-03-10T13:00:54Z", "author": {"login": "baratali"}, "path": "src/xdocs/config_regexp.xml", "diffHunk": "@@ -1115,6 +1121,90 @@ void method() {\n   &lt;property name=&quot;ignoreCase&quot; value=&quot;true&quot;/&gt;\n &lt;/module&gt;\n         </source>\n+        <p>Example:</p>\n+        <source>\n+int debug = 0; // violation, variable name matches illegal pattern\n+public class Debug { // violation, class name matches illegal pattern\n+/* this is for de\n+   bug only; */ // OK\n+        </source>\n+          <p>\n+          To configure the check to find occurrences of\n+          &quot;\\.read(.*)|\\.write(.*)&quot;\n+          and display &quot;IO found&quot; for each violation.\n+        </p>\n+        <source>\n+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+  &lt;property name=&quot;format&quot; value=&quot;\\.read(.*)|\\.write(.*)&quot;/&gt;\n+  &lt;property name=&quot;message&quot; value=&quot;IO found&quot;/&gt;\n+&lt;/module&gt;\n+        </source>\n+        <p>Example:</p>\n+        <source>\n+FileReader in = new FileReader(\"path/to/input\");\n+int ch = in.read(); // violation\n+while(ch != -1) {\n+  System.out.print((char)ch);\n+  ch = in.read(); // violation\n+}\n+\n+FileWriter out = new FileWriter(\"path/to/output\");\n+out.write(\"something\"); // violation\n+        </source>\n+          <p>\n+          To configure the check to find occurrences of\n+          &quot;\\.log(.*)&quot;. We want to allow a maximum of 2 occurrences.\n+        </p>\n+        <source>\n+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+  &lt;property name=&quot;format&quot; value=&quot;\\.log(.*)&quot;/&gt;\n+  &lt;property name=&quot;maximum&quot; value=&quot;2&quot;/&gt;\n+&lt;/module&gt;\n+        </source>\n+        <p>Example:</p>\n+        <source>\n+public class Foo{\n+  public bar(){\n+    Logger.log(\"first\"); // OK, first occurrence is allowed\n+    Logger.log(\"second\"); // OK, second occurrence is allowed\n+    Logger.log(\"third\"); // violation\n+    System.out.println(\"fourth\");\n+    Logger.log(\"fifth\"); // violation\n+  }\n+}\n+        </source>\n+          <p>\n+          To configure the check to find all occurrences of\n+          &quot;public&quot;. We want to ignore comments,\n+              display &quot;public member found&quot; for each violation\n+              and say if less than 2 occurrences.\n+         </p>\n+        <source>\n+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+  &lt;property name=&quot;format&quot; value=&quot;public&quot;/&gt;\n+  &lt;property name=&quot;minimum&quot; value=&quot;2&quot;/&gt;\n+  &lt;property name=&quot;message&quot; value=&quot;public member found&quot;/&gt;\n+  &lt;property name=&quot;ignoreComments&quot; value=&quot;true&quot;/&gt;\n+&lt;/module&gt;\n+        </source>\n+        <p>Example:</p>\n+        <source>\n+class Foo{ // violation, file contains less than 2 occurrences of \"public\"\n+  private int a;\n+  /* public comment */ // OK, comment is ignored\n+  private bar1() {}\n+  public  bar2() {} // violation\n+}\n+        </source>\n+<p>Example:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NTA1NQ==", "bodyText": "wrong indentation of <p>", "url": "https://github.com/checkstyle/checkstyle/pull/7703#discussion_r390295055", "createdAt": "2020-03-10T13:01:25Z", "author": {"login": "baratali"}, "path": "src/xdocs/config_regexp.xml", "diffHunk": "@@ -1115,6 +1121,90 @@ void method() {\n   &lt;property name=&quot;ignoreCase&quot; value=&quot;true&quot;/&gt;\n &lt;/module&gt;\n         </source>\n+        <p>Example:</p>\n+        <source>\n+int debug = 0; // violation, variable name matches illegal pattern\n+public class Debug { // violation, class name matches illegal pattern\n+/* this is for de\n+   bug only; */ // OK\n+        </source>\n+          <p>\n+          To configure the check to find occurrences of\n+          &quot;\\.read(.*)|\\.write(.*)&quot;\n+          and display &quot;IO found&quot; for each violation.\n+        </p>\n+        <source>\n+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n+  &lt;property name=&quot;format&quot; value=&quot;\\.read(.*)|\\.write(.*)&quot;/&gt;\n+  &lt;property name=&quot;message&quot; value=&quot;IO found&quot;/&gt;\n+&lt;/module&gt;\n+        </source>\n+        <p>Example:</p>\n+        <source>\n+FileReader in = new FileReader(\"path/to/input\");\n+int ch = in.read(); // violation\n+while(ch != -1) {\n+  System.out.print((char)ch);\n+  ch = in.read(); // violation\n+}\n+\n+FileWriter out = new FileWriter(\"path/to/output\");\n+out.write(\"something\"); // violation\n+        </source>\n+          <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "476c92df255d5c9a517d86955afd12c1a57a1049", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/476c92df255d5c9a517d86955afd12c1a57a1049", "committedDate": "2020-03-10T09:05:41Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "3f773e7ad91e29a395567bf3bd70dd8008669793", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3f773e7ad91e29a395567bf3bd70dd8008669793", "committedDate": "2020-03-10T15:52:20Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzQ0Nzgx", "url": "https://github.com/checkstyle/checkstyle/pull/7703#pullrequestreview-372344781", "createdAt": "2020-03-10T21:46:29Z", "commit": {"oid": "3f773e7ad91e29a395567bf3bd70dd8008669793"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f773e7ad91e29a395567bf3bd70dd8008669793", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3f773e7ad91e29a395567bf3bd70dd8008669793", "committedDate": "2020-03-10T15:52:20Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "4169a75134e9fd53d39f576b9e197cc48748ca35", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/4169a75134e9fd53d39f576b9e197cc48748ca35", "committedDate": "2020-03-11T01:06:41Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7e8436668ea3d00dd4225139c233ae2dbda331", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3b7e8436668ea3d00dd4225139c233ae2dbda331", "committedDate": "2020-03-11T01:18:18Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4169a75134e9fd53d39f576b9e197cc48748ca35", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/4169a75134e9fd53d39f576b9e197cc48748ca35", "committedDate": "2020-03-11T01:06:41Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}, "afterCommit": {"oid": "3b7e8436668ea3d00dd4225139c233ae2dbda331", "author": {"user": {"login": "wilcoln", "name": "Wilfried L. Bounsi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3b7e8436668ea3d00dd4225139c233ae2dbda331", "committedDate": "2020-03-11T01:18:18Z", "message": "Issue #7698: add code examples for RegexpSinglelineJava"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjk2MTMx", "url": "https://github.com/checkstyle/checkstyle/pull/7703#pullrequestreview-372696131", "createdAt": "2020-03-11T12:02:08Z", "commit": {"oid": "3b7e8436668ea3d00dd4225139c233ae2dbda331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1050, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}