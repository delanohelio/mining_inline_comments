{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0OTIwNTA4", "number": 9091, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwODozMDoyNFrOFJd6Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMjo0MFrOFLSsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDcxNTM0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheckTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwODozMDoyNFrOIL0KeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoyNzo0M1rOIOiYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1OTg5Nw==", "bodyText": "I have no idea why this field was static. It has only one usage, so it worked fine until someone (Pitest actually) invoked the test twice.", "url": "https://github.com/checkstyle/checkstyle/pull/9091#discussion_r549259897", "createdAt": "2020-12-28T08:30:24Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheckTest.java", "diffHunk": "@@ -250,7 +249,7 @@ protected void processFiltered(File file, FileText fileText) {\n     public static class MultiFileViolationFileSetCheck extends AbstractFileSetCheck {\n \n         private static final String MSG_KEY = \"Violation.\";\n-        private static int finishProcessingCount;\n+        private int finishProcessingCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa832ff0d732a5374cfec7dee6840f748b56ade"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0OTYzNw==", "bodyText": "Please move this to a separate commit.", "url": "https://github.com/checkstyle/checkstyle/pull/9091#discussion_r551949637", "createdAt": "2021-01-05T14:02:04Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheckTest.java", "diffHunk": "@@ -250,7 +249,7 @@ protected void processFiltered(File file, FileText fileText) {\n     public static class MultiFileViolationFileSetCheck extends AbstractFileSetCheck {\n \n         private static final String MSG_KEY = \"Violation.\";\n-        private static int finishProcessingCount;\n+        private int finishProcessingCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1OTg5Nw=="}, "originalCommit": {"oid": "ffa832ff0d732a5374cfec7dee6840f748b56ade"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExNDI5NA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9091#discussion_r552114294", "createdAt": "2021-01-05T18:27:43Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheckTest.java", "diffHunk": "@@ -250,7 +249,7 @@ protected void processFiltered(File file, FileText fileText) {\n     public static class MultiFileViolationFileSetCheck extends AbstractFileSetCheck {\n \n         private static final String MSG_KEY = \"Violation.\";\n-        private static int finishProcessingCount;\n+        private int finishProcessingCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1OTg5Nw=="}, "originalCommit": {"oid": "ffa832ff0d732a5374cfec7dee6840f748b56ade"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg0OTA2OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMjo0MFrOIOYWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTowOTo1OFrOIOjtsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0OTk2MQ==", "bodyText": "Why exclude all methods of the classes and not just the specific methods that are in issue?", "url": "https://github.com/checkstyle/checkstyle/pull/9091#discussion_r551949961", "createdAt": "2021-01-05T14:02:40Z", "author": {"login": "rnveach"}, "path": "pom.xml", "diffHunk": "@@ -3100,6 +3100,15 @@\n                 <mutator>TRUE_RETURNS</mutator>\n                 <mutator>VOID_METHOD_CALLS</mutator>\n               </mutators>\n+              <avoidCallsTo>\n+                <!-- Till https://github.com/hcoles/pitest/issues/766\n+                 Pitest complains about redundant call to close() method.\n+                 This is unavoidable, since this method is called deep inside\n+                 try-with-resources statement. As a workaround, we can exclude\n+                 all methods of these classes from mutation. -->\n+                <avoidCallsTo>java.io.BufferedReader</avoidCallsTo>\n+                <avoidCallsTo>java.io.Reader</avoidCallsTo>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148b122912de9e76789196d6cd89bd897fe89735"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMzkyMg==", "bodyText": "I have no idea how to exclude a method. I've tried\n                <avoidCallsTo>java.io.Reader.close</avoidCallsTo>\n                <avoidCallsTo>java.io.Reader#close</avoidCallsTo>\n                <avoidCallsTo>java.io.Reader#close()</avoidCallsTo>\nNone of them works.  There is an issue for this in the pitest repo.", "url": "https://github.com/checkstyle/checkstyle/pull/9091#discussion_r552113922", "createdAt": "2021-01-05T18:26:56Z", "author": {"login": "pbludov"}, "path": "pom.xml", "diffHunk": "@@ -3100,6 +3100,15 @@\n                 <mutator>TRUE_RETURNS</mutator>\n                 <mutator>VOID_METHOD_CALLS</mutator>\n               </mutators>\n+              <avoidCallsTo>\n+                <!-- Till https://github.com/hcoles/pitest/issues/766\n+                 Pitest complains about redundant call to close() method.\n+                 This is unavoidable, since this method is called deep inside\n+                 try-with-resources statement. As a workaround, we can exclude\n+                 all methods of these classes from mutation. -->\n+                <avoidCallsTo>java.io.BufferedReader</avoidCallsTo>\n+                <avoidCallsTo>java.io.Reader</avoidCallsTo>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0OTk2MQ=="}, "originalCommit": {"oid": "148b122912de9e76789196d6cd89bd897fe89735"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNjExMg==", "bodyText": "Ok, then lets ignore.", "url": "https://github.com/checkstyle/checkstyle/pull/9091#discussion_r552136112", "createdAt": "2021-01-05T19:09:58Z", "author": {"login": "rnveach"}, "path": "pom.xml", "diffHunk": "@@ -3100,6 +3100,15 @@\n                 <mutator>TRUE_RETURNS</mutator>\n                 <mutator>VOID_METHOD_CALLS</mutator>\n               </mutators>\n+              <avoidCallsTo>\n+                <!-- Till https://github.com/hcoles/pitest/issues/766\n+                 Pitest complains about redundant call to close() method.\n+                 This is unavoidable, since this method is called deep inside\n+                 try-with-resources statement. As a workaround, we can exclude\n+                 all methods of these classes from mutation. -->\n+                <avoidCallsTo>java.io.BufferedReader</avoidCallsTo>\n+                <avoidCallsTo>java.io.Reader</avoidCallsTo>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0OTk2MQ=="}, "originalCommit": {"oid": "148b122912de9e76789196d6cd89bd897fe89735"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1580, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}