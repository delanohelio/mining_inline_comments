{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MTIyODc0", "number": 9006, "title": "Issue #6722: new check JavadocMissingLeadingAsteriskCheck", "bodyText": "Issue #6722\nDiff Regression projects: https://gist.githubusercontent.com/nmancus1/32ddbff9e69986ac2fcbbeff7def2f80/raw/8480445657f1d215e683dbb6b14c1577bbd44e6b/projects-to-test-on.properties\nNew module config: https://gist.githubusercontent.com/pbludov/3a8be5da26a64e2be80b26217d052eb6/raw/fa0bef2587280c80bfa87e18493afe52ca1a5eba/config.xml\nContrib repo PR: checkstyle/contribution#526", "createdAt": "2020-11-21T12:20:18Z", "url": "https://github.com/checkstyle/checkstyle/pull/9006", "merged": true, "mergeCommit": {"oid": "b0ec84be054d5d52c91ea5247f5481efe93ebd09"}, "closed": true, "closedAt": "2020-11-28T13:11:13Z", "author": {"login": "pbludov"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdezBz7AFqTUzNjAwOTY3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdg76Q3gFqTU0MDM3NDU1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDA5Njc5", "url": "https://github.com/checkstyle/checkstyle/pull/9006#pullrequestreview-536009679", "createdAt": "2020-11-21T21:21:45Z", "commit": {"oid": "3b97b3d49b6af181f87136f123aee490a9462dbe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMToyMTo0NlrOH3xeGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTozOToyMVrOH3xkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NDI1MA==", "bodyText": "Leading", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528244250", "createdAt": "2020-11-21T21:21:46Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * </p>\n+ * <p>\n+ * The following Javadoc comments are valid:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * No asterisks on first and last line.\n+ *  *&#47;\n+ * class Foo {}\n+ * &#47;** **\n+ *  * Some asterisks on first and last line.\n+ *  * *&#47;\n+ * class Bar {}\n+ * </pre>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Some description here. // OK\n+ *    Another line of description. // violation, javadoc has lines without leading asterisk.\n+ *  *&#47;\n+ * public class Test {\n+ *    &#47;** // violation on next line, javadoc has lines without leading asterisk.\n+ *\n+ *     * Some description here.\n+ *     *&#47;\n+ *   public void test() {}\n+ *\n+ *   &#47;** Some description here. *&#47; // OK\n+ *   public void test1() {}\n+ *\n+ *   &#47;** // OK\n+ *     * Some description here.\n+ *     * Another line of description.\n+ *     *&#47;\n+ *   public void test2() {}\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class JavadocMissingLeadingAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_MISSING_ASTERISK = \"javadoc.missing.asterisk\";\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.NEWLINE,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getAcceptableJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        DetailNode nextSibling = getNextNode(detailNode);\n+\n+        // Till https://github.com/checkstyle/checkstyle/issues/9005\n+        // Due to bug in the Javadoc parser there may be phantom description nodes.\n+        while (nextSibling.getType() == JavadocTokenTypes.DESCRIPTION\n+                || nextSibling.getType() == JavadocTokenTypes.WS) {\n+            nextSibling = getNextNode(nextSibling);\n+        }\n+\n+        if (!isLoadingAsterisk(nextSibling) && !isLastLine(nextSibling)) {\n+            log(nextSibling.getLineNumber(), MSG_MISSING_ASTERISK);\n+        }\n+    }\n+\n+    /**\n+     * Gets next node in the ast (sibling or parent sibling for the last node).\n+     *\n+     * @param detailNode the node to process\n+     * @return next node.\n+     */\n+    private static DetailNode getNextNode(DetailNode detailNode) {\n+        DetailNode node = JavadocUtil.getFirstChild(detailNode);\n+        if (node == null) {\n+            node = JavadocUtil.getNextSibling(detailNode);\n+            if (node == null) {\n+                DetailNode parent = detailNode;\n+                do {\n+                    parent = parent.getParent();\n+                    node = JavadocUtil.getNextSibling(parent);\n+                } while (node == null);\n+            }\n+        }\n+        return node;\n+    }\n+\n+    /**\n+     * Checks whether the given node is a leading asterisk.\n+     *\n+     * @param detailNode the node to process\n+     * @return {@code true} if the node is {@link JavadocTokenTypes#LEADING_ASTERISK}\n+     */\n+    private static boolean isLoadingAsterisk(DetailNode detailNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b97b3d49b6af181f87136f123aee490a9462dbe"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NTc5NQ==", "bodyText": "I think we should not have code examples in description, they are copied to  metadata.\nI am not strong here, what do you think ?", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528245795", "createdAt": "2020-11-21T21:39:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * </p>\n+ * <p>\n+ * The following Javadoc comments are valid:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b97b3d49b6af181f87136f123aee490a9462dbe"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b97b3d49b6af181f87136f123aee490a9462dbe", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3b97b3d49b6af181f87136f123aee490a9462dbe", "committedDate": "2020-11-21T12:02:00Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}, "afterCommit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8e8e4f511e730c9f70600018ba13bdb8846fb897", "committedDate": "2020-11-22T07:26:50Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDU0NDQ0", "url": "https://github.com/checkstyle/checkstyle/pull/9006#pullrequestreview-536054444", "createdAt": "2020-11-22T11:54:55Z", "commit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMTo1NDo1NlrOH32Xgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjowNjo1NVrOH32dBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNDQ4Mg==", "bodyText": "{@code javadoc.wrong.singleton.html.tag}\n{@code javadoc.missed.html.close}\nThese messages does not make sense for this check. Is it required to list them?\nsame for {@code javadoc.parse.rule.error}, I dont think it is necessary", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528324482", "createdAt": "2020-11-22T11:54:56Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,209 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * All other lines in a Javadoc should start with {@code *}, including blank lines and code blocks.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Valid Java-style comment.\n+ *  *\n+ *  * &lt;pre&gt;\n+ *  *   int value = 0;\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class JavaStyle {} // ok\n+ *\n+ * &#47;** Valid Scala-style comment.\n+ *   * Some description here.\n+ *   **&#47;\n+ * class ScalaStyle {} // ok\n+ *\n+ * &#47;** **\n+ *  * Asterisks on first and last lines are optional.\n+ *  * *&#47;\n+ * class Asterisks {} // ok\n+ *\n+ * &#47;** No asterisks are required for single-line comments. *&#47;\n+ * class SingleLine {} // ok\n+ *\n+ * &#47;** // violation on next blank line, javadoc has lines without leading asterisk.\n+ *\n+ *  *&#47;\n+ * class BlankLine {}\n+ *\n+ * &#47;** Wrapped\n+ *     single-line comment *&#47; // violation, javadoc has lines without leading asterisk.\n+ * class Wrapped {}\n+ *\n+ * &#47;**\n+ *  * &lt;pre&gt;\n+ *     int value; // violation, javadoc has lines without leading asterisk.\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class Code {}\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNDk5Ng==", "bodyText": "Violation is reported for each line in javadoc, so as for me it is better to report something like\nJavadoc line should start with leading asterisk\nCurrent message would be better if violation was reported for whole javadoc.", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528324996", "createdAt": "2020-11-22T11:59:26Z", "author": {"login": "strkkk"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties", "diffHunk": "@@ -13,6 +13,7 @@ javadoc.invalidInheritDoc=Invalid use of the '{'@inheritDoc'}' tag.\n javadoc.legacyPackageHtml=Legacy package.html file should be removed.\n javadoc.missed.html.close=Javadoc comment at column {0} has parse error. Missed HTML close tag ''{1}''. Sometimes it means that close tag missed for one of previous tags.\n javadoc.missing=Missing a Javadoc comment.\n+javadoc.missing.asterisk=Javadoc has lines without leading asterisk.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNTMxMQ==", "bodyText": "extra space before closing tag", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528325311", "createdAt": "2020-11-22T12:02:11Z", "author": {"login": "strkkk"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -967,6 +967,145 @@ public Runnable printLater(String s) {\n       </subsection>\n     </section>\n \n+    <section name=\"JavadocMissingLeadingAsterisk\">\n+      <p>Since Checkstyle 8.38</p>\n+      <subsection name=\"Description\" id=\"JavadocMissingLeadingAsterisk_Description\">\n+        <p>\n+          Checks if the javadoc has\n+          <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+            leading asterisks\n+          </a>\n+          on each line.\n+        </p>\n+        <p>\n+          The check does not require asterisks on the first line, nor on the last line\n+          if it is blank. All other lines in a Javadoc should start with <code>*</code>,\n+          including blank lines and code blocks.\n+        </p>\n+      </subsection>\n+\n+      <subsection name=\"Properties\" id=\"JavadocMissingLeadingAsterisk_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>violateExecutionOnNonTightHtml</td>\n+              <td>\n+                Control when to print violations if the Javadoc being examined by this check\n+                violates the tight html rules defined at\n+                <a href=\"writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+              </td>\n+              <td><a href=\"property_types.html#boolean\">boolean</a></td>\n+              <td><code>false</code></td>\n+              <td>8.38</td>\n+            </tr>\n+          </table>\n+        </div>\n+      </subsection>\n+\n+      <subsection name=\"Examples\" id=\"JavadocMissingLeadingAsterisk_Examples\">\n+        <p>\n+          To configure the check:\n+        </p>\n+        <source>\n+&lt;module name=&quot;JavadocMissingLeadingAsterisk&quot;/&gt;\n+        </source>\n+        <p>Example: </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNTg5Mw==", "bodyText": "Please change to TokenUtil.isOfType method", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528325893", "createdAt": "2020-11-22T12:06:55Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,209 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * All other lines in a Javadoc should start with {@code *}, including blank lines and code blocks.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Valid Java-style comment.\n+ *  *\n+ *  * &lt;pre&gt;\n+ *  *   int value = 0;\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class JavaStyle {} // ok\n+ *\n+ * &#47;** Valid Scala-style comment.\n+ *   * Some description here.\n+ *   **&#47;\n+ * class ScalaStyle {} // ok\n+ *\n+ * &#47;** **\n+ *  * Asterisks on first and last lines are optional.\n+ *  * *&#47;\n+ * class Asterisks {} // ok\n+ *\n+ * &#47;** No asterisks are required for single-line comments. *&#47;\n+ * class SingleLine {} // ok\n+ *\n+ * &#47;** // violation on next blank line, javadoc has lines without leading asterisk.\n+ *\n+ *  *&#47;\n+ * class BlankLine {}\n+ *\n+ * &#47;** Wrapped\n+ *     single-line comment *&#47; // violation, javadoc has lines without leading asterisk.\n+ * class Wrapped {}\n+ *\n+ * &#47;**\n+ *  * &lt;pre&gt;\n+ *     int value; // violation, javadoc has lines without leading asterisk.\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class Code {}\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class JavadocMissingLeadingAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_MISSING_ASTERISK = \"javadoc.missing.asterisk\";\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.NEWLINE,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getAcceptableJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        DetailNode nextSibling = getNextNode(detailNode);\n+\n+        // Till https://github.com/checkstyle/checkstyle/issues/9005\n+        // Due to bug in the Javadoc parser there may be phantom description nodes.\n+        while (nextSibling.getType() == JavadocTokenTypes.DESCRIPTION\n+                || nextSibling.getType() == JavadocTokenTypes.WS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897"}, "originalPosition": 150}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8e8e4f511e730c9f70600018ba13bdb8846fb897", "committedDate": "2020-11-22T07:26:50Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}, "afterCommit": {"oid": "0799c048cdd1ac73d3c77ccafd9a0ce37ad7eb44", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0799c048cdd1ac73d3c77ccafd9a0ce37ad7eb44", "committedDate": "2020-11-22T12:18:43Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/96c654a34a3af8136b8825d4096cae61b339aebd", "committedDate": "2020-11-22T12:22:34Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0799c048cdd1ac73d3c77ccafd9a0ce37ad7eb44", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0799c048cdd1ac73d3c77ccafd9a0ce37ad7eb44", "committedDate": "2020-11-22T12:18:43Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}, "afterCommit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd", "author": {"user": {"login": "Gaurav-Punjabi", "name": "Gaurav Punjabi"}}, "url": "https://github.com/checkstyle/checkstyle/commit/96c654a34a3af8136b8825d4096cae61b339aebd", "committedDate": "2020-11-22T12:22:34Z", "message": "Issue #6722: new check MissingLeadingAsteriskCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDY3NjM3", "url": "https://github.com/checkstyle/checkstyle/pull/9006#pullrequestreview-536067637", "createdAt": "2020-11-22T14:30:06Z", "commit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTMzODMy", "url": "https://github.com/checkstyle/checkstyle/pull/9006#pullrequestreview-536133832", "createdAt": "2020-11-23T00:24:05Z", "commit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzYxNjU2", "url": "https://github.com/checkstyle/checkstyle/pull/9006#pullrequestreview-536761656", "createdAt": "2020-11-23T18:59:16Z", "commit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1OToxNlrOH4bPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxMzoxMlrOH4bteA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyODU1OQ==", "bodyText": "Was this examined for google/sun configs?\n@romani What do you think of adding a test for a list of reasons a check shouldn't be added to google/sun? Do we want to make this a requirement for all new module reviews? We already have something similar for new tokens.", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528928559", "createdAt": "2020-11-23T18:59:16Z", "author": {"login": "rnveach"}, "path": "config/checkstyle_checks.xml", "diffHunk": "@@ -551,6 +551,7 @@\n     <module name=\"JavadocMethod\">\n       <property name=\"validateThrows\" value=\"true\"/>\n     </module>\n+    <module name=\"JavadocMissingLeadingAsterisk\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMzcwNw==", "bodyText": "This whole method looks weird. I would have thought it would look something similar to how we traverse through the AST.\nMy main question is the do loop. This shouldn't be a nested call to getNextNode? We truthfully only look 1 child deep?", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528933707", "createdAt": "2020-11-23T19:08:23Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,210 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * All other lines in a Javadoc should start with {@code *}, including blank lines and code blocks.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Valid Java-style comment.\n+ *  *\n+ *  * &lt;pre&gt;\n+ *  *   int value = 0;\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class JavaStyle {} // ok\n+ *\n+ * &#47;** Valid Scala-style comment.\n+ *   * Some description here.\n+ *   **&#47;\n+ * class ScalaStyle {} // ok\n+ *\n+ * &#47;** **\n+ *  * Asterisks on first and last lines are optional.\n+ *  * *&#47;\n+ * class Asterisks {} // ok\n+ *\n+ * &#47;** No asterisks are required for single-line comments. *&#47;\n+ * class SingleLine {} // ok\n+ *\n+ * &#47;** // violation on next blank line, javadoc has lines without leading asterisk.\n+ *\n+ *  *&#47;\n+ * class BlankLine {}\n+ *\n+ * &#47;** Wrapped\n+ *     single-line comment *&#47; // violation, javadoc has lines without leading asterisk.\n+ * class Wrapped {}\n+ *\n+ * &#47;**\n+ *  * &lt;pre&gt;\n+ *     int value; // violation, javadoc has lines without leading asterisk.\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class Code {}\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class JavadocMissingLeadingAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_MISSING_ASTERISK = \"javadoc.missing.asterisk\";\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.NEWLINE,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getAcceptableJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        DetailNode nextSibling = getNextNode(detailNode);\n+\n+        // Till https://github.com/checkstyle/checkstyle/issues/9005\n+        // Due to bug in the Javadoc parser there may be phantom description nodes.\n+        while (TokenUtil.isOfType(nextSibling.getType(),\n+                JavadocTokenTypes.DESCRIPTION, JavadocTokenTypes.WS)) {\n+            nextSibling = getNextNode(nextSibling);\n+        }\n+\n+        if (!isLeadingAsterisk(nextSibling) && !isLastLine(nextSibling)) {\n+            log(nextSibling.getLineNumber(), MSG_MISSING_ASTERISK);\n+        }\n+    }\n+\n+    /**\n+     * Gets next node in the ast (sibling or parent sibling for the last node).\n+     *\n+     * @param detailNode the node to process\n+     * @return next node.\n+     */\n+    private static DetailNode getNextNode(DetailNode detailNode) {\n+        DetailNode node = JavadocUtil.getFirstChild(detailNode);\n+        if (node == null) {\n+            node = JavadocUtil.getNextSibling(detailNode);\n+            if (node == null) {\n+                DetailNode parent = detailNode;\n+                do {\n+                    parent = parent.getParent();\n+                    node = JavadocUtil.getNextSibling(parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNjMxMg==", "bodyText": "What is meant by first and last line?\nFirst line is always /** which I technically understand as the leading asterisk as it aligns with the next lines asterisk. Similar to the last line. Is it referring to those asterisks are not considered leading by our parser?", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528936312", "createdAt": "2020-11-23T19:13:12Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -967,6 +967,145 @@ public Runnable printLater(String s) {\n       </subsection>\n     </section>\n \n+    <section name=\"JavadocMissingLeadingAsterisk\">\n+      <p>Since Checkstyle 8.38</p>\n+      <subsection name=\"Description\" id=\"JavadocMissingLeadingAsterisk_Description\">\n+        <p>\n+          Checks if the javadoc has\n+          <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+            leading asterisks\n+          </a>\n+          on each line.\n+        </p>\n+        <p>\n+          The check does not require asterisks on the first line, nor on the last line\n+          if it is blank. All other lines in a Javadoc should start with <code>*</code>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzc0NTU1", "url": "https://github.com/checkstyle/checkstyle/pull/9006#pullrequestreview-540374555", "createdAt": "2020-11-28T13:10:51Z", "commit": {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1424, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}