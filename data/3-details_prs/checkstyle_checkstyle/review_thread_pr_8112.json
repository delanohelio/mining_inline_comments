{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzUxMTI0", "number": 8112, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToyNjoxNFrOD2WFIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowMTowMFrOEA0Bnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzExNDU2OnYy", "diffSide": "RIGHT", "path": "config/checkstyle_non_main_files_suppressions.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToyNjoxNFrOGMGBoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyODoxNFrOGM76-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNDgxNw==", "bodyText": "remove this folder from target of validation - https://github.com/checkstyle/checkstyle/blob/master/config/ant-phase-verify.xml#L34 .\nPlease try to configure archunit plugin to make such folder in target folder.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r415334817", "createdAt": "2020-04-26T15:26:14Z", "author": {"login": "romani"}, "path": "config/checkstyle_non_main_files_suppressions.xml", "diffHunk": "@@ -104,4 +104,8 @@\n     <suppress checks=\"RegexpSingleline\"\n               files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]metrics[\\\\/]classfanoutcomplexity[\\\\/]InputClassFanOutComplexityPackageName.*\\.java\"/>\n \n+    <!-- to suppress archunit ViolationStore and Rules files -->\n+    <suppress checks=\"NewlineAtEndOfFile\" files=\"[\\\\/]archunit_store\"/>\n+    <suppress checks=\"RegexpSingleline\" files=\"[\\\\/]archunit_store\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxNzg1MA==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416217850", "createdAt": "2020-04-27T23:28:14Z", "author": {"login": "gaurabdg"}, "path": "config/checkstyle_non_main_files_suppressions.xml", "diffHunk": "@@ -104,4 +104,8 @@\n     <suppress checks=\"RegexpSingleline\"\n               files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]metrics[\\\\/]classfanoutcomplexity[\\\\/]InputClassFanOutComplexityPackageName.*\\.java\"/>\n \n+    <!-- to suppress archunit ViolationStore and Rules files -->\n+    <suppress checks=\"NewlineAtEndOfFile\" files=\"[\\\\/]archunit_store\"/>\n+    <suppress checks=\"RegexpSingleline\" files=\"[\\\\/]archunit_store\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNDgxNw=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzExNTI1OnYy", "diffSide": "RIGHT", "path": "config/intellij-idea-inspections.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToyNjoyN1rOGMGB6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyODo0OFrOGM77ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNDg4OA==", "bodyText": "it is not ok.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r415334888", "createdAt": "2020-04-26T15:26:27Z", "author": {"login": "romani"}, "path": "config/intellij-idea-inspections.properties", "diffHunk": "@@ -8,5 +8,6 @@ idea.exclude.patterns=.idea/**;\\\n               src/site/resources/js/google-analytics.js;\\\n               src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java;\\\n               src/test/java/com/puppycrawl/tools/checkstyle/grammar/javadoc/ParseTreeBuilder.java;\\\n+              src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java;\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODA1MQ==", "bodyText": "@romani I have removed and added @noinspection. Thanks a lot for the guidance.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416218051", "createdAt": "2020-04-27T23:28:48Z", "author": {"login": "gaurabdg"}, "path": "config/intellij-idea-inspections.properties", "diffHunk": "@@ -8,5 +8,6 @@ idea.exclude.patterns=.idea/**;\\\n               src/site/resources/js/google-analytics.js;\\\n               src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java;\\\n               src/test/java/com/puppycrawl/tools/checkstyle/grammar/javadoc/ParseTreeBuilder.java;\\\n+              src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java;\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNDg4OA=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzExNjg2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/archunit.properties", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToyNzoyNVrOGMGCoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDozNTozNlrOGNsDQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg==", "bodyText": "what it will be if we avoid this file creation ?", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r415335072", "createdAt": "2020-04-26T15:27:25Z", "author": {"login": "romani"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODcyNw==", "bodyText": "To use the  freezing rule  (suppressions) we have to specify this option otherwise it won't work.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416218727", "createdAt": "2020-04-27T23:30:26Z", "author": {"login": "gaurabdg"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3OTQ3Nw==", "bodyText": "this looks like suppress all violations, and there is not itemized suppression. It is not ok.\nWe will never have time to resolve all at ones.\nPlease investigate how to have text file, or exclude in imports of classes to resolve to let us resolve problems one by one.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416579477", "createdAt": "2020-04-28T12:40:35Z", "author": {"login": "romani"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0ODA4NA==", "bodyText": "@romani I didn't exactly understand. Through this, we can achieve the task that all existing violations are suppressed and only a new violation will be reported.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416648084", "createdAt": "2020-04-28T14:14:22Z", "author": {"login": "gaurabdg"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY1OTc0NQ==", "bodyText": "please explain how it become possible if you do not define any of them in config. Please remove your target folder and most likely all violations appear again.\nIf no violations, it means that all violations are suppressed, no matter old or new.\nWe need a way to clearly see list of current problems in config and have ability to resolve them one by one. Reminder as we do this for pitest, checkstyle violation, pmd, all other tools.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416659745", "createdAt": "2020-04-28T14:28:48Z", "author": {"login": "romani"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4MzAxNQ==", "bodyText": "Okay, got it. I will look into it.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r416683015", "createdAt": "2020-04-28T14:57:16Z", "author": {"login": "gaurabdg"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNjQwMA==", "bodyText": "@romani I have implemented a workaround with java-diff-utils. Please have a look and let me know if it's okay.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r417006400", "createdAt": "2020-04-29T00:35:36Z", "author": {"login": "gaurabdg"}, "path": "src/test/resources/archunit.properties", "diffHunk": "@@ -0,0 +1 @@\n+freeze.store.default.allowStoreCreation=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTA3Mg=="}, "originalCommit": {"oid": "f57f9fb15adafb25e68e4a956fbaf9d72a184db4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDg1MjQ4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo0ODoyOFrOGNuzNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxNDoyOFrOGN4V7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MTQ0NQ==", "bodyText": "Shouldn't this scope be test too?", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r417051445", "createdAt": "2020-04-29T03:48:28Z", "author": {"login": "rnveach"}, "path": "pom.xml", "diffHunk": "@@ -223,6 +223,17 @@\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>com.tngtech.archunit</groupId>\n+      <artifactId>archunit-junit5</artifactId>\n+      <version>0.13.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.github.java-diff-utils</groupId>\n+      <artifactId>java-diff-utils</artifactId>\n+      <version>4.5</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5a8b86f4ae909034c3c6a0d46d521fb53ebdd0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNzc5MQ==", "bodyText": "Yes, sorry I missed it. I have added it.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r417207791", "createdAt": "2020-04-29T10:14:28Z", "author": {"login": "gaurabdg"}, "path": "pom.xml", "diffHunk": "@@ -223,6 +223,17 @@\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>com.tngtech.archunit</groupId>\n+      <artifactId>archunit-junit5</artifactId>\n+      <version>0.13.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.github.java-diff-utils</groupId>\n+      <artifactId>java-diff-utils</artifactId>\n+      <version>4.5</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MTQ0NQ=="}, "originalCommit": {"oid": "4c5a8b86f4ae909034c3c6a0d46d521fb53ebdd0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjQ5MDMyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxNDoyMlrOGN-MuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0ODozN1rOGPLwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMzczNg==", "bodyText": "please explain why https://www.archunit.org/userguide/html/000_Index.html#_ignoring_violations does not work for us.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r417303736", "createdAt": "2020-04-29T13:14:22Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n+import static java.nio.file.Files.lines;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.github.difflib.DiffUtils;\n+import com.github.difflib.UnifiedDiffUtils;\n+import com.github.difflib.algorithm.DiffException;\n+import com.github.difflib.patch.Patch;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void packageCyclicDependencyTest() throws Exception {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle\");\n+\n+        final ArchRule cyclicPackageRule = slices()\n+                .matching(\"com.puppycrawl.tools.checkstyle.(**)..\")\n+            .should().beFreeOfCycles();\n+        try {\n+            cyclicPackageRule.check(importedClasses);\n+        }\n+        catch (AssertionError assertionError) {\n+            processDiff(assertionError.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")\n+            .should().notBeProtected();\n+\n+        checkMethodsShouldNotBeProtectedRule.check(importedClasses);\n+    }\n+\n+    private static void processDiff(String errorMsg) throws IOException, DiffException {\n+        final List<String> prevSuppresions = lines(Paths.get(\"archunit_suppressions.txt\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3191ccfb1a1cb7a6f55006981e42f1d5fd8a12e6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTIwOQ==", "bodyText": "@romani I used breakpoints in the archunit code corresponding to this feature.\nThe FailureMessages are of the type:\njava.lang.AssertionError: Architecture Violation [Priority: MEDIUM] - Rule 'slices matching 'com.puppycrawl.tools.checkstyle.(**)..' should be free of cycles' was violated (13 times):\nCycle detected: Slice api -> Slice checks.naming -> Slice api\nDependencies of Slice api\nMethod <com.puppycrawl.tools.checkstyle.api.AutomaticBean$RelaxedAccessModifierArrayConverter.convert(java.lang.Class, java.lang.Object)> calls method <com.puppycrawl.tools.checkstyle.checks.naming.AccessModifier.getInstance(java.lang.String)> in (AutomaticBean.java:398)\nDependencies of Slice checks.naming\nMethod 1....\nClass 1....\nCycle detected: Slice api -> Slice checks.desgin -> Slice api\nMethod 1 ....\nMethod 2 ....\n.\n.\n.\n\nHere each section starting with Cycle detected: are treated as a single message in their filtering code.\nWhat we aim to achieve is that, in archunit_suppressions.txt we should put\nMethod 1 ...\nMethod 2 ...\nClass 1 ...\n\nBut in their ignoring violation feature if we specify Method 1.* as a regex whole of the message ie, the block starting with Cycles detected:  will be removed which is not desirable.\nSo, to treat individual Method 1 ..., Method 2 ... suppressions I have used diff.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r417329209", "createdAt": "2020-04-29T13:49:44Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n+import static java.nio.file.Files.lines;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.github.difflib.DiffUtils;\n+import com.github.difflib.UnifiedDiffUtils;\n+import com.github.difflib.algorithm.DiffException;\n+import com.github.difflib.patch.Patch;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void packageCyclicDependencyTest() throws Exception {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle\");\n+\n+        final ArchRule cyclicPackageRule = slices()\n+                .matching(\"com.puppycrawl.tools.checkstyle.(**)..\")\n+            .should().beFreeOfCycles();\n+        try {\n+            cyclicPackageRule.check(importedClasses);\n+        }\n+        catch (AssertionError assertionError) {\n+            processDiff(assertionError.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")\n+            .should().notBeProtected();\n+\n+        checkMethodsShouldNotBeProtectedRule.check(importedClasses);\n+    }\n+\n+    private static void processDiff(String errorMsg) throws IOException, DiffException {\n+        final List<String> prevSuppresions = lines(Paths.get(\"archunit_suppressions.txt\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMzczNg=="}, "originalCommit": {"oid": "3191ccfb1a1cb7a6f55006981e42f1d5fd8a12e6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3MTgwMw==", "bodyText": "you did not answered my question, please do.\nPlease ask archunit maintainers (forum, stackverflow, .... ) on how to do suppression on all existing violations to prevent new violations to appear.\nmeanwhile please move to config/archunit_suppressions.txt, this file is in unmanageable size.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r418071803", "createdAt": "2020-04-30T14:54:12Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n+import static java.nio.file.Files.lines;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.github.difflib.DiffUtils;\n+import com.github.difflib.UnifiedDiffUtils;\n+import com.github.difflib.algorithm.DiffException;\n+import com.github.difflib.patch.Patch;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void packageCyclicDependencyTest() throws Exception {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle\");\n+\n+        final ArchRule cyclicPackageRule = slices()\n+                .matching(\"com.puppycrawl.tools.checkstyle.(**)..\")\n+            .should().beFreeOfCycles();\n+        try {\n+            cyclicPackageRule.check(importedClasses);\n+        }\n+        catch (AssertionError assertionError) {\n+            processDiff(assertionError.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")\n+            .should().notBeProtected();\n+\n+        checkMethodsShouldNotBeProtectedRule.check(importedClasses);\n+    }\n+\n+    private static void processDiff(String errorMsg) throws IOException, DiffException {\n+        final List<String> prevSuppresions = lines(Paths.get(\"archunit_suppressions.txt\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMzczNg=="}, "originalCommit": {"oid": "3191ccfb1a1cb7a6f55006981e42f1d5fd8a12e6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2MjA5MQ==", "bodyText": "@romani the last answer explains why the archunit_ignore_patterns.txt do not work. I did ask the maintainers. Here's the link TNG/ArchUnit#350\nThey also suggested to use freezing arch rule, the one which I implemented earlier.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r418162091", "createdAt": "2020-04-30T17:11:02Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n+import static java.nio.file.Files.lines;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.github.difflib.DiffUtils;\n+import com.github.difflib.UnifiedDiffUtils;\n+import com.github.difflib.algorithm.DiffException;\n+import com.github.difflib.patch.Patch;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void packageCyclicDependencyTest() throws Exception {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle\");\n+\n+        final ArchRule cyclicPackageRule = slices()\n+                .matching(\"com.puppycrawl.tools.checkstyle.(**)..\")\n+            .should().beFreeOfCycles();\n+        try {\n+            cyclicPackageRule.check(importedClasses);\n+        }\n+        catch (AssertionError assertionError) {\n+            processDiff(assertionError.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")\n+            .should().notBeProtected();\n+\n+        checkMethodsShouldNotBeProtectedRule.check(importedClasses);\n+    }\n+\n+    private static void processDiff(String errorMsg) throws IOException, DiffException {\n+        final List<String> prevSuppresions = lines(Paths.get(\"archunit_suppressions.txt\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMzczNg=="}, "originalCommit": {"oid": "3191ccfb1a1cb7a6f55006981e42f1d5fd8a12e6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxODcwNg==", "bodyText": "@romani Even if we use the feature in the link you mentioned(archunit_ignore_patterns.txt), we do need an UT to check the current violations and tell the user to either fix the new violation or that a exisiting violation has been fixed and needs to be removed from the suppression file, for which we require diff. If we use their feature we have to write all the violations in regex format which is a bit of extra work provided the way I have implemented already satisfies all needs. Please let me know if I am missing something.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r418218706", "createdAt": "2020-04-30T18:50:04Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n+import static java.nio.file.Files.lines;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.github.difflib.DiffUtils;\n+import com.github.difflib.UnifiedDiffUtils;\n+import com.github.difflib.algorithm.DiffException;\n+import com.github.difflib.patch.Patch;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void packageCyclicDependencyTest() throws Exception {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle\");\n+\n+        final ArchRule cyclicPackageRule = slices()\n+                .matching(\"com.puppycrawl.tools.checkstyle.(**)..\")\n+            .should().beFreeOfCycles();\n+        try {\n+            cyclicPackageRule.check(importedClasses);\n+        }\n+        catch (AssertionError assertionError) {\n+            processDiff(assertionError.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")\n+            .should().notBeProtected();\n+\n+        checkMethodsShouldNotBeProtectedRule.check(importedClasses);\n+    }\n+\n+    private static void processDiff(String errorMsg) throws IOException, DiffException {\n+        final List<String> prevSuppresions = lines(Paths.get(\"archunit_suppressions.txt\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMzczNg=="}, "originalCommit": {"oid": "3191ccfb1a1cb7a6f55006981e42f1d5fd8a12e6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NDU0Mg==", "bodyText": "I try to avoid big files that keep state of some plugins.\nCan you confirm that freezer will fail if any changes appear in store ? How diff on store will looks like ?\n\nfrom referenced ticket in archunit ...\ncan we use slices()...should().beFreeOfCycles().ignoreDependency ?\nand to make it useful ... we will create test method for each package, so our ignoreXxxxxx will be more specific. So we might be able to resolve dependency one by one and visually see what we still have in ignoreXXXX.\nLets make just another PR to try this.\nLets make one more PR with freeze rule, to see it in action on changes (second commit can remove some dependency by brutal code removal, some will fail but we need to see a diff on store file).\n\n\nSo, to treat individual Method 1 ..., Method 2 ... suppressions I have used diff.\n\nWhy do we care that much of dependency of methods on class? I always thought of it as dependency between classes.\ncan we keep in repo archunit_ignore_patterns.txt as plain text file and do simple string compare by google.truth assert. If diff is happening, conributor just need  to generate new ignore file and send a change on it.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r418574542", "createdAt": "2020-05-01T14:48:37Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n+import static java.nio.file.Files.lines;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.github.difflib.DiffUtils;\n+import com.github.difflib.UnifiedDiffUtils;\n+import com.github.difflib.algorithm.DiffException;\n+import com.github.difflib.patch.Patch;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void packageCyclicDependencyTest() throws Exception {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle\");\n+\n+        final ArchRule cyclicPackageRule = slices()\n+                .matching(\"com.puppycrawl.tools.checkstyle.(**)..\")\n+            .should().beFreeOfCycles();\n+        try {\n+            cyclicPackageRule.check(importedClasses);\n+        }\n+        catch (AssertionError assertionError) {\n+            processDiff(assertionError.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")\n+            .should().notBeProtected();\n+\n+        checkMethodsShouldNotBeProtectedRule.check(importedClasses);\n+    }\n+\n+    private static void processDiff(String errorMsg) throws IOException, DiffException {\n+        final List<String> prevSuppresions = lines(Paths.get(\"archunit_suppressions.txt\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMzczNg=="}, "originalCommit": {"oid": "3191ccfb1a1cb7a6f55006981e42f1d5fd8a12e6"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjE4MjcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxMTozN1rOGTtjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNDo0MVrOGb3kZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA==", "bodyText": "#7469 (comment)\n\nChecks should not have protected methods or fields.\n\nBy the name matching \"^(Abstract), isn't this only checking that methods in classes named \"Abstract\" are not allowed to have protected methods? If that is the case, shouldn't that result in a failure as the whole point of abstract classes is to have protected methods.\nExample: \n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n    \n    \n         Line 55\n      in\n      2e8c277\n    \n    \n    \n    \n\n        \n          \n           protected abstract String getMethodName(); \n        \n    \n  \n\n\nEven for protected methods in final classes, we will have some that are overridden from the super class. Do we need to distinguish between these?", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r423322368", "createdAt": "2020-05-11T21:11:37Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczNTUyMA==", "bodyText": "good catch.\n\n^(Abstract)\n\nshould be changed to all Checks except for Abstract...Check\n\nDo we need to distinguish between these?\n\nThis should not be violation (as it has Override annotation):\n\n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperFinalizeCheck.java\n    \n    \n        Lines 46 to 49\n      in\n      4768470\n    \n    \n    \n    \n\n        \n          \n           public class SuperFinalizeCheck extends AbstractSuperCheck { \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               protected String getMethodName() {", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r423735520", "createdAt": "2020-05-12T13:32:42Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMTM2OQ==", "bodyText": "@romani @gaurabdg If you agree with my analysis that we are not checking the right class names, why isn't there a violation in travis?\nIf it is scanning abstract classes, why didn't it flag them as I pointed out we have non-override protected methods in an abstract class. If it is not scanning abstract classes, why didn't it flag the methods with the Override annotations. Nothing says to specifically ignore overridden methods and it seems always skipping or defaulting to skip them would lead to issues with people unfamilar with arch unit.\nI couldn't confirm anything in their documentation and didn't try to debug this more.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r424031369", "createdAt": "2020-05-12T21:01:45Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODE1Ng==", "bodyText": "I wrote this condition for the test:\n        final ArchRule checkMethodsShouldNotBeProtectedRule =\n            methods().that()\n            .areNotAnnotatedWith(Override.class).and()\n            .areDeclaredInClassesThat()\n            .haveSimpleNameEndingWith(\"Check\").and()\n            .doNotHaveModifier(JavaModifier.ABSTRACT)\n            .should().notBeProtected();\n\nThe error reported was as follows:\ncom.tngtech.archunit.base.ArchUnitException$InvalidSyntaxUsageException: Annotation type java.lang.Override has @Retention(SOURCE), thus the information is gone after compile. So checking this with ArchUnit is useless. \nSo, we can't essentially use the Override annotation to skip methods such as processFiltered. I am looking at other workarounds.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r424578156", "createdAt": "2020-05-13T16:37:51Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDQ2OA==", "bodyText": "One thing I can do is to collect all Abstract.* class' methods and generate a regex string like .*(processFiltered | getMethodName...) to add to the archrule condition ..methods().that().haveNameNotMatching(regex) to skip them. Shall I implement this?", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r424600468", "createdAt": "2020-05-13T17:13:49Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjQ2MQ==", "bodyText": "One thing I can do is to collect all Abstract.* class' methods\n\nCan ArchUnit do this for you so you don't have to? Or is it strictly a violation tool.\nI don't see any other choice for specific methods unless we create some new annotation to line up with Override. I would add some type of comment that says what the method list is.\nWhat about my concern for the currently pushed code not producing a violation when it looks like it should be?", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r424666461", "createdAt": "2020-05-13T19:04:12Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzUwNg==", "bodyText": "What about my concern for the currently pushed code not producing a violation when it looks like it should be?\n\nI was assuming it was ignoring only Abstract.* checks, but it skipped all, it was a mistake on my part.\n\nCan ArchUnit do this for you so you don't have to? Or is it strictly a violation tool.\n\nI will look into it.\n\nI don't see any other choice for specific methods unless we create some new annotation to line up with Override.\n\nYes, we can create a new annotation with custom retention.\n\nI would add some type of comment that says what the method list is.\n\nI didn' understand what you are trying to say. Are you saying we should create an ignoreList set, to ignore?", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r424697506", "createdAt": "2020-05-13T20:01:32Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0ODU3Mg==", "bodyText": "I didn' understand what you are trying to say.\n\nIf we create a list of methods to suppress, we need a comment saying something like \"these methods are a list of methods with the Override annotation\". This way it is clear when new Override method is added, we know it should be added to the list and should not add a method that is protected without an Override.\n@romani please chime in on your thoughts on workaround. It seems ArchUnit has some limitations.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r424848572", "createdAt": "2020-05-14T03:21:04Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNzE1Nw==", "bodyText": "as the whole point of abstract classes is to have protected methods.\n\nis to have same implementation of some methods irrespective of modifier. Projected methods are visible not only Child classes, BUT to same package classes also - this is the biggest problems of them, they have two sides of visibility (NOT a single).", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r426317157", "createdAt": "2020-05-17T23:29:44Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxNzgwMw==", "bodyText": "@gaurabdg ,\n\nSo, we can't essentially use the Override annotation to skip methods such as processFiltered. I am looking at other workarounds.\n\nplease report this to ArchUnit maintainers and ask them for for workaround, there might be some option to disable this error. Static analysys tool need to work on annotations that have no effect in runtime, majority of annotations are flags/metadata/markers.  Please share link to discussion.\n\nnew annotation\n\nno, it is better to not use archunit for this. We should not damage our code in favor of tool.\n\nIf we create a list of methods to suppress, we need a comment saying something like \"these methods are a list of methods with the Override annotation\"\n\nI am ok for this now as workaround, if list of methods is manageable size. But we still need to contact Archunit team for help, to avoid ArchUnitException$InvalidSyntaxUsageException.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r426317803", "createdAt": "2020-05-17T23:36:55Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2NjU3MQ==", "bodyText": "Here is the issue TNG/ArchUnit#359\nIf they don't reply within a few days, I'll implement the workaround.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r427466571", "createdAt": "2020-05-19T17:15:30Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NjUyMw==", "bodyText": "Here is the reply TNG/ArchUnit#359 (comment), its not possible it seems. I am starting working on a workaround.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r427596523", "createdAt": "2020-05-19T20:59:35Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NTE3Mw==", "bodyText": "rnveach od not have time to continue this PR, I take over it.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r431875173", "createdAt": "2020-05-28T14:24:41Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.\n+     *\n+     * @noinspection JUnitTestMethodWithNoAssertions\n+     */\n+    @Test\n+    public void nonProtectedCheckMethodsTest() {\n+        final JavaClasses importedClasses = new ClassFileImporter()\n+                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)\n+                .importPackages(\"com.puppycrawl.tools.checkstyle.checks\");\n+\n+        final ArchRule checkMethodsShouldNotBeProtectedRule = methods().that()\n+            .areDeclaredInClassesThat().haveNameMatching(\"^(Abstract).*Check\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjM2OA=="}, "originalCommit": {"oid": "fb39e0fc7c3c2e4d769ba4bf70e4d7599ab590dc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Nzk1MDYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo0NToyNlrOGaBpqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzozNTozMFrOGaLDkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzIxMQ==", "bodyText": "please add as first sentence:\nThe goal is to ensure all classes of a specific name pattern have non-protected methods, except for those which are annotated with Override. In the bytecode there is no trace anymore if this method was annotated with @Override or not (limitation of Archunit), eventually we need to make checkstyle's Check on this.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r429943211", "createdAt": "2020-05-25T13:45:26Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.JavaModifier;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f754ac13a8569ba6c574b5f9030ab4e73c5200d5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NzI5OQ==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r430097299", "createdAt": "2020-05-25T23:35:30Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.JavaModifier;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+    /**\n+     * Test contains asserts in callstack, but idea does not see them.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzIxMQ=="}, "originalCommit": {"oid": "f754ac13a8569ba6c574b5f9030ab4e73c5200d5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg3MTk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo1OToxMVrOGcUlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNjoyNDo0OFrOGc0JkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MDUyNw==", "bodyText": "which are annotated with Override\nwas annotated with @Override\ndoc should be consistent.\nAlso, to avoid some reporting of some tools that @Override is not a valid tag, please use {@code blablabla} or {@literal @}", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r432350527", "createdAt": "2020-05-29T08:59:11Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.JavaModifier;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+    /**\n+     * The goal is to ensure all classes of a specific name pattern have non-protected methods,\n+     * except for those which are annotated with Override. In the bytecode there is no trace anymore\n+     * if this method was annotated with @Override or not (limitation of Archunit), eventually we", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8be5055aed0285ce1dae1a82ea11e676767f9dcd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzcyOA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r432867728", "createdAt": "2020-05-30T16:24:48Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.JavaModifier;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+    /**\n+     * The goal is to ensure all classes of a specific name pattern have non-protected methods,\n+     * except for those which are annotated with Override. In the bytecode there is no trace anymore\n+     * if this method was annotated with @Override or not (limitation of Archunit), eventually we", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MDUyNw=="}, "originalCommit": {"oid": "8be5055aed0285ce1dae1a82ea11e676767f9dcd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg3ODM5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowMTowMFrOGcUpgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNjoyNDo1M1rOGc0Jlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MTYxNg==", "bodyText": "contains asserts -> contains assertions\nbut idea does not see them - > it is not idea, it is teamcity inspection", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r432351616", "createdAt": "2020-05-29T09:01:00Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.JavaModifier;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+    /**\n+     * The goal is to ensure all classes of a specific name pattern have non-protected methods,\n+     * except for those which are annotated with Override. In the bytecode there is no trace anymore\n+     * if this method was annotated with @Override or not (limitation of Archunit), eventually we\n+     * need to make checkstyle's Check on this.\n+     * Test contains asserts in callstack, but idea does not see them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8be5055aed0285ce1dae1a82ea11e676767f9dcd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzczNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8112#discussion_r432867735", "createdAt": "2020-05-30T16:24:53Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.JavaModifier;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchRule;\n+\n+public class ArchUnitTest {\n+    /**\n+     * The goal is to ensure all classes of a specific name pattern have non-protected methods,\n+     * except for those which are annotated with Override. In the bytecode there is no trace anymore\n+     * if this method was annotated with @Override or not (limitation of Archunit), eventually we\n+     * need to make checkstyle's Check on this.\n+     * Test contains asserts in callstack, but idea does not see them.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MTYxNg=="}, "originalCommit": {"oid": "8be5055aed0285ce1dae1a82ea11e676767f9dcd"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1142, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}