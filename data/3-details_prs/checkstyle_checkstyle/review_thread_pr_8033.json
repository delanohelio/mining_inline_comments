{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4Njc2MDEx", "number": 8033, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMDoyODo0MlrODuuSnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyNzo0OVrODwTnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzE5NTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMDoyODo0MlrOGA0gDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMzo0N1rOGC6yOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzM1Ng==", "bodyText": "please add more examples of default class names", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r403513356", "createdAt": "2020-04-04T20:28:42Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,37 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public void function() {\n+ *     HashMap&lt;String, String&gt; var; // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b112a075457f52a3793dc1d57f1935e664fc70"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzQ2NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r405713465", "createdAt": "2020-04-08T18:03:47Z", "author": {"login": "DXTkastb"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,37 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public void function() {\n+ *     HashMap&lt;String, String&gt; var; // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzM1Ng=="}, "originalCommit": {"oid": "95b112a075457f52a3793dc1d57f1935e664fc70"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzE5NTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMDoyOToxMlrOGA0gVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMzo1M1rOGC6ybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzQyOA==", "bodyText": "please do not use var as variable name, it can be a bit confusing after java 10", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r403513428", "createdAt": "2020-04-04T20:29:12Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,37 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public void function() {\n+ *     HashMap&lt;String, String&gt; var; // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b112a075457f52a3793dc1d57f1935e664fc70"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzUxOQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r405713519", "createdAt": "2020-04-08T18:03:53Z", "author": {"login": "DXTkastb"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,37 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public void function() {\n+ *     HashMap&lt;String, String&gt; var; // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzQyOA=="}, "originalCommit": {"oid": "95b112a075457f52a3793dc1d57f1935e664fc70"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTc5Mzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyNzowOFrOGDOt2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyMTo0MVrOGDWVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDAyNw==", "bodyText": "typeParam(T) invalid syntax", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406040027", "createdAt": "2020-04-09T08:27:08Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDc2NA==", "bodyText": "done.", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406164764", "createdAt": "2020-04-09T12:21:41Z", "author": {"login": "DXTkastb"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDAyNw=="}, "originalCommit": {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTc5NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyNzo0M1rOGDOvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyMTo1MVrOGDWVdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDM3Mw==", "bodyText": "please change ignored method name to function as description says", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406040373", "createdAt": "2020-04-09T08:27:43Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n- *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;getInstance&quot;/&gt;\n+ *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;function1&quot;/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDg1NQ==", "bodyText": "done.", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406164855", "createdAt": "2020-04-09T12:21:51Z", "author": {"login": "DXTkastb"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n- *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;getInstance&quot;/&gt;\n+ *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;function1&quot;/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDM3Mw=="}, "originalCommit": {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTc5NjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyNzo0OVrOGDOvZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyMjowMVrOGDWV0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDQyMw==", "bodyText": "here too", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406040423", "createdAt": "2020-04-09T08:27:49Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n- *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;getInstance&quot;/&gt;\n+ *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;function1&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public HashMap&lt;String, String&gt; function1() { // OK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDk0NQ==", "bodyText": "done.", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406164945", "createdAt": "2020-04-09T12:22:01Z", "author": {"login": "DXTkastb"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n- *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;getInstance&quot;/&gt;\n+ *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;function1&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public HashMap&lt;String, String&gt; function1() { // OK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDQyMw=="}, "originalCommit": {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1052, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}