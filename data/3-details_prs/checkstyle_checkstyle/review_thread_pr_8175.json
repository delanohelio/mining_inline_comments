{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTE1ODg4", "number": 8175, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNDoyNjoxNFrOD2CkGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNTo0NDoxMVrOEBQEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTkxNzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNDoyNjoxNFrOGLwE_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDozMjo1M1rOGPLUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ==", "bodyText": "From #8048 (comment): I still think that a declarative programming approach with streams is a much more elegant implementation than this.", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r414975231", "createdAt": "2020-04-25T04:26:14Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,23 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        boolean result = false;\n+        for (int t : types) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3ODg5Ng==", "bodyText": "I think you're right. That's a better implementation.\n@romani @rnveach ping", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r415078896", "createdAt": "2020-04-25T14:57:44Z", "author": {"login": "shashwatj07"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,23 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        boolean result = false;\n+        for (int t : types) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ=="}, "originalCommit": {"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTgzOA==", "bodyText": "totally agree with @wltan", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418519838", "createdAt": "2020-05-01T12:22:45Z", "author": {"login": "timurt"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,23 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        boolean result = false;\n+        for (int t : types) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ=="}, "originalCommit": {"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NzM1MQ==", "bodyText": "Done!", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418567351", "createdAt": "2020-05-01T14:32:53Z", "author": {"login": "shashwatj07"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,23 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        boolean result = false;\n+        for (int t : types) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ=="}, "originalCommit": {"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDE3NDE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoyMDozMlrOGPIY1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDozMzowMFrOGPLU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTI1Mw==", "bodyText": "it is better to create two separate tests with corresponding names", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418519253", "createdAt": "2020-05-01T12:20:32Z", "author": {"login": "timurt"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java", "diffHunk": "@@ -277,4 +278,18 @@ public void testForEachChild() {\n         assertEquals(secondSibling, firstChild, \"Mismatched child node\");\n     }\n \n+    @Test\n+    public void testIsOfTypeTrue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NzQxMw==", "bodyText": "Done!", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418567413", "createdAt": "2020-05-01T14:33:00Z", "author": {"login": "shashwatj07"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java", "diffHunk": "@@ -277,4 +278,18 @@ public void testForEachChild() {\n         assertEquals(secondSibling, firstChild, \"Mismatched child node\");\n     }\n \n+    @Test\n+    public void testIsOfTypeTrue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTI1Mw=="}, "originalCommit": {"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg1MTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0MzozMlrOGPO5KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1NDo1NlrOGPPM0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTgzMw==", "bodyText": "please reuse function you wrote above", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418625833", "createdAt": "2020-05-01T16:43:32Z", "author": {"login": "timurt"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,29 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the token type belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        return Arrays.stream(types).anyMatch(tokenType -> tokenType == type);\n+    }\n+\n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param ast the AST node to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(DetailAST ast, int... types) {\n+        return ast != null\n+                && Arrays.stream(types).anyMatch(tokenType -> tokenType == ast.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a194aeea1dbada28409ac41329f5d66aa2be03"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMDg2NA==", "bodyText": "Done! @timurt", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418630864", "createdAt": "2020-05-01T16:54:56Z", "author": {"login": "shashwatj07"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,29 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the token type belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        return Arrays.stream(types).anyMatch(tokenType -> tokenType == type);\n+    }\n+\n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param ast the AST node to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(DetailAST ast, int... types) {\n+        return ast != null\n+                && Arrays.stream(types).anyMatch(tokenType -> tokenType == ast.getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTgzMw=="}, "originalCommit": {"oid": "05a194aeea1dbada28409ac41329f5d66aa2be03"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODA1MzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxOToxOFrOGaCpmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNTo0MDoxMVrOGp2jug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1OTU3Ng==", "bodyText": "please restore single node verification to use ==, it is more concise and shorter and performance is better.", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r429959576", "createdAt": "2020-05-25T14:19:18Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -253,20 +243,18 @@ public static boolean isOuterMostType(DetailAST node) {\n     public static boolean isLocalVariableDef(DetailAST node) {\n         boolean localVariableDef = false;\n         // variable declaration?\n-        if (node.getType() == TokenTypes.VARIABLE_DEF) {\n+        if (TokenUtil.isOfType(node, TokenTypes.VARIABLE_DEF)) {\n             final DetailAST parent = node.getParent();\n-            final int type = parent.getType();\n-            localVariableDef = type == TokenTypes.SLIST\n-                    || type == TokenTypes.FOR_INIT\n-                    || type == TokenTypes.FOR_EACH_CLAUSE;\n+            localVariableDef = TokenUtil.isOfType(parent, TokenTypes.SLIST,\n+                                TokenTypes.FOR_INIT, TokenTypes.FOR_EACH_CLAUSE);\n         }\n         // catch parameter?\n-        if (node.getType() == TokenTypes.PARAMETER_DEF) {\n+        if (TokenUtil.isOfType(node, TokenTypes.PARAMETER_DEF)) {\n             final DetailAST parent = node.getParent();\n-            localVariableDef = parent.getType() == TokenTypes.LITERAL_CATCH;\n+            localVariableDef = TokenUtil.isOfType(parent.getType(), TokenTypes.LITERAL_CATCH);\n         }\n \n-        if (node.getType() == TokenTypes.RESOURCE) {\n+        if (TokenUtil.isOfType(node, TokenTypes.RESOURCE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzODY4Mg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446538682", "createdAt": "2020-06-27T15:40:11Z", "author": {"login": "shashwatj07"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -253,20 +243,18 @@ public static boolean isOuterMostType(DetailAST node) {\n     public static boolean isLocalVariableDef(DetailAST node) {\n         boolean localVariableDef = false;\n         // variable declaration?\n-        if (node.getType() == TokenTypes.VARIABLE_DEF) {\n+        if (TokenUtil.isOfType(node, TokenTypes.VARIABLE_DEF)) {\n             final DetailAST parent = node.getParent();\n-            final int type = parent.getType();\n-            localVariableDef = type == TokenTypes.SLIST\n-                    || type == TokenTypes.FOR_INIT\n-                    || type == TokenTypes.FOR_EACH_CLAUSE;\n+            localVariableDef = TokenUtil.isOfType(parent, TokenTypes.SLIST,\n+                                TokenTypes.FOR_INIT, TokenTypes.FOR_EACH_CLAUSE);\n         }\n         // catch parameter?\n-        if (node.getType() == TokenTypes.PARAMETER_DEF) {\n+        if (TokenUtil.isOfType(node, TokenTypes.PARAMETER_DEF)) {\n             final DetailAST parent = node.getParent();\n-            localVariableDef = parent.getType() == TokenTypes.LITERAL_CATCH;\n+            localVariableDef = TokenUtil.isOfType(parent.getType(), TokenTypes.LITERAL_CATCH);\n         }\n \n-        if (node.getType() == TokenTypes.RESOURCE) {\n+        if (TokenUtil.isOfType(node, TokenTypes.RESOURCE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1OTU3Ng=="}, "originalCommit": {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzQ3Mzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNTo0NDoxMVrOGc_V8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNjozMzowOVrOGp21HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw==", "bodyText": "I'd like to have a dedicated method for Class/Interface/Enum/Annotation checking.\nSomething like TokenUtil.isTypeDeclaration(tokenType)", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r433051123", "createdAt": "2020-06-01T05:44:11Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -70,18 +70,17 @@ public static Scope getSurroundingScope(DetailAST node) {\n              token != null;\n              token = token.getParent()) {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF\n-                || type == TokenTypes.INTERFACE_DEF\n-                || type == TokenTypes.ANNOTATION_DEF\n-                || type == TokenTypes.ENUM_DEF) {\n+            if (TokenUtil.isOfType(type, TokenTypes.CLASS_DEF,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzODcyOQ==", "bodyText": "can we do it in a separate PR?", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446538729", "createdAt": "2020-06-27T15:40:38Z", "author": {"login": "shashwatj07"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -70,18 +70,17 @@ public static Scope getSurroundingScope(DetailAST node) {\n              token != null;\n              token = token.getParent()) {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF\n-                || type == TokenTypes.INTERFACE_DEF\n-                || type == TokenTypes.ANNOTATION_DEF\n-                || type == TokenTypes.ENUM_DEF) {\n+            if (TokenUtil.isOfType(type, TokenTypes.CLASS_DEF,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw=="}, "originalCommit": {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MjM3Mw==", "bodyText": "Sure.", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446542373", "createdAt": "2020-06-27T16:24:25Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -70,18 +70,17 @@ public static Scope getSurroundingScope(DetailAST node) {\n              token != null;\n              token = token.getParent()) {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF\n-                || type == TokenTypes.INTERFACE_DEF\n-                || type == TokenTypes.ANNOTATION_DEF\n-                || type == TokenTypes.ENUM_DEF) {\n+            if (TokenUtil.isOfType(type, TokenTypes.CLASS_DEF,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw=="}, "originalCommit": {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MzEzMg==", "bodyText": "please open a new issue for it. i'll work on it as soon as it get approved.", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446543132", "createdAt": "2020-06-27T16:33:09Z", "author": {"login": "shashwatj07"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -70,18 +70,17 @@ public static Scope getSurroundingScope(DetailAST node) {\n              token != null;\n              token = token.getParent()) {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF\n-                || type == TokenTypes.INTERFACE_DEF\n-                || type == TokenTypes.ANNOTATION_DEF\n-                || type == TokenTypes.ENUM_DEF) {\n+            if (TokenUtil.isOfType(type, TokenTypes.CLASS_DEF,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw=="}, "originalCommit": {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 954, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}