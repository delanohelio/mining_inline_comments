{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDE0NTMz", "number": 8057, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0NDoyMFrODw9Elg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MzowNVrODw9HaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU4ODM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0NDoyMFrOGENsyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyOTozMFrOGEOXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ==", "bodyText": "this example looks redundant", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407071945", "createdAt": "2020-04-11T14:44:20Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n  * Explanation on how complexity is calculated (switchBlockAsSingleDecisionPoint is set to false):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NDA4Mg==", "bodyText": "so should i remove the redundant cases?", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407074082", "createdAt": "2020-04-11T15:04:13Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n  * Explanation on how complexity is calculated (switchBlockAsSingleDecisionPoint is set to false):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ=="}, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NTcwNA==", "bodyText": "I think yes, because other examples are pretty good at explaining how complexity is calculated", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407075704", "createdAt": "2020-04-11T15:19:23Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n  * Explanation on how complexity is calculated (switchBlockAsSingleDecisionPoint is set to false):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ=="}, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Mjk0Mw==", "bodyText": "should i remove both of the examples below this?", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407082943", "createdAt": "2020-04-11T16:29:30Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n  * Explanation on how complexity is calculated (switchBlockAsSingleDecisionPoint is set to false):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ=="}, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU5MDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0Njo0N1rOGENtzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0Njo0N1rOGENtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjIwNA==", "bodyText": "please add \"operator\" to just operator signs, I mean to make it like \"|| operator\"", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072204", "createdAt": "2020-04-11T14:46:47Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU5MTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0ODoyMFrOGENucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0ODoyMFrOGENucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjM3MA==", "bodyText": "switch is not considered when switchBlockAsSingleDecisionPoint is false\nThis is confusing. Why it is not considered when below you show that every case statement adds +1 to complexity?", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072370", "createdAt": "2020-04-11T14:48:20Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU5MzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo0OTo1NlrOGENvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNToyMDoyNlrOGEN70g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjUzMw==", "bodyText": "please change one of else ifs to ternar operator example.", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072533", "createdAt": "2020-04-11T14:49:56Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NDE5NA==", "bodyText": "so u mean to add ternary operator example in one of the bodies?", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407074194", "createdAt": "2020-04-11T15:05:16Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjUzMw=="}, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NTc5NA==", "bodyText": "No, just remove one else if and add ternary operator after last else, like it is in other example", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407075794", "createdAt": "2020-04-11T15:20:26Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjUzMw=="}, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU5MzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MDozMFrOGENvOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MDozMFrOGENvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjU2OQ==", "bodyText": "please add necessary fields to make it compilable.\nAlso, there is no need to compare variables, it can be int variables compared with literals, like a == 1", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072569", "createdAt": "2020-04-11T14:50:30Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU5NDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MTo1OFrOGENv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MTo1OFrOGENv3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjczNA==", "bodyText": "no need for double if", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072734", "createdAt": "2020-04-11T14:51:58Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjU5NTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MzowNVrOGENwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNDo1MzowNVrOGENwVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3Mjg1Mg==", "bodyText": "? -> ternary  operator", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072852", "createdAt": "2020-04-11T14:53:05Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029ffebf76590c0f73af2e315365b66639b8d765"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1077, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}