{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4Nzc0Mzk5", "number": 8035, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNToxNFrODu2HNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1ODo1MFrOD1wxeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDQ3NjcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNToxNFrOGA9bDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwOToxNzo1OFrOGA-Q2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTUzNQ==", "bodyText": "Note that you change %n with \\n in the test. Please use %n as the end-of-line marker to fix windows build.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403659535", "createdAt": "2020-04-05T07:05:14Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "diffHunk": "@@ -78,60 +78,126 @@\n             + \"Try 'checkstyle --help' for more information.%n\");\n \n     private static final String USAGE = String.format(Locale.ROOT,\n-          \"Usage: checkstyle [-dEghjJtTV] [-b=<xpath>] [-c=<configurationFile>]\"\n-          + \" [-C=<checkerThreadsNumber>]%n\"\n-          + \"                  [-f=<format>] [-o=<outputPath>] [-p=<propertiesFile>]%n\"\n-          + \"                  [-s=<suppressionLineColumnNumber>] [-w=<tabWidth>]\"\n-          + \" [-W=<treeWalkerThreadsNumber>]%n\"\n-          + \"                  [-e=<exclude>]... [-x=<excludeRegex>]...\"\n-          + \" <files>...%n\"\n-          + \"Checkstyle verifies that the specified source code files adhere to the specified\"\n-          + \" rules. By default%n\"\n-          + \"violations are reported to standard out in plain format. Checkstyle requires a\"\n-          + \" configuration XML%n\"\n-          + \"file that configures the checks to apply.%n\"\n-          + \"      <files>...            One or more source files to verify%n\"\n-          + \"  -b, --branch-matching-xpath=<xpath>%n\"\n-          + \"                            Show Abstract Syntax Tree(AST) branches that match XPath%n\"\n-          + \"  -c=<configurationFile>    Sets the check configuration file to use.%n\"\n-          + \"  -C, --checker-threads-number=<checkerThreadsNumber>%n\"\n-          + \"                            (experimental) The number of Checker threads (must be\"\n-          + \" greater than zero)%n\"\n-          + \"  -d, --debug               Print all debug logging of CheckStyle utility%n\"\n-          + \"  -e, --exclude=<exclude>   Directory/File path to exclude from CheckStyle%n\"\n-          + \"  -E, --executeIgnoredModules%n\"\n-          + \"                            Allows ignored modules to be run.%n\"\n-          + \"  -f=<format>               Sets the output format. Valid values: xml, plain.\"\n-          + \" Defaults to plain%n\"\n-          + \"  -g, --generate-xpath-suppression%n\"\n-          + \"                            Generates to output a suppression xml to use to suppress\"\n-          + \" all violations%n\"\n-          + \"                              from user's config%n\"\n-          + \"  -h, --help                Show this help message and exit.%n\"\n-          + \"  -j, --javadocTree         Print Parse tree of the Javadoc comment%n\"\n-          + \"  -J, --treeWithJavadoc     Print full Abstract Syntax Tree of the file%n\"\n-          + \"  -o=<outputPath>           Sets the output file. Defaults to stdout%n\"\n-          + \"  -p=<propertiesFile>       Loads the properties file%n\"\n-          + \"  -s=<suppressionLineColumnNumber>%n\"\n-          + \"                            Print xpath suppressions at the file's line and column\"\n-          + \" position.%n\"\n-          + \"                              Argument is the line and column number (separated by\"\n-          + \" a : ) in the%n\"\n-          + \"                              file that the suppression should be generated for%n\"\n-          + \"  -t, --tree                Print Abstract Syntax Tree(AST) of the file%n\"\n-          + \"  -T, --treeWithComments    Print Abstract Syntax Tree(AST) of the file including\"\n-          + \" comments%n\"\n-          + \"  -V, --version             Print version information and exit.%n\"\n-          + \"  -w, --tabWidth=<tabWidth> Sets the length of the tab character. Used only with\"\n-          + \" \\\"-s\\\" option.%n\"\n-          + \"                              Default value is 8%n\"\n-          + \"  -W, --tree-walker-threads-number=<treeWalkerThreadsNumber>%n\"\n-          + \"                            (experimental) The number of TreeWalker threads (must be\"\n-          + \" greater than%n\"\n-          + \"                              zero)%n\"\n-          + \"  -x, --exclude-regexp=<excludeRegex>%n\"\n-          + \"                            Regular expression of directory/file to exclude from\"\n-          + \" CheckStyle%n\");\n+          \"Usage: checkstyle [-dEghjJtTV] [-b=<xpath>] [-c=<configurationFile>] \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b8fe6441208e9fd330f9f1cd1a793caea0e1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzMwNQ==", "bodyText": "@pbludov Done", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403673305", "createdAt": "2020-04-05T09:17:58Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "diffHunk": "@@ -78,60 +78,126 @@\n             + \"Try 'checkstyle --help' for more information.%n\");\n \n     private static final String USAGE = String.format(Locale.ROOT,\n-          \"Usage: checkstyle [-dEghjJtTV] [-b=<xpath>] [-c=<configurationFile>]\"\n-          + \" [-C=<checkerThreadsNumber>]%n\"\n-          + \"                  [-f=<format>] [-o=<outputPath>] [-p=<propertiesFile>]%n\"\n-          + \"                  [-s=<suppressionLineColumnNumber>] [-w=<tabWidth>]\"\n-          + \" [-W=<treeWalkerThreadsNumber>]%n\"\n-          + \"                  [-e=<exclude>]... [-x=<excludeRegex>]...\"\n-          + \" <files>...%n\"\n-          + \"Checkstyle verifies that the specified source code files adhere to the specified\"\n-          + \" rules. By default%n\"\n-          + \"violations are reported to standard out in plain format. Checkstyle requires a\"\n-          + \" configuration XML%n\"\n-          + \"file that configures the checks to apply.%n\"\n-          + \"      <files>...            One or more source files to verify%n\"\n-          + \"  -b, --branch-matching-xpath=<xpath>%n\"\n-          + \"                            Show Abstract Syntax Tree(AST) branches that match XPath%n\"\n-          + \"  -c=<configurationFile>    Sets the check configuration file to use.%n\"\n-          + \"  -C, --checker-threads-number=<checkerThreadsNumber>%n\"\n-          + \"                            (experimental) The number of Checker threads (must be\"\n-          + \" greater than zero)%n\"\n-          + \"  -d, --debug               Print all debug logging of CheckStyle utility%n\"\n-          + \"  -e, --exclude=<exclude>   Directory/File path to exclude from CheckStyle%n\"\n-          + \"  -E, --executeIgnoredModules%n\"\n-          + \"                            Allows ignored modules to be run.%n\"\n-          + \"  -f=<format>               Sets the output format. Valid values: xml, plain.\"\n-          + \" Defaults to plain%n\"\n-          + \"  -g, --generate-xpath-suppression%n\"\n-          + \"                            Generates to output a suppression xml to use to suppress\"\n-          + \" all violations%n\"\n-          + \"                              from user's config%n\"\n-          + \"  -h, --help                Show this help message and exit.%n\"\n-          + \"  -j, --javadocTree         Print Parse tree of the Javadoc comment%n\"\n-          + \"  -J, --treeWithJavadoc     Print full Abstract Syntax Tree of the file%n\"\n-          + \"  -o=<outputPath>           Sets the output file. Defaults to stdout%n\"\n-          + \"  -p=<propertiesFile>       Loads the properties file%n\"\n-          + \"  -s=<suppressionLineColumnNumber>%n\"\n-          + \"                            Print xpath suppressions at the file's line and column\"\n-          + \" position.%n\"\n-          + \"                              Argument is the line and column number (separated by\"\n-          + \" a : ) in the%n\"\n-          + \"                              file that the suppression should be generated for%n\"\n-          + \"  -t, --tree                Print Abstract Syntax Tree(AST) of the file%n\"\n-          + \"  -T, --treeWithComments    Print Abstract Syntax Tree(AST) of the file including\"\n-          + \" comments%n\"\n-          + \"  -V, --version             Print version information and exit.%n\"\n-          + \"  -w, --tabWidth=<tabWidth> Sets the length of the tab character. Used only with\"\n-          + \" \\\"-s\\\" option.%n\"\n-          + \"                              Default value is 8%n\"\n-          + \"  -W, --tree-walker-threads-number=<treeWalkerThreadsNumber>%n\"\n-          + \"                            (experimental) The number of TreeWalker threads (must be\"\n-          + \" greater than%n\"\n-          + \"                              zero)%n\"\n-          + \"  -x, --exclude-regexp=<excludeRegex>%n\"\n-          + \"                            Regular expression of directory/file to exclude from\"\n-          + \" CheckStyle%n\");\n+          \"Usage: checkstyle [-dEghjJtTV] [-b=<xpath>] [-c=<configurationFile>] \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTUzNQ=="}, "originalCommit": {"oid": "fc57b8fe6441208e9fd330f9f1cd1a793caea0e1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc2NTE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0MTo1N1rOGA_r9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzoxODowOVrOGA_8Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NjYyOQ==", "bodyText": "Please extract this block to a private static helper method.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403696629", "createdAt": "2020-04-05T12:41:57Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMDc3MA==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403700770", "createdAt": "2020-04-05T13:18:09Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NjYyOQ=="}, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc2ODk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0NTo1MVrOGA_t3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzoxODowMFrOGA_8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzExNw==", "bodyText": "Please use com.google.common.truth.Truth.assertWithMessage method for all assertions.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403697117", "createdAt": "2020-04-05T12:45:51Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final List<Node> children =\n+                        new ArrayList<>(XmlUtil.getChildrenElements(subSection));\n+                for (Node node:children) {\n+                    if (\"ul\".equals(node.getNodeName())) {\n+                        final List<Node> listElements =\n+                                new ArrayList<>(XmlUtil.getChildrenElements(node));\n+                        for (Node element:listElements) {\n+                            final String txt = element.getTextContent()\n+                                    .trim().replaceAll(\"\\\\s+\", \" \");\n+                            cmdDesc.put(txt.substring(0, 2), txt.substring(3));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field:fields) {\n+            final CommandLine.Option optionsAnnotation =\n+                  field.getAnnotation(CommandLine.Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                assertNotNull(descXdoc, \"CLI Option\" + option + \"present in Main.java not \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMDc1NQ==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403700755", "createdAt": "2020-04-05T13:18:00Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final List<Node> children =\n+                        new ArrayList<>(XmlUtil.getChildrenElements(subSection));\n+                for (Node node:children) {\n+                    if (\"ul\".equals(node.getNodeName())) {\n+                        final List<Node> listElements =\n+                                new ArrayList<>(XmlUtil.getChildrenElements(node));\n+                        for (Node element:listElements) {\n+                            final String txt = element.getTextContent()\n+                                    .trim().replaceAll(\"\\\\s+\", \" \");\n+                            cmdDesc.put(txt.substring(0, 2), txt.substring(3));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field:fields) {\n+            final CommandLine.Option optionsAnnotation =\n+                  field.getAnnotation(CommandLine.Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                assertNotNull(descXdoc, \"CLI Option\" + option + \"present in Main.java not \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzExNw=="}, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc2OTg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0NzoxMVrOGA_uYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzoxNzo1M1rOGA_8AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzI1MQ==", "bodyText": "Please add spaces around :", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403697251", "createdAt": "2020-04-05T12:47:11Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final List<Node> children =\n+                        new ArrayList<>(XmlUtil.getChildrenElements(subSection));\n+                for (Node node:children) {\n+                    if (\"ul\".equals(node.getNodeName())) {\n+                        final List<Node> listElements =\n+                                new ArrayList<>(XmlUtil.getChildrenElements(node));\n+                        for (Node element:listElements) {\n+                            final String txt = element.getTextContent()\n+                                    .trim().replaceAll(\"\\\\s+\", \" \");\n+                            cmdDesc.put(txt.substring(0, 2), txt.substring(3));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field:fields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMDczNg==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403700736", "createdAt": "2020-04-05T13:17:53Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final List<Node> children =\n+                        new ArrayList<>(XmlUtil.getChildrenElements(subSection));\n+                for (Node node:children) {\n+                    if (\"ul\".equals(node.getNodeName())) {\n+                        final List<Node> listElements =\n+                                new ArrayList<>(XmlUtil.getChildrenElements(node));\n+                        for (Node element:listElements) {\n+                            final String txt = element.getTextContent()\n+                                    .trim().replaceAll(\"\\\\s+\", \" \");\n+                            cmdDesc.put(txt.substring(0, 2), txt.substring(3));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field:fields) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzI1MQ=="}, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3MDc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0ODoyN1rOGA_u5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzoxNzo0NlrOGA_79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzM4Mg==", "bodyText": "There is a variable for optionsAnnotation.names()[0]", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403697382", "createdAt": "2020-04-05T12:48:27Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final List<Node> children =\n+                        new ArrayList<>(XmlUtil.getChildrenElements(subSection));\n+                for (Node node:children) {\n+                    if (\"ul\".equals(node.getNodeName())) {\n+                        final List<Node> listElements =\n+                                new ArrayList<>(XmlUtil.getChildrenElements(node));\n+                        for (Node element:listElements) {\n+                            final String txt = element.getTextContent()\n+                                    .trim().replaceAll(\"\\\\s+\", \" \");\n+                            cmdDesc.put(txt.substring(0, 2), txt.substring(3));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field:fields) {\n+            final CommandLine.Option optionsAnnotation =\n+                  field.getAnnotation(CommandLine.Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                assertNotNull(descXdoc, \"CLI Option\" + option + \"present in Main.java not \"\n+                       + \"documented in cmdline.xml.vm\");\n+                assertEquals(descXdoc, optionsAnnotation.description()[0],\n+                        \"CLI options descriptions should match\");\n+                cmdDesc.remove(\n+                        optionsAnnotation.names()[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMDcyNg==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403700726", "createdAt": "2020-04-05T13:17:46Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final Path path = Paths.get(\"src/xdocs/cmdline.xml.vm\");\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        final NodeList sections = document.getElementsByTagName(\"section\");\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final List<Node> children =\n+                        new ArrayList<>(XmlUtil.getChildrenElements(subSection));\n+                for (Node node:children) {\n+                    if (\"ul\".equals(node.getNodeName())) {\n+                        final List<Node> listElements =\n+                                new ArrayList<>(XmlUtil.getChildrenElements(node));\n+                        for (Node element:listElements) {\n+                            final String txt = element.getTextContent()\n+                                    .trim().replaceAll(\"\\\\s+\", \" \");\n+                            cmdDesc.put(txt.substring(0, 2), txt.substring(3));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field:fields) {\n+            final CommandLine.Option optionsAnnotation =\n+                  field.getAnnotation(CommandLine.Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                assertNotNull(descXdoc, \"CLI Option\" + option + \"present in Main.java not \"\n+                       + \"documented in cmdline.xml.vm\");\n+                assertEquals(descXdoc, optionsAnnotation.description()[0],\n+                        \"CLI options descriptions should match\");\n+                cmdDesc.remove(\n+                        optionsAnnotation.names()[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzM4Mg=="}, "originalCommit": {"oid": "4ba2131a6acfd754f06feda26d19da43b09ac4f3"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDg5NzQwOnYy", "diffSide": "RIGHT", "path": "src/xdocs/cmdline.xml.vm", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNTowNDoxNVrOGBAv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToxMTozNFrOGBAztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNDAyMQ==", "bodyText": "Looks like the space is not allowed here", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403714021", "createdAt": "2020-04-05T15:04:15Z", "author": {"login": "pbludov"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -52,7 +52,7 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         checks to apply. Command line options are:\n       </p>\n \n-      <ul>\n+      <ul id=\"CLI Options\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28f5f9958b660ca4fd1303b3f76f4f816528521"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNDk5Ng==", "bodyText": "Yes, I updated.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403714996", "createdAt": "2020-04-05T15:11:34Z", "author": {"login": "gaurabdg"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -52,7 +52,7 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         checks to apply. Command line options are:\n       </p>\n \n-      <ul>\n+      <ul id=\"CLI Options\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNDAyMQ=="}, "originalCommit": {"oid": "a28f5f9958b660ca4fd1303b3f76f4f816528521"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTM3NDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0ODowMlrOGBEeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0ODowMlrOGBEeAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NDk3Nw==", "bodyText": "Why did we add configurationFile to description?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403774977", "createdAt": "2020-04-05T23:48:02Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"configurationFile - specifies the location of the\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b97f7468eb917f34ca1419aa757ba53cab3b2d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTM3NTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0ODo0OFrOGBEedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0ODo0OFrOGBEedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NTA5Mw==", "bodyText": "same.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403775093", "createdAt": "2020-04-05T23:48:48Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")\n+        @Option(names = {\"-w\", \"--tabWidth\"}, description = \" --tabWidth length - set the length\"\n+                + \" of the tab character. Used only with -s and -gxs options. Default value is 8.\")\n         private int tabWidth = CommonUtil.DEFAULT_TAB_WIDTH;\n \n         /** Switch whether to generate suppressions file or not. */\n         @Option(names = {\"-g\", \"--generate-xpath-suppression\"},\n-                description = \"Generates to output a suppression xml to use to suppress all\"\n-                        + \" violations from user's config\")\n+                description = \"--generate-xpath-suppression - generate to output a suppression\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b97f7468eb917f34ca1419aa757ba53cab3b2d7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTM3NTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0OTowMlrOGBEepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0OTowMlrOGBEepg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NTE0Mg==", "bodyText": "same.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403775142", "createdAt": "2020-04-05T23:49:02Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -647,33 +659,48 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = \"-f\", description = \"Sets the output format. Valid values: \"\n-                + \"${COMPLETION-CANDIDATES}. Defaults to ${DEFAULT-VALUE}\")\n+        @Option(names = \"-f\", description = \"format - specify the output format. Options are\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b97f7468eb917f34ca1419aa757ba53cab3b2d7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTM3NTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0OToyMFrOGBEewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMzo0OToyMFrOGBEewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NTE3MA==", "bodyText": "same and so on.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r403775170", "createdAt": "2020-04-05T23:49:20Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -647,33 +659,48 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = \"-f\", description = \"Sets the output format. Valid values: \"\n-                + \"${COMPLETION-CANDIDATES}. Defaults to ${DEFAULT-VALUE}\")\n+        @Option(names = \"-f\", description = \"format - specify the output format. Options are\"\n+                + \" \\\"plain\\\" for the DefaultLogger and \\\"xml\\\" for the XMLLogger. Defaults\"\n+                + \" to \\\"plain\\\".\")\n         private OutputFormat format = DEFAULT_OUTPUT_FORMAT;\n \n         /** Option that controls whether to print the AST of the file. */\n         @Option(names = {\"-t\", \"--tree\"},\n-                description = \"Print Abstract Syntax Tree(AST) of the file\")\n+                description = \" --tree - print Abstract Syntax Tree(AST) of the checked file.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b97f7468eb917f34ca1419aa757ba53cab3b2d7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA4MDMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzoxOVrOGBnzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzoxOVrOGBnzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1Mzk4NQ==", "bodyText": "All descriptions should be proper sentences. Start with an uppercase letter and end with a period.\nPlease do the same for the rest.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404353985", "createdAt": "2020-04-06T20:03:19Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA5MDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNjo0MVrOGBn6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozOTowN1rOGBpATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTY5Nw==", "bodyText": "Why did we lose the original description? It looks like it has more as it defines the default description.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404355697", "createdAt": "2020-04-06T20:06:41Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NTA0Mw==", "bodyText": "@rnveach My code is reading the descriptions from xdoc, removing the parameters(-,--) and checking against the annotation descriptions for all options as @romani mentioned in #6216 (comment) that xdocs are better. Do you want me to update the xdoc desc for this option then?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404365043", "createdAt": "2020-04-06T20:23:51Z", "author": {"login": "gaurabdg"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTY5Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDAzMA==", "bodyText": "Same as #8035 (comment) .\n@romani posted that in issue and probably did not look at each and every xdoc description. As stated in other one, I think we should merge the 2 and make 1 consistent message. I think we should include the default message.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404370030", "createdAt": "2020-04-06T20:32:44Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTY5Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MzU4Mg==", "bodyText": "Ok, I will try to take all the points mentioned and update both the sections along with starting the description with plural verbs", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404373582", "createdAt": "2020-04-06T20:39:07Z", "author": {"login": "gaurabdg"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTY5Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA5Mzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNzozNFrOGBn8TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMzo0N1rOGBo0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjE3Mw==", "bodyText": "Why did we lose the ()s around (separated by a : )?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404356173", "createdAt": "2020-04-06T20:07:34Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")\n         private Path outputPath;\n \n         /** Properties file location. */\n-        @Option(names = \"-p\", description = \"Loads the properties file\")\n+        @Option(names = \"-p\", description = \"specify a properties file to use.\")\n         private File propertiesFile;\n \n         /** LineNo and columnNo for the suppression. */\n         @Option(names = \"-s\",\n-                description = \"Print xpath suppressions at the file's line and column position. \"\n-                        + \"Argument is the line and column number (separated by a : ) in the file \"\n-                        + \"that the suppression should be generated for\")\n+                description = \"print xpath suppressions at the file's line and\"\n+                        + \" column position. Line and column numbers are integer values\"\n+                        + \" separated by a :, specify location in the file the suppression\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NzEwMA==", "bodyText": "Same reason.Since for the first run, I copied the desc written in xdocs. Do you want me to update them?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404367100", "createdAt": "2020-04-06T20:27:31Z", "author": {"login": "gaurabdg"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")\n         private Path outputPath;\n \n         /** Properties file location. */\n-        @Option(names = \"-p\", description = \"Loads the properties file\")\n+        @Option(names = \"-p\", description = \"specify a properties file to use.\")\n         private File propertiesFile;\n \n         /** LineNo and columnNo for the suppression. */\n         @Option(names = \"-s\",\n-                description = \"Print xpath suppressions at the file's line and column position. \"\n-                        + \"Argument is the line and column number (separated by a : ) in the file \"\n-                        + \"that the suppression should be generated for\")\n+                description = \"print xpath suppressions at the file's line and\"\n+                        + \" column position. Line and column numbers are integer values\"\n+                        + \" separated by a :, specify location in the file the suppression\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjE3Mw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDYzNg==", "bodyText": "Same as #8035 (comment) .\nI will look over again if you determine the best approach is to stick with this.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404370636", "createdAt": "2020-04-06T20:33:47Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -607,22 +607,31 @@ public boolean isLoggable(LogRecord record) {\n         private List<File> files;\n \n         /** Config file location. */\n-        @Option(names = \"-c\", description = \"Sets the check configuration file to use.\")\n+        @Option(names = \"-c\", description = \"specifies the location of the\"\n+                + \" file that defines the configuration modules. The location can either be a\"\n+                + \" filesystem location, or a name passed to the ClassLoader.getResource() method.\")\n         private String configurationFile;\n \n         /** Output file location. */\n-        @Option(names = \"-o\", description = \"Sets the output file. Defaults to stdout\")\n+        @Option(names = \"-o\", description = \"specify the file to output to.\")\n         private Path outputPath;\n \n         /** Properties file location. */\n-        @Option(names = \"-p\", description = \"Loads the properties file\")\n+        @Option(names = \"-p\", description = \"specify a properties file to use.\")\n         private File propertiesFile;\n \n         /** LineNo and columnNo for the suppression. */\n         @Option(names = \"-s\",\n-                description = \"Print xpath suppressions at the file's line and column position. \"\n-                        + \"Argument is the line and column number (separated by a : ) in the file \"\n-                        + \"that the suppression should be generated for\")\n+                description = \"print xpath suppressions at the file's line and\"\n+                        + \" column position. Line and column numbers are integer values\"\n+                        + \" separated by a :, specify location in the file the suppression\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjE3Mw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA5NzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowODozN1rOGBn-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMDoxNFrOGBotTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjcyOQ==", "bodyText": "There are a few places like this, why did we change \"Sets\" to \"Set\"?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404356729", "createdAt": "2020-04-06T20:08:37Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")\n+        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"set the length\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NjI2Ng==", "bodyText": "Because as I mentioned earlier, my code checks xdocs against annotation desc. For the first run I copied all the xdoc desc here in Main.java as mentioned here #6216 (comment)", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404366266", "createdAt": "2020-04-06T20:26:07Z", "author": {"login": "gaurabdg"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")\n+        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"set the length\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjcyOQ=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2ODcxOQ==", "bodyText": "@gaurabdg These type of issues aren't about copying one over the other. It is about finding the differences and combining the best of both of them and creating a single unified description.\nMost of the descriptions start with a plural verb, so I believe that is how they should all be.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404368719", "createdAt": "2020-04-06T20:30:14Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")\n+        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"set the length\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjcyOQ=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA5OTU0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowOToxMlrOGBn_4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoyMzo0M1rOGB2QZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NzA5MQ==", "bodyText": "There is no way to keep the ${DEFAULT-VALUE} in the Java code and convert it to it's text form in the xdoc?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404357091", "createdAt": "2020-04-06T20:09:12Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MTY3OQ==", "bodyText": "Yes, there is. option.description() returns the description string by renderning the values.\nBut there's a strange problem. Some variables like ${COMPLETION-CANDIDATES} are being rendered correctly but rest ${DEFAULT-VALUE} is being initialized incorrectly to 0/null.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404441679", "createdAt": "2020-04-06T23:08:39Z", "author": {"login": "gaurabdg"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NzA5MQ=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5MDY5NQ==", "bodyText": "It has been resolved, I'll resubmit as soon as I merge the descriptions", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404590695", "createdAt": "2020-04-07T07:23:43Z", "author": {"login": "gaurabdg"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -631,14 +640,17 @@ public boolean isLoggable(LogRecord record) {\n          *\n          * @noinspection CanBeFinal\n          */\n-        @Option(names = {\"-w\", \"--tabWidth\"}, description = \"Sets the length of the tab character. \"\n-                + \"Used only with \\\"-s\\\" option. Default value is ${DEFAULT-VALUE}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NzA5MQ=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTEwMTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowOTo0NlrOGBoBAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowOTo0NlrOGBoBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NzM3OQ==", "bodyText": "I don't see the purpose of this change. The original code was easier to read. Nothing else seems different.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404357379", "createdAt": "2020-04-06T20:09:46Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "diffHunk": "@@ -693,12 +722,13 @@ public boolean isLoggable(LogRecord record) {\n          * @noinspection CanBeFinal\n          */\n         @Option(names = {\"-x\", \"--exclude-regexp\"},\n-                description = \"Regular expression of directory/file to exclude from CheckStyle\")\n+                description = \"Directory/file pattern to exclude from CheckStyle. \"\n+                        + \"Multiple excludes are allowed.\")\n         private List<Pattern> excludeRegex = new ArrayList<>();\n \n         /** Switch whether to execute ignored modules or not. */\n-        @Option(names = {\"-E\", \"--executeIgnoredModules\"},\n-                description = \"Allows ignored modules to be run.\")\n+        @Option(names = {\"-E\", \"--executeIgnoredModules\"}, description = \"Allows ignored modules\"\n+                + \" to be run.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTExNTc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxMzo1NVrOGBoJ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowMzo1NlrOGLlUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTY0Nw==", "bodyText": "Why do we need to look at all sections when you have given the ul an exact ID? Why aren't we using document.getElementById?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404359647", "createdAt": "2020-04-06T20:13:55Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final NodeList sections = getSectionsFromXdoc(\"src/xdocs/cmdline.xml.vm\");\n+\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final Set<String> cmdOptions = getListById(subSection, \"CLI_Options\");\n+                for (String option : cmdOptions) {\n+                    final String text = option.trim().replaceAll(\"\\\\s+\", \" \");\n+                    cmdDesc.put(text.substring(0, 2), text.substring(text.indexOf(\" - \") + 3));\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field : fields) {\n+            final Option optionsAnnotation = field.getAnnotation(Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                final String descMain = optionsAnnotation.description()[0];\n+                assertWithMessage(\"CLI Option\" + option + \"present in \"\n+                        + \"Main.java not documented in cmdline.xml.vm\")\n+                        .that(descXdoc).isNotNull();\n+                assertWithMessage(\"CLI options descriptions in xdoc: \" + descXdoc\n+                        + \" should match that of in Main.java: \" + descMain)\n+                        .that(descXdoc.equals(descMain)).isTrue();\n+                cmdDesc.remove(option);\n+            }\n+        }\n+\n+        cmdDesc.entrySet().removeIf(entry -> ignoreXdocToMain.contains(entry.getKey()));\n+        assertWithMessage(\"CLI Options\" + cmdDesc + \"present in \"\n+                + \"cmdline.xml.vm not documented in Main.java\")\n+                .that(cmdDesc.isEmpty());\n+    }\n+\n+    private static NodeList getSectionsFromXdoc(String xdocPath) throws Exception {\n+        final Path path = Paths.get(xdocPath);\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        return document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MTQ2MA==", "bodyText": "@gaurabdg This is still not done.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414551460", "createdAt": "2020-04-24T12:51:38Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final NodeList sections = getSectionsFromXdoc(\"src/xdocs/cmdline.xml.vm\");\n+\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final Set<String> cmdOptions = getListById(subSection, \"CLI_Options\");\n+                for (String option : cmdOptions) {\n+                    final String text = option.trim().replaceAll(\"\\\\s+\", \" \");\n+                    cmdDesc.put(text.substring(0, 2), text.substring(text.indexOf(\" - \") + 3));\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field : fields) {\n+            final Option optionsAnnotation = field.getAnnotation(Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                final String descMain = optionsAnnotation.description()[0];\n+                assertWithMessage(\"CLI Option\" + option + \"present in \"\n+                        + \"Main.java not documented in cmdline.xml.vm\")\n+                        .that(descXdoc).isNotNull();\n+                assertWithMessage(\"CLI options descriptions in xdoc: \" + descXdoc\n+                        + \" should match that of in Main.java: \" + descMain)\n+                        .that(descXdoc.equals(descMain)).isTrue();\n+                cmdDesc.remove(option);\n+            }\n+        }\n+\n+        cmdDesc.entrySet().removeIf(entry -> ignoreXdocToMain.contains(entry.getKey()));\n+        assertWithMessage(\"CLI Options\" + cmdDesc + \"present in \"\n+                + \"cmdline.xml.vm not documented in Main.java\")\n+                .that(cmdDesc.isEmpty());\n+    }\n+\n+    private static NodeList getSectionsFromXdoc(String xdocPath) throws Exception {\n+        final Path path = Paths.get(xdocPath);\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        return document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTY0Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5OTM2MQ==", "bodyText": "@rnveach document.getElementById is returning null, since we have to define a separate DTD schema to specify which is actually the ID for this xml. https://stackoverflow.com/a/53044340", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414599361", "createdAt": "2020-04-24T14:01:03Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final NodeList sections = getSectionsFromXdoc(\"src/xdocs/cmdline.xml.vm\");\n+\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final Set<String> cmdOptions = getListById(subSection, \"CLI_Options\");\n+                for (String option : cmdOptions) {\n+                    final String text = option.trim().replaceAll(\"\\\\s+\", \" \");\n+                    cmdDesc.put(text.substring(0, 2), text.substring(text.indexOf(\" - \") + 3));\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field : fields) {\n+            final Option optionsAnnotation = field.getAnnotation(Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                final String descMain = optionsAnnotation.description()[0];\n+                assertWithMessage(\"CLI Option\" + option + \"present in \"\n+                        + \"Main.java not documented in cmdline.xml.vm\")\n+                        .that(descXdoc).isNotNull();\n+                assertWithMessage(\"CLI options descriptions in xdoc: \" + descXdoc\n+                        + \" should match that of in Main.java: \" + descMain)\n+                        .that(descXdoc.equals(descMain)).isTrue();\n+                cmdDesc.remove(option);\n+            }\n+        }\n+\n+        cmdDesc.entrySet().removeIf(entry -> ignoreXdocToMain.contains(entry.getKey()));\n+        assertWithMessage(\"CLI Options\" + cmdDesc + \"present in \"\n+                + \"cmdline.xml.vm not documented in Main.java\")\n+                .that(cmdDesc.isEmpty());\n+    }\n+\n+    private static NodeList getSectionsFromXdoc(String xdocPath) throws Exception {\n+        final Path path = Paths.get(xdocPath);\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        return document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTY0Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczNzc1NA==", "bodyText": "If we can't get the element by ID, then we don't need the ID in the XDOC.\n\n<ul id=\"CLI_Options\">", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414737754", "createdAt": "2020-04-24T17:20:43Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final NodeList sections = getSectionsFromXdoc(\"src/xdocs/cmdline.xml.vm\");\n+\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final Set<String> cmdOptions = getListById(subSection, \"CLI_Options\");\n+                for (String option : cmdOptions) {\n+                    final String text = option.trim().replaceAll(\"\\\\s+\", \" \");\n+                    cmdDesc.put(text.substring(0, 2), text.substring(text.indexOf(\" - \") + 3));\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field : fields) {\n+            final Option optionsAnnotation = field.getAnnotation(Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                final String descMain = optionsAnnotation.description()[0];\n+                assertWithMessage(\"CLI Option\" + option + \"present in \"\n+                        + \"Main.java not documented in cmdline.xml.vm\")\n+                        .that(descXdoc).isNotNull();\n+                assertWithMessage(\"CLI options descriptions in xdoc: \" + descXdoc\n+                        + \" should match that of in Main.java: \" + descMain)\n+                        .that(descXdoc.equals(descMain)).isTrue();\n+                cmdDesc.remove(option);\n+            }\n+        }\n+\n+        cmdDesc.entrySet().removeIf(entry -> ignoreXdocToMain.contains(entry.getKey()));\n+        assertWithMessage(\"CLI Options\" + cmdDesc + \"present in \"\n+                + \"cmdline.xml.vm not documented in Main.java\")\n+                .that(cmdDesc.isEmpty());\n+    }\n+\n+    private static NodeList getSectionsFromXdoc(String xdocPath) throws Exception {\n+        final Path path = Paths.get(xdocPath);\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        return document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTY0Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5ODk0MA==", "bodyText": "@rnveach It is required for getListById method.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414798940", "createdAt": "2020-04-24T19:03:56Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java\n+        ignoreXdocToMain.add(\"-V\");\n+        ignoreXdocToMain.add(\"-h\");\n+\n+        final NodeList sections = getSectionsFromXdoc(\"src/xdocs/cmdline.xml.vm\");\n+\n+        for (int i = 0; i < sections.getLength(); i++) {\n+            final Node subSection = sections.item(i);\n+            final Node name = subSection.getAttributes().getNamedItem(\"name\");\n+            if (\"Command line usage\".equals(name.getNodeValue())) {\n+                final Set<String> cmdOptions = getListById(subSection, \"CLI_Options\");\n+                for (String option : cmdOptions) {\n+                    final String text = option.trim().replaceAll(\"\\\\s+\", \" \");\n+                    cmdDesc.put(text.substring(0, 2), text.substring(text.indexOf(\" - \") + 3));\n+                }\n+            }\n+        }\n+\n+        final Class<?> cliOptionsClazz = Class.forName(\"com.puppycrawl.tools.checkstyle\"\n+                + \".Main$CliOptions\");\n+        final Field[] fields = cliOptionsClazz.getDeclaredFields();\n+        for (Field field : fields) {\n+            final Option optionsAnnotation = field.getAnnotation(Option.class);\n+            if (optionsAnnotation != null) {\n+                final String option = optionsAnnotation.names()[0];\n+                final String descXdoc = cmdDesc.get(option);\n+                final String descMain = optionsAnnotation.description()[0];\n+                assertWithMessage(\"CLI Option\" + option + \"present in \"\n+                        + \"Main.java not documented in cmdline.xml.vm\")\n+                        .that(descXdoc).isNotNull();\n+                assertWithMessage(\"CLI options descriptions in xdoc: \" + descXdoc\n+                        + \" should match that of in Main.java: \" + descMain)\n+                        .that(descXdoc.equals(descMain)).isTrue();\n+                cmdDesc.remove(option);\n+            }\n+        }\n+\n+        cmdDesc.entrySet().removeIf(entry -> ignoreXdocToMain.contains(entry.getKey()));\n+        assertWithMessage(\"CLI Options\" + cmdDesc + \"present in \"\n+                + \"cmdline.xml.vm not documented in Main.java\")\n+                .that(cmdDesc.isEmpty());\n+    }\n+\n+    private static NodeList getSectionsFromXdoc(String xdocPath) throws Exception {\n+        final Path path = Paths.get(xdocPath);\n+        final String input = new String(Files.readAllBytes(path), UTF_8);\n+\n+        final Document document = XmlUtil.getRawXml(path.getFileName().toString(), input, input);\n+        return document.getElementsByTagName(\"section\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTY0Nw=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTEyOTE2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNzo1MFrOGBoR-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMToxMVrOGBqW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTcyMA==", "bodyText": "So we are specifically looking for options in our class and not what is being reported by picocli?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404361720", "createdAt": "2020-04-06T20:17:50Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDA2NQ==", "bodyText": "Yes, by getting all the fields we get all the options", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404370065", "createdAt": "2020-04-06T20:32:48Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTcyMA=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MzUwMA==", "bodyText": "Not all by your comment. We are missing out on help and version. They are run-time added options and not in the CliOptions.\nThere is no other way given by picocli to get all the options for our purposes?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404373500", "createdAt": "2020-04-06T20:38:58Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTcyMA=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTc0Mw==", "bodyText": "Yes, it can be done by creating a mock and querying through given methods, I'll do it.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r404395743", "createdAt": "2020-04-06T21:21:11Z", "author": {"login": "gaurabdg"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CliOptionsXdocsSyncTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.internal;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;\n+import picocli.CommandLine.Option;\n+\n+public class CliOptionsXdocsSyncTest {\n+\n+    @Test\n+    public void validateCliDocSection() throws Exception {\n+        final Map<String, String> cmdDesc = new HashMap<>();\n+        final Set<String> ignoreXdocToMain = new HashSet<>();\n+        // used to ignore options present in xdocs but not in Main.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTcyMA=="}, "originalCommit": {"oid": "86c2cb8c75899a8c117259e2308c8a0eee09bf34"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjE4OTQ0OnYy", "diffSide": "RIGHT", "path": "src/xdocs/cmdline.xml.vm", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxMzoyOTowMFrOGH3q1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo0Njo1N1rOGNaxfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA==", "bodyText": "it is sad that we leaked -C and -W to users, such options do not work.\nWe should remove them, probably should be done in separate issue.\n@rnveach , are you agree ?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r410905300", "createdAt": "2020-04-19T13:29:00Z", "author": {"login": "romani"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyMzc5OA==", "bodyText": "@romani Shall I do it then?", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r412923798", "createdAt": "2020-04-22T12:07:56Z", "author": {"login": "gaurabdg"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0NzAzMg==", "bodyText": "I agree. @gaurabdg Please remove them.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414547032", "createdAt": "2020-04-24T12:44:37Z", "author": {"login": "rnveach"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwODI4MQ==", "bodyText": "@romani @rnveach I am doing the changes in this issue only, because I revert these changes to the master one, then these options will be present in Main.java but not in the xdoc, so I have to add extra lines to ignore these in the tests, which would be redundant once these changes are made in master, and I have to change it again.\nOr else if I create a new PR, I have to wait for it to merge and then rebase and push changes here.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414608281", "createdAt": "2020-04-24T14:13:14Z", "author": {"login": "gaurabdg"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczODkxMg==", "bodyText": "I assume this PR is blocked by #8180", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414738912", "createdAt": "2020-04-24T17:22:32Z", "author": {"login": "rnveach"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNDY3OA==", "bodyText": "Yes.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414904678", "createdAt": "2020-04-24T22:48:56Z", "author": {"login": "gaurabdg"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyMzMyNw==", "bodyText": "This was unblocked and should be rebased if not already.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r416723327", "createdAt": "2020-04-28T15:46:57Z", "author": {"login": "rnveach"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -148,13 +141,21 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n         </li>\n         <li>\n           <code>-b, --branch-matching-xpath xpathQuery</code>\n-           - Show Abstract Syntax Tree(AST) branches that match given XPath query.\n+           - Shows Abstract Syntax Tree(AST) branches that match given XPath query.\n         </li>\n         <li>\n           <code>-h, --help</code> - print usage help message and exit. Any other option is ignored.\n         </li>\n         <li>\n-          <code>--executeIgnoredModules</code> - Allows ignored modules to be run.\n+          <code>-E, --executeIgnoredModules</code> - Allows ignored modules to be run.\n+        </li>\n+        <li>\n+          <code>-C, --checker-threads-number</code> - (experimental) The number of Checker threads\n+          (must be greater than zero). Default is 1.\n+        </li>\n+        <li>\n+          <code>-W, --tree-walker-threads-number</code> - (experimental) The number of TreeWalker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNTMwMA=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzAwMjE3OnYy", "diffSide": "RIGHT", "path": "src/xdocs/cmdline.xml.vm", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1ODo1MFrOGLWfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNjo1MDo1N1rOGL3qSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NTk3Nw==", "bodyText": "I feel a combination of how we specify options plus the original description sounds better.\nSets the property files to load.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414555977", "createdAt": "2020-04-24T12:58:50Z", "author": {"login": "rnveach"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -63,76 +67,65 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n           passed to the ClassLoader.getResource() method.\n         </li>\n         <li>\n-          <code>-f format</code> - specify the output\n-          format. Options are <code> \"plain\"</code> for the <a\n-          href=\"apidocs/com/puppycrawl/tools/checkstyle/DefaultLogger.html\">DefaultLogger</a>\n-          and <code>\"xml\"</code> for the <a\n-          href=\"apidocs/com/puppycrawl/tools/checkstyle/XMLLogger.html\">XMLLogger</a>.\n-          Defaults to <code>\"plain\"</code>.\n+          <code>-f format</code> - Specifies the output\n+          format. Valid values: <code>xml</code>, <code>plain</code> for <a\n+          href=\"apidocs/com/puppycrawl/tools/checkstyle/XMLLogger.html\">XMLLogger</a>\n+          and <a href=\"apidocs/com/puppycrawl/tools/checkstyle/DefaultLogger\n+          .html\">DefaultLogger</a> respectively.\n+          Defaults to <code>plain</code>.\n         </li>\n         <li>\n-          <code>-p propertiesFile</code> - specify a\n-          properties file to use.\n+          <code>-p propertiesFile</code> - Loads the properties file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5OTQ2NQ==", "bodyText": "@rnveach Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8035#discussion_r415099465", "createdAt": "2020-04-25T16:50:57Z", "author": {"login": "gaurabdg"}, "path": "src/xdocs/cmdline.xml.vm", "diffHunk": "@@ -63,76 +67,65 @@ java -D&lt;property&gt;=&lt;value&gt;  \\\n           passed to the ClassLoader.getResource() method.\n         </li>\n         <li>\n-          <code>-f format</code> - specify the output\n-          format. Options are <code> \"plain\"</code> for the <a\n-          href=\"apidocs/com/puppycrawl/tools/checkstyle/DefaultLogger.html\">DefaultLogger</a>\n-          and <code>\"xml\"</code> for the <a\n-          href=\"apidocs/com/puppycrawl/tools/checkstyle/XMLLogger.html\">XMLLogger</a>.\n-          Defaults to <code>\"plain\"</code>.\n+          <code>-f format</code> - Specifies the output\n+          format. Valid values: <code>xml</code>, <code>plain</code> for <a\n+          href=\"apidocs/com/puppycrawl/tools/checkstyle/XMLLogger.html\">XMLLogger</a>\n+          and <a href=\"apidocs/com/puppycrawl/tools/checkstyle/DefaultLogger\n+          .html\">DefaultLogger</a> respectively.\n+          Defaults to <code>plain</code>.\n         </li>\n         <li>\n-          <code>-p propertiesFile</code> - specify a\n-          properties file to use.\n+          <code>-p propertiesFile</code> - Loads the properties file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NTk3Nw=="}, "originalCommit": {"oid": "4446b8a21600826ee7dba67e56c6f2455db832bd"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1056, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}