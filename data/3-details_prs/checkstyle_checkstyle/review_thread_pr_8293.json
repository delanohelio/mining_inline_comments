{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTc0NDk1", "number": 8293, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoyODoxMlrOEDq4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowODowOFrOEMEYoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjgzNzEzOnYy", "diffSide": "RIGHT", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14Records.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoyODoxMlrOGg0vdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNjowNlrOGilQrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MTczMg==", "bodyText": "looks like this record's indentation got off (I assume unintentionally?)", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r437071732", "createdAt": "2020-06-09T00:28:12Z", "author": {"login": "esilkensen"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14Records.java", "diffHunk": "@@ -24,15 +35,15 @@ public record AnnotatedBinaryNode(@NonNull1 Node left, @NonNull1 Node right) { }\n \n     //Implements interface\n     public record Polar(double r, double theta) implements Coords {\n-        @Override\n-        public double x() {\n-            return r * Math.cos(theta);\n-        }\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e12ca720c8c8ed871c382b7a5deef972f359728"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNTI0NQ==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r438915245", "createdAt": "2020-06-11T16:26:06Z", "author": {"login": "nmancus1"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14Records.java", "diffHunk": "@@ -24,15 +35,15 @@ public record AnnotatedBinaryNode(@NonNull1 Node left, @NonNull1 Node right) { }\n \n     //Implements interface\n     public record Polar(double r, double theta) implements Coords {\n-        @Override\n-        public double x() {\n-            return r * Math.cos(theta);\n-        }\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MTczMg=="}, "originalCommit": {"oid": "6e12ca720c8c8ed871c382b7a5deef972f359728"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjg3MjgzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1MDoyM1rOGg1E-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1OTowN1rOGg1N7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzI0MQ==", "bodyText": "I wondered about an approach like this as well -- I think it may be hard to catch all the cases, though (e.g. record[], record ->, record<T>, etc.), or to really decide keyword vs. identifier in the lexer (what about class record extends Object), and seems like it could be difficult to maintain.\nIt makes me wonder again about leaving record as an IDENT as far as the lexer is concerned, and just trying to deal with it in the grammar rule. I know you have already been down multiple paths with predicates -- I will take a look myself a little later tonight and see if anything strikes me...", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r437077241", "createdAt": "2020-06-09T00:50:23Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -1966,6 +2014,17 @@ IDENT\n             if (mTreatEnumAsKeyword && \"enum\".equals($getText)) {\n                 $setType(ENUM);\n             }\n+            // records must not be in literal list, else legacy usage of records\n+            // i.e. \"LogRecord record = log();\" as a variable and method name\n+            // cause false positives. The 'keyword as identifier' problem.\n+            if (mTreatRecordAsKeyword\n+                && \"record\".equals($getText)\n+                && LA(2) != '=' && LA(1) != ';'\n+                && LA(1) != ')' && LA(1) != '.'\n+                && LA(1) != ',' && LA(1) != '('\n+                && LA(2) != ':') {\n+                $setType(RECORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e12ca720c8c8ed871c382b7a5deef972f359728"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3OTUzNQ==", "bodyText": "This actually works pretty great for records, but messes up quite a few other things.  I got the idea from here.\nEdit: this is the recommended approach, but it requires quite a few changes to existing grammar.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r437079535", "createdAt": "2020-06-09T00:59:07Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -1966,6 +2014,17 @@ IDENT\n             if (mTreatEnumAsKeyword && \"enum\".equals($getText)) {\n                 $setType(ENUM);\n             }\n+            // records must not be in literal list, else legacy usage of records\n+            // i.e. \"LogRecord record = log();\" as a variable and method name\n+            // cause false positives. The 'keyword as identifier' problem.\n+            if (mTreatRecordAsKeyword\n+                && \"record\".equals($getText)\n+                && LA(2) != '=' && LA(1) != ';'\n+                && LA(1) != ')' && LA(1) != '.'\n+                && LA(1) != ',' && LA(1) != '('\n+                && LA(2) != ':') {\n+                $setType(RECORD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzI0MQ=="}, "originalCommit": {"oid": "6e12ca720c8c8ed871c382b7a5deef972f359728"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzczMTc2OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo1OTo0NVrOGjHQ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNDo0MVrOGjHyiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MjM0Mw==", "bodyText": "nit: looks like the commit message references the wrong file (Lexer instead of Recognizer)", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r439472343", "createdAt": "2020-06-12T14:59:45Z", "author": {"login": "esilkensen"}, "path": "pom.xml", "diffHunk": "@@ -906,7 +906,7 @@\n                     <limit>\n                       <counter>BRANCH</counter>\n                       <value>COVEREDRATIO</value>\n-                      <minimum>0.73</minimum>\n+                      <minimum>0.72</minimum>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2bd54772e77ab7f9b3311f2736944cb5d03924"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDk2OQ==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r439480969", "createdAt": "2020-06-12T15:14:41Z", "author": {"login": "nmancus1"}, "path": "pom.xml", "diffHunk": "@@ -906,7 +906,7 @@\n                     <limit>\n                       <counter>BRANCH</counter>\n                       <value>COVEREDRATIO</value>\n-                      <minimum>0.73</minimum>\n+                      <minimum>0.72</minimum>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MjM0Mw=="}, "originalCommit": {"oid": "af2bd54772e77ab7f9b3311f2736944cb5d03924"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTY4NzIzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNTo1OFrOGk5Xcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1NzoyMVrOGlgmxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTgxMA==", "bodyText": "What do you think about naming this recordDefinition to fit in with enumDefinition, annotationDefinition, etc.? (If you think that makes sense, no need to rerun reports just for that renaming)", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441341810", "createdAt": "2020-06-17T07:35:58Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -254,6 +257,7 @@ typeDefinitionInternal[AST modifiers]\n     | interfaceDefinition[#modifiers]\n     | enumDefinition[#modifiers]\n     | annotationDefinition[#modifiers]\n+    | recordDeclaration[#modifiers]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMDY3OA==", "bodyText": "+1 for recordDefinition. Records are basically classes.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441430678", "createdAt": "2020-06-17T10:00:52Z", "author": {"login": "pbludov"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -254,6 +257,7 @@ typeDefinitionInternal[AST modifiers]\n     | interfaceDefinition[#modifiers]\n     | enumDefinition[#modifiers]\n     | annotationDefinition[#modifiers]\n+    | recordDeclaration[#modifiers]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTgxMA=="}, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDcwOA==", "bodyText": "I was thinking the same. Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441984708", "createdAt": "2020-06-18T05:57:21Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -254,6 +257,7 @@ typeDefinitionInternal[AST modifiers]\n     | interfaceDefinition[#modifiers]\n     | enumDefinition[#modifiers]\n     | annotationDefinition[#modifiers]\n+    | recordDeclaration[#modifiers]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTgxMA=="}, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTY4ODUyOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzozNjoxN1rOGk5YPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1NzowM1rOGlgmaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjAxNA==", "bodyText": "intentional?", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441342014", "createdAt": "2020-06-17T07:36:17Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,9 +547,60 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDeclaration![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDeclaration = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for below rules until full records support\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI\n+        )*\n+        RCURLY\n+    ;\n+\n+compactConstructorDeclaration!\n+    :    annotations modifiers id\n+            constructorBody\n+    ;\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDYxNg==", "bodyText": "It was, to sort of group all of the rules related to #8267 together.  I've removed it.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441984616", "createdAt": "2020-06-18T05:57:03Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,9 +547,60 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDeclaration![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDeclaration = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for below rules until full records support\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI\n+        )*\n+        RCURLY\n+    ;\n+\n+compactConstructorDeclaration!\n+    :    annotations modifiers id\n+            constructorBody\n+    ;\n+//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjAxNA=="}, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTcxMjU2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0MzowN1rOGk5njQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1NTo1OVrOGlglPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NTkzMw==", "bodyText": "Could potentially link to #8267", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441345933", "createdAt": "2020-06-17T07:43:07Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,9 +547,60 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDeclaration![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDeclaration = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for below rules until full records support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDMxNw==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r441984317", "createdAt": "2020-06-18T05:55:59Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,9 +547,60 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDeclaration![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDeclaration = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for below rules until full records support", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NTkzMw=="}, "originalCommit": {"oid": "20015f723d5fa4203178208d18f706ea4156c3d0"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI0Njk5OnYy", "diffSide": "LEFT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo1MzoyMlrOGlwYbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDozNDo0MVrOGlyStQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0MzE4Mw==", "bodyText": "This blank line has a pair on line 1668 (1732). Please remove both of them or none of them.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r442243183", "createdAt": "2020-06-18T13:53:22Z", "author": {"login": "pbludov"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -1693,7 +1757,6 @@ options {\n     {\n         mTreatEnumAsKeyword = aTreatAsKeyword;\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9851538ea5142b1bf3021e7bdc80589b12c89851"}, "originalPosition": 404}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3NDQ4NQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r442274485", "createdAt": "2020-06-18T14:34:41Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -1693,7 +1757,6 @@ options {\n     {\n         mTreatEnumAsKeyword = aTreatAsKeyword;\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0MzE4Mw=="}, "originalCommit": {"oid": "9851538ea5142b1bf3021e7bdc80589b12c89851"}, "originalPosition": 404}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzkxNzEwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1MTowNVrOGokYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1MTowNVrOGokYBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5MjE5OA==", "bodyText": "@rnveach\n\nAlso I notice this isn't full record support. Is there another issue defined that will house the full record support?\n\nHere is a link to the issue for full record support", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r445192198", "createdAt": "2020-06-24T21:51:05Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,9 +547,61 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71258d83ab21e5aa5e6f69a792e5abefc28bf9a2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTEwNDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTozNzo1NVrOGrrNqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo1NzoyMlrOGsJoww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0OTk2MA==", "bodyText": "I am not sure I would make a bland statement like all Java 14 will be here as we are forced to add new tokens to the end. If some other token needs to be added, java 14 will have to be split between it.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448449960", "createdAt": "2020-07-01T15:37:55Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -116,6 +116,9 @@ tokens {\n     BINARY_DIGIT; ID_START; ID_PART; INT_LITERAL; LONG_LITERAL;\n     FLOAT_LITERAL; DOUBLE_LITERAL; HEX_FLOAT_LITERAL; HEX_DOUBLE_LITERAL;\n     SIGNED_INTEGER; BINARY_EXPONENT;\n+\n+    //Start Java14 syntax here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0ODQxOQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448948419", "createdAt": "2020-07-02T11:57:22Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -116,6 +116,9 @@ tokens {\n     BINARY_DIGIT; ID_START; ID_PART; INT_LITERAL; LONG_LITERAL;\n     FLOAT_LITERAL; DOUBLE_LITERAL; HEX_FLOAT_LITERAL; HEX_DOUBLE_LITERAL;\n     SIGNED_INTEGER; BINARY_EXPONENT;\n+\n+    //Start Java14 syntax here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0OTk2MA=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTEwNzIyOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTozODozOVrOGrrPTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo1NzoxM1rOGsJofg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MDM4Mg==", "bodyText": "Why text \"record\" and not LITERAL_record?", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448450382", "createdAt": "2020-07-01T15:38:39Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MTQyMQ==", "bodyText": "@nmancus1 can you answer here? I feel like I remember you mentioning this, but I know there were a number of attempts before landing on this solution. Would LITERAL_record also work?", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448851421", "createdAt": "2020-07-02T08:54:12Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MDM4Mg=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NTIyMA==", "bodyText": "Yes, it will work.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448945220", "createdAt": "2020-07-02T11:51:06Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MDM4Mg=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0ODM1MA==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448948350", "createdAt": "2020-07-02T11:57:13Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MDM4Mg=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTE2NDI4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTo1MzowM1rOGrrytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjowNDo0MlrOGsJ3yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ0NA==", "bodyText": "Is there no ClassBodyDeclaration because of limited record support?", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448459444", "createdAt": "2020-07-01T15:53:03Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3MDIyNg==", "bodyText": "http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.2", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448470226", "createdAt": "2020-07-01T16:11:08Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ0NA=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1NTY0Nw==", "bodyText": "I think we are covered with field and SEMI (I like this comment \ud83d\ude04) \n  \n    \n      checkstyle/src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g\n    \n    \n        Lines 763 to 768\n      in\n      f1ee17d\n    \n    \n    \n    \n\n        \n          \n           // This is the body of a class.  You can have fields and extra semicolons, \n        \n\n        \n          \n           // That's about it (until you see what a field is...) \n        \n\n        \n          \n           classBlock \n        \n\n        \n          \n               :    LCURLY \n        \n\n        \n          \n                       ( field | SEMI )* \n        \n\n        \n          \n                   RCURLY \n        \n    \n  \n\n\nThis PR is parsing the InputJava14Records file which has records with fields, methods, etc. in their bodies.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448855647", "createdAt": "2020-07-02T09:00:52Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ0NA=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTAwNw==", "bodyText": "Is there no ClassBodyDeclaration because of limited record support?\n\nWell, I wasn't sure what the best way to do this was. classblock is already our ClassBodyDeclaration.  I can't reuse  classblock, since it has LCURLY and RCURLY already defined, and it doesn't make sense ( and causes lots of problems ) to add compactConstructorDeclaration to classblock.\nFor full records support, I planned to make this entire AST an OBJBLOCK, and the recordBodyDeclaration rule should work well with existing checks that way.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448939007", "createdAt": "2020-07-02T11:38:21Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ0NA=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTM1OA==", "bodyText": "I can't provide recommendation on best way to go. If you believe this is parsing correctly or will be changed in full support, then you can mark this as resolved. I just noticed the disparity and wanted to make sure I was missing something or it was going to be resolved.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448949358", "createdAt": "2020-07-02T11:59:15Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ0NA=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1MjI2NA==", "bodyText": "This parses everything I've thrown at it, and all the records files in JDK14 repo.  The only changes I plan to make are to build the AST for it in #8267.  I'm going to mark it as resolved.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448952264", "createdAt": "2020-07-02T12:04:42Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}\n+    ;\n+\n+// Build no AST for other record rules until\n+// https://github.com/checkstyle/checkstyle/issues/8267\n+recordComponentsList!\n+    :   LPAREN recordComponents RPAREN\n+    ;\n+\n+recordComponents!\n+    // Taken from parameterDeclarationList\n+    :   (   ( recordComponent )=> recordComponent\n+            ( options {warnWhenFollowAmbig=false;} :\n+                ( COMMA recordComponent ) => COMMA recordComponent )*\n+            ( COMMA recordComponentVariableLength )?\n+        |\n+            recordComponentVariableLength\n+        )?\n+    ;\n+\n+recordComponentVariableLength!\n+    :   parameterModifier t:variableLengthParameterTypeSpec ELLIPSIS id\n+        declaratorBrackets[#t]\n+    ;\n+\n+recordComponent!\n+    :   annotations typeSpec[false] id\n+    ;\n+\n+recordBodyDeclaration!\n+    :   LCURLY\n+        (   (compactConstructorDeclaration)=> compactConstructorDeclaration\n+        |   field\n+        |   SEMI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ0NA=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTIyMjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjowODozM1rOGrsXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjowNjozMFrOGsJ7lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2ODc0Mw==", "bodyText": "we not adding tp, ic rb because it is incomplete? I noticed the grammar print had nothing.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448468743", "createdAt": "2020-07-01T16:08:33Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MDkyOA==", "bodyText": "Yes, the plan is to add the AST in the follow-up issue #8267", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448850928", "createdAt": "2020-07-02T08:53:16Z", "author": {"login": "esilkensen"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2ODc0Mw=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NDgwOQ==", "bodyText": "we not adding tp, ic rb because it is incomplete?\n\nThat is correct, but I still needed to include them here to correctly parse everything.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448944809", "createdAt": "2020-07-02T11:50:21Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2ODc0Mw=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0ODM2Mw==", "bodyText": "Ok, it may just be me but it sounds like it would be beneficial to add a comment saying updates will come in 8267 to ensure we don't miss anything. Its not clear what is intended and what is going to be finished later, unless I missed some complete list.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448948363", "createdAt": "2020-07-02T11:57:15Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2ODc0Mw=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1MzIzNg==", "bodyText": "I will make it more clear. Edit: fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r448953236", "createdAt": "2020-07-02T12:06:30Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +547,58 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+\n+recordDefinition![AST modifiers]\n+    :   r:\"record\" id:id\n+        (tp:typeParameters)?\n+        rc:recordComponentsList\n+        ic:implementsClause\n+        rb:recordBodyDeclaration\n+        {#recordDefinition = #(#[RECORD_DEF, \"RECORD_DEF\"],\n+                              modifiers, r, id, rc);}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2ODc0Mw=="}, "originalCommit": {"oid": "1d7ea67b55928b8f7448f4f58dce725559b5507d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODc2NjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNDoyNVrOGsOYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDozMTo0NFrOGsPj1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNjEwNQ==", "bodyText": "I do not see myString in AST example.\nPlease modify code example to be minimalistic, AST should be same by structure as our CLI is printing it.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r449026105", "createdAt": "2020-07-02T14:04:25Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3540,6 +3540,34 @@\n     public static final int COMMENT_CONTENT =\n             GeneratedJavaTokenTypes.COMMENT_CONTENT;\n \n+    /**\n+     * The {@code record} keyword.  This element appears\n+     * as part of a record declaration.\n+     **/\n+    public static final int LITERAL_RECORD =\n+            GeneratedJavaTokenTypes.LITERAL_record;\n+\n+    /**\n+     * A record declaration.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * public record myRecord (String myString, String myOtherString) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dd24dc259cf9984aa609128b89770dafe5385a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NTQ2Mw==", "bodyText": "Fixed, I also updated the format of the AST to match the format we discussed in other PR.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r449045463", "createdAt": "2020-07-02T14:31:44Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3540,6 +3540,34 @@\n     public static final int COMMENT_CONTENT =\n             GeneratedJavaTokenTypes.COMMENT_CONTENT;\n \n+    /**\n+     * The {@code record} keyword.  This element appears\n+     * as part of a record declaration.\n+     **/\n+    public static final int LITERAL_RECORD =\n+            GeneratedJavaTokenTypes.LITERAL_record;\n+\n+    /**\n+     * A record declaration.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * public record myRecord (String myString, String myOtherString) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNjEwNQ=="}, "originalCommit": {"oid": "d9dd24dc259cf9984aa609128b89770dafe5385a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODc2OTU3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNToxMFrOGsOaOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDozMDoxMlrOGsPfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNjYxNg==", "bodyText": "// until ... space after //", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r449026616", "createdAt": "2020-07-02T14:05:10Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +546,59 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+// Java 14 record definition. We will not completely build this AST\n+// until https://github.com/checkstyle/checkstyle/issues/8267\n+recordDefinition![AST modifiers]\n+    :   r:LITERAL_record id:id\n+        (tp:typeParameters)?        //until #8267", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dd24dc259cf9984aa609128b89770dafe5385a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NDI3NQ==", "bodyText": "Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r449044275", "createdAt": "2020-07-02T14:30:12Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -543,6 +546,59 @@ annotationExpression\n         {#annotationExpression = #(#[EXPR,\"EXPR\"],#annotationExpression);}\n     ;\n \n+// Java 14 record definition. We will not completely build this AST\n+// until https://github.com/checkstyle/checkstyle/issues/8267\n+recordDefinition![AST modifiers]\n+    :   r:LITERAL_record id:id\n+        (tp:typeParameters)?        //until #8267", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNjYxNg=="}, "originalCommit": {"oid": "d9dd24dc259cf9984aa609128b89770dafe5385a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkwMjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowODowOFrOGt9sEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNToxODozMFrOGuDi9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0OTgwOA==", "bodyText": "as we skip ``--OBJBLOCK -> OBJBLOCKin AST, lets updateA record declaration` to `A record declaration, this implementation is just to avoid parse errors, full support will be at #8267`", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r450849808", "createdAt": "2020-07-07T13:08:08Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3540,6 +3540,32 @@\n     public static final int COMMENT_CONTENT =\n             GeneratedJavaTokenTypes.COMMENT_CONTENT;\n \n+    /**\n+     * The {@code record} keyword.  This element appears\n+     * as part of a record declaration.\n+     **/\n+    public static final int LITERAL_RECORD =\n+            GeneratedJavaTokenTypes.LITERAL_record;\n+\n+    /**\n+     * A record declaration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef4f038879fb4d6d2ac5f9bea8fbb47df9c51a5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NTc4MQ==", "bodyText": "Fixed and rebased.", "url": "https://github.com/checkstyle/checkstyle/pull/8293#discussion_r450945781", "createdAt": "2020-07-07T15:18:30Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3540,6 +3540,32 @@\n     public static final int COMMENT_CONTENT =\n             GeneratedJavaTokenTypes.COMMENT_CONTENT;\n \n+    /**\n+     * The {@code record} keyword.  This element appears\n+     * as part of a record declaration.\n+     **/\n+    public static final int LITERAL_RECORD =\n+            GeneratedJavaTokenTypes.LITERAL_record;\n+\n+    /**\n+     * A record declaration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0OTgwOA=="}, "originalCommit": {"oid": "bef4f038879fb4d6d2ac5f9bea8fbb47df9c51a5"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 822, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}