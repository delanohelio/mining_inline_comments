{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDU2OTA4", "number": 7457, "title": "Issue #6480: Add AvoidDoubleBraceInitializationCheck", "bodyText": "#6480 Added check\nReport: https://strkkk.github.io/checkstyle/6480/index.html\nConfig PR: checkstyle/contribution#443", "createdAt": "2020-01-10T13:44:26Z", "url": "https://github.com/checkstyle/checkstyle/pull/7457", "merged": true, "mergeCommit": {"oid": "646d90e0237d92cb6ab84dc7083a1d2d636eceb2"}, "closed": true, "closedAt": "2020-02-05T05:05:18Z", "author": {"login": "strkkk"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5CgrdgBqjI5MzkzODEwNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBO5j8gFqTM1MzQ2NzExMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2d7efff7ad77615e407acf5b03145ffef156b62", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/c2d7efff7ad77615e407acf5b03145ffef156b62", "committedDate": "2020-01-10T13:41:09Z", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length"}, "afterCommit": {"oid": "598686b1fcb77e3f597777eeb3736d468de01da5", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/598686b1fcb77e3f597777eeb3736d468de01da5", "committedDate": "2020-01-10T18:03:13Z", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "598686b1fcb77e3f597777eeb3736d468de01da5", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/598686b1fcb77e3f597777eeb3736d468de01da5", "committedDate": "2020-01-10T18:03:13Z", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length"}, "afterCommit": {"oid": "d0dd87c9b2cfbb4491cfaaa1bf83cfdebcd703e2", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d0dd87c9b2cfbb4491cfaaa1bf83cfdebcd703e2", "committedDate": "2020-01-13T07:30:27Z", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0dd87c9b2cfbb4491cfaaa1bf83cfdebcd703e2", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d0dd87c9b2cfbb4491cfaaa1bf83cfdebcd703e2", "committedDate": "2020-01-13T07:30:27Z", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length"}, "afterCommit": {"oid": "034dbae4fff7bfb718cb1cd67c3e741232c41457", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/034dbae4fff7bfb718cb1cd67c3e741232c41457", "committedDate": "2020-01-13T09:26:47Z", "message": "minor: refactor PackageObjectFactory to decrease methods length"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "034dbae4fff7bfb718cb1cd67c3e741232c41457", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/034dbae4fff7bfb718cb1cd67c3e741232c41457", "committedDate": "2020-01-13T09:26:47Z", "message": "minor: refactor PackageObjectFactory to decrease methods length"}, "afterCommit": {"oid": "1bdab032f70f7e1d2506869ec8a45b46f36739fb", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1bdab032f70f7e1d2506869ec8a45b46f36739fb", "committedDate": "2020-01-13T10:50:44Z", "message": "minor: refactor PackageObjectFactory to decrease methods length"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bdab032f70f7e1d2506869ec8a45b46f36739fb", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1bdab032f70f7e1d2506869ec8a45b46f36739fb", "committedDate": "2020-01-13T10:50:44Z", "message": "minor: refactor PackageObjectFactory to decrease methods length"}, "afterCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/ce4122fed8e7f7315f6660837d35c044b9825b5c", "committedDate": "2020-01-13T12:26:18Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTMwODE0", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-343530814", "createdAt": "2020-01-15T21:24:07Z", "commit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyNDowN1rOFeG5Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyNDowN1rOFeG5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA==", "bodyText": "This is not just an anti-pattern. This is also the way to a hard-to-detect memory leak. Because the implicitly created anonymous class is not static, it holds a reference to the this pointer of the outer class. And if a reference to such a collection is stored somewhere outside, its outer class will survive the GC as long as the inner collection.\nclass outer {\n    List<String> list = new ArrayList<String>(){{\n        add(\"foo\");\n    }};\n  // returns more than just a list\n  public List<String> getList() {\n    return Collections.unmodifiableList(list);\n  }\n}\nis actually\nclass outer {\n    List<String> list = new inner(this);\n\n    class inner extends ArrayList<String> {\n        outer outerThis;\n        {\n            add(\"foo\");\n        }\n        inner(outer outerThis) {\n            this.outerThis = outerThis;\n        }\n    }\n}\nPlease add this to the docs. People love explanations.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r367114574", "createdAt": "2020-01-15T21:24:07Z", "author": {"login": "pbludov"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/ce4122fed8e7f7315f6660837d35c044b9825b5c", "committedDate": "2020-01-13T12:26:18Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "2c3fd7ad7a819d3344a43e1c2a473947e544e4bf", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2c3fd7ad7a819d3344a43e1c2a473947e544e4bf", "committedDate": "2020-01-20T10:48:31Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c3fd7ad7a819d3344a43e1c2a473947e544e4bf", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2c3fd7ad7a819d3344a43e1c2a473947e544e4bf", "committedDate": "2020-01-20T10:48:31Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "1afe729ee5cde017684a5f0bef12905ec17d0638", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1afe729ee5cde017684a5f0bef12905ec17d0638", "committedDate": "2020-01-20T12:10:01Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1afe729ee5cde017684a5f0bef12905ec17d0638", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1afe729ee5cde017684a5f0bef12905ec17d0638", "committedDate": "2020-01-20T12:10:01Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7afd97975b61981b8bed93ac12a574fb1119af58", "committedDate": "2020-01-20T13:30:10Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTU3Njg3", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-345557687", "createdAt": "2020-01-20T22:33:09Z", "commit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mjc5NDk2", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-348279496", "createdAt": "2020-01-24T23:31:31Z", "commit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzozMTozMlrOFhtFhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzozMzo0NVrOFhtHTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjAyMQ==", "bodyText": "please add one case like this - https://stackoverflow.com/a/1958961/1015848\nand like https://strkkk.github.io/checkstyle/6480/apache-ant/index.html#A1", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r370886021", "createdAt": "2020-01-24T23:31:32Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.avoiddoublebraceinitialization;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/*\n+ * Config = default\n+ */\n+public class InputAvoidDoubleBraceInitialization {\n+    void m() {\n+        ArrayList<?> list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            // some comment\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            /* comment */ {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            /* comment */\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } /* comment */\n+        };\n+        list = new ArrayList<Object>() {\n+            ;\n+            ;\n+            {}\n+            ;\n+            ;\n+            ;\n+        };\n+        Object obj = new Serializable() {  // violation\n+            {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw==", "bodyText": "please add this link also  https://www.baeldung.com/java-double-brace-initialization\nit has a bit more items as reason.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r370886477", "createdAt": "2020-01-24T23:33:45Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See a\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7afd97975b61981b8bed93ac12a574fb1119af58", "committedDate": "2020-01-20T13:30:10Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0c77be5fe9812ccf7e24d8139aa5716674db10fb", "committedDate": "2020-01-27T10:14:35Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODA4NzEy", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-348808712", "createdAt": "2020-01-27T16:40:46Z", "commit": {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjo0MDo0N1rOFiJgRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjo0MDo0N1rOFiJgRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MTYyMQ==", "bodyText": "does it make sense to move this lambda to field or make it as method to use method reference ?\nwe do not have that much methods in class, so it will looks good to be not lambda, .... no need to instantiate it each time.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371351621", "createdAt": "2020-01-27T16:40:47Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.30\n+ */\n+@StatelessCheck\n+public class AvoidDoubleBraceInitializationCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"avoid.double.brace.init\";\n+\n+    /**\n+     * List of token types that are used in {@link #hasOnlyInitialization(DetailAST)}.\n+     */\n+    private static final List<Integer> IGNORED_TYPES = Arrays.asList(\n+        TokenTypes.INSTANCE_INIT,\n+        TokenTypes.SEMI,\n+        TokenTypes.LCURLY,\n+        TokenTypes.RCURLY\n+    );\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.OBJBLOCK};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() == TokenTypes.LITERAL_NEW\n+            && hasOnlyInitialization(ast)) {\n+            log(ast, MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks that block has at least one instance init block and no other class members.\n+     *\n+     * @param objBlock token to check\n+     * @return true if there is least one instance init block and no other class members,\n+     *     false otherwise\n+     */\n+    private static boolean hasOnlyInitialization(DetailAST objBlock) {\n+        final boolean hasInitBlock = objBlock.findFirstToken(TokenTypes.INSTANCE_INIT) != null;\n+        final Predicate<DetailAST> hasMembers = token -> !IGNORED_TYPES.contains(token.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb"}, "originalPosition": 132}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0c77be5fe9812ccf7e24d8139aa5716674db10fb", "committedDate": "2020-01-27T10:14:35Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "committedDate": "2020-01-27T23:50:10Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU2ODI5", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-349056829", "createdAt": "2020-01-27T23:56:50Z", "commit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDYwNDY5", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-349060469", "createdAt": "2020-01-28T00:07:52Z", "commit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNzo1MlrOFiVs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowOTozNlrOFiVurA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA==", "bodyText": "Why does the field matter? Isn't there still a concern for a memory leak?", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371551448", "createdAt": "2020-01-28T00:07:52Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTkxNg==", "bodyText": "comments are alone commas are ignored\n\nI'm not sure I understand this phrase, also I don't see a comma. Was this suppose to be semicolon?", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371551916", "createdAt": "2020-01-28T00:09:36Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "committedDate": "2020-01-27T23:50:10Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "committedDate": "2020-01-28T12:46:10Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "committedDate": "2020-01-28T12:46:10Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "6a1563f2b60dffe2d7b977e9d214118b22c91f37", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6a1563f2b60dffe2d7b977e9d214118b22c91f37", "committedDate": "2020-01-28T23:09:31Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a1563f2b60dffe2d7b977e9d214118b22c91f37", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6a1563f2b60dffe2d7b977e9d214118b22c91f37", "committedDate": "2020-01-28T23:09:31Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/eb6ed327fbe78294f03f1751fe116c8208adfd44", "committedDate": "2020-02-04T02:06:58Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzY4Mzgy", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-352768382", "createdAt": "2020-02-04T07:32:29Z", "commit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzozMjoyOVrOFlKUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzozNDowNFrOFlKWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDc3OQ==", "bodyText": "Though these might create the same ...", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374510779", "createdAt": "2020-02-04T07:32:29Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * Check ignores any comments and semicolons in class body.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments and semicolons are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Check only looks for double brace initialization and it ignores cases\n+ * where the anonymous class has fields or methods.\n+ * Though these will create the same memory issues as double brace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMTI5MA==", "bodyText": "... memory leak, if the anonymous class is returned outside and held by other object(s). Created .....\nas if collection is used internally ... it does not make any problem.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374511290", "createdAt": "2020-02-04T07:34:04Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/eb6ed327fbe78294f03f1751fe116c8208adfd44", "committedDate": "2020-02-04T02:06:58Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "committedDate": "2020-02-05T00:15:53Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2413523250a46b64b1855269cebd1a702a157549", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2413523250a46b64b1855269cebd1a702a157549", "committedDate": "2020-02-05T01:55:30Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "committedDate": "2020-02-05T00:15:53Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}, "afterCommit": {"oid": "2413523250a46b64b1855269cebd1a702a157549", "author": {"user": {"login": "strkkk", "name": "Andrei Paikin"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2413523250a46b64b1855269cebd1a702a157549", "committedDate": "2020-02-05T01:55:30Z", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDYzMjUx", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-353463251", "createdAt": "2020-02-05T04:43:38Z", "commit": {"oid": "2413523250a46b64b1855269cebd1a702a157549"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDY3MTEz", "url": "https://github.com/checkstyle/checkstyle/pull/7457#pullrequestreview-353467113", "createdAt": "2020-02-05T05:01:33Z", "commit": {"oid": "2413523250a46b64b1855269cebd1a702a157549"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1201, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}