{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODg2MjYx", "number": 7932, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMTo0Mjo0M1rODsTwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1MzoyOFrOEZQr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Nzg3NTU1OnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMTo0Mjo0M1rOF9I3rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMToxODo1NlrOF9VPJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1Mjc4MA==", "bodyText": "Double '' required", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r399652780", "createdAt": "2020-03-28T11:42:43Z", "author": {"login": "bmarwell"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties", "diffHunk": "@@ -21,6 +21,7 @@ javadoc.paragraph.redundant.paragraph=Balise <p> redondante.\n javadoc.paragraph.tag.after=Une ligne vide doit \u00eatre suivie par une balise <p> sur la ligne suivante.\n javadoc.parse.rule.error=Le commentaire Javadoc \u00e0 la colonne {0} ne peut \u00eatre analys\u00e9. D\u00e9tails : {1} lors de l''analyse {2}\n javadoc.return.expected=Balise Javadoc @return manquante.\n+javadoc.tag.line.before=Javadoc @-clause {0} doit \u00eatre pr\u00e9c\u00e9d\u00e9 d'une ligne vide.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fcfdc3c395fda0f54c737845442fde7d15532d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTM5OA==", "bodyText": "Ok. I also added double '' to the other message.properties files.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r399855398", "createdAt": "2020-03-29T21:18:56Z", "author": {"login": "josephmate"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties", "diffHunk": "@@ -21,6 +21,7 @@ javadoc.paragraph.redundant.paragraph=Balise <p> redondante.\n javadoc.paragraph.tag.after=Une ligne vide doit \u00eatre suivie par une balise <p> sur la ligne suivante.\n javadoc.parse.rule.error=Le commentaire Javadoc \u00e0 la colonne {0} ne peut \u00eatre analys\u00e9. D\u00e9tails : {1} lors de l''analyse {2}\n javadoc.return.expected=Balise Javadoc @return manquante.\n+javadoc.tag.line.before=Javadoc @-clause {0} doit \u00eatre pr\u00e9c\u00e9d\u00e9 d'une ligne vide.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1Mjc4MA=="}, "originalCommit": {"oid": "13fcfdc3c395fda0f54c737845442fde7d15532d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg0MDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzo1MDo1MFrOGp5FmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMzoyNTo1NVrOGqBHkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDEyMQ==", "bodyText": "please move this to separate PR to let me merge it immediately and reduce this PR, this will help maintainers to focus on details and nuances of it.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r446580121", "createdAt": "2020-06-27T23:50:50Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "diffHunk": "@@ -262,6 +266,7 @@ private static boolean isFirstParagraph(DetailNode paragraphTag) {\n \n     /**\n      * Finds and returns nearest empty line in javadoc.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82b781202a860fd07ab44f21447386d7a1f876d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5Njk2Nw==", "bodyText": "Ok. I moved the fixes here: #8347 . I will resolve this conversation once that's committed and I rebase this pull request with master.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r446696967", "createdAt": "2020-06-28T20:53:56Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "diffHunk": "@@ -262,6 +266,7 @@ private static boolean isFirstParagraph(DetailNode paragraphTag) {\n \n     /**\n      * Finds and returns nearest empty line in javadoc.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDEyMQ=="}, "originalCommit": {"oid": "a82b781202a860fd07ab44f21447386d7a1f876d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMTY5OQ==", "bodyText": "Merged", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r446711699", "createdAt": "2020-06-28T23:25:55Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "diffHunk": "@@ -262,6 +266,7 @@ private static boolean isFirstParagraph(DetailNode paragraphTag) {\n \n     /**\n      * Finds and returns nearest empty line in javadoc.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDEyMQ=="}, "originalCommit": {"oid": "a82b781202a860fd07ab44f21447386d7a1f876d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTA4NzUyOnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_javadoc.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMzoyNDo0N1rOGzzKBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMzoyNDo0N1rOGzzKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2ODcxMA==", "bodyText": "Please add example for valid javadoc, to show user what is good", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r456968710", "createdAt": "2020-07-19T23:24:47Z", "author": {"login": "romani"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -2912,6 +2911,110 @@ class DatabaseConfiguration {}\n       </subsection>\n     </section>\n \n+    <section name=\"RequireEmptyLineBeforeAtClauseBlock\">\n+      <p>Since Checkstyle 8.35</p>\n+      <subsection name=\"Description\" id=\"RequireEmptyLineBeforeAtClauseBlock_Description\">\n+        <p>\n+          Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+        </p>\n+      </subsection>\n+      <subsection name=\"Properties\" id=\"RequireEmptyLineBeforeAtClauseBlock_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>violateExecutionOnNonTightHtml</td>\n+              <td>\n+                Control when to print violations if the Javadoc being examined by this check\n+                violates the tight html rules defined at\n+                <a href=\"writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.</td>\n+              <td><a href=\"property_types.html#boolean\">boolean</a></td>\n+              <td><code>false</code></td>\n+              <td>8.3</td>\n+            </tr>\n+          </table>\n+        </div>\n+      </subsection>\n+\n+      <subsection name=\"Examples\" id=\"RequireEmptyLineBeforeAtClauseBlock_Examples\">\n+        <p>\n+          To configure the check:\n+        </p>\n+        <source>\n+&lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+        </source>\n+        <p>\n+          By default, the check will report a violation if there is no blank line before the\n+          at-clause.\n+        </p>\n+        <source>\n+&#47;**\n+ * testMethod's javadoc.\n+ * &#64;return something (violation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8b6e035db8680672b3a38f3c9260fa8e9ef940"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTA5MDY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMzoyOTowNFrOGzzLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoyNDo1M1rOGzzj0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2OTEwOA==", "bodyText": "If something force you to reference all messages ?", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r456969108", "createdAt": "2020-07-19T23:29:04Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,184 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8b6e035db8680672b3a38f3c9260fa8e9ef940"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDUxNQ==", "bodyText": "Other files do same", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r456974515", "createdAt": "2020-07-20T00:17:51Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,184 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2OTEwOA=="}, "originalCommit": {"oid": "be8b6e035db8680672b3a38f3c9260fa8e9ef940"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NTMxNQ==", "bodyText": "RequireEmptyLineBeforeAtClauseBlockCheck extends from AbstractJavadocCheck. As a result, RequireEmptyLineBeforeAtClauseBlockCheck needs to document those inherited properties. Some unit test fails if I don't. I don't remember which test.\nI see three approaches to handling this:\n\nMove those properties out of JavadocCheck into only the classes that needed it\nDon't extend from AbstractJavadocCheck\nDisable that unit test for JavadocCheck", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r456975315", "createdAt": "2020-07-20T00:24:53Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,184 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2OTEwOA=="}, "originalCommit": {"oid": "be8b6e035db8680672b3a38f3c9260fa8e9ef940"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk2ODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozMjoyM1rOG19vuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMjozNTowM1rOG3Bw8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTM1Mw==", "bodyText": "Please inline content of this method, we try to keep log methods in visit method.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r459239353", "createdAt": "2020-07-23T06:32:23Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode ast) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        checkAtClause(ast);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636e38e964d94089c00f2a1049044baea9741b59"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1Mzc3Nw==", "bodyText": "Ok. I deleted checkAtClause and move its contents into visitJavadocToken.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460353777", "createdAt": "2020-07-25T02:35:03Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode ast) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        checkAtClause(ast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTM1Mw=="}, "originalCommit": {"oid": "636e38e964d94089c00f2a1049044baea9741b59"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk3Mzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNDo1MVrOG19zCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMjozNTo0MVrOG3BxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDIwMg==", "bodyText": "Please indent this and following lines further to right, to visually show nested expression.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r459240202", "createdAt": "2020-07-23T06:34:51Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode ast) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        checkAtClause(ast);\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at clause to check for an empty space before it.\n+     */\n+    private void checkAtClause(DetailNode atClause) {\n+        if (!isAnotherAtClauseBefore(atClause)\n+                && !isOnlyAtClauseNothingElse(atClause)\n+                && insufficientConsecutiveNewlines(atClause)) {\n+            log(atClause.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    atClause.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherAtClauseBefore(DetailNode atClause) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    private static boolean isOnlyAtClauseNothingElse(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            count++;\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return count == NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG;\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the atClause looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param atClause the atClause to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the atClause.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null\n+                && count <= 1\n+                && (currentClause.getType() == JavadocTokenTypes.NEWLINE\n+                || currentClause.getType() == JavadocTokenTypes.WS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636e38e964d94089c00f2a1049044baea9741b59"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1Mzg0Nw==", "bodyText": "I added an additional indentation to both the || lines.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460353847", "createdAt": "2020-07-25T02:35:41Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode ast) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        checkAtClause(ast);\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at clause to check for an empty space before it.\n+     */\n+    private void checkAtClause(DetailNode atClause) {\n+        if (!isAnotherAtClauseBefore(atClause)\n+                && !isOnlyAtClauseNothingElse(atClause)\n+                && insufficientConsecutiveNewlines(atClause)) {\n+            log(atClause.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    atClause.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherAtClauseBefore(DetailNode atClause) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    private static boolean isOnlyAtClauseNothingElse(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            count++;\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return count == NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG;\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the atClause looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param atClause the atClause to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the atClause.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null\n+                && count <= 1\n+                && (currentClause.getType() == JavadocTokenTypes.NEWLINE\n+                || currentClause.getType() == JavadocTokenTypes.WS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDIwMg=="}, "originalCommit": {"oid": "636e38e964d94089c00f2a1049044baea9741b59"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk3ODAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNjozMVrOG191YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMjozNjo0MFrOG3BxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDgwMA==", "bodyText": "Please make it first expression, to bring null check close to getType block.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r459240800", "createdAt": "2020-07-23T06:36:31Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode ast) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        checkAtClause(ast);\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at clause to check for an empty space before it.\n+     */\n+    private void checkAtClause(DetailNode atClause) {\n+        if (!isAnotherAtClauseBefore(atClause)\n+                && !isOnlyAtClauseNothingElse(atClause)\n+                && insufficientConsecutiveNewlines(atClause)) {\n+            log(atClause.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    atClause.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherAtClauseBefore(DetailNode atClause) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    private static boolean isOnlyAtClauseNothingElse(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            count++;\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return count == NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG;\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the atClause looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param atClause the atClause to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the atClause.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null\n+                && count <= 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636e38e964d94089c00f2a1049044baea9741b59"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MzkzMw==", "bodyText": "I moved null check just before currentClause.getType()", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460353933", "createdAt": "2020-07-25T02:36:40Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,201 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode ast) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        checkAtClause(ast);\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at clause to check for an empty space before it.\n+     */\n+    private void checkAtClause(DetailNode atClause) {\n+        if (!isAnotherAtClauseBefore(atClause)\n+                && !isOnlyAtClauseNothingElse(atClause)\n+                && insufficientConsecutiveNewlines(atClause)) {\n+            log(atClause.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    atClause.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherAtClauseBefore(DetailNode atClause) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    private static boolean isOnlyAtClauseNothingElse(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            count++;\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return count == NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG;\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the atClause looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param atClause the atClause to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the atClause.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode atClause) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null\n+                && count <= 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDgwMA=="}, "originalCommit": {"oid": "636e38e964d94089c00f2a1049044baea9741b59"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY2MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDowNTozNVrOG3FFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoxNzo1OFrOHBLPog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODE5OQ==", "bodyText": "After a bit of think on this number ... I still think it is bit non-reliable approach.\nplease\n\nmove whole javadoc of this field to isOnlyAtClauseNothingElse.\nplease format tree to follow our style as at https://checkstyle.sourceforge.io/apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html#JAVADOC\nplease avoid NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG as constant and let use logic like:\n\nprevSibling = getPrevSibling\nif (prevSibling != null && prevSibling.getType=WS) {\n  prevSibling = getPrevSibling\n  if (prevSibling != null && prevSibling.getType=LEADING_ASTERISK) {\n\n(or something similar)", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460408199", "createdAt": "2020-07-25T14:05:35Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MTU2Mw==", "bodyText": "I tried to get rid of the constant but I failed and actual did worse! I added a second constant.\nMy first attempt was the code below:\nboolean result = false;\nDetailNode prevClause = JavadocUtil.getPreviousSibling(tagNode);\nif (prevClause != null && prevClause.getType() == JavadocTokenTypes.WS) {\n    prevClause = JavadocUtil.getPreviousSibling(tagNode);\n    if (prevClause != null && prevClause.getType() == JavadocTokenTypes.LEADING_ASTERISK) {\n        prevClause = JavadocUtil.getPreviousSibling(tagNode);\n        result = prevClause.getType() == JavadocTokenTypes.NEWLINE;\n    }\n}\nreturn result;\nbut that result in many uncovered branches. While searching for test cases to cover the missing branches, I found this test case that I needed to cover\n/**\n *@param nospace There's no space.\n */\nI need to make sure the above example does not recommend a newline. Another indepedent check will recommend adding a space.\nSupporting this case requires even more branches.\nUsing hardcode lists of the expected types came out much cleaner.\nLet me know what you think. I will try again with if statements and search for test cases to cover all the branches is creates if you don't like the List solution.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r467641563", "createdAt": "2020-08-09T23:24:41Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODE5OQ=="}, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxODMzNA==", "bodyText": "it is very good that coverage tool try to help us with extra test cases and we become to see more edge case.\nWe should not afraid coverage ... it guides to better code and tests.\nI still scary of this magic number 3.\nlet have one more PR and we will compare code to be more certain about alternative to magic number.\n\nI need to make sure the above example does not recommend a newline. Another indepedent check will recommend adding a space.\n\nyes. yes.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r469318334", "createdAt": "2020-08-12T14:51:06Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODE5OQ=="}, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDg1MA==", "bodyText": "The magic number 3 is gone. It's replaced by the two expected lists of previous siblings:\n    /**\n     * Case when space separates the tag and the asterisk like in the below example.\n     * <pre>\n     *  /**\n     *   * &#64;param noSpace there is no space here\n     * </pre>\n     */\n    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n            JavadocTokenTypes.WS,\n            JavadocTokenTypes.LEADING_ASTERISK,\n            JavadocTokenTypes.NEWLINE);\n\n    /**\n     * Case when no space separates the tag and the asterisk like in the below example.\n     * <pre>\n     *  /**\n     *   *&#64;param noSpace there is no space here\n     * </pre>\n     */\n    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n            JavadocTokenTypes.LEADING_ASTERISK,\n            JavadocTokenTypes.NEWLINE);", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r470994850", "createdAt": "2020-08-15T14:17:58Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODE5OQ=="}, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY2MzE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDowNjo0M1rOG3FF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoyNTowNFrOG9-lDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODI5MQ==", "bodyText": "isOnlyAtClauseInWholeJavadoc", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460408291", "createdAt": "2020-07-25T14:06:43Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at at-clause node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode atClause) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherAtClauseBefore(atClause)\n+                && !isOnlyAtClauseNothingElse(atClause)\n+                && insufficientConsecutiveNewlines(atClause)) {\n+            log(atClause.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    atClause.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherAtClauseBefore(DetailNode atClause) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    private static boolean isOnlyAtClauseNothingElse(DetailNode atClause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MTYxMw==", "bodyText": "done. also renamed AtClause to Tag based on below comment", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r467641613", "createdAt": "2020-08-09T23:25:04Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at at-clause node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode atClause) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherAtClauseBefore(atClause)\n+                && !isOnlyAtClauseNothingElse(atClause)\n+                && insufficientConsecutiveNewlines(atClause)) {\n+            log(atClause.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    atClause.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherAtClauseBefore(DetailNode atClause) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(atClause);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    private static boolean isOnlyAtClauseNothingElse(DetailNode atClause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODI5MQ=="}, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY2NzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDoxMzoyMFrOG3FH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoyNjoxMlrOG9-ljg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc4OA==", "bodyText": "please rename all atClause to tag in method names also.\nInternally we call it tag https://checkstyle.sourceforge.io/apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html#JAVADOC_TAG , so implementation should use same terminology.\nI will review later if we need to change name Check  of Check, it is could be more user friendly, I need to refresh my mind on when at-clause is better to use.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460408788", "createdAt": "2020-07-25T14:13:20Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at at-clause node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode atClause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMDU4Mg==", "bodyText": "unfortunately name of Check need to changed, please read #6192 (comment) for more details.\nnew name RequireEmptyLineBeforeBlockTagsGroupCheck.java", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r460410582", "createdAt": "2020-07-25T14:34:38Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at at-clause node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode atClause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc4OA=="}, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MTc0Mg==", "bodyText": "Ok. I renamed all the classes to follow RequireEmptyLineBeforeBlockTagsGroup. I also grepped for all occurrences of atclause, at-clause, and at clause and replaced it with tag to keep it consistent.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r467641742", "createdAt": "2020-08-09T23:26:12Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeAtClauseBlockCheck.java", "diffHunk": "@@ -0,0 +1,197 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the at-clauses block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeAtClauseBlock&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the at-clause,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other at-clauses like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.35\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeAtClauseBlockCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes an at-clause in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC\n+     * \\\n+     *  -- NEWLINE\n+     *  -- LEADING_ASTERISK\n+     *  -- WS\n+     *  -- JAVADOC_TAG\n+     * </pre>\n+     */\n+    private static final int NUM_OF_SIBLINGS_BEFORE_ONLY_JAVADOC_TAG = 3;\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the at clause.\n+     *\n+     * @param atClause the at at-clause node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode atClause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc4OA=="}, "originalCommit": {"oid": "9fe81cbc338289b6f8dc5733d0fd960c809cb984"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQzNTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0MjozN1rOG_kiKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTowMzozMFrOHBLeQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjA0Mg==", "bodyText": "lets do not use \"clause\" at all.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r469312042", "createdAt": "2020-08-12T14:42:37Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentClause != null) {\n+            previousNodeTypes.add(currentClause.getType());\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param tagNode the tagNode to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the tagNode.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode tagNode) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9644dc435a99d57bdf65fb6a907693b2c1629b07"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5ODU5Mw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r470998593", "createdAt": "2020-08-15T15:03:30Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentClause != null) {\n+            previousNodeTypes.add(currentClause.getType());\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param tagNode the tagNode to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the tagNode.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode tagNode) {\n+        int count = 0;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjA0Mg=="}, "originalCommit": {"oid": "9644dc435a99d57bdf65fb6a907693b2c1629b07"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQzNjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0Mjo0OVrOG_kisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTowMzozNFrOHBLeTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjE3OQ==", "bodyText": "lets do not use \"clause\" at all.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r469312179", "createdAt": "2020-08-12T14:42:49Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9644dc435a99d57bdf65fb6a907693b2c1629b07"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5ODYwNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r470998605", "createdAt": "2020-08-15T15:03:34Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentClause != null) {\n+            if (currentClause.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentClause = JavadocUtil.getPreviousSibling(currentClause);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjE3OQ=="}, "originalCommit": {"oid": "9644dc435a99d57bdf65fb6a907693b2c1629b07"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQzNjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0MzowMFrOG_kjHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTowMzozN1rOHBLeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjI4NQ==", "bodyText": "lets do not use \"clause\" at all.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r469312285", "createdAt": "2020-08-12T14:43:00Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9644dc435a99d57bdf65fb6a907693b2c1629b07"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5ODYwNw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r470998607", "createdAt": "2020-08-15T15:03:37Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentClause = JavadocUtil.getPreviousSibling(tagNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjI4NQ=="}, "originalCommit": {"oid": "9644dc435a99d57bdf65fb6a907693b2c1629b07"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTE5MzUyOnYy", "diffSide": "RIGHT", "path": "config/checkstyle_checks.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzozMzo1NFrOHB-QAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMTo0MFrOHFJg8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMDUzMA==", "bodyText": "shouldn't tag be singular?", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471830530", "createdAt": "2020-08-17T23:33:54Z", "author": {"login": "rnveach"}, "path": "config/checkstyle_checks.xml", "diffHunk": "@@ -545,6 +545,7 @@\n     <module name=\"SingleLineJavadoc\"/>\n     <module name=\"WriteTag\"/>\n     <module name=\"SummaryJavadoc\"/>\n+    <module name=\"RequireEmptyLineBeforeBlockTagsGroup\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDgxNg==", "bodyText": "I case insensitive searched for TagsGroup and replaced with TagGroup.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160816", "createdAt": "2020-08-23T02:31:40Z", "author": {"login": "josephmate"}, "path": "config/checkstyle_checks.xml", "diffHunk": "@@ -545,6 +545,7 @@\n     <module name=\"SingleLineJavadoc\"/>\n     <module name=\"WriteTag\"/>\n     <module name=\"SummaryJavadoc\"/>\n+    <module name=\"RequireEmptyLineBeforeBlockTagsGroup\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMDUzMA=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIwOTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo0MTo0MFrOHB-Y9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjozOTowNVrOHFOUcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMjgyMg==", "bodyText": "If we remove variation 1, won't 2 always match? If we have to match the entire line or up to the asterisk, isn't it fast to check a size of 2 and the last 2 items are the ones we want?", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471832822", "createdAt": "2020-08-17T23:41:40Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDgzOA==", "bodyText": "This one is not done. It requires a response.\nI need to check for\n     * JAVADOC[3x0]\n     * |--NEWLINE[3x0] : [\\n]\n     * |--LEADING_ASTERISK[4x0] : [ *]\n     * |--WS[4x2] : [ ]\n     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n\nand\n     * JAVADOC[3x0]\n     * |--NEWLINE[3x0] : [\\n]\n     * |--LEADING_ASTERISK[4x0] : [ *]\n     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n\nsize of 2 won't match case 1. I could replace variation 1 with first element is WS and last 2 elements are variation 2.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160838", "createdAt": "2020-08-23T02:31:46Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMjgyMg=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTUzOQ==", "bodyText": "I am marking this resolved, as I can't think of another way right now.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475239539", "createdAt": "2020-08-23T16:39:05Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMjgyMg=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIxMDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo0MjoxOVrOHB-ZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMTo1MVrOHFJhBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMzAzNg==", "bodyText": "boolean methods should start with something like is, has, etc...", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471833036", "createdAt": "2020-08-17T23:42:19Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            previousNodeTypes.add(currentNode.getType());\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param tagNode the tagNode to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the tagNode.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode tagNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDgzOQ==", "bodyText": "done. renamed to hasInsufficientConsecutiveNewlines.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160839", "createdAt": "2020-08-23T02:31:51Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            previousNodeTypes.add(currentNode.getType());\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.\n+     *\n+     * @param tagNode the tagNode to check if there are sufficient empty lines before it.\n+     * @return true if there are enough empty lines before the tagNode.\n+     */\n+    private static boolean insufficientConsecutiveNewlines(DetailNode tagNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMzAzNg=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIxNTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo0NDo0OFrOHB-cpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjoyNToyNVrOHFOPWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMzc2Ng==", "bodyText": "First sentence of the javadoc is the most important and says what it is doing for the user calling it. Javadoc printers will only show it for summaries. First sentence is pretty long and 2nd and 3rd still say what its doing. Can we redo the first sentence so it gives a clear informaition and leave further sentences to be implementation specific?", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471833766", "createdAt": "2020-08-17T23:44:48Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            previousNodeTypes.add(currentNode.getType());\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDg0NA==", "bodyText": "done. Returns true when there are not enough empty lines before the provided tagNode.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160844", "createdAt": "2020-08-23T02:31:56Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            previousNodeTypes.add(currentNode.getType());\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMzc2Ng=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzODIzNQ==", "bodyText": "This i fine but I would try to avoid duplicating what the return statement will say, otherwise what is the purpose of having 2 places say the same thing.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475238235", "createdAt": "2020-08-23T16:25:25Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--WS[4x2] : [ ]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * Or it can also look like:\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--NEWLINE[3x0] : [\\n]\n+     * |--LEADING_ASTERISK[4x0] : [ *]\n+     * |--JAVADOC_TAG[4x3] : [@param T The bar.\\n ]\n+     * </pre>\n+     * We do not include the variation\n+     * <pre>\n+     *  /**&#64;param noSpace there is no space here\n+     * </pre>\n+     * which results in the tree\n+     * <pre>\n+     * JAVADOC[3x0]\n+     * |--JAVADOC_TAG[4x3] : [@param noSpace there is no space here\\n ]\n+     * </pre>\n+     * because this one is invalid. We must recommend placing a blank line to separate &#64;param\n+     * from the first javadoc asterisks.\n+     *\n+     * @param tagNode the at tag node to check if there is nothing before it.\n+     * @return true if there no text before the tagNode.\n+     */\n+    private static boolean isOnlyTagInWholeJavadoc(DetailNode tagNode) {\n+        final List<Integer> previousNodeTypes = new ArrayList<>();\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            previousNodeTypes.add(currentNode.getType());\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return ONLY_TAG_VARIATION_1.equals(previousNodeTypes)\n+                || ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+    }\n+\n+    /**\n+     * Iterates through the previous siblings of the tagNode looking for empty lines until\n+     * there are no more siblings or it hits something other than asterisk, whitespace or newline.\n+     * If it finds at least one empty line, return true. Return false otherwise.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMzc2Ng=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIxODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo0NjoxMVrOHB-eQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjoyNjowNFrOHFOPpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDE3OA==", "bodyText": "same.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471834178", "createdAt": "2020-08-17T23:46:11Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDg0Ng==", "bodyText": "done. Returns true when there are is only whitespace and asterisks before the provided tagNode.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160846", "createdAt": "2020-08-23T02:32:02Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDE3OA=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzODMwOQ==", "bodyText": "same.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475238309", "createdAt": "2020-08-23T16:26:04Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {\n+        boolean found = false;\n+        DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode);\n+        while (currentNode != null) {\n+            if (currentNode.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n+                found = true;\n+                break;\n+            }\n+            currentNode = JavadocUtil.getPreviousSibling(currentNode);\n+        }\n+        return found;\n+    }\n+\n+    /**\n+     * When javadoc has only a javadoc tag like {@literal @} in it, the JAVADOC_TAG in a JAVADOC\n+     * detail node will always have 2 or 3 siblings before it. The parse tree looks like:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDE3OA=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIxOTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo0Njo0NVrOHB-e6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMjowOVrOHFJhGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDM0Nw==", "bodyText": "@romani Shouldn't this method be required to have a javadoc?", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471834347", "createdAt": "2020-08-17T23:46:45Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNTY1OA==", "bodyText": "It is strange that our Checkstyle config is not barking on this.\nI am not a fan of javadoc on non public methods, but our codebase is crazy at on this point.\nI see that we do \n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java\n    \n    \n         Line 526\n      in\n      57605ac\n    \n    \n    \n    \n\n        \n          \n           private static boolean isInterfaceDeclaration(DetailAST variableDefAst) { \n        \n    \n  \n\n on private methods.\nLet's do doc here too", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471905658", "createdAt": "2020-08-18T04:24:54Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDM0Nw=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyMDAyMw==", "bodyText": "I started an issue as this is why I pointed it out, all methods should have a javadoc.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r472120023", "createdAt": "2020-08-18T11:53:13Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDM0Nw=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDg1Nw==", "bodyText": "done.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160857", "createdAt": "2020-08-23T02:32:09Z", "author": {"login": "josephmate"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/RequireEmptyLineBeforeBlockTagsGroupCheck.java", "diffHunk": "@@ -0,0 +1,243 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that one blank line before the tag block if it is present in Javadoc.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">\n+ * Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RequireEmptyLineBeforeBlockTagsGroup&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * By default, the check will report a violation if there is no blank line before the tag block,\n+ * like in the example below.\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * testMethod's javadoc.\n+ *  * &#64;return something (violation)\n+ *  *&#47;\n+ * public boolean testMethod() {\n+ *     return false;\n+ * }\n+ * </pre>\n+ * <p>\n+ *  Valid javadoc should have a blank line separating the parameters, return, throw, or\n+ *  other tags like in the example below.\n+ *  </p>\n+ *  <pre>\n+ *  &#47;**\n+ *  * testMethod's javadoc.\n+ *  *\n+ *  * &#64;param firstParam\n+ *  * &#64;return something\n+ *  *&#47;\n+ *  public boolean testMethod(int firstParam) {\n+ *      return false;\n+ *  }\n+ *  </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.tag.line.before}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class RequireEmptyLineBeforeBlockTagsGroupCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * The key in \"messages.properties\" for the message that describes a tag in javadoc\n+     * requiring an empty line before it.\n+     */\n+    public static final String MSG_JAVADOC_TAG_LINE_BEFORE = \"javadoc.tag.line.before\";\n+\n+    /**\n+     * Case when space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   * &#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_1 = Arrays.asList(\n+            JavadocTokenTypes.WS,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    /**\n+     * Case when no space separates the tag and the asterisk like in the below example.\n+     * <pre>\n+     *  /**\n+     *   *&#64;param noSpace there is no space here\n+     * </pre>\n+     */\n+    private static final List<Integer> ONLY_TAG_VARIATION_2 = Arrays.asList(\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+            JavadocTokenTypes.NEWLINE);\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC_TAG,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    /**\n+     * Logs when there is no empty line before the tag.\n+     *\n+     * @param tagNode the at tag node to check for an empty space before it.\n+     */\n+    @Override\n+    public void visitJavadocToken(DetailNode tagNode) {\n+        // No need to filter token because overridden getDefaultJavadocTokens ensures that we only\n+        // receive JAVADOC_TAG DetailNode.\n+        if (!isAnotherTagBefore(tagNode)\n+                && !isOnlyTagInWholeJavadoc(tagNode)\n+                && insufficientConsecutiveNewlines(tagNode)) {\n+            log(tagNode.getLineNumber(),\n+                    MSG_JAVADOC_TAG_LINE_BEFORE,\n+                    tagNode.getChildren()[0].getText());\n+        }\n+    }\n+\n+    private static boolean isAnotherTagBefore(DetailNode tagNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDM0Nw=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIyMzI5OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/requireemptylinebeforeblocktagsgroup/InputRequireEmptyLineBeforeBlockTagsGroupCorrect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo0ODo0NlrOHB-hBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMjoxNFrOHFJhHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDg4Ng==", "bodyText": "Add example where previous line is empty, but it also has no *.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471834886", "createdAt": "2020-08-17T23:48:46Z", "author": {"login": "rnveach"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/requireemptylinebeforeblocktagsgroup/InputRequireEmptyLineBeforeBlockTagsGroupCorrect.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.requireemptylinebeforeblocktagsgroup;\n+\n+/**\n+ * Config: default\n+ * Some Javadoc.\n+ *\n+ * @since 8.35 // ok\n+ */\n+class InputRequireEmptyLineBeforeBlockTagsGroupCorrect {\n+\n+    /**\n+     * This javadoc does not have a tag. There should be no violations.\n+     */\n+    public static final byte NO_TAG = 0;\n+\n+    /**\n+     * This javadoc does has one tag, with an empty line. There should be no violations.\n+     *\n+     * @since 8.0 // ok\n+     */\n+    public static final byte ONE_TAG = 0;\n+\n+    /**\n+     * This javadoc has multiple tags, with an empty line before the. There should be no\n+     * violations.\n+     *\n+     * @param input this is the first tag. // ok", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDg2Mg==", "bodyText": "done.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160862", "createdAt": "2020-08-23T02:32:14Z", "author": {"login": "josephmate"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/requireemptylinebeforeblocktagsgroup/InputRequireEmptyLineBeforeBlockTagsGroupCorrect.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.requireemptylinebeforeblocktagsgroup;\n+\n+/**\n+ * Config: default\n+ * Some Javadoc.\n+ *\n+ * @since 8.35 // ok\n+ */\n+class InputRequireEmptyLineBeforeBlockTagsGroupCorrect {\n+\n+    /**\n+     * This javadoc does not have a tag. There should be no violations.\n+     */\n+    public static final byte NO_TAG = 0;\n+\n+    /**\n+     * This javadoc does has one tag, with an empty line. There should be no violations.\n+     *\n+     * @since 8.0 // ok\n+     */\n+    public static final byte ONE_TAG = 0;\n+\n+    /**\n+     * This javadoc has multiple tags, with an empty line before the. There should be no\n+     * violations.\n+     *\n+     * @param input this is the first tag. // ok", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNDg4Ng=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIyOTI1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/requireemptylinebeforeblocktagsgroup/InputRequireEmptyLineBeforeBlockTagsGroupCorrect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1MTozOVrOHB-kXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMjo1NFrOHFJhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNTc0Mw==", "bodyText": "Show some form of example that has 2 blank lines.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471835743", "createdAt": "2020-08-17T23:51:39Z", "author": {"login": "rnveach"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/requireemptylinebeforeblocktagsgroup/InputRequireEmptyLineBeforeBlockTagsGroupCorrect.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.requireemptylinebeforeblocktagsgroup;\n+\n+/**\n+ * Config: default\n+ * Some Javadoc.\n+ *\n+ * @since 8.35 // ok\n+ */\n+class InputRequireEmptyLineBeforeBlockTagsGroupCorrect {\n+\n+    /**\n+     * This javadoc does not have a tag. There should be no violations.\n+     */\n+    public static final byte NO_TAG = 0;\n+\n+    /**\n+     * This javadoc does has one tag, with an empty line. There should be no violations.\n+     *\n+     * @since 8.0 // ok", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDkwMg==", "bodyText": "done.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160902", "createdAt": "2020-08-23T02:32:54Z", "author": {"login": "josephmate"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/requireemptylinebeforeblocktagsgroup/InputRequireEmptyLineBeforeBlockTagsGroupCorrect.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.requireemptylinebeforeblocktagsgroup;\n+\n+/**\n+ * Config: default\n+ * Some Javadoc.\n+ *\n+ * @since 8.35 // ok\n+ */\n+class InputRequireEmptyLineBeforeBlockTagsGroupCorrect {\n+\n+    /**\n+     * This javadoc does not have a tag. There should be no violations.\n+     */\n+    public static final byte NO_TAG = 0;\n+\n+    /**\n+     * This javadoc does has one tag, with an empty line. There should be no violations.\n+     *\n+     * @since 8.0 // ok", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNTc0Mw=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIzMTY3OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_javadoc.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1Mjo1OFrOHB-ltg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMjo1OFrOHFJhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjA4Ng==", "bodyText": "tag block => block tag.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471836086", "createdAt": "2020-08-17T23:52:58Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -2922,6 +2921,128 @@ class DatabaseConfiguration {}\n       </subsection>\n     </section>\n \n+    <section name=\"RequireEmptyLineBeforeBlockTagsGroup\">\n+      <p>Since Checkstyle 8.36</p>\n+      <subsection name=\"Description\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Description\">\n+        <p>\n+          Checks that one blank line before the tag block if it is present in Javadoc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDkwNw==", "bodyText": "I case insensitive searched for tag block and replaced with block tag.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160907", "createdAt": "2020-08-23T02:32:58Z", "author": {"login": "josephmate"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -2922,6 +2921,128 @@ class DatabaseConfiguration {}\n       </subsection>\n     </section>\n \n+    <section name=\"RequireEmptyLineBeforeBlockTagsGroup\">\n+      <p>Since Checkstyle 8.36</p>\n+      <subsection name=\"Description\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Description\">\n+        <p>\n+          Checks that one blank line before the tag block if it is present in Javadoc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjA4Ng=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIzMTg4OnYy", "diffSide": "RIGHT", "path": "src/xdocs/checks.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1MzowOFrOHB-l2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMzowMlrOHFJhTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjEyMw==", "bodyText": "Same.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471836123", "createdAt": "2020-08-17T23:53:08Z", "author": {"login": "rnveach"}, "path": "src/xdocs/checks.xml", "diffHunk": "@@ -816,6 +816,13 @@\n               Checks that a Javadoc block can fit in a single line and doesn't contain\n               at-clauses.</td>\n           </tr>\n+          <tr>\n+            <td><a href=\"config_javadoc.html#RequireEmptyLineBeforeBlockTagsGroup\">\n+              RequireEmptyLineBeforeBlockTagsGroup</a></td>\n+            <td>\n+              Checks that one blank line before the tag block if it is present in Javadoc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDkxMA==", "bodyText": "I case insensitive searched for tag block and replaced with block tag.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160910", "createdAt": "2020-08-23T02:33:02Z", "author": {"login": "josephmate"}, "path": "src/xdocs/checks.xml", "diffHunk": "@@ -816,6 +816,13 @@\n               Checks that a Javadoc block can fit in a single line and doesn't contain\n               at-clauses.</td>\n           </tr>\n+          <tr>\n+            <td><a href=\"config_javadoc.html#RequireEmptyLineBeforeBlockTagsGroup\">\n+              RequireEmptyLineBeforeBlockTagsGroup</a></td>\n+            <td>\n+              Checks that one blank line before the tag block if it is present in Javadoc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjEyMw=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIzMjM5OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_javadoc.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1MzoyOFrOHB-mLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjoyOTozOFrOHFORAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjIwNg==", "bodyText": "Missing the 6.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471836206", "createdAt": "2020-08-17T23:53:28Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -2922,6 +2921,128 @@ class DatabaseConfiguration {}\n       </subsection>\n     </section>\n \n+    <section name=\"RequireEmptyLineBeforeBlockTagsGroup\">\n+      <p>Since Checkstyle 8.36</p>\n+      <subsection name=\"Description\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Description\">\n+        <p>\n+          Checks that one blank line before the tag block if it is present in Javadoc.\n+        </p>\n+      </subsection>\n+      <subsection name=\"Properties\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>violateExecutionOnNonTightHtml</td>\n+              <td>\n+                Control when to print violations if the Javadoc being examined by this check\n+                violates the tight html rules defined at\n+                <a href=\"writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+              </td>\n+              <td><a href=\"property_types.html#boolean\">boolean</a></td>\n+              <td><code>false</code></td>\n+              <td>8.3</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDkxNQ==", "bodyText": "done.\nHowever, This is an inherited field. All other checks that extend from AbstractJavadocCheck also have 8.3 for this field. I'm not sure which it should be.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475160915", "createdAt": "2020-08-23T02:33:14Z", "author": {"login": "josephmate"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -2922,6 +2921,128 @@ class DatabaseConfiguration {}\n       </subsection>\n     </section>\n \n+    <section name=\"RequireEmptyLineBeforeBlockTagsGroup\">\n+      <p>Since Checkstyle 8.36</p>\n+      <subsection name=\"Description\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Description\">\n+        <p>\n+          Checks that one blank line before the tag block if it is present in Javadoc.\n+        </p>\n+      </subsection>\n+      <subsection name=\"Properties\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>violateExecutionOnNonTightHtml</td>\n+              <td>\n+                Control when to print violations if the Javadoc being examined by this check\n+                violates the tight html rules defined at\n+                <a href=\"writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+              </td>\n+              <td><a href=\"property_types.html#boolean\">boolean</a></td>\n+              <td><code>false</code></td>\n+              <td>8.3</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjIwNg=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzODY1OA==", "bodyText": "The version is for when the property is introduced into the check. The check isn't being created until 8.36, so it makes no sense the property has a version before the field.\nThe reason why this is for the other checks is most likely because that is when the property in the AbstractJavadocCheck was added, hence adding it to all checks that inherited that class.", "url": "https://github.com/checkstyle/checkstyle/pull/7932#discussion_r475238658", "createdAt": "2020-08-23T16:29:38Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -2922,6 +2921,128 @@ class DatabaseConfiguration {}\n       </subsection>\n     </section>\n \n+    <section name=\"RequireEmptyLineBeforeBlockTagsGroup\">\n+      <p>Since Checkstyle 8.36</p>\n+      <subsection name=\"Description\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Description\">\n+        <p>\n+          Checks that one blank line before the tag block if it is present in Javadoc.\n+        </p>\n+      </subsection>\n+      <subsection name=\"Properties\" id=\"RequireEmptyLineBeforeBlockTagsGroup_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>violateExecutionOnNonTightHtml</td>\n+              <td>\n+                Control when to print violations if the Javadoc being examined by this check\n+                violates the tight html rules defined at\n+                <a href=\"writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+              </td>\n+              <td><a href=\"property_types.html#boolean\">boolean</a></td>\n+              <td><code>false</code></td>\n+              <td>8.3</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNjIwNg=="}, "originalCommit": {"oid": "8b1379921be33ba135fa5ac9299174e426854fc8"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1259, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}