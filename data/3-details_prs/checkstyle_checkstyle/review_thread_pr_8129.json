{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NjEyODAy", "number": 8129, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNzozODo1NFrODzV8fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozNDoxNVrOD0qQ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTYzNTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNzozODo1NFrOGHzypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNzo1ODozOVrOGH0BLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MTc2NA==", "bodyText": "please clean up this grammar mistake: ... cases are not ...", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r410841764", "createdAt": "2020-04-19T07:38:54Z", "author": {"login": "muhlba91"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,17 +101,77 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis\n+ *     }\n+ *\n+ *     for ( int i = 0; i &lt; x; i++ ) {  // OK\n+ *     }\n+ *   }\n+ *\n+ * }\n+ *\n+ * class Bar extends Foo {\n+ *\n+ *   public Bar() {\n+ *     super(1 );  // violation, no space after left parenthesis\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * The following cases not checked:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84f2eb67548b4aa7906b0e7bfe62f811197c133"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NTQ4NQ==", "bodyText": "Updated", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r410845485", "createdAt": "2020-04-19T07:58:39Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,17 +101,77 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis\n+ *     }\n+ *\n+ *     for ( int i = 0; i &lt; x; i++ ) {  // OK\n+ *     }\n+ *   }\n+ *\n+ * }\n+ *\n+ * class Bar extends Foo {\n+ *\n+ *   public Bar() {\n+ *     super(1 );  // violation, no space after left parenthesis\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * The following cases not checked:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MTc2NA=="}, "originalCommit": {"oid": "c84f2eb67548b4aa7906b0e7bfe62f811197c133"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ5ODcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo0NToxOFrOGIJxWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo1MDoyMlrOGIVcyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTg4MQ==", "bodyText": "// violation, space before right parenthesis\nthere are 3 example", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411201881", "createdAt": "2020-04-20T08:45:18Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwODE1Mg==", "bodyText": "I didn't understand this one. Could you please explain it again?", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411208152", "createdAt": "2020-04-20T08:54:59Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTg4MQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MjA4OQ==", "bodyText": "it is not clear. 3 violations for me look exactly the same", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411362089", "createdAt": "2020-04-20T13:07:58Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTg4MQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTE5OQ==", "bodyText": "I see 3 same example of violations. They all are the same for me", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411371199", "createdAt": "2020-04-20T13:20:51Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTg4MQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NDUzOA==", "bodyText": "I can't quite understand what you mean by \"same\" here.\nFirst is for constructor definition,\nsecond is for method call,\nthird is method definition\nfourth one is switch statement.", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411384538", "createdAt": "2020-04-20T13:39:13Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTg4MQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5MzIyNw==", "bodyText": "There are 4 examples", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411393227", "createdAt": "2020-04-20T13:50:22Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMTg4MQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ5OTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo0NTozNFrOGIJx7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyNDowNVrOGJAkVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjAzMQ==", "bodyText": "right  -> left", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411202031", "createdAt": "2020-04-20T08:45:34Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * The following cases not checked:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNzcwNQ==", "bodyText": "This example is of space padding. That is why I wrote no space before right parenthesis", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411207705", "createdAt": "2020-04-20T08:54:17Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * The following cases not checked:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjAzMQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5OTY3MQ==", "bodyText": "Please add examples for correct code to show difference (one more catch block)", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r412099671", "createdAt": "2020-04-21T11:24:05Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * The following cases not checked:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjAzMQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDUwMjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo0NjoxMFrOGIJzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyMzo0N1rOGJAjnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjQ0NQ==", "bodyText": "no space after left parenthesis\n???", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411202445", "createdAt": "2020-04-20T08:46:10Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * The following cases not checked:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis\n+ *     }\n+ *\n+ *     for ( int i = 0; i &lt; x; i++ ) {  // OK\n+ *     }\n+ *   }\n+ *\n+ * }\n+ *\n+ * class Bar extends Foo {\n+ *\n+ *   public Bar() {\n+ *     super(1 );  // violation, no space after left parenthesis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNzE3OQ==", "bodyText": "This example, and the example above display the space padding... That is why I wrote no space in both of them", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r411207179", "createdAt": "2020-04-20T08:53:27Z", "author": {"login": "sulkykookie"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * The following cases not checked:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis\n+ *     }\n+ *\n+ *     for ( int i = 0; i &lt; x; i++ ) {  // OK\n+ *     }\n+ *   }\n+ *\n+ * }\n+ *\n+ * class Bar extends Foo {\n+ *\n+ *   public Bar() {\n+ *     super(1 );  // violation, no space after left parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjQ0NQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5OTQ4Nw==", "bodyText": "it is not clear (at least for me) what causes violation.\nPlease add examples for correct code to show difference", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r412099487", "createdAt": "2020-04-21T11:23:47Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,78 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public Test(int y ) {  // violation, space before right parenthesis\n+ *   }\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch(y ) {  // violation, space before right parenthesis\n+ *       default:\n+ *         break;\n+ *     }\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n  * To configure the check to require spaces for the\n  * parentheses of constructor, method, and super constructor calls:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;ParenPad&quot;&gt;\n- *   &lt;property name=&quot;tokens&quot; value=&quot;CTOR_CALL, METHOD_CALL,\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_FOR, LITERAL_CATCH,\n  *     SUPER_CTOR_CALL&quot;/&gt;\n  *   &lt;property name=&quot;option&quot; value=&quot;space&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * The following cases not checked:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   int x;\n+ *\n+ *   public Foo(int n) {\n+ *   }\n+ *\n+ *   public void fun() {\n+ *     try {\n+ *       System.out.println(x);\n+ *     } catch( Exception e) {  // violation, no space before right parenthesis\n+ *     }\n+ *\n+ *     for ( int i = 0; i &lt; x; i++ ) {  // OK\n+ *     }\n+ *   }\n+ *\n+ * }\n+ *\n+ * class Bar extends Foo {\n+ *\n+ *   public Bar() {\n+ *     super(1 );  // violation, no space after left parenthesis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMjQ0NQ=="}, "originalCommit": {"oid": "8ef13bdba72fc3fd31bbbb09559a96de0a549d59"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDU0NzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyODo0OFrOGJAvqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyODo0OFrOGJAvqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMjU3MA==", "bodyText": "spaces before and after parenthesis\nplease specify what parens you mean", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r412102570", "createdAt": "2020-04-21T11:28:48Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,75 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k > 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch( y ) {  // violation, spaces before and after parenthesis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec788b261c6593aad4fe64a7066c82489b47c728"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTQ1MDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozNDoxNVrOGJs9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozNDoxNVrOGJs9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyNzAwOQ==", "bodyText": "please split it to 2 different examples + correct code example", "url": "https://github.com/checkstyle/checkstyle/pull/8129#discussion_r412827009", "createdAt": "2020-04-22T09:34:15Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "diffHunk": "@@ -101,18 +101,84 @@\n  * &lt;module name=&quot;ParenPad&quot;/&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Foo {\n+ *\n+ *   public void foo() {  // OK\n+ *     bar( 1);  // violation, space after left parenthesis\n+ *   }\n+ *\n+ *   public void bar(int k ) {  // violation, space before right parenthesis\n+ *     while (k &gt; 0) {  // OK\n+ *     }\n+ *\n+ *     Test obj = new Test(k);  // OK\n+ *   }\n+ *\n+ *   public void fun() {  // OK\n+ *     switch( y ) {  // 2 violations, space after right parenthesis and\n+ *                    // space before right parenthesis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599b5bd05b745ddf060ed35248cc1da0bf444056"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 923, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}