{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjcyMDI4", "number": 9008, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjowMjozOFrOE9S2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzo1MDowNVrOFJUBoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzA3NTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjowMjozOFrOH56Huw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMTo0NDoxOVrOH7YkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ4MzEzMQ==", "bodyText": "what is acc ?\nplease use full name.", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r530483131", "createdAt": "2020-11-25T16:02:38Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n+                    && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n+                log(ast, MSG_LINE_NEW, ast.getText());\n             }\n             else if (option == WrapOption.EOL\n-                    && CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(ast, MSG_LINE_PREVIOUS, text);\n+                    && !TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n+                log(ast, MSG_LINE_PREVIOUS, ast.getText());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Filters some false tokens that this check should ignore.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} for all nodes this check should validate\n+     */\n+    private static boolean isOperatorNode(DetailAST node) {\n+        final boolean result;\n+        if (node.getType() == TokenTypes.COLON) {\n+            result = !isColonFromLabel(node);\n+        }\n+        else if (node.getType() == TokenTypes.STAR) {\n+            // Unlike the import statement, the multiply operator always has children\n+            result = node.hasChildren();\n+        }\n+        else {\n+            result = true;\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Checks if a node is {@link TokenTypes#COLON} from a label, switch case of default.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} if node matches\n+     */\n+    private static boolean isColonFromLabel(DetailAST node) {\n+        return TokenUtil.isOfType(node.getParent(), TokenTypes.LABELED_STAT,\n+            TokenTypes.LITERAL_CASE, TokenTypes.LITERAL_DEFAULT);\n+    }\n+\n+    /**\n+     * Checks if a node is {@link TokenTypes#ASSIGN} to a variable or resource.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} if node matches\n+     */\n+    private static boolean isAssignToVariable(DetailAST node) {\n+        return TokenUtil.isOfType(node.getParent(), TokenTypes.VARIABLE_DEF, TokenTypes.RESOURCE);\n+    }\n+\n+    /**\n+     * Returns the left neighbour of a binary operator. This is the rightmost\n+     * grandchild of the left child or sibling. For the assign operator the return value is\n+     * the variable name.\n+     *\n+     * @param node the binary operator\n+     * @return nearest node from left\n+     */\n+    private static DetailAST getLeftNode(DetailAST node) {\n+        DetailAST result;\n+        if (node.getFirstChild() == null || isAssignToVariable(node)) {\n+            result = node.getPreviousSibling();\n+        }\n+        else {\n+            result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n+        }\n+        while (result.getLastChild() != null) {\n+            result = result.getLastChild();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns the right neighbour of a binary operator. This is the leftmost\n+     * grandchild of the right child or sibling. For the ternary operator this\n+     * is the node between {@code ?} and {@code :} .\n+     *\n+     * @param node the binary operator\n+     * @return nearest node from right\n+     */\n+    private static DetailAST getRightNode(DetailAST node) {\n+        DetailAST result;\n+        if (node.getLastChild() == null) {\n+            result = node.getNextSibling();\n+        }\n+        else {\n+            final DetailAST rightNode;\n+            if (node.getType() == TokenTypes.QUESTION) {\n+                rightNode = node.findFirstToken(TokenTypes.COLON).getPreviousSibling();\n+            }\n+            else {\n+                rightNode = node.getLastChild();\n+            }\n+            result = adjustParens(rightNode, DetailAST::getPreviousSibling);\n+        }\n+\n+        // The ARRAY_INIT AST is confusing. It should be\n+        // ARRAY_INIT\n+        // |--LCURLY (first child)\n+        // `--RCURLY (last child)\n+        // but there is no LCURLY for ARRAY_INIT\n+        if (result.getType() != TokenTypes.ARRAY_INIT) {\n+            while (result.getFirstChild() != null) {\n+                result = result.getFirstChild();\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Finds matching parentheses among siblings. If the given node is not\n+     * {@link TokenTypes#LPAREN} nor {@link TokenTypes#RPAREN}, the method adjusts nothing.\n+     * This method is for handling case like {@code\n+     *   (condition && (condition\n+     *     || condition2 || condition3) && condition4\n+     *     && condition3)\n+     * }\n+     *\n+     * @param node the node to adjust\n+     * @param step the node transformer, should be {@link DetailAST#getPreviousSibling}\n+     *             or {@link DetailAST#getNextSibling}\n+     * @return adjusted node\n+     */\n+    private static DetailAST adjustParens(DetailAST node, UnaryOperator<DetailAST> step) {\n+        DetailAST result = node;\n+        int acc = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb53c5c14b18b943628c71752416d9575c477e15"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzMDYwOA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r532030608", "createdAt": "2020-11-28T11:44:19Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n+                    && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n+                log(ast, MSG_LINE_NEW, ast.getText());\n             }\n             else if (option == WrapOption.EOL\n-                    && CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(ast, MSG_LINE_PREVIOUS, text);\n+                    && !TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n+                log(ast, MSG_LINE_PREVIOUS, ast.getText());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Filters some false tokens that this check should ignore.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} for all nodes this check should validate\n+     */\n+    private static boolean isOperatorNode(DetailAST node) {\n+        final boolean result;\n+        if (node.getType() == TokenTypes.COLON) {\n+            result = !isColonFromLabel(node);\n+        }\n+        else if (node.getType() == TokenTypes.STAR) {\n+            // Unlike the import statement, the multiply operator always has children\n+            result = node.hasChildren();\n+        }\n+        else {\n+            result = true;\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Checks if a node is {@link TokenTypes#COLON} from a label, switch case of default.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} if node matches\n+     */\n+    private static boolean isColonFromLabel(DetailAST node) {\n+        return TokenUtil.isOfType(node.getParent(), TokenTypes.LABELED_STAT,\n+            TokenTypes.LITERAL_CASE, TokenTypes.LITERAL_DEFAULT);\n+    }\n+\n+    /**\n+     * Checks if a node is {@link TokenTypes#ASSIGN} to a variable or resource.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} if node matches\n+     */\n+    private static boolean isAssignToVariable(DetailAST node) {\n+        return TokenUtil.isOfType(node.getParent(), TokenTypes.VARIABLE_DEF, TokenTypes.RESOURCE);\n+    }\n+\n+    /**\n+     * Returns the left neighbour of a binary operator. This is the rightmost\n+     * grandchild of the left child or sibling. For the assign operator the return value is\n+     * the variable name.\n+     *\n+     * @param node the binary operator\n+     * @return nearest node from left\n+     */\n+    private static DetailAST getLeftNode(DetailAST node) {\n+        DetailAST result;\n+        if (node.getFirstChild() == null || isAssignToVariable(node)) {\n+            result = node.getPreviousSibling();\n+        }\n+        else {\n+            result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n+        }\n+        while (result.getLastChild() != null) {\n+            result = result.getLastChild();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns the right neighbour of a binary operator. This is the leftmost\n+     * grandchild of the right child or sibling. For the ternary operator this\n+     * is the node between {@code ?} and {@code :} .\n+     *\n+     * @param node the binary operator\n+     * @return nearest node from right\n+     */\n+    private static DetailAST getRightNode(DetailAST node) {\n+        DetailAST result;\n+        if (node.getLastChild() == null) {\n+            result = node.getNextSibling();\n+        }\n+        else {\n+            final DetailAST rightNode;\n+            if (node.getType() == TokenTypes.QUESTION) {\n+                rightNode = node.findFirstToken(TokenTypes.COLON).getPreviousSibling();\n+            }\n+            else {\n+                rightNode = node.getLastChild();\n+            }\n+            result = adjustParens(rightNode, DetailAST::getPreviousSibling);\n+        }\n+\n+        // The ARRAY_INIT AST is confusing. It should be\n+        // ARRAY_INIT\n+        // |--LCURLY (first child)\n+        // `--RCURLY (last child)\n+        // but there is no LCURLY for ARRAY_INIT\n+        if (result.getType() != TokenTypes.ARRAY_INIT) {\n+            while (result.getFirstChild() != null) {\n+                result = result.getFirstChild();\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Finds matching parentheses among siblings. If the given node is not\n+     * {@link TokenTypes#LPAREN} nor {@link TokenTypes#RPAREN}, the method adjusts nothing.\n+     * This method is for handling case like {@code\n+     *   (condition && (condition\n+     *     || condition2 || condition3) && condition4\n+     *     && condition3)\n+     * }\n+     *\n+     * @param node the node to adjust\n+     * @param step the node transformer, should be {@link DetailAST#getPreviousSibling}\n+     *             or {@link DetailAST#getNextSibling}\n+     * @return adjusted node\n+     */\n+    private static DetailAST adjustParens(DetailAST node, UnaryOperator<DetailAST> step) {\n+        DetailAST result = node;\n+        int acc = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ4MzEzMQ=="}, "originalCommit": {"oid": "bb53c5c14b18b943628c71752416d9575c477e15"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzA2MjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTozMjo0MlrOIKOVTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxOToxNzo0NlrOILS46Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MTUwMw==", "bodyText": "description of method is not same a name of method.\nshould we name method more abstract ... like isTargetNode", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r547591503", "createdAt": "2020-12-23T01:32:42Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n+                    && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n+                log(ast, MSG_LINE_NEW, ast.getText());\n             }\n             else if (option == WrapOption.EOL\n-                    && CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(ast, MSG_LINE_PREVIOUS, text);\n+                    && !TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n+                log(ast, MSG_LINE_PREVIOUS, ast.getText());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Filters some false tokens that this check should ignore.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} for all nodes this check should validate\n+     */\n+    private static boolean isOperatorNode(DetailAST node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcxNDcyOQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548714729", "createdAt": "2020-12-24T19:17:46Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n+                    && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n+                log(ast, MSG_LINE_NEW, ast.getText());\n             }\n             else if (option == WrapOption.EOL\n-                    && CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(ast, MSG_LINE_PREVIOUS, text);\n+                    && !TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n+                log(ast, MSG_LINE_PREVIOUS, ast.getText());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Filters some false tokens that this check should ignore.\n+     *\n+     * @param node the node to check\n+     * @return {@code true} for all nodes this check should validate\n+     */\n+    private static boolean isOperatorNode(DetailAST node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MTUwMw=="}, "originalCommit": {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzA2Njc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTozNToxMFrOIKOXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMjo0Mjo1OVrOILXGkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA==", "bodyText": "is it more readable form:\nif (isOperatorNode(ast)) {\n    if (option == WrapOption.NL) {\n        if (TokenUtil.areOnSameLine(ast, getLeftNode(ast))\n              && !TokenUtil.areOnSameLine(ast, getRightNode(ast))) {\n           log(ast, MSG_LINE_NEW, ast.getText());\n        }\n    }\n    else if (option == WrapOption.EOL) {\n      if (!TokenUtil.areOnSameLine(ast, getLeftNode(ast))) {\n        log(ast, MSG_LINE_PREVIOUS, ast.getText());\n      }\n    }\n}\n\n\nuser who debug certain option will not need to real long expressions at all.", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r547592114", "createdAt": "2020-12-23T01:35:10Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODY5NDY5OA==", "bodyText": "This lead to PMD violation https://pmd.github.io/latest/pmd_rules_vm_design.html#collapsibleifstatements\nMaybe it is possible to fool this rule with a switch.", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548694698", "createdAt": "2020-12-24T18:47:45Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA=="}, "originalCommit": {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODcxNDY0Ng==", "bodyText": "Upd: fixed with two additional methods", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548714646", "createdAt": "2020-12-24T19:17:37Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA=="}, "originalCommit": {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4Mzc2Mg==", "bodyText": "we can suppress Pmd on this case, it is normal that tools have false positives.\nwe should focus on what is good for reading.", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r548783762", "createdAt": "2020-12-25T02:42:59Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,150 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n-\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n+        if (isOperatorNode(ast)) {\n             if (option == WrapOption.NL\n-                    && !text.equals(currentLine.trim())\n-                    && CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(ast, MSG_LINE_NEW, text);\n+                    && TokenUtil.areOnSameLine(ast, getLeftNode(ast))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MjExNA=="}, "originalCommit": {"oid": "adc711a4755f76d8a17358d113019fff4e5ceaa0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzA5NjAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMzo1MDowNVrOILoA_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwODozNDoyMlrOILpYlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2MDg2MA==", "bodyText": "please make it like:\nif (option == WrapOption.NL && isNewLineModeViolation(ast)) {\nthe same method name update for other mode.", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r549060860", "createdAt": "2020-12-27T03:50:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,168 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n+        if (isTargetNode(ast)) {\n+            if (option == WrapOption.NL && isNewLineViolation(ast)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b370a84dfa2106d7f4018ab7486146211007347"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MzI4NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9008#discussion_r549083285", "createdAt": "2020-12-27T08:34:22Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "diffHunk": "@@ -302,28 +304,168 @@ public void setOption(String optionStr) {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        // we do not want to check colon for cases and defaults\n-        if (parent.getType() != TokenTypes.LITERAL_DEFAULT\n-                && parent.getType() != TokenTypes.LITERAL_CASE) {\n-            final String text = ast.getText();\n-            final int colNo = ast.getColumnNo();\n-            final int lineNo = ast.getLineNo();\n-            final String currentLine = getLine(lineNo - 1);\n+        if (isTargetNode(ast)) {\n+            if (option == WrapOption.NL && isNewLineViolation(ast)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA2MDg2MA=="}, "originalCommit": {"oid": "7b370a84dfa2106d7f4018ab7486146211007347"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}