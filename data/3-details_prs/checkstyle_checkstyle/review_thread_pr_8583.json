{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMTA0ODky", "number": 8583, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNToxM1rOEnEjWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzozOToxNlrOEndcKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA0NTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNToxM1rOHXdhiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MDo0NlrOHXeRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MzAxNg==", "bodyText": "methods? this check is only about fields.", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494363016", "createdAt": "2020-09-24T14:25:13Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NTI0Mw==", "bodyText": "This method is common for several checks, including MethodNameCheck. I added test case, report and PR title shows that this one is also fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494375243", "createdAt": "2020-09-24T14:40:46Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MzAxNg=="}, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA1OTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyODowNVrOHXdqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozODozMVrOHXg8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NTMxOA==", "bodyText": "please make it like\n                    modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;\n                     || ScopeUtil.isInAnnotationBlock(modifiers)\n                     || ScopeUtil.isInInterfaceBlock(modifiers)\n                       // interface methods can be private\n                     && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n\nit will be easier to read.", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494365318", "createdAt": "2020-09-24T14:28:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n+                    || ScopeUtil.isInAnnotationBlock(modifiers)\n+                    || modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxOTA0Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494419047", "createdAt": "2020-09-24T15:38:31Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n+                    || ScopeUtil.isInAnnotationBlock(modifiers)\n+                    || modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NTMxOA=="}, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA3NTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMToxNlrOHXd0YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozODoyNFrOHXg8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2Nzg0MA==", "bodyText": "final boolean isStaticFinal = \n            modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n                && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n            || ScopeUtil.isInAnnotationBlock(ast)\n            || ScopeUtil.isInInterfaceBlock(ast);\n\nto make it more visual priority of calculation", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494367840", "createdAt": "2020-09-24T14:31:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java", "diffHunk": "@@ -153,12 +153,11 @@ protected final boolean mustCheckName(DetailAST ast) {\n \n         final DetailAST modifiersAST =\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null;\n-        final boolean isFinal = modifiersAST.findFirstToken(TokenTypes.FINAL) != null;\n-\n-        if (isStatic && isFinal && shouldCheckInScope(modifiersAST)\n-                || ScopeUtil.isInAnnotationBlock(ast)\n-                || ScopeUtil.isInInterfaceBlock(ast)\n+        final boolean isStaticFinal = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n+            && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n+            || ScopeUtil.isInAnnotationBlock(ast)\n+            || ScopeUtil.isInInterfaceBlock(ast);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxODk1OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494418959", "createdAt": "2020-09-24T15:38:24Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java", "diffHunk": "@@ -153,12 +153,11 @@ protected final boolean mustCheckName(DetailAST ast) {\n \n         final DetailAST modifiersAST =\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null;\n-        final boolean isFinal = modifiersAST.findFirstToken(TokenTypes.FINAL) != null;\n-\n-        if (isStatic && isFinal && shouldCheckInScope(modifiersAST)\n-                || ScopeUtil.isInAnnotationBlock(ast)\n-                || ScopeUtil.isInInterfaceBlock(ast)\n+        final boolean isStaticFinal = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n+            && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n+            || ScopeUtil.isInAnnotationBlock(ast)\n+            || ScopeUtil.isInInterfaceBlock(ast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2Nzg0MA=="}, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA4MjIyOnYy", "diffSide": "RIGHT", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/methodname/InputMethodNamePrivateMethodsInInterfaces.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMjozMlrOHXd4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyOToxM1rOHXghbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2ODg0Nw==", "bodyText": "?\nAm I miss somethig ?\nhttps://checkstyle.sourceforge.io/config_naming.html#ConstantName\nit is about fields only.", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494368847", "createdAt": "2020-09-24T14:32:32Z", "author": {"login": "romani"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/methodname/InputMethodNamePrivateMethodsInInterfaces.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//non-compiled with javac: Compilable with Java9\n+package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\n+\n+/*\n+ * Config:\n+ * applyToPrivate = false\n+ */\n+public interface InputMethodNamePrivateMethodsInInterfaces {\n+\n+    private void PrivateMethod() {} // ok\n+\n+    private static void PrivateMethod2() {} // ok\n+\n+    default void DefaultMethod() { // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NjQ3MQ==", "bodyText": "MethodNameCheck giving false-positives as well on same thing, since they have common way to detect visibility. I fixed both checks.", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494376471", "createdAt": "2020-09-24T14:42:25Z", "author": {"login": "strkkk"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/methodname/InputMethodNamePrivateMethodsInInterfaces.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//non-compiled with javac: Compilable with Java9\n+package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\n+\n+/*\n+ * Config:\n+ * applyToPrivate = false\n+ */\n+public interface InputMethodNamePrivateMethodsInInterfaces {\n+\n+    private void PrivateMethod() {} // ok\n+\n+    private static void PrivateMethod2() {} // ok\n+\n+    default void DefaultMethod() { // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2ODg0Nw=="}, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMjE0Mw==", "bodyText": "Ok, my bad. Issue case focused me on one Check", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494412143", "createdAt": "2020-09-24T15:29:13Z", "author": {"login": "romani"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/methodname/InputMethodNamePrivateMethodsInInterfaces.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//non-compiled with javac: Compilable with Java9\n+package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\n+\n+/*\n+ * Config:\n+ * applyToPrivate = false\n+ */\n+public interface InputMethodNamePrivateMethodsInInterfaces {\n+\n+    private void PrivateMethod() {} // ok\n+\n+    private static void PrivateMethod2() {} // ok\n+\n+    default void DefaultMethod() { // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2ODg0Nw=="}, "originalCommit": {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODEyMjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzozOToxNlrOHYECNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDozMjoyNlrOHYGOAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5Mzk3Mw==", "bodyText": "+2 in indentation, as it is not on same level of execution as ||", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494993973", "createdAt": "2020-09-25T13:39:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null\n+                || ScopeUtil.isInAnnotationBlock(modifiers)\n+                || ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42b77f1087ddd2912411930773d5a9779476389"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAyOTc2MQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r495029761", "createdAt": "2020-09-25T14:32:26Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null\n+                || ScopeUtil.isInAnnotationBlock(modifiers)\n+                || ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5Mzk3Mw=="}, "originalCommit": {"oid": "a42b77f1087ddd2912411930773d5a9779476389"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 746, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}