{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjIxMzU4", "number": 7820, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NDoxNlrODm9LiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1ODoxMVrODm9ONg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTc0ODU3OnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideClass.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NDoxNlrOF0q-Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTozNzoxMVrOF0zUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDMzOQ==", "bodyText": "lcurly should be on previous line", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390774339", "createdAt": "2020-03-11T06:54:16Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideClass.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideClass {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public boolean equals(Object obj) // warn\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMTA4Mg==", "bodyText": "ok, done", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390911082", "createdAt": "2020-03-11T11:37:11Z", "author": {"login": "HuGanghui"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideClass.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideClass {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public boolean equals(Object obj) // warn\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDMzOQ=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTc0OTMyOnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NDo0N1rOF0q-uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTozNzoxNVrOF0zUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDQ1Ng==", "bodyText": "* */ extra asterisk", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390774456", "createdAt": "2020-03-11T06:54:47Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid1.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideInheritDocInvalid1 {\n+    /**\n+     * {@inheritDoc}\n+     * */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMTExNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390911115", "createdAt": "2020-03-11T11:37:15Z", "author": {"login": "HuGanghui"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid1.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideInheritDocInvalid1 {\n+    /**\n+     * {@inheritDoc}\n+     * */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDQ1Ng=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTc0OTY1OnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NDo1OFrOF0q-8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTozNzoxOVrOF0zUqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDUxMg==", "bodyText": "here too", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390774512", "createdAt": "2020-03-11T06:54:58Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideInheritDocInvalid2 {\n+    /**\n+     * {@inheritDoc}\n+     * */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMTE0Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390911147", "createdAt": "2020-03-11T11:37:19Z", "author": {"login": "HuGanghui"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideInheritDocInvalid2 {\n+    /**\n+     * {@inheritDoc}\n+     * */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDUxMg=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTc1MDExOnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NToxM1rOF0q_Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTozNzoyM1rOF0zU2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDU4Mg==", "bodyText": "test(){ -> test() {", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390774582", "createdAt": "2020-03-11T06:55:13Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideInheritDocInvalid2 {\n+    /**\n+     * {@inheritDoc}\n+     * */\n+    public static void test(){ // warn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMTE5NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390911195", "createdAt": "2020-03-11T11:37:23Z", "author": {"login": "HuGanghui"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideInheritDocInvalid2 {\n+    /**\n+     * {@inheritDoc}\n+     * */\n+    public static void test(){ // warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDU4Mg=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTc1MTU1OnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideAnonymous.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NTo1MlrOF0rACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTozOTo0NVrOF0zaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDc5NQ==", "bodyText": "here javadoc is single-line, in other inputs it is multiline.\nIs there some reason for it?", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390774795", "createdAt": "2020-03-11T06:55:52Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideAnonymous.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideAnonymous {\n+    Runnable r = new Runnable() {\n+\n+        /** {@inheritDoc} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMjQ2OQ==", "bodyText": "sorry, no some reason, just a small oversight", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390912469", "createdAt": "2020-03-11T11:39:39Z", "author": {"login": "HuGanghui"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideAnonymous.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideAnonymous {\n+    Runnable r = new Runnable() {\n+\n+        /** {@inheritDoc} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDc5NQ=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMjUxOA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390912518", "createdAt": "2020-03-11T11:39:45Z", "author": {"login": "HuGanghui"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/missingoverride/SuppressionXpathRegressionMissingOverrideAnonymous.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.checkstyle.suppressionxpathfilter.missingoverride;\n+\n+public class SuppressionXpathRegressionMissingOverrideAnonymous {\n+    Runnable r = new Runnable() {\n+\n+        /** {@inheritDoc} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDc5NQ=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTc1NTQyOnYy", "diffSide": "RIGHT", "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMissingOverrideTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1ODoxMVrOF0rChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTozOTo1MFrOF0zaLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NTQzMQ==", "bodyText": "It would be nice to have test with javaFiveCompatibility property set to true", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390775431", "createdAt": "2020-03-11T06:58:11Z", "author": {"login": "strkkk"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMissingOverrideTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck;\n+\n+public class XpathRegressionMissingOverrideTest extends AbstractXpathTestSupport {\n+\n+    private final String checkName = MissingOverrideCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testClass() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideClass.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideClass']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='equals']]\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideClass']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='equals']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideClass']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='equals']]/MODIFIERS/LITERAL_PUBLIC\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testInterface() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideInterface.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]\",\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS\",\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/TYPE\",\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/TYPE/LITERAL_BOOLEAN\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testAnonymous() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideAnonymous.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:9: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideAnonymous']]\"\n+                        + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r']]/ASSIGN/EXPR/\"\n+                        + \"LITERAL_NEW[./IDENT[@text='Runnable']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='run']]\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideAnonymous']]\"\n+                        + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r']]/ASSIGN/EXPR/\"\n+                        + \"LITERAL_NEW[./IDENT[@text='Runnable']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='run']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideAnonymous']]\"\n+                        + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r']]/ASSIGN/EXPR/\"\n+                        + \"LITERAL_NEW[./IDENT[@text='Runnable']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='run']]/MODIFIERS/LITERAL_PUBLIC\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testInheritDocInvalid1() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideInheritDocInvalid1.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_TAG_NOT_VALID_ON, \"{@inheritDoc}\"),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid1']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid1']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid1']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS/LITERAL_PRIVATE\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testInheritDocInvalid2() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_TAG_NOT_VALID_ON, \"{@inheritDoc}\"),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid2']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid2']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid2']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS/LITERAL_PUBLIC\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMjU1Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7820#discussion_r390912557", "createdAt": "2020-03-11T11:39:50Z", "author": {"login": "HuGanghui"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMissingOverrideTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck;\n+\n+public class XpathRegressionMissingOverrideTest extends AbstractXpathTestSupport {\n+\n+    private final String checkName = MissingOverrideCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testClass() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideClass.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideClass']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='equals']]\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideClass']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='equals']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideClass']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='equals']]/MODIFIERS/LITERAL_PUBLIC\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testInterface() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideInterface.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]\",\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS\",\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/TYPE\",\n+                \"/INTERFACE_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInterface']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/TYPE/LITERAL_BOOLEAN\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testAnonymous() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideAnonymous.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:9: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideAnonymous']]\"\n+                        + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r']]/ASSIGN/EXPR/\"\n+                        + \"LITERAL_NEW[./IDENT[@text='Runnable']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='run']]\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideAnonymous']]\"\n+                        + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r']]/ASSIGN/EXPR/\"\n+                        + \"LITERAL_NEW[./IDENT[@text='Runnable']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='run']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMissingOverrideAnonymous']]\"\n+                        + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r']]/ASSIGN/EXPR/\"\n+                        + \"LITERAL_NEW[./IDENT[@text='Runnable']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='run']]/MODIFIERS/LITERAL_PUBLIC\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testInheritDocInvalid1() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideInheritDocInvalid1.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_TAG_NOT_VALID_ON, \"{@inheritDoc}\"),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid1']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid1']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid1']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS/LITERAL_PRIVATE\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }\n+\n+    @Test\n+    public void testInheritDocInvalid2() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionMissingOverrideInheritDocInvalid2.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(MissingOverrideCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"7:5: \" + getCheckMessage(MissingOverrideCheck.class,\n+                MissingOverrideCheck.MSG_KEY_TAG_NOT_VALID_ON, \"{@inheritDoc}\"),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid2']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid2']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS\",\n+                \"/CLASS_DEF[./IDENT\"\n+                        + \"[@text='SuppressionXpathRegressionMissingOverrideInheritDocInvalid2']]\"\n+                        + \"/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/MODIFIERS/LITERAL_PUBLIC\"\n+\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NTQzMQ=="}, "originalCommit": {"oid": "1d6b5a9c6a1b29cad56d221d2ae88e4e5965e312"}, "originalPosition": 197}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1460, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}