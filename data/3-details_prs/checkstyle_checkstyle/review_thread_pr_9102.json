{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTY2NzIw", "number": 9102, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo1OTo0N1rOFIRBSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMTozMzozOVrOFJTeNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjExNzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo1OTo0N1rOIKFv4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMjowNDowN1rOILnj-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDg0OQ==", "bodyText": "can we move this update out of this commit ?\nlooks like not related.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547450849", "createdAt": "2020-12-22T18:59:47Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java", "diffHunk": "@@ -98,9 +99,10 @@\n      * Only these tokens support text attribute because they make our xpath queries more accurate.\n      * These token types are listed below.\n      * */\n-    private static final List<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Arrays.asList(\n+    private static final Set<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Stream.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDE2NQ==", "bodyText": "It's just a matter of style. I prefer to use Set if the only use is contains. Moved to \"nano optimizations\" commit.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434165", "createdAt": "2020-12-24T07:48:03Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java", "diffHunk": "@@ -98,9 +99,10 @@\n      * Only these tokens support text attribute because they make our xpath queries more accurate.\n      * These token types are listed below.\n      * */\n-    private static final List<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Arrays.asList(\n+    private static final Set<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Stream.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDg0OQ=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MzQzMg==", "bodyText": "sure, but I do not like to bind such updates to functional changes of specific issue", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549053432", "createdAt": "2020-12-27T02:04:07Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java", "diffHunk": "@@ -98,9 +99,10 @@\n      * Only these tokens support text attribute because they make our xpath queries more accurate.\n      * These token types are listed below.\n      * */\n-    private static final List<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Arrays.asList(\n+    private static final Set<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Stream.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDg0OQ=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjExODk5OnYy", "diffSide": "LEFT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTowMDoxM1rOIKFwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0ODoyOVrOILBxcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTAyMg==", "bodyText": "in separate commit please", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547451022", "createdAt": "2020-12-22T19:00:13Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "diffHunk": "@@ -40,18 +39,14 @@\n \n /**\n  * Represents general class for {@code ElementNode}, {@code RootNode} and {@code AttributeNode}.\n- *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDI4OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434289", "createdAt": "2020-12-24T07:48:29Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "diffHunk": "@@ -40,18 +39,14 @@\n \n /**\n  * Represents general class for {@code ElementNode}, {@code RootNode} and {@code AttributeNode}.\n- *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTAyMg=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjEyNTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTowMjo0M1rOIKF0ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0ODozOVrOILBxqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjA2Nw==", "bodyText": "getChildren() always create a collection now.\nis it reasonable to avoid this creation in internal implementations ?", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547452067", "createdAt": "2020-12-22T19:02:43Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "diffHunk": "@@ -150,7 +128,7 @@ public String getURI() {\n      */\n     @Override\n     public boolean hasChildNodes() {\n-        return !children.isEmpty();\n+        return !getChildren().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDM0Ng==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434346", "createdAt": "2020-12-24T07:48:39Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "diffHunk": "@@ -150,7 +128,7 @@ public String getURI() {\n      */\n     @Override\n     public boolean hasChildNodes() {\n-        return !children.isEmpty();\n+        return !getChildren().isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjA2Nw=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjEyODI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTowMzo0M1rOIKF2RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwODoyOTo1OVrOILpXFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA==", "bodyText": "probably better to say \"throws unsupported exception\"", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547452484", "createdAt": "2020-12-22T19:03:43Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java", "diffHunk": "@@ -182,6 +184,27 @@ public DetailAST getUnderlyingNode() {\n         throw throwUnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates nodes for children. Attribute node has no children, so\n+     * this method throws {@code UnsupportedOperationException}.\n+     *\n+     * @return never", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDM3OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434379", "createdAt": "2020-12-24T07:48:45Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java", "diffHunk": "@@ -182,6 +184,27 @@ public DetailAST getUnderlyingNode() {\n         throw throwUnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates nodes for children. Attribute node has no children, so\n+     * this method throws {@code UnsupportedOperationException}.\n+     *\n+     * @return never", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MjYwMQ==", "bodyText": "not done.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549052601", "createdAt": "2020-12-27T01:52:42Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java", "diffHunk": "@@ -182,6 +184,27 @@ public DetailAST getUnderlyingNode() {\n         throw throwUnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates nodes for children. Attribute node has no children, so\n+     * this method throws {@code UnsupportedOperationException}.\n+     *\n+     * @return never", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MjkwMA==", "bodyText": "Sorry for mistype. Fixed.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549082900", "createdAt": "2020-12-27T08:29:59Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java", "diffHunk": "@@ -182,6 +184,27 @@ public DetailAST getUnderlyingNode() {\n         throw throwUnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates nodes for children. Attribute node has no children, so\n+     * this method throws {@code UnsupportedOperationException}.\n+     *\n+     * @return never", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjEzNTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTowNTo1N1rOIKF6RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMToyNzo0MVrOILnZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzUwOQ==", "bodyText": "can we cache text value ? we can do getTokenName ones.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547453509", "createdAt": "2020-12-22T19:05:57Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -163,7 +175,7 @@ public String getAttributeValue(String namespace, String localPart) {\n      */\n     @Override\n     public String getLocalPart() {\n-        return text;\n+        return TokenUtil.getTokenName(detailAst.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY3MDA1Ng==", "bodyText": "No. This code\nif (text == null) {\n  text = TokenUtil.getTokenName(detailAst.getType());\n}\nreturn text;\ndoes not pass the Pitest regression. It says \"hey, I replaced if (text == null) with false and nothing fails.\nThis is common to all nano-optimizations. The method TokenUtil.getTokenName is O(1), so there is no effect for such cache.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547670056", "createdAt": "2020-12-23T05:41:17Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -163,7 +175,7 @@ public String getAttributeValue(String namespace, String localPart) {\n      */\n     @Override\n     public String getLocalPart() {\n-        return text;\n+        return TokenUtil.getTokenName(detailAst.getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzUwOQ=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MDY5Mg==", "bodyText": "there is nothing quicker then just return reference to String.\nbut ok, this optimization is ok to skip for now.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549050692", "createdAt": "2020-12-27T01:27:41Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -163,7 +175,7 @@ public String getAttributeValue(String namespace, String localPart) {\n      */\n     @Override\n     public String getLocalPart() {\n-        return text;\n+        return TokenUtil.getTokenName(detailAst.getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzUwOQ=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjE2MjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxNTowM1rOIKGKEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0OTo0MlrOILByrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NzU1NQ==", "bodyText": "is this update required to fix stackoverflow ? if this is not related better to move to separate commit of the same PR.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547457555", "createdAt": "2020-12-22T19:15:03Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -91,44 +96,54 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n     @Override\n     public int compareOrder(NodeInfo other) {\n         int result = 0;\n-        if (other instanceof AbstractNode) {\n-            result = getDepth() - ((AbstractNode) other).getDepth();\n+        if (other instanceof ElementNode) {\n+            result = Integer.compare(depth, ((ElementNode) other).depth);\n             if (result == 0) {\n-                final ElementNode[] children = getCommonAncestorChildren(other);\n-                result = children[0].indexAmongSiblings - children[1].indexAmongSiblings;\n+                result = compareCommonAncestorChildrenOrder(this, other);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDYwNg==", "bodyText": "done. I'll push \"optimizations\" commit once the CI passed.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434606", "createdAt": "2020-12-24T07:49:42Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -91,44 +96,54 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n     @Override\n     public int compareOrder(NodeInfo other) {\n         int result = 0;\n-        if (other instanceof AbstractNode) {\n-            result = getDepth() - ((AbstractNode) other).getDepth();\n+        if (other instanceof ElementNode) {\n+            result = Integer.compare(depth, ((ElementNode) other).depth);\n             if (result == 0) {\n-                final ElementNode[] children = getCommonAncestorChildren(other);\n-                result = children[0].indexAmongSiblings - children[1].indexAmongSiblings;\n+                result = compareCommonAncestorChildrenOrder(this, other);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NzU1NQ=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjE3OTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxOTo0OVrOIKGUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0OTo0OVrOILBy1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2MDE2OA==", "bodyText": "I saw this code twice in this xpath group of classes, is it reasonable to move it to util ?", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547460168", "createdAt": "2020-12-22T19:19:49Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java", "diffHunk": "@@ -74,14 +75,20 @@ public int compareOrder(NodeInfo nodeInfo) {\n     /**\n      * Iterates siblings of the current node and\n      * recursively creates new Xpath-nodes.\n+     *\n+     * @return children list\n      */\n-    private void createChildren() {\n+    @Override\n+    protected List<AbstractNode> createChildren() {\n         DetailAST currentChild = detailAst;\n+        final List<AbstractNode> result = new ArrayList<>();\n         while (currentChild != null) {\n-            final ElementNode child = new ElementNode(this, this, currentChild);\n-            addChild(child);\n+            final int index = result.size();\n+            final ElementNode child = new ElementNode(this, this, currentChild, 0, index);\n+            result.add(child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDY0Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434647", "createdAt": "2020-12-24T07:49:49Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java", "diffHunk": "@@ -74,14 +75,20 @@ public int compareOrder(NodeInfo nodeInfo) {\n     /**\n      * Iterates siblings of the current node and\n      * recursively creates new Xpath-nodes.\n+     *\n+     * @return children list\n      */\n-    private void createChildren() {\n+    @Override\n+    protected List<AbstractNode> createChildren() {\n         DetailAST currentChild = detailAst;\n+        final List<AbstractNode> result = new ArrayList<>();\n         while (currentChild != null) {\n-            final ElementNode child = new ElementNode(this, this, currentChild);\n-            addChild(child);\n+            final int index = result.size();\n+            final ElementNode child = new ElementNode(this, this, currentChild, 0, index);\n+            result.add(child);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2MDE2OA=="}, "originalCommit": {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzAwNTM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwMTozMzozOVrOILnarw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxMzo0NjoxMVrOILrVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ==", "bodyText": "we need to think on what approach for exception validation is better for us\nhttps://www.baeldung.com/junit-assert-exception\nusage is Rule is good, junit5 approach also looks interesting but still creates nesting blocks.\n@strkkk , @rnveach , @nmancus1 , what is more preferable way of exception validation for you.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549051055", "createdAt": "2020-12-27T01:33:39Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "diffHunk": "@@ -49,6 +50,27 @@ public void testCompareOrder() {\n         }\n     }\n \n+    @Test\n+    public void testGetDepth() {\n+        try {\n+            attributeNode.getDepth();\n+            fail(\"Exception is excepted\");\n+        }\n+        catch (UnsupportedOperationException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NzUwOQ==", "bodyText": "Sounds good. I'll try to use assertThrows + Truth.", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549077509", "createdAt": "2020-12-27T07:35:03Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "diffHunk": "@@ -49,6 +50,27 @@ public void testCompareOrder() {\n         }\n     }\n \n+    @Test\n+    public void testGetDepth() {\n+        try {\n+            attributeNode.getDepth();\n+            fail(\"Exception is excepted\");\n+        }\n+        catch (UnsupportedOperationException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, "originalCommit": {"oid": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MDA1MA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549080050", "createdAt": "2020-12-27T08:02:09Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "diffHunk": "@@ -49,6 +50,27 @@ public void testCompareOrder() {\n         }\n     }\n \n+    @Test\n+    public void testGetDepth() {\n+        try {\n+            attributeNode.getDepth();\n+            fail(\"Exception is excepted\");\n+        }\n+        catch (UnsupportedOperationException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, "originalCommit": {"oid": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MTYxMg==", "bodyText": "assertThrows looks like a better way to me", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549081612", "createdAt": "2020-12-27T08:17:21Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "diffHunk": "@@ -49,6 +50,27 @@ public void testCompareOrder() {\n         }\n     }\n \n+    @Test\n+    public void testGetDepth() {\n+        try {\n+            attributeNode.getDepth();\n+            fail(\"Exception is excepted\");\n+        }\n+        catch (UnsupportedOperationException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, "originalCommit": {"oid": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTExNTE5Nw==", "bodyText": "I would prefer https://assertj.github.io/doc/ over either JUnit4 or JUnit5 exception validation (read more at https://www.baeldung.com/introduction-to-assertj), but I am not sure if this is an option that we could use. In my opinion, it is the most readable(by far) of the three.\nOut of the two options given above @Rule (JUnit4) and assertThrows (JUnit5), I think that @Rule is more readable. However, JUnit5 is overall a better UT framework, since we can import only the modules we need, and can run tests in parallel.\nI would rank the three options as follows:\n\nassertJ\nJUnit5 assertThrows\nJUnit4 @Rule", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549115197", "createdAt": "2020-12-27T13:46:11Z", "author": {"login": "nmancus1"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "diffHunk": "@@ -49,6 +50,27 @@ public void testCompareOrder() {\n         }\n     }\n \n+    @Test\n+    public void testGetDepth() {\n+        try {\n+            attributeNode.getDepth();\n+            fail(\"Exception is excepted\");\n+        }\n+        catch (UnsupportedOperationException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, "originalCommit": {"oid": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}