{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDM3MjA0", "number": 7942, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo0NjoyM1rODs0-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNTowNVrODxn6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzMxODc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo0NjoyM1rOF95jCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowODo1N1rOF-1WxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MDMxMw==", "bodyText": "Add : and the end", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400450313", "createdAt": "2020-03-30T19:46:23Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzMDIxMw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401430213", "createdAt": "2020-04-01T08:08:57Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MDMxMw=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzMyMTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo0NzowMFrOF95kbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoxMzowN1rOF-1gFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MDY2OA==", "bodyText": "Please remove, the above line already describes what is it", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400450668", "createdAt": "2020-03-30T19:47:00Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values\n+ * </p>\n+ * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzMjU5OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401432598", "createdAt": "2020-04-01T08:13:07Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values\n+ * </p>\n+ * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MDY2OA=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzMzNTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1MToyN1rOF95t8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowODo0N1rOF-1WVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzEwNQ==", "bodyText": "Please change to How to configure the {@code AbstractClassName} to use default values:", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400453105", "createdAt": "2020-03-30T19:51:27Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzMDEwMw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401430103", "createdAt": "2020-04-01T08:08:47Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzEwNQ=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM0MDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1Mjo1M1rOF95w_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyMTo1OFrOF-1z6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Mzg4Ng==", "bodyText": "Please change to How to configure the {@code AbstractClassName} to check names but ignore missing {@code abstract} modifier:", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400453886", "createdAt": "2020-03-30T19:52:53Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, abstract access modifier should be present\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n  * checks names, but ignore missing {@code abstract} modifiers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNzY3Mg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401437672", "createdAt": "2020-04-01T08:21:58Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, abstract access modifier should be present\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n  * checks names, but ignore missing {@code abstract} modifiers:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Mzg4Ng=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM0MzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1Mzo0MVrOF95yyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyMjowNlrOF-10KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NDM0NQ==", "bodyText": "Redundant, please remove.", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400454345", "createdAt": "2020-03-30T19:53:41Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, abstract access modifier should be present\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n  * checks names, but ignore missing {@code abstract} modifiers:\n  * </p>\n  * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNzczNw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401437737", "createdAt": "2020-04-01T08:22:06Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -53,6 +53,21 @@\n  * </ul>\n  * <p>\n  * The following example shows how to configure the {@code AbstractClassName} to\n+ * default values\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, abstract access modifier should be present\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n  * checks names, but ignore missing {@code abstract} modifiers:\n  * </p>\n  * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NDM0NQ=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM1Mjc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NjozNVrOF954tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDoyMlrOF-2eVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTg2MA==", "bodyText": "Please update to the format mentioned above.", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400455860", "createdAt": "2020-03-30T19:56:35Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODUzMw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401448533", "createdAt": "2020-04-01T08:40:22Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTg2MA=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM1NTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NzoxOFrOF956QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0OTo1M1rOGCwLrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NjI1Ng==", "bodyText": "{@code Name} is not a modifier, please fix", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400456256", "createdAt": "2020-03-30T19:57:18Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NDIwMg==", "bodyText": "Still not done. Please read about what is called as modifier in Java.", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r403344202", "createdAt": "2020-04-03T21:26:16Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NjI1Ng=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzOTYzOQ==", "bodyText": "ok", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405539639", "createdAt": "2020-04-08T13:49:44Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NjI1Ng=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzOTc1Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405539757", "createdAt": "2020-04-08T13:49:53Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NjI1Ng=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM1NjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NzozNVrOF956zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDoyOVrOF-2eng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NjM5Ng==", "bodyText": "Please remove", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400456396", "createdAt": "2020-03-30T19:57:35Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODYwNg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401448606", "createdAt": "2020-04-01T08:40:29Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NjM5Ng=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2MTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1OTowMVrOF9594Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MToyMFrOF-2gbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzE4NQ==", "bodyText": "please put a reason for the violation like you did above", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400457185", "createdAt": "2020-03-30T19:59:01Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0OTA2OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401449068", "createdAt": "2020-04-01T08:41:20Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzE4NQ=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2NTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMDoyMVrOF96Aww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MToxNlrOF-2gOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzkyMw==", "bodyText": "please put a reason why it is ok like above in line 83", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400457923", "createdAt": "2020-03-30T20:00:21Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0OTAxOQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401449019", "createdAt": "2020-04-01T08:41:16Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzkyMw=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2ODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMToyNlrOF96C6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MToyN1rOF-2gpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODQ3Mw==", "bodyText": "format is not a modifier, please fix. Also update the whole description according to the format mentioned above.", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400458473", "createdAt": "2020-03-30T20:01:26Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName}\n+ * with {@code format} modifier:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0OTEyNw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401449127", "createdAt": "2020-04-01T08:41:27Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName}\n+ * with {@code format} modifier:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODQ3Mw=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM3MDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMTo0NVrOF96DlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MTozM1rOF-2g5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODY0NQ==", "bodyText": "remove", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400458645", "createdAt": "2020-03-30T20:01:45Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName}\n+ * with {@code format} modifier:\n+ * </p>\n+ * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0OTE4OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401449188", "createdAt": "2020-04-01T08:41:33Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName}\n+ * with {@code format} modifier:\n+ * </p>\n+ * <p>Configuration:</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODY0NQ=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM3MjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMjozNlrOF96FRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MTozOFrOF-2hHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1OTA3Ng==", "bodyText": "please put reasons like above", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400459076", "createdAt": "2020-03-30T20:02:36Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName}\n+ * with {@code format} modifier:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"format\" value=\"^Generator.+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class GeneratorFirstClass {} // OK\n+ * abstract class SecondClass {} // violation\n+ * class GeneratorThirdClass {} // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0OTI0NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401449245", "createdAt": "2020-04-01T08:41:38Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +79,43 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName} to\n+ * checks names, but ignore {@code Name} modifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK\n+ * class AbstractThirdClass {} // violation\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * The following example shows how to configure the {@code AbstractClassName}\n+ * with {@code format} modifier:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"format\" value=\"^Generator.+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class GeneratorFirstClass {} // OK\n+ * abstract class SecondClass {} // violation\n+ * class GeneratorThirdClass {} // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1OTA3Ng=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM3Njk5OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_naming.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMzo0NFrOF96H3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDowODowNlrOF-5woQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1OTc0Mw==", "bodyText": "Don't use <div> here", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400459743", "createdAt": "2020-03-30T20:03:44Z", "author": {"login": "rdiachenko"}, "path": "src/xdocs/config_naming.xml", "diffHunk": "@@ -317,6 +317,23 @@ public class MyClass { // OK, ignore checking the class name\n       </subsection>\n \n       <subsection name=\"Examples\" id=\"AbstractClassName_Examples\">\n+        <p>\n+          The following example shows how to configure the\n+          <code>AbstractClassName</code> to default values\n+        </p>\n+        <p>Configuration:</p>\n+        <source>\n+&lt;module name=&quot;AbstractClassName&quot;/&gt;\n+        </source>\n+        <p>Example:</p>\n+        <div class=\"wrapper\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwMjM2OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401502369", "createdAt": "2020-04-01T10:08:06Z", "author": {"login": "pkpale"}, "path": "src/xdocs/config_naming.xml", "diffHunk": "@@ -317,6 +317,23 @@ public class MyClass { // OK, ignore checking the class name\n       </subsection>\n \n       <subsection name=\"Examples\" id=\"AbstractClassName_Examples\">\n+        <p>\n+          The following example shows how to configure the\n+          <code>AbstractClassName</code> to default values\n+        </p>\n+        <p>Configuration:</p>\n+        <source>\n+&lt;module name=&quot;AbstractClassName&quot;/&gt;\n+        </source>\n+        <p>Example:</p>\n+        <div class=\"wrapper\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1OTc0Mw=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM3OTc4OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_naming.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowNDoyN1rOF96JlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDowODoxMFrOF-5wzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MDE4MA==", "bodyText": "Use <source> instead of <pre>", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r400460180", "createdAt": "2020-03-30T20:04:27Z", "author": {"login": "rdiachenko"}, "path": "src/xdocs/config_naming.xml", "diffHunk": "@@ -317,6 +317,23 @@ public class MyClass { // OK, ignore checking the class name\n       </subsection>\n \n       <subsection name=\"Examples\" id=\"AbstractClassName_Examples\">\n+        <p>\n+          The following example shows how to configure the\n+          <code>AbstractClassName</code> to default values\n+        </p>\n+        <p>Configuration:</p>\n+        <source>\n+&lt;module name=&quot;AbstractClassName&quot;/&gt;\n+        </source>\n+        <p>Example:</p>\n+        <div class=\"wrapper\">\n+          <pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwMjQxNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r401502415", "createdAt": "2020-04-01T10:08:10Z", "author": {"login": "pkpale"}, "path": "src/xdocs/config_naming.xml", "diffHunk": "@@ -317,6 +317,23 @@ public class MyClass { // OK, ignore checking the class name\n       </subsection>\n \n       <subsection name=\"Examples\" id=\"AbstractClassName_Examples\">\n+        <p>\n+          The following example shows how to configure the\n+          <code>AbstractClassName</code> to default values\n+        </p>\n+        <p>Configuration:</p>\n+        <source>\n+&lt;module name=&quot;AbstractClassName&quot;/&gt;\n+        </source>\n+        <p>Example:</p>\n+        <div class=\"wrapper\">\n+          <pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MDE4MA=="}, "originalCommit": {"oid": "69b89949fadc5ac35b0535b4ecbe43f5e564bf69"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTg5NDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMToyODozM1rOGAqO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1MjoyM1rOGCwS7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NTEyOQ==", "bodyText": "Please update to // OK, name validation is ignored", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r403345129", "createdAt": "2020-04-03T21:28:33Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MTYxMw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405541613", "createdAt": "2020-04-08T13:52:23Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NTEyOQ=="}, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTg5NzgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMToyOTo0N1rOGAqQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NToxNlrOGCwbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NTY0OA==", "bodyText": "Please update to // OK, no \"abstract\" modifier", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r403345648", "createdAt": "2020-04-03T21:29:47Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention\n+ * class AbstractThirdClass {} // violation, must be declared as 'abstract'\n+ * class FourthClass {} // OK, not declared abstract", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mzg0Nw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405543847", "createdAt": "2020-04-08T13:55:16Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention\n+ * class AbstractThirdClass {} // violation, must be declared as 'abstract'\n+ * class FourthClass {} // OK, not declared abstract", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NTY0OA=="}, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTkwNjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozMjo1MVrOGAqV0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NToxMFrOGCwbYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0Njg5OA==", "bodyText": "Please remove , all validation passed, it is redundant in this case", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r403346898", "createdAt": "2020-04-03T21:32:51Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention\n+ * class AbstractThirdClass {} // violation, must be declared as 'abstract'\n+ * class FourthClass {} // OK, not declared abstract\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName}\n+ * with {@code format}:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"format\" value=\"^Generator.+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class GeneratorFirstClass {} // OK, all validation passed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mzc3OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405543779", "createdAt": "2020-04-08T13:55:10Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention\n+ * class AbstractThirdClass {} // violation, must be declared as 'abstract'\n+ * class FourthClass {} // OK, not declared abstract\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName}\n+ * with {@code format}:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"format\" value=\"^Generator.+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class GeneratorFirstClass {} // OK, all validation passed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0Njg5OA=="}, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTkxMTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozNDo0MlrOGAqY7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMjoyM1rOGCyFew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NzY5NQ==", "bodyText": "Update to // violation, must be declared 'abstract'", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r403347695", "createdAt": "2020-04-03T21:34:42Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -52,10 +52,23 @@\n  * {@code false}.</li>\n  * </ul>\n  * <p>\n- * The following example shows how to configure the {@code AbstractClassName} to\n- * checks names, but ignore missing {@code abstract} modifiers:\n+ * How to configure the {@code AbstractClassName} to use\n+ * default values:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, abstract access modifier should be present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MDkzOQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405570939", "createdAt": "2020-04-08T14:32:23Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -52,10 +52,23 @@\n  * {@code false}.</li>\n  * </ul>\n  * <p>\n- * The following example shows how to configure the {@code AbstractClassName} to\n- * checks names, but ignore missing {@code abstract} modifiers:\n+ * How to configure the {@code AbstractClassName} to use\n+ * default values:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, abstract access modifier should be present", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NzY5NQ=="}, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTkxMzIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozNTozMFrOGAqZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMjoxN1rOGCyFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0Nzk2NQ==", "bodyText": "Update to // OK, no \"abstract\" modifier", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r403347965", "createdAt": "2020-04-03T21:35:30Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention\n+ * class AbstractThirdClass {} // violation, must be declared as 'abstract'\n+ * class FourthClass {} // OK, not declared abstract\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName}\n+ * with {@code format}:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"format\" value=\"^Generator.+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class GeneratorFirstClass {} // OK, all validation passed\n+ * abstract class SecondClass {} // violation, must match pattern '^Generator.+$'\n+ * class GeneratorThirdClass {} // violation, must be declared 'abstract'\n+ * class FourthClass {} // OK, not declared abstract", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MDg2NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405570865", "createdAt": "2020-04-08T14:32:17Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names but ignore Name modifier:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"ignoreName\" value=\"true\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // OK, ignored naming convention\n+ * class AbstractThirdClass {} // violation, must be declared as 'abstract'\n+ * class FourthClass {} // OK, not declared abstract\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName}\n+ * with {@code format}:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"&gt;\n+ *   &lt;property name=\"format\" value=\"^Generator.+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class GeneratorFirstClass {} // OK, all validation passed\n+ * abstract class SecondClass {} // violation, must match pattern '^Generator.+$'\n+ * class GeneratorThirdClass {} // violation, must be declared 'abstract'\n+ * class FourthClass {} // OK, not declared abstract", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0Nzk2NQ=="}, "originalCommit": {"oid": "d8424a9f65324ba83d5eb4a52dc4abb0ccc9d9f0"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODEwNjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDowNDoyMVrOGC-6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MToyNFrOGDCAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc4MTA4NQ==", "bodyText": "Please update to How to configure the {@code AbstractClassName} to ignore name validation when class declared as 'abstract'", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405781085", "createdAt": "2020-04-08T20:04:21Z", "author": {"login": "rdiachenko"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names with {@code ignoreName}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c54ef054e9c1810f8d5fe72cc029b898f7b4f85"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTg3OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r405831879", "createdAt": "2020-04-08T21:41:24Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to\n+ * check names with {@code ignoreName}:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc4MTA4NQ=="}, "originalCommit": {"oid": "6c54ef054e9c1810f8d5fe72cc029b898f7b4f85"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzU5ODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozMzowMFrOGFMXZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNjowNlrOGF8TnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5ODY2MA==", "bodyText": "The common wording for default config is\nTo configure the check:\nPlease take a look over existent docs", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r408098660", "createdAt": "2020-04-14T12:33:00Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -52,10 +52,23 @@\n  * {@code false}.</li>\n  * </ul>\n  * <p>\n- * The following example shows how to configure the {@code AbstractClassName} to\n- * checks names, but ignore missing {@code abstract} modifiers:\n+ * How to configure the {@code AbstractClassName} to use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9b04ca53764d1d5a14a95ff2783d31f0036077"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NDEyNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r408884125", "createdAt": "2020-04-15T14:26:06Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -52,10 +52,23 @@\n  * {@code false}.</li>\n  * </ul>\n  * <p>\n- * The following example shows how to configure the {@code AbstractClassName} to\n- * checks names, but ignore missing {@code abstract} modifiers:\n+ * How to configure the {@code AbstractClassName} to use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5ODY2MA=="}, "originalCommit": {"oid": "bc9b04ca53764d1d5a14a95ff2783d31f0036077"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYwNDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNDozMFrOGFMbKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNjowMlrOGF8TaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTYyNA==", "bodyText": "Same here: To configure the check to...", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r408099624", "createdAt": "2020-04-14T12:34:30Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -52,10 +52,23 @@\n  * {@code false}.</li>\n  * </ul>\n  * <p>\n- * The following example shows how to configure the {@code AbstractClassName} to\n- * checks names, but ignore missing {@code abstract} modifiers:\n+ * How to configure the {@code AbstractClassName} to use\n+ * default values:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, must be declared 'abstract'\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9b04ca53764d1d5a14a95ff2783d31f0036077"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NDA3Mg==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r408884072", "createdAt": "2020-04-15T14:26:02Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -52,10 +52,23 @@\n  * {@code false}.</li>\n  * </ul>\n  * <p>\n- * The following example shows how to configure the {@code AbstractClassName} to\n- * checks names, but ignore missing {@code abstract} modifiers:\n+ * How to configure the {@code AbstractClassName} to use\n+ * default values:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AbstractClassName\"/&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * abstract class AbstractFirstClass {} // OK\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n+ * class AbstractThirdClass {} // violation, must be declared 'abstract'\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTYyNA=="}, "originalCommit": {"oid": "bc9b04ca53764d1d5a14a95ff2783d31f0036077"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYwNjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNTowNVrOGFMcew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNTo1OVrOGF8TRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTk2Mw==", "bodyText": "Same here", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r408099963", "createdAt": "2020-04-14T12:35:05Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9b04ca53764d1d5a14a95ff2783d31f0036077"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NDAzOA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7942#discussion_r408884038", "createdAt": "2020-04-15T14:25:59Z", "author": {"login": "pkpale"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "diffHunk": "@@ -64,8 +77,41 @@\n  * <p>Example:</p>\n  * <pre>\n  * abstract class AbstractFirstClass {} // OK\n- * abstract class SecondClass {} // violation, it should match the pattern \"^Abstract.+$\"\n+ * abstract class SecondClass {} // violation, it should match pattern \"^Abstract.+$\"\n  * class AbstractThirdClass {} // OK, no \"abstract\" modifier\n+ * class FourthClass {} // OK\n+ * </pre>\n+ * <p>\n+ * How to configure the {@code AbstractClassName} to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTk2Mw=="}, "originalCommit": {"oid": "bc9b04ca53764d1d5a14a95ff2783d31f0036077"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1273, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}