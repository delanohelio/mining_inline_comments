{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MDA4MjU4", "number": 8783, "title": "Issue #8771: Improve code coverage for metadata generator classes - 1", "bodyText": "#8771\n\nPR to setup UT backbone\nImproved branch cov from 0.84 to 0.88", "createdAt": "2020-09-03T21:50:04Z", "url": "https://github.com/checkstyle/checkstyle/pull/8783", "merged": true, "mergeCommit": {"oid": "c8c289c23c02c9c6d4e1169d44f2352840751fc8"}, "closed": true, "closedAt": "2020-09-09T14:42:30Z", "author": {"login": "gaurabdg"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFX4SKgBqjM3MjY5MjA0OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHMXxiAFqTQ4NTAxODQyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df30d39e39605ae8c25c827ed9d2f394ad02d9e2", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/df30d39e39605ae8c25c827ed9d2f394ad02d9e2", "committedDate": "2020-09-03T21:48:38Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "1e9a819167fa3f44da7e770149f6188deeb01f70", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1e9a819167fa3f44da7e770149f6188deeb01f70", "committedDate": "2020-09-03T21:55:48Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e9a819167fa3f44da7e770149f6188deeb01f70", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1e9a819167fa3f44da7e770149f6188deeb01f70", "committedDate": "2020-09-03T21:55:48Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "84b52bfda10e05bf194af3a79376345dcbe24593", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/84b52bfda10e05bf194af3a79376345dcbe24593", "committedDate": "2020-09-03T22:44:08Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84b52bfda10e05bf194af3a79376345dcbe24593", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/84b52bfda10e05bf194af3a79376345dcbe24593", "committedDate": "2020-09-03T22:44:08Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "893a69304aca587831e947389113d228a03d069a", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/893a69304aca587831e947389113d228a03d069a", "committedDate": "2020-09-03T23:01:24Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "893a69304aca587831e947389113d228a03d069a", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/893a69304aca587831e947389113d228a03d069a", "committedDate": "2020-09-03T23:01:24Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0208e8ae5823edee26b6d49c02ab2b196f24f270", "committedDate": "2020-09-04T06:33:04Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDg3MzQ2", "url": "https://github.com/checkstyle/checkstyle/pull/8783#pullrequestreview-482487346", "createdAt": "2020-09-04T09:05:52Z", "commit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowNTo1MlrOHNF3wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNDowMVrOHNGJWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4OTczMA==", "bodyText": "slash -> slashIdx\npackge typo, packageName or something like this is better", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483489730", "createdAt": "2020-09-04T09:05:52Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -180,7 +180,9 @@ private static void verifyInputFile(Map<String, List<String>> allTests, boolean\n             // moved\n             final String folderPath = packge;\n             slash = packge.lastIndexOf(File.separatorChar);\n-            packge = path.substring(0, slash);\n+            if (slash != -1) {\n+                packge = path.substring(0, slash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjUxMg==", "bodyText": "in case you skip assertion with this flag, all method logic above does not make sense, you can just do not invoke this method if flag is true.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483492512", "createdAt": "2020-09-04T09:10:58Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -191,9 +193,11 @@ private static void verifyInputFile(Map<String, List<String>> allTests, boolean\n             }\n         }\n \n-        assertTrue(found, \"Resource must be named after a Test like 'InputMyCustomCase.java' \"\n-                + \"and be in the sub-package of the test like 'mycustom' \"\n-                + \"for test 'MyCustomCheckTest': \" + path);\n+        if (!skipFileNaming) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA==", "bodyText": "\".DS_Store\" what is this file?", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483492908", "createdAt": "2020-09-04T09:11:40Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -249,7 +253,8 @@ private static boolean shouldSkipInputFileNameCheck(String path, String fileName\n                 // special directory for files that can't be renamed or are secondary inputs\n                 || path.contains(File.separatorChar + \"inputs\" + File.separatorChar)\n                 // all inputs must start with 'messages'\n-                || path.contains(File.separatorChar + \"translation\" + File.separatorChar);\n+                || path.contains(File.separatorChar + \"translation\" + File.separatorChar)\n+                || \".DS_Store\".equals(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5Mzg3Ng==", "bodyText": "why do you use existing check instead of creating some mock check? it can be confusing", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483493876", "createdAt": "2020-09-04T09:13:26Z", "author": {"login": "strkkk"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/NoCodeInFileCheck.java", "diffHunk": "@@ -0,0 +1,79 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks whether file contains code. Files which are considered to have no code:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * File with no text\n+ * </li>\n+ * <li>\n+ * File with single line comment(s)\n+ * </li>\n+ * <li>\n+ * File with a multi line comment(s).\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"NoCodeInFile\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <p>\n+ * Content of the files:\n+ * </p>\n+ * <pre>\n+ * // single line comment // violation\n+ * </pre>\n+ * <pre>\n+ * /* // violation\n+ *  block comment\n+ * *&#47;\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code nocode.in.file}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.33\n+ */\n+@StatelessCheck\n+public abstract class NoCodeInFileCheck extends AbstractCheck {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDA0NA==", "bodyText": "same here and other files below", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483494044", "createdAt": "2020-09-04T09:13:43Z", "author": {"login": "strkkk"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/annotation/AnnotationUseStyleCheck.java", "diffHunk": "@@ -0,0 +1,166 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.annotation;\n+\n+import java.util.Locale;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks the style of elements in annotations.\n+ * </p>\n+ * <p>\n+ * Annotations have three element styles starting with the least verbose.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code ElementStyleOption.COMPACT_NO_ARRAY}\n+ * </li>\n+ * <li>\n+ * {@code ElementStyleOption.COMPACT}\n+ * </li>\n+ * <li>\n+ * {@code ElementStyleOption.EXPANDED}\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To not enforce an element style a {@code ElementStyleOption.IGNORE} type is provided.\n+ * The desired style can be set through the {@code elementStyle} property.\n+ * </p>\n+ * <p>\n+ * Using the {@code ElementStyleOption.EXPANDED} style is more verbose.\n+ * The expanded version is sometimes referred to as \"named parameters\" in other languages.\n+ * </p>\n+ * <p>\n+ * Using the {@code ElementStyleOption.COMPACT} style is less verbose.\n+ * This style can only be used when there is an element called 'value' which is either\n+ * the sole element or all other elements have default values.\n+ * </p>\n+ * <p>\n+ * Using the {@code ElementStyleOption.COMPACT_NO_ARRAY} style is less verbose.\n+ * It is similar to the {@code ElementStyleOption.COMPACT} style but single value arrays are\n+ * flagged.\n+ * With annotations a single value array does not need to be placed in an array initializer.\n+ * </p>\n+ * <p>\n+ * The ending parenthesis are optional when using annotations with no elements.\n+ * To always require ending parenthesis use the {@code ClosingParensOption.ALWAYS} type.\n+ * To never have ending parenthesis use the {@code ClosingParensOption.NEVER} type.\n+ * To not enforce a closing parenthesis preference a {@code ClosingParensOption.IGNORE} type is\n+ * provided.\n+ * Set this through the {@code closingParens} property.\n+ * </p>\n+ * <p>\n+ * Annotations also allow you to specify arrays of elements in a standard format.\n+ * As with normal arrays, a trailing comma is optional.\n+ * To always require a trailing comma use the {@code TrailingArrayCommaOption.ALWAYS} type.\n+ * To never have a trailing comma use the {@code TrailingArrayCommaOption.NEVER} type.\n+ * To not enforce a trailing array comma preference a {@code TrailingArrayCommaOption.IGNORE} type\n+ * is provided. Set this through the {@code trailingArrayComma} property.\n+ * </p>\n+ * <p>\n+ * By default the {@code ElementStyleOption} is set to {@code COMPACT_NO_ARRAY},\n+ * the {@code TrailingArrayCommaOption} is set to {@code NEVER},\n+ * and the {@code ClosingParensOption} is set to {@code NEVER}.\n+ * </p>\n+ * <p>\n+ * According to the JLS, it is legal to include a trailing comma\n+ * in arrays used in annotations but Sun's Java 5 &amp; 6 compilers will not\n+ * compile with this syntax. This may in be a bug in Sun's compilers\n+ * since eclipse 3.4's built-in compiler does allow this syntax as\n+ * defined in the JLS. Note: this was tested with compilers included with\n+ * JDK versions 1.5.0.17 and 1.6.0.11 and the compiler included with eclipse 3.4.1.\n+ * </p>\n+ * <p>\n+ * See <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-9.7\">\n+ * Java Language specification, &#167;9.7</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code elementStyle} - Define the annotation element styles.\n+ * Type is {@code\n+ * com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck$ElementStyleOption}.\n+ * Default value is {@code compact_no_array}.\n+ * </li>\n+ * <li>\n+ * Property {@code closingParens} - Define the policy for ending parenthesis.\n+ * Type is {@code\n+ * com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck$ClosingParensOption}.\n+ * Default value is {@code never}.\n+ * </li>\n+ * <li>\n+ * Property {@code trailingArrayComma} - Define the policy for trailing comma in arrays.\n+ * Type is {@code\n+ * com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck$TrailingArrayCommaOption}.\n+ * Default value is {@code never}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"AnnotationUseStyle\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To configure the check to enforce an {@code expanded} style,\n+ * with a trailing array comma set to {@code never}\n+ * and always including the closing parenthesis.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AnnotationUseStyle&quot;&gt;\n+ *   &lt;property name=&quot;elementStyle&quot; value=&quot;expanded&quot;/&gt;\n+ *   &lt;property name=&quot;trailingArrayComma&quot; value=&quot;never&quot;/&gt;\n+ *   &lt;property name=&quot;closingParens&quot; value=&quot;always&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code annotation.incorrect.style}\n+ * </li>\n+ * <li>\n+ * {@code annotation.parens.missing}\n+ * </li>\n+ * <li>\n+ * {@code annotation.parens.present}\n+ * </li>\n+ * <li>\n+ * {@code annotation.trailing.comma.missing}\n+ * </li>\n+ * <li>\n+ * {@code annotation.trailing.comma.present}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 5.0\n+ *\n+ */\n+@StatelessCheck\n+public abstract class AnnotationUseStyleCheck extends AbstractCheck {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDIzMg==", "bodyText": "extra lines", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483494232", "createdAt": "2020-09-04T09:14:01Z", "author": {"login": "strkkk"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/customchecks/PropertyWithNoCodeTagCheck.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.customchecks;\n+\n+/**\n+ * <p>\n+ * Checks whether file contains code. Files which are considered to have no code:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * File with no text\n+ * </li>\n+ * <li>\n+ * File with single line comment(s)\n+ * </li>\n+ * <li>\n+ * File with a multi line comment(s).\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * <ul>\n+ * <li>\n+ * Property\n+ * sampleProperty - Here the property name doesnt have a code tag around its name.\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.33\n+ */\n+public class PropertyWithNoCodeTagCheck {\n+}\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjkyMjgz", "url": "https://github.com/checkstyle/checkstyle/pull/8783#pullrequestreview-482692283", "createdAt": "2020-09-04T14:20:27Z", "commit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoyMDoyN1rOHNPZRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDozMTo1N1rOHNP0KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NTc2NQ==", "bodyText": "please make it\ncom.puppycrawl.tools.checkstyle.meta.inputs.checks.custom\nit will make it more logical and let us avoid usage of extra bad word in whitelist.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483645765", "createdAt": "2020-09-04T14:20:27Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/customchecks/PropertyWithNoCodeTagCheck.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.customchecks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NzIwMA==", "bodyText": "We are not using in meta examples , please make all examples like public class Test { /** skipped as not relevant */ }", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483647200", "createdAt": "2020-09-04T14:22:53Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/blocks/RightCurlyCheck.java", "diffHunk": "@@ -0,0 +1,232 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks.blocks;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks the placement of right curly braces ({@code '}'}) for code blocks. This check supports\n+ * if-else, try-catch-finally blocks, while-loops, for-loops,\n+ * method definitions, class definitions, constructor definitions,\n+ * instance, static initialization blocks, annotation definitions and enum definitions.\n+ * For right curly brace of expression blocks of arrays, lambdas and class instances\n+ * please follow issue\n+ * <a href=\"https://github.com/checkstyle/checkstyle/issues/5945\">#5945</a>.\n+ * For right curly brace of enum constant please follow issue\n+ * <a href=\"https://github.com/checkstyle/checkstyle/issues/7519\">#7519</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code option} - Specify the policy on placement of a right curly brace\n+ * (<code>'}'</code>).\n+ * Type is {@code com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption}.\n+ * Default value is {@code same}.\n+ * </li>\n+ * <li>\n+ * Property {@code tokens} - tokens to check\n+ * Type is {@code java.lang.String[]}.\n+ * Validation type is {@code tokenSet}.\n+ * Default value is:\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_TRY\">\n+ * LITERAL_TRY</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH\">\n+ * LITERAL_CATCH</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FINALLY\">\n+ * LITERAL_FINALLY</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF\">\n+ * LITERAL_IF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE\">\n+ * LITERAL_ELSE</a>.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"RightCurly\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *\n+ *   public void test() {\n+ *\n+ *     if (foo) {\n+ *       bar();\n+ *     }           // violation, right curly must be in the same line as the 'else' keyword\n+ *     else {\n+ *       bar();\n+ *     }\n+ *\n+ *     if (foo) {\n+ *       bar();\n+ *     } else {     // OK\n+ *       bar();\n+ *     }\n+ *\n+ *     if (foo) { bar(); } int i = 0; // violation\n+ *                   // ^^^ statement is not allowed on same line after curly right brace\n+ *\n+ *     if (foo) { bar(); }            // OK\n+ *     int i = 0;\n+ *\n+ *     try {\n+ *       bar();\n+ *     }           // violation, rightCurly must be in the same line as 'catch' keyword\n+ *     catch (Exception e) {\n+ *       bar();\n+ *     }\n+ *\n+ *     try {\n+ *       bar();\n+ *     } catch (Exception e) { // OK\n+ *       bar();\n+ *     }\n+ *\n+ *   }                         // OK\n+ *\n+ *   public void testSingleLine() { bar(); } // OK, because singleline is allowed\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with policy {@code alone} for {@code else} and\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF\">\n+ * METHOD_DEF</a> tokens:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;RightCurly&quot;&gt;\n+ *   &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;\n+ *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_ELSE, METHOD_DEF&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0ODk1NA==", "bodyText": "please name it like InputNoCodeInFile to have some reference to existing Check but not that significant.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483648954", "createdAt": "2020-09-04T14:25:50Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/meta/inputs/checks/NoCodeInFileCheck.java", "diffHunk": "@@ -0,0 +1,79 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.meta.inputs.checks;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks whether file contains code. Files which are considered to have no code:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * File with no text\n+ * </li>\n+ * <li>\n+ * File with single line comment(s)\n+ * </li>\n+ * <li>\n+ * File with a multi line comment(s).\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"NoCodeInFile\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <p>\n+ * Content of the files:\n+ * </p>\n+ * <pre>\n+ * // single line comment // violation\n+ * </pre>\n+ * <pre>\n+ * /* // violation\n+ *  block comment\n+ * *&#47;\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code nocode.in.file}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.33\n+ */\n+@StatelessCheck\n+public abstract class NoCodeInFileCheck extends AbstractCheck {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5Mzg3Ng=="}, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MDIzMQ==", "bodyText": "I agree.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483650231", "createdAt": "2020-09-04T14:27:55Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java", "diffHunk": "@@ -249,7 +253,8 @@ private static boolean shouldSkipInputFileNameCheck(String path, String fileName\n                 // special directory for files that can't be renamed or are secondary inputs\n                 || path.contains(File.separatorChar + \"inputs\" + File.separatorChar)\n                 // all inputs must start with 'messages'\n-                || path.contains(File.separatorChar + \"translation\" + File.separatorChar);\n+                || path.contains(File.separatorChar + \"translation\" + File.separatorChar)\n+                || \".DS_Store\".equals(fileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MjkwOA=="}, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjA5MQ==", "bodyText": "please share violations, it is not not good to suppress, and this files are not \"expected\" files.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652091", "createdAt": "2020-09-04T14:30:58Z", "author": {"login": "romani"}, "path": "config/checkstyle_non_main_files_suppressions.xml", "diffHunk": "@@ -68,6 +68,8 @@\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]ant[\\\\/]checkstyleanttask[\\\\/]ExpectedCheckstyleAntTaskXmlOutput\\.xml\"/>\n   <suppress id=\"lineLength\"\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]translation[\\\\/]Expected.*\\.xml\"/>\n+  <suppress id=\"lineLength\"\n+            files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]meta[\\\\/].*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjQ2Ng==", "bodyText": "please share violations, we should not have violations is such files.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652466", "createdAt": "2020-09-04T14:31:35Z", "author": {"login": "romani"}, "path": "config/checkstyle_input_suppressions.xml", "diffHunk": "@@ -9,6 +9,9 @@\n   <!-- Suppress miscellaneous files -->\n   <suppress checks=\"Regexp\" files=\"package-info.java\"/>\n \n+  <!-- Suppress input files for JavadocMetadataScraper -->\n+  <suppress checks=\"Regexp\" files=\"meta[\\\\/].*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjY0OQ==", "bodyText": "should be removed, see details below", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652649", "createdAt": "2020-09-04T14:31:57Z", "author": {"login": "romani"}, "path": ".ci/jsoref-spellchecker/whitelist.words", "diffHunk": "@@ -288,6 +288,7 @@ CStyle\n csv\n ctor\n ctx\n+customchecks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0208e8ae5823edee26b6d49c02ab2b196f24f270", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0208e8ae5823edee26b6d49c02ab2b196f24f270", "committedDate": "2020-09-04T06:33:04Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "da5e1080928ca9cda9c938e56d4a33d1a9e3f165", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/da5e1080928ca9cda9c938e56d4a33d1a9e3f165", "committedDate": "2020-09-05T13:37:23Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMzU5MTUz", "url": "https://github.com/checkstyle/checkstyle/pull/8783#pullrequestreview-483359153", "createdAt": "2020-09-07T08:32:57Z", "commit": {"oid": "da5e1080928ca9cda9c938e56d4a33d1a9e3f165"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da5e1080928ca9cda9c938e56d4a33d1a9e3f165", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/da5e1080928ca9cda9c938e56d4a33d1a9e3f165", "committedDate": "2020-09-05T13:37:23Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "b5c7ba3efa51c54b815054714f3c467bfc47819b", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b5c7ba3efa51c54b815054714f3c467bfc47819b", "committedDate": "2020-09-07T13:28:38Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTMwMjA5", "url": "https://github.com/checkstyle/checkstyle/pull/8783#pullrequestreview-484930209", "createdAt": "2020-09-09T11:55:46Z", "commit": {"oid": "b5c7ba3efa51c54b815054714f3c467bfc47819b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NTo0N1rOHPDvtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1NTo0N1rOHPDvtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MjA1NA==", "bodyText": "lineLegth\n\nplease fix typo, to let CI be green.", "url": "https://github.com/checkstyle/checkstyle/pull/8783#discussion_r485552054", "createdAt": "2020-09-09T11:55:47Z", "author": {"login": "romani"}, "path": "config/checkstyle_non_main_files_suppressions.xml", "diffHunk": "@@ -68,6 +68,10 @@\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]ant[\\\\/]checkstyleanttask[\\\\/]ExpectedCheckstyleAntTaskXmlOutput\\.xml\"/>\n   <suppress id=\"lineLength\"\n          files=\"src[\\\\/]test[\\\\/]resources[\\\\/].*[\\\\/]checks[\\\\/]translation[\\\\/]Expected.*\\.xml\"/>\n+  <!-- we cannot suppress JavadocScraper test inputs' line lengths at will break code logic.\n+       Module javadocs in main src do not have lineLegth violations -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c7ba3efa51c54b815054714f3c467bfc47819b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "committedDate": "2020-09-09T13:35:40Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5c7ba3efa51c54b815054714f3c467bfc47819b", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b5c7ba3efa51c54b815054714f3c467bfc47819b", "committedDate": "2020-09-07T13:28:38Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}, "afterCommit": {"oid": "2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "author": {"user": {"login": "gaurabdg", "name": "Gaurab Dasgupta"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e", "committedDate": "2020-09-09T13:35:40Z", "message": "Issue #8771: Improve code coverage for metadata generator classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MDE4NDI1", "url": "https://github.com/checkstyle/checkstyle/pull/8783#pullrequestreview-485018425", "createdAt": "2020-09-09T13:39:32Z", "commit": {"oid": "2e43fc869e85bace5fce81cd0b6c42c8d78a1d1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1070, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}