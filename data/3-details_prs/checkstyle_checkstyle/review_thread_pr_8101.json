{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTAwNDM3", "number": 8101, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1OToxOFrODx9UTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyODo0NlrODydYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzExNDM5OnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1OToxOFrOGFuLew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NjoyOFrOGF2T8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjY2Nw==", "bodyText": "why warn comment is before code line?", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408652667", "createdAt": "2020-04-15T07:59:18Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault {\n+    /* warn */private String unitAbbrev2 = \"\\u03bcs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4OTMzNA==", "bodyText": "No reason, I'll move it to the end.", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408689334", "createdAt": "2020-04-15T09:01:12Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault {\n+    /* warn */private String unitAbbrev2 = \"\\u03bcs\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjY2Nw=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NTkwNg==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408785906", "createdAt": "2020-04-15T11:56:28Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault {\n+    /* warn */private String unitAbbrev2 = \"\\u03bcs\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjY2Nw=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzExODMyOnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMDoyNVrOGFuOFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NjoyNlrOGF2T5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MzMzNA==", "bodyText": "please add here escape that is ignored by check (with property allowEscapesForControlCharacters)", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408653334", "createdAt": "2020-04-15T08:00:25Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo {\n+    private String unitAbbrev9 = \"\\u03bcs\"; /* warn */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4OTM5Ng==", "bodyText": "Okay", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408689396", "createdAt": "2020-04-15T09:01:17Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo {\n+    private String unitAbbrev9 = \"\\u03bcs\"; /* warn */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MzMzNA=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NTg5Mg==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408785892", "createdAt": "2020-04-15T11:56:26Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo {\n+    private String unitAbbrev9 = \"\\u03bcs\"; /* warn */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MzMzNA=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEyMzU4OnYy", "diffSide": "RIGHT", "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMTo1MFrOGFuRRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzowODoyNlrOGGXbcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDE1MA==", "bodyText": "there are 4 properties + default config, but only 2 tests here", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408654150", "createdAt": "2020-04-15T08:01:50Z", "author": {"login": "strkkk"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"4:44: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testTwo() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+        moduleConfig.addAttribute(\"allowEscapesForControlCharacters\", \"true\");\n+\n+        final String[] expectedViolation = {\n+            \"4:34: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4OTU2OA==", "bodyText": "Okay, I'll add more test cases.", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408689568", "createdAt": "2020-04-15T09:01:34Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"4:44: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testTwo() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+        moduleConfig.addAttribute(\"allowEscapesForControlCharacters\", \"true\");\n+\n+        final String[] expectedViolation = {\n+            \"4:34: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDE1MA=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NTgyOA==", "bodyText": "Done.\nJust one thing, for the test with allowByTailComment, I had to write /* warn */ at the start as the check was considering it as a tail comment and wasn't getting violated.\nAlso, I had one doubt. In the documentation of AvoidEscapedUnicodeCharacters, I think it should be tail comment instead of trail comment as shown in the code below.\n <p>\n * Example of using escapes with trail comment:\n * </p>\n * <pre>\n * String unitAbbrev = \"&#92;u03bcs\"; // Greek letter mu, \"s\"\n * </pre>\n * <p>An example of how to configure the check to allow using escapes\n * if trail comment is present:\n * </p>", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r408785828", "createdAt": "2020-04-15T11:56:19Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"4:44: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testTwo() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+        moduleConfig.addAttribute(\"allowEscapesForControlCharacters\", \"true\");\n+\n+        final String[] expectedViolation = {\n+            \"4:34: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDE1MA=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyODQ5OA==", "bodyText": "it is fine", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409328498", "createdAt": "2020-04-16T07:08:26Z", "author": {"login": "strkkk"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"4:44: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testTwo() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+                \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+        moduleConfig.addAttribute(\"allowEscapesForControlCharacters\", \"true\");\n+\n+        final String[] expectedViolation = {\n+            \"4:34: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[.\"\n+                + \"/IDENT[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersTwo']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev9']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDE1MA=="}, "originalCommit": {"oid": "729c7a3c864531ccd19a9ae11d46a93fa9f60a80"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTQwNDE0OnYy", "diffSide": "RIGHT", "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzowOTozOFrOGGXd1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToxOToxMlrOGGglBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyOTExMA==", "bodyText": "please make naming consistent and make in testDefault", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409329110", "createdAt": "2020-04-16T07:09:38Z", "author": {"login": "strkkk"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe43cfea4eded528266c6dd6cfaf35e04dcafb4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3ODQwNQ==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409478405", "createdAt": "2020-04-16T11:19:12Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyOTExMA=="}, "originalCommit": {"oid": "cbe43cfea4eded528266c6dd6cfaf35e04dcafb4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTQwNTM4OnYy", "diffSide": "RIGHT", "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzoxMDowMFrOGGXeow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToxOToxN1rOGGglMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyOTMxNQ==", "bodyText": "here too, other tests have property name in it", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409329315", "createdAt": "2020-04-16T07:10:00Z", "author": {"login": "strkkk"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+            \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"4:34: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testTwo() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe43cfea4eded528266c6dd6cfaf35e04dcafb4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3ODQ0OA==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409478448", "createdAt": "2020-04-16T11:19:17Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidEscapedUnicodeCharactersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;\n+\n+public class XpathRegressionAvoidEscapedUnicodeCharactersTest extends AbstractXpathTestSupport {\n+    private final String checkName = AvoidEscapedUnicodeCharactersCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testOne() throws Exception {\n+        final File fileToProcess = new File(getPath(\n+            \"SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault.java\"));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(AvoidEscapedUnicodeCharactersCheck.class);\n+\n+        final String[] expectedViolation = {\n+            \"4:34: \" + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),\n+        };\n+\n+        final List<String> expectedXpathQueries = Arrays.asList(\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR[./STRING_LITERAL[@text='\\\\u03bcs']]\",\n+            \"/CLASS_DEF[./IDENT\"\n+                + \"[@text='SuppressionXpathRegressionAvoidEscapedUnicodeCharactersDefault']]\"\n+                + \"/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='unitAbbrev2']]\"\n+                + \"/ASSIGN/EXPR/STRING_LITERAL[@text='\\\\u03bcs']\"\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expectedViolation,\n+                expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testTwo() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyOTMxNQ=="}, "originalCommit": {"oid": "cbe43cfea4eded528266c6dd6cfaf35e04dcafb4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTQwNzM0OnYy", "diffSide": "RIGHT", "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersAllEscaped.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzoxMDozN1rOGGXf6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToxOToyMVrOGGglWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyOTY0Mg==", "bodyText": "again comment is before", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409329642", "createdAt": "2020-04-16T07:10:37Z", "author": {"login": "strkkk"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersAllEscaped.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersAllEscaped {\n+    /* warn */ private String unitAbbrev9 = \"\\u03bcs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe43cfea4eded528266c6dd6cfaf35e04dcafb4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3ODQ4OA==", "bodyText": "Done", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409478488", "createdAt": "2020-04-16T11:19:21Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/it/resources/org/checkstyle/suppressionxpathfilter/avoidescapedunicodecharacters/SuppressionXpathRegressionAvoidEscapedUnicodeCharactersAllEscaped.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.checkstyle.suppressionxpathfilter.avoidescapedunicodecharacters;\n+\n+public class SuppressionXpathRegressionAvoidEscapedUnicodeCharactersAllEscaped {\n+    /* warn */ private String unitAbbrev9 = \"\\u03bcs\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyOTY0Mg=="}, "originalCommit": {"oid": "cbe43cfea4eded528266c6dd6cfaf35e04dcafb4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjM2ODY4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/illegaltype/InputIllegalTypeMemberModifiers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyODo0NlrOGGg4jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0ODoyMVrOGGhfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MzQwNw==", "bodyText": "what is this?", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409483407", "createdAt": "2020-04-16T11:28:46Z", "author": {"login": "strkkk"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/illegaltype/InputIllegalTypeMemberModifiers.java", "diffHunk": "@@ -3,7 +3,7 @@\n import java.util.Hashtable;\n //configuration: default\n public class InputIllegalTypeMemberModifiers {\n-    private AbstractClass a = null; //WARNING\n+    private com.puppycrawl.tools.checkstyle.checks.coding.illegaltype.InputIllegalTypeMemberModifiers.AbstractClass a = null; //WARNING", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317dae18171bd1a3507952db66e91e3e23fe0d88"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTM5MA==", "bodyText": "I'll remove this. This shouldn't be here. It is a change is from my other issue. IntelliJ must have added it while smart checkout.", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409491390", "createdAt": "2020-04-16T11:44:23Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/illegaltype/InputIllegalTypeMemberModifiers.java", "diffHunk": "@@ -3,7 +3,7 @@\n import java.util.Hashtable;\n //configuration: default\n public class InputIllegalTypeMemberModifiers {\n-    private AbstractClass a = null; //WARNING\n+    private com.puppycrawl.tools.checkstyle.checks.coding.illegaltype.InputIllegalTypeMemberModifiers.AbstractClass a = null; //WARNING", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MzQwNw=="}, "originalCommit": {"oid": "317dae18171bd1a3507952db66e91e3e23fe0d88"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MzQzNA==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/8101#discussion_r409493434", "createdAt": "2020-04-16T11:48:21Z", "author": {"login": "Gaurav-Punjabi"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/illegaltype/InputIllegalTypeMemberModifiers.java", "diffHunk": "@@ -3,7 +3,7 @@\n import java.util.Hashtable;\n //configuration: default\n public class InputIllegalTypeMemberModifiers {\n-    private AbstractClass a = null; //WARNING\n+    private com.puppycrawl.tools.checkstyle.checks.coding.illegaltype.InputIllegalTypeMemberModifiers.AbstractClass a = null; //WARNING", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MzQwNw=="}, "originalCommit": {"oid": "317dae18171bd1a3507952db66e91e3e23fe0d88"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1131, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}