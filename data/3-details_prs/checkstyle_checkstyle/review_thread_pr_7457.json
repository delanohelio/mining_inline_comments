{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDU2OTA4", "number": 7457, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyNDowN1rODYUR2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzozNDowNFrODc4WcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODI0NjY0OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_coding.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyNDowN1rOFeG5Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1MDozNlrOFfaclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA==", "bodyText": "This is not just an anti-pattern. This is also the way to a hard-to-detect memory leak. Because the implicitly created anonymous class is not static, it holds a reference to the this pointer of the outer class. And if a reference to such a collection is stored somewhere outside, its outer class will survive the GC as long as the inner collection.\nclass outer {\n    List<String> list = new ArrayList<String>(){{\n        add(\"foo\");\n    }};\n  // returns more than just a list\n  public List<String> getList() {\n    return Collections.unmodifiableList(list);\n  }\n}\nis actually\nclass outer {\n    List<String> list = new inner(this);\n\n    class inner extends ArrayList<String> {\n        outer outerThis;\n        {\n            add(\"foo\");\n        }\n        inner(outer outerThis) {\n            this.outerThis = outerThis;\n        }\n    }\n}\nPlease add this to the docs. People love explanations.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r367114574", "createdAt": "2020-01-15T21:24:07Z", "author": {"login": "pbludov"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNDgyNA==", "bodyText": "https://www.baeldung.com/java-double-brace-initialization\n\nDisadvantages of Using Double Braces\nHolds a hidden reference to the enclosing instance, which may cause memory leaks", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r367124824", "createdAt": "2020-01-15T21:48:26Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA=="}, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI2ODYyMw==", "bodyText": "I am familiar with this issue (hidden reference)\nI thought mentioning it is just a complication of description.\n@pbludov @rnveach do you think it makes sense to add code examples, or just description with (or without) link is enough?", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r367268623", "createdAt": "2020-01-16T07:38:44Z", "author": {"login": "strkkk"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA=="}, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODI0MQ==", "bodyText": "I feel description with links is good enough. The decompiled form of the code is not important to the check, imo. We can still add code examples for the violations the check will add.\nI would look for a more official link then the one I provided, if possible.  It was just the first link that came up in a google search.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r367388241", "createdAt": "2020-01-16T12:21:21Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA=="}, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjIyNQ==", "bodyText": "I like this article: https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r367392225", "createdAt": "2020-01-16T12:31:46Z", "author": {"login": "pbludov"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA=="}, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MzQ3OQ==", "bodyText": "done.\nI didn't find any \"official\" link, so last one (jooq) seems good to me.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r368483479", "createdAt": "2020-01-20T10:50:36Z", "author": {"login": "strkkk"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -173,6 +173,87 @@ int[] a2 = new int[]{\n       </subsection>\n     </section>\n \n+    <section name=\"AvoidDoubleBraceInitialization\">\n+      <p>Since Checkstyle 8.29</p>\n+      <subsection name=\"Description\" id=\"AvoidDoubleBraceInitialization_Description\">\n+        <p>\n+          Detects double brace initialization.\n+        </p>\n+        <p>\n+          Rationale: Double brace initialization may look cool, but it is considered\n+          as anti-pattern and should be avoided.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNDU3NA=="}, "originalCommit": {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU3OTY4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzozMTozMlrOFhtFhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxNTo0OVrOFh9jBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjAyMQ==", "bodyText": "please add one case like this - https://stackoverflow.com/a/1958961/1015848\nand like https://strkkk.github.io/checkstyle/6480/apache-ant/index.html#A1", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r370886021", "createdAt": "2020-01-24T23:31:32Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.avoiddoublebraceinitialization;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/*\n+ * Config = default\n+ */\n+public class InputAvoidDoubleBraceInitialization {\n+    void m() {\n+        ArrayList<?> list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            // some comment\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            /* comment */ {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            /* comment */\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } /* comment */\n+        };\n+        list = new ArrayList<Object>() {\n+            ;\n+            ;\n+            {}\n+            ;\n+            ;\n+            ;\n+        };\n+        Object obj = new Serializable() {  // violation\n+            {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTcxOQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371155719", "createdAt": "2020-01-27T10:15:49Z", "author": {"login": "strkkk"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.avoiddoublebraceinitialization;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/*\n+ * Config = default\n+ */\n+public class InputAvoidDoubleBraceInitialization {\n+    void m() {\n+        ArrayList<?> list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            // some comment\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            /* comment */ {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            /* comment */\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } /* comment */\n+        };\n+        list = new ArrayList<Object>() {\n+            ;\n+            ;\n+            {}\n+            ;\n+            ;\n+            ;\n+        };\n+        Object obj = new Serializable() {  // violation\n+            {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjAyMQ=="}, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU4MjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzozMzo0NVrOFhtHTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxNTo1NlrOFh9jQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw==", "bodyText": "please add this link also  https://www.baeldung.com/java-double-brace-initialization\nit has a bit more items as reason.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r370886477", "createdAt": "2020-01-24T23:33:45Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See a\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzMzMzMQ==", "bodyText": "@romani you mean replace current one or add one more?", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371033331", "createdAt": "2020-01-26T22:15:04Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See a\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw=="}, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzNjIwNQ==", "bodyText": "Add one more link, your link has more details on some points", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371036205", "createdAt": "2020-01-26T23:09:19Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See a\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw=="}, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTc3OQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371155779", "createdAt": "2020-01-27T10:15:56Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See a\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw=="}, "originalCommit": {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTgwNTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjo0MDo0N1rOFiJgRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1MjoyNlrOFiVb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MTYyMQ==", "bodyText": "does it make sense to move this lambda to field or make it as method to use method reference ?\nwe do not have that much methods in class, so it will looks good to be not lambda, .... no need to instantiate it each time.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371351621", "createdAt": "2020-01-27T16:40:47Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.30\n+ */\n+@StatelessCheck\n+public class AvoidDoubleBraceInitializationCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"avoid.double.brace.init\";\n+\n+    /**\n+     * List of token types that are used in {@link #hasOnlyInitialization(DetailAST)}.\n+     */\n+    private static final List<Integer> IGNORED_TYPES = Arrays.asList(\n+        TokenTypes.INSTANCE_INIT,\n+        TokenTypes.SEMI,\n+        TokenTypes.LCURLY,\n+        TokenTypes.RCURLY\n+    );\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.OBJBLOCK};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() == TokenTypes.LITERAL_NEW\n+            && hasOnlyInitialization(ast)) {\n+            log(ast, MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks that block has at least one instance init block and no other class members.\n+     *\n+     * @param objBlock token to check\n+     * @return true if there is least one instance init block and no other class members,\n+     *     false otherwise\n+     */\n+    private static boolean hasOnlyInitialization(DetailAST objBlock) {\n+        final boolean hasInitBlock = objBlock.findFirstToken(TokenTypes.INSTANCE_INIT) != null;\n+        final Predicate<DetailAST> hasMembers = token -> !IGNORED_TYPES.contains(token.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzExNQ==", "bodyText": "I extracted lambda.\nI couldn't find a readable way to extract method reference", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371547115", "createdAt": "2020-01-27T23:52:26Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.30\n+ */\n+@StatelessCheck\n+public class AvoidDoubleBraceInitializationCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"avoid.double.brace.init\";\n+\n+    /**\n+     * List of token types that are used in {@link #hasOnlyInitialization(DetailAST)}.\n+     */\n+    private static final List<Integer> IGNORED_TYPES = Arrays.asList(\n+        TokenTypes.INSTANCE_INIT,\n+        TokenTypes.SEMI,\n+        TokenTypes.LCURLY,\n+        TokenTypes.RCURLY\n+    );\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.OBJBLOCK};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() == TokenTypes.LITERAL_NEW\n+            && hasOnlyInitialization(ast)) {\n+            log(ast, MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks that block has at least one instance init block and no other class members.\n+     *\n+     * @param objBlock token to check\n+     * @return true if there is least one instance init block and no other class members,\n+     *     false otherwise\n+     */\n+    private static boolean hasOnlyInitialization(DetailAST objBlock) {\n+        final boolean hasInitBlock = objBlock.findFirstToken(TokenTypes.INSTANCE_INIT) != null;\n+        final Predicate<DetailAST> hasMembers = token -> !IGNORED_TYPES.contains(token.getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MTYyMQ=="}, "originalCommit": {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA3MDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "isResolved": true, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNzo1MlrOFiVs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0NDoyNVrOFlrp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA==", "bodyText": "Why does the field matter? Isn't there still a concern for a memory leak?", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371551448", "createdAt": "2020-01-28T00:07:52Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3MDc5OA==", "bodyText": "It is, but other class members can produce side effects, which can cause false positives.\nSo this check is focused only on \"pure\" double-brace init.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371770798", "createdAt": "2020-01-28T12:24:23Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDQxNw==", "bodyText": "Then shouldn't we add some warning or message saying so? All it says it is \"ok\", no mention that check will not look for these type of areas and why.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371780417", "createdAt": "2020-01-28T12:46:20Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjQ5OQ==", "bodyText": "Can you give an example of the message? I am not really understand your point.\nDouble brace initialization means anon class when its body contains only init blocks. In this case this anon instance has not only initialization, but something else.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371782499", "createdAt": "2020-01-28T12:50:56Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4OTg1NA==", "bodyText": "Maybe something like in the description or with the examples.\nThis check strictly only looks for double brace initialization and therefore will ignore certain cases where the anonymous class can have fields or methods. (Insert Example) Though these will create the same memory issues as double brace, the extra fields/methods can produce side effects (Insert some reason/example if possible) if changed incorrectly.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371789854", "createdAt": "2020-01-28T13:06:50Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMjAwNQ==", "bodyText": "changed", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372112005", "createdAt": "2020-01-28T23:15:27Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExOTgzOQ==", "bodyText": "the extra class members can produce side effects if changed incorrectly.\n\nI do not understand this phrase. @rnveach, can you explain what you mean by if changed incorrectly ?\nProbably simply the extra class members can produce side effects and might be by design. Check is detecting only simple cases.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372119839", "createdAt": "2020-01-28T23:38:43Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyOTU3Ng==", "bodyText": "Check is detecting only simple cases.\nAs for me, this is a duplication of the first sentence.\nCheck only looks for double brace initialization and it ignores cases where the anonymous class has fields or methods.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372129576", "createdAt": "2020-01-29T00:13:42Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMzE3Mw==", "bodyText": "sounds good to me.\n@rnveach , please review.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372133173", "createdAt": "2020-01-29T00:27:44Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MTY0OQ==", "bodyText": "the extra class members can produce side effects if changed incorrectly.\n\nThis part of my sentence was in relation to #7457 (comment) where you said\n\nIt is, but other class members can produce side effects, which can cause false positives.\n\nI took false positives to mean they could be changed but had to be done carefully. Feel free to add your own verbage mine was just an example as I wasn't sure what you were referring to as false positives.\nI am mostly just looking for something that says \"We check this type. This other type still has the same issue, but we can't flag it for XYZ. Here is an example of this other type.\"\nFrom what we just wrote, I wasn't sure why we had to ignore these with fields/methods. I was just thinking in advance of people coming and saying they wanted these other types to be flasgged too.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372641649", "createdAt": "2020-01-29T21:33:10Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NDUzMQ==", "bodyText": "@strkkk , please show cases of real code where fields/methods are used, you probably found them during regression. Please share them.\nhttps://rules.sonarsource.com/java/RSPEC-3599 , there is no mentioning of field/method. It does not mean that such spec is right, but it is a point.\nhttps://pmd.github.io/latest/pmd_rules_java_bestpractices.html#doublebraceinitialization - here too.\nWhat about summary:\nDetects anonymous class which only has a class cody as single instance initializer.\nAfter Rationale (but before examples) we can make note: This Check ignores any comments and semicolons in class body.\nDoublebrace is human term because it usually looks like {{ but it is not a special a part of language.\nInstance Initializers - https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\nclass body keep initializers - https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.1.6\nSo name of Check can be in human friendly as how usually users know this, but lets be JDK terminology specific in documentation to be exact.\nTo my mind any field/method presence is NOT a DoubleBrace pattern, it is some thing else, and probably by design, but this Check is targeting cases of lazy engineers that tried to cut corners to init object in statement where it is created..\nBy the way .... we need tests for few initializers in class body.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372674531", "createdAt": "2020-01-29T22:49:02Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3ODM2MQ==", "bodyText": "@romani I don't understand your point.\n\nI do not have real code with fields/methods (where can I take them from?)\nThere can be several initializers and there is a test case for it (for 2 init blocks).\nDo you mean to change implementation to detect only one init block? In my mind, several blocks or one - doesn't matter, it is same issue.\n\n\n\nbut lets be JDK terminology specific in documentation to be exact\n\nWhat do you mean? I think it is make sense to use common \"doublebrace\"", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372878361", "createdAt": "2020-01-30T10:47:29Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMjYyNg==", "bodyText": "I do not have real code with fields/methods (where can I take them from?)\n\nin such cases the most easy approach is to modify Check to report only cases with fields and methods and run regression.\nBut looks like we do not need this as we now almost agree that such case is not boublebrace pattern at all, it is just fancy annonymous class with methods/fields and initializer.\n\nThere can be several initializers and there is a test case for it (for 2 init blocks)\n\nok, I see them now, my bad.\nIt would be good to add case new ArrayList<Object>() {{ add(\"1\");}{ add(\"2\");}};.\nas it is most used form. You have cases where { are on different lines, event is same, better to have case in form that is widely used (braces close to each other - {{).\n\nDo you mean to change implementation to detect only one init block? In my mind, several blocks or one - doesn't matter, it is same issue.\n\nNo problem, to report on several too, we just need to adjust description to be clear on what we detect - Detects anonymous class which only has a class cody as set of instance initializers.\n\nWhat do you mean?\n\nI meant to extend description ..... Rationale: Double brace initialization (set of <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\"> Instance Initializers</a> in class body) may look cool ...", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r373202626", "createdAt": "2020-01-30T21:27:44Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTAxNQ==", "bodyText": "I think // OK, there is an additional field\nshould be changed to \"// OK as it is not pure double brace pattern\"", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r373211015", "createdAt": "2020-01-30T21:47:24Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1Njg4MA==", "bodyText": "I am satisfied.\n@rnveach , please finalize review.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r375056880", "createdAt": "2020-02-05T04:44:25Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA3MzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowOTozNlrOFiVurA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo0NjozOVrOFijryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTkxNg==", "bodyText": "comments are alone commas are ignored\n\nI'm not sure I understand this phrase, also I don't see a comma. Was this suppose to be semicolon?", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371551916", "createdAt": "2020-01-28T00:09:36Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDU1Mw==", "bodyText": "corrected", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371780553", "createdAt": "2020-01-28T12:46:39Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTkxNg=="}, "originalCommit": {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA5NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzozMjoyOVrOFlKUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDoxNjozMFrOFloAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDc3OQ==", "bodyText": "Though these might create the same ...", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374510779", "createdAt": "2020-02-04T07:32:29Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * Check ignores any comments and semicolons in class body.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments and semicolons are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Check only looks for double brace initialization and it ignores cases\n+ * where the anonymous class has fields or methods.\n+ * Though these will create the same memory issues as double brace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Njk5NA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374996994", "createdAt": "2020-02-05T00:16:30Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * Check ignores any comments and semicolons in class body.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments and semicolons are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Check only looks for double brace initialization and it ignores cases\n+ * where the anonymous class has fields or methods.\n+ * Though these will create the same memory issues as double brace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDc3OQ=="}, "originalCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA5OTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzozNDowNFrOFlKWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDoxNjoyNFrOFln_8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMTI5MA==", "bodyText": "... memory leak, if the anonymous class is returned outside and held by other object(s). Created .....\nas if collection is used internally ... it does not make any problem.", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374511290", "createdAt": "2020-02-04T07:34:04Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Njk3OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374996978", "createdAt": "2020-02-05T00:16:24Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMTI5MA=="}, "originalCommit": {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1499, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}