{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjIwMjY2", "number": 8327, "title": " Issue #7103: Add support for Java 14 text block syntax", "bodyText": "Issue #7103: Add support for Java 14 text block syntax\n\nJava Grammar\nRelevant grammar from JLS:\nA text block consists of zero or more characters enclosed by opening and closing delimiters. Characters may be represented by escape sequences (3.10.7), but the newline and double quote characters that must be represented with escape sequences in a string literal may be represented directly in a text block.\nTextBlock:\n\" \" \" { TextBlockWhiteSpace } LineTerminator { TextBlockCharacter } \" \" \"\nTextBlockWhiteSpace:\nWhiteSpace but not LineTerminator\nTextBlockCharacter:\nInputCharacter but not \nEscapeSequence\nLineTerminator\n\nLexer multiplexing rationale:\nWhen attempting to build the desired text blocks AST:\n     `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" \n            |--TEXT_BLOCK_CONTENT -> \\n             Hello, world!              /n\n            `--TEXT_BLOCK_LITERAL_END -> \"\"\" \n\nApproach 1:\nMy first attempt to create the necessary tokens was to simply make a TEXT_BLOCK_DELIM token, which was to be used as both the TEXT_BLOCK_LITERAL_BEGIN and TEXT_BLOCK_LITERAL_END.  While I also tried to make the two tokens separate in the lexer grammar (since a text block must begin with \"\"\"\\n), this nearly doubled the list of ambiguities produced upon generation of the lexer. To return the desired tokens, I tried many different approaches to the lexer grammar, but all had the same issue: the lexer would never execute the code in the TEXT_BLOCK_CONTENT rule.  Consider:\n    String hello = \"\"\"\n                Hello, world!\n                \"\"\";\n\n\nFor this example, the lexer would produce the following tokens:\nIDENT -> IDENT -> ASSIGN -> TEXT_BLOCK_DELIM -> IDENT -> COMMA -> exception\nWith the lexer having no knowledge of the preceding token, it was lexing the tokens as it would for java code.  I tried several different hacks, such as combining the TEXT_BLOCK_LITERAL_BEGIN and TEXT_BLOCK_CONTENT into one lexer rule, which did work, but made it difficult to keep track of line numbers, columns, etc.  Remember, in ANTLR2, we can only return one token per iteration of the lexer. I had to create an imaginary token in the parser to make up for the missing TEXT_BLOCK_CONTENT token.\nApproach 2:\nI mimicked the comment implementation, which did work, but was very complicated for such a simple task and required another token stream.\nDetails for the current implementation:\nIn newer versions of ANTLR, we could have simply emitted the tokens that we needed to within the lexer, or created fragments and used different lexer modes. This is not possible in ANTLR 2,\nand the prescribed solution is to use lexer multiplexing. Please see here. This solution is what I settled on, and is the clear winner here in my opinion. This approach makes it very simple to correctly track line numbers, columns, etc, and handle the complicated characters allowed in the body of a text block, while adding very little additional code to Checkstyle.\nLexer multiplexing makes it simple to create the necessary tokens to produce the AST that we want, TEXT_BLOCK_BEGIN, TEXT_BLOCK_CONTENT, and TEXT_BLOCK_END while lexing text block syntax. In addition, this secondary lexer makes it trivial to modify the appearance of the TEXT_BLOCK_CONTENT or create particular nodes. Example:\n    |   |   `--IDENT -> String [7:4]\n    |   |--IDENT -> escape [7:11]\n    |   |--ASSIGN -> = [7:18]\n    |   |   `--EXPR -> EXPR [7:20]\n    |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [7:20]\n    |   |           |--TEXT_BLOCK_CONTENT ->                 <html>\\u000D\\u000A\\n [8:0]\n    |   |           |--NEWLINE -> \\n [8:36]\n    |   |           |--TEXT_BLOCK_CONTENT ->                     <body>\\u000D\\u000A\\n [9:0]\n    |   |           |--NEWLINE -> \\n [9:40]\n    |   |           |--TEXT_BLOCK_CONTENT ->                         <p>Hello, world</p>\\u000D\\u000A\\n [10:0]\n    |   |           |--NEWLINE -> \\n [10:57]\n    |   |           |--TEXT_BLOCK_CONTENT ->                     </body>\\u000D\\u000A\\n [11:0]\n    |   |           |--NEWLINE -> \\n [11:41]\n    |   |           |--TEXT_BLOCK_CONTENT ->                 </html>\\u000D\\u000A [12:0]\n    |   |           |--NEWLINE -> \\n [12:35]\n    |   |           |--TEXT_BLOCK_CONTENT ->                  [13:0]\n    |   |           `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:16]\n    |   `--SEMI -> ; [13:19]\n    `--RCURLY -> } [14:0]\n\n\nMy work is based off of the following sources:\nhttps://github.com/nco/antlr2/tree/master/examples/java/multiLexer\nhttps://www.antlr2.org/doc/streams.html\nhttp://www.eso.org/projects/alma/develop/acs/OnlineDocs/ACS_docs/java/dd/db8/classantlr_1_1TokenStreamSelector.htmlm", "createdAt": "2020-06-19T17:27:51Z", "url": "https://github.com/checkstyle/checkstyle/pull/8327", "merged": true, "mergeCommit": {"oid": "fbce7f7b7cad99f713c98e0c859286966707b425"}, "closed": true, "closedAt": "2020-08-03T22:35:55Z", "author": {"login": "nmancus1"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs29LngBqjM0NjM0MzMzNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7Z28LgFqTQ2MDM4Mjk2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1ac1cd0887bbcd0efeec11517a5c7c148ad1118", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f1ac1cd0887bbcd0efeec11517a5c7c148ad1118", "committedDate": "2020-06-19T17:14:25Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "6f38a732a67ede948ad87145c19234c699b76615", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6f38a732a67ede948ad87145c19234c699b76615", "committedDate": "2020-06-19T17:58:21Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f38a732a67ede948ad87145c19234c699b76615", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6f38a732a67ede948ad87145c19234c699b76615", "committedDate": "2020-06-19T17:58:21Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "committedDate": "2020-06-19T19:44:15Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "committedDate": "2020-06-19T19:44:15Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "58b3feea7c9906085e7e7de6ce24954da308c136", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/58b3feea7c9906085e7e7de6ce24954da308c136", "committedDate": "2020-06-25T12:22:29Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58b3feea7c9906085e7e7de6ce24954da308c136", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/58b3feea7c9906085e7e7de6ce24954da308c136", "committedDate": "2020-06-25T12:22:29Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "committedDate": "2020-06-25T13:40:06Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "committedDate": "2020-06-25T13:40:06Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "committedDate": "2020-06-25T21:16:34Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjA5OTY0", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-438209964", "createdAt": "2020-06-26T11:10:46Z", "commit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToxMDo0NlrOGpc_Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToxMDo0NlrOGpc_Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExOTc0Mg==", "bodyText": "Is there another way/ location to exclude this?  Certainly there must be other printed AST text files with line length over 100, but I didn't see any evidence of them being excluded in ant-phase-verify.xml.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446119742", "createdAt": "2020-06-26T11:10:46Z", "author": {"login": "nmancus1"}, "path": "config/ant-phase-verify.xml", "diffHunk": "@@ -114,6 +114,9 @@\n           <!-- Do not validate possible source code remnants after regression testing -->\n           <exclude name=\".ci-temp/**/*\"/>\n \n+          <!-- line length must exceed 100 chars to compare printed AST -->\n+          <exclude name=\"**/InputJava14TextBlocks.txt\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Mjc3MjQ3", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-438277247", "createdAt": "2020-06-26T13:04:41Z", "commit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzowNDo0MlrOGpgHJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoxODo0MVrOGpgjZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3MDkxOA==", "bodyText": "Since the second lexer pushes to the token stream before the TEXT_BLOCK_BEGIN token is returned from the main lexer, we are using the exclude operator to initially not link the AST for TEXT_BLOCK_CONTENT to the textBlock rule so that we can construct the correct form of the AST in the action on line 1737.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446170918", "createdAt": "2020-06-26T13:04:42Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g", "diffHunk": "@@ -1646,6 +1652,14 @@ lambdaBody\n     |    statement)\n     ;\n \n+textBlock\n+    :   !c:TEXT_BLOCK_CONTENT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjYzMQ==", "bodyText": "I am getting complaints from both IDEA and TeamCity about this:  JUnit test method testImpossibleExceptionsJava14TextBlockLexer() contains no assertions which I understand, but why don't the existing tests (see here) cause this warning?", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446176631", "createdAt": "2020-06-26T13:15:45Z", "author": {"login": "nmancus1"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -246,6 +262,30 @@ public void testImpossibleValid() throws Exception {\n                 '4', '4', '.', '4', 'P', '4', 'D', ';');\n     }\n \n+    @Test\n+    public void testImpossibleExceptionsJava14TextBlockLexer() throws Exception {\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mSTD_ESC\", '\\\\', '*', (char) 0xFFFF);\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mONE_DOUBLE_QUOTE\", '\"', '\"');\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mNEWLINE\", '*');\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mTEXT_BLOCK_CONTENT\", (char) 0xFFFF);\n+    }\n+\n+    @Test\n+    public void testImpossibleValidJava14TextBlockLexer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA==", "bodyText": "I would like to know a better way to reuse the existing code (see here) .  Should I make AssertGeneratedJavaLexer.java not final, then extend it, or should I refactor AssertGeneratedJavaLexer.java to work with the new lexer, too?", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446178150", "createdAt": "2020-06-26T13:18:41Z", "author": {"login": "nmancus1"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -267,6 +307,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGeneratedJava14TextBlockLexer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "committedDate": "2020-06-25T21:16:34Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "5d567766023f7701bd33b3d71e5284f8ddb7b63f", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5d567766023f7701bd33b3d71e5284f8ddb7b63f", "committedDate": "2020-06-26T13:37:33Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d567766023f7701bd33b3d71e5284f8ddb7b63f", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5d567766023f7701bd33b3d71e5284f8ddb7b63f", "committedDate": "2020-06-26T13:37:33Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "f3a26fa7627d5e1739b042aba9de2a7275136f1f", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f3a26fa7627d5e1739b042aba9de2a7275136f1f", "committedDate": "2020-07-02T17:32:28Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3a26fa7627d5e1739b042aba9de2a7275136f1f", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f3a26fa7627d5e1739b042aba9de2a7275136f1f", "committedDate": "2020-07-02T17:32:28Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "committedDate": "2020-07-03T04:31:34Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzcwODEx", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-442370811", "createdAt": "2020-07-03T12:11:47Z", "commit": {"oid": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMTo0N1rOGsubOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMTo0N1rOGsubOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTE2MA==", "bodyText": "@pbludov I have added this line, which suppresses the warning locally, but TeamCity is still failing.  Any ideas?", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r449551160", "createdAt": "2020-07-03T12:11:47Z", "author": {"login": "nmancus1"}, "path": "config/intellij-idea-inspections.xml", "diffHunk": "@@ -4616,6 +4616,8 @@\n     ,com.google.checkstyle.test.base.AbstractModuleTestSupport,verify.*, ,\n     ,com.puppycrawl.tools.checkstyle.internal.TestUtil,assert.*, ,\n     ,com.puppycrawl.tools.checkstyle.grammar.AstRegressionTest.AssertGeneratedJavaLexer,verify.*, ,\n+    ,com.puppycrawl.tools.checkstyle.grammar.AstRegressionTest.AssertGeneratedTextBlockLexer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "committedDate": "2020-07-03T04:31:34Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "committedDate": "2020-07-03T13:46:00Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "committedDate": "2020-07-03T13:46:00Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "4f1d2821a2406448bff3590d9beb7af826b96143", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/4f1d2821a2406448bff3590d9beb7af826b96143", "committedDate": "2020-07-03T14:24:43Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f1d2821a2406448bff3590d9beb7af826b96143", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/4f1d2821a2406448bff3590d9beb7af826b96143", "committedDate": "2020-07-03T14:24:43Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "463d86026a0241f07b4218fe029c0269baa40afe", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/463d86026a0241f07b4218fe029c0269baa40afe", "committedDate": "2020-07-03T15:31:40Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "463d86026a0241f07b4218fe029c0269baa40afe", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/463d86026a0241f07b4218fe029c0269baa40afe", "committedDate": "2020-07-03T15:31:40Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "69a99159cfdaeec3777d8874f5ec551555f4af82", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/69a99159cfdaeec3777d8874f5ec551555f4af82", "committedDate": "2020-07-15T00:57:01Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69a99159cfdaeec3777d8874f5ec551555f4af82", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/69a99159cfdaeec3777d8874f5ec551555f4af82", "committedDate": "2020-07-15T00:57:01Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "f1123ee94c17133cc1768fb77f9a570d20850f23", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f1123ee94c17133cc1768fb77f9a570d20850f23", "committedDate": "2020-07-15T11:13:39Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NzM5MDIy", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-455739022", "createdAt": "2020-07-27T12:37:01Z", "commit": {"oid": "f1123ee94c17133cc1768fb77f9a570d20850f23"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjozNzowMVrOG3gj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjozNzowMVrOG3gj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1ODM1NA==", "bodyText": "Should @since tag be here? We agreed to tag new tokens.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r460858354", "createdAt": "2020-07-27T12:37:01Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3595,6 +3595,93 @@\n     public static final int RECORD_DEF =\n             GeneratedJavaTokenTypes.RECORD_DEF;\n \n+    /**\n+     * Beginning of a Java 14 Text Block literal,\n+     * delimited by three double quotes.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     *         String hello = \"\"\"\n+     *                 Hello, world!\n+     *                 \"\"\";\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--IDENT (String)\n+     * |   |--IDENT (hello)\n+     * |   |--ASSIGN (=)\n+     * |   |   `--EXPR\n+     * |   |       `--TEXT_BLOCK_LITERAL_BEGIN (\"\"\")\n+     * |   |           |--TEXT_BLOCK_CONTENT (\\n                Hello, world!\\n                    )\n+     * |   |           `--TEXT_BLOCK_LITERAL_END (\"\"\")\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1123ee94c17133cc1768fb77f9a570d20850f23"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1123ee94c17133cc1768fb77f9a570d20850f23", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f1123ee94c17133cc1768fb77f9a570d20850f23", "committedDate": "2020-07-15T11:13:39Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "e27e59547c184a54feb938bd3b51e9070d251e52", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e27e59547c184a54feb938bd3b51e9070d251e52", "committedDate": "2020-07-27T12:55:56Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Nzc3MDAx", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-455777001", "createdAt": "2020-07-27T13:25:18Z", "commit": {"oid": "e27e59547c184a54feb938bd3b51e9070d251e52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjY3MTg3", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-456267187", "createdAt": "2020-07-28T02:53:37Z", "commit": {"oid": "e27e59547c184a54feb938bd3b51e9070d251e52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e27e59547c184a54feb938bd3b51e9070d251e52", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e27e59547c184a54feb938bd3b51e9070d251e52", "committedDate": "2020-07-27T12:55:56Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/66a26bf641b0704374b188710187b6b5dcdce494", "committedDate": "2020-07-28T11:54:12Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzE3NDI1", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-456717425", "createdAt": "2020-07-28T14:52:52Z", "commit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mjo1MlrOG4Qm8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1Mjo1MlrOG4Qm8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NTU1NA==", "bodyText": "I would rather do no coverage for such hard to catch code and and bump percentage in config.\nwe keep percentage in coverage for generated code only to see diff of coverage on new grammar update and probably discuss what could be covered by real inputs.\nWe do not need to have test on generated code of ANTLR, it is by definition the most trusty code in our code base.\nin addition  we always work on javac compiled sources, so we do not care how code works on incomplete/non-compilable java code", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461645554", "createdAt": "2020-07-28T14:52:52Z", "author": {"login": "romani"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGeneratedTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGeneratedTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGeneratedTextBlockLexer instance =\n+                    new AssertGeneratedTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzI2NTE2", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-456726516", "createdAt": "2020-07-28T15:01:09Z", "commit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMTowOVrOG4RCWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowMTowOVrOG4RCWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MjU3MA==", "bodyText": "please move this update in separate issue, as we will need test is separately, Check tests need to be updated.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461652570", "createdAt": "2020-07-28T15:01:09Z", "author": {"login": "romani"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -2515,6 +2515,8 @@ public native void myTest(); // violation\n                 STRING_LITERAL</a>\n                 , <a href=\"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CHAR_LITERAL\">\n                 CHAR_LITERAL</a>\n+                , <a href=\"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#TEXT_BLOCK_CONTENT\">\n+                TEXT_BLOCK_CONTENT</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzM1MTk4", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-456735198", "createdAt": "2020-07-28T15:10:29Z", "commit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxMDozMFrOG4Rcfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxMDozMFrOG4Rcfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1OTI2Mg==", "bodyText": "this worries me .... we did a lot to keep this file on leash\nlets change name of inner class to AssertGenTextBlockLexer or AssertGeneratedTextLexer something similar to avoid this suppression.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461659262", "createdAt": "2020-07-28T15:10:30Z", "author": {"login": "romani"}, "path": "config/ant-phase-verify.xml", "diffHunk": "@@ -119,6 +119,10 @@\n           <!-- Exclude because printed AST has line length > 100 characters -->\n           <exclude name=\"**/InputJava14InstanceofWithPatternMatchingAST.txt\"/>\n           <exclude name=\"**/InputJava14Records.txt\"/>\n+          <exclude name=\"**/InputJava14TextBlocks.txt\"/>\n+\n+          <!-- line length must be over 100 chars to properly suppress warnings -->\n+          <exclude name=\"**/intellij-idea-inspections.xml\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66a26bf641b0704374b188710187b6b5dcdce494", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/66a26bf641b0704374b188710187b6b5dcdce494", "committedDate": "2020-07-28T11:54:12Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "279498c02b67ff95a42a68befe4606c2052d4bd6", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/279498c02b67ff95a42a68befe4606c2052d4bd6", "committedDate": "2020-07-28T16:42:31Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTQxODQ1", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-457541845", "createdAt": "2020-07-29T13:51:07Z", "commit": {"oid": "279498c02b67ff95a42a68befe4606c2052d4bd6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "279498c02b67ff95a42a68befe4606c2052d4bd6", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/279498c02b67ff95a42a68befe4606c2052d4bd6", "committedDate": "2020-07-28T16:42:31Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e98190ab57157814ea4838697df1759d9a1542cf", "committedDate": "2020-07-29T14:58:52Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTk4MTg2", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-457998186", "createdAt": "2020-07-30T01:12:11Z", "commit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToxMjoxMVrOG5PhXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToyNTo0N1rOG5PvMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw==", "bodyText": "Shouldn't we specify what is the escape character, which is \\?", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462676317", "createdAt": "2020-07-30T01:12:11Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3724,6 +3724,96 @@\n     public static final int COMPACT_CTOR_DEF =\n             GeneratedJavaTokenTypes.COMPACT_CTOR_DEF;\n \n+    /**\n+     * Beginning of a Java 14 Text Block literal,\n+     * delimited by three double quotes.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     *         String hello = \"\"\"\n+     *                 Hello, world!\n+     *                 \"\"\";\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--IDENT (String)\n+     * |   |--IDENT (hello)\n+     * |   |--ASSIGN (=)\n+     * |   |   `--EXPR\n+     * |   |       `--TEXT_BLOCK_LITERAL_BEGIN (\"\"\")\n+     * |   |           |--TEXT_BLOCK_CONTENT (\\n                Hello, world!\\n                    )\n+     * |   |           `--TEXT_BLOCK_LITERAL_END (\"\"\")\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     * @since 8.36\n+     */\n+    public static final int TEXT_BLOCK_LITERAL_BEGIN =\n+            GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_BEGIN;\n+\n+    /**\n+     * Content (text) of a Java 14 text block. This is a\n+     * sequence of (possibly escaped) characters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE2Ng==", "bodyText": "Class name is GeneratedTextBlockLexer", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679166", "createdAt": "2020-07-30T01:23:12Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGenTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGenTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGenTextBlockLexer instance =\n+                    new AssertGenTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,\n+                    boolean.class);\n+            boolean exception;\n+\n+            try {\n+                method.invoke(instance, true);\n+                exception = false;\n+            }\n+            catch (InvocationTargetException ex) {\n+                if (expectPass) {\n+                    throw ex;\n+                }\n+\n+                final Class<?> clss = ex.getTargetException().getClass();\n+                if (clss != NoViableAltForCharException.class\n+                        && clss != SemanticException.class) {\n+                    throw ex;\n+                }\n+                exception = true;\n+            }\n+\n+            if (expectPass) {\n+                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE5Mg==", "bodyText": "same.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679192", "createdAt": "2020-07-30T01:23:19Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGenTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGenTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGenTextBlockLexer instance =\n+                    new AssertGenTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,\n+                    boolean.class);\n+            boolean exception;\n+\n+            try {\n+                method.invoke(instance, true);\n+                exception = false;\n+            }\n+            catch (InvocationTargetException ex) {\n+                if (expectPass) {\n+                    throw ex;\n+                }\n+\n+                final Class<?> clss = ex.getTargetException().getClass();\n+                if (clss != NoViableAltForCharException.class\n+                        && clss != SemanticException.class) {\n+                    throw ex;\n+                }\n+                exception = true;\n+            }\n+\n+            if (expectPass) {\n+                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                        + \" resulted in an exception\");\n+            }\n+            else {\n+                assertTrue(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1Ng==", "bodyText": "Why aren't these double escaped? If a newline is printed as \\n, it seems to me \\ should be printed as \\\\.\nThis seems like an issue to me.", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679856", "createdAt": "2020-07-30T01:25:47Z", "author": {"login": "rnveach"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14TextBlocks.txt", "diffHunk": "@@ -0,0 +1,277 @@\n+CLASS_DEF -> CLASS_DEF [3:0]\n+|--MODIFIERS -> MODIFIERS [3:0]\n+|   `--LITERAL_PUBLIC -> public [3:0]\n+|--LITERAL_CLASS -> class [3:7]\n+|--IDENT -> InputJava14TextBlocks [3:13]\n+`--OBJBLOCK -> OBJBLOCK [4:0]\n+    |--LCURLY -> { [4:0]\n+    |--VARIABLE_DEF -> VARIABLE_DEF [5:4]\n+    |   |--MODIFIERS -> MODIFIERS [5:4]\n+    |   |   |--LITERAL_PRIVATE -> private [5:4]\n+    |   |   |--LITERAL_STATIC -> static [5:12]\n+    |   |   `--FINAL -> final [5:19]\n+    |   |--TYPE -> TYPE [5:25]\n+    |   |   `--IDENT -> CharSequence [5:25]\n+    |   |--IDENT -> type [5:38]\n+    |   |--ASSIGN -> = [5:43]\n+    |   |   `--EXPR -> EXPR [5:45]\n+    |   |       `--STRING_LITERAL -> \"type\" [5:45]\n+    |   `--SEMI -> ; [5:51]\n+    |--STATIC_INIT -> STATIC_INIT [7:4]\n+    |   `--SLIST -> { [7:11]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [8:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [8:8]\n+    |       |   |--TYPE -> TYPE [8:8]\n+    |       |   |   `--IDENT -> String [8:8]\n+    |       |   |--IDENT -> doubleQuotes [8:15]\n+    |       |   `--ASSIGN -> = [8:28]\n+    |       |       `--EXPR -> EXPR [8:30]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [8:30]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \"\"\\n                 [8:33]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [10:16]\n+    |       |--SEMI -> ; [10:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [11:8]\n+    |       |   |--TYPE -> TYPE [11:8]\n+    |       |   |   `--IDENT -> String [11:8]\n+    |       |   |--IDENT -> oneDoubleQuote [11:15]\n+    |       |   `--ASSIGN -> = [11:30]\n+    |       |       `--EXPR -> EXPR [11:32]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [11:32]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \"\\n                \"\\n                 [11:35]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [14:16]\n+    |       |--SEMI -> ; [14:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [15:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [15:8]\n+    |       |   |--TYPE -> TYPE [15:8]\n+    |       |   |   `--IDENT -> String [15:8]\n+    |       |   |--IDENT -> empty [15:15]\n+    |       |   `--ASSIGN -> = [15:21]\n+    |       |       `--EXPR -> EXPR [15:23]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [15:23]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                 [15:26]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [16:16]\n+    |       |--SEMI -> ; [16:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [17:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [17:8]\n+    |       |   |--TYPE -> TYPE [17:8]\n+    |       |   |   `--IDENT -> String [17:8]\n+    |       |   |--IDENT -> oneSingleQuote [17:15]\n+    |       |   `--ASSIGN -> = [17:30]\n+    |       |       `--EXPR -> EXPR [17:32]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [17:32]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                '\\n                 [17:35]\n+    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [19:16]\n+    |       |--SEMI -> ; [19:19]\n+    |       |--VARIABLE_DEF -> VARIABLE_DEF [20:8]\n+    |       |   |--MODIFIERS -> MODIFIERS [20:8]\n+    |       |   |--TYPE -> TYPE [20:8]\n+    |       |   |   `--IDENT -> String [20:8]\n+    |       |   |--IDENT -> escape [20:15]\n+    |       |   `--ASSIGN -> = [20:22]\n+    |       |       `--EXPR -> EXPR [20:24]\n+    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [20:24]\n+    |       |               |--TEXT_BLOCK_CONTENT -> \\n                <html>\\u000D\\u000A\\n\\n                    <body>\\u000D\\u000A\\n\\n                        <p>Hello, world</p>\\u000D\\u000A\\n\\n                    </body>\\u000D\\u000A\\n\\n                </html>\\u000D\\u000A\\n                 [20:27]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e98190ab57157814ea4838697df1759d9a1542cf", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e98190ab57157814ea4838697df1759d9a1542cf", "committedDate": "2020-07-29T14:58:52Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "committedDate": "2020-07-30T05:59:48Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTUzNDY1", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-458953465", "createdAt": "2020-07-31T06:54:01Z", "commit": {"oid": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "committedDate": "2020-07-30T05:59:48Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "5dde91171e358c940e8dc2542dead994f65df420", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5dde91171e358c940e8dc2542dead994f65df420", "committedDate": "2020-07-31T14:30:55Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5dde91171e358c940e8dc2542dead994f65df420", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5dde91171e358c940e8dc2542dead994f65df420", "committedDate": "2020-07-31T14:30:55Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "471e597f36396fa77447c31ef60cff70e3b430cf", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/471e597f36396fa77447c31ef60cff70e3b430cf", "committedDate": "2020-07-31T14:43:48Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjM5MTA1", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-459239105", "createdAt": "2020-07-31T14:54:44Z", "commit": {"oid": "471e597f36396fa77447c31ef60cff70e3b430cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1NDo0NFrOG6Lisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1NDo0NFrOG6Lisg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1OTY5OA==", "bodyText": "looks good, I really hope visualization of \"\\n\" if issue (by design) of our AST printer, and I agree it is confusing, but it is ok.\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [161:19]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\u000D [161:22]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [162:22]\n\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [163:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\n [163:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [164:18]\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [165:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\n\\n                 [165:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [167:16]\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [168:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\\\n                 [168:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [170:16]", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463659698", "createdAt": "2020-07-31T14:54:44Z", "author": {"login": "romani"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14TextBlocks.java", "diffHunk": "@@ -84,4 +156,17 @@ public String getEscapedSpaces() {\n             line 2\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\\s\n             \"\"\";\n     }\n+\n+    void lineTerminators() {\n+        String s = \"\"\"\n+                \\u000D\"\"\";\n+        String s1 = \"\"\"\n+                \\n\"\"\";\n+        String s2 = \"\"\"\n+                \\n\n+                \"\"\";\n+        String s3 = \"\"\"\n+                \\\n+                \"\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471e597f36396fa77447c31ef60cff70e3b430cf"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "893151e903514ca017ea26eca008253ec1fe1f69", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/893151e903514ca017ea26eca008253ec1fe1f69", "committedDate": "2020-07-31T17:15:00Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "471e597f36396fa77447c31ef60cff70e3b430cf", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/471e597f36396fa77447c31ef60cff70e3b430cf", "committedDate": "2020-07-31T14:43:48Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}, "afterCommit": {"oid": "893151e903514ca017ea26eca008253ec1fe1f69", "author": {"user": {"login": "nmancus1", "name": "Nick Mancuso"}}, "url": "https://github.com/checkstyle/checkstyle/commit/893151e903514ca017ea26eca008253ec1fe1f69", "committedDate": "2020-07-31T17:15:00Z", "message": "Issue #7103: Add support for Java 14 text block syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzM0OTg4", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-459334988", "createdAt": "2020-07-31T17:18:34Z", "commit": {"oid": "893151e903514ca017ea26eca008253ec1fe1f69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoxODozNFrOG6QBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoxODozNFrOG6QBeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMzExMw==", "bodyText": "@romani @rnveach is there anything else I can show here?\nInput file: https://github.com/checkstyle/checkstyle/pull/8327/files#diff-8d67fe819d47f9a4758b17f98b092100", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463733113", "createdAt": "2020-07-31T17:18:34Z", "author": {"login": "nmancus1"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinterTest.java", "diffHunk": "@@ -154,4 +155,28 @@ public void testAstTreeSingleLineComments() throws Exception {\n                 JavaParser.Options.WITH_COMMENTS);\n     }\n \n+    @Test\n+    public void testTextBlocksEscapesAreOneChar() throws Exception {\n+        final String inputFilename = \"InputAstTreeStringPrinterTextBlocksEscapesAreOneChar.java\";\n+        final DetailAST ast = JavaParser.parseFile(\n+                new File(getNonCompilablePath(inputFilename)), JavaParser.Options.WITHOUT_COMMENTS);\n+\n+        final DetailAST objectBlockNode = ast.findFirstToken(TokenTypes.OBJBLOCK);\n+        final DetailAST variableDefNode = objectBlockNode.findFirstToken(TokenTypes.VARIABLE_DEF);\n+        final DetailAST textBlockContentNode =\n+                variableDefNode.findFirstToken(TokenTypes.ASSIGN)\n+                        .findFirstToken(TokenTypes.EXPR)\n+                        .getFirstChild()\n+                        .findFirstToken(TokenTypes.TEXT_BLOCK_CONTENT);\n+\n+        final String textBlockContent = textBlockContentNode.getText();\n+\n+        assertThat(\"Text block content contains \\\"\\\\n\\\" as substring\",\n+                textBlockContent.contains(\"\\\\n\"), is(false));\n+        assertThat(\"Text block content line terminator is counted as one character\",\n+                textBlockContent.length(), is(1));\n+        assertThat(\"Text block content contains only a line terminator\",\n+                textBlockContent.matches(\"\\n\"), is(true));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893151e903514ca017ea26eca008253ec1fe1f69"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMzgyOTY1", "url": "https://github.com/checkstyle/checkstyle/pull/8327#pullrequestreview-460382965", "createdAt": "2020-08-03T22:35:15Z", "commit": {"oid": "893151e903514ca017ea26eca008253ec1fe1f69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 408, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}