{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDQ1NjQx", "number": 8017, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOTowNTozNFrODurAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDowODo0MlrODyhTAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY1NzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOTowNTozNFrOGAwZlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDo0NDoyMFrOGAw9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjE2Nw==", "bodyText": "modifier -> modifiers", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403446167", "createdAt": "2020-04-04T09:05:34Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -190,6 +217,9 @@\n     /** Allow to skip variables with {@code static} modifier. */\n     private boolean ignoreStatic = true;\n \n+    /** Allow to skip variables with both {@code static} and {@code final} modifier. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTM0Ng==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403455346", "createdAt": "2020-04-04T10:44:20Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -190,6 +217,9 @@\n     /** Allow to skip variables with {@code static} modifier. */\n     private boolean ignoreStatic = true;\n \n+    /** Allow to skip variables with both {@code static} and {@code final} modifier. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjE2Nw=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY1NzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOTowNTo0N1rOGAwZpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDo0NDowOVrOGAw9ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjE4MQ==", "bodyText": "same here", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403446181", "createdAt": "2020-04-04T09:05:47Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -214,6 +244,15 @@ public void setIgnoreStatic(boolean ignoreStatic) {\n         this.ignoreStatic = ignoreStatic;\n     }\n \n+    /**\n+     * Setter to allow to skip variables with both {@code static} and {@code final} modifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTMzMw==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403455333", "createdAt": "2020-04-04T10:44:09Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -214,6 +244,15 @@ public void setIgnoreStatic(boolean ignoreStatic) {\n         this.ignoreStatic = ignoreStatic;\n     }\n \n+    /**\n+     * Setter to allow to skip variables with both {@code static} and {@code final} modifier.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjE4MQ=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY1NzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOTowNTo1OFrOGAwZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDo0NDo1M1rOGAw9og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjE5NA==", "bodyText": "same here", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403446194", "createdAt": "2020-04-04T09:05:58Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -214,6 +244,15 @@ public void setIgnoreStatic(boolean ignoreStatic) {\n         this.ignoreStatic = ignoreStatic;\n     }\n \n+    /**\n+     * Setter to allow to skip variables with both {@code static} and {@code final} modifier.\n+     * @param ignoreStaticFinal\n+     *        Defines if ignore variables with both 'static' and 'final' modifier or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTM5NA==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403455394", "createdAt": "2020-04-04T10:44:53Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -214,6 +244,15 @@ public void setIgnoreStatic(boolean ignoreStatic) {\n         this.ignoreStatic = ignoreStatic;\n     }\n \n+    /**\n+     * Setter to allow to skip variables with both {@code static} and {@code final} modifier.\n+     * @param ignoreStaticFinal\n+     *        Defines if ignore variables with both 'static' and 'final' modifier or not.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjE5NA=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY2MzQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOToxMzozMVrOGAwcig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo0Nzo1OFrOGAxpGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjkyMg==", "bodyText": "please make separate test inputs for each configuration with configuration explanation comment before type definition, e.g.\n/* \n* Config:\n*  prop1 = true\n* prop2 = false\n*/\npublic class MyTestInput {}   \n\n. It will be easier to understand and to mantain it.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403446922", "createdAt": "2020-04-04T09:13:31Z", "author": {"login": "strkkk"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java", "diffHunk": "@@ -226,12 +227,169 @@ public void testTypeAndVariablesAndMethodNamesWithIgnoresStatic() throws Excepti\n             + \",METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF\"\n             + \",PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\");\n         checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\");\n-        final int expectedCapitalCount = 6;\n+        final int expectedCapitalCount = 5;\n+\n+        final String[] expected = {\n+            \"12:16: \" + getWarningMessage(\"AbstractCLASSName\", expectedCapitalCount),\n+            \"32:11: \" + getWarningMessage(\"AbstractINNERRClass\", expectedCapitalCount),\n+            \"37:11: \" + getWarningMessage(\"WellNamedFACTORY\", expectedCapitalCount),\n+            \"38:21: \" + getWarningMessage(\"marazmaticMETHODName\", expectedCapitalCount),\n+            \"58:20: \"\n+                + getWarningMessage(\"serialNUMBER\", expectedCapitalCount), // not in ignore list\n+            \"59:26: \"\n+                + getWarningMessage(\"s1erialNUMBER\", expectedCapitalCount), // no ignore for final\n+        };\n+\n+        verify(checkConfig, getPath(\"InputAbbreviationAsWordInNameType.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testTypeAndVariablesAndMethodNamesWithIgnoresStaticFinal() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NjUyMw==", "bodyText": "Added.\nWould appreciate a review on whether the comments are consistent with the individual UTs, they should be mostly identical but it's hard to keep track of all 8 cases.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403466523", "createdAt": "2020-04-04T12:47:58Z", "author": {"login": "wltan"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java", "diffHunk": "@@ -226,12 +227,169 @@ public void testTypeAndVariablesAndMethodNamesWithIgnoresStatic() throws Excepti\n             + \",METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF\"\n             + \",PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\");\n         checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\");\n-        final int expectedCapitalCount = 6;\n+        final int expectedCapitalCount = 5;\n+\n+        final String[] expected = {\n+            \"12:16: \" + getWarningMessage(\"AbstractCLASSName\", expectedCapitalCount),\n+            \"32:11: \" + getWarningMessage(\"AbstractINNERRClass\", expectedCapitalCount),\n+            \"37:11: \" + getWarningMessage(\"WellNamedFACTORY\", expectedCapitalCount),\n+            \"38:21: \" + getWarningMessage(\"marazmaticMETHODName\", expectedCapitalCount),\n+            \"58:20: \"\n+                + getWarningMessage(\"serialNUMBER\", expectedCapitalCount), // not in ignore list\n+            \"59:26: \"\n+                + getWarningMessage(\"s1erialNUMBER\", expectedCapitalCount), // no ignore for final\n+        };\n+\n+        verify(checkConfig, getPath(\"InputAbbreviationAsWordInNameType.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testTypeAndVariablesAndMethodNamesWithIgnoresStaticFinal() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NjkyMg=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY2NjM2OnYy", "diffSide": "LEFT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOToxNzowOFrOGAwd3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOTo1OTozNVrOGAwtnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzI2Mw==", "bodyText": "not sure why this logic is removed. In hasIgnoredModifiers method if ignoreStaticFinal is true, we still ignore items if either static or final present, but for interface declaration it removed. Why?", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403447263", "createdAt": "2020-04-04T09:17:08Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -300,23 +339,18 @@ public void visitToken(DetailAST ast) {\n      * @param ast input DetailAST node.\n      * @return true if it is an ignore situation found for given input DetailAST\n      *         node.\n-     * @noinspection SimplifiableIfStatement\n      */\n     private boolean isIgnoreSituation(DetailAST ast) {\n         final DetailAST modifiers = ast.getFirstChild();\n \n         final boolean result;\n         if (ast.getType() == TokenTypes.VARIABLE_DEF) {\n-            if ((ignoreFinal || ignoreStatic)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1MTI5NQ==", "bodyText": "The intention here is that if ignoreStaticFinal has been explicitly set to false, we should respect that over ignoreStatic or ignoreFinal. So for interfaces where everything is implicitly static final, the only thing we need to check is ignoreStaticFinal.\n\nIn hasIgnoredModifiers method if ignoreStaticFinal is true, we still ignore items if either static or final present\n\nIf both modifiers are present and ignoreStaticFinal is also true, it will return true. If only one modifier is present, it is checked against the respective ignore property instead.\nhasIgnoredModifiers needs to handle the more general case where only one modifier is present, but inside interfaces there is no need for that logic.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403451295", "createdAt": "2020-04-04T09:59:35Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -300,23 +339,18 @@ public void visitToken(DetailAST ast) {\n      * @param ast input DetailAST node.\n      * @return true if it is an ignore situation found for given input DetailAST\n      *         node.\n-     * @noinspection SimplifiableIfStatement\n      */\n     private boolean isIgnoreSituation(DetailAST ast) {\n         final DetailAST modifiers = ast.getFirstChild();\n \n         final boolean result;\n         if (ast.getType() == TokenTypes.VARIABLE_DEF) {\n-            if ((ignoreFinal || ignoreStatic)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzI2Mw=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY2NzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOToxODo0MlrOGAwegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMjo0MzoxN1rOGAxnWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzQyNQ==", "bodyText": "please simplify boolean expressions above. Here ignoredStatic and ignoredFinal contain isStatic and isFinal in their initialization.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403447425", "createdAt": "2020-04-04T09:18:42Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -328,6 +362,29 @@ else if (ast.getType() == TokenTypes.METHOD_DEF) {\n         return result;\n     }\n \n+    /**\n+     * Checks if a variable is to be ignored based on its modifiers.\n+     * @param modifiers modifiers of the variable to be checked\n+     * @return true if there is a modifier to be ignored\n+     */\n+    private boolean hasIgnoredModifiers(DetailAST modifiers) {\n+        final boolean isStatic = modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null;\n+        final boolean isFinal = modifiers.findFirstToken(TokenTypes.FINAL) != null;\n+        final boolean ignoredStatic = ignoreStatic && isStatic;\n+        final boolean ignoredFinal = ignoreFinal && isFinal;\n+        final boolean result;\n+        if (ignoreStaticFinal) {\n+            result = isStatic && isFinal\n+                || ignoredFinal\n+                || ignoredStatic;\n+        }\n+        else {\n+            result = ignoredFinal && !isStatic\n+                || ignoredStatic && !isFinal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2NjA3NQ==", "bodyText": "I rewrote the boolean operations. It should be easier to understand now.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403466075", "createdAt": "2020-04-04T12:43:17Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -328,6 +362,29 @@ else if (ast.getType() == TokenTypes.METHOD_DEF) {\n         return result;\n     }\n \n+    /**\n+     * Checks if a variable is to be ignored based on its modifiers.\n+     * @param modifiers modifiers of the variable to be checked\n+     * @return true if there is a modifier to be ignored\n+     */\n+    private boolean hasIgnoredModifiers(DetailAST modifiers) {\n+        final boolean isStatic = modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null;\n+        final boolean isFinal = modifiers.findFirstToken(TokenTypes.FINAL) != null;\n+        final boolean ignoredStatic = ignoreStatic && isStatic;\n+        final boolean ignoredFinal = ignoreFinal && isFinal;\n+        final boolean result;\n+        if (ignoreStaticFinal) {\n+            result = isStatic && isFinal\n+                || ignoredFinal\n+                || ignoredStatic;\n+        }\n+        else {\n+            result = ignoredFinal && !isStatic\n+                || ignoredStatic && !isFinal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzQyNQ=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY2ODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOToxOTo1M1rOGAwe9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDo0NTowOFrOGAw9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzU0MA==", "bodyText": "violation, not ignored -> just violation for all 3 lines above", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403447540", "createdAt": "2020-04-04T09:19:53Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final (e.g. constants).\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation, not ignored\n+ *     public final int BBBB = 2;        // violation, not ignored\n+ *     public static int CCCC = 3;       // violation, not ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTQwNg==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403455406", "createdAt": "2020-04-04T10:45:08Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final (e.g. constants).\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation, not ignored\n+ *     public final int BBBB = 2;        // violation, not ignored\n+ *     public static int CCCC = 3;       // violation, not ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzU0MA=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY2OTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOToyMDozNVrOGAwfJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzoxMjoyN1rOGENHiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzU4OQ==", "bodyText": "(e.g. constants) I think this is redundant, there are no other options :)", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403447589", "createdAt": "2020-04-04T09:20:35Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final (e.g. constants).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0ODcxMQ==", "bodyText": "From #6582 (comment):\n\nhttps://checkstyle.org/google_style.html#a5.2.4\n\nEvery constant is a static final field, but not all static final fields are constants - impossible to check such rule.\n\nIf we add it, there will be false positives that go against google's rules. The guide shows some specific examples like\n\nstatic final Set mutableCollection = new HashSet();", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403448711", "createdAt": "2020-04-04T09:33:07Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final (e.g. constants).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzU4OQ=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2MDQ1OQ==", "bodyText": "it is better to remove (e.g. constants) , this term a bit broad, some people by such term mean non-changed value and immutable inside(if it is reference to collection or object), some people just non-changed value/reference.\nLets not be involved in such discussion with user, he will decide himself what for to use this Check.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407060459", "createdAt": "2020-04-11T12:51:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final (e.g. constants).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzU4OQ=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2MjQxMQ==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407062411", "createdAt": "2020-04-11T13:12:27Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final (e.g. constants).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzU4OQ=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY2OTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwOToyMDo1N1rOGAwfQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDo0NToxNlrOGAw9uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzYxOQ==", "bodyText": "modifierS", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403447619", "createdAt": "2020-04-04T09:20:57Z", "author": {"login": "strkkk"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -69,6 +69,10 @@\n  * value is {@code true}.\n  * </li>\n  * <li>\n+ * Property {@code ignoreStaticFinal} - Allow to skip variables with both {@code static} and\n+ * {@code final} modifier. Default value is {@code true}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTQxNg==", "bodyText": "Fixed", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403455416", "createdAt": "2020-04-04T10:45:16Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -69,6 +69,10 @@\n  * value is {@code true}.\n  * </li>\n  * <li>\n+ * Property {@code ignoreStaticFinal} - Allow to skip variables with both {@code static} and\n+ * {@code final} modifier. Default value is {@code true}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NzYxOQ=="}, "originalCommit": {"oid": "fc75c38c09203f96dc46c7960af3ed10d6cdb869"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzIwNTgzOnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameNoIgnore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMDo0Mjo0OVrOGA0lOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMTozMTo1NFrOGA_M4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxNDY4Mg==", "bodyText": "it is better now. The only thing missing is // violation comments at lines with violations.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403514682", "createdAt": "2020-04-04T20:42:49Z", "author": {"login": "strkkk"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameNoIgnore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 5\n+ * allowedAbbreviations = NUMBER,MARAZMATIC,VARIABLE\n+ * tokens = CLASS_DEF,VARIABLE_DEF,METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF,\n+ *      PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\n+ * ignoreStatic = false\n+ * ignoreFinal = false\n+ * ignoreStaticFinal = false\n+ */\n+public class InputAbbreviationAsWordInNameNoIgnore {\n+\n+    abstract class InputAbbreviationAsWordInNameType {\n+    }\n+\n+    abstract class NonAAAAbstractClassName {\n+    }\n+\n+    abstract class FactoryWithBADNAme {\n+    }\n+\n+    abstract class AbstractCLASSName {\n+        abstract class NonAbstractInnerClass {\n+        }\n+    }\n+\n+    abstract class ClassFactory1 {\n+        abstract class WellNamedFactory {\n+        }\n+    }\n+\n+    class NonAbstractClass1 {\n+    }\n+\n+    class AbstractClass1 {\n+    }\n+\n+    class Class1Factory1 {\n+    }\n+\n+    abstract class AbstractClassName3 {\n+        class AbstractINNERRClass {\n+        }\n+    }\n+\n+    abstract class Class3Factory {\n+        class WellNamedFACTORY {\n+            public void marazmaticMETHODName() {\n+                int marazmaticVARIABLEName = 2;\n+                int MARAZMATICVariableName = 1;\n+            }\n+        }\n+    }\n+\n+    interface Directions {\n+      int RIGHT=1;\n+      int LEFT=2;\n+      int UP=3;\n+      int DOWN=4;\n+    }\n+\n+    interface BadNameForInterface\n+    {\n+       void interfaceMethod();\n+    }\n+\n+    abstract static class NonAAAAbstractClassName2 {\n+        public int serialNUMBER = 6;\n+        public final int s1erialNUMBER = 6;\n+        private static int s2erialNUMBER = 6;\n+        private static final int s3erialNUMBER = 6;\n+    }\n+\n+    interface Interface1 {\n+\n+        String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    interface Interface2 {\n+\n+        static String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    interface Interface3 {\n+\n+        final String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    interface Interface4 {\n+\n+        final static String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    class FIleNameFormatException extends Exception {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public FIleNameFormatException(Exception e) {\n+            super(e);\n+        }\n+    }\n+\n+    class StateX {\n+        int userID;\n+        int scaleX, scaleY, scaleZ;\n+\n+        int getScaleX() {\n+            return this.scaleX;\n+        }\n+    }\n+\n+    @interface Annotation1 {\n+        String VALUE = \"value\"; // in @interface this is final/static\n+    }\n+\n+    @interface Annotation2 {\n+        static String VALUE = \"value\"; // in @interface this is final/static\n+    }\n+\n+    @interface Annotation3 {\n+        final String VALUE = \"value\"; // in @interface this is final/static\n+    }\n+\n+    @interface Annotation4 {\n+        final static String VALUE = \"value\"; // in @interface this is final/static\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eadd9af37430efa46a11a8394068cbaee7a9b1b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4ODY3Mg==", "bodyText": "Fixed. Note that there is no violation on this specific case due to the existing configuration allowedAbbreviationLength = 5.\nThis section has been covered by another UT in InputAbbreviationAsWordInNameIgnoreNonStaticFinal.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r403688672", "createdAt": "2020-04-05T11:31:54Z", "author": {"login": "wltan"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameNoIgnore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 5\n+ * allowedAbbreviations = NUMBER,MARAZMATIC,VARIABLE\n+ * tokens = CLASS_DEF,VARIABLE_DEF,METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF,\n+ *      PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\n+ * ignoreStatic = false\n+ * ignoreFinal = false\n+ * ignoreStaticFinal = false\n+ */\n+public class InputAbbreviationAsWordInNameNoIgnore {\n+\n+    abstract class InputAbbreviationAsWordInNameType {\n+    }\n+\n+    abstract class NonAAAAbstractClassName {\n+    }\n+\n+    abstract class FactoryWithBADNAme {\n+    }\n+\n+    abstract class AbstractCLASSName {\n+        abstract class NonAbstractInnerClass {\n+        }\n+    }\n+\n+    abstract class ClassFactory1 {\n+        abstract class WellNamedFactory {\n+        }\n+    }\n+\n+    class NonAbstractClass1 {\n+    }\n+\n+    class AbstractClass1 {\n+    }\n+\n+    class Class1Factory1 {\n+    }\n+\n+    abstract class AbstractClassName3 {\n+        class AbstractINNERRClass {\n+        }\n+    }\n+\n+    abstract class Class3Factory {\n+        class WellNamedFACTORY {\n+            public void marazmaticMETHODName() {\n+                int marazmaticVARIABLEName = 2;\n+                int MARAZMATICVariableName = 1;\n+            }\n+        }\n+    }\n+\n+    interface Directions {\n+      int RIGHT=1;\n+      int LEFT=2;\n+      int UP=3;\n+      int DOWN=4;\n+    }\n+\n+    interface BadNameForInterface\n+    {\n+       void interfaceMethod();\n+    }\n+\n+    abstract static class NonAAAAbstractClassName2 {\n+        public int serialNUMBER = 6;\n+        public final int s1erialNUMBER = 6;\n+        private static int s2erialNUMBER = 6;\n+        private static final int s3erialNUMBER = 6;\n+    }\n+\n+    interface Interface1 {\n+\n+        String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    interface Interface2 {\n+\n+        static String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    interface Interface3 {\n+\n+        final String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    interface Interface4 {\n+\n+        final static String VALUEEEE = \"value\"; // in interface this is final/static\n+\n+    }\n+\n+    class FIleNameFormatException extends Exception {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public FIleNameFormatException(Exception e) {\n+            super(e);\n+        }\n+    }\n+\n+    class StateX {\n+        int userID;\n+        int scaleX, scaleY, scaleZ;\n+\n+        int getScaleX() {\n+            return this.scaleX;\n+        }\n+    }\n+\n+    @interface Annotation1 {\n+        String VALUE = \"value\"; // in @interface this is final/static\n+    }\n+\n+    @interface Annotation2 {\n+        static String VALUE = \"value\"; // in @interface this is final/static\n+    }\n+\n+    @interface Annotation3 {\n+        final String VALUE = \"value\"; // in @interface this is final/static\n+    }\n+\n+    @interface Annotation4 {\n+        final static String VALUE = \"value\"; // in @interface this is final/static\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxNDY4Mg=="}, "originalCommit": {"oid": "2eadd9af37430efa46a11a8394068cbaee7a9b1b"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzcxOTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTowODo1N1rOGEWMyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo0NToxNlrOGGmB-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTIwOA==", "bodyText": "please update some previous example to show user that public static final ..... is ignored if any other property ignore... are true.\nPlease use look at previous examples they try to use real-life usecases in names, please do the same.\nUser need to see the same code line to be with and without violation to see how property works.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407211208", "createdAt": "2020-04-12T15:08:57Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final.\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation\n+ *     public final int BBBB = 2;        // violation\n+ *     public static int CCCC = 3;       // violation\n+ *     public static final int DDDD = 4; // OK, ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTU2OQ==", "bodyText": "@strkkk , @pbludov , please be attentive for this point in documentation.\nWe should not return to documentation update in future. It is better to do all in first iteration, while we are all in context of issue.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407211569", "createdAt": "2020-04-12T15:12:10Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final.\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation\n+ *     public final int BBBB = 2;        // violation\n+ *     public static int CCCC = 3;       // violation\n+ *     public static final int DDDD = 4; // OK, ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTIwOA=="}, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ1NTYxMQ==", "bodyText": "please update some previous example to show user that public static final ..... is ignored if any other property ignore... are true.\n\nI added both final and static final declarations to the existing examples to highlight that they are ignored.\n\nPlease use look at previous examples they try to use real-life usecases in names, please do the same.\n\nFixed.\n\nUser need to see the same code line to be with and without violation to see how property works.\n\nI added a copy of this example with a different configuration to show the difference in violations. Let me know if it needs to be more detailed than that.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407455611", "createdAt": "2020-04-13T12:30:41Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final.\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation\n+ *     public final int BBBB = 2;        // violation\n+ *     public static int CCCC = 3;       // violation\n+ *     public static final int DDDD = 4; // OK, ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTIwOA=="}, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ1ODY2Nw==", "bodyText": "We should not return to documentation update in future. It is better to do all in first iteration, while we are all in context of issue.\n\nAlso since we are here about documentation, am I allowed to take over #7566 as well? Then we can finish up all the documentation problems of this check until next time.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407458667", "createdAt": "2020-04-13T12:39:43Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final.\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation\n+ *     public final int BBBB = 2;        // violation\n+ *     public static int CCCC = 3;       // violation\n+ *     public static final int DDDD = 4; // OK, ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTIwOA=="}, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2NzczNw==", "bodyText": "yes, you are welcome to fix doc for this Check, but please in separate PR.\nthanks a lot for help.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r409567737", "createdAt": "2020-04-16T13:45:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -154,6 +158,29 @@\n  *   String firstXML; // violation, XML abbreviation is not allowed\n  * }\n  * </pre>\n+ * <p>\n+ * To configure to check variables, enforcing no abbreviations\n+ * except for variables that are both static and final.\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"AbbreviationAsWordInName\"&gt;\n+ *     &lt;property name=\"tokens\" value=\"VARIABLE_DEF\"/&gt;\n+ *     &lt;property name=\"ignoreFinal\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n+ *     &lt;property name=\"ignoreStaticFinal\" value=\"true\"/&gt;\n+ *     &lt;property name=\"allowedAbbreviationLength\" value=\"0\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class MyClass {\n+ *     public int AAAA = 1;              // violation\n+ *     public final int BBBB = 2;        // violation\n+ *     public static int CCCC = 3;       // violation\n+ *     public static final int DDDD = 4; // OK, ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTIwOA=="}, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzczMzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNToyMToyNVrOGEWTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMjozMjoyMFrOGElJpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMjg5NQ==", "bodyText": "we need to explain users how this property value will affect values ignoreStatic and ignoreFinal.\nthis property in value false make conflicts with previous behavior and it affects other properties values (other properties are ignored if this property found match in code)", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407212895", "createdAt": "2020-04-12T15:21:25Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -190,6 +217,9 @@\n     /** Allow to skip variables with {@code static} modifier. */\n     private boolean ignoreStatic = true;\n \n+    /** Allow to skip variables with both {@code static} and {@code final} modifiers. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ1NjE2Ng==", "bodyText": "I added a paragraph to the description in xdoc to explain the behavior of ignoreStaticFinal.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r407456166", "createdAt": "2020-04-13T12:32:20Z", "author": {"login": "wltan"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "diffHunk": "@@ -190,6 +217,9 @@\n     /** Allow to skip variables with {@code static} modifier. */\n     private boolean ignoreStatic = true;\n \n+    /** Allow to skip variables with both {@code static} and {@code final} modifiers. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMjg5NQ=="}, "originalCommit": {"oid": "e8e64b7125c196bd63cdffae0c51a0341cb975cf"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzAwOTMwOnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameIgnore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDowODo0MlrOGGnJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNTowNDo0MVrOGHrtBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4NTk1Mw==", "bodyText": "please in inputs static-final classes to make it clear that we ignore modifiers on types.\n/var/tmp$ cat Test.java \nclass Test {\n  static final class Inner {}\n\n}\n/var/tmp$ javac Test.java \n/var/tmp$ echo $?\n0", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r409585953", "createdAt": "2020-04-16T14:08:42Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameIgnore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 5\n+ * allowedAbbreviations = NUMBER,MARAZMATIC,VARIABLE\n+ * tokens = CLASS_DEF,VARIABLE_DEF,METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF,\n+ *      PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\n+ * ignoreStatic = true\n+ * ignoreFinal = true\n+ * ignoreStaticFinal = true\n+ */\n+public class InputAbbreviationAsWordInNameIgnore {\n+\n+    abstract class InputAbbreviationAsWordInNameType {\n+    }\n+\n+    abstract class NonAAAAbstractClassName {\n+    }\n+\n+    abstract class FactoryWithBADNAme {\n+    }\n+\n+    abstract class AbstractCLASSName {\n+        abstract class NonAbstractInnerClass {\n+        }\n+    }\n+\n+    abstract class ClassFactory1 {\n+        abstract class WellNamedFactory {\n+        }\n+    }\n+\n+    class NonAbstractClass1 {\n+    }\n+\n+    class AbstractClass1 {\n+    }\n+\n+    class Class1Factory1 {\n+    }\n+\n+    abstract class AbstractClassName3 {\n+        class AbstractINNERRClass { // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8685dc920ad9bcf5454d092afb9c252e46b5f6cb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwODc0Mg==", "bodyText": "@wltan , please always reply \"done\" to review comment, to make me sure that addressed it and ready for review.\nJust new commit, could mean \"I did partial update and pushed changes to remote for backup and make sure CI is green, while I sleeping or afk\"", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r410708742", "createdAt": "2020-04-18T15:00:53Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameIgnore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 5\n+ * allowedAbbreviations = NUMBER,MARAZMATIC,VARIABLE\n+ * tokens = CLASS_DEF,VARIABLE_DEF,METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF,\n+ *      PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\n+ * ignoreStatic = true\n+ * ignoreFinal = true\n+ * ignoreStaticFinal = true\n+ */\n+public class InputAbbreviationAsWordInNameIgnore {\n+\n+    abstract class InputAbbreviationAsWordInNameType {\n+    }\n+\n+    abstract class NonAAAAbstractClassName {\n+    }\n+\n+    abstract class FactoryWithBADNAme {\n+    }\n+\n+    abstract class AbstractCLASSName {\n+        abstract class NonAbstractInnerClass {\n+        }\n+    }\n+\n+    abstract class ClassFactory1 {\n+        abstract class WellNamedFactory {\n+        }\n+    }\n+\n+    class NonAbstractClass1 {\n+    }\n+\n+    class AbstractClass1 {\n+    }\n+\n+    class Class1Factory1 {\n+    }\n+\n+    abstract class AbstractClassName3 {\n+        class AbstractINNERRClass { // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4NTk1Mw=="}, "originalCommit": {"oid": "8685dc920ad9bcf5454d092afb9c252e46b5f6cb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwOTI1NQ==", "bodyText": "Sorry, I wanted to comment after checking the pushed changes but I forgot about it. I'll be more careful next time.", "url": "https://github.com/checkstyle/checkstyle/pull/8017#discussion_r410709255", "createdAt": "2020-04-18T15:04:41Z", "author": {"login": "wltan"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameIgnore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\n+\n+/*\n+ * Config:\n+ * allowedAbbreviationLength = 5\n+ * allowedAbbreviations = NUMBER,MARAZMATIC,VARIABLE\n+ * tokens = CLASS_DEF,VARIABLE_DEF,METHOD_DEF,ENUM_DEF,ENUM_CONSTANT_DEF,\n+ *      PARAMETER_DEF,INTERFACE_DEF,ANNOTATION_DEF\n+ * ignoreStatic = true\n+ * ignoreFinal = true\n+ * ignoreStaticFinal = true\n+ */\n+public class InputAbbreviationAsWordInNameIgnore {\n+\n+    abstract class InputAbbreviationAsWordInNameType {\n+    }\n+\n+    abstract class NonAAAAbstractClassName {\n+    }\n+\n+    abstract class FactoryWithBADNAme {\n+    }\n+\n+    abstract class AbstractCLASSName {\n+        abstract class NonAbstractInnerClass {\n+        }\n+    }\n+\n+    abstract class ClassFactory1 {\n+        abstract class WellNamedFactory {\n+        }\n+    }\n+\n+    class NonAbstractClass1 {\n+    }\n+\n+    class AbstractClass1 {\n+    }\n+\n+    class Class1Factory1 {\n+    }\n+\n+    abstract class AbstractClassName3 {\n+        class AbstractINNERRClass { // violation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4NTk1Mw=="}, "originalCommit": {"oid": "8685dc920ad9bcf5454d092afb9c252e46b5f6cb"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1036, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}