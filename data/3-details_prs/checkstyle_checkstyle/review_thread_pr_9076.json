{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNTQ4MTI3", "number": 9076, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwODoxNjo0MlrOFM5qEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxNzoxMTo0NlrOFSO2UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDcxODkwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwODoxNjo0MlrOIQ10tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzowODowNVrOIYtHjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyOTk3Mg==", "bodyText": "The description is incomplete. There may be a issue in the metadata generation/validation.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r554529972", "createdAt": "2021-01-10T08:16:42Z", "author": {"login": "pbludov"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "diffHunk": "@@ -128,6 +128,11 @@\n                <description>Specify annotations which allow the check to\n  skip the method from validation.</description>\n             </property>\n+            <property default-value=\".*\"\n+                      name=\"requiredJavadocPhrase\"\n+                      type=\"java.util.regex.Pattern\">\n+               <description>Specify the comment text pattern which qualifies a</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d34dc5c0c0889e3ef67d0127dcda39ba31ff0dd6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjcyOA==", "bodyText": "@nmancus1 , please investigate problem to generate full description, it might be separate issue, but better to identify it now.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r559056728", "createdAt": "2021-01-17T00:19:47Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "diffHunk": "@@ -128,6 +128,11 @@\n                <description>Specify annotations which allow the check to\n  skip the method from validation.</description>\n             </property>\n+            <property default-value=\".*\"\n+                      name=\"requiredJavadocPhrase\"\n+                      type=\"java.util.regex.Pattern\">\n+               <description>Specify the comment text pattern which qualifies a</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyOTk3Mg=="}, "originalCommit": {"oid": "d34dc5c0c0889e3ef67d0127dcda39ba31ff0dd6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU1NDY4Mw==", "bodyText": "I am struggling to find documentation for the metadata generator, can you point me in the right direction?", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r560554683", "createdAt": "2021-01-19T22:55:49Z", "author": {"login": "nmancus1"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "diffHunk": "@@ -128,6 +128,11 @@\n                <description>Specify annotations which allow the check to\n  skip the method from validation.</description>\n             </property>\n+            <property default-value=\".*\"\n+                      name=\"requiredJavadocPhrase\"\n+                      type=\"java.util.regex.Pattern\">\n+               <description>Specify the comment text pattern which qualifies a</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyOTk3Mg=="}, "originalCommit": {"oid": "d34dc5c0c0889e3ef67d0127dcda39ba31ff0dd6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYyNzE0OA==", "bodyText": "@romani This is a separate issue and has been seen before. I pointed @nmancus1 to the fault of the error. I recommend an issue be created and this get fixed. It will completely baffle new users, and I question if admins involved in its creation know it or the solution to overecome it right now.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r560627148", "createdAt": "2021-01-20T02:13:39Z", "author": {"login": "rnveach"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "diffHunk": "@@ -128,6 +128,11 @@\n                <description>Specify annotations which allow the check to\n  skip the method from validation.</description>\n             </property>\n+            <property default-value=\".*\"\n+                      name=\"requiredJavadocPhrase\"\n+                      type=\"java.util.regex.Pattern\">\n+               <description>Specify the comment text pattern which qualifies a</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyOTk3Mg=="}, "originalCommit": {"oid": "d34dc5c0c0889e3ef67d0127dcda39ba31ff0dd6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3MDgzNw==", "bodyText": "there is no documentation on generator, please create issue on it , while we see it.\nIs there a way to make workaround ?", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562770837", "createdAt": "2021-01-22T17:00:06Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "diffHunk": "@@ -128,6 +128,11 @@\n                <description>Specify annotations which allow the check to\n  skip the method from validation.</description>\n             </property>\n+            <property default-value=\".*\"\n+                      name=\"requiredJavadocPhrase\"\n+                      type=\"java.util.regex.Pattern\">\n+               <description>Specify the comment text pattern which qualifies a</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyOTk3Mg=="}, "originalCommit": {"oid": "d34dc5c0c0889e3ef67d0127dcda39ba31ff0dd6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3NTk0OQ==", "bodyText": "some other Checks do have long descriptions and it works fine for them.\nin worse case I would agree to make description single line and suppress violation from LineLenght on it, until issue is resolved.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562775949", "createdAt": "2021-01-22T17:08:05Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/design/DesignForExtensionCheck.xml", "diffHunk": "@@ -128,6 +128,11 @@\n                <description>Specify annotations which allow the check to\n  skip the method from validation.</description>\n             </property>\n+            <property default-value=\".*\"\n+                      name=\"requiredJavadocPhrase\"\n+                      type=\"java.util.regex.Pattern\">\n+               <description>Specify the comment text pattern which qualifies a</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyOTk3Mg=="}, "originalCommit": {"oid": "d34dc5c0c0889e3ef67d0127dcda39ba31ff0dd6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxOTcxNDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QwMDoxODoyMVrOIVKG2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzoxMToxNlrOIYtPPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjYwMg==", "bodyText": "if you make requiredJavadocPhrase static, can we keep methods to stay static ?", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r559056602", "createdAt": "2021-01-17T00:18:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -314,13 +365,13 @@ private static boolean hasJavadocCommentOnToken(DetailAST methodDef, int tokenTy\n      * @param token tree token.\n      * @return true if a javadoc comment exists under the token.\n      */\n-    private static boolean branchContainsJavadocComment(DetailAST token) {\n+    private boolean branchContainsJavadocComment(DetailAST token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUyNDU3Nw==", "bodyText": "Seems like Checker does not like static properties:", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r560524577", "createdAt": "2021-01-19T21:59:22Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -314,13 +365,13 @@ private static boolean hasJavadocCommentOnToken(DetailAST methodDef, int tokenTy\n      * @param token tree token.\n      * @return true if a javadoc comment exists under the token.\n      */\n-    private static boolean branchContainsJavadocComment(DetailAST token) {\n+    private boolean branchContainsJavadocComment(DetailAST token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjYwMg=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3MTM3Mw==", "bodyText": "@nmancus1 , please try to share text form of error all the time, image is last resort.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562771373", "createdAt": "2021-01-22T17:00:54Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -314,13 +365,13 @@ private static boolean hasJavadocCommentOnToken(DetailAST methodDef, int tokenTy\n      * @param token tree token.\n      * @return true if a javadoc comment exists under the token.\n      */\n-    private static boolean branchContainsJavadocComment(DetailAST token) {\n+    private boolean branchContainsJavadocComment(DetailAST token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjYwMg=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3MTk4NQ==", "bodyText": "this error means you have problem in config with unrecognized name of property", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562771985", "createdAt": "2021-01-22T17:02:01Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -314,13 +365,13 @@ private static boolean hasJavadocCommentOnToken(DetailAST methodDef, int tokenTy\n      * @param token tree token.\n      * @return true if a javadoc comment exists under the token.\n      */\n-    private static boolean branchContainsJavadocComment(DetailAST token) {\n+    private boolean branchContainsJavadocComment(DetailAST token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjYwMg=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3NzkxNw==", "bodyText": "sorry, I now got a problem, my bad, property of Check can not be static. I recall review item.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562777917", "createdAt": "2021-01-22T17:11:16Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -314,13 +365,13 @@ private static boolean hasJavadocCommentOnToken(DetailAST methodDef, int tokenTy\n      * @param token tree token.\n      * @return true if a javadoc comment exists under the token.\n      */\n-    private static boolean branchContainsJavadocComment(DetailAST token) {\n+    private boolean branchContainsJavadocComment(DetailAST token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjYwMg=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxOTcxNjc2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/designforextension/InputDesignForExtensionRequiredJavadocPhrase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QwMDoyMDo0OFrOIVKHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzowMzoxNFrOIYs6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjgxNQ==", "bodyText": "add a case of\n/**This method can safely be overridden. */ if this is valid javadoc (I am not sure)", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r559056815", "createdAt": "2021-01-17T00:20:48Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/designforextension/InputDesignForExtensionRequiredJavadocPhrase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.puppycrawl.tools.checkstyle.checks.design.designforextension;\n+\n+/* Config:\n+ * requiredJavadocPhrase = \"^This implementation.*\\\\.$\"\n+ *\n+ */\n+public class InputDesignForExtensionRequiredJavadocPhrase {\n+\n+    /**\n+     * This implementation is for <p> some html code\n+     * </p>.\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo1(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation is required for ...\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo2(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This implementation is for ... */\n+    public int foo3(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation ...\n+     */\n+    public int foo4(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This method can safely be overridden. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUyMTkyMA==", "bodyText": "This is valid javadoc. Adding.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r560521920", "createdAt": "2021-01-19T21:54:42Z", "author": {"login": "nmancus1"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/designforextension/InputDesignForExtensionRequiredJavadocPhrase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.puppycrawl.tools.checkstyle.checks.design.designforextension;\n+\n+/* Config:\n+ * requiredJavadocPhrase = \"^This implementation.*\\\\.$\"\n+ *\n+ */\n+public class InputDesignForExtensionRequiredJavadocPhrase {\n+\n+    /**\n+     * This implementation is for <p> some html code\n+     * </p>.\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo1(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation is required for ...\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo2(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This implementation is for ... */\n+    public int foo3(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation ...\n+     */\n+    public int foo4(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This method can safely be overridden. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjgxNQ=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkzNjA1NQ==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r560936055", "createdAt": "2021-01-20T12:51:40Z", "author": {"login": "nmancus1"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/designforextension/InputDesignForExtensionRequiredJavadocPhrase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.puppycrawl.tools.checkstyle.checks.design.designforextension;\n+\n+/* Config:\n+ * requiredJavadocPhrase = \"^This implementation.*\\\\.$\"\n+ *\n+ */\n+public class InputDesignForExtensionRequiredJavadocPhrase {\n+\n+    /**\n+     * This implementation is for <p> some html code\n+     * </p>.\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo1(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation is required for ...\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo2(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This implementation is for ... */\n+    public int foo3(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation ...\n+     */\n+    public int foo4(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This method can safely be overridden. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjgxNQ=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3MjcyOQ==", "bodyText": "input code is always a text, javadoc as image is ok.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562772729", "createdAt": "2021-01-22T17:03:14Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/designforextension/InputDesignForExtensionRequiredJavadocPhrase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.puppycrawl.tools.checkstyle.checks.design.designforextension;\n+\n+/* Config:\n+ * requiredJavadocPhrase = \"^This implementation.*\\\\.$\"\n+ *\n+ */\n+public class InputDesignForExtensionRequiredJavadocPhrase {\n+\n+    /**\n+     * This implementation is for <p> some html code\n+     * </p>.\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo1(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation is required for ...\n+     *\n+     * @param a\n+     * @param b\n+     * @return sum\n+     */\n+    public int foo2(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This implementation is for ... */\n+    public int foo3(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /**\n+     * This implementation ...\n+     */\n+    public int foo4(int a, int b) {return a + b;}  // ok, required comment pattern in javadoc\n+\n+    /** This method can safely be overridden. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1NjgxNQ=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMTI2MTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMDoyMjoyM1rOIVWsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjo1MTo1N1rOIW80-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2Mjc0Ng==", "bodyText": "there will be questions from users on how we treat match on multi lines.\nPlease add fee words on this in property description and please add example\n *   /&#42;&#42; This\n *   &#42; implementation ...", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r559262746", "createdAt": "2021-01-18T00:22:23Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +215,35 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkzNjE4Nw==", "bodyText": "Done, also added test case.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r560936187", "createdAt": "2021-01-20T12:51:57Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +215,35 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2Mjc0Ng=="}, "originalCommit": {"oid": "c497137c6abd3f5fd1aed8e3bea5cbf1968a9b6f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0Mzk1ODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzowNjowNFrOIYtB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzowNjowNFrOIYtB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3NDUxMA==", "bodyText": "remove extra space", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562774510", "createdAt": "2021-01-22T17:06:04Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -236,6 +304,12 @@\n     private Set<String> ignoredAnnotations = Arrays.stream(new String[] {\"Test\", \"Before\", \"After\",\n         \"BeforeClass\", \"AfterClass\", }).collect(Collectors.toSet());\n \n+    /**\n+     * Specify the comment text pattern which qualifies a method as designed for extension.\n+     *  Supports multi-line regex.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b26d2972c32d9eaa3d6034ba67c0c6bfba0b18"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0Mzk4OTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzoxMzo0MlrOIYtVBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTo1Nzo1M1rOIYzIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3OTM5Ng==", "bodyText": "please make method single line as methods below to be consistent in look.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562779396", "createdAt": "2021-01-22T17:13:42Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,66 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() { // ok, required javadoc phrase in comment\n+ *     return 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b26d2972c32d9eaa3d6034ba67c0c6bfba0b18"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg3NDU2Mw==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562874563", "createdAt": "2021-01-22T19:57:53Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,66 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() { // ok, required javadoc phrase in comment\n+ *     return 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3OTM5Ng=="}, "originalCommit": {"oid": "65b26d2972c32d9eaa3d6034ba67c0c6bfba0b18"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0Mzk5MDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNzoxMzo1OVrOIYtVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTo1Nzo0N1rOIYzIkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3OTU3MQ==", "bodyText": "single line please", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562779571", "createdAt": "2021-01-22T17:13:59Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,66 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() { // ok, required javadoc phrase in comment\n+ *     return 2;\n+ *   }\n+ *\n+ *   /&#42;&#42;\n+ *   &#42; Do not extend ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo2() {return 8;} // violation, required javadoc phrase not in comment\n+ *\n+ *   public int foo3() {return 3;} // violation, required javadoc phrase not in comment\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc which can span multiple lines\n+ * to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This[\\s\\S]*implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This\n+ *   &#42; implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() { // ok, required javadoc phrase in comment\n+ *     return 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b26d2972c32d9eaa3d6034ba67c0c6bfba0b18"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg3NDUxNA==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562874514", "createdAt": "2021-01-22T19:57:47Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,66 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() { // ok, required javadoc phrase in comment\n+ *     return 2;\n+ *   }\n+ *\n+ *   /&#42;&#42;\n+ *   &#42; Do not extend ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo2() {return 8;} // violation, required javadoc phrase not in comment\n+ *\n+ *   public int foo3() {return 3;} // violation, required javadoc phrase not in comment\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc which can span multiple lines\n+ * to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This[\\s\\S]*implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This\n+ *   &#42; implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() { // ok, required javadoc phrase in comment\n+ *     return 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3OTU3MQ=="}, "originalCommit": {"oid": "65b26d2972c32d9eaa3d6034ba67c0c6bfba0b18"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDgzODMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMToxNTowMVrOIY1lig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzoyOTowMVrOIZEIAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkxNDY5OA==", "bodyText": "remove extends B in all cases.\nCheck do make any decision on this.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562914698", "createdAt": "2021-01-22T21:15:01Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,62 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61406ac8f000fafb01c62f9305c435a8bfeef16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1Mjg5Nw==", "bodyText": "Done in examples from this PR and existing example in separate commit.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563152897", "createdAt": "2021-01-23T13:29:01Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,62 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkxNDY5OA=="}, "originalCommit": {"oid": "b61406ac8f000fafb01c62f9305c435a8bfeef16"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDg3NTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMToyNDo1MFrOIY1-Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzoyOTozMFrOIZEIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkyMTA1NQ==", "bodyText": "please remove such empty lines from javadoc, the less unnecessary stuff the better for user.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r562921055", "createdAt": "2021-01-22T21:24:50Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,62 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() {return 2;} // ok, required javadoc phrase in comment\n+ *\n+ *   /&#42;&#42;\n+ *   &#42; Do not extend ...\n+ *   &#42;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61406ac8f000fafb01c62f9305c435a8bfeef16"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1Mjk1Mg==", "bodyText": "Done.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563152952", "createdAt": "2021-01-23T13:29:30Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,62 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A extends B {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;\n+ *   &#42;/\n+ *   public int foo() {return 2;} // ok, required javadoc phrase in comment\n+ *\n+ *   /&#42;&#42;\n+ *   &#42; Do not extend ...\n+ *   &#42;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkyMTA1NQ=="}, "originalCommit": {"oid": "b61406ac8f000fafb01c62f9305c435a8bfeef16"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjYxNDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxNzowNTo1N1rOIZFe8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxNToxMzozOVrOIZNgYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTE1NQ==", "bodyText": "#4358 (comment)\n\nDefault should be \"^This implementation \" (as mentioned in our html doc).\n\nWas this changed?", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563175155", "createdAt": "2021-01-23T17:05:57Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -159,6 +161,12 @@\n  * Type is {@code java.lang.String[]}.\n  * Default value is {@code After, AfterClass, Before, BeforeClass, Test}.\n  * </li>\n+ * <li>\n+ * Property {@code requiredJavadocPhrase} - Specify the comment text pattern which qualifies a\n+ * method as designed for extension. Supports multi-line regex.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \".*\"}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwMzg3MQ==", "bodyText": "See #8203 (comment).  This PR is a continuation of that one.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563203871", "createdAt": "2021-01-23T21:51:18Z", "author": {"login": "nmancus1"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -159,6 +161,12 @@\n  * Type is {@code java.lang.String[]}.\n  * Default value is {@code After, AfterClass, Before, BeforeClass, Test}.\n  * </li>\n+ * <li>\n+ * Property {@code requiredJavadocPhrase} - Specify the comment text pattern which qualifies a\n+ * method as designed for extension. Supports multi-line regex.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \".*\"}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTE1NQ=="}, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwNzAwNQ==", "bodyText": "https://checkstyle.org/config_design.html#DesignForExtension\nI did a quote from book for this phrase.\nNot sure why I suggested it as default value.\nProbably as breaking compatibility concern it is better to have default as any text. As writing of javadoc is already major attitude for method :).\nBut I am ok to vote on it.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563207005", "createdAt": "2021-01-23T22:27:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -159,6 +161,12 @@\n  * Type is {@code java.lang.String[]}.\n  * Default value is {@code After, AfterClass, Before, BeforeClass, Test}.\n  * </li>\n+ * <li>\n+ * Property {@code requiredJavadocPhrase} - Specify the comment text pattern which qualifies a\n+ * method as designed for extension. Supports multi-line regex.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \".*\"}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTE1NQ=="}, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIzNDk4MA==", "bodyText": "I am just pointing it out. If such a change is a breaking change then I recommend splitting it into a different issue that can be marked with breaking compatibility. We should try to avoid breaking compatibility in the same issue as a new feature. The release notes are not kindly to doing both at the same time.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563234980", "createdAt": "2021-01-24T04:18:14Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -159,6 +161,12 @@\n  * Type is {@code java.lang.String[]}.\n  * Default value is {@code After, AfterClass, Before, BeforeClass, Test}.\n  * </li>\n+ * <li>\n+ * Property {@code requiredJavadocPhrase} - Specify the comment text pattern which qualifies a\n+ * method as designed for extension. Supports multi-line regex.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \".*\"}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTE1NQ=="}, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNjU5Mg==", "bodyText": "good point.\nI will not create issue on this, lets users request this if they care.", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563306592", "createdAt": "2021-01-24T15:13:39Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -159,6 +161,12 @@\n  * Type is {@code java.lang.String[]}.\n  * Default value is {@code After, AfterClass, Before, BeforeClass, Test}.\n  * </li>\n+ * <li>\n+ * Property {@code requiredJavadocPhrase} - Specify the comment text pattern which qualifies a\n+ * method as designed for extension. Supports multi-line regex.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \".*\"}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTE1NQ=="}, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjYxOTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxNzoxMTo0NlrOIZFhMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QyMTozMToxM1rOIZHHMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTczMA==", "bodyText": "What happens if there is HTML between the text? Bold for example. How do I configure this?", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563175730", "createdAt": "2021-01-23T17:11:46Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,58 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;/\n+ *   public int foo() {return 2;} // ok, required javadoc phrase in comment\n+ *\n+ *   /&#42;&#42;\n+ *   &#42; Do not extend ...\n+ *   &#42;/\n+ *   public int foo2() {return 8;} // violation, required javadoc phrase not in comment\n+ *\n+ *   public int foo3() {return 3;} // violation, required javadoc phrase not in comment\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc which can span multiple lines", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwMTg0MQ==", "bodyText": "I think it will be just text", "url": "https://github.com/checkstyle/checkstyle/pull/9076#discussion_r563201841", "createdAt": "2021-01-23T21:31:13Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "diffHunk": "@@ -208,6 +216,58 @@\n  * }\n  * </pre>\n  * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc to be designed for extension.\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;DesignForExtension&quot;&gt;\n+ *   &lt;property name=&quot;requiredJavadocPhrase&quot;\n+ *     value=&quot;This implementation&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class A {\n+ *   /&#42;&#42;\n+ *   &#42; This implementation ...\n+ *   &#42;/\n+ *   public int foo() {return 2;} // ok, required javadoc phrase in comment\n+ *\n+ *   /&#42;&#42;\n+ *   &#42; Do not extend ...\n+ *   &#42;/\n+ *   public int foo2() {return 8;} // violation, required javadoc phrase not in comment\n+ *\n+ *   public int foo3() {return 3;} // violation, required javadoc phrase not in comment\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to allow methods which contain a specified comment text\n+ * pattern in their javadoc which can span multiple lines", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE3NTczMA=="}, "originalCommit": {"oid": "dfd60bef8c6ead96438c633b03b91febfbd9c270"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}