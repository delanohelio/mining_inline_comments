{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODY2NzMw", "number": 7775, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzowOTowMFrODoEJYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzozMToyM1rODt9DIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM3NTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzowOTowMFrOF2andQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzowOTowMFrOF2andQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzUwOQ==", "bodyText": "that at there is least -> that there is at least", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392603509", "createdAt": "2020-03-14T17:09:00Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that at there is least one whitespace after the leading asterisk.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e287be5776aea58c72fdc6f561105358509198"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM3NjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoxMDozMlrOF2an5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoxMDozMlrOF2an5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzYyMw==", "bodyText": "java doc -> Javadoc\n(here and below)", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392603623", "createdAt": "2020-03-14T17:10:32Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that at there is least one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid java doc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e287be5776aea58c72fdc6f561105358509198"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM3NzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoxMTo0MFrOF2aoQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoxMTo0MFrOF2aoQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzcxMw==", "bodyText": "invalid single linejava doc -> invalid single-line Javadoc", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392603713", "createdAt": "2020-03-14T17:11:40Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that at there is least one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid java doc.\n+ *     *&#47;\n+ *   void invalidJavaDocMethod() {\n+ *   }\n+ *   &#47;**\n+ *     * This is valid java doc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single linejava doc. *&#47;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e287be5776aea58c72fdc6f561105358509198"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM3ODY1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoxNToyMFrOF2apEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNzo0MzowNlrOF2dbKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzkyMQ==", "bodyText": "Please add a test case for\n/** *violation */\nA single-line Javadoc with leading asterisk. Yes, it is weird, but it is legal.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392603921", "createdAt": "2020-03-14T17:15:20Z", "author": {"login": "pbludov"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see See somthing.\n+     */\n+    void foo1() {}\n+\n+    /**\n+     *This is not ok.\n+     **/\n+    void foo2() {}\n+\n+    /**\n+     * This is not ok.\n+     *@see Something\n+     **/\n+    void foo3() {}\n+\n+    /**\n+     * @see\n+     *This is not ok.\n+     **/\n+    void foo4() {}\n+\n+    /**\n+     * <pre>\n+     *This is not ok.\n+     * </pre>\n+     */\n+    void foo5() {}\n+\n+    /******** This is ok. *******/\n+    void bar() {}\n+\n+    /** @see Something */\n+    void bar1() {}\n+\n+    /**@see Something*/\n+    void bar2() {}\n+\n+    /***/\n+    void bar4() {}\n+\n+    /** This is ok. **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e287be5776aea58c72fdc6f561105358509198"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0OTUxNQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392649515", "createdAt": "2020-03-15T07:43:06Z", "author": {"login": "0blivious"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see See somthing.\n+     */\n+    void foo1() {}\n+\n+    /**\n+     *This is not ok.\n+     **/\n+    void foo2() {}\n+\n+    /**\n+     * This is not ok.\n+     *@see Something\n+     **/\n+    void foo3() {}\n+\n+    /**\n+     * @see\n+     *This is not ok.\n+     **/\n+    void foo4() {}\n+\n+    /**\n+     * <pre>\n+     *This is not ok.\n+     * </pre>\n+     */\n+    void foo5() {}\n+\n+    /******** This is ok. *******/\n+    void bar() {}\n+\n+    /** @see Something */\n+    void bar1() {}\n+\n+    /**@see Something*/\n+    void bar2() {}\n+\n+    /***/\n+    void bar4() {}\n+\n+    /** This is ok. **/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzkyMQ=="}, "originalCommit": {"oid": "08e287be5776aea58c72fdc6f561105358509198"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzk3NzIxOnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNToxODoxM1rOF2ff8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNToxODoxM1rOF2ff8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4MzUwNA==", "bodyText": "somthing -> something", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392683504", "createdAt": "2020-03-15T15:18:13Z", "author": {"login": "pbludov"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see See somthing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd449fef728679a25fd9c52e124eb3e29cc0170a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzk3ODI4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNToyMDoxMlrOF2fgmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNToyMDoxMlrOF2fgmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4MzY3Mg==", "bodyText": "Please change all not ok  with violation", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392683672", "createdAt": "2020-03-15T15:20:12Z", "author": {"login": "pbludov"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see See somthing.\n+     */\n+    void foo1() {}\n+\n+    /**\n+     *This is not ok.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd449fef728679a25fd9c52e124eb3e29cc0170a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzk4MDI5OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNToyMjo1N1rOF2fhrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo0OTozMFrOF2frgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4Mzk1MQ==", "bodyText": "This is confusing. Should it be\n/**\n * This is ok.\n *@see violtaion\n */\n\n? Or maybe There is a violation on the next line ?", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392683951", "createdAt": "2020-03-15T15:22:57Z", "author": {"login": "pbludov"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see See somthing.\n+     */\n+    void foo1() {}\n+\n+    /**\n+     *This is not ok.\n+     **/\n+    void foo2() {}\n+\n+    /**\n+     * This is not ok.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd449fef728679a25fd9c52e124eb3e29cc0170a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NjQ2NQ==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392686465", "createdAt": "2020-03-15T15:49:30Z", "author": {"login": "0blivious"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see See somthing.\n+     */\n+    void foo1() {}\n+\n+    /**\n+     *This is not ok.\n+     **/\n+    void foo2() {}\n+\n+    /**\n+     * This is not ok.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4Mzk1MQ=="}, "originalCommit": {"oid": "fd449fef728679a25fd9c52e124eb3e29cc0170a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDIxNTAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMTo0NToxOFrOF2heIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMTo0NToxOFrOF2heIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxNTgxMA==", "bodyText": "Please combine these 2 lines.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392715810", "createdAt": "2020-03-15T21:45:18Z", "author": {"login": "rnveach"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheckTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMissingWhitespaceAfterAsteriskCheck.MSG_KEY;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+\n+public class JavadocMissingWhitespaceAfterAsteriskCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/javadoc\"\n+                +\n+                \"/javadocmissingwhitespaceafterasterisk\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd43f50116eb78d4360d3d3df7d1e7ede1b766b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDIxNjI4OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_javadoc.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMTo0Njo1NlrOF2hetA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMTo0Njo1NlrOF2hetA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxNTk1Ng==", "bodyText": "Please add some type of reasoning for why this check's violation matters.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392715956", "createdAt": "2020-03-15T21:46:56Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -847,6 +847,116 @@ public void doSomething9(File file) throws IOException {\n       </subsection>\n     </section>\n \n+    <section name=\"JavadocMissingWhitespaceAfterAsterisk\">\n+      <p>Since Checkstyle 8.31</p>\n+      <subsection name=\"Description\" id=\"JavadocMissingWhitespaceAfterAsterisk_Description\">\n+        <p>\n+          Checks that there is at least one whitespace after the leading asterisk.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd43f50116eb78d4360d3d3df7d1e7ede1b766b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDIyMDM3OnYy", "diffSide": "RIGHT", "path": "src/xdocs/config_javadoc.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMTo1MzowN1rOF2hgwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMTo1MzowN1rOF2hgwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxNjQ4Mg==", "bodyText": "Please create a valid version.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r392716482", "createdAt": "2020-03-15T21:53:07Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_javadoc.xml", "diffHunk": "@@ -847,6 +847,116 @@ public void doSomething9(File file) throws IOException {\n       </subsection>\n     </section>\n \n+    <section name=\"JavadocMissingWhitespaceAfterAsterisk\">\n+      <p>Since Checkstyle 8.31</p>\n+      <subsection name=\"Description\" id=\"JavadocMissingWhitespaceAfterAsterisk_Description\">\n+        <p>\n+          Checks that there is at least one whitespace after the leading asterisk.\n+        </p>\n+      </subsection>\n+\n+      <subsection name=\"Properties\" id=\"JavadocMissingWhitespaceAfterAsterisk_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>violateExecutionOnNonTightHtml</td>\n+              <td>\n+                Control when to print violations if the Javadoc being examined by this check\n+                violates the tight html rules defined at\n+                <a href=\"writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.</td>\n+              <td><a href=\"property_types.html#boolean\">Boolean</a></td>\n+              <td><code>false</code></td>\n+              <td>8.3</td>\n+            </tr>\n+          </table>\n+        </div>\n+      </subsection>\n+\n+      <subsection name=\"Examples\" id=\"JavadocMissingWhitespaceAfterAsterisk_Examples\">\n+        <p>\n+          To configure the default check:\n+        </p>\n+        <source>\n+&lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+        </source>\n+        <p>\n+          Code Example:\n+        </p>\n+        <source>\n+class TestClass {\n+  /**\n+   *This is invalid Javadoc.\n+   */\n+  void invalidJavaDocMethod() {\n+  }\n+  /**\n+   * This is valid Javadoc.\n+   */\n+  void validJavaDocMethod() {\n+  }\n+  /**This is invalid single-line Javadoc. */\n+  void InvalidSingleLineJavaDocMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd43f50116eb78d4360d3d3df7d1e7ede1b766b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDYwNTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1MTowOFrOF3fzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1MTowOFrOF3fzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNjk4OQ==", "bodyText": "please split this big commit into two.\n1st commit \"minor: fix missed space violation from JavadocMissingWhitespaceAfterAsteriskCheck\" place into it all violations resolving from new Check.\n2nd commit keep only functional changes for new Check introduction.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r393736989", "createdAt": "2020-03-17T14:51:08Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java", "diffHunk": "@@ -460,7 +460,7 @@\n      *\n      * <p><b>Example:</b></p>\n      * <pre><code>{&#64;docRoot\n-     *}</code></pre>\n+     * }</code></pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99db0bf43f9875eaec9b6686e77bddea5faba5dd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDYyMjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1NToxMVrOF3f-UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1NToxMVrOF3f-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczOTg1Nw==", "bodyText": "please add *This is invalid Javadoc. over class to give small hint to user that we validate all javadoc comments, not only on methods", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r393739857", "createdAt": "2020-03-17T14:55:11Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * class TestClass {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99db0bf43f9875eaec9b6686e77bddea5faba5dd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDYyNjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1NjowMVrOF3gA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1NjowMVrOF3gA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MDUwOA==", "bodyText": "please convert this method to field, to show Checks targets wide range of javadocs.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r393740508", "createdAt": "2020-03-17T14:56:01Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   void invalidJavaDocMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99db0bf43f9875eaec9b6686e77bddea5faba5dd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDYzNjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1ODoyNlrOF3gHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1ODoyNlrOF3gHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjI3Ng==", "bodyText": "we try to encourage all Checks to do log in visit.... methods.\nPlease refactor this method to return boolean to make a log base on result from it.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r393742276", "createdAt": "2020-03-17T14:58:26Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,129 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   void invalidJavaDocMethod() {\n+ *   }\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.31\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null && textNode.getType() != JavadocTokenTypes.EOF) {\n+            checkWhitespaceAfterAsterisk(textNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99db0bf43f9875eaec9b6686e77bddea5faba5dd"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDY1NjE0OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowMjo0OFrOF3gUvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowMjo0OFrOF3gUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0NTU5OA==", "bodyText": "please add 3 lines of empty lines before class we will reuse this in future when Check become to have properties and we need to put in that lines config.\nPlease do same for other inputs.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r393745598", "createdAt": "2020-03-17T15:02:48Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99db0bf43f9875eaec9b6686e77bddea5faba5dd"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDY3MjA4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowNjoyOFrOF3ge_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowNjoyOFrOF3ge_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0ODIyMw==", "bodyText": "please create Input that has javadocs in most possible places (class, methods, fileds, enums, inner classes, ) and make all cases valid. It will be clear definiton of what is expected as correct.\nPlease create another Input file (class, methods, fields, ..... ) that will contains invalid cases.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r393748223", "createdAt": "2020-03-17T15:06:28Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsterisk.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+class InputJavadocMissingWhitespaceAfterAsterisk\n+{\n+    /****\n+     *\n+     * This is ok.\n+     ****/\n+    void foo() {}\n+\n+    /**\n+     *  @see Something\n+     */\n+    void foo1() {}\n+\n+    /**\n+     *Violation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99db0bf43f9875eaec9b6686e77bddea5faba5dd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDkwNTYzOnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsteriskInvalid.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMDowNjoyNVrOF5saFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjozOTozMVrOF5vWXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDcyNg==", "bodyText": "Some Javadoc ==> violation or Some Javadoc with violation.\nplease do the same for all, to clearly define line that will have violation.\nPlease apply this to all other cases.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r396040726", "createdAt": "2020-03-22T00:06:25Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsteriskInvalid.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+\n+\n+\n+/**\n+ *Some Javadoc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03ea93d342d4f640f6da2e1b0f9702ec7b9f997e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4ODkyNw==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r396088927", "createdAt": "2020-03-22T12:39:31Z", "author": {"login": "0blivious"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsteriskInvalid.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+\n+\n+\n+/**\n+ *Some Javadoc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDcyNg=="}, "originalCommit": {"oid": "03ea93d342d4f640f6da2e1b0f9702ec7b9f997e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTMyMTgwOnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsteriskInvalid.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMzo0Mzo0N1rOF5vvJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNzowODoxNlrOF5xFjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5NTI2OQ==", "bodyText": "please place word violation on each line where violation is present.\nit should be clear where exactly violation be placed , without reading of UT expectations.\nin other words: each line at final String[] expected = { should have word violation in input file, on same line.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r396095269", "createdAt": "2020-03-22T13:43:47Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsteriskInvalid.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+\n+\n+\n+/**Some Javadoc with violation.\n+ *\n+ */\n+class InputJavadocMissingWhitespaceAfterAsteriskInvalid\n+{\n+    /**\n+     *<p>Some Javadoc with violation.\n+     */\n+    class InnerInputJavadocMissingWhitespaceAfterAsteriskInValid {\n+\n+        /**\n+         *Some Javadoc with violation.\n+         */\n+        public static final byte NUL = 0;\n+\n+        /**\n+         * Some Javadoc.\n+         *\n+         *<p>Some Javadoc with violation.\n+         */\n+        void bar1() {}\n+\n+        /***Some Javadoc with violation. ***/\n+        void bar2() {}\n+    }\n+\n+    /****\n+     * Some Javadoc.\n+     *@see Something with violation\n+     ****/\n+    void foo1() {}\n+\n+    /**\n+     *Some Javadoc with violation.\n+     **/\n+    public static final int foo2 = 0;\n+\n+    /**\n+     *Some Javadoc with violation.\n+     */\n+    enum Foo3 {}\n+\n+    /**\n+     *<pre>\n+     *   Some Javadoc with violation.\n+     *</pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "452894600643a33494e165ab2ba1a40fce41a648"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExNzM5MQ==", "bodyText": "done and report updated", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r396117391", "createdAt": "2020-03-22T17:08:16Z", "author": {"login": "0blivious"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmissingwhitespaceafterasterisk/InputJavadocMissingWhitespaceAfterAsteriskInvalid.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmissingwhitespaceafterasterisk;\n+\n+\n+\n+/**Some Javadoc with violation.\n+ *\n+ */\n+class InputJavadocMissingWhitespaceAfterAsteriskInvalid\n+{\n+    /**\n+     *<p>Some Javadoc with violation.\n+     */\n+    class InnerInputJavadocMissingWhitespaceAfterAsteriskInValid {\n+\n+        /**\n+         *Some Javadoc with violation.\n+         */\n+        public static final byte NUL = 0;\n+\n+        /**\n+         * Some Javadoc.\n+         *\n+         *<p>Some Javadoc with violation.\n+         */\n+        void bar1() {}\n+\n+        /***Some Javadoc with violation. ***/\n+        void bar2() {}\n+    }\n+\n+    /****\n+     * Some Javadoc.\n+     *@see Something with violation\n+     ****/\n+    void foo1() {}\n+\n+    /**\n+     *Some Javadoc with violation.\n+     **/\n+    public static final int foo2 = 0;\n+\n+    /**\n+     *Some Javadoc with violation.\n+     */\n+    enum Foo3 {}\n+\n+    /**\n+     *<pre>\n+     *   Some Javadoc with violation.\n+     *</pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5NTI2OQ=="}, "originalCommit": {"oid": "452894600643a33494e165ab2ba1a40fce41a648"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODM5Mjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMjozNDo1M1rOF9M1TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo1NDoyN1rOF-W9Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzcwOQ==", "bodyText": "please change a logic a bit.\nAt the beginning we do not know that we have whitespace so hasWhitespaceAfterAsterisk = false; if you find it you do hasWhitespaceAfterAsterisk = true;", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r399717709", "createdAt": "2020-03-28T22:34:53Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * &#47;** This is valid single-line Javadoc. *&#47;\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   int invalidJavaDoc;\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.31\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null\n+                && textNode.getType() != JavadocTokenTypes.EOF\n+                && !hasWhitespaceAfterAsterisk(textNode)) {\n+            log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks if there is at least one whitespace after leading asterisks.\n+     *\n+     * @param node the node after the leading asterisks.\n+     * @return true if there is at least one white space after asterisk.\n+     */\n+    private static boolean hasWhitespaceAfterAsterisk(DetailNode node) {\n+        boolean hasWhitespaceAfterAsterisk = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5484093d9bc56599272aaf9b9ec043dead7595db"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0NjY5Mg==", "bodyText": "I set the initial value to be true because we wish to allow comment like\n /***   tagText = '*'\n  * Something\n  */\n\nSo if the node text is a pure sequence of '*' I want to return true. If the initial value is set to be false, I will need additional code to perform this check. Is this ok? Or I actually should write another method to check this?", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r399746692", "createdAt": "2020-03-29T05:12:10Z", "author": {"login": "0blivious"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * &#47;** This is valid single-line Javadoc. *&#47;\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   int invalidJavaDoc;\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.31\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null\n+                && textNode.getType() != JavadocTokenTypes.EOF\n+                && !hasWhitespaceAfterAsterisk(textNode)) {\n+            log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks if there is at least one whitespace after leading asterisks.\n+     *\n+     * @param node the node after the leading asterisks.\n+     * @return true if there is at least one white space after asterisk.\n+     */\n+    private static boolean hasWhitespaceAfterAsterisk(DetailNode node) {\n+        boolean hasWhitespaceAfterAsterisk = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzcwOQ=="}, "originalCommit": {"oid": "5484093d9bc56599272aaf9b9ec043dead7595db"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2NzMzNg==", "bodyText": "You should never \"lie\" in code. If you not sure - you are not sure.\nAt the beginning is in FALSE, if met space it become - true. If no characters other then \"*\" spacial state that you should consider same as there is space - it has to written in code. Nobody need to remember this.\nname method hasWhitespaceAfterAsteriskBeforeText and write logic to follow a name.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r399867336", "createdAt": "2020-03-29T23:04:43Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * &#47;** This is valid single-line Javadoc. *&#47;\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   int invalidJavaDoc;\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.31\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null\n+                && textNode.getType() != JavadocTokenTypes.EOF\n+                && !hasWhitespaceAfterAsterisk(textNode)) {\n+            log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks if there is at least one whitespace after leading asterisks.\n+     *\n+     * @param node the node after the leading asterisks.\n+     * @return true if there is at least one white space after asterisk.\n+     */\n+    private static boolean hasWhitespaceAfterAsterisk(DetailNode node) {\n+        boolean hasWhitespaceAfterAsterisk = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzcwOQ=="}, "originalCommit": {"oid": "5484093d9bc56599272aaf9b9ec043dead7595db"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkzMjE3OA==", "bodyText": "done", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r400932178", "createdAt": "2020-03-31T13:54:27Z", "author": {"login": "0blivious"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * &#47;** This is valid single-line Javadoc. *&#47;\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   int invalidJavaDoc;\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.31\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null\n+                && textNode.getType() != JavadocTokenTypes.EOF\n+                && !hasWhitespaceAfterAsterisk(textNode)) {\n+            log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks if there is at least one whitespace after leading asterisks.\n+     *\n+     * @param node the node after the leading asterisks.\n+     * @return true if there is at least one white space after asterisk.\n+     */\n+    private static boolean hasWhitespaceAfterAsterisk(DetailNode node) {\n+        boolean hasWhitespaceAfterAsterisk = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzcwOQ=="}, "originalCommit": {"oid": "5484093d9bc56599272aaf9b9ec043dead7595db"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTEyNzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzozMToyM1rOF_rUBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowNjowN1rOGAUm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxNDI0NA==", "bodyText": "unfortunately I still do not like design .....\nname hasWhitespaceAfterAsteriskBeforeText is not same as logic inside, it will be a problems in future.\nplease do:\nif (textNode != null\n  && textNode.getType() != JavadocTokenTypes.EOF) {\n    int lastAsterisPosition = getLastLeadingAsterik(....)\n    if (!isLast(lastAsterisPosition) && !isWhitespace(lastAsterisPosition +1  )) {\n      log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);\n    }\n}\n\nand please add tests case with tabs after leading asterik.\nPlease create new Input file for this as tabs are forbidden in java files in our repo, so we need to suppress violation on it.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r402314244", "createdAt": "2020-04-02T13:31:23Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * &#47;** This is valid single-line Javadoc. *&#47;\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   int invalidJavaDoc;\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.32\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null\n+                && textNode.getType() != JavadocTokenTypes.EOF\n+                && !hasWhitespaceAfterAsteriskBeforeText(textNode)) {\n+            log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32a0f623e4ea4a9aced82b11b3f1c83223f4cfc"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDgwMA==", "bodyText": "Please create new Input file for this as tabs are forbidden in java files in our repo, so we need to suppress violation on it.\n\nsad leftover #8019, we do not validate such code for bad whitespaces.", "url": "https://github.com/checkstyle/checkstyle/pull/7775#discussion_r402990800", "createdAt": "2020-04-03T13:06:07Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks that there is at least one whitespace after the leading asterisk.\n+ * Although spaces after asterisks are optional in the Javadoc comments, their absence\n+ * makes the documentation difficult to read. It is the de facto standard to put at least\n+ * one whitespace after the leading asterisk.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations\n+ * if the Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the default check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingWhitespaceAfterAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Code Example:\n+ * </p>\n+ * <pre>\n+ * &#47;** This is valid single-line Javadoc. *&#47;\n+ * class TestClass {\n+ *   &#47;**\n+ *     *This is invalid Javadoc.\n+ *     *&#47;\n+ *   int invalidJavaDoc;\n+ *   &#47;**\n+ *     * This is valid Javadoc.\n+ *     *&#47;\n+ *   void validJavaDocMethod() {\n+ *   }\n+ *   &#47;**This is invalid single-line Javadoc. *&#47;\n+ *   void invalidSingleLineJavaDocMethod() {\n+ *   }\n+ *   &#47;** This is valid single-line Javadoc. *&#47;\n+ *   void validSingleLineJavaDocMethod() {\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.32\n+ */\n+@StatelessCheck\n+public class JavadocMissingWhitespaceAfterAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\" file.\n+     */\n+    public static final String MSG_KEY = \"javadoc.missing.whitespace\";\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.JAVADOC,\n+            JavadocTokenTypes.LEADING_ASTERISK,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return getAcceptableJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        final DetailNode textNode;\n+\n+        if (detailNode.getType() == JavadocTokenTypes.JAVADOC) {\n+            textNode = JavadocUtil.getFirstChild(detailNode);\n+        }\n+        else {\n+            textNode = JavadocUtil.getNextSibling(detailNode);\n+        }\n+\n+        if (textNode != null\n+                && textNode.getType() != JavadocTokenTypes.EOF\n+                && !hasWhitespaceAfterAsteriskBeforeText(textNode)) {\n+            log(textNode.getLineNumber(), textNode.getColumnNumber(), MSG_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxNDI0NA=="}, "originalCommit": {"oid": "c32a0f623e4ea4a9aced82b11b3f1c83223f4cfc"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1399, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}