{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NTI3MDc3", "number": 8902, "title": "Issue #6481: Generic XPath check", "bodyText": "#6481\nContribution update: checkstyle/contribution#528", "createdAt": "2020-10-18T19:29:59Z", "url": "https://github.com/checkstyle/checkstyle/pull/8902", "merged": true, "mergeCommit": {"oid": "6fe8e156226f2264196de61170e25e809213ad01"}, "closed": true, "closedAt": "2020-12-05T15:50:58Z", "author": {"login": "timurt"}, "timelineItems": {"totalCount": 90, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVcThzgBqjM5MTU1ODI4MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjOZIFAFqTU0NTU5NjU5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53be53bf797c4a63ef95d3565c2d4dc19bb9d04a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/53be53bf797c4a63ef95d3565c2d4dc19bb9d04a", "committedDate": "2020-10-18T19:28:43Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "d91d6f4a4e3f9055db4ba84b99075ddb60d9430b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d91d6f4a4e3f9055db4ba84b99075ddb60d9430b", "committedDate": "2020-10-23T20:07:44Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91d6f4a4e3f9055db4ba84b99075ddb60d9430b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d91d6f4a4e3f9055db4ba84b99075ddb60d9430b", "committedDate": "2020-10-23T20:07:44Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "a3e35b746c1aa25c362bc41c72824491ae903c43", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a3e35b746c1aa25c362bc41c72824491ae903c43", "committedDate": "2020-10-29T20:33:30Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3e35b746c1aa25c362bc41c72824491ae903c43", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a3e35b746c1aa25c362bc41c72824491ae903c43", "committedDate": "2020-10-29T20:33:30Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "71d2b56cc522d25a354464332dd621674c0d2d6e", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/71d2b56cc522d25a354464332dd621674c0d2d6e", "committedDate": "2020-10-30T07:18:16Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71d2b56cc522d25a354464332dd621674c0d2d6e", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/71d2b56cc522d25a354464332dd621674c0d2d6e", "committedDate": "2020-10-30T07:18:16Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "11aeb5f49242b680df7171370b84b70d2d8b817b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/11aeb5f49242b680df7171370b84b70d2d8b817b", "committedDate": "2020-10-30T20:50:40Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11aeb5f49242b680df7171370b84b70d2d8b817b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/11aeb5f49242b680df7171370b84b70d2d8b817b", "committedDate": "2020-10-30T20:50:40Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "6f6392976d5e255456ff3e53e2b7344fe40c2ee3", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6f6392976d5e255456ff3e53e2b7344fe40c2ee3", "committedDate": "2020-10-30T20:51:09Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f6392976d5e255456ff3e53e2b7344fe40c2ee3", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6f6392976d5e255456ff3e53e2b7344fe40c2ee3", "committedDate": "2020-10-30T20:51:09Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "7db89665c4256bb3286b248b721129c66f649046", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7db89665c4256bb3286b248b721129c66f649046", "committedDate": "2020-10-31T04:52:21Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTMxNTIz", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-521131523", "createdAt": "2020-10-31T11:12:43Z", "commit": {"oid": "7db89665c4256bb3286b248b721129c66f649046"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMToxMjo0M1rOHrmxLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMToyMToyN1rOHrm0Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NTk5Ng==", "bodyText": "xPath -> XPath", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515485996", "createdAt": "2020-10-31T11:12:43Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates XPath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by XPath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using XPath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - XPath query. Type is {@code java.lang.String}. Default value\n+ * is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"xpath.finding\";\n+\n+    /** XPath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluatexPathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluatexPathQuery(DetailAST rootAST) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db89665c4256bb3286b248b721129c66f649046"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjQyOQ==", "bodyText": "Xpath -> XPath", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515486429", "createdAt": "2020-10-31T11:17:14Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates XPath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by XPath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using XPath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - XPath query. Type is {@code java.lang.String}. Default value\n+ * is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db89665c4256bb3286b248b721129c66f649046"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjgyMw==", "bodyText": "To make Pitest happy, call getRequiredTokens here. Like in this Check:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/NoCodeInFileCheck.java#L93", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515486823", "createdAt": "2020-10-31T11:21:27Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates XPath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by XPath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using XPath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - XPath query. Type is {@code java.lang.String}. Default value\n+ * is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"xpath.finding\";\n+\n+    /** XPath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluatexPathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluatexPathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);\n+            });\n+        }\n+        catch (XPathException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db89665c4256bb3286b248b721129c66f649046"}, "originalPosition": 127}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7db89665c4256bb3286b248b721129c66f649046", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7db89665c4256bb3286b248b721129c66f649046", "committedDate": "2020-10-31T04:52:21Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "3a5eaddc74ca1f3eedc7c399a975fb1dc369a879", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3a5eaddc74ca1f3eedc7c399a975fb1dc369a879", "committedDate": "2020-10-31T14:08:04Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a5eaddc74ca1f3eedc7c399a975fb1dc369a879", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3a5eaddc74ca1f3eedc7c399a975fb1dc369a879", "committedDate": "2020-10-31T14:08:04Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "e465b660b08360ece479648941dda80f69bc4581", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e465b660b08360ece479648941dda80f69bc4581", "committedDate": "2020-11-02T17:15:32Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e465b660b08360ece479648941dda80f69bc4581", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e465b660b08360ece479648941dda80f69bc4581", "committedDate": "2020-11-02T17:15:32Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "b71e7850c8ea5a18e8beea0003a42c203c776259", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b71e7850c8ea5a18e8beea0003a42c203c776259", "committedDate": "2020-11-02T17:59:33Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b71e7850c8ea5a18e8beea0003a42c203c776259", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b71e7850c8ea5a18e8beea0003a42c203c776259", "committedDate": "2020-11-02T17:59:33Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "8d6d8283f71f86eed2904b3a49c43b3d3abe483e", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8d6d8283f71f86eed2904b3a49c43b3d3abe483e", "committedDate": "2020-11-07T20:26:41Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d6d8283f71f86eed2904b3a49c43b3d3abe483e", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8d6d8283f71f86eed2904b3a49c43b3d3abe483e", "committedDate": "2020-11-07T20:26:41Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "b8c6390ed2052a1e36547e366cce800789ef6ba2", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b8c6390ed2052a1e36547e366cce800789ef6ba2", "committedDate": "2020-11-08T13:01:19Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8c6390ed2052a1e36547e366cce800789ef6ba2", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b8c6390ed2052a1e36547e366cce800789ef6ba2", "committedDate": "2020-11-08T13:01:19Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "a0626b838c04ef0f1ad36c80f98e287a4137d1df", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a0626b838c04ef0f1ad36c80f98e287a4137d1df", "committedDate": "2020-11-09T15:43:46Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0626b838c04ef0f1ad36c80f98e287a4137d1df", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a0626b838c04ef0f1ad36c80f98e287a4137d1df", "committedDate": "2020-11-09T15:43:46Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "committedDate": "2020-11-11T16:57:27Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY2NDAz", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-530766403", "createdAt": "2020-11-15T04:37:04Z", "commit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDozNzowNVrOHzcgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDo0MDoyNlrOHzchnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjUzMw==", "bodyText": "We need to find better use for us.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706533", "createdAt": "2020-11-15T04:37:05Z", "author": {"login": "romani"}, "path": "config/checkstyle_checks.xml", "diffHunk": "@@ -444,6 +444,7 @@\n     <module name=\"UnnecessarySemicolonInEnumeration\"/>\n     <module name=\"UnnecessarySemicolonInTryWithResources\"/>\n     <module name=\"VariableDeclarationUsageDistance\"/>\n+    <module name=\"GenericXpath\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjYwNQ==", "bodyText": "Evaluates Xpath query and report violation on matching AST nodes.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706605", "createdAt": "2020-11-15T04:38:21Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjc4MA==", "bodyText": "Name is too generic.\nWhat about MatchXpathCheck ?", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706780", "createdAt": "2020-11-15T04:40:26Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY2NjM3", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-530766637", "createdAt": "2020-11-15T04:42:17Z", "commit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDo0MjoxN1rOHzciNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDo0MjoxN1rOHzciNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjkzMg==", "bodyText": "All config should have example of behavior.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706932", "createdAt": "2020-11-15T04:42:17Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY3Mjc5", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-530767279", "createdAt": "2020-11-15T04:59:19Z", "commit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDo1OToxOVrOHzcm7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDo1OToxOVrOHzcm7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwODE0MQ==", "bodyText": "Why violation ?\nPlease share CLI output for each example.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523708141", "createdAt": "2020-11-15T04:59:19Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY3NDMx", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-530767431", "createdAt": "2020-11-15T05:03:45Z", "commit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNTowMzo0NlrOHzcoJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNTowMzo0NlrOHzcoJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwODQ1Mg==", "bodyText": "matchxpath.match\nI think it is good practice to name message resources  by name of check.\nCan you write xpath query to validate this rule over Check fields that are named MSG_ ?", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523708452", "createdAt": "2020-11-15T05:03:46Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"xpath.finding\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "committedDate": "2020-11-11T16:57:27Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "2f86064c8d9dc5d9399a765b863cac508042d125", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2f86064c8d9dc5d9399a765b863cac508042d125", "committedDate": "2020-11-15T06:53:41Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f86064c8d9dc5d9399a765b863cac508042d125", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2f86064c8d9dc5d9399a765b863cac508042d125", "committedDate": "2020-11-15T06:53:41Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "1990a639fbb18235aab4d243a43e4dd0f8a3c8be", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1990a639fbb18235aab4d243a43e4dd0f8a3c8be", "committedDate": "2020-11-15T07:54:26Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1990a639fbb18235aab4d243a43e4dd0f8a3c8be", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1990a639fbb18235aab4d243a43e4dd0f8a3c8be", "committedDate": "2020-11-15T07:54:26Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "bde00b21f3c1ae7e433fecd780d53c83b43c292f", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/bde00b21f3c1ae7e433fecd780d53c83b43c292f", "committedDate": "2020-11-15T09:05:55Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bde00b21f3c1ae7e433fecd780d53c83b43c292f", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/bde00b21f3c1ae7e433fecd780d53c83b43c292f", "committedDate": "2020-11-15T09:05:55Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "3d977b79dad7650a2e57309be626153a92f1d3c3", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3d977b79dad7650a2e57309be626153a92f1d3c3", "committedDate": "2020-11-15T10:47:49Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d977b79dad7650a2e57309be626153a92f1d3c3", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3d977b79dad7650a2e57309be626153a92f1d3c3", "committedDate": "2020-11-15T10:47:49Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "1587f798bee5c72cf4bf1585f5f0b58cbe60b176", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1587f798bee5c72cf4bf1585f5f0b58cbe60b176", "committedDate": "2020-11-15T13:03:35Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1587f798bee5c72cf4bf1585f5f0b58cbe60b176", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1587f798bee5c72cf4bf1585f5f0b58cbe60b176", "committedDate": "2020-11-15T13:03:35Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2267648a1fc389a8cd06473075da142bf677523d", "committedDate": "2020-11-15T13:14:29Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODA4OTky", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-530808992", "createdAt": "2020-11-15T15:30:52Z", "commit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTozMDo1MlrOHzgnvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTo0Mjo0MlrOHzgs-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Mzg4Ng==", "bodyText": "move this setter on top of methods.\nthen should be all getXXXxxxToken\nthen should be beginTree", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523773886", "createdAt": "2020-11-15T15:30:52Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluateXpathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluateXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);\n+            });\n+        }\n+        catch (XPathException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;\n+    }\n+\n+    /**\n+     * Setter to xpath query.\n+     *\n+     * @param query xpath query.\n+     */\n+    public void setQuery(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDAyOQ==", "bodyText": "please use google translator", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523774029", "createdAt": "2020-11-15T15:32:07Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages_de.properties", "diffHunk": "@@ -28,6 +28,7 @@ illegal.type=Die Verwendung des Typs ''{0}'' ist nicht erlaubt.\n inline.conditional.avoid=Der Inline-Conditional-Operator sollte vermieden werden.\n instantiation.avoid=Die Klasse {0} sollte nicht direkt instanziiert werden.\n magic.number=Die magische Zahl ''{0}'' sollte als Konstante definiert werden.\n+matchxpath.match=Node is not allowed by Xpath query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDY1Ng==", "bodyText": "this message is not good.\nWe should find some wording to hide such AST and Xpath details of inner implementation.\nSo we should ADVICE users to always write custom message in config.\nPlease add example of it in xdoc.\nbut we still need to have default message. What about Illegal code structure detected ?", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523774656", "createdAt": "2020-11-15T15:37:33Z", "author": {"login": "romani"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages.properties", "diffHunk": "@@ -28,6 +28,7 @@ illegal.type=Usage of type ''{0}'' is not allowed.\n inline.conditional.avoid=Avoid inline conditionals.\n instantiation.avoid=Instantiation of {0} should be avoided.\n magic.number=''{0}'' is a magic number.\n+matchxpath.match=Node is not allowed by Xpath query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDY5MA==", "bodyText": "please try to move log to beginTree", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523774690", "createdAt": "2020-11-15T15:38:08Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluateXpathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluateXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDg2NQ==", "bodyText": "wrapping of exception should always take come context of execution\nplease put query in exception message at least.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523774865", "createdAt": "2020-11-15T15:39:36Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluateXpathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluateXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);\n+            });\n+        }\n+        catch (XPathException ex) {\n+            throw new IllegalStateException(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTAzOA==", "bodyText": "Evaluates Xpath query and report violation on all matching AST nodes.\nsecond sentence might be removed, as it duplicates first.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523775038", "createdAt": "2020-11-15T15:41:01Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTIyNQ==", "bodyText": "we need to put here some links of what is Xpath and how to get checkstyle's AST .", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523775225", "createdAt": "2020-11-15T15:42:42Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2267648a1fc389a8cd06473075da142bf677523d", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2267648a1fc389a8cd06473075da142bf677523d", "committedDate": "2020-11-15T13:14:29Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b160d69b10d01276e2ee3a04439677d58db6d6d6", "committedDate": "2020-11-21T16:15:56Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTc5ODMy", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-535979832", "createdAt": "2020-11-21T16:59:06Z", "commit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxNjo1OTowNlrOH3v3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxNzozMjo0NFrOH3wEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNzkwOA==", "bodyText": "Please bump the version.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528217908", "createdAt": "2020-11-21T16:59:06Z", "author": {"login": "pbludov"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,150 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check with default configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxODcyNw==", "bodyText": "All other messages end with a period. This one (and all translations) should end with period too.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528218727", "createdAt": "2020-11-21T17:06:37Z", "author": {"login": "pbludov"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages.properties", "diffHunk": "@@ -28,6 +28,7 @@ illegal.type=Usage of type ''{0}'' is not allowed.\n inline.conditional.avoid=Avoid inline conditionals.\n instantiation.avoid=Instantiation of {0} should be avoided.\n magic.number=''{0}'' is a magic number.\n+matchxpath.match=Illegal code structure detected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxODkwNQ==", "bodyText": "This change is irrelevant, please undone.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528218905", "createdAt": "2020-11-21T17:08:37Z", "author": {"login": "pbludov"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/metrics/ClassDataAbstractionCouplingCheck.xml", "diffHunk": "@@ -64,7 +64,7 @@\n             <property default-value=\"7\" name=\"max\" type=\"int\">\n                <description>Specify the maximum threshold allowed.</description>\n             </property>\n-            <property default-value=\"ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character, Class, Deprecated, Deque, Double, Exception, Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException, IllegalStateException, IndexOutOfBoundsException, Integer, LinkedList, List, Long, Map, NullPointerException, Object, Override, Queue, RuntimeException, SafeVarargs, SecurityException, Set, Short, SortedMap, SortedSet, String, StringBuffer, StringBuilder, SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException, Void, boolean, byte, char, double, float, int, long, short, var, void\"\n+            <property default-value=\"ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character, Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet, Exception, Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException, IllegalStateException, IndexOutOfBoundsException, IntStream, Integer, LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map, NullPointerException, Object, Optional, OptionalDouble, OptionalInt, OptionalLong, Override, Queue, RuntimeException, SafeVarargs, SecurityException, Set, Short, SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder, SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException, Void, boolean, byte, char, double, float, int, long, short, var, void\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxODk2Mg==", "bodyText": "Same again.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528218962", "createdAt": "2020-11-21T17:09:02Z", "author": {"login": "pbludov"}, "path": "src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/metrics/ClassFanOutComplexityCheck.xml", "diffHunk": "@@ -31,7 +31,7 @@\n             <property default-value=\"20\" name=\"max\" type=\"int\">\n                <description>Specify the maximum threshold allowed.</description>\n             </property>\n-            <property default-value=\"ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character, Class, Deprecated, Deque, Double, Exception, Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException, IllegalStateException, IndexOutOfBoundsException, Integer, LinkedList, List, Long, Map, NullPointerException, Object, Override, Queue, RuntimeException, SafeVarargs, SecurityException, Set, Short, SortedMap, SortedSet, String, StringBuffer, StringBuilder, SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException, Void, boolean, byte, char, double, float, int, long, short, var, void\"\n+            <property default-value=\"ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character, Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet, Exception, Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException, IllegalStateException, IndexOutOfBoundsException, IntStream, Integer, LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map, NullPointerException, Object, Optional, OptionalDouble, OptionalInt, OptionalLong, Override, Queue, RuntimeException, SafeVarargs, SecurityException, Set, Short, SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder, SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException, Void, boolean, byte, char, double, float, int, long, short, var, void\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxOTg4MA==", "bodyText": "ex -> ignored. This is common naming convention for such cases.\nAnother (preferred) option is to assert the exception message.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528219880", "createdAt": "2020-11-21T17:18:12Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithDoubleBraceInitialization()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+\n+        checkConfig.addAttribute(\"query\", \"//INSTANCE_INIT[not(../*[not(\\n\"\n+                + \"                    self::LCURLY or\\n\"\n+                + \"                    self::INSTANCE_INIT or\\n\"\n+                + \"                    self::RCURLY or\\n\"\n+                + \"                    self::SINGLE_LINE_COMMENT or\\n\"\n+                + \"                    self::BLOCK_COMMENT_BEGIN\\n\"\n+                + \"                )])]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Do not use double-brace initialization\");\n+        final String[] expected = {\n+            \"11:35: Do not use double-brace initialization\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathDoubleBrace.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateIllegalThrowsCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//LITERAL_THROWS[./IDENT[@text='Throwable' or \"\n+                + \"@text='RuntimeException' or ends-with(@text, 'Error')]]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Illegal throws statement\");\n+        final String[] expected = {\n+            \"8:25: Illegal throws statement\",\n+            \"10:25: Illegal throws statement\",\n+            \"11:25: Illegal throws statement\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathIllegalThrows.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateExecutableStatementCountCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[count(./SLIST/*) > 2]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Executable number of statements \"\n+                + \"exceed threshold\");\n+        final String[] expected = {\n+            \"21:5: Executable number of statements exceed threshold\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathExecutableStatementCount.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testInvalidQuery() {\n+        final MatchXpathCheck matchXpathCheck = new MatchXpathCheck();\n+        matchXpathCheck.setQuery(\"!@#%^\");\n+\n+        final DetailAstImpl detailAST = new DetailAstImpl();\n+        detailAST.setType(TokenTypes.CLASS_DEF);\n+        detailAST.setText(\"Class Def\");\n+        detailAST.setLineNo(0);\n+        detailAST.setColumnNo(0);\n+\n+        try {\n+            matchXpathCheck.beginTree(detailAST);\n+            fail(\"Exception was expected\");\n+        }\n+        catch (IllegalStateException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMDE1OA==", "bodyText": "Please use Truth assertions here and below:\n        assertWithMessage(\"Expected empty array\")\n                .that(matchXpathCheck.getDefaultTokens())\n                .isEmpty();", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528220158", "createdAt": "2020-11-21T17:21:00Z", "author": {"login": "pbludov"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithDoubleBraceInitialization()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+\n+        checkConfig.addAttribute(\"query\", \"//INSTANCE_INIT[not(../*[not(\\n\"\n+                + \"                    self::LCURLY or\\n\"\n+                + \"                    self::INSTANCE_INIT or\\n\"\n+                + \"                    self::RCURLY or\\n\"\n+                + \"                    self::SINGLE_LINE_COMMENT or\\n\"\n+                + \"                    self::BLOCK_COMMENT_BEGIN\\n\"\n+                + \"                )])]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Do not use double-brace initialization\");\n+        final String[] expected = {\n+            \"11:35: Do not use double-brace initialization\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathDoubleBrace.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateIllegalThrowsCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//LITERAL_THROWS[./IDENT[@text='Throwable' or \"\n+                + \"@text='RuntimeException' or ends-with(@text, 'Error')]]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Illegal throws statement\");\n+        final String[] expected = {\n+            \"8:25: Illegal throws statement\",\n+            \"10:25: Illegal throws statement\",\n+            \"11:25: Illegal throws statement\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathIllegalThrows.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateExecutableStatementCountCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[count(./SLIST/*) > 2]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Executable number of statements \"\n+                + \"exceed threshold\");\n+        final String[] expected = {\n+            \"21:5: Executable number of statements exceed threshold\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathExecutableStatementCount.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testInvalidQuery() {\n+        final MatchXpathCheck matchXpathCheck = new MatchXpathCheck();\n+        matchXpathCheck.setQuery(\"!@#%^\");\n+\n+        final DetailAstImpl detailAST = new DetailAstImpl();\n+        detailAST.setType(TokenTypes.CLASS_DEF);\n+        detailAST.setText(\"Class Def\");\n+        detailAST.setLineNo(0);\n+        detailAST.setColumnNo(0);\n+\n+        try {\n+            matchXpathCheck.beginTree(detailAST);\n+            fail(\"Exception was expected\");\n+        }\n+        catch (IllegalStateException ex) {\n+            // it is OK\n+        }\n+    }\n+\n+    @Test\n+    public void testGetDefaultTokens() {\n+        final MatchXpathCheck matchXpathCheck = new MatchXpathCheck();\n+        assertThat(\"Expected empty array\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMDYwOQ==", "bodyText": "I may be wrong, but it seems that the checks in this file should be sorted alphabetically (by check name). Please move it to right after MagicNumber.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528220609", "createdAt": "2020-11-21T17:25:27Z", "author": {"login": "pbludov"}, "path": "src/xdocs/checks.xml", "diffHunk": "@@ -966,6 +966,10 @@\n               VariableDeclarationUsageDistance</a></td>\n             <td>Checks the distance between declaration of variable and its first usage.</td>\n           </tr>\n+          <tr>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMTE5Mw==", "bodyText": "Do we need default configuration here? It does nothing. Similar checks has no default configuration", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528221193", "createdAt": "2020-11-21T17:31:05Z", "author": {"login": "pbludov"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3614,6 +3614,99 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.37</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath.\n+          Please read more about xpath syntax at\n+          <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\"> W3Schools Xpath Syntax</a>.\n+        </p>\n+      </subsection>\n+\n+      <subsection name=\"Properties\" id=\"MatchXpath_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>query</td>\n+              <td>Xpath query.</td>\n+              <td><a href=\"property_types.html#String\">String</a></td>\n+              <td><code>&quot;&quot;</code></td>\n+              <td>8.37</td>\n+            </tr>\n+          </table>\n+        </div>\n+      </subsection>\n+\n+      <subsection name=\"Examples\" id=\"MatchXpath_Examples\">\n+        <p>\n+          To configure the check with default configuration:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMTMzNw==", "bodyText": "Please specify explicitly that the check does nothing by default.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528221337", "createdAt": "2020-11-21T17:32:44Z", "author": {"login": "pbludov"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3614,6 +3614,99 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.37</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath.\n+          Please read more about xpath syntax at\n+          <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\"> W3Schools Xpath Syntax</a>.\n+        </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b160d69b10d01276e2ee3a04439677d58db6d6d6", "committedDate": "2020-11-21T16:15:56Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "62d46df5422fa835617c4ed5590c0cf91c957cad", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/62d46df5422fa835617c4ed5590c0cf91c957cad", "committedDate": "2020-11-21T17:33:53Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62d46df5422fa835617c4ed5590c0cf91c957cad", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/62d46df5422fa835617c4ed5590c0cf91c957cad", "committedDate": "2020-11-21T17:33:53Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "1c5f49e06aa42057039b0d3a7d338b89b34ccacf", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1c5f49e06aa42057039b0d3a7d338b89b34ccacf", "committedDate": "2020-11-21T17:43:39Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c5f49e06aa42057039b0d3a7d338b89b34ccacf", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1c5f49e06aa42057039b0d3a7d338b89b34ccacf", "committedDate": "2020-11-21T17:43:39Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "795f68df7d2c6b057eccd077792f9f4e2b17ec33", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/795f68df7d2c6b057eccd077792f9f4e2b17ec33", "committedDate": "2020-11-21T17:45:23Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "795f68df7d2c6b057eccd077792f9f4e2b17ec33", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/795f68df7d2c6b057eccd077792f9f4e2b17ec33", "committedDate": "2020-11-21T17:45:23Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "8fad2ea3298598420b722276642a561d7354daae", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8fad2ea3298598420b722276642a561d7354daae", "committedDate": "2020-11-21T17:47:10Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTgzNDM4", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-535983438", "createdAt": "2020-11-21T17:52:39Z", "commit": {"oid": "8fad2ea3298598420b722276642a561d7354daae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fad2ea3298598420b722276642a561d7354daae", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8fad2ea3298598420b722276642a561d7354daae", "committedDate": "2020-11-21T17:47:10Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "0048d3c62b044d9a64ca089bd8bc89a68dffe434", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0048d3c62b044d9a64ca089bd8bc89a68dffe434", "committedDate": "2020-11-21T18:56:35Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0048d3c62b044d9a64ca089bd8bc89a68dffe434", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0048d3c62b044d9a64ca089bd8bc89a68dffe434", "committedDate": "2020-11-21T18:56:35Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "7e743152a64676ae8eda0bd2a0c0ac0d3834ce94", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7e743152a64676ae8eda0bd2a0c0ac0d3834ce94", "committedDate": "2020-11-21T21:03:54Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e743152a64676ae8eda0bd2a0c0ac0d3834ce94", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/7e743152a64676ae8eda0bd2a0c0ac0d3834ce94", "committedDate": "2020-11-21T21:03:54Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "9f995a66d5b9ef4668f0db1f64a85754146de039", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/9f995a66d5b9ef4668f0db1f64a85754146de039", "committedDate": "2020-11-21T22:16:51Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDE4OTcx", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-536018971", "createdAt": "2020-11-22T00:21:18Z", "commit": {"oid": "9f995a66d5b9ef4668f0db1f64a85754146de039"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDoyMToxOFrOH3yelg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDoyNTowN1rOH3yfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MDc1OA==", "bodyText": "final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\nfinal XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n\ncan we make this execution to be done ones for whole Checkstyle execution ?\nfor example in \"setQuery\".", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528260758", "createdAt": "2020-11-22T00:21:18Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,184 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    /**\n+     * Setter to xpath query.\n+     *\n+     * @param query xpath query.\n+     */\n+    public void setQuery(String query) {\n+        this.query = query;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;\n+    }\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            final List<DetailAST> matchingNodes = findMatchingNodesByXpathQuery(rootAST);\n+            matchingNodes.forEach(node -> log(node, MSG_KEY));\n+        }\n+    }\n+\n+    private List<DetailAST> findMatchingNodesByXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f995a66d5b9ef4668f0db1f64a85754146de039"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MTA0OA==", "bodyText": "please update all Inputs to place there query that you used.\nYou used default only over one Input.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528261048", "createdAt": "2020-11-22T00:25:07Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/InputMatchXpathIllegalThrows.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\n+\n+/* Config:\n+ *\n+ * default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f995a66d5b9ef4668f0db1f64a85754146de039"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f995a66d5b9ef4668f0db1f64a85754146de039", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/9f995a66d5b9ef4668f0db1f64a85754146de039", "committedDate": "2020-11-21T22:16:51Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/219aabea1932961c2922b4380cfbd45e06b76e97", "committedDate": "2020-11-22T18:45:00Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTI3OTU4", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-536127958", "createdAt": "2020-11-22T23:25:03Z", "commit": {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMzoyNTowM1rOH38T0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMzoyNzoxM1rOH38U-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMTg0MQ==", "bodyText": "To violate ...", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528421841", "createdAt": "2020-11-22T23:25:03Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,215 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMTkwMw==", "bodyText": "put property on new line.\nPlease keep pretty print of XML in javadoc in this and other examples.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528421903", "createdAt": "2020-11-22T23:25:22Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,215 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMjEzNg==", "bodyText": "To violate ...\nwe do not fail anything, we just put some severity of events and plugin configuration usually do decision to fail or .... .", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528422136", "createdAt": "2020-11-22T23:27:13Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,215 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/219aabea1932961c2922b4380cfbd45e06b76e97", "committedDate": "2020-11-22T18:45:00Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "b93183cab9a1469c5ee3a7d7c10aae35f6fc73d0", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b93183cab9a1469c5ee3a7d7c10aae35f6fc73d0", "committedDate": "2020-11-23T11:39:32Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b93183cab9a1469c5ee3a7d7c10aae35f6fc73d0", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b93183cab9a1469c5ee3a7d7c10aae35f6fc73d0", "committedDate": "2020-11-23T11:39:32Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0efacee151891f9d47fca5171aea33a1a08f9b81", "committedDate": "2020-11-23T12:37:53Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTcwNjg0", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-536570684", "createdAt": "2020-11-23T15:17:01Z", "commit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNzowMVrOH4SB9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTozMDo1OVrOH4SrQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzcxNw==", "bodyText": "it works, but better to suggest\n..... -b \".....\"", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528777717", "createdAt": "2020-11-23T15:17:01Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MDA1OQ==", "bodyText": "* Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a> and \n * <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\"\n *   GUI application</a> with options to\n * shown AST to ease usage of Xpath queries.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528780059", "createdAt": "2020-11-23T15:20:19Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MTM1Mw==", "bodyText": "-T, as we are about to make it comments also.\nif you want to keep -t, please add one more acceptance criteria to #9009", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528781353", "createdAt": "2020-11-23T15:22:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MjAzNQ==", "bodyText": "to violate", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528782035", "createdAt": "2020-11-23T15:22:57Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method has more than two statements inside", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTM3NA==", "bodyText": "please add example with var to xdoc", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528785374", "createdAt": "2020-11-23T15:27:20Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method has more than two statements inside\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[count(./SLIST/*) &gt; 2]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() { // violation\n+ *   int a = 1;\n+ *   int b = 2;\n+ *   int c = 3;\n+ *  }\n+ *  public void test() { // ok\n+ *   int a = 1;\n+ *   int b = 2;\n+ *  }\n+ * }\n+ * </pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTgzOA==", "bodyText": "why node is required here and not required in counts of statements examples ?", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528785838", "createdAt": "2020-11-23T15:28:00Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4ODI5MA==", "bodyText": "please add leading asterisk, we almost merged Checks for this - #9006.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528788290", "createdAt": "2020-11-23T15:30:59Z", "author": {"login": "romani"}, "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/InputMatchXpathDoubleBrace.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\n+\n+import java.util.ArrayList;\n+\n+/* Config:\n+ *\n+ * query: //INSTANCE_INIT[not(../*[not(self::LCURLY or self::INSTANCE_INIT or self::RCURLY or\n+ self::SINGLE_LINE_COMMENT or self::BLOCK_COMMENT_BEGIN)])]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/0efacee151891f9d47fca5171aea33a1a08f9b81", "committedDate": "2020-11-23T12:37:53Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "f367bb8ccfa9af8a3d9504ec7503118978c495d1", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f367bb8ccfa9af8a3d9504ec7503118978c495d1", "committedDate": "2020-11-23T18:36:19Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f367bb8ccfa9af8a3d9504ec7503118978c495d1", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f367bb8ccfa9af8a3d9504ec7503118978c495d1", "committedDate": "2020-11-23T18:36:19Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "02ceed6aa52d5d566794028bd7d353ad46b5031c", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/02ceed6aa52d5d566794028bd7d353ad46b5031c", "committedDate": "2020-11-24T13:46:57Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTUyMzM2", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-537552336", "createdAt": "2020-11-24T14:34:56Z", "commit": {"oid": "02ceed6aa52d5d566794028bd7d353ad46b5031c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDozNDo1N1rOH5DrfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDozNDo1N1rOH5DrfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTE2NQ==", "bodyText": "please remove this example as it become same as\n//CTOR_DEF[count(./PARAMETERS/*", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529591165", "createdAt": "2020-11-24T14:34:57Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,294 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -b Main.java //METHOD_DEF[./IDENT[@text='\"sayHello\"']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method has more than two statements inside\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[count(./SLIST/*) &gt; 2]\"/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ceed6aa52d5d566794028bd7d353ad46b5031c"}, "originalPosition": 171}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02ceed6aa52d5d566794028bd7d353ad46b5031c", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/02ceed6aa52d5d566794028bd7d353ad46b5031c", "committedDate": "2020-11-24T13:46:57Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "committedDate": "2020-11-24T14:43:06Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NjU2MzU0", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-537656354", "createdAt": "2020-11-24T15:55:12Z", "commit": {"oid": "44ad38619d804a2b93b0aa6f9f460da02b3c9d2b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1NToxM1rOH5ItKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1NToxM1rOH5ItKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ==", "bodyText": "java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='\"sayHello\"']]\"", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529673515", "createdAt": "2020-11-24T15:55:13Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,271 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -b Main.java //METHOD_DEF[./IDENT[@text='\"sayHello\"']]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ad38619d804a2b93b0aa6f9f460da02b3c9d2b"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "committedDate": "2020-11-24T14:43:06Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "3c0c38dd37040950a5a4d547c19ec9e35c598626", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3c0c38dd37040950a5a4d547c19ec9e35c598626", "committedDate": "2020-11-26T06:04:59Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c0c38dd37040950a5a4d547c19ec9e35c598626", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3c0c38dd37040950a5a4d547c19ec9e35c598626", "committedDate": "2020-11-26T06:04:59Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "bef6d33b45a05ef3372ce7a84a4eb101aaa04227", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/bef6d33b45a05ef3372ce7a84a4eb101aaa04227", "committedDate": "2020-11-26T06:10:26Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bef6d33b45a05ef3372ce7a84a4eb101aaa04227", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/bef6d33b45a05ef3372ce7a84a4eb101aaa04227", "committedDate": "2020-11-26T06:10:26Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "98d0bdbf28bdde2f2f042441f4924c2fcaf3df06", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/98d0bdbf28bdde2f2f042441f4924c2fcaf3df06", "committedDate": "2020-11-27T12:18:45Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98d0bdbf28bdde2f2f042441f4924c2fcaf3df06", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/98d0bdbf28bdde2f2f042441f4924c2fcaf3df06", "committedDate": "2020-11-27T12:18:45Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "2aac97f4bed9f5219540afbd413a1389fd326742", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2aac97f4bed9f5219540afbd413a1389fd326742", "committedDate": "2020-11-27T14:07:10Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2aac97f4bed9f5219540afbd413a1389fd326742", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2aac97f4bed9f5219540afbd413a1389fd326742", "committedDate": "2020-11-27T14:07:10Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "93919dadbb9079b4502b0f91f70c833d8509ccd9", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/93919dadbb9079b4502b0f91f70c833d8509ccd9", "committedDate": "2020-11-27T14:16:53Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93919dadbb9079b4502b0f91f70c833d8509ccd9", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/93919dadbb9079b4502b0f91f70c833d8509ccd9", "committedDate": "2020-11-27T14:16:53Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "84f1cf194bc5977c180b0a78c9c21da95e695cad", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/84f1cf194bc5977c180b0a78c9c21da95e695cad", "committedDate": "2020-11-27T14:32:03Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84f1cf194bc5977c180b0a78c9c21da95e695cad", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/84f1cf194bc5977c180b0a78c9c21da95e695cad", "committedDate": "2020-11-27T14:32:03Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "2c24b9fa77538b7c026a4daf5531d198c06556ab", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2c24b9fa77538b7c026a4daf5531d198c06556ab", "committedDate": "2020-11-27T14:44:36Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c24b9fa77538b7c026a4daf5531d198c06556ab", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2c24b9fa77538b7c026a4daf5531d198c06556ab", "committedDate": "2020-11-27T14:44:36Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "d9b6e2aba0df527bbac0605ece3052d8bef81b79", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d9b6e2aba0df527bbac0605ece3052d8bef81b79", "committedDate": "2020-11-27T15:16:06Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9b6e2aba0df527bbac0605ece3052d8bef81b79", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d9b6e2aba0df527bbac0605ece3052d8bef81b79", "committedDate": "2020-11-27T15:16:06Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "6f6be0fafba51f5ff74d70baa5fa3a736b22827a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6f6be0fafba51f5ff74d70baa5fa3a736b22827a", "committedDate": "2020-11-28T17:10:13Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f6be0fafba51f5ff74d70baa5fa3a736b22827a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/6f6be0fafba51f5ff74d70baa5fa3a736b22827a", "committedDate": "2020-11-28T17:10:13Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "1aa332b576a5cc50119c19e2e94186fcf41a64fd", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1aa332b576a5cc50119c19e2e94186fcf41a64fd", "committedDate": "2020-11-28T17:34:17Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1aa332b576a5cc50119c19e2e94186fcf41a64fd", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/1aa332b576a5cc50119c19e2e94186fcf41a64fd", "committedDate": "2020-11-28T17:34:17Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "5a772c70c1c0dd5f086881ef698ac3e030a10f68", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5a772c70c1c0dd5f086881ef698ac3e030a10f68", "committedDate": "2020-11-28T18:50:31Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a772c70c1c0dd5f086881ef698ac3e030a10f68", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/5a772c70c1c0dd5f086881ef698ac3e030a10f68", "committedDate": "2020-11-28T18:50:31Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "80083af269efaed9f2caad94904ccc56ed7fe1df", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/80083af269efaed9f2caad94904ccc56ed7fe1df", "committedDate": "2020-11-29T12:51:33Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80083af269efaed9f2caad94904ccc56ed7fe1df", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/80083af269efaed9f2caad94904ccc56ed7fe1df", "committedDate": "2020-11-29T12:51:33Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "cb4b32d84631dd2d05e674c0b8182526e743feb3", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/cb4b32d84631dd2d05e674c0b8182526e743feb3", "committedDate": "2020-11-29T22:45:22Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb4b32d84631dd2d05e674c0b8182526e743feb3", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/cb4b32d84631dd2d05e674c0b8182526e743feb3", "committedDate": "2020-11-29T22:45:22Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "e478a24150435adc6a395352af96128a056c7f8e", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e478a24150435adc6a395352af96128a056c7f8e", "committedDate": "2020-11-29T23:56:52Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e478a24150435adc6a395352af96128a056c7f8e", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e478a24150435adc6a395352af96128a056c7f8e", "committedDate": "2020-11-29T23:56:52Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "2091e03123c70e4cf4f35bee15e38cff3e4f567d", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2091e03123c70e4cf4f35bee15e38cff3e4f567d", "committedDate": "2020-11-30T03:13:41Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2091e03123c70e4cf4f35bee15e38cff3e4f567d", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/2091e03123c70e4cf4f35bee15e38cff3e4f567d", "committedDate": "2020-11-30T03:13:41Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "f81578e153d11a24e95b217b5353aa666350d874", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f81578e153d11a24e95b217b5353aa666350d874", "committedDate": "2020-11-30T03:39:15Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f81578e153d11a24e95b217b5353aa666350d874", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f81578e153d11a24e95b217b5353aa666350d874", "committedDate": "2020-11-30T03:39:15Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "f3873d7a2af038f82ce0fa5c4eb4dd2815de24d2", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f3873d7a2af038f82ce0fa5c4eb4dd2815de24d2", "committedDate": "2020-11-30T04:01:44Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3873d7a2af038f82ce0fa5c4eb4dd2815de24d2", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/f3873d7a2af038f82ce0fa5c4eb4dd2815de24d2", "committedDate": "2020-11-30T04:01:44Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "8cd2ca07e29389c5bab7d2e4f24b76e8d860dc2d", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8cd2ca07e29389c5bab7d2e4f24b76e8d860dc2d", "committedDate": "2020-11-30T04:23:06Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cd2ca07e29389c5bab7d2e4f24b76e8d860dc2d", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8cd2ca07e29389c5bab7d2e4f24b76e8d860dc2d", "committedDate": "2020-11-30T04:23:06Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "b1d8789735778a2041038d060d06469f49781324", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b1d8789735778a2041038d060d06469f49781324", "committedDate": "2020-11-30T04:25:22Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTkyMTg2", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-540592186", "createdAt": "2020-11-30T04:29:09Z", "commit": {"oid": "b1d8789735778a2041038d060d06469f49781324"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjA2Mjcx", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-540606271", "createdAt": "2020-11-30T05:25:13Z", "commit": {"oid": "b1d8789735778a2041038d060d06469f49781324"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNToyNToxM1rOH7sVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNToyNjoxN1rOH7sWVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDM2NQ==", "bodyText": "Just a suggestion for consistency, most Checkstyle UT's use final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532354365", "createdAt": "2020-11-30T05:25:13Z", "author": {"login": "nmancus1"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithImplicitEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d8789735778a2041038d060d06469f49781324"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDY0Nw==", "bodyText": "Same for line 45, 55", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532354647", "createdAt": "2020-11-30T05:26:17Z", "author": {"login": "nmancus1"}, "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithImplicitEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDM2NQ=="}, "originalCommit": {"oid": "b1d8789735778a2041038d060d06469f49781324"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1d8789735778a2041038d060d06469f49781324", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/b1d8789735778a2041038d060d06469f49781324", "committedDate": "2020-11-30T04:25:22Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "committedDate": "2020-11-30T05:47:57Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjU5Nzg5", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-540659789", "createdAt": "2020-11-30T07:47:31Z", "commit": {"oid": "e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NzozMVrOH7vCaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NzozMVrOH7vCaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODY5Ng==", "bodyText": "Why Java14? I see only type inference here. It is available since Java10", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532398696", "createdAt": "2020-11-30T07:47:31Z", "author": {"login": "pbludov"}, "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/InputMatchXpathAvoidInstanceCreationWithoutVar.java", "diffHunk": "@@ -0,0 +1,15 @@\n+//non-compiled with javac: Compilable with Java14", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "committedDate": "2020-11-30T05:47:57Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "committedDate": "2020-11-30T09:42:10Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjkxMjg3", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-542291287", "createdAt": "2020-12-01T20:59:50Z", "commit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzkzMjcy", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-542793272", "createdAt": "2020-12-02T12:37:51Z", "commit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozNzo1MVrOH9Y-3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjo1MDo1M1rOH9Zciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzNDQ5Mw==", "bodyText": "Illegal code structure detected.\n\nCan we add a message and explain what is illegal and our advice to resolve the issue. It is fine if it is just \"Avoid using 'printStackTrace'.`", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534134493", "createdAt": "2020-12-02T12:37:51Z", "author": {"login": "rnveach"}, "path": "config/checkstyle_checks.xml", "diffHunk": "@@ -394,6 +394,10 @@\n     </module>\n     <module name=\"InnerAssignment\"/>\n     <module name=\"MagicNumber\"/>\n+    <module name=\"MatchXpath\">\n+      <property name=\"query\" value=\"//CLASS_DEF[@text!='Checker' and @text!='Main']\n+      //LITERAL_CATCH//METHOD_CALL[.//IDENT[@text = 'printStackTrace']]/..\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzNjg0MA==", "bodyText": "Current check\n\nThis sounds funny, like you are saying this wasn't supported by the check before but it is a brand new check. I recommend changing Current check => This check.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534136840", "createdAt": "2020-12-02T12:41:51Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3623,6 +3623,200 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.39</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzNzA2MA==", "bodyText": "then check => then the check", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534137060", "createdAt": "2020-12-02T12:42:16Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3623,6 +3623,200 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.39</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+          then check does nothing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzODI3NA==", "bodyText": "I noticed all these xpath links do not point to the website of the xpath utility we are using. Their website documentation doesn't have anything similar? Since we are using their utility, I figured their documentation would match more what we need.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534138274", "createdAt": "2020-12-02T12:44:25Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3623,6 +3623,200 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.39</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+          then check does nothing.\n+        </p>\n+        <p>\n+          Please read more about Xpath syntax at\n+          <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\"> W3Schools Xpath Syntax</a>.\n+          Information regarding Xpath functions can be found at\n+          <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath\n+            Reference</a>. Note, that <b>@text</b> attribute can used only with token types that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzODkwMA==", "bodyText": "I highly recommend not pointing to master in documentation. We can't guarantee this line position will stay the same as new changes are made. Do we even need to point to code in what should be user friendly documentation?", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534138900", "createdAt": "2020-12-02T12:45:26Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3623,6 +3623,200 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.39</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+          then check does nothing.\n+        </p>\n+        <p>\n+          Please read more about Xpath syntax at\n+          <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\"> W3Schools Xpath Syntax</a>.\n+          Information regarding Xpath functions can be found at\n+          <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath\n+            Reference</a>. Note, that <b>@text</b> attribute can used only with token types that\n+          are listed in\n+          <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MDczOQ==", "bodyText": "Some of this seems to be examples of other checkstyle functions than the check's functions. Not saying it has to be removed, but it seems like this documentation should be somewhere else and we could point to it from here.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534140739", "createdAt": "2020-12-02T12:48:38Z", "author": {"login": "rnveach"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3623,6 +3623,200 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.39</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+          then check does nothing.\n+        </p>\n+        <p>\n+          Please read more about Xpath syntax at\n+          <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\"> W3Schools Xpath Syntax</a>.\n+          Information regarding Xpath functions can be found at\n+          <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath\n+            Reference</a>. Note, that <b>@text</b> attribute can used only with token types that\n+          are listed in\n+          <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+            XpathUtil</a>.\n+        </p>\n+\n+      </subsection>\n+\n+      <subsection name=\"Properties\" id=\"MatchXpath_Properties\">\n+        <div class=\"wrapper\">\n+          <table>\n+            <tr>\n+              <th>name</th>\n+              <th>description</th>\n+              <th>type</th>\n+              <th>default value</th>\n+              <th>since</th>\n+            </tr>\n+            <tr>\n+              <td>query</td>\n+              <td>Xpath query.</td>\n+              <td><a href=\"property_types.html#String\">String</a></td>\n+              <td><code>&quot;&quot;</code></td>\n+              <td>8.39</td>\n+            </tr>\n+          </table>\n+        </div>\n+      </subsection>\n+\n+      <subsection name=\"Examples\" id=\"MatchXpath_Examples\">\n+        <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MjA5MQ==", "bodyText": "This is why property descriptions must start with a verb in the singular tense.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534142091", "createdAt": "2020-12-02T12:50:53Z", "author": {"login": "rnveach"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,270 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -&gt; + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -&gt; } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if new instance creation was done without <b>var</b> type\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;MatchXpath&quot;&gt;\n+ *  &lt;property name=&quot;query&quot; value=&quot;//VARIABLE_DEF[./ASSIGN/EXPR/LITERAL_NEW\n+ *  and not(./TYPE/IDENT[@text='var'])]&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *   public void foo() {\n+ *     SomeObject a = new SomeObject(); // violation\n+ *     var b = new SomeObject(); // OK\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.39\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    /** Xpath expression. */\n+    private XPathExpression xpathExpression;\n+\n+    /**\n+     * Setter to xpath query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0"}, "originalPosition": 215}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "committedDate": "2020-11-30T09:42:10Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "82cb91712edc254bbcf78d0eae7f38d1cbc55459", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/82cb91712edc254bbcf78d0eae7f38d1cbc55459", "committedDate": "2020-12-02T14:04:20Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82cb91712edc254bbcf78d0eae7f38d1cbc55459", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/82cb91712edc254bbcf78d0eae7f38d1cbc55459", "committedDate": "2020-12-02T14:04:20Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "committedDate": "2020-12-02T14:15:03Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTA2Nzk1", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-542906795", "createdAt": "2020-12-02T14:45:35Z", "commit": {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0NTozNlrOH9eWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0NTozNlrOH9eWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyMjQ4NA==", "bodyText": "please add new paragraph to encourage use to define custom message matchxpath.match for each instance of Check to explain what Check try to find and why it is not good. Default message might be too abstract and not informative.\nPlease add such property in each example.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534222484", "createdAt": "2020-12-02T14:45:36Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,271 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTE1NzMw", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-542915730", "createdAt": "2020-12-02T14:54:05Z", "commit": {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1NDowNVrOH9ewtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1NDowNVrOH9ewtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyOTE3Mg==", "bodyText": "@timurt , please recheck  rendering of  <b>@text</b> you might need to escape @", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534229172", "createdAt": "2020-12-02T14:54:05Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,271 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at\n+ * <a href=\"https://www.saxonica.com/html/documentation/expressions/\">Xpath Syntax</a>.\n+ * Information regarding Xpath functions can be found at\n+ * <a href=\"https://www.saxonica.com/html/documentation/functions/fn/\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "committedDate": "2020-12-02T14:15:03Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "ddee7ab61f97d52f24ff71cd2634cadd3e9207fc", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/ddee7ab61f97d52f24ff71cd2634cadd3e9207fc", "committedDate": "2020-12-03T12:20:42Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddee7ab61f97d52f24ff71cd2634cadd3e9207fc", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/ddee7ab61f97d52f24ff71cd2634cadd3e9207fc", "committedDate": "2020-12-03T12:20:42Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "876cb9d74668e869d7369772923b96afcdf70ef1", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/876cb9d74668e869d7369772923b96afcdf70ef1", "committedDate": "2020-12-03T13:35:53Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "876cb9d74668e869d7369772923b96afcdf70ef1", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/876cb9d74668e869d7369772923b96afcdf70ef1", "committedDate": "2020-12-03T13:35:53Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "094fe8ff44dbda2da1f6d859c5dc5ab94448e916", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/094fe8ff44dbda2da1f6d859c5dc5ab94448e916", "committedDate": "2020-12-03T13:45:13Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "094fe8ff44dbda2da1f6d859c5dc5ab94448e916", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/094fe8ff44dbda2da1f6d859c5dc5ab94448e916", "committedDate": "2020-12-03T13:45:13Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/c1e5fd9fbd7f67d598507771e191d9083ffd8567", "committedDate": "2020-12-03T13:51:41Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTg1MDkz", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-543985093", "createdAt": "2020-12-03T14:06:14Z", "commit": {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDowNjoxNFrOH-dSvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDowOTo1M1rOH-ddlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MzY5NA==", "bodyText": "please remove \"If there are more than one check of this type,\" it should recommended to do always.\nIt is better to define custom messages for violations to explain what is not allowed and what to use instead, default message might be too abstract", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535253694", "createdAt": "2020-12-03T14:06:14Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,285 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * If there are more than one check of this type, it is better to define custom messages for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NTIxMg==", "bodyText": "Parameterized constructors are not allowed, there should be only default ctor\nthis is the only imaginary reason I can think of.", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535255212", "createdAt": "2020-12-03T14:08:15Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,285 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * If there are more than one check of this type, it is better to define custom messages for\n+ * violations since default message might be too abstract. To customize a message you need to\n+ * add <code>message</code> element with <b>matchxpath.match</b> as <code>key</code> attribute and\n+ * desired message as <code>value</code> attribute.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at\n+ * <a href=\"https://www.saxonica.com/html/documentation/expressions/\">Xpath Syntax</a>.\n+ * Information regarding Xpath functions can be found at\n+ * <a href=\"https://www.saxonica.com/html/documentation/functions/fn/\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Specify Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -&gt; + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -&gt; } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Private methods must appear after public methods&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Parameterized constructors are not allowed&quot;/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NjQ2OQ==", "bodyText": "New instances should be created via 'var' keyword to avoid duplication of type reference in statement", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535256469", "createdAt": "2020-12-03T14:09:53Z", "author": {"login": "romani"}, "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,285 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * If there are more than one check of this type, it is better to define custom messages for\n+ * violations since default message might be too abstract. To customize a message you need to\n+ * add <code>message</code> element with <b>matchxpath.match</b> as <code>key</code> attribute and\n+ * desired message as <code>value</code> attribute.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at\n+ * <a href=\"https://www.saxonica.com/html/documentation/expressions/\">Xpath Syntax</a>.\n+ * Information regarding Xpath functions can be found at\n+ * <a href=\"https://www.saxonica.com/html/documentation/functions/fn/\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Specify Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -&gt; + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -&gt; } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Private methods must appear after public methods&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Parameterized constructors are not allowed&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Method name should not be 'test' or 'foo'&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if new instance creation was done without <b>var</b> type\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;MatchXpath&quot;&gt;\n+ *  &lt;property name=&quot;query&quot; value=&quot;//VARIABLE_DEF[./ASSIGN/EXPR/LITERAL_NEW\n+ *  and not(./TYPE/IDENT[@text='var'])]&quot;/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;New instances should be created via 'var' keyword&quot;/&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567"}, "originalPosition": 187}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/c1e5fd9fbd7f67d598507771e191d9083ffd8567", "committedDate": "2020-12-03T13:51:41Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "d6684c1c9a56157a552d3b9a378c24a40dafb9a4", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d6684c1c9a56157a552d3b9a378c24a40dafb9a4", "committedDate": "2020-12-03T14:36:49Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MDIzNTkx", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-544023591", "createdAt": "2020-12-03T14:43:27Z", "commit": {"oid": "d6684c1c9a56157a552d3b9a378c24a40dafb9a4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0MzoyOFrOH-fbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0MzoyOFrOH-fbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4ODYyNA==", "bodyText": "It is recommended to define custom message for violation ....", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535288624", "createdAt": "2020-12-03T14:43:28Z", "author": {"login": "romani"}, "path": "src/xdocs/config_coding.xml", "diffHunk": "@@ -3623,6 +3623,216 @@ class TestHashCode {\n       </subsection>\n     </section>\n \n+    <section name=\"MatchXpath\">\n+      <p>Since Checkstyle 8.39</p>\n+      <subsection name=\"Description\" id=\"MatchXpath_Description\">\n+        <p>\n+          Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+          then the check does nothing.\n+        </p>\n+        <p>\n+          It is better to define custom messages for violations to explain what is not allowed and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6684c1c9a56157a552d3b9a378c24a40dafb9a4"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6684c1c9a56157a552d3b9a378c24a40dafb9a4", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/d6684c1c9a56157a552d3b9a378c24a40dafb9a4", "committedDate": "2020-12-03T14:36:49Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "3a7d352676bf3492a36a0ae6a0256a688a3d9b4f", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3a7d352676bf3492a36a0ae6a0256a688a3d9b4f", "committedDate": "2020-12-03T14:47:24Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a7d352676bf3492a36a0ae6a0256a688a3d9b4f", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/3a7d352676bf3492a36a0ae6a0256a688a3d9b4f", "committedDate": "2020-12-03T14:47:24Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f", "committedDate": "2020-12-03T15:08:17Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MDY4ODkz", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-544068893", "createdAt": "2020-12-03T15:25:08Z", "commit": {"oid": "a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f", "committedDate": "2020-12-03T15:08:17Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "a1b342dc4a9e8fff560555a05dd27c48d4bd3b8a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a1b342dc4a9e8fff560555a05dd27c48d4bd3b8a", "committedDate": "2020-12-03T15:33:53Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daaae34177074ce130df15bf1662d023ac7f7d3b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/daaae34177074ce130df15bf1662d023ac7f7d3b", "committedDate": "2020-12-04T08:46:03Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1b342dc4a9e8fff560555a05dd27c48d4bd3b8a", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/a1b342dc4a9e8fff560555a05dd27c48d4bd3b8a", "committedDate": "2020-12-03T15:33:53Z", "message": "Issue #6481: Generic XPath check"}, "afterCommit": {"oid": "daaae34177074ce130df15bf1662d023ac7f7d3b", "author": {"user": {"login": "timurt", "name": "Timur Tibeyev"}}, "url": "https://github.com/checkstyle/checkstyle/commit/daaae34177074ce130df15bf1662d023ac7f7d3b", "committedDate": "2020-12-04T08:46:03Z", "message": "Issue #6481: Generic XPath check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTk2NTk3", "url": "https://github.com/checkstyle/checkstyle/pull/8902#pullrequestreview-545596597", "createdAt": "2020-12-05T15:50:42Z", "commit": {"oid": "daaae34177074ce130df15bf1662d023ac7f7d3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1363, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}