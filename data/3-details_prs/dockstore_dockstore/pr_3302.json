{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDQxODA3", "number": 3302, "title": "Feature/1153/optimize user entries", "bodyText": "#3290\nOptimizes the users/entries endpoint by using named queries to get lightweight entries containing only the relevant fields. Existing integration test doesn't seem to need changes, but I'm debating whether/how to add a test for EntryLite class.\nComparison:\nBefore: 4232ms\n49791 nanoseconds spent acquiring 2 JDBC connections;\n46781 nanoseconds spent releasing 2 JDBC connections;\n135253635 nanoseconds spent preparing 23338 JDBC statements;\n2774428473 nanoseconds spent executing 23338 JDBC statements;\n0 nanoseconds spent executing 0 JDBC batches;\n0 nanoseconds spent performing 0 L2C puts;\n0 nanoseconds spent performing 0 L2C hits;\n0 nanoseconds spent performing 0 L2C misses;\n129563794 nanoseconds spent executing 1 flushes (flushing a total of 16899 entities and 36949 collections);\n0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)\n\nAfter: 41ms\n93356 nanoseconds spent acquiring 2 JDBC connections;\n61962 nanoseconds spent releasing 2 JDBC connections;\n1402746 nanoseconds spent preparing 3 JDBC statements;\n23933565 nanoseconds spent executing 3 JDBC statements;\n0 nanoseconds spent executing 0 JDBC batches;\n0 nanoseconds spent performing 0 L2C puts;\n0 nanoseconds spent performing 0 L2C hits;\n0 nanoseconds spent performing 0 L2C misses;\n0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);\n20738 nanoseconds spent executing 3 partial-flushes (flushing a total of 0 entities and 0 collections)", "createdAt": "2020-03-05T18:48:53Z", "url": "https://github.com/dockstore/dockstore/pull/3302", "merged": true, "mergeCommit": {"oid": "e8b173503fd9eb4d89c7f79bd528a12966cb293e"}, "closed": true, "closedAt": "2020-03-06T18:46:50Z", "author": {"login": "Ldcabansay"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJRD5zgH2gAyMzg0NDQxODA3OmJkOWYyNTVhNDc3ZTY2ODJiZGU4MzE2YTQ1NmMxN2IyYzk3MTE4Yzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLCP5CgFqTM3MDQyOTgxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd9f255a477e6682bde8316a456c17b2c97118c8", "author": {"user": {"login": "Ldcabansay", "name": "Louise Cabansay"}}, "url": "https://github.com/dockstore/dockstore/commit/bd9f255a477e6682bde8316a456c17b2c97118c8", "committedDate": "2020-03-01T04:04:03Z", "message": "prototype for optimizing user entries endpoint using named query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c372511061d32831d61f2e725fcf64831259b444", "author": {"user": {"login": "Ldcabansay", "name": "Louise Cabansay"}}, "url": "https://github.com/dockstore/dockstore/commit/c372511061d32831d61f2e725fcf64831259b444", "committedDate": "2020-03-03T05:18:55Z", "message": "manually construct entrypath by retrieving path elements in JPQL query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f36f24d6f6515ced8cc42a185476132a34ee10b", "author": {"user": {"login": "Ldcabansay", "name": "Louise Cabansay"}}, "url": "https://github.com/dockstore/dockstore/commit/2f36f24d6f6515ced8cc42a185476132a34ee10b", "committedDate": "2020-03-05T02:45:01Z", "message": "Clean up, created EntryLite class to preserve types when querying from database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "832a0689acc70f61390b93aa23ece81ab06c360e", "author": {"user": {"login": "Ldcabansay", "name": "Louise Cabansay"}}, "url": "https://github.com/dockstore/dockstore/commit/832a0689acc70f61390b93aa23ece81ab06c360e", "committedDate": "2020-03-05T18:37:27Z", "message": "more clean up, removed temp endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "author": {"user": {"login": "Ldcabansay", "name": "Louise Cabansay"}}, "url": "https://github.com/dockstore/dockstore/commit/d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "committedDate": "2020-03-05T18:41:42Z", "message": "remove weird spaces"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODI3MDA4", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-369827008", "createdAt": "2020-03-05T18:53:10Z", "commit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoxMFrOFyfuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoxMFrOFyfuqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Mjk3MA==", "bodyText": "whoops, will fix", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388492970", "createdAt": "2020-03-05T18:53:10Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODQ1NzU2", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-369845756", "createdAt": "2020-03-05T19:20:21Z", "commit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMDoyMlrOFygszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNzozMFrOFyhRKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ==", "bodyText": "Optional nitpick -- would call s instead of c.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388508879", "createdAt": "2020-03-05T19:20:22Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODk5Nw==", "bodyText": "t instead of c", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388508997", "createdAt": "2020-03-05T19:20:30Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java", "diffHunk": "@@ -80,7 +80,14 @@\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname AND c.isPublished = true\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\") })\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteTool(c.registry, c.namespace, c.name, c.toolname, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Tool c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDA3OQ==", "bodyText": "Has this changed, other than combining two lines into one? In any case, should have each NamedQuery on its own line.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388510079", "createdAt": "2020-03-05T19:22:16Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMTI3NQ==", "bodyText": "It looks like the only place you call this, you're passing getEntryPath() as a parameter. Since getEntryPath() is already a class method, I would get rid of the parameter and just have makePrettyPath use getEntryPath", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388511275", "createdAt": "2020-03-05T19:24:26Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.dockstore.webservice.core.database;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.dockstore.common.EntryType;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.core.BioWorkflow;\n+import io.dockstore.webservice.core.Service;\n+import io.dockstore.webservice.core.Tool;\n+\n+/**\n+ * This class describes lightweight entry objects that are used for making type-safe named queries\n+ * @author ldcabansay\n+ * @since 1.9.0\n+ */\n+public abstract class EntryLite {\n+    private final Date lastUpdated;\n+\n+    EntryLite(Date entryUpdated, Date versionUpdated) {\n+        //choose the greater update time between overall entry and most recently updated version\n+        this.lastUpdated = versionUpdated == null ? entryUpdated : (entryUpdated.getTime() > versionUpdated.getTime() ? entryUpdated : versionUpdated);\n+    }\n+\n+    public Date getLastUpdated() {\n+        return lastUpdated;\n+    }\n+\n+    public abstract String getEntryPath();\n+\n+    public abstract EntryType getEntryType();\n+\n+    public String makePrettyPath(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzg4NA==", "bodyText": "It seems so fast right now that it doesn't matter, but ideally you would pass count as a parameter, at least when the filter is null.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388513884", "createdAt": "2020-03-05T19:29:02Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -660,34 +665,24 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n     public List<EntryUpdateTime> getUserEntries(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n                                                 @Parameter(name = \"count\", description = \"Maximum number of entries to return\", in = ParameterIn.QUERY) @QueryParam(\"count\") Integer count,\n                                                 @Parameter(name = \"filter\", description = \"Filter paths with matching text\", in = ParameterIn.QUERY) @QueryParam(\"filter\") String filter) {\n-        final List<EntryUpdateTime> entryUpdateTimes = new ArrayList<>();\n-        final User fetchedUser = this.userDAO.findById(authUser.getId());\n-\n-        Set<Entry> entries = fetchedUser.getEntries();\n-        entries.forEach(entry -> {\n-            Timestamp timestamp = entry.getDbUpdateDate();\n-            Set<Version> versions = entry.getWorkflowVersions();\n-            Optional<Version> mostRecentTag = versions.stream().max(Comparator.comparing(Version::getDbUpdateDate));\n-            if (mostRecentTag.isPresent() && timestamp.before(mostRecentTag.get().getDbUpdateDate())) {\n-                timestamp = mostRecentTag.get().getDbUpdateDate();\n-            }\n-            List<String> pathElements = Arrays.asList(entry.getEntryPath().split(\"/\"));\n-            String prettyPath = String.join(\"/\", pathElements.subList(2, pathElements.size()));\n-            entryUpdateTimes.add(new EntryUpdateTime(entry.getEntryPath(), prettyPath, entry.getEntryType(), timestamp));\n-        });\n-\n-        // Sort all entryUpdateTimes by timestamp\n-        List<EntryUpdateTime> sortedEntries = entryUpdateTimes\n-                .stream()\n+        //get entries with only minimal columns from database\n+        final List<EntryLite> entriesLite = new ArrayList<>();\n+        final long userId = authUser.getId();\n+        entriesLite.addAll(toolDAO.findEntryVersions(userId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzA5NQ==", "bodyText": "It was like this, but I think you can just limit on the stream:\n...\n.limit(count != null ? count : Integer.MAX_VALUE)\n.collect(...\n\nOptionally have a default value for count, which I think makes sense, and then you don't even have to do the null check.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388517095", "createdAt": "2020-03-05T19:35:28Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -660,34 +665,24 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n     public List<EntryUpdateTime> getUserEntries(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n                                                 @Parameter(name = \"count\", description = \"Maximum number of entries to return\", in = ParameterIn.QUERY) @QueryParam(\"count\") Integer count,\n                                                 @Parameter(name = \"filter\", description = \"Filter paths with matching text\", in = ParameterIn.QUERY) @QueryParam(\"filter\") String filter) {\n-        final List<EntryUpdateTime> entryUpdateTimes = new ArrayList<>();\n-        final User fetchedUser = this.userDAO.findById(authUser.getId());\n-\n-        Set<Entry> entries = fetchedUser.getEntries();\n-        entries.forEach(entry -> {\n-            Timestamp timestamp = entry.getDbUpdateDate();\n-            Set<Version> versions = entry.getWorkflowVersions();\n-            Optional<Version> mostRecentTag = versions.stream().max(Comparator.comparing(Version::getDbUpdateDate));\n-            if (mostRecentTag.isPresent() && timestamp.before(mostRecentTag.get().getDbUpdateDate())) {\n-                timestamp = mostRecentTag.get().getDbUpdateDate();\n-            }\n-            List<String> pathElements = Arrays.asList(entry.getEntryPath().split(\"/\"));\n-            String prettyPath = String.join(\"/\", pathElements.subList(2, pathElements.size()));\n-            entryUpdateTimes.add(new EntryUpdateTime(entry.getEntryPath(), prettyPath, entry.getEntryType(), timestamp));\n-        });\n-\n-        // Sort all entryUpdateTimes by timestamp\n-        List<EntryUpdateTime> sortedEntries = entryUpdateTimes\n-                .stream()\n+        //get entries with only minimal columns from database\n+        final List<EntryLite> entriesLite = new ArrayList<>();\n+        final long userId = authUser.getId();\n+        entriesLite.addAll(toolDAO.findEntryVersions(userId));\n+        entriesLite.addAll(bioWorkflowDAO.findEntryVersions(userId));\n+        entriesLite.addAll(serviceDAO.findEntryVersions(userId));\n+\n+        //cleanup fields for UI, filter, and sort\n+        List<EntryUpdateTime> filteredEntries = entriesLite\n+                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.makePrettyPath(e.getEntryPath()), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n                 .filter((EntryUpdateTime entryUpdateTime) -> filter == null || filter.isBlank() || entryUpdateTime.getPath().toLowerCase().contains(filter.toLowerCase()))\n                 .sorted(Comparator.comparing(EntryUpdateTime::getLastUpdateDate, Comparator.nullsLast(Comparator.reverseOrder())))\n                 .collect(Collectors.toList());\n \n-        // Grab subset if necessary\n         if (count != null) {\n-            return sortedEntries.subList(0, Math.min(count, sortedEntries.size()));\n+            return filteredEntries.subList(0, Math.min(count, filteredEntries.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxODE4Nw==", "bodyText": "w instead of c", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388518187", "createdAt": "2020-03-05T19:37:30Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java", "diffHunk": "@@ -37,7 +37,11 @@\n @Table(name = \"workflow\")\n @NamedQueries({\n         @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from BioWorkflow c where c.isPublished = true\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteWorkflow(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Workflow c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODc5MTQw", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-369879140", "createdAt": "2020-03-05T20:10:39Z", "commit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODkwMTA5", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-369890109", "createdAt": "2020-03-05T20:28:19Z", "commit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "author": {"user": {"login": "Ldcabansay", "name": "Louise Cabansay"}}, "url": "https://github.com/dockstore/dockstore/commit/3240fb7d6f73c6ca78a33e8bad7f714de585a285", "committedDate": "2020-03-05T22:11:21Z", "message": "limit to count in stream, other requested fixes and changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDA1NjAz", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-370005603", "createdAt": "2020-03-06T00:24:53Z", "commit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDoyNDo1M1rOFyo0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDoyNDo1M1rOFyo0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MTgzMQ==", "bodyText": "Is the only difference here that you put the }) on a new line? I think so, but want to make sure.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388641831", "createdAt": "2020-03-06T00:24:53Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -81,7 +81,8 @@\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzI2Nzg5", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-370326789", "createdAt": "2020-03-06T13:39:34Z", "commit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDI5ODE4", "url": "https://github.com/dockstore/dockstore/pull/3302#pullrequestreview-370429818", "createdAt": "2020-03-06T15:56:25Z", "commit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1817, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}