{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjQ2ODcw", "number": 3922, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxMzoyN1rOE3X_tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0OTozOFrOE51ppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTAwMjc2OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxMzoyN1rOHwr0UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo0Nzo1OVrOH0ZN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTYwMQ==", "bodyText": "As you suggested in your PR description, I think this should be a 400 error.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r520811601", "createdAt": "2020-11-10T19:13:27Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +427,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbcf1d0171a929a0938cdf8a0713be0897ade138"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyMDkxNA==", "bodyText": "Should CWLHandler throw a 400 as well when encountering parsing errors (such as invalid YAML syntax)?", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r520820914", "createdAt": "2020-11-10T19:29:28Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +427,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTYwMQ=="}, "originalCommit": {"oid": "dbcf1d0171a929a0938cdf8a0713be0897ade138"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNDkxNw==", "bodyText": "The initial commit in the PR handles the errors this way (both CWL and WDL), see here. I can revert back if that seems more appropriate.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r520834917", "createdAt": "2020-11-10T19:53:28Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +427,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTYwMQ=="}, "originalCommit": {"oid": "dbcf1d0171a929a0938cdf8a0713be0897ade138"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkxNTE2NQ==", "bodyText": "Not sure about the CWL case; in this case it definitely seems like it should be a 400 -- the method is not returning a useful response; it's not Dockstore's fault -- it's a WDL with syntax errors submitted by a user.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r520915165", "createdAt": "2020-11-10T22:29:33Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +427,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTYwMQ=="}, "originalCommit": {"oid": "dbcf1d0171a929a0938cdf8a0713be0897ade138"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwMTE4Mg==", "bodyText": "Fixed.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524701182", "createdAt": "2020-11-16T22:47:59Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +427,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTYwMQ=="}, "originalCommit": {"oid": "dbcf1d0171a929a0938cdf8a0713be0897ade138"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2NzE1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/CWLHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowOTozOFrOHyUGgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo0OToxOVrOH0ZTXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDE5NA==", "bodyText": "put Assert.fail(\"blah blah\") under this to be certain it actually had an exception. same with other places", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522520194", "createdAt": "2020-11-13T00:09:38Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/CWLHandlerTest.java", "diffHunk": "@@ -101,4 +105,58 @@ public void testURLFromEntry() {\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar\", toolDAO));\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar:1\", toolDAO));\n     }\n+\n+    @Test\n+    public void testGetContentWithMalformedDescriptors() throws IOException {\n+        CWLHandler cwlHandler = new CWLHandler();\n+\n+        // create and mock parameters for getContent()\n+        final Set<SourceFile> emptySet = Collections.emptySet();\n+        final ToolDAO toolDAO = Mockito.mock(ToolDAO.class);\n+        when(toolDAO.findAllByPath(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(null);\n+\n+        // expect parsing error\n+        File cwlFile = new File(ResourceHelpers.resourceFilePath(\"brokenCWL.cwl\"));\n+        try {\n+            cwlHandler.getContent(\"/brokenCWL.cwl\", FileUtils.readFileToString(cwlFile, StandardCharsets.UTF_8), emptySet,\n+                LanguageHandlerInterface.Type.TOOLS, toolDAO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwMjU1Ng==", "bodyText": "Fixed in both WDL and CWL test files.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524702556", "createdAt": "2020-11-16T22:49:19Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/CWLHandlerTest.java", "diffHunk": "@@ -101,4 +105,58 @@ public void testURLFromEntry() {\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar\", toolDAO));\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar:1\", toolDAO));\n     }\n+\n+    @Test\n+    public void testGetContentWithMalformedDescriptors() throws IOException {\n+        CWLHandler cwlHandler = new CWLHandler();\n+\n+        // create and mock parameters for getContent()\n+        final Set<SourceFile> emptySet = Collections.emptySet();\n+        final ToolDAO toolDAO = Mockito.mock(ToolDAO.class);\n+        when(toolDAO.findAllByPath(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(null);\n+\n+        // expect parsing error\n+        File cwlFile = new File(ResourceHelpers.resourceFilePath(\"brokenCWL.cwl\"));\n+        try {\n+            cwlHandler.getContent(\"/brokenCWL.cwl\", FileUtils.readFileToString(cwlFile, StandardCharsets.UTF_8), emptySet,\n+                LanguageHandlerInterface.Type.TOOLS, toolDAO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDE5NA=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2ODIxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/CWLHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMDowOFrOHyUHGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1MTo0MlrOH0Zczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDM0Nw==", "bodyText": "swap parameters, it's assertEquals(expected, actual).  Here and other places", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522520347", "createdAt": "2020-11-13T00:10:08Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/CWLHandlerTest.java", "diffHunk": "@@ -101,4 +105,58 @@ public void testURLFromEntry() {\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar\", toolDAO));\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar:1\", toolDAO));\n     }\n+\n+    @Test\n+    public void testGetContentWithMalformedDescriptors() throws IOException {\n+        CWLHandler cwlHandler = new CWLHandler();\n+\n+        // create and mock parameters for getContent()\n+        final Set<SourceFile> emptySet = Collections.emptySet();\n+        final ToolDAO toolDAO = Mockito.mock(ToolDAO.class);\n+        when(toolDAO.findAllByPath(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(null);\n+\n+        // expect parsing error\n+        File cwlFile = new File(ResourceHelpers.resourceFilePath(\"brokenCWL.cwl\"));\n+        try {\n+            cwlHandler.getContent(\"/brokenCWL.cwl\", FileUtils.readFileToString(cwlFile, StandardCharsets.UTF_8), emptySet,\n+                LanguageHandlerInterface.Type.TOOLS, toolDAO);\n+        } catch (CustomWebApplicationException e) {\n+            Assert.assertEquals(e.getResponse().getStatus(), 400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwNDk3NQ==", "bodyText": "Swapped order, thanks for the catch, I've mixed these up before so I'll make a note to double check my parameter orderings.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524704975", "createdAt": "2020-11-16T22:51:42Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/CWLHandlerTest.java", "diffHunk": "@@ -101,4 +105,58 @@ public void testURLFromEntry() {\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar\", toolDAO));\n         Assert.assertEquals(\"https://www.dockstore.org/containers/registry.hub.docker.com/foo/bar\", handler.getURLFromEntry(\"foo/bar:1\", toolDAO));\n     }\n+\n+    @Test\n+    public void testGetContentWithMalformedDescriptors() throws IOException {\n+        CWLHandler cwlHandler = new CWLHandler();\n+\n+        // create and mock parameters for getContent()\n+        final Set<SourceFile> emptySet = Collections.emptySet();\n+        final ToolDAO toolDAO = Mockito.mock(ToolDAO.class);\n+        when(toolDAO.findAllByPath(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(null);\n+\n+        // expect parsing error\n+        File cwlFile = new File(ResourceHelpers.resourceFilePath(\"brokenCWL.cwl\"));\n+        try {\n+            cwlHandler.getContent(\"/brokenCWL.cwl\", FileUtils.readFileToString(cwlFile, StandardCharsets.UTF_8), emptySet,\n+                LanguageHandlerInterface.Type.TOOLS, toolDAO);\n+        } catch (CustomWebApplicationException e) {\n+            Assert.assertEquals(e.getResponse().getStatus(), 400);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDM0Nw=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg3MDIzOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/test/resources/badVersionCWL.cwl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMTowMFrOHyUIRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1MzowMlrOH0ZiHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDY0Nw==", "bodyText": "just in case, change to something more ridiculous like 9001.9001", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522520647", "createdAt": "2020-11-13T00:11:00Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/test/resources/badVersionCWL.cwl", "diffHunk": "@@ -0,0 +1,25 @@\n+cwlVersion: v2.7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwNjMzNA==", "bodyText": "Increased ridiculousness here.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524706334", "createdAt": "2020-11-16T22:53:02Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/test/resources/badVersionCWL.cwl", "diffHunk": "@@ -0,0 +1,25 @@\n+cwlVersion: v2.7", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDY0Nw=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg3MTUwOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/WDLHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMTozOVrOHyUJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1NDozMFrOH0Znlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDgzOA==", "bodyText": "AssertThat(blah blah).contains(blah blah)", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522520838", "createdAt": "2020-11-13T00:11:39Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/WDLHandlerTest.java", "diffHunk": "@@ -151,6 +152,27 @@ public void testGetToolsForComplexWorkflow() throws IOException {\n \n     }\n \n+    @Test\n+    public void testGetContentWithSyntaxErrors() throws IOException {\n+        final WDLHandler wdlHandler = new WDLHandler();\n+        final File wdlFile = new File(ResourceHelpers.resourceFilePath(\"brokenWDL.wdl\"));\n+        final Set<SourceFile> emptySet = Collections.emptySet();\n+\n+        // wdlHandler.getContent ultimately invokes toolDAO.findAllByPath from LanguageHandlerEntry.getURLFromEntry for look\n+        // up; just have it return null\n+        final ToolDAO toolDAO = Mockito.mock(ToolDAO.class);\n+        when(toolDAO.findAllByPath(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(null);\n+\n+        // run test with a WDL descriptor with syntax errors\n+        try {\n+            wdlHandler.getContent(\"/brokenWDL.wdl\", FileUtils.readFileToString(wdlFile, StandardCharsets.UTF_8), emptySet,\n+                LanguageHandlerInterface.Type.TOOLS, toolDAO);\n+        } catch (CustomWebApplicationException e) {\n+            Assert.assertEquals(e.getResponse().getStatus(), 400);\n+            Assert.assertTrue(\"Should contain parsing error statement, found: \" + e.errorMessage, e.errorMessage.contains(WDLHandler.WDL_PARSE_ERROR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwNzczNQ==", "bodyText": "Fixed in WDL and CWL test files.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524707735", "createdAt": "2020-11-16T22:54:30Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/WDLHandlerTest.java", "diffHunk": "@@ -151,6 +152,27 @@ public void testGetToolsForComplexWorkflow() throws IOException {\n \n     }\n \n+    @Test\n+    public void testGetContentWithSyntaxErrors() throws IOException {\n+        final WDLHandler wdlHandler = new WDLHandler();\n+        final File wdlFile = new File(ResourceHelpers.resourceFilePath(\"brokenWDL.wdl\"));\n+        final Set<SourceFile> emptySet = Collections.emptySet();\n+\n+        // wdlHandler.getContent ultimately invokes toolDAO.findAllByPath from LanguageHandlerEntry.getURLFromEntry for look\n+        // up; just have it return null\n+        final ToolDAO toolDAO = Mockito.mock(ToolDAO.class);\n+        when(toolDAO.findAllByPath(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(null);\n+\n+        // run test with a WDL descriptor with syntax errors\n+        try {\n+            wdlHandler.getContent(\"/brokenWDL.wdl\", FileUtils.readFileToString(wdlFile, StandardCharsets.UTF_8), emptySet,\n+                LanguageHandlerInterface.Type.TOOLS, toolDAO);\n+        } catch (CustomWebApplicationException e) {\n+            Assert.assertEquals(e.getResponse().getStatus(), 400);\n+            Assert.assertTrue(\"Should contain parsing error statement, found: \" + e.errorMessage, e.errorMessage.contains(WDLHandler.WDL_PARSE_ERROR));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDgzOA=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg4NTM1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxODoxMVrOHyURQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1NTo1N1rOH0Ztgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjk0NA==", "bodyText": "Log the exception.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522522944", "createdAt": "2020-11-13T00:18:11Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +428,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            throw new CustomWebApplicationException(this.WDL_PARSE_ERROR + e.getMessage(), HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwOTI1MQ==", "bodyText": "Logged. Overloaded the constructor for CustomWebApplicationException to allow for the Throwable parameter.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524709251", "createdAt": "2020-11-16T22:55:57Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +428,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            throw new CustomWebApplicationException(this.WDL_PARSE_ERROR + e.getMessage(), HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjk0NA=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg4NTY3OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxODoyMFrOHyURcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1NjoyMFrOH0Zu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjk5Mw==", "bodyText": "Log the exception", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522522993", "createdAt": "2020-11-13T00:18:20Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +428,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            throw new CustomWebApplicationException(this.WDL_PARSE_ERROR + e.getMessage(), HttpStatus.SC_BAD_REQUEST);\n+        } catch (IOException | NoSuchElementException e) {\n+            throw new CustomWebApplicationException(\"Could not process request, \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwOTYyOQ==", "bodyText": "Logged.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524709629", "createdAt": "2020-11-16T22:56:20Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +428,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError e) {\n+            throw new CustomWebApplicationException(this.WDL_PARSE_ERROR + e.getMessage(), HttpStatus.SC_BAD_REQUEST);\n+        } catch (IOException | NoSuchElementException e) {\n+            throw new CustomWebApplicationException(\"Could not process request, \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjk5Mw=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTkwNzc2OnYy", "diffSide": "LEFT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyNzo1OVrOHyUd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1OTozMlrOH0Z7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNjE3OA==", "bodyText": "Why aren't you using this any more? It still gets used in 2 other spots, and it looks like you duplicate the code on line 273. I guess because you're throwing exceptions here and don't want to otherwise. Still, it would be nice if there wasn't the duplication... What happens we we support v2 some day, if there ever is one? If we don't update in both places....", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522526178", "createdAt": "2020-11-13T00:27:59Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -249,7 +255,7 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n     public Optional<String> getContent(String mainDescriptorPath, String mainDescriptor, Set<SourceFile> secondarySourceFiles, LanguageHandlerInterface.Type type,\n         ToolDAO dao) {\n         Yaml yaml = new Yaml();\n-        if (isValidCwl(mainDescriptor, yaml)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcxMjc4Mw==", "bodyText": "As you stated, I duplicated the code segment to allow for detailed exception messages. To address the versioning change, added static variable CWL_VERSION_PREFIX here, making the version easier to update.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524712783", "createdAt": "2020-11-16T22:59:32Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -249,7 +255,7 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n     public Optional<String> getContent(String mainDescriptorPath, String mainDescriptor, Set<SourceFile> secondarySourceFiles, LanguageHandlerInterface.Type type,\n         ToolDAO dao) {\n         Yaml yaml = new Yaml();\n-        if (isValidCwl(mainDescriptor, yaml)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNjE3OA=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTkwOTE4OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyODo0NVrOHyUe0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjo1OTo1OVrOH0Z9eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNjQxNg==", "bodyText": "Log the exception", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r522526416", "createdAt": "2020-11-13T00:28:45Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -274,177 +293,170 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n             String expressionToolType = \"expressionTool\";\n \n             // Set up GSON for JSON parsing\n-            Gson gson;\n-            try {\n-                gson = CWL.getTypeSafeCWLToolDocument();\n+            Gson gson = CWL.getTypeSafeCWLToolDocument();\n \n-                final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n+            final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n \n-                if (workflow == null) {\n-                    LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n-                    return Optional.empty();\n-                }\n+            if (workflow == null) {\n+                LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n+                return Optional.empty();\n+            }\n \n-                // Determine default docker path (Check requirement first and then hint)\n-                defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n-\n-                // Store workflow steps in json and then read it into map <String, WorkflowStep>\n-                Object steps = workflow.getSteps();\n-                String stepJson = gson.toJson(steps);\n-                Map<String, WorkflowStep> workflowStepMap;\n-                if (steps instanceof ArrayList) {\n-                    ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n-                    }.getType());\n-                    workflowStepMap = new LinkedTreeMap<>();\n-                    workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n-                } else {\n-                    workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n-                    }.getType());\n-                }\n+            // Determine default docker path (Check requirement first and then hint)\n+            defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n+\n+            // Store workflow steps in json and then read it into map <String, WorkflowStep>\n+            Object steps = workflow.getSteps();\n+            String stepJson = gson.toJson(steps);\n+            Map<String, WorkflowStep> workflowStepMap;\n+            if (steps instanceof ArrayList) {\n+                ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n+                }.getType());\n+                workflowStepMap = new LinkedTreeMap<>();\n+                workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n+            } else {\n+                workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n+                }.getType());\n+            }\n \n-                if (stepJson == null) {\n-                    LOG.error(\"Could not find any steps for the workflow.\");\n-                    return Optional.empty();\n-                }\n+            if (stepJson == null) {\n+                LOG.error(\"Could not find any steps for the workflow.\");\n+                return Optional.empty();\n+            }\n \n-                if (workflowStepMap == null) {\n-                    LOG.error(\"Error deserializing workflow steps\");\n-                    return Optional.empty();\n-                }\n+            if (workflowStepMap == null) {\n+                LOG.error(\"Error deserializing workflow steps\");\n+                return Optional.empty();\n+            }\n \n-                // Iterate through steps to find dependencies and docker requirements\n-                for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n-                    WorkflowStep workflowStep = entry.getValue();\n-                    String workflowStepId = nodePrefix + entry.getKey();\n+            // Iterate through steps to find dependencies and docker requirements\n+            for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n+                WorkflowStep workflowStep = entry.getValue();\n+                String workflowStepId = nodePrefix + entry.getKey();\n \n-                    ArrayList<String> stepDependencies = new ArrayList<>();\n+                ArrayList<String> stepDependencies = new ArrayList<>();\n \n-                    // Iterate over source and get the dependencies\n-                    if (workflowStep.getIn() != null) {\n-                        for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n-                            Object sources = workflowStepInput.getSource();\n+                // Iterate over source and get the dependencies\n+                if (workflowStep.getIn() != null) {\n+                    for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n+                        Object sources = workflowStepInput.getSource();\n \n-                            processDependencies(nodePrefix, stepDependencies, sources);\n-                        }\n-                        if (stepDependencies.size() > 0) {\n-                            toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n-                                toolInfo.toolDependencyList.addAll(stepDependencies);\n-                                return toolInfo;\n-                            });\n-                            toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n-                        }\n+                        processDependencies(nodePrefix, stepDependencies, sources);\n                     }\n-\n-                    // Check workflow step for docker requirement and hints\n-                    String stepDockerRequirement = defaultDockerPath;\n-                    stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n-                        stepDockerRequirement);\n-\n-                    // Check for docker requirement within workflow step file\n-                    String secondaryFile = null;\n-                    Object run = workflowStep.getRun();\n-                    String runAsJson = gson.toJson(gson.toJsonTree(run));\n-\n-                    if (run instanceof String) {\n-                        secondaryFile = (String)run;\n-                    } else if (isTool(runAsJson, yaml)) {\n-                        CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, toolType);\n-                    } else if (isWorkflow(runAsJson, yaml)) {\n-                        Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n-                        stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, workflowType);\n-                    } else if (isExpressionTool(runAsJson, yaml)) {\n-                        ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, expressionToolType);\n-                    } else if (run instanceof Map) {\n-                        // must be import or include\n-                        Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n-                        if (importVal != null) {\n-                            secondaryFile = importVal.toString();\n-                        }\n-\n-                        Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n-                        if (includeVal != null) {\n-                            secondaryFile = includeVal.toString();\n-                        }\n-\n-                        if (secondaryFile == null) {\n-                            LOG.error(\"Syntax incorrect. Could not ($)import or ($)include secondary file for run command: \" + run);\n-                            return Optional.empty();\n-                        }\n+                    if (stepDependencies.size() > 0) {\n+                        toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n+                            toolInfo.toolDependencyList.addAll(stepDependencies);\n+                            return toolInfo;\n+                        });\n+                        toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n                     }\n+                }\n \n-                    // Check secondary file for docker pull\n-                    if (secondaryFile != null) {\n-                        String finalSecondaryFile = secondaryFile;\n-                        final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n-                                .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n-                        final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n-                        stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n-                        if (isExpressionTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, expressionToolType);\n-                        } else if (isTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, toolType);\n-                        } else if (isWorkflow(content, yaml)) {\n-                            stepToType.put(workflowStepId, workflowType);\n-                        } else {\n-                            stepToType.put(workflowStepId, \"n/a\");\n-                        }\n+                // Check workflow step for docker requirement and hints\n+                String stepDockerRequirement = defaultDockerPath;\n+                stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n+                    stepDockerRequirement);\n+\n+                // Check for docker requirement within workflow step file\n+                String secondaryFile = null;\n+                Object run = workflowStep.getRun();\n+                String runAsJson = gson.toJson(gson.toJsonTree(run));\n+\n+                if (run instanceof String) {\n+                    secondaryFile = (String)run;\n+                } else if (isTool(runAsJson, yaml)) {\n+                    CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, toolType);\n+                } else if (isWorkflow(runAsJson, yaml)) {\n+                    Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n+                    stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, workflowType);\n+                } else if (isExpressionTool(runAsJson, yaml)) {\n+                    ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, expressionToolType);\n+                } else if (run instanceof Map) {\n+                    // must be import or include\n+                    Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n+                    if (importVal != null) {\n+                        secondaryFile = importVal.toString();\n                     }\n \n-                    String dockerUrl = null;\n-                    if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n-                        dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n+                    Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n+                    if (includeVal != null) {\n+                        secondaryFile = includeVal.toString();\n                     }\n \n-                    if (type == LanguageHandlerInterface.Type.DAG) {\n-                        nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                    if (secondaryFile == null) {\n+                        throw new CustomWebApplicationException(this.CWL_PARSE_SECONDARY_ERROR + run, HttpStatus.SC_BAD_REQUEST);\n                     }\n+                }\n \n-                    if (secondaryFile != null) {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                // Check secondary file for docker pull\n+                if (secondaryFile != null) {\n+                    String finalSecondaryFile = secondaryFile;\n+                    final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n+                            .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n+                    final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n+                    stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n+                    if (isExpressionTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, expressionToolType);\n+                    } else if (isTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, toolType);\n+                    } else if (isWorkflow(content, yaml)) {\n+                        stepToType.put(workflowStepId, workflowType);\n                     } else {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                        stepToType.put(workflowStepId, \"n/a\");\n                     }\n+                }\n \n+                String dockerUrl = null;\n+                if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n+                    dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n                 }\n \n                 if (type == LanguageHandlerInterface.Type.DAG) {\n-                    // Determine steps that point to end\n-                    List<String> endDependencies = new ArrayList<>();\n+                    nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                }\n \n-                    for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n-                        Object sources = workflowOutputParameter.getOutputSource();\n-                        processDependencies(nodePrefix, endDependencies, sources);\n-                    }\n+                if (secondaryFile != null) {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                } else {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                }\n \n-                    toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n-                    nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+            }\n \n-                    // connect start node with them\n-                    for (Pair<String, String> node : nodePairs) {\n-                        if (toolInfoMap.get(node.getLeft()) == null) {\n-                            toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n-                        }\n-                    }\n-                    nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+            if (type == LanguageHandlerInterface.Type.DAG) {\n+                // Determine steps that point to end\n+                List<String> endDependencies = new ArrayList<>();\n \n-                    return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n-                } else {\n-                    return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n+                for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n+                    Object sources = workflowOutputParameter.getOutputSource();\n+                    processDependencies(nodePrefix, endDependencies, sources);\n                 }\n-            } catch (JsonParseException ex) {\n-                LOG.error(\"The JSON file provided is invalid.\", ex);\n-                return Optional.empty();\n+\n+                toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n+                nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+\n+                // connect start node with them\n+                for (Pair<String, String> node : nodePairs) {\n+                    if (toolInfoMap.get(node.getLeft()) == null) {\n+                        toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n+                    }\n+                }\n+                nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+\n+                return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n+            } else {\n+                return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n             }\n-        } else {\n-            return Optional.empty();\n+        } catch (ClassCastException | YAMLException | JsonParseException ex) {\n+            throw new CustomWebApplicationException(this.CWL_PARSE_ERROR + ex.getMessage(), HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcxMzMzOA==", "bodyText": "Logged.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524713338", "createdAt": "2020-11-16T22:59:59Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -274,177 +293,170 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n             String expressionToolType = \"expressionTool\";\n \n             // Set up GSON for JSON parsing\n-            Gson gson;\n-            try {\n-                gson = CWL.getTypeSafeCWLToolDocument();\n+            Gson gson = CWL.getTypeSafeCWLToolDocument();\n \n-                final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n+            final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n \n-                if (workflow == null) {\n-                    LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n-                    return Optional.empty();\n-                }\n+            if (workflow == null) {\n+                LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n+                return Optional.empty();\n+            }\n \n-                // Determine default docker path (Check requirement first and then hint)\n-                defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n-\n-                // Store workflow steps in json and then read it into map <String, WorkflowStep>\n-                Object steps = workflow.getSteps();\n-                String stepJson = gson.toJson(steps);\n-                Map<String, WorkflowStep> workflowStepMap;\n-                if (steps instanceof ArrayList) {\n-                    ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n-                    }.getType());\n-                    workflowStepMap = new LinkedTreeMap<>();\n-                    workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n-                } else {\n-                    workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n-                    }.getType());\n-                }\n+            // Determine default docker path (Check requirement first and then hint)\n+            defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n+\n+            // Store workflow steps in json and then read it into map <String, WorkflowStep>\n+            Object steps = workflow.getSteps();\n+            String stepJson = gson.toJson(steps);\n+            Map<String, WorkflowStep> workflowStepMap;\n+            if (steps instanceof ArrayList) {\n+                ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n+                }.getType());\n+                workflowStepMap = new LinkedTreeMap<>();\n+                workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n+            } else {\n+                workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n+                }.getType());\n+            }\n \n-                if (stepJson == null) {\n-                    LOG.error(\"Could not find any steps for the workflow.\");\n-                    return Optional.empty();\n-                }\n+            if (stepJson == null) {\n+                LOG.error(\"Could not find any steps for the workflow.\");\n+                return Optional.empty();\n+            }\n \n-                if (workflowStepMap == null) {\n-                    LOG.error(\"Error deserializing workflow steps\");\n-                    return Optional.empty();\n-                }\n+            if (workflowStepMap == null) {\n+                LOG.error(\"Error deserializing workflow steps\");\n+                return Optional.empty();\n+            }\n \n-                // Iterate through steps to find dependencies and docker requirements\n-                for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n-                    WorkflowStep workflowStep = entry.getValue();\n-                    String workflowStepId = nodePrefix + entry.getKey();\n+            // Iterate through steps to find dependencies and docker requirements\n+            for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n+                WorkflowStep workflowStep = entry.getValue();\n+                String workflowStepId = nodePrefix + entry.getKey();\n \n-                    ArrayList<String> stepDependencies = new ArrayList<>();\n+                ArrayList<String> stepDependencies = new ArrayList<>();\n \n-                    // Iterate over source and get the dependencies\n-                    if (workflowStep.getIn() != null) {\n-                        for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n-                            Object sources = workflowStepInput.getSource();\n+                // Iterate over source and get the dependencies\n+                if (workflowStep.getIn() != null) {\n+                    for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n+                        Object sources = workflowStepInput.getSource();\n \n-                            processDependencies(nodePrefix, stepDependencies, sources);\n-                        }\n-                        if (stepDependencies.size() > 0) {\n-                            toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n-                                toolInfo.toolDependencyList.addAll(stepDependencies);\n-                                return toolInfo;\n-                            });\n-                            toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n-                        }\n+                        processDependencies(nodePrefix, stepDependencies, sources);\n                     }\n-\n-                    // Check workflow step for docker requirement and hints\n-                    String stepDockerRequirement = defaultDockerPath;\n-                    stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n-                        stepDockerRequirement);\n-\n-                    // Check for docker requirement within workflow step file\n-                    String secondaryFile = null;\n-                    Object run = workflowStep.getRun();\n-                    String runAsJson = gson.toJson(gson.toJsonTree(run));\n-\n-                    if (run instanceof String) {\n-                        secondaryFile = (String)run;\n-                    } else if (isTool(runAsJson, yaml)) {\n-                        CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, toolType);\n-                    } else if (isWorkflow(runAsJson, yaml)) {\n-                        Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n-                        stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, workflowType);\n-                    } else if (isExpressionTool(runAsJson, yaml)) {\n-                        ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, expressionToolType);\n-                    } else if (run instanceof Map) {\n-                        // must be import or include\n-                        Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n-                        if (importVal != null) {\n-                            secondaryFile = importVal.toString();\n-                        }\n-\n-                        Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n-                        if (includeVal != null) {\n-                            secondaryFile = includeVal.toString();\n-                        }\n-\n-                        if (secondaryFile == null) {\n-                            LOG.error(\"Syntax incorrect. Could not ($)import or ($)include secondary file for run command: \" + run);\n-                            return Optional.empty();\n-                        }\n+                    if (stepDependencies.size() > 0) {\n+                        toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n+                            toolInfo.toolDependencyList.addAll(stepDependencies);\n+                            return toolInfo;\n+                        });\n+                        toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n                     }\n+                }\n \n-                    // Check secondary file for docker pull\n-                    if (secondaryFile != null) {\n-                        String finalSecondaryFile = secondaryFile;\n-                        final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n-                                .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n-                        final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n-                        stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n-                        if (isExpressionTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, expressionToolType);\n-                        } else if (isTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, toolType);\n-                        } else if (isWorkflow(content, yaml)) {\n-                            stepToType.put(workflowStepId, workflowType);\n-                        } else {\n-                            stepToType.put(workflowStepId, \"n/a\");\n-                        }\n+                // Check workflow step for docker requirement and hints\n+                String stepDockerRequirement = defaultDockerPath;\n+                stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n+                    stepDockerRequirement);\n+\n+                // Check for docker requirement within workflow step file\n+                String secondaryFile = null;\n+                Object run = workflowStep.getRun();\n+                String runAsJson = gson.toJson(gson.toJsonTree(run));\n+\n+                if (run instanceof String) {\n+                    secondaryFile = (String)run;\n+                } else if (isTool(runAsJson, yaml)) {\n+                    CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, toolType);\n+                } else if (isWorkflow(runAsJson, yaml)) {\n+                    Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n+                    stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, workflowType);\n+                } else if (isExpressionTool(runAsJson, yaml)) {\n+                    ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, expressionToolType);\n+                } else if (run instanceof Map) {\n+                    // must be import or include\n+                    Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n+                    if (importVal != null) {\n+                        secondaryFile = importVal.toString();\n                     }\n \n-                    String dockerUrl = null;\n-                    if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n-                        dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n+                    Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n+                    if (includeVal != null) {\n+                        secondaryFile = includeVal.toString();\n                     }\n \n-                    if (type == LanguageHandlerInterface.Type.DAG) {\n-                        nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                    if (secondaryFile == null) {\n+                        throw new CustomWebApplicationException(this.CWL_PARSE_SECONDARY_ERROR + run, HttpStatus.SC_BAD_REQUEST);\n                     }\n+                }\n \n-                    if (secondaryFile != null) {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                // Check secondary file for docker pull\n+                if (secondaryFile != null) {\n+                    String finalSecondaryFile = secondaryFile;\n+                    final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n+                            .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n+                    final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n+                    stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n+                    if (isExpressionTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, expressionToolType);\n+                    } else if (isTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, toolType);\n+                    } else if (isWorkflow(content, yaml)) {\n+                        stepToType.put(workflowStepId, workflowType);\n                     } else {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                        stepToType.put(workflowStepId, \"n/a\");\n                     }\n+                }\n \n+                String dockerUrl = null;\n+                if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n+                    dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n                 }\n \n                 if (type == LanguageHandlerInterface.Type.DAG) {\n-                    // Determine steps that point to end\n-                    List<String> endDependencies = new ArrayList<>();\n+                    nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                }\n \n-                    for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n-                        Object sources = workflowOutputParameter.getOutputSource();\n-                        processDependencies(nodePrefix, endDependencies, sources);\n-                    }\n+                if (secondaryFile != null) {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                } else {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                }\n \n-                    toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n-                    nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+            }\n \n-                    // connect start node with them\n-                    for (Pair<String, String> node : nodePairs) {\n-                        if (toolInfoMap.get(node.getLeft()) == null) {\n-                            toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n-                        }\n-                    }\n-                    nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+            if (type == LanguageHandlerInterface.Type.DAG) {\n+                // Determine steps that point to end\n+                List<String> endDependencies = new ArrayList<>();\n \n-                    return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n-                } else {\n-                    return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n+                for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n+                    Object sources = workflowOutputParameter.getOutputSource();\n+                    processDependencies(nodePrefix, endDependencies, sources);\n                 }\n-            } catch (JsonParseException ex) {\n-                LOG.error(\"The JSON file provided is invalid.\", ex);\n-                return Optional.empty();\n+\n+                toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n+                nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+\n+                // connect start node with them\n+                for (Pair<String, String> node : nodePairs) {\n+                    if (toolInfoMap.get(node.getLeft()) == null) {\n+                        toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n+                    }\n+                }\n+                nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+\n+                return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n+            } else {\n+                return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n             }\n-        } else {\n-            return Optional.empty();\n+        } catch (ClassCastException | YAMLException | JsonParseException ex) {\n+            throw new CustomWebApplicationException(this.CWL_PARSE_ERROR + ex.getMessage(), HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNjQxNg=="}, "originalCommit": {"oid": "a2b130262fa7f033814d101bfe8573a4dc3f685e"}, "originalPosition": 364}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDgxMzI5OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzozOTowNFrOH0jK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyMToyOFrOH1PhcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NDIwOQ==", "bodyText": "Sorry, I didn't provide the right level of request to log the exception. Before the throw, LOG the error, making the exception the second parameter. Something like this:\nfinal String msg = WDLHandler.WDL_PARSE_ERROR + ex.getMessage();\nLOG.error(msg, ex);\nthrow new CustomWebApplicationException(msg, HttpStatus.SC_BAD_REQUEST);\n\nThe reason for this if this error starts happening in production, we can go look at the logs, and see what the actual error is.\nI don't think you need the 3rd parameter to CustomWebapplicationException.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524864209", "createdAt": "2020-11-17T03:39:04Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +428,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError ex) {\n+            throw new CustomWebApplicationException(WDLHandler.WDL_PARSE_ERROR + ex.getMessage(), HttpStatus.SC_BAD_REQUEST, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDg5Nw==", "bodyText": "Oops, I see what you mean. I thought we wanted the stack trace to be available within the thrown exception, which is why I added the extra parameter to CustomWebapplicationException.\nFixed.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r525590897", "createdAt": "2020-11-17T23:21:28Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/WDLHandler.java", "diffHunk": "@@ -427,10 +428,13 @@ public VersionTypeValidation validateTestParameterSet(Set<SourceFile> sourceFile\n             // Iterate over each call, determine dependencies\n             Map<String, List<String>> callsToDependencies = wdlBridge.getCallsToDependencies(tempMainDescriptor.getAbsolutePath(), mainDescName);\n             toolInfoMap = mapConverterToToolInfo(callsToDockerMap, callsToDependencies);\n+\n             // Get import files\n             namespaceToPath = wdlBridge.getImportMap(tempMainDescriptor.getAbsolutePath(), mainDescName);\n-        } catch (IOException | NoSuchElementException | WdlParser.SyntaxError e) {\n-            throw new CustomWebApplicationException(\"could not process wdl into DAG: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        } catch (WdlParser.SyntaxError ex) {\n+            throw new CustomWebApplicationException(WDLHandler.WDL_PARSE_ERROR + ex.getMessage(), HttpStatus.SC_BAD_REQUEST, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NDIwOQ=="}, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDgxOTI5OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0MTo1NVrOH0jOIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyMzoyNVrOH1PkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTA1Ng==", "bodyText": "The variable name is equals, but you're not testing for equality, you're testing for startsWith. A little confusing, and I'm not sure which one you want.\nNvm, I see it was like this already.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524865056", "createdAt": "2020-11-17T03:41:55Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -261,6 +268,21 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n \n             // Convert YAML to JSON\n             Map<String, Object> mapping = yaml.loadAs(mainDescriptor, Map.class);\n+\n+            // verify cwl version is correctly specified\n+            final Object cwlVersion = mapping.get(\"cwlVersion\");\n+            if (cwlVersion != null) {\n+                final boolean equals = cwlVersion.toString().startsWith(CWLHandler.CWL_VERSION_PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MTYyOQ==", "bodyText": "Modified both areas to have a more descriptive variable name, see here.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r525591629", "createdAt": "2020-11-17T23:23:25Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -261,6 +268,21 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n \n             // Convert YAML to JSON\n             Map<String, Object> mapping = yaml.loadAs(mainDescriptor, Map.class);\n+\n+            // verify cwl version is correctly specified\n+            final Object cwlVersion = mapping.get(\"cwlVersion\");\n+            if (cwlVersion != null) {\n+                final boolean equals = cwlVersion.toString().startsWith(CWLHandler.CWL_VERSION_PREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTA1Ng=="}, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDgyMjMxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0Mzo0NFrOH0jP-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyMjoxMVrOH1PijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTUyOA==", "bodyText": "Log the exception (see my other comment)", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524865528", "createdAt": "2020-11-17T03:43:44Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -274,177 +296,171 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n             String expressionToolType = \"expressionTool\";\n \n             // Set up GSON for JSON parsing\n-            Gson gson;\n-            try {\n-                gson = CWL.getTypeSafeCWLToolDocument();\n+            Gson gson = CWL.getTypeSafeCWLToolDocument();\n \n-                final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n+            final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n \n-                if (workflow == null) {\n-                    LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n-                    return Optional.empty();\n-                }\n+            if (workflow == null) {\n+                LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n+                return Optional.empty();\n+            }\n \n-                // Determine default docker path (Check requirement first and then hint)\n-                defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n-\n-                // Store workflow steps in json and then read it into map <String, WorkflowStep>\n-                Object steps = workflow.getSteps();\n-                String stepJson = gson.toJson(steps);\n-                Map<String, WorkflowStep> workflowStepMap;\n-                if (steps instanceof ArrayList) {\n-                    ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n-                    }.getType());\n-                    workflowStepMap = new LinkedTreeMap<>();\n-                    workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n-                } else {\n-                    workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n-                    }.getType());\n-                }\n+            // Determine default docker path (Check requirement first and then hint)\n+            defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n+\n+            // Store workflow steps in json and then read it into map <String, WorkflowStep>\n+            Object steps = workflow.getSteps();\n+            String stepJson = gson.toJson(steps);\n+            Map<String, WorkflowStep> workflowStepMap;\n+            if (steps instanceof ArrayList) {\n+                ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n+                }.getType());\n+                workflowStepMap = new LinkedTreeMap<>();\n+                workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n+            } else {\n+                workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n+                }.getType());\n+            }\n \n-                if (stepJson == null) {\n-                    LOG.error(\"Could not find any steps for the workflow.\");\n-                    return Optional.empty();\n-                }\n+            if (stepJson == null) {\n+                LOG.error(\"Could not find any steps for the workflow.\");\n+                return Optional.empty();\n+            }\n \n-                if (workflowStepMap == null) {\n-                    LOG.error(\"Error deserializing workflow steps\");\n-                    return Optional.empty();\n-                }\n+            if (workflowStepMap == null) {\n+                LOG.error(\"Error deserializing workflow steps\");\n+                return Optional.empty();\n+            }\n \n-                // Iterate through steps to find dependencies and docker requirements\n-                for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n-                    WorkflowStep workflowStep = entry.getValue();\n-                    String workflowStepId = nodePrefix + entry.getKey();\n+            // Iterate through steps to find dependencies and docker requirements\n+            for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n+                WorkflowStep workflowStep = entry.getValue();\n+                String workflowStepId = nodePrefix + entry.getKey();\n \n-                    ArrayList<String> stepDependencies = new ArrayList<>();\n+                ArrayList<String> stepDependencies = new ArrayList<>();\n \n-                    // Iterate over source and get the dependencies\n-                    if (workflowStep.getIn() != null) {\n-                        for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n-                            Object sources = workflowStepInput.getSource();\n+                // Iterate over source and get the dependencies\n+                if (workflowStep.getIn() != null) {\n+                    for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n+                        Object sources = workflowStepInput.getSource();\n \n-                            processDependencies(nodePrefix, stepDependencies, sources);\n-                        }\n-                        if (stepDependencies.size() > 0) {\n-                            toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n-                                toolInfo.toolDependencyList.addAll(stepDependencies);\n-                                return toolInfo;\n-                            });\n-                            toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n-                        }\n+                        processDependencies(nodePrefix, stepDependencies, sources);\n                     }\n-\n-                    // Check workflow step for docker requirement and hints\n-                    String stepDockerRequirement = defaultDockerPath;\n-                    stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n-                        stepDockerRequirement);\n-\n-                    // Check for docker requirement within workflow step file\n-                    String secondaryFile = null;\n-                    Object run = workflowStep.getRun();\n-                    String runAsJson = gson.toJson(gson.toJsonTree(run));\n-\n-                    if (run instanceof String) {\n-                        secondaryFile = (String)run;\n-                    } else if (isTool(runAsJson, yaml)) {\n-                        CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, toolType);\n-                    } else if (isWorkflow(runAsJson, yaml)) {\n-                        Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n-                        stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, workflowType);\n-                    } else if (isExpressionTool(runAsJson, yaml)) {\n-                        ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, expressionToolType);\n-                    } else if (run instanceof Map) {\n-                        // must be import or include\n-                        Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n-                        if (importVal != null) {\n-                            secondaryFile = importVal.toString();\n-                        }\n-\n-                        Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n-                        if (includeVal != null) {\n-                            secondaryFile = includeVal.toString();\n-                        }\n-\n-                        if (secondaryFile == null) {\n-                            LOG.error(\"Syntax incorrect. Could not ($)import or ($)include secondary file for run command: \" + run);\n-                            return Optional.empty();\n-                        }\n+                    if (stepDependencies.size() > 0) {\n+                        toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n+                            toolInfo.toolDependencyList.addAll(stepDependencies);\n+                            return toolInfo;\n+                        });\n+                        toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n                     }\n+                }\n \n-                    // Check secondary file for docker pull\n-                    if (secondaryFile != null) {\n-                        String finalSecondaryFile = secondaryFile;\n-                        final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n-                                .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n-                        final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n-                        stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n-                        if (isExpressionTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, expressionToolType);\n-                        } else if (isTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, toolType);\n-                        } else if (isWorkflow(content, yaml)) {\n-                            stepToType.put(workflowStepId, workflowType);\n-                        } else {\n-                            stepToType.put(workflowStepId, \"n/a\");\n-                        }\n+                // Check workflow step for docker requirement and hints\n+                String stepDockerRequirement = defaultDockerPath;\n+                stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n+                    stepDockerRequirement);\n+\n+                // Check for docker requirement within workflow step file\n+                String secondaryFile = null;\n+                Object run = workflowStep.getRun();\n+                String runAsJson = gson.toJson(gson.toJsonTree(run));\n+\n+                if (run instanceof String) {\n+                    secondaryFile = (String)run;\n+                } else if (isTool(runAsJson, yaml)) {\n+                    CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, toolType);\n+                } else if (isWorkflow(runAsJson, yaml)) {\n+                    Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n+                    stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, workflowType);\n+                } else if (isExpressionTool(runAsJson, yaml)) {\n+                    ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, expressionToolType);\n+                } else if (run instanceof Map) {\n+                    // must be import or include\n+                    Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n+                    if (importVal != null) {\n+                        secondaryFile = importVal.toString();\n                     }\n \n-                    String dockerUrl = null;\n-                    if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n-                        dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n+                    Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n+                    if (includeVal != null) {\n+                        secondaryFile = includeVal.toString();\n                     }\n \n-                    if (type == LanguageHandlerInterface.Type.DAG) {\n-                        nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                    if (secondaryFile == null) {\n+                        LOG.error(CWLHandler.CWL_PARSE_SECONDARY_ERROR + run);\n+                        throw new CustomWebApplicationException(CWLHandler.CWL_PARSE_SECONDARY_ERROR + run, HttpStatus.SC_BAD_REQUEST);\n                     }\n+                }\n \n-                    if (secondaryFile != null) {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                // Check secondary file for docker pull\n+                if (secondaryFile != null) {\n+                    String finalSecondaryFile = secondaryFile;\n+                    final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n+                            .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n+                    final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n+                    stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n+                    if (isExpressionTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, expressionToolType);\n+                    } else if (isTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, toolType);\n+                    } else if (isWorkflow(content, yaml)) {\n+                        stepToType.put(workflowStepId, workflowType);\n                     } else {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                        stepToType.put(workflowStepId, \"n/a\");\n                     }\n+                }\n \n+                String dockerUrl = null;\n+                if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n+                    dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n                 }\n \n                 if (type == LanguageHandlerInterface.Type.DAG) {\n-                    // Determine steps that point to end\n-                    List<String> endDependencies = new ArrayList<>();\n+                    nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                }\n \n-                    for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n-                        Object sources = workflowOutputParameter.getOutputSource();\n-                        processDependencies(nodePrefix, endDependencies, sources);\n-                    }\n+                if (secondaryFile != null) {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                } else {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                }\n \n-                    toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n-                    nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+            }\n \n-                    // connect start node with them\n-                    for (Pair<String, String> node : nodePairs) {\n-                        if (toolInfoMap.get(node.getLeft()) == null) {\n-                            toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n-                        }\n-                    }\n-                    nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+            if (type == LanguageHandlerInterface.Type.DAG) {\n+                // Determine steps that point to end\n+                List<String> endDependencies = new ArrayList<>();\n \n-                    return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n-                } else {\n-                    return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n+                for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n+                    Object sources = workflowOutputParameter.getOutputSource();\n+                    processDependencies(nodePrefix, endDependencies, sources);\n                 }\n-            } catch (JsonParseException ex) {\n-                LOG.error(\"The JSON file provided is invalid.\", ex);\n-                return Optional.empty();\n+\n+                toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n+                nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+\n+                // connect start node with them\n+                for (Pair<String, String> node : nodePairs) {\n+                    if (toolInfoMap.get(node.getLeft()) == null) {\n+                        toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n+                    }\n+                }\n+                nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+\n+                return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n+            } else {\n+                return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n             }\n-        } else {\n-            return Optional.empty();\n+        } catch (ClassCastException | YAMLException | JsonParseException ex) {\n+            throw new CustomWebApplicationException(CWLHandler.CWL_PARSE_ERROR + ex.getMessage(), HttpStatus.SC_BAD_REQUEST, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MTE4MA==", "bodyText": "Logged.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r525591180", "createdAt": "2020-11-17T23:22:11Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -274,177 +296,171 @@ private void handlePotentialFormatEntry(Set<FileFormat> fileFormats, Object v) {\n             String expressionToolType = \"expressionTool\";\n \n             // Set up GSON for JSON parsing\n-            Gson gson;\n-            try {\n-                gson = CWL.getTypeSafeCWLToolDocument();\n+            Gson gson = CWL.getTypeSafeCWLToolDocument();\n \n-                final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n+            final Workflow workflow = gson.fromJson(cwlJson.toString(), Workflow.class);\n \n-                if (workflow == null) {\n-                    LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n-                    return Optional.empty();\n-                }\n+            if (workflow == null) {\n+                LOG.error(\"The workflow does not seem to conform to CWL specs.\");\n+                return Optional.empty();\n+            }\n \n-                // Determine default docker path (Check requirement first and then hint)\n-                defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n-\n-                // Store workflow steps in json and then read it into map <String, WorkflowStep>\n-                Object steps = workflow.getSteps();\n-                String stepJson = gson.toJson(steps);\n-                Map<String, WorkflowStep> workflowStepMap;\n-                if (steps instanceof ArrayList) {\n-                    ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n-                    }.getType());\n-                    workflowStepMap = new LinkedTreeMap<>();\n-                    workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n-                } else {\n-                    workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n-                    }.getType());\n-                }\n+            // Determine default docker path (Check requirement first and then hint)\n+            defaultDockerPath = getRequirementOrHint(workflow.getRequirements(), workflow.getHints(), defaultDockerPath);\n+\n+            // Store workflow steps in json and then read it into map <String, WorkflowStep>\n+            Object steps = workflow.getSteps();\n+            String stepJson = gson.toJson(steps);\n+            Map<String, WorkflowStep> workflowStepMap;\n+            if (steps instanceof ArrayList) {\n+                ArrayList<WorkflowStep> workflowStepList = gson.fromJson(stepJson, new TypeToken<ArrayList<WorkflowStep>>() {\n+                }.getType());\n+                workflowStepMap = new LinkedTreeMap<>();\n+                workflowStepList.forEach(workflowStep -> workflowStepMap.put(workflowStep.getId().toString(), workflowStep));\n+            } else {\n+                workflowStepMap = gson.fromJson(stepJson, new TypeToken<Map<String, WorkflowStep>>() {\n+                }.getType());\n+            }\n \n-                if (stepJson == null) {\n-                    LOG.error(\"Could not find any steps for the workflow.\");\n-                    return Optional.empty();\n-                }\n+            if (stepJson == null) {\n+                LOG.error(\"Could not find any steps for the workflow.\");\n+                return Optional.empty();\n+            }\n \n-                if (workflowStepMap == null) {\n-                    LOG.error(\"Error deserializing workflow steps\");\n-                    return Optional.empty();\n-                }\n+            if (workflowStepMap == null) {\n+                LOG.error(\"Error deserializing workflow steps\");\n+                return Optional.empty();\n+            }\n \n-                // Iterate through steps to find dependencies and docker requirements\n-                for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n-                    WorkflowStep workflowStep = entry.getValue();\n-                    String workflowStepId = nodePrefix + entry.getKey();\n+            // Iterate through steps to find dependencies and docker requirements\n+            for (Map.Entry<String, WorkflowStep> entry : workflowStepMap.entrySet()) {\n+                WorkflowStep workflowStep = entry.getValue();\n+                String workflowStepId = nodePrefix + entry.getKey();\n \n-                    ArrayList<String> stepDependencies = new ArrayList<>();\n+                ArrayList<String> stepDependencies = new ArrayList<>();\n \n-                    // Iterate over source and get the dependencies\n-                    if (workflowStep.getIn() != null) {\n-                        for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n-                            Object sources = workflowStepInput.getSource();\n+                // Iterate over source and get the dependencies\n+                if (workflowStep.getIn() != null) {\n+                    for (WorkflowStepInput workflowStepInput : workflowStep.getIn()) {\n+                        Object sources = workflowStepInput.getSource();\n \n-                            processDependencies(nodePrefix, stepDependencies, sources);\n-                        }\n-                        if (stepDependencies.size() > 0) {\n-                            toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n-                                toolInfo.toolDependencyList.addAll(stepDependencies);\n-                                return toolInfo;\n-                            });\n-                            toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n-                        }\n+                        processDependencies(nodePrefix, stepDependencies, sources);\n                     }\n-\n-                    // Check workflow step for docker requirement and hints\n-                    String stepDockerRequirement = defaultDockerPath;\n-                    stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n-                        stepDockerRequirement);\n-\n-                    // Check for docker requirement within workflow step file\n-                    String secondaryFile = null;\n-                    Object run = workflowStep.getRun();\n-                    String runAsJson = gson.toJson(gson.toJsonTree(run));\n-\n-                    if (run instanceof String) {\n-                        secondaryFile = (String)run;\n-                    } else if (isTool(runAsJson, yaml)) {\n-                        CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, toolType);\n-                    } else if (isWorkflow(runAsJson, yaml)) {\n-                        Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n-                        stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, workflowType);\n-                    } else if (isExpressionTool(runAsJson, yaml)) {\n-                        ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n-                        stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n-                            stepDockerRequirement);\n-                        stepToType.put(workflowStepId, expressionToolType);\n-                    } else if (run instanceof Map) {\n-                        // must be import or include\n-                        Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n-                        if (importVal != null) {\n-                            secondaryFile = importVal.toString();\n-                        }\n-\n-                        Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n-                        if (includeVal != null) {\n-                            secondaryFile = includeVal.toString();\n-                        }\n-\n-                        if (secondaryFile == null) {\n-                            LOG.error(\"Syntax incorrect. Could not ($)import or ($)include secondary file for run command: \" + run);\n-                            return Optional.empty();\n-                        }\n+                    if (stepDependencies.size() > 0) {\n+                        toolInfoMap.computeIfPresent(workflowStepId, (toolId, toolInfo) -> {\n+                            toolInfo.toolDependencyList.addAll(stepDependencies);\n+                            return toolInfo;\n+                        });\n+                        toolInfoMap.computeIfAbsent(workflowStepId, toolId -> new ToolInfo(null, stepDependencies));\n                     }\n+                }\n \n-                    // Check secondary file for docker pull\n-                    if (secondaryFile != null) {\n-                        String finalSecondaryFile = secondaryFile;\n-                        final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n-                                .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n-                        final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n-                        stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n-                        if (isExpressionTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, expressionToolType);\n-                        } else if (isTool(content, yaml)) {\n-                            stepToType.put(workflowStepId, toolType);\n-                        } else if (isWorkflow(content, yaml)) {\n-                            stepToType.put(workflowStepId, workflowType);\n-                        } else {\n-                            stepToType.put(workflowStepId, \"n/a\");\n-                        }\n+                // Check workflow step for docker requirement and hints\n+                String stepDockerRequirement = defaultDockerPath;\n+                stepDockerRequirement = getRequirementOrHint(workflowStep.getRequirements(), workflowStep.getHints(),\n+                    stepDockerRequirement);\n+\n+                // Check for docker requirement within workflow step file\n+                String secondaryFile = null;\n+                Object run = workflowStep.getRun();\n+                String runAsJson = gson.toJson(gson.toJsonTree(run));\n+\n+                if (run instanceof String) {\n+                    secondaryFile = (String)run;\n+                } else if (isTool(runAsJson, yaml)) {\n+                    CommandLineTool clTool = gson.fromJson(runAsJson, CommandLineTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(clTool.getRequirements(), clTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, toolType);\n+                } else if (isWorkflow(runAsJson, yaml)) {\n+                    Workflow stepWorkflow = gson.fromJson(runAsJson, Workflow.class);\n+                    stepDockerRequirement = getRequirementOrHint(stepWorkflow.getRequirements(), stepWorkflow.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, workflowType);\n+                } else if (isExpressionTool(runAsJson, yaml)) {\n+                    ExpressionTool expressionTool = gson.fromJson(runAsJson, ExpressionTool.class);\n+                    stepDockerRequirement = getRequirementOrHint(expressionTool.getRequirements(), expressionTool.getHints(),\n+                        stepDockerRequirement);\n+                    stepToType.put(workflowStepId, expressionToolType);\n+                } else if (run instanceof Map) {\n+                    // must be import or include\n+                    Object importVal = ((Map)run).containsKey(\"$import\") ? ((Map)run).get(\"$import\") : ((Map)run).get(\"import\");\n+                    if (importVal != null) {\n+                        secondaryFile = importVal.toString();\n                     }\n \n-                    String dockerUrl = null;\n-                    if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n-                        dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n+                    Object includeVal = ((Map)run).containsKey(\"$include\") ? ((Map)run).get(\"$include\") : ((Map)run).get(\"include\");\n+                    if (includeVal != null) {\n+                        secondaryFile = includeVal.toString();\n                     }\n \n-                    if (type == LanguageHandlerInterface.Type.DAG) {\n-                        nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                    if (secondaryFile == null) {\n+                        LOG.error(CWLHandler.CWL_PARSE_SECONDARY_ERROR + run);\n+                        throw new CustomWebApplicationException(CWLHandler.CWL_PARSE_SECONDARY_ERROR + run, HttpStatus.SC_BAD_REQUEST);\n                     }\n+                }\n \n-                    if (secondaryFile != null) {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                // Check secondary file for docker pull\n+                if (secondaryFile != null) {\n+                    String finalSecondaryFile = secondaryFile;\n+                    final Optional<SourceFile> sourceFileOptional = secondarySourceFiles.stream()\n+                            .filter(sf -> sf.getPath().equals(finalSecondaryFile)).findFirst();\n+                    final String content = sourceFileOptional.map(SourceFile::getContent).orElse(null);\n+                    stepDockerRequirement = parseSecondaryFile(stepDockerRequirement, content, gson, yaml);\n+                    if (isExpressionTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, expressionToolType);\n+                    } else if (isTool(content, yaml)) {\n+                        stepToType.put(workflowStepId, toolType);\n+                    } else if (isWorkflow(content, yaml)) {\n+                        stepToType.put(workflowStepId, workflowType);\n                     } else {\n-                        nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                        stepToType.put(workflowStepId, \"n/a\");\n                     }\n+                }\n \n+                String dockerUrl = null;\n+                if ((stepToType.get(workflowStepId).equals(workflowType) || stepToType.get(workflowStepId).equals(toolType)) && !Strings.isNullOrEmpty(stepDockerRequirement)) {\n+                    dockerUrl = getURLFromEntry(stepDockerRequirement, dao);\n                 }\n \n                 if (type == LanguageHandlerInterface.Type.DAG) {\n-                    // Determine steps that point to end\n-                    List<String> endDependencies = new ArrayList<>();\n+                    nodePairs.add(new MutablePair<>(workflowStepId, dockerUrl));\n+                }\n \n-                    for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n-                        Object sources = workflowOutputParameter.getOutputSource();\n-                        processDependencies(nodePrefix, endDependencies, sources);\n-                    }\n+                if (secondaryFile != null) {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(secondaryFile, stepDockerRequirement, dockerUrl));\n+                } else {\n+                    nodeDockerInfo.put(workflowStepId, new MutableTriple<>(mainDescriptorPath, stepDockerRequirement, dockerUrl));\n+                }\n \n-                    toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n-                    nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+            }\n \n-                    // connect start node with them\n-                    for (Pair<String, String> node : nodePairs) {\n-                        if (toolInfoMap.get(node.getLeft()) == null) {\n-                            toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n-                        }\n-                    }\n-                    nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+            if (type == LanguageHandlerInterface.Type.DAG) {\n+                // Determine steps that point to end\n+                List<String> endDependencies = new ArrayList<>();\n \n-                    return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n-                } else {\n-                    return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n+                for (WorkflowOutputParameter workflowOutputParameter : workflow.getOutputs()) {\n+                    Object sources = workflowOutputParameter.getOutputSource();\n+                    processDependencies(nodePrefix, endDependencies, sources);\n                 }\n-            } catch (JsonParseException ex) {\n-                LOG.error(\"The JSON file provided is invalid.\", ex);\n-                return Optional.empty();\n+\n+                toolInfoMap.put(\"UniqueEndKey\", new ToolInfo(null, endDependencies));\n+                nodePairs.add(new MutablePair<>(\"UniqueEndKey\", \"\"));\n+\n+                // connect start node with them\n+                for (Pair<String, String> node : nodePairs) {\n+                    if (toolInfoMap.get(node.getLeft()) == null) {\n+                        toolInfoMap.put(node.getLeft(), new ToolInfo(null, Lists.newArrayList(\"UniqueBeginKey\")));\n+                    }\n+                }\n+                nodePairs.add(new MutablePair<>(\"UniqueBeginKey\", \"\"));\n+\n+                return Optional.of(setupJSONDAG(nodePairs, toolInfoMap, stepToType, nodeDockerInfo));\n+            } else {\n+                return Optional.of(getJSONTableToolContent(nodeDockerInfo));\n             }\n-        } else {\n-            return Optional.empty();\n+        } catch (ClassCastException | YAMLException | JsonParseException ex) {\n+            throw new CustomWebApplicationException(CWLHandler.CWL_PARSE_ERROR + ex.getMessage(), HttpStatus.SC_BAD_REQUEST, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTUyOA=="}, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDgyMjg2OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0NDowMlrOH0jQSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNDo0MlrOH1Pmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTYwOA==", "bodyText": "equals != startsWith", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524865608", "createdAt": "2020-11-17T03:44:02Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -725,7 +741,7 @@ private boolean isValidCwl(String content, Yaml yaml) {\n             final Object cwlVersion = mapping.get(\"cwlVersion\");\n \n             if (cwlVersion != null) {\n-                final boolean equals = cwlVersion.toString().startsWith(\"v1\");\n+                final boolean equals = cwlVersion.toString().startsWith(CWLHandler.CWL_VERSION_PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MjIzNQ==", "bodyText": "Modified. Changed to startsWith (in both locations, see comment above).", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r525592235", "createdAt": "2020-11-17T23:24:42Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/CWLHandler.java", "diffHunk": "@@ -725,7 +741,7 @@ private boolean isValidCwl(String content, Yaml yaml) {\n             final Object cwlVersion = mapping.get(\"cwlVersion\");\n \n             if (cwlVersion != null) {\n-                final boolean equals = cwlVersion.toString().startsWith(\"v1\");\n+                final boolean equals = cwlVersion.toString().startsWith(CWLHandler.CWL_VERSION_PREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTYwOA=="}, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 378}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDgzMzAzOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/CustomWebApplicationException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMzo0OTozOFrOH0jWDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNjoyMFrOH1PpUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NzA4NQ==", "bodyText": "Not sure you need this (see my other comment)", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r524867085", "createdAt": "2020-11-17T03:49:38Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/CustomWebApplicationException.java", "diffHunk": "@@ -31,6 +31,11 @@ public CustomWebApplicationException(String message, int status) {\n         this.errorMessage = message;\n     }\n \n+    public CustomWebApplicationException(String message, int status, Throwable ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MjkxMg==", "bodyText": "Removed overloaded constructor with third parameter, since no longer passing the Throwable into the custom exception.", "url": "https://github.com/dockstore/dockstore/pull/3922#discussion_r525592912", "createdAt": "2020-11-17T23:26:20Z", "author": {"login": "Richard-Hansen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/CustomWebApplicationException.java", "diffHunk": "@@ -31,6 +31,11 @@ public CustomWebApplicationException(String message, int status) {\n         this.errorMessage = message;\n     }\n \n+    public CustomWebApplicationException(String message, int status, Throwable ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NzA4NQ=="}, "originalCommit": {"oid": "c5277c33e2a3bf271f3be4e33b742fb646b1a076"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2740, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}