{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODgxNTAx", "number": 3145, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDoxNzozMVrODYrl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMzowMFrODY3oTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjA2NjQ1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDoxNzozMVrOFerhsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NToxMlrOFe9Dtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDczNw==", "bodyText": "Do we want the include parameter here? Not many orgs, so maybe performance isn't an issue here.", "url": "https://github.com/dockstore/dockstore/pull/3145#discussion_r367714737", "createdAt": "2020-01-17T00:17:31Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -93,7 +93,9 @@ public OrganizationResource(SessionFactory sessionFactory) {\n     @ApiOperation(value = \"List all available organizations.\", notes = \"NO Authentication\", responseContainer = \"List\", response = Organization.class)\n     @Operation(operationId = \"getApprovedOrganizations\", summary = \"List all available organizations.\", description = \"List all organizations that have been approved by a curator or admin, sorted by number of stars.\")\n     public List<Organization> getApprovedOrganizations() {\n-        return organizationDAO.findApprovedSortedByStar();\n+        List<Organization> organizations = organizationDAO.findApprovedSortedByStar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484676682aa202a3bd364d9c48fcf28c7e098638"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTk3NQ==", "bodyText": "I will leave it as is and create a new ticket if that feature is needed...", "url": "https://github.com/dockstore/dockstore/pull/3145#discussion_r368001975", "createdAt": "2020-01-17T15:45:12Z", "author": {"login": "wshands"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -93,7 +93,9 @@ public OrganizationResource(SessionFactory sessionFactory) {\n     @ApiOperation(value = \"List all available organizations.\", notes = \"NO Authentication\", responseContainer = \"List\", response = Organization.class)\n     @Operation(operationId = \"getApprovedOrganizations\", summary = \"List all available organizations.\", description = \"List all organizations that have been approved by a curator or admin, sorted by number of stars.\")\n     public List<Organization> getApprovedOrganizations() {\n-        return organizationDAO.findApprovedSortedByStar();\n+        List<Organization> organizations = organizationDAO.findApprovedSortedByStar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDczNw=="}, "originalCommit": {"oid": "484676682aa202a3bd364d9c48fcf28c7e098638"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDAzODUyOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMzowMFrOFe-O6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MDo1NVrOFe_E7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTIyNg==", "bodyText": "Use a constant string for \"aliases\" and use it both here and in the (now badly named) initializeValidations method.\nThat way, someone won't accidentally rename one but not the other.\nShould also do the same for validations while in the neighbourhood.", "url": "https://github.com/dockstore/dockstore/pull/3145#discussion_r368021226", "createdAt": "2020-01-17T16:23:00Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1036,7 +1036,7 @@ public Entry getPublishedEntryByPath(@ApiParam(value = \"repository path\", requir\n     @UnitOfWork(readOnly = true)\n     @Path(\"/path/workflow/{repository}/published\")\n     @ApiOperation(nickname = \"getPublishedWorkflowByPath\", value = \"Get a published workflow by path\", notes = \"Does not require workflow name.\", response = Workflow.class)\n-    public Workflow getPublishedWorkflowByPath(@ApiParam(value = \"repository path\", required = true) @PathParam(\"repository\") String path, @ApiParam(value = \"Comma-delimited list of fields to include: validations\") @QueryParam(\"include\") String include,\n+    public Workflow getPublishedWorkflowByPath(@ApiParam(value = \"repository path\", required = true) @PathParam(\"repository\") String path, @ApiParam(value = \"Comma-delimited list of fields to include: validations, aliases\") @QueryParam(\"include\") String include,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a44b482acbdeeaa45113d60e1881c3be056810"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTA1Mg==", "bodyText": "Done", "url": "https://github.com/dockstore/dockstore/pull/3145#discussion_r368035052", "createdAt": "2020-01-17T16:50:55Z", "author": {"login": "wshands"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1036,7 +1036,7 @@ public Entry getPublishedEntryByPath(@ApiParam(value = \"repository path\", requir\n     @UnitOfWork(readOnly = true)\n     @Path(\"/path/workflow/{repository}/published\")\n     @ApiOperation(nickname = \"getPublishedWorkflowByPath\", value = \"Get a published workflow by path\", notes = \"Does not require workflow name.\", response = Workflow.class)\n-    public Workflow getPublishedWorkflowByPath(@ApiParam(value = \"repository path\", required = true) @PathParam(\"repository\") String path, @ApiParam(value = \"Comma-delimited list of fields to include: validations\") @QueryParam(\"include\") String include,\n+    public Workflow getPublishedWorkflowByPath(@ApiParam(value = \"repository path\", required = true) @PathParam(\"repository\") String path, @ApiParam(value = \"Comma-delimited list of fields to include: validations, aliases\") @QueryParam(\"include\") String include,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTIyNg=="}, "originalCommit": {"oid": "63a44b482acbdeeaa45113d60e1881c3be056810"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3090, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}