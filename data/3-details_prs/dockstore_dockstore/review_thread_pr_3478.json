{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMTkwOTI0", "number": 3478, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1MzozMVrOD96Jrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1MzozMVrOD96Jrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQyNDc5OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1MzozMVrOGXr_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1ODoxMVrOGXsLNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTExMQ==", "bodyText": "Do each of these create a separate db connection?", "url": "https://github.com/dockstore/dockstore/pull/3478#discussion_r427491111", "createdAt": "2020-05-19T17:53:31Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java", "diffHunk": "@@ -84,18 +85,36 @@ public EventResource(EventDAO eventDAO, UserDAO userDAO) {\n         switch (eventSearchType) {\n         case STARRED_ENTRIES:\n             Set<Long> entryIDs = userWithSession.getStarredEntries().stream().map(Entry::getId).collect(Collectors.toSet());\n-            return this.eventDAO.findEventsByEntryIDs(entryIDs, offset, limit);\n+            List<Event> eventsByEntryIDs = this.eventDAO.findEventsByEntryIDs(entryIDs, offset, limit);\n+            eagerLoadEventEntries(eventsByEntryIDs);\n+            return eventsByEntryIDs;\n         case STARRED_ORGANIZATION:\n             Set<Long> organizationIDs = userWithSession.getStarredOrganizations().stream().map(Organization::getId).collect(Collectors.toSet());\n-            return this.eventDAO.findAllByOrganizationIds(organizationIDs, offset, limit);\n+            List<Event> allByOrganizationIds = this.eventDAO.findAllByOrganizationIds(organizationIDs, offset, limit);\n+            eagerLoadEventEntries(allByOrganizationIds);\n+            return allByOrganizationIds;\n         case ALL_STARRED:\n             Set<Long> organizationIDs2 = userWithSession.getStarredOrganizations().stream().map(Organization::getId).collect(Collectors.toSet());\n             Set<Long> entryIDs2 = userWithSession.getStarredEntries().stream().map(Entry::getId).collect(Collectors.toSet());\n-            return this.eventDAO.findAllByOrganizationIdsOrEntryIds(organizationIDs2, entryIDs2, offset, limit);\n+            List<Event> allByOrganizationIdsOrEntryIds = this.eventDAO\n+                    .findAllByOrganizationIdsOrEntryIds(organizationIDs2, entryIDs2, offset, limit);\n+            eagerLoadEventEntries(allByOrganizationIdsOrEntryIds);\n+            return allByOrganizationIdsOrEntryIds;\n         default:\n             return Collections.emptyList();\n         }\n     }\n+\n+    private void eagerLoadEventEntries(List<Event> events) {\n+        events.forEach(event -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdc785c7c0fa3906b24c62b9359f12611f64d7f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDE5OQ==", "bodyText": "No, same amount of connections acquired and released without it", "url": "https://github.com/dockstore/dockstore/pull/3478#discussion_r427494199", "createdAt": "2020-05-19T17:58:11Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java", "diffHunk": "@@ -84,18 +85,36 @@ public EventResource(EventDAO eventDAO, UserDAO userDAO) {\n         switch (eventSearchType) {\n         case STARRED_ENTRIES:\n             Set<Long> entryIDs = userWithSession.getStarredEntries().stream().map(Entry::getId).collect(Collectors.toSet());\n-            return this.eventDAO.findEventsByEntryIDs(entryIDs, offset, limit);\n+            List<Event> eventsByEntryIDs = this.eventDAO.findEventsByEntryIDs(entryIDs, offset, limit);\n+            eagerLoadEventEntries(eventsByEntryIDs);\n+            return eventsByEntryIDs;\n         case STARRED_ORGANIZATION:\n             Set<Long> organizationIDs = userWithSession.getStarredOrganizations().stream().map(Organization::getId).collect(Collectors.toSet());\n-            return this.eventDAO.findAllByOrganizationIds(organizationIDs, offset, limit);\n+            List<Event> allByOrganizationIds = this.eventDAO.findAllByOrganizationIds(organizationIDs, offset, limit);\n+            eagerLoadEventEntries(allByOrganizationIds);\n+            return allByOrganizationIds;\n         case ALL_STARRED:\n             Set<Long> organizationIDs2 = userWithSession.getStarredOrganizations().stream().map(Organization::getId).collect(Collectors.toSet());\n             Set<Long> entryIDs2 = userWithSession.getStarredEntries().stream().map(Entry::getId).collect(Collectors.toSet());\n-            return this.eventDAO.findAllByOrganizationIdsOrEntryIds(organizationIDs2, entryIDs2, offset, limit);\n+            List<Event> allByOrganizationIdsOrEntryIds = this.eventDAO\n+                    .findAllByOrganizationIdsOrEntryIds(organizationIDs2, entryIDs2, offset, limit);\n+            eagerLoadEventEntries(allByOrganizationIdsOrEntryIds);\n+            return allByOrganizationIdsOrEntryIds;\n         default:\n             return Collections.emptyList();\n         }\n     }\n+\n+    private void eagerLoadEventEntries(List<Event> events) {\n+        events.forEach(event -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTExMQ=="}, "originalCommit": {"oid": "cdc785c7c0fa3906b24c62b9359f12611f64d7f5"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2945, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}