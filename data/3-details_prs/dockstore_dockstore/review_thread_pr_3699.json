{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTI2MjMz", "number": 3699, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowODo1NVrOETDlvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNjoxNFrOETtTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE3MjEzOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowODo1NVrOG4k_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowODo1NVrOG4k_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3OTU2OQ==", "bodyText": "There's no reason to create a TreeSet here, because you overwrite it on line 186. I would just get rid of this line and define it on line 186.\nOr, more subjectively, not not declare it at all and just return line 186 directly.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r461979569", "createdAt": "2020-07-29T01:08:55Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -145,11 +150,43 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n     public List<VersionVerifiedPlatform> getVerifiedPlatforms(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n             @Parameter(name = \"entryId\", description = \"id of the entry\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId) {\n         Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n-        checkOptionalAuthRead(user, entry);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n         List<VersionVerifiedPlatform> verifiedVersions = versionDAO.findEntryVersionsWithVerifiedPlatforms(entryId);\n         return verifiedVersions;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{entryId}/versions/{versionId}/fileTypes\")\n+    @ApiOperation(value = \"Retrieve the file types of a version's sourcefiles\",  hidden = true)\n+    @Operation(operationId = \"getVersionsFileTypes\", description = \"Retrieve the file types of a version's sourcefile\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<DescriptorLanguage.FileType> getVersionsFileTypes(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n+            @Parameter(name = \"entryId\", description = \"Entry to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId,\n+            @Parameter(name = \"versionId\", description = \"Version to retrieve the sourcefile types from\", required = true, in = ParameterIn.PATH) @PathParam(\"versionId\") Long versionId) {\n+        Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n+        Version version = versionDAO.findVersionInEntry(entryId, versionId);\n+        if (version == null) {\n+            throw new CustomWebApplicationException(\"Version \" + versionId + \" does not exist for this entry\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        SortedSet<DescriptorLanguage.FileType> fileTypes = new TreeSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE3OTAwOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/resources/migrations.1.10.0.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToxMjo1MVrOG4lDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoxNDo1OFrOG5EZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MDU3Ng==", "bodyText": "Scares me a little if a null value gets introduced, then this migration will fail. I see it's never null in my Jul 24 snapshot, so maybe it's OK. And maybe if we run into this, we should fix it, so yeah, perhaps. Just thinking out loud.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r461980576", "createdAt": "2020-07-29T01:12:51Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/resources/migrations.1.10.0.xml", "diffHunk": "@@ -45,4 +45,7 @@\n             SET descriptortype = REPLACE(descriptortype, 'DOCKSTORE_WDL', 'WDL');\n         </sql>\n     </changeSet>\n+    <changeSet author=\"natalieperez (generated)\" id=\"addNotNullConstraintToTypeColumn\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MDA2Mg==", "bodyText": "If we merge this change, we should make a special note to the wiki instructions for the 1.10 release to make sure we test the migration with a recent DB.\nIn some cases we can calculate and populate this value in database, but it might be more trouble than it is worth if it is never null yet.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462340062", "createdAt": "2020-07-29T14:24:53Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/resources/migrations.1.10.0.xml", "diffHunk": "@@ -45,4 +45,7 @@\n             SET descriptortype = REPLACE(descriptortype, 'DOCKSTORE_WDL', 'WDL');\n         </sql>\n     </changeSet>\n+    <changeSet author=\"natalieperez (generated)\" id=\"addNotNullConstraintToTypeColumn\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MDU3Ng=="}, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5NDE2OQ==", "bodyText": "Saw another annotation that makes the fields required, but doesn't need a migration.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462494169", "createdAt": "2020-07-29T18:14:58Z", "author": {"login": "NatalieEO"}, "path": "dockstore-webservice/src/main/resources/migrations.1.10.0.xml", "diffHunk": "@@ -45,4 +45,7 @@\n             SET descriptortype = REPLACE(descriptortype, 'DOCKSTORE_WDL', 'WDL');\n         </sql>\n     </changeSet>\n+    <changeSet author=\"natalieperez (generated)\" id=\"addNotNullConstraintToTypeColumn\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MDU3Ng=="}, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE5NDA2OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToyMToyNVrOG4lMWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1MToyOFrOG48RRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MjgxMQ==", "bodyText": "This is unfortunate, but may be fast enough for a single version, so probably not worth optimizing yet.\nWhy do you use a TreeSet instead of Collectors.toSet? TreeSet sorts, but for an enum it's just going to sort on the order of declaration, I think, and I don't think that order is significant. I could be wrong though.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r461982811", "createdAt": "2020-07-29T01:21:25Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -145,11 +150,43 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n     public List<VersionVerifiedPlatform> getVerifiedPlatforms(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n             @Parameter(name = \"entryId\", description = \"id of the entry\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId) {\n         Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n-        checkOptionalAuthRead(user, entry);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n         List<VersionVerifiedPlatform> verifiedVersions = versionDAO.findEntryVersionsWithVerifiedPlatforms(entryId);\n         return verifiedVersions;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{entryId}/versions/{versionId}/fileTypes\")\n+    @ApiOperation(value = \"Retrieve the file types of a version's sourcefiles\",  hidden = true)\n+    @Operation(operationId = \"getVersionsFileTypes\", description = \"Retrieve the file types of a version's sourcefile\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<DescriptorLanguage.FileType> getVersionsFileTypes(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n+            @Parameter(name = \"entryId\", description = \"Entry to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId,\n+            @Parameter(name = \"versionId\", description = \"Version to retrieve the sourcefile types from\", required = true, in = ParameterIn.PATH) @PathParam(\"versionId\") Long versionId) {\n+        Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n+        Version version = versionDAO.findVersionInEntry(entryId, versionId);\n+        if (version == null) {\n+            throw new CustomWebApplicationException(\"Version \" + versionId + \" does not exist for this entry\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        SortedSet<DescriptorLanguage.FileType> fileTypes = new TreeSet<>();\n+        SortedSet<SourceFile> sourceFiles = version.getSourceFiles();\n+        fileTypes = sourceFiles.stream().map(sourceFile -> sourceFile.getType()).collect(Collectors.toCollection(TreeSet::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MDkwMg==", "bodyText": "On further reflection, it probably is better to use TreeSet. Although the particular  ordering doesn\u2019t really matter much, the fact that it will return the same order every time is a good thing.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462360902", "createdAt": "2020-07-29T14:51:28Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -145,11 +150,43 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n     public List<VersionVerifiedPlatform> getVerifiedPlatforms(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n             @Parameter(name = \"entryId\", description = \"id of the entry\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId) {\n         Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n-        checkOptionalAuthRead(user, entry);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n         List<VersionVerifiedPlatform> verifiedVersions = versionDAO.findEntryVersionsWithVerifiedPlatforms(entryId);\n         return verifiedVersions;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{entryId}/versions/{versionId}/fileTypes\")\n+    @ApiOperation(value = \"Retrieve the file types of a version's sourcefiles\",  hidden = true)\n+    @Operation(operationId = \"getVersionsFileTypes\", description = \"Retrieve the file types of a version's sourcefile\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<DescriptorLanguage.FileType> getVersionsFileTypes(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n+            @Parameter(name = \"entryId\", description = \"Entry to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId,\n+            @Parameter(name = \"versionId\", description = \"Version to retrieve the sourcefile types from\", required = true, in = ParameterIn.PATH) @PathParam(\"versionId\") Long versionId) {\n+        Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n+        Version version = versionDAO.findVersionInEntry(entryId, versionId);\n+        if (version == null) {\n+            throw new CustomWebApplicationException(\"Version \" + versionId + \" does not exist for this entry\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        SortedSet<DescriptorLanguage.FileType> fileTypes = new TreeSet<>();\n+        SortedSet<SourceFile> sourceFiles = version.getSourceFiles();\n+        fileTypes = sourceFiles.stream().map(sourceFile -> sourceFile.getType()).collect(Collectors.toCollection(TreeSet::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MjgxMQ=="}, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjUyNTc3OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyODowM1rOG47J4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyODowM1rOG47J4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjYyNA==", "bodyText": "DescriptorLanguage.CWL.toString()", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462342624", "createdAt": "2020-07-29T14:28:03Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java", "diffHunk": "@@ -452,6 +456,64 @@ public void testGettingVerifiedVersions() {\n \n     }\n \n+    @Test\n+    public void testGettingVersionsFileTypes() {\n+        io.dockstore.openapi.client.ApiClient client = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        final ApiClient webClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+        final HostedApi hostedApi = new HostedApi(webClient);\n+        io.dockstore.openapi.client.api.EntriesApi entriesApi = new io.dockstore.openapi.client.api.EntriesApi(client);\n+\n+        Workflow workflow = hostedApi.createHostedWorkflow(\"wdlHosted\", null, \"wdl\", null, null);\n+        SourceFile sourceFile = new SourceFile();\n+        sourceFile.setType(SourceFile.TypeEnum.DOCKSTORE_WDL);\n+        sourceFile.setContent(\"workflow potato {\\n}\");\n+        sourceFile.setPath(\"/Dockstore.wdl\");\n+        sourceFile.setAbsolutePath(\"/Dockstore.wdl\");\n+\n+        workflow = hostedApi.editHostedWorkflow(workflow.getId(), Lists.newArrayList(sourceFile));\n+        WorkflowVersion workflowVersion = workflow.getWorkflowVersions().stream().filter(wv -> wv.getName().equals(\"1\")).findFirst().get();\n+        List<String> fileTypes = entriesApi.getVersionsFileTypes(workflow.getId(), workflowVersion.getId());\n+        assertEquals(1, fileTypes.size());\n+        assertEquals(SourceFile.TypeEnum.DOCKSTORE_WDL.toString(), fileTypes.get(0));\n+\n+        SourceFile testFile = new SourceFile();\n+        testFile.setType(SourceFile.TypeEnum.WDL_TEST_JSON);\n+        testFile.setContent(\"{}\");\n+        testFile.setPath(\"/test.wdl.json\");\n+        testFile.setAbsolutePath(\"/test.wdl.json\");\n+\n+        workflow = hostedApi.editHostedWorkflow(workflow.getId(), Lists.newArrayList(sourceFile, testFile));\n+        workflowVersion = workflow.getWorkflowVersions().stream().filter(wv -> wv.getName().equals(\"2\")).findFirst().get();\n+        fileTypes = entriesApi.getVersionsFileTypes(workflow.getId(), workflowVersion.getId());\n+        assertEquals(2, fileTypes.size());\n+        assertFalse(fileTypes.get(0) == fileTypes.get(1));\n+\n+        DockstoreTool tool = hostedApi.createHostedTool(\"hostedTool\", Registry.QUAY_IO.getDockerPath().toLowerCase(), \"CWL\", \"namespace\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe16b1b23f709b9abdc9562bfc442d4c93dfea9"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODIzMDk0OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowMDo0MlrOG5Lx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowMDo0MlrOG5Lx6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNTAxNg==", "bodyText": "DescriptorLanguage.WDL.toString()", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462615016", "createdAt": "2020-07-29T22:00:42Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java", "diffHunk": "@@ -430,26 +434,119 @@ public void testGettingVerifiedVersions() {\n \n         workflow = workflowApi.refresh(workflow.getId());\n         SourceFile sourceFile = workflow.getWorkflowVersions().get(0).getSourceFiles().get(0);\n-        PublishRequest publishRequest = SwaggerUtility.createPublishRequest(true);\n-        workflowApi.publish(workflow.getId(), publishRequest);\n         List<VersionVerifiedPlatform> versionsVerified = entriesApi.getVerifiedPlatforms(workflow.getId());\n         Assert.assertEquals(0, versionsVerified.size());\n \n-        testingPostgres.runUpdateStatement(\"INSERT INTO sourcefile_verified(id, verified, source, metadata) VALUES (\" + sourceFile.getId() + \", true, 'Potato CLI', 'Idaho')\");\n+        testingPostgres.runUpdateStatement(\"INSERT INTO sourcefile_verified(id, verified, source, metadata, platformversion) VALUES (\" + sourceFile.getId() + \", true, 'Potato CLI', 'Idaho', '1.0')\");\n         versionsVerified = entriesApi.getVerifiedPlatforms(workflow.getId());\n         Assert.assertEquals(1, versionsVerified.size());\n \n         ContainersApi toolApi = new ContainersApi(webClient);\n         DockstoreTool tool = toolApi.getContainerByToolPath(\"quay.io/dockstoretestuser2/quayandgithub\", null);\n         sourceFile = tool.getWorkflowVersions().get(0).getSourceFiles().get(0);\n-        toolApi.publish(tool.getId(), publishRequest);\n         versionsVerified = entriesApi.getVerifiedPlatforms(tool.getId());\n         Assert.assertEquals(0, versionsVerified.size());\n \n         testingPostgres.runUpdateStatement(\"INSERT INTO sourcefile_verified(id, verified, source, metadata) VALUES (\" + sourceFile.getId() + \", true, 'Potato CLI', 'Idaho')\");\n         versionsVerified = entriesApi.getVerifiedPlatforms(tool.getId());\n         Assert.assertEquals(1, versionsVerified.size());\n \n+        // check that verified platforms can't be viewed by another user if entry isn't published\n+        boolean throwsError = false;\n+        io.dockstore.openapi.client.ApiClient user1Client = getOpenAPIWebClient(USER_1_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.EntriesApi user1EntriesApi = new io.dockstore.openapi.client.api.EntriesApi(user1Client);\n+        try {\n+            versionsVerified = user1EntriesApi.getVerifiedPlatforms(workflow.getId());\n+        } catch (io.dockstore.openapi.client.ApiException ex) {\n+            throwsError = true;\n+        }\n+        if (!throwsError) {\n+            fail(\"Should not be able to verified platforms if not published and doesn't belong to user.\");\n+        }\n+\n+        // verified platforms can be viewed by others once published\n+        PublishRequest publishRequest = SwaggerUtility.createPublishRequest(true);\n+        workflowApi.publish(workflow.getId(), publishRequest);\n+        versionsVerified = user1EntriesApi.getVerifiedPlatforms(workflow.getId());\n+        Assert.assertEquals(1, versionsVerified.size());\n+    }\n+\n+    @Test\n+    public void testGettingVersionsFileTypes() {\n+        io.dockstore.openapi.client.ApiClient client = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        final ApiClient webClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+        final HostedApi hostedApi = new HostedApi(webClient);\n+        WorkflowsApi workflowApi = new WorkflowsApi(webClient);\n+        io.dockstore.openapi.client.api.EntriesApi entriesApi = new io.dockstore.openapi.client.api.EntriesApi(client);\n+\n+        Workflow workflow = hostedApi.createHostedWorkflow(\"wdlHosted\", null, \"wdl\", null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93859c341e509d5307ba5e1fd920bce030de829"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODM4NDI0OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Version.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowMToyNFrOG5NNGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowMToyNFrOG5NNGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzODM2MQ==", "bodyText": "last comma has space in front of it instead of after it. :)", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462638361", "createdAt": "2020-07-29T23:01:24Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Version.java", "diffHunk": "@@ -75,7 +75,7 @@\n @NamedQueries({\n         @NamedQuery(name = \"io.dockstore.webservice.core.Version.findVersionInEntry\", query = \"SELECT v FROM Version v WHERE :entryId = v.parent.id AND :versionId = v.id\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.database.VersionVerifiedPlatform.findEntryVersionsWithVerifiedPlatforms\",\n-                query = \"SELECT new io.dockstore.webservice.core.database.VersionVerifiedPlatform(version.id, KEY(verifiedbysource), verifiedbysource.metadata) FROM Version version \"\n+                query = \"SELECT new io.dockstore.webservice.core.database.VersionVerifiedPlatform(version.id, KEY(verifiedbysource), verifiedbysource.metadata, verifiedbysource.platformVersion, sourcefiles.path ,verifiedbysource.verified) FROM Version version \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93859c341e509d5307ba5e1fd920bce030de829"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODM5NzMxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowNzoyNVrOG5NUvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowNzoyNVrOG5NUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MDMxNw==", "bodyText": "checkUser will fail with an NPE if user is null, which user.get() can return.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462640317", "createdAt": "2020-07-29T23:07:25Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -145,11 +150,41 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n     public List<VersionVerifiedPlatform> getVerifiedPlatforms(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n             @Parameter(name = \"entryId\", description = \"id of the entry\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId) {\n         Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n-        checkOptionalAuthRead(user, entry);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n         List<VersionVerifiedPlatform> verifiedVersions = versionDAO.findEntryVersionsWithVerifiedPlatforms(entryId);\n         return verifiedVersions;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{entryId}/versions/{versionId}/fileTypes\")\n+    @ApiOperation(value = \"Retrieve the file types of a version's sourcefiles\",  hidden = true)\n+    @Operation(operationId = \"getVersionsFileTypes\", description = \"Retrieve the file types of a version's sourcefile\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<DescriptorLanguage.FileType> getVersionsFileTypes(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n+            @Parameter(name = \"entryId\", description = \"Entry to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId,\n+            @Parameter(name = \"versionId\", description = \"Version to retrieve the sourcefile types from\", required = true, in = ParameterIn.PATH) @PathParam(\"versionId\") Long versionId) {\n+        Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93859c341e509d5307ba5e1fd920bce030de829"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODM5OTMxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowODo0NlrOG5NWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowODo0NlrOG5NWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MDY0OQ==", "bodyText": "Suggest \"Retrieve the unique file types of a version's sourcefiles\"", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462640649", "createdAt": "2020-07-29T23:08:46Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -145,11 +150,41 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n     public List<VersionVerifiedPlatform> getVerifiedPlatforms(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n             @Parameter(name = \"entryId\", description = \"id of the entry\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId) {\n         Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n-        checkOptionalAuthRead(user, entry);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);\n+        }\n+\n         List<VersionVerifiedPlatform> verifiedVersions = versionDAO.findEntryVersionsWithVerifiedPlatforms(entryId);\n         return verifiedVersions;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{entryId}/versions/{versionId}/fileTypes\")\n+    @ApiOperation(value = \"Retrieve the file types of a version's sourcefiles\",  hidden = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93859c341e509d5307ba5e1fd920bce030de829"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQwMTYxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowOTo1NVrOG5NXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzowOTo1NVrOG5NXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MTAxMg==", "bodyText": "user.get() can return null", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462641012", "createdAt": "2020-07-29T23:09:55Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -145,11 +150,41 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n     public List<VersionVerifiedPlatform> getVerifiedPlatforms(@Parameter(hidden = true, name = \"user\")@Auth Optional<User> user,\n             @Parameter(name = \"entryId\", description = \"id of the entry\", required = true, in = ParameterIn.PATH) @PathParam(\"entryId\") Long entryId) {\n         Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n-        checkOptionalAuthRead(user, entry);\n+        checkEntry(entry);\n+\n+        if (!entry.getIsPublished()) {\n+            checkUser(user.get(), entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93859c341e509d5307ba5e1fd920bce030de829"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODU4ODA4OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo0MzozOFrOG5PDxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo0MzozOFrOG5PDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2ODc0Mw==", "bodyText": "I believe you should return a 404 in this case. If you go to a private GitHub repo that you don't have permissions to, you get a 404, not an unauthorized error.\nThe logic behind this is that you don't even want to indicate that it exists to an evil-doer. If they know it exists, that's the first step. Then they could then start trying to break into it.\nI'll let others opine on this.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r462668743", "createdAt": "2020-07-30T00:43:38Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java", "diffHunk": "@@ -185,6 +181,15 @@ public Entry addAliases(@ApiParam(hidden = true) @Parameter(hidden = true, name\n         return sourceFiles.stream().map(sourceFile -> sourceFile.getType()).collect(Collectors.toCollection(TreeSet::new));\n     }\n \n+    public void checkEntryPermissions(final Optional<User> user, final Entry<? extends Entry, ? extends Version> entry) {\n+        if (!entry.getIsPublished()) {\n+            if (user.isEmpty()) {\n+                throw new CustomWebApplicationException(\"This entry is not published.\", HttpStatus.SC_UNAUTHORIZED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e2a2bea04cacabf9224c464de66e82d0123e01"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDk5Njc5OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/BasicIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNDoyNVrOG5l2Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNDoyNVrOG5l2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MjA5OA==", "bodyText": "I think the other pattern (where we put the assertFail() right after this line) is cleaner since there's less code and no extra boolean.", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r463042098", "createdAt": "2020-07-30T14:34:25Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/BasicIT.java", "diffHunk": "@@ -1492,6 +1491,25 @@ public void testGettingSourceFilesForTag() {\n         if (!throwsError) {\n             Assert.fail(\"Should not be able to grab sourcefile for a version not belonging to a tool\");\n         }\n+\n+        // check that sourcefiles can't be viewed by another user if they aren't published\n+        throwsError = false;\n+        final io.dockstore.openapi.client.ApiClient user2OpenAPIWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.ContainertagsApi user2toolTagsApi = new io.dockstore.openapi.client.api.ContainertagsApi(user2OpenAPIWebClient);\n+        try {\n+            sourceFiles = user2toolTagsApi.getTagsSourcefiles(tool.getId(), tag.getId(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e2a2bea04cacabf9224c464de66e82d0123e01"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTAwNjcyOnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/BasicIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNjoxNFrOG5l77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNjoxNFrOG5l77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MzU2Ng==", "bodyText": "Assertion to check that the exception error message is what's expected", "url": "https://github.com/dockstore/dockstore/pull/3699#discussion_r463043566", "createdAt": "2020-07-30T14:36:14Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/BasicIT.java", "diffHunk": "@@ -1492,6 +1491,25 @@ public void testGettingSourceFilesForTag() {\n         if (!throwsError) {\n             Assert.fail(\"Should not be able to grab sourcefile for a version not belonging to a tool\");\n         }\n+\n+        // check that sourcefiles can't be viewed by another user if they aren't published\n+        throwsError = false;\n+        final io.dockstore.openapi.client.ApiClient user2OpenAPIWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.ContainertagsApi user2toolTagsApi = new io.dockstore.openapi.client.api.ContainertagsApi(user2OpenAPIWebClient);\n+        try {\n+            sourceFiles = user2toolTagsApi.getTagsSourcefiles(tool.getId(), tag.getId(), null);\n+        } catch (io.dockstore.openapi.client.ApiException e) {\n+            throwsError = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e2a2bea04cacabf9224c464de66e82d0123e01"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2793, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}