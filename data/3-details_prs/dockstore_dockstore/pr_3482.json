{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzY5MDk3", "number": 3482, "title": "Sourcefiles endpoint", "bodyText": "Somewhat related to #3455\nNew endpoint that will grab a version's sourcefiles and can filter by sourcefile type if requested", "createdAt": "2020-05-19T21:14:17Z", "url": "https://github.com/dockstore/dockstore/pull/3482", "merged": true, "mergeCommit": {"oid": "2df76fe89c4677466fb826201d6d86e178d1b9e3"}, "closed": true, "closedAt": "2020-05-28T19:23:28Z", "author": {"login": "NatalieEO"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci7buDgFqTQxNDg0MDEzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclyBeugFqTQyMDM3MjY4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODQwMTM1", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-414840135", "createdAt": "2020-05-19T21:34:11Z", "commit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTozNDoxMVrOGXzdsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTozNDoxMVrOGXzdsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxMzYxNw==", "bodyText": "From a user point of view, this seems unnecessary.  If they know the versionId, entryType should be irrelevant.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427613617", "createdAt": "2020-05-19T21:34:11Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {\n+    private static final Logger LOG = LoggerFactory.getLogger(SourceFileResource.class);\n+\n+    private final SessionFactory sessionFactory;\n+    private final TagDAO tagDAO;\n+    private final WorkflowVersionDAO workflowVersionDAO;\n+\n+\n+    public SourceFileResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.tagDAO = new TagDAO(sessionFactory);\n+        this.workflowVersionDAO = new WorkflowVersionDAO(sessionFactory);\n+\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{versionId}/sourcefiles\")\n+    @ApiOperation(value = \"Retrieve sourcefiles for an entry version\", authorizations = {\n+            @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, responseContainer = \"Set\", response = SourceFile.class)\n+    public SortedSet<SourceFile> getSourceFiles(@ApiParam(hidden = true) @Auth User user,\n+        @ApiParam(value = \"Version to retrieve sourcefiles for\", required = true) @PathParam(\"versionId\") Long versionId,\n+        @ApiParam(value = \"Type of entry\", required = true) @QueryParam(\"entryType\") String entryType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODQwNTM5", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-414840539", "createdAt": "2020-05-19T21:34:53Z", "commit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTozNDo1M1rOGXze7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0NzowNVrOGXz0tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxMzkzNA==", "bodyText": "There's a constant for \"bearer\" somewhere", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427613934", "createdAt": "2020-05-19T21:34:53Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNDE4Ng==", "bodyText": "I think this should be the versions resource instead", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427614186", "createdAt": "2020-05-19T21:35:25Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNTU1MA==", "bodyText": "This should probably just be a list of DescriptorLanguage.FileType enums", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427615550", "createdAt": "2020-05-19T21:38:14Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {\n+    private static final Logger LOG = LoggerFactory.getLogger(SourceFileResource.class);\n+\n+    private final SessionFactory sessionFactory;\n+    private final TagDAO tagDAO;\n+    private final WorkflowVersionDAO workflowVersionDAO;\n+\n+\n+    public SourceFileResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.tagDAO = new TagDAO(sessionFactory);\n+        this.workflowVersionDAO = new WorkflowVersionDAO(sessionFactory);\n+\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{versionId}/sourcefiles\")\n+    @ApiOperation(value = \"Retrieve sourcefiles for an entry version\", authorizations = {\n+            @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, responseContainer = \"Set\", response = SourceFile.class)\n+    public SortedSet<SourceFile> getSourceFiles(@ApiParam(hidden = true) @Auth User user,\n+        @ApiParam(value = \"Version to retrieve sourcefiles for\", required = true) @PathParam(\"versionId\") Long versionId,\n+        @ApiParam(value = \"Type of entry\", required = true) @QueryParam(\"entryType\") String entryType,\n+        @ApiParam(value = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<String> fileTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNzYwMw==", "bodyText": "something something verison.getSourceFiles(); instead of a separate line for tag and workflowVersion", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427617603", "createdAt": "2020-05-19T21:42:51Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {\n+    private static final Logger LOG = LoggerFactory.getLogger(SourceFileResource.class);\n+\n+    private final SessionFactory sessionFactory;\n+    private final TagDAO tagDAO;\n+    private final WorkflowVersionDAO workflowVersionDAO;\n+\n+\n+    public SourceFileResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.tagDAO = new TagDAO(sessionFactory);\n+        this.workflowVersionDAO = new WorkflowVersionDAO(sessionFactory);\n+\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{versionId}/sourcefiles\")\n+    @ApiOperation(value = \"Retrieve sourcefiles for an entry version\", authorizations = {\n+            @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, responseContainer = \"Set\", response = SourceFile.class)\n+    public SortedSet<SourceFile> getSourceFiles(@ApiParam(hidden = true) @Auth User user,\n+        @ApiParam(value = \"Version to retrieve sourcefiles for\", required = true) @PathParam(\"versionId\") Long versionId,\n+        @ApiParam(value = \"Type of entry\", required = true) @QueryParam(\"entryType\") String entryType,\n+        @ApiParam(value = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<String> fileTypes) {\n+\n+        if (entryType != null) {\n+            SortedSet<SourceFile> sourceFiles = new TreeSet<>();\n+            if (\"tool\".equals(entryType)) {\n+                Tag tag = tagDAO.findById(versionId);\n+                sourceFiles = tag.getSourceFiles();\n+            } else if (\"workflow\".equals(entryType)) {\n+                WorkflowVersion workflowVersion = workflowVersionDAO.findById(versionId);\n+                sourceFiles = workflowVersion.getSourceFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkxNw==", "bodyText": "The \"if\" statement can be collapsed", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427618917", "createdAt": "2020-05-19T21:45:49Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {\n+    private static final Logger LOG = LoggerFactory.getLogger(SourceFileResource.class);\n+\n+    private final SessionFactory sessionFactory;\n+    private final TagDAO tagDAO;\n+    private final WorkflowVersionDAO workflowVersionDAO;\n+\n+\n+    public SourceFileResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.tagDAO = new TagDAO(sessionFactory);\n+        this.workflowVersionDAO = new WorkflowVersionDAO(sessionFactory);\n+\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{versionId}/sourcefiles\")\n+    @ApiOperation(value = \"Retrieve sourcefiles for an entry version\", authorizations = {\n+            @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, responseContainer = \"Set\", response = SourceFile.class)\n+    public SortedSet<SourceFile> getSourceFiles(@ApiParam(hidden = true) @Auth User user,\n+        @ApiParam(value = \"Version to retrieve sourcefiles for\", required = true) @PathParam(\"versionId\") Long versionId,\n+        @ApiParam(value = \"Type of entry\", required = true) @QueryParam(\"entryType\") String entryType,\n+        @ApiParam(value = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<String> fileTypes) {\n+\n+        if (entryType != null) {\n+            SortedSet<SourceFile> sourceFiles = new TreeSet<>();\n+            if (\"tool\".equals(entryType)) {\n+                Tag tag = tagDAO.findById(versionId);\n+                sourceFiles = tag.getSourceFiles();\n+            } else if (\"workflow\".equals(entryType)) {\n+                WorkflowVersion workflowVersion = workflowVersionDAO.findById(versionId);\n+                sourceFiles = workflowVersion.getSourceFiles();\n+            } else {\n+                throw new CustomWebApplicationException(\"Entry type: \" + entryType + \" is unsupported.\", HttpStatus.SC_BAD_REQUEST);\n+            }\n+            if (fileTypes != null && !fileTypes.isEmpty()) {\n+                sourceFiles = sourceFiles.stream().filter(sourceFile -> {\n+                    if (fileTypes.contains(sourceFile.getType().toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxOTUxMA==", "bodyText": "This should use OpenAPI annotations instead.  I believe there's testing utilities for openapi client so you don't have to worry about that part.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427619510", "createdAt": "2020-05-19T21:47:05Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {\n+    private static final Logger LOG = LoggerFactory.getLogger(SourceFileResource.class);\n+\n+    private final SessionFactory sessionFactory;\n+    private final TagDAO tagDAO;\n+    private final WorkflowVersionDAO workflowVersionDAO;\n+\n+\n+    public SourceFileResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.tagDAO = new TagDAO(sessionFactory);\n+        this.workflowVersionDAO = new WorkflowVersionDAO(sessionFactory);\n+\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{versionId}/sourcefiles\")\n+    @ApiOperation(value = \"Retrieve sourcefiles for an entry version\", authorizations = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODc2MDYz", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-414876063", "createdAt": "2020-05-19T22:47:56Z", "commit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo0Nzo1NlrOGX1RWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1NDoxMFrOGX1ZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MzIyNg==", "bodyText": "I think this should be hierarchical.\n/workflows/<workflowid>/versions/<versionid>/sourcefiles\n\nAnd the corresponding one for tags.\n\nThe hierarchy is a common RESTful pattern\nYour way relies on ids of workflow versions and tags always being unique, which they are now, but who knows, some day that won't be.\n\nSee if anybody else agrees with me first though.\nIf you do it that way, then you should probably add the endpoints to WorkflowResource and DockerRepoTagResource.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427643226", "createdAt": "2020-05-19T22:47:56Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NTMxMg==", "bodyText": "Collapsed in two ways... You don't need the curly braces, and you can just return contains(...", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r427645312", "createdAt": "2020-05-19T22:54:10Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/SourceFileResource.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Tag;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.jdbi.TagDAO;\n+import io.dockstore.webservice.jdbi.WorkflowVersionDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.Authorization;\n+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\n+import io.swagger.v3.oas.annotations.security.SecurityScheme;\n+import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.Constants.JWT_SECURITY_DEFINITION_NAME;\n+\n+@Path(\"/versions\")\n+@Api(\"versions\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@SecuritySchemes({ @SecurityScheme (type = SecuritySchemeType.HTTP, name = \"bearer\", scheme = \"bearer\")})\n+@io.swagger.v3.oas.annotations.tags.Tag(name = \"sourceFile\", description = ResourceConstants.SOURCEFILE)\n+public class SourceFileResource {\n+    private static final Logger LOG = LoggerFactory.getLogger(SourceFileResource.class);\n+\n+    private final SessionFactory sessionFactory;\n+    private final TagDAO tagDAO;\n+    private final WorkflowVersionDAO workflowVersionDAO;\n+\n+\n+    public SourceFileResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.tagDAO = new TagDAO(sessionFactory);\n+        this.workflowVersionDAO = new WorkflowVersionDAO(sessionFactory);\n+\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{versionId}/sourcefiles\")\n+    @ApiOperation(value = \"Retrieve sourcefiles for an entry version\", authorizations = {\n+            @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, responseContainer = \"Set\", response = SourceFile.class)\n+    public SortedSet<SourceFile> getSourceFiles(@ApiParam(hidden = true) @Auth User user,\n+        @ApiParam(value = \"Version to retrieve sourcefiles for\", required = true) @PathParam(\"versionId\") Long versionId,\n+        @ApiParam(value = \"Type of entry\", required = true) @QueryParam(\"entryType\") String entryType,\n+        @ApiParam(value = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<String> fileTypes) {\n+\n+        if (entryType != null) {\n+            SortedSet<SourceFile> sourceFiles = new TreeSet<>();\n+            if (\"tool\".equals(entryType)) {\n+                Tag tag = tagDAO.findById(versionId);\n+                sourceFiles = tag.getSourceFiles();\n+            } else if (\"workflow\".equals(entryType)) {\n+                WorkflowVersion workflowVersion = workflowVersionDAO.findById(versionId);\n+                sourceFiles = workflowVersion.getSourceFiles();\n+            } else {\n+                throw new CustomWebApplicationException(\"Entry type: \" + entryType + \" is unsupported.\", HttpStatus.SC_BAD_REQUEST);\n+            }\n+            if (fileTypes != null && !fileTypes.isEmpty()) {\n+                sourceFiles = sourceFiles.stream().filter(sourceFile -> {\n+                    if (fileTypes.contains(sourceFile.getType().toString())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkxNw=="}, "originalCommit": {"oid": "b541f6c48fa2b35574db700d0dbffebec27cbe98"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDMzMDUw", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-415433050", "createdAt": "2020-05-20T15:04:33Z", "commit": {"oid": "38b714af462d22d26dd7f8db773143c2dfbec25a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowNDozM1rOGYQWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowNzo0OVrOGYQgRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4Njg5OA==", "bodyText": "Looks like a category, but why is there a category being created?", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428086898", "createdAt": "2020-05-20T15:04:33Z", "author": {"login": "denis-yuen"}, "path": "dockstore-common/src/main/java/io/dockstore/common/SourceFileTest.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.dockstore.common;\n+\n+/**\n+ * Contains tests specific to sourcefiles\n+ * @author NatalieEO\n+ */\n+public class SourceFileTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b714af462d22d26dd7f8db773143c2dfbec25a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4OTQxMw==", "bodyText": "Why is this changing?", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428089413", "createdAt": "2020-05-20T15:07:49Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "diffHunk": "@@ -1553,7 +1553,7 @@ components:\n       type: object\n   securitySchemes:\n     bearer:\n-      scheme: bearer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b714af462d22d26dd7f8db773143c2dfbec25a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Nzc2OTM2", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-415776936", "createdAt": "2020-05-20T23:13:59Z", "commit": {"oid": "246e4597f793114981495e36a3fce93f9c2ca156"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzoxMzo1OVrOGYg-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzoyMDoyNlrOGYhGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1OTM4NA==", "bodyText": "You should ideally call TagDAO.findById() instead. That way you will fetch only one version from the DB and not the 600+ versions some repos have.\nThe problem is that you'll also need to validate that tagId belongs to containerId, otherwise you could end up fetching a tag for a different container. If you fetch all of the parent's versions to verify, then you're back to square one.\n\nYou make Version.entry field public, so you can do the check.\nYou write a new query that fetches a version given a containerId and tagId as params.\n\nThe second option would execute the fastest, but would be a little more work.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428359384", "createdAt": "2020-05-20T23:13:59Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoTagResource.java", "diffHunk": "@@ -246,4 +258,31 @@ private Tool findToolByIdAndCheckToolAndUser(Long toolId, User user) {\n         checkUser(user, tool);\n         return tool;\n     }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{containerId}/tags/{tagId}/sourcefiles\")\n+    @Operation(operationId = \"getTagsSourcefiles\", description = \"Retrieve sourcefiles for a container's version\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<SourceFile> getTagsSourceFiles(@ApiParam(hidden = true) @Auth Optional<User> user,\n+            @Parameter(name = \"containerId\", description = \"Container to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"containerId\") Long containerId,\n+            @Parameter(name = \"tagId\", description = \"Tag to retrieve the sourcefiles from\", required = true, in = ParameterIn.PATH) @PathParam(\"tagId\") Long tagId,\n+            @Parameter(name = \"fileTypes\", description = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<DescriptorLanguage.FileType> fileTypes) {\n+        Tool tool = toolDAO.findById(containerId);\n+        checkEntry(tool);\n+        checkOptionalAuthRead(user, tool);\n+\n+        Set<Tag> tags = tool.getWorkflowVersions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e4597f793114981495e36a3fce93f9c2ca156"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2MTMxOA==", "bodyText": "Same comment as for tags", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428361318", "createdAt": "2020-05-20T23:20:26Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1485,6 +1487,31 @@ public String getTableToolContent(@ApiParam(hidden = true) @Auth Optional<User>\n         return null;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles\")\n+    @Operation(operationId = \"getWorkflowVersionsSourcefiles\", description = \"Retrieve sourcefiles for an entry's version\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<SourceFile> getWorkflowVersionsSourceFiles(@ApiParam(hidden = true) @Auth Optional<User> user,\n+            @Parameter(name = \"workflowId\", description = \"Workflow to retrieve the version from.\", required = true, in = ParameterIn.PATH) @PathParam(\"workflowId\") Long workflowId,\n+            @Parameter(name = \"workflowVersionId\", description = \"Workflow version to retrieve the version from.\", required = true, in = ParameterIn.PATH) @PathParam(\"workflowVersionId\") Long workflowVersionId,\n+            @Parameter(name = \"fileTypes\", description = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<DescriptorLanguage.FileType> fileTypes) {\n+        Workflow workflow = workflowDAO.findById(workflowId);\n+        checkEntry(workflow);\n+        checkOptionalAuthRead(user, workflow);\n+\n+        WorkflowVersion workflowVersion = getWorkflowVersion(workflow, workflowVersionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e4597f793114981495e36a3fce93f9c2ca156"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTY2ODg0", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-416166884", "createdAt": "2020-05-21T13:57:41Z", "commit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1Nzo0MlrOGYzzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1OTo1NFrOGYz5gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Nzg0MQ==", "bodyText": "Not necessary to create a new named query and function.  Just make versionDAO constructor public and use versionDAO get by id.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428667841", "createdAt": "2020-05-21T13:57:42Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoTagResource.java", "diffHunk": "@@ -246,4 +259,30 @@ private Tool findToolByIdAndCheckToolAndUser(Long toolId, User user) {\n         checkUser(user, tool);\n         return tool;\n     }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{containerId}/tags/{tagId}/sourcefiles\")\n+    @Operation(operationId = \"getTagsSourcefiles\", description = \"Retrieve sourcefiles for a container's version\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<SourceFile> getTagsSourceFiles(@ApiParam(hidden = true) @Auth Optional<User> user,\n+            @Parameter(name = \"containerId\", description = \"Container to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"containerId\") Long containerId,\n+            @Parameter(name = \"tagId\", description = \"Tag to retrieve the sourcefiles from\", required = true, in = ParameterIn.PATH) @PathParam(\"tagId\") Long tagId,\n+            @Parameter(name = \"fileTypes\", description = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<DescriptorLanguage.FileType> fileTypes) {\n+        Tool tool = toolDAO.findById(containerId);\n+        checkEntry(tool);\n+        checkOptionalAuthRead(user, tool);\n+\n+        Version version = tagDAO.findVersionInEntry(containerId, tagId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2OTMxMg==", "bodyText": "Two endpoints is fine, but this line and every line below it should just be the same implementation as the other one, just use a function", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428669312", "createdAt": "2020-05-21T13:59:54Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1485,6 +1487,32 @@ public String getTableToolContent(@ApiParam(hidden = true) @Auth Optional<User>\n         return null;\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles\")\n+    @Operation(operationId = \"getWorkflowVersionsSourcefiles\", description = \"Retrieve sourcefiles for an entry's version\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<SourceFile> getWorkflowVersionsSourceFiles(@ApiParam(hidden = true) @Auth Optional<User> user,\n+            @Parameter(name = \"workflowId\", description = \"Workflow to retrieve the version from.\", required = true, in = ParameterIn.PATH) @PathParam(\"workflowId\") Long workflowId,\n+            @Parameter(name = \"workflowVersionId\", description = \"Workflow version to retrieve the version from.\", required = true, in = ParameterIn.PATH) @PathParam(\"workflowVersionId\") Long workflowVersionId,\n+            @Parameter(name = \"fileTypes\", description = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<DescriptorLanguage.FileType> fileTypes) {\n+        Workflow workflow = workflowDAO.findById(workflowId);\n+        checkEntry(workflow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTk1NDA0", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-416195404", "createdAt": "2020-05-21T14:31:43Z", "commit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDozMTo0M1rOGY1Fsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDozNDo0NlrOGY1Mnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4ODgxOA==", "bodyText": "It probably doesn't hurt, but both tagids and entryids are unique, so it seems like the parentid check is redundant.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428688818", "createdAt": "2020-05-21T14:31:43Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Version.java", "diffHunk": "@@ -67,6 +69,11 @@\n @Entity\n @ApiModel(value = \"Version\", description = \"Base class for versions of entries in the Dockstore\")\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+\n+@NamedQueries({\n+        @NamedQuery(name = \"Version.findVersionInEntry\", query = \"SELECT v FROM Version v WHERE :entryId = v.parent.id AND :versionId = v.id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MDU5MQ==", "bodyText": "Probably don't even need to change visibility since TagDAO is a VersionDAO.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428690591", "createdAt": "2020-05-21T14:34:46Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoTagResource.java", "diffHunk": "@@ -246,4 +259,30 @@ private Tool findToolByIdAndCheckToolAndUser(Long toolId, User user) {\n         checkUser(user, tool);\n         return tool;\n     }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{containerId}/tags/{tagId}/sourcefiles\")\n+    @Operation(operationId = \"getTagsSourcefiles\", description = \"Retrieve sourcefiles for a container's version\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<SourceFile> getTagsSourceFiles(@ApiParam(hidden = true) @Auth Optional<User> user,\n+            @Parameter(name = \"containerId\", description = \"Container to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"containerId\") Long containerId,\n+            @Parameter(name = \"tagId\", description = \"Tag to retrieve the sourcefiles from\", required = true, in = ParameterIn.PATH) @PathParam(\"tagId\") Long tagId,\n+            @Parameter(name = \"fileTypes\", description = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<DescriptorLanguage.FileType> fileTypes) {\n+        Tool tool = toolDAO.findById(containerId);\n+        checkEntry(tool);\n+        checkOptionalAuthRead(user, tool);\n+\n+        Version version = tagDAO.findVersionInEntry(containerId, tagId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Nzg0MQ=="}, "originalCommit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzM4MDc3", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-416338077", "createdAt": "2020-05-21T17:16:20Z", "commit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoxNjoyMFrOGY7kZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoxODozOFrOGY7pQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NDk4MA==", "bodyText": "I only thought of this after you responded to my last comment, but you could just query the source files from the database directly. Any time we are filtering Hibernate objects, it's an indicator of a potential area where you could have the DB do the work for you.\nIs the common use case in the UI expected to be invoking going to be using the filetypes parameter, and if so, what type? Will it just be the .dockstore.yml? If that is a common case, it's a slightly stronger argument to fetch from the DB; if a workflow has n descriptor files and one .dockstore.yml, just fetch the .dockstore.yml from the DB.\nThis is probably way overkill, and we risk having too many one-offs, so I'm leaning towards not doing it, but throwing it out for consideration.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428794980", "createdAt": "2020-05-21T17:16:20Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoTagResource.java", "diffHunk": "@@ -246,4 +259,30 @@ private Tool findToolByIdAndCheckToolAndUser(Long toolId, User user) {\n         checkUser(user, tool);\n         return tool;\n     }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"{containerId}/tags/{tagId}/sourcefiles\")\n+    @Operation(operationId = \"getTagsSourcefiles\", description = \"Retrieve sourcefiles for a container's version\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public SortedSet<SourceFile> getTagsSourceFiles(@ApiParam(hidden = true) @Auth Optional<User> user,\n+            @Parameter(name = \"containerId\", description = \"Container to retrieve the version from\", required = true, in = ParameterIn.PATH) @PathParam(\"containerId\") Long containerId,\n+            @Parameter(name = \"tagId\", description = \"Tag to retrieve the sourcefiles from\", required = true, in = ParameterIn.PATH) @PathParam(\"tagId\") Long tagId,\n+            @Parameter(name = \"fileTypes\", description = \"List of file types to filter sourcefiles by\") @QueryParam(\"fileType\") List<DescriptorLanguage.FileType> fileTypes) {\n+        Tool tool = toolDAO.findById(containerId);\n+        checkEntry(tool);\n+        checkOptionalAuthRead(user, tool);\n+\n+        Version version = tagDAO.findVersionInEntry(containerId, tagId);\n+        if (version == null) {\n+            throw new CustomWebApplicationException(\"Container tag \" + tagId + \" does not exist for this tool\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        SortedSet<SourceFile> sourceFiles = version.getSourceFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NjIyNQ==", "bodyText": "The typical pattern for naming named queries is to use the package name, although we're not always consistent in it (io.dockstore.webservice.core.Version.findVersionInEntry).", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r428796225", "createdAt": "2020-05-21T17:18:38Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Version.java", "diffHunk": "@@ -67,6 +69,11 @@\n @Entity\n @ApiModel(value = \"Version\", description = \"Base class for versions of entries in the Dockstore\")\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+\n+@NamedQueries({\n+        @NamedQuery(name = \"Version.findVersionInEntry\", query = \"SELECT v FROM Version v WHERE :entryId = v.parent.id AND :versionId = v.id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9b442ce3ef1af29a4a37ccf9d781a5df3f258f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTA4MDMx", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-416908031", "createdAt": "2020-05-22T13:26:45Z", "commit": {"oid": "fc2220cd7c42abc150e7152b577bde2cc929b5c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyNjo0NVrOGZXAQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzozNzoxOVrOGZXWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NDQ4MQ==", "bodyText": "These two tests should be using the OpenAPI client. Instead of io.swagger.client.ApiClient.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r429244481", "createdAt": "2020-05-22T13:26:45Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/BasicIT.java", "diffHunk": "@@ -1401,4 +1403,57 @@ public void testBrokenPath() {\n             Assert.assertEquals(\"Entry not found\", e.getMessage());\n         }\n     }\n+\n+    @Test\n+    public void testGettingSourceFilesForTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2220cd7c42abc150e7152b577bde2cc929b5c2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTI0NA==", "bodyText": "Remove mention of \"workflow\" from this (because of tools and services)", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r429245244", "createdAt": "2020-05-22T13:28:12Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/EntryVersionHelper.java", "diffHunk": "@@ -388,6 +391,20 @@ default void checkNotFrozen(Version version) {\n         }\n     }\n \n+    default SortedSet<SourceFile> getVersionsSourcefiles(Long entryId, Long versionId, List<DescriptorLanguage.FileType> fileTypes, VersionDAO versionDAO) {\n+        Version version = versionDAO.findVersionInEntry(entryId, versionId);\n+        if (version == null) {\n+            throw new CustomWebApplicationException(\"Workflow version\" + versionId + \" does not exist for this workflow\", HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2220cd7c42abc150e7152b577bde2cc929b5c2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NjExNg==", "bodyText": "User needs to be set to hidden in OpenAPI for it to not show up here.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r429246116", "createdAt": "2020-05-22T13:29:53Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "diffHunk": "@@ -4349,6 +4411,68 @@ paths:\n       - bearer: []\n       tags:\n       - workflows\n+  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles:\n+    get:\n+      description: Retrieve sourcefiles for an entry's version\n+      operationId: getWorkflowVersionsSourcefiles\n+      parameters:\n+      - description: Workflow to retrieve the version from.\n+        in: path\n+        name: workflowId\n+        required: true\n+        schema:\n+          format: int64\n+          type: integer\n+      - description: Workflow version to retrieve the version from.\n+        in: path\n+        name: workflowVersionId\n+        required: true\n+        schema:\n+          format: int64\n+          type: integer\n+      - description: List of file types to filter sourcefiles by\n+        in: query\n+        name: fileTypes\n+        schema:\n+          items:\n+            enum:\n+            - DOCKSTORE_CWL\n+            - DOCKSTORE_WDL\n+            - DOCKERFILE\n+            - CWL_TEST_JSON\n+            - WDL_TEST_JSON\n+            - NEXTFLOW\n+            - NEXTFLOW_CONFIG\n+            - NEXTFLOW_TEST_PARAMS\n+            - DOCKSTORE_YML\n+            - DOCKSTORE_SERVICE_YML\n+            - DOCKSTORE_SERVICE_TEST_JSON\n+            - DOCKSTORE_SERVICE_OTHER\n+            - DOCKSTORE_GXFORMAT2\n+            - GXFORMAT2_TEST_FILE\n+            - DOCKSTORE_SWL\n+            - SWL_TEST_JSON\n+            type: string\n+          type: array\n+      requestBody:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2220cd7c42abc150e7152b577bde2cc929b5c2"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MDE5Ng==", "bodyText": "Should probably put a comment mentioning that this namedQuery is to double check that the user didn't put a workflowId they have access to with a workflowVersionId (from a different hidden workflow) they don't have access to.\nMy first thought when looking at this was that the versionId isn't unique and needs the parentId.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r429250196", "createdAt": "2020-05-22T13:37:19Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Version.java", "diffHunk": "@@ -67,6 +69,11 @@\n @Entity\n @ApiModel(value = \"Version\", description = \"Base class for versions of entries in the Dockstore\")\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Version.findVersionInEntry\", query = \"SELECT v FROM Version v WHERE :entryId = v.parent.id AND :versionId = v.id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2220cd7c42abc150e7152b577bde2cc929b5c2"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9dbee83d29952d8a80db12e6d76df05c87d3a71", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/b9dbee83d29952d8a80db12e6d76df05c87d3a71", "committedDate": "2020-05-27T00:09:37Z", "message": "Sourcefiles endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d7fc0833c2a6672f0eb13d008def376f534e234", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/7d7fc0833c2a6672f0eb13d008def376f534e234", "committedDate": "2020-05-27T00:09:37Z", "message": "some PR changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc68b9b7b05ed7677d399f66f17603de13d9c609", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/bc68b9b7b05ed7677d399f66f17603de13d9c609", "committedDate": "2020-05-27T00:09:37Z", "message": "split to two endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fb4560e06e413171652edb8a255eecee2a7ce6", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/c0fb4560e06e413171652edb8a255eecee2a7ce6", "committedDate": "2020-05-27T00:09:37Z", "message": "forgot to delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "548b03c795d2ea18b0738dc328ad1caad8a8a853", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/548b03c795d2ea18b0738dc328ad1caad8a8a853", "committedDate": "2020-05-27T00:09:37Z", "message": "retrieve one version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52534b225b5a877035935ef8676424ca4cc4e356", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/52534b225b5a877035935ef8676424ca4cc4e356", "committedDate": "2020-05-27T00:09:37Z", "message": "create function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f469bdf129421baad34fcd539316e53a51820025", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/f469bdf129421baad34fcd539316e53a51820025", "committedDate": "2020-05-27T00:09:37Z", "message": "Change tests to use openapi"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc2220cd7c42abc150e7152b577bde2cc929b5c2", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/fc2220cd7c42abc150e7152b577bde2cc929b5c2", "committedDate": "2020-05-21T20:38:15Z", "message": "Merge branch 'develop' into feature/sourceFilesEndpoint"}, "afterCommit": {"oid": "f469bdf129421baad34fcd539316e53a51820025", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/f469bdf129421baad34fcd539316e53a51820025", "committedDate": "2020-05-27T00:09:37Z", "message": "Change tests to use openapi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjQ3MTEx", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-419247111", "createdAt": "2020-05-27T14:09:18Z", "commit": {"oid": "f469bdf129421baad34fcd539316e53a51820025"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowOToxOFrOGbL-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowOToxOFrOGbL-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2MTAxNQ==", "bodyText": "This kind of bothers me.  Try putting @ApiIgnore or ApiOperation(hidden = true), for the method and see if it gets rid of this in swagger completely.", "url": "https://github.com/dockstore/dockstore/pull/3482#discussion_r431161015", "createdAt": "2020-05-27T14:09:18Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/swagger.yaml", "diffHunk": "@@ -7033,6 +7145,20 @@ definitions:\n         format: \"date-time\"\n         position: 6\n         description: \"Timestamp at which the notification was last updated\"\n+  Optional:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f469bdf129421baad34fcd539316e53a51820025"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjU1ODIy", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-419255822", "createdAt": "2020-05-27T14:17:48Z", "commit": {"oid": "f469bdf129421baad34fcd539316e53a51820025"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a6d195534c9713389c7153ae635bbcae1b96515", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/1a6d195534c9713389c7153ae635bbcae1b96515", "committedDate": "2020-05-27T16:14:03Z", "message": "remove from swagger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzcyNjg0", "url": "https://github.com/dockstore/dockstore/pull/3482#pullrequestreview-420372684", "createdAt": "2020-05-28T18:18:09Z", "commit": {"oid": "1a6d195534c9713389c7153ae635bbcae1b96515"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1894, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}