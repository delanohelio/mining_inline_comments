{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDQxODA3", "number": 3302, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoxMFrODlircQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDoyNDo1M1rODlol4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkyMDgxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoxMFrOFyfuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MzoxMFrOFyfuqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Mjk3MA==", "bodyText": "whoops, will fix", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388492970", "createdAt": "2020-03-05T18:53:10Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAyMTU0OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMDoyMlrOFygszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDoyMTo0NlrOFyiuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ==", "bodyText": "Optional nitpick -- would call s instead of c.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388508879", "createdAt": "2020-03-05T19:20:22Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzk3Nw==", "bodyText": "the c pattern is in all named queries for tools and workflows too so I just carried it over, not sure why its c though? Container?\nSeems like we don't have things set up test named queries directly, the tests for postgres can only query in SQL. Denis suggested a an integration test and the existing test already calls the endpoint and checks the path generated. I could make a test using the generated sql, but that seemed a bit indirect. Open to other ideas.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388527977", "createdAt": "2020-03-05T19:55:02Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNDI0NA==", "bodyText": "The short name is a stand-in for the longer name, so I like it to reflect the table (or I guess in this case entity) name. I did say optional, and I don't feel too strongly about it.\nIf the existing integration tests validate the endpoint, I think that's fine; just wanted to make sure.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388534244", "createdAt": "2020-03-05T20:07:18Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTI2MA==", "bodyText": "The c is back from when we called tools containers, we should try to replace it when we can.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388539260", "createdAt": "2020-03-05T20:17:00Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MjE0Mg==", "bodyText": "Yup", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388542142", "createdAt": "2020-03-05T20:21:46Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAyMjM1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMDozMFrOFygtRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMDozMFrOFygtRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODk5Nw==", "bodyText": "t instead of c", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388508997", "createdAt": "2020-03-05T19:20:30Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java", "diffHunk": "@@ -80,7 +80,14 @@\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname AND c.isPublished = true\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\") })\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteTool(c.registry, c.namespace, c.name, c.toolname, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Tool c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAyOTQ5OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMjoxNlrOFygxfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1Njo1MFrOFyh7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDA3OQ==", "bodyText": "Has this changed, other than combining two lines into one? In any case, should have each NamedQuery on its own line.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388510079", "createdAt": "2020-03-05T19:22:16Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTAyMA==", "bodyText": "its a leftover from when I tried ways that would grab all entry types through in one query", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388529020", "createdAt": "2020-03-05T19:56:50Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDA3OQ=="}, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAzNzI3OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNDoyNlrOFyg2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNDoyNlrOFyg2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMTI3NQ==", "bodyText": "It looks like the only place you call this, you're passing getEntryPath() as a parameter. Since getEntryPath() is already a class method, I would get rid of the parameter and just have makePrettyPath use getEntryPath", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388511275", "createdAt": "2020-03-05T19:24:26Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.dockstore.webservice.core.database;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.dockstore.common.EntryType;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.core.BioWorkflow;\n+import io.dockstore.webservice.core.Service;\n+import io.dockstore.webservice.core.Tool;\n+\n+/**\n+ * This class describes lightweight entry objects that are used for making type-safe named queries\n+ * @author ldcabansay\n+ * @since 1.9.0\n+ */\n+public abstract class EntryLite {\n+    private final Date lastUpdated;\n+\n+    EntryLite(Date entryUpdated, Date versionUpdated) {\n+        //choose the greater update time between overall entry and most recently updated version\n+        this.lastUpdated = versionUpdated == null ? entryUpdated : (entryUpdated.getTime() > versionUpdated.getTime() ? entryUpdated : versionUpdated);\n+    }\n+\n+    public Date getLastUpdated() {\n+        return lastUpdated;\n+    }\n+\n+    public abstract String getEntryPath();\n+\n+    public abstract EntryType getEntryType();\n+\n+    public String makePrettyPath(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA1MzYwOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyOTowMlrOFyhAXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyOTowMlrOFyhAXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzg4NA==", "bodyText": "It seems so fast right now that it doesn't matter, but ideally you would pass count as a parameter, at least when the filter is null.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388513884", "createdAt": "2020-03-05T19:29:02Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -660,34 +665,24 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n     public List<EntryUpdateTime> getUserEntries(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n                                                 @Parameter(name = \"count\", description = \"Maximum number of entries to return\", in = ParameterIn.QUERY) @QueryParam(\"count\") Integer count,\n                                                 @Parameter(name = \"filter\", description = \"Filter paths with matching text\", in = ParameterIn.QUERY) @QueryParam(\"filter\") String filter) {\n-        final List<EntryUpdateTime> entryUpdateTimes = new ArrayList<>();\n-        final User fetchedUser = this.userDAO.findById(authUser.getId());\n-\n-        Set<Entry> entries = fetchedUser.getEntries();\n-        entries.forEach(entry -> {\n-            Timestamp timestamp = entry.getDbUpdateDate();\n-            Set<Version> versions = entry.getWorkflowVersions();\n-            Optional<Version> mostRecentTag = versions.stream().max(Comparator.comparing(Version::getDbUpdateDate));\n-            if (mostRecentTag.isPresent() && timestamp.before(mostRecentTag.get().getDbUpdateDate())) {\n-                timestamp = mostRecentTag.get().getDbUpdateDate();\n-            }\n-            List<String> pathElements = Arrays.asList(entry.getEntryPath().split(\"/\"));\n-            String prettyPath = String.join(\"/\", pathElements.subList(2, pathElements.size()));\n-            entryUpdateTimes.add(new EntryUpdateTime(entry.getEntryPath(), prettyPath, entry.getEntryType(), timestamp));\n-        });\n-\n-        // Sort all entryUpdateTimes by timestamp\n-        List<EntryUpdateTime> sortedEntries = entryUpdateTimes\n-                .stream()\n+        //get entries with only minimal columns from database\n+        final List<EntryLite> entriesLite = new ArrayList<>();\n+        final long userId = authUser.getId();\n+        entriesLite.addAll(toolDAO.findEntryVersions(userId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA3MzM0OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNToyOFrOFyhM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNToyOFrOFyhM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzA5NQ==", "bodyText": "It was like this, but I think you can just limit on the stream:\n...\n.limit(count != null ? count : Integer.MAX_VALUE)\n.collect(...\n\nOptionally have a default value for count, which I think makes sense, and then you don't even have to do the null check.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388517095", "createdAt": "2020-03-05T19:35:28Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -660,34 +665,24 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n     public List<EntryUpdateTime> getUserEntries(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n                                                 @Parameter(name = \"count\", description = \"Maximum number of entries to return\", in = ParameterIn.QUERY) @QueryParam(\"count\") Integer count,\n                                                 @Parameter(name = \"filter\", description = \"Filter paths with matching text\", in = ParameterIn.QUERY) @QueryParam(\"filter\") String filter) {\n-        final List<EntryUpdateTime> entryUpdateTimes = new ArrayList<>();\n-        final User fetchedUser = this.userDAO.findById(authUser.getId());\n-\n-        Set<Entry> entries = fetchedUser.getEntries();\n-        entries.forEach(entry -> {\n-            Timestamp timestamp = entry.getDbUpdateDate();\n-            Set<Version> versions = entry.getWorkflowVersions();\n-            Optional<Version> mostRecentTag = versions.stream().max(Comparator.comparing(Version::getDbUpdateDate));\n-            if (mostRecentTag.isPresent() && timestamp.before(mostRecentTag.get().getDbUpdateDate())) {\n-                timestamp = mostRecentTag.get().getDbUpdateDate();\n-            }\n-            List<String> pathElements = Arrays.asList(entry.getEntryPath().split(\"/\"));\n-            String prettyPath = String.join(\"/\", pathElements.subList(2, pathElements.size()));\n-            entryUpdateTimes.add(new EntryUpdateTime(entry.getEntryPath(), prettyPath, entry.getEntryType(), timestamp));\n-        });\n-\n-        // Sort all entryUpdateTimes by timestamp\n-        List<EntryUpdateTime> sortedEntries = entryUpdateTimes\n-                .stream()\n+        //get entries with only minimal columns from database\n+        final List<EntryLite> entriesLite = new ArrayList<>();\n+        final long userId = authUser.getId();\n+        entriesLite.addAll(toolDAO.findEntryVersions(userId));\n+        entriesLite.addAll(bioWorkflowDAO.findEntryVersions(userId));\n+        entriesLite.addAll(serviceDAO.findEntryVersions(userId));\n+\n+        //cleanup fields for UI, filter, and sort\n+        List<EntryUpdateTime> filteredEntries = entriesLite\n+                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.makePrettyPath(e.getEntryPath()), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n                 .filter((EntryUpdateTime entryUpdateTime) -> filter == null || filter.isBlank() || entryUpdateTime.getPath().toLowerCase().contains(filter.toLowerCase()))\n                 .sorted(Comparator.comparing(EntryUpdateTime::getLastUpdateDate, Comparator.nullsLast(Comparator.reverseOrder())))\n                 .collect(Collectors.toList());\n \n-        // Grab subset if necessary\n         if (count != null) {\n-            return sortedEntries.subList(0, Math.min(count, sortedEntries.size()));\n+            return filteredEntries.subList(0, Math.min(count, filteredEntries.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA4MDI3OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNzozMFrOFyhRKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTozNzozMFrOFyhRKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxODE4Nw==", "bodyText": "w instead of c", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388518187", "createdAt": "2020-03-05T19:37:30Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java", "diffHunk": "@@ -37,7 +37,11 @@\n @Table(name = \"workflow\")\n @NamedQueries({\n         @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from BioWorkflow c where c.isPublished = true\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteWorkflow(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Workflow c LEFT JOIN c.workflowVersions v \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzg4OTYzOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDoyNDo1M1rOFyo0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowOTo0OFrOFzAiRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MTgzMQ==", "bodyText": "Is the only difference here that you put the }) on a new line? I think so, but want to make sure.", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388641831", "createdAt": "2020-03-06T00:24:53Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -81,7 +81,8 @@\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMDQ2OA==", "bodyText": "yes", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r389030468", "createdAt": "2020-03-06T17:09:48Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -81,7 +81,8 @@\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MTgzMQ=="}, "originalCommit": {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3039, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}