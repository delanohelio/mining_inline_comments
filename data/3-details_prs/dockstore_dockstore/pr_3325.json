{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDQwOTc3", "number": 3325, "title": "Feature/3051/register tool wizard", "bodyText": "For #3051\nAdded several endpoints to get Docker registries, namespace, and repository.\nSmall DB optimization for refresh.", "createdAt": "2020-03-16T18:59:55Z", "url": "https://github.com/dockstore/dockstore/pull/3325", "merged": true, "mergeCommit": {"oid": "6312e2167d820ec81bfe49e7256b1c092f848bd1"}, "closed": true, "closedAt": "2020-03-24T21:56:20Z", "author": {"login": "garyluu"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOq2t4AFqTM3NjQ2MDIwNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ3JamAFqTM4MDU4NDA3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDYwMjA1", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-376460205", "createdAt": "2020-03-17T22:55:30Z", "commit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjo1NTozMFrOF3w6GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjo1NTo0OFrOF3w6gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxNzMwNA==", "bodyText": "You'll want to use getDockerPath() instead now. toString() will give QUAY_IO after my changes.", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394017304", "createdAt": "2020-03-17T22:55:30Z", "author": {"login": "NatalieEO"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/QuayImageRegistry.java", "diffHunk": "@@ -203,6 +216,29 @@ private void insertQuayLastModifiedIntoLastBuilt(QuayTag quayTag, Tag tag) {\n         return toolList;\n     }\n \n+    public Tool getToolFromNamespaceAndRepo(String namespace, String repository) {\n+        try {\n+            String name = namespace + \"/\" + repository;\n+            QuayRepo repo = repositoryApi.getRepo(name, true);\n+\n+            Tool tool = new Tool();\n+            // interesting, this relies upon our container object having the same fields\n+            // as quay.io's repositories\n+\n+            // PLEASE NOTE : is_public is from quay.  It has NO connection to our is_published!\n+            tool.setName(repo.getName());\n+            tool.setNamespace(repo.getNamespace());\n+            // tag all of these with where they came from\n+            tool.setRegistry(Registry.QUAY_IO.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxNzQxMQ==", "bodyText": "Here too", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394017411", "createdAt": "2020-03-17T22:55:48Z", "author": {"login": "NatalieEO"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -158,37 +159,70 @@\n         // Get all the tools based on the found namespaces\n         List<Tool> apiTools = getToolsFromNamespace(namespaces);\n \n+        String registryString = getRegistry().getDockerPath();\n+\n         // Add manual tools to list of api tools\n         User user = userDAO.findById(userId);\n-        List<Tool> manualTools = toolDAO.findByMode(ToolMode.MANUAL_IMAGE_PATH);\n+        List<Tool> manualTools = toolDAO.findByModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        List<Tool> notManualTools = toolDAO.findByNotModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        apiTools.addAll(manualTools);\n+\n+        // Update api tools with build information\n+        updateAPIToolsWithBuildInformation(apiTools);\n+\n+        // Update db tools by copying over from api tools\n+        List<Tool> newDBTools = updateTools(apiTools, notManualTools, user, toolDAO);\n+\n+        // Get tags and update for each tool\n+        for (Tool tool : newDBTools) {\n+            logToolRefresh(dashboardPrefix, tool);\n \n-        // Get all tools in the db for the given registry\n-        List<Tool> dbTools = new ArrayList<>(getToolsFromUser(userId, userDAO, toolDAO));\n+            List<Tag> toolTags = getTags(tool);\n+            final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n+                .createSourceCodeRepo(tool.getGitUrl(), client, bitbucketToken == null ? null : bitbucketToken.getContent(),\n+                    gitlabToken == null ? null : gitlabToken.getContent(), githubToken.getContent());\n+            updateTags(toolTags, tool, sourceCodeRepo, tagDAO, fileDAO, toolDAO, fileFormatDAO, eventDAO, user);\n+        }\n \n-        // Filter DB tools and API tools to only include relevant tools\n-        manualTools.removeIf(test -> !test.getUsers().contains(user) || !test.getRegistry().equals(getRegistry().getDockerPath()));\n+        return newDBTools;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:ParameterNumber\")\n+    public List<Tool> refreshTool(final long userId, final UserDAO userDAO, final ToolDAO toolDAO, final TagDAO tagDAO,\n+            final FileDAO fileDAO, final FileFormatDAO fileFormatDAO, final HttpClient client, final Token githubToken, final Token bitbucketToken, final Token gitlabToken,\n+            String organization, final EventDAO eventDAO, final String dashboardPrefix, String repository) {\n+\n+        // Get all the tools based on the found namespaces\n+        List<Tool> apiTools;\n+        if (repository != null) {\n+            apiTools = new ArrayList<>(Collections.singletonList(getToolFromNamespaceAndRepo(organization, repository)));\n+        } else {\n+            throw new CustomWebApplicationException(\"Trying to refresh/register a tool without a repository name\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        // Add manual tools to list of api tools\n+        String registryString = getRegistry().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODI3NTY4", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-376827568", "createdAt": "2020-03-18T12:45:47Z", "commit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0NTo0N1rOF4DTEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNzowOVrOF4Ec5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxODYxMQ==", "bodyText": "Will this die if test user 1(?) gains additional docker registries down the road?\nProbably unlikely, but maybe this should use a contains or similar rather than a equals.", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394318611", "createdAt": "2020-03-18T12:45:47Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/UserResourceDockerRegistriesIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.ConfidentialTest;\n+import io.dockstore.openapi.client.ApiClient;\n+import io.dockstore.openapi.client.ApiException;\n+import io.dockstore.openapi.client.api.UsersApi;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.ExpectedSystemExit;\n+import org.junit.contrib.java.lang.system.SystemErrRule;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(ConfidentialTest.class)\n+public class UserResourceDockerRegistriesIT extends BaseIT {\n+    @Rule\n+    public final ExpectedSystemExit systemExit = ExpectedSystemExit.none();\n+\n+    @Rule\n+    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog().muteForSuccessfulTests();\n+\n+    @Rule\n+    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests();\n+\n+    @Before\n+    @Override\n+    public void resetDBBetweenTests() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate1(SUPPORT);\n+    }\n+    @Test\n+    public void getUserDockerRegistriesTest() {\n+        ApiClient client = getOpenAPIWebClient(USER_1_USERNAME, testingPostgres);\n+        UsersApi usersApi = new UsersApi(client);\n+        List<String> actualRegistries = usersApi.getUserDockerRegistries();\n+        List<String> expectedRegistries = Arrays.asList(\"quay.io\", \"gitlab.com\");\n+        Assert.assertEquals(\"Should have the expected Docker registries\", expectedRegistries, actualRegistries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNzIxNw==", "bodyText": "Ditto, will this break if we add repos at one point?", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394327217", "createdAt": "2020-03-18T13:00:24Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/UserResourceDockerRegistriesIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.ConfidentialTest;\n+import io.dockstore.openapi.client.ApiClient;\n+import io.dockstore.openapi.client.ApiException;\n+import io.dockstore.openapi.client.api.UsersApi;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.ExpectedSystemExit;\n+import org.junit.contrib.java.lang.system.SystemErrRule;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(ConfidentialTest.class)\n+public class UserResourceDockerRegistriesIT extends BaseIT {\n+    @Rule\n+    public final ExpectedSystemExit systemExit = ExpectedSystemExit.none();\n+\n+    @Rule\n+    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog().muteForSuccessfulTests();\n+\n+    @Rule\n+    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests();\n+\n+    @Before\n+    @Override\n+    public void resetDBBetweenTests() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate1(SUPPORT);\n+    }\n+    @Test\n+    public void getUserDockerRegistriesTest() {\n+        ApiClient client = getOpenAPIWebClient(USER_1_USERNAME, testingPostgres);\n+        UsersApi usersApi = new UsersApi(client);\n+        List<String> actualRegistries = usersApi.getUserDockerRegistries();\n+        List<String> expectedRegistries = Arrays.asList(\"quay.io\", \"gitlab.com\");\n+        Assert.assertEquals(\"Should have the expected Docker registries\", expectedRegistries, actualRegistries);\n+    }\n+\n+    @Test\n+    public void getDockerRegistryOrganizationTest() {\n+        ApiClient client = getOpenAPIWebClient(USER_1_USERNAME, testingPostgres);\n+        UsersApi usersApi = new UsersApi(client);\n+        List<String> actualNamespaces = usersApi.getDockerRegistriesOrganization(\"quay.io\");\n+        List<String> expectedNamespaces = Arrays.asList(\"dockstore\", \"dockstoretestuser\");\n+        Assert.assertEquals(\"Should have the expected namespaces\", expectedNamespaces, actualNamespaces);\n+        try {\n+            usersApi.getDockerRegistriesOrganization(\"fakeDockerRegistry\");\n+            Assert.fail(\"Should not be able to get organizations of an unrecognized Docker registry\");\n+        } catch (ApiException e) {\n+            Assert.assertEquals(\"Should tell user that their Docker registry is unrecognized\", \"Unrecognized Docker registry\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void getDockerRegistryOrganizationRepositoriesTest() {\n+        ApiClient client = getOpenAPIWebClient(USER_1_USERNAME, testingPostgres);\n+        UsersApi usersApi = new UsersApi(client);\n+        List<String> actualRepositories = usersApi.getDockerRegistryOrganizationRepositories(\"quay.io\", \"dockstoretestuser\");\n+        List<String> expectedRepositories = Arrays.asList(\"noautobuild\", \"nobuildsatall\", \"quayandbitbucket\", \"quayandbitbucketalternate\", \"quayandgithub\", \"quayandgithubalternate\", \"quayandgithubwdl\", \"quayandgitlab\", \"quayandgitlabalternate\", \"test_input_json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNzM5MQ==", "bodyText": "Date", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394337391", "createdAt": "2020-03-18T13:16:58Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResourceDockerRegistries.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *    Copyright 2017 OICR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNzUwOQ==", "bodyText": "Probably copied from somewhere", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394337509", "createdAt": "2020-03-18T13:17:09Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResourceDockerRegistries.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *    Copyright 2017 OICR\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ */\n+\n+package io.dockstore.webservice.resources;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.Token;\n+import io.dockstore.webservice.core.TokenType;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.helpers.AbstractImageRegistry;\n+import io.dockstore.webservice.helpers.ImageRegistryFactory;\n+import io.dockstore.webservice.helpers.QuayImageRegistry;\n+import io.dockstore.webservice.jdbi.TokenDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.dockstore.webservice.resources.ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME;\n+\n+/**\n+ * @author xliu", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDU5ODMy", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-376459832", "createdAt": "2020-03-17T22:54:31Z", "commit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjo1NDozMlrOF3w4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo0MjoxOVrOF4NtYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxNjk0NA==", "bodyText": "Why not LOG.error? Is this a normal situation?", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394016944", "createdAt": "2020-03-17T22:54:32Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/QuayImageRegistry.java", "diffHunk": "@@ -203,6 +216,29 @@ private void insertQuayLastModifiedIntoLastBuilt(QuayTag quayTag, Tag tag) {\n         return toolList;\n     }\n \n+    public Tool getToolFromNamespaceAndRepo(String namespace, String repository) {\n+        try {\n+            String name = namespace + \"/\" + repository;\n+            QuayRepo repo = repositoryApi.getRepo(name, true);\n+\n+            Tool tool = new Tool();\n+            // interesting, this relies upon our container object having the same fields\n+            // as quay.io's repositories\n+\n+            // PLEASE NOTE : is_public is from quay.  It has NO connection to our is_published!\n+            tool.setName(repo.getName());\n+            tool.setNamespace(repo.getNamespace());\n+            // tag all of these with where they came from\n+            tool.setRegistry(Registry.QUAY_IO.toString());\n+            // not quite correct, they could be mixed but how can we tell from quay?\n+            tool.setMode(ToolMode.AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS);\n+            return tool;\n+        } catch (ApiException ex) {\n+            LOG.warn(quayToken.getUsername() + \" Exception: {}\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c82b6da307307f6cadbf9aa993a4c5a2ea2da35"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4MzU2Nw==", "bodyText": "I wonder if it's quicker to just do one query instead of two, then separate the results by ToolMode? Filtering and sorting are a lot faster in the DB, but here, you end up fetching all tool modes anyway, i.e., not filtering on ToolMode.\nThat said, probably not worth worrying about, and maybe it is faster the current way.", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394483567", "createdAt": "2020-03-18T16:33:57Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -158,37 +159,70 @@\n         // Get all the tools based on the found namespaces\n         List<Tool> apiTools = getToolsFromNamespace(namespaces);\n \n+        String registryString = getRegistry().getDockerPath();\n+\n         // Add manual tools to list of api tools\n         User user = userDAO.findById(userId);\n-        List<Tool> manualTools = toolDAO.findByMode(ToolMode.MANUAL_IMAGE_PATH);\n+        List<Tool> manualTools = toolDAO.findByModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        List<Tool> notManualTools = toolDAO.findByNotModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a95b851f5264b998a607abde3e9123392d19e5b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NDgwNg==", "bodyText": "Can't githubToken be null? If someone logs in with Google? Not that we have any users like that, but maybe someday...", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394484806", "createdAt": "2020-03-18T16:35:47Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -158,37 +159,70 @@\n         // Get all the tools based on the found namespaces\n         List<Tool> apiTools = getToolsFromNamespace(namespaces);\n \n+        String registryString = getRegistry().getDockerPath();\n+\n         // Add manual tools to list of api tools\n         User user = userDAO.findById(userId);\n-        List<Tool> manualTools = toolDAO.findByMode(ToolMode.MANUAL_IMAGE_PATH);\n+        List<Tool> manualTools = toolDAO.findByModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        List<Tool> notManualTools = toolDAO.findByNotModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        apiTools.addAll(manualTools);\n+\n+        // Update api tools with build information\n+        updateAPIToolsWithBuildInformation(apiTools);\n+\n+        // Update db tools by copying over from api tools\n+        List<Tool> newDBTools = updateTools(apiTools, notManualTools, user, toolDAO);\n+\n+        // Get tags and update for each tool\n+        for (Tool tool : newDBTools) {\n+            logToolRefresh(dashboardPrefix, tool);\n \n-        // Get all tools in the db for the given registry\n-        List<Tool> dbTools = new ArrayList<>(getToolsFromUser(userId, userDAO, toolDAO));\n+            List<Tag> toolTags = getTags(tool);\n+            final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n+                .createSourceCodeRepo(tool.getGitUrl(), client, bitbucketToken == null ? null : bitbucketToken.getContent(),\n+                    gitlabToken == null ? null : gitlabToken.getContent(), githubToken.getContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a95b851f5264b998a607abde3e9123392d19e5b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NTU0MA==", "bodyText": "Same comment on githubToken", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394485540", "createdAt": "2020-03-18T16:36:56Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -158,37 +159,70 @@\n         // Get all the tools based on the found namespaces\n         List<Tool> apiTools = getToolsFromNamespace(namespaces);\n \n+        String registryString = getRegistry().getDockerPath();\n+\n         // Add manual tools to list of api tools\n         User user = userDAO.findById(userId);\n-        List<Tool> manualTools = toolDAO.findByMode(ToolMode.MANUAL_IMAGE_PATH);\n+        List<Tool> manualTools = toolDAO.findByModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        List<Tool> notManualTools = toolDAO.findByNotModeRegistryNamespace(ToolMode.MANUAL_IMAGE_PATH, registryString, organization);\n+        apiTools.addAll(manualTools);\n+\n+        // Update api tools with build information\n+        updateAPIToolsWithBuildInformation(apiTools);\n+\n+        // Update db tools by copying over from api tools\n+        List<Tool> newDBTools = updateTools(apiTools, notManualTools, user, toolDAO);\n+\n+        // Get tags and update for each tool\n+        for (Tool tool : newDBTools) {\n+            logToolRefresh(dashboardPrefix, tool);\n \n-        // Get all tools in the db for the given registry\n-        List<Tool> dbTools = new ArrayList<>(getToolsFromUser(userId, userDAO, toolDAO));\n+            List<Tag> toolTags = getTags(tool);\n+            final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n+                .createSourceCodeRepo(tool.getGitUrl(), client, bitbucketToken == null ? null : bitbucketToken.getContent(),\n+                    gitlabToken == null ? null : gitlabToken.getContent(), githubToken.getContent());\n+            updateTags(toolTags, tool, sourceCodeRepo, tagDAO, fileDAO, toolDAO, fileFormatDAO, eventDAO, user);\n+        }\n \n-        // Filter DB tools and API tools to only include relevant tools\n-        manualTools.removeIf(test -> !test.getUsers().contains(user) || !test.getRegistry().equals(getRegistry().getDockerPath()));\n+        return newDBTools;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:ParameterNumber\")\n+    public List<Tool> refreshTool(final long userId, final UserDAO userDAO, final ToolDAO toolDAO, final TagDAO tagDAO,\n+            final FileDAO fileDAO, final FileFormatDAO fileFormatDAO, final HttpClient client, final Token githubToken, final Token bitbucketToken, final Token gitlabToken,\n+            String organization, final EventDAO eventDAO, final String dashboardPrefix, String repository) {\n+\n+        // Get all the tools based on the found namespaces\n+        List<Tool> apiTools;\n+        if (repository != null) {\n+            apiTools = new ArrayList<>(Collections.singletonList(getToolFromNamespaceAndRepo(organization, repository)));\n+        } else {\n+            throw new CustomWebApplicationException(\"Trying to refresh/register a tool without a repository name\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+\n+        // Add manual tools to list of api tools\n+        String registryString = getRegistry().getDockerPath();\n+        \n+        User user = userDAO.findById(userId);\n+        List<Tool> manualTools = toolDAO.findByModeRegistryNamespaceRepository(ToolMode.MANUAL_IMAGE_PATH, registryString, organization, repository);\n+        List<Tool> notManualTools = toolDAO.findByNotModeRegistryNamespaceRepository(ToolMode.MANUAL_IMAGE_PATH, registryString, organization, repository);\n \n-        dbTools.removeIf(test -> !test.getRegistry().equals(getRegistry().getDockerPath()));\n         apiTools.addAll(manualTools);\n \n-        // Remove tools that can't be updated (Manual tools)\n-        dbTools.removeIf(tool1 -> tool1.getMode() == ToolMode.MANUAL_IMAGE_PATH);\n-        apiTools.removeIf(tool -> !namespaces.contains(tool.getNamespace()));\n-        dbTools.removeIf(tool -> !namespaces.contains(tool.getNamespace()));\n         // Update api tools with build information\n         updateAPIToolsWithBuildInformation(apiTools);\n \n         // Update db tools by copying over from api tools\n-        List<Tool> newDBTools = updateTools(apiTools, dbTools, user, toolDAO);\n+        List<Tool> newDBTools = updateTools(apiTools, notManualTools, user, toolDAO);\n \n         // Get tags and update for each tool\n         for (Tool tool : newDBTools) {\n             logToolRefresh(dashboardPrefix, tool);\n \n             List<Tag> toolTags = getTags(tool);\n             final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n-                .createSourceCodeRepo(tool.getGitUrl(), client, bitbucketToken == null ? null : bitbucketToken.getContent(),\n-                    gitlabToken == null ? null : gitlabToken.getContent(), githubToken.getContent());\n+                    .createSourceCodeRepo(tool.getGitUrl(), client, bitbucketToken == null ? null : bitbucketToken.getContent(),\n+                            gitlabToken == null ? null : gitlabToken.getContent(), githubToken.getContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a95b851f5264b998a607abde3e9123392d19e5b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzIzMw==", "bodyText": "It would be nice if this string were a constant. That way if we add support for DockerHub but not manual, we only have to update the string in one location", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394487233", "createdAt": "2020-03-18T16:39:28Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/ManualRegistry.java", "diffHunk": "@@ -61,4 +63,9 @@ public Registry getRegistry() {\n     public boolean canConvertToAuto(Tool tool) {\n         return false;\n     }\n+\n+    @Override\n+    public Tool getToolFromNamespaceAndRepo(final String organization, final String repository) {\n+        throw new CustomWebApplicationException(\"Unsupported operation, only Quay.io is supported for now\", HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a95b851f5264b998a607abde3e9123392d19e5b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4OTE4Ng==", "bodyText": "Why do you wrap it with an ArrayList and not just return registry.refreshTool(... directly?", "url": "https://github.com/dockstore/dockstore/pull/3325#discussion_r394489186", "createdAt": "2020-03-18T16:42:19Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java", "diffHunk": "@@ -184,12 +180,43 @@ public DockerRepoResource(final HttpClient client, final SessionFactory sessionF\n             LOG.info(\"Grabbing \" + registry.getFriendlyName() + \" repos\");\n \n             updatedTools.addAll(abstractImageRegistry\n-                .refreshTools(userId, userDAO, toolDAO, tagDAO, fileDAO, fileFormatDAO, client, githubToken, bitbucketToken, gitlabToken,\n-                    organization, eventDAO, dashboardPrefix));\n+                .refreshTools(userId, userDAO, toolDAO, tagDAO, fileDAO, fileFormatDAO, client, githubToken, bitbucketToken,\n+                    gitlabToken, organization, eventDAO, dashboardPrefix));\n         }\n         return updatedTools;\n     }\n \n+    List<Tool> refreshToolsForUser(Long userId, String organization, String repository) {\n+        refreshBitbucketToken(userId);\n+\n+        // Get user's quay and git tokens\n+        List<Token> tokens = tokenDAO.findByUserId(userId);\n+        Token quayToken = Token.extractToken(tokens, TokenType.QUAY_IO);\n+        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n+        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n+        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n+\n+        // with Docker Hub support it is now possible that there is no quayToken\n+        checkTokens(quayToken, githubToken, bitbucketToken, gitlabToken);\n+\n+        // Get a list of all namespaces from Quay.io only\n+        if (quayToken == null) {\n+            throw new CustomWebApplicationException(\"Missing required Quay.io token\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+        QuayImageRegistry registry = new QuayImageRegistry(quayToken);\n+        return new ArrayList<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a95b851f5264b998a607abde3e9123392d19e5b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjEyNDk5", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-378612499", "createdAt": "2020-03-20T16:01:57Z", "commit": {"oid": "e76db5650f8d8c93066c273f8f36e4cf09095b4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzY4OTky", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-378768992", "createdAt": "2020-03-20T19:47:24Z", "commit": {"oid": "e76db5650f8d8c93066c273f8f36e4cf09095b4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzcyNjcx", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-378772671", "createdAt": "2020-03-20T19:53:38Z", "commit": {"oid": "e76db5650f8d8c93066c273f8f36e4cf09095b4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51a2ed3f47a641792c64b5b16d543e2466919df7", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/51a2ed3f47a641792c64b5b16d543e2466919df7", "committedDate": "2020-03-24T18:14:04Z", "message": "Add new endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6520b50d6f113f8b14ff3993d101de7f323c5b26", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/6520b50d6f113f8b14ff3993d101de7f323c5b26", "committedDate": "2020-03-24T18:14:04Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe9f3eb0bab178031d3eb588a15d6a58d715501", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/bbe9f3eb0bab178031d3eb588a15d6a58d715501", "committedDate": "2020-03-24T18:14:04Z", "message": "Fix for getting Docker registries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0aa7c1be01304c6cf26075e4b6f5cce0402ae73", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/c0aa7c1be01304c6cf26075e4b6f5cce0402ae73", "committedDate": "2020-03-24T18:14:04Z", "message": "Add some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bab15eb75dad4da31e266326558776ecdaaefe5d", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/bab15eb75dad4da31e266326558776ecdaaefe5d", "committedDate": "2020-03-24T18:14:12Z", "message": "Throw exception for other registries that somehow make it through"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4abadfe42b7c62f6c6bab2555a01fe419d196a", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/8a4abadfe42b7c62f6c6bab2555a01fe419d196a", "committedDate": "2020-03-24T18:14:12Z", "message": "Change exception message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ba87a6216c5ddaeba7c0a73fbbdf946fdf58ab", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/08ba87a6216c5ddaeba7c0a73fbbdf946fdf58ab", "committedDate": "2020-03-24T18:14:12Z", "message": "Change to getDockerPath()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53aea73044c4348e79beaa37daadd5ed2b40031a", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/53aea73044c4348e79beaa37daadd5ed2b40031a", "committedDate": "2020-03-24T18:14:12Z", "message": "Fix comments, add sorting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b3a66847371384f679af0895b1ccddf7f213288", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/6b3a66847371384f679af0895b1ccddf7f213288", "committedDate": "2020-03-24T18:14:13Z", "message": "Less likely to break test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ad855a9f7430a51f45c3e396538064685eb0b5", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/61ad855a9f7430a51f45c3e396538064685eb0b5", "committedDate": "2020-03-24T18:14:13Z", "message": "PR changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2478c56487ee361302f621c310de59d1e3ac16e", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/e2478c56487ee361302f621c310de59d1e3ac16e", "committedDate": "2020-03-24T18:19:51Z", "message": "Update openapi/swagger"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e76db5650f8d8c93066c273f8f36e4cf09095b4e", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/e76db5650f8d8c93066c273f8f36e4cf09095b4e", "committedDate": "2020-03-20T15:52:07Z", "message": "PR changes"}, "afterCommit": {"oid": "e2478c56487ee361302f621c310de59d1e3ac16e", "author": {"user": {"login": "garyluu", "name": "Gary Luu"}}, "url": "https://github.com/dockstore/dockstore/commit/e2478c56487ee361302f621c310de59d1e3ac16e", "committedDate": "2020-03-24T18:19:51Z", "message": "Update openapi/swagger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTg0MDc3", "url": "https://github.com/dockstore/dockstore/pull/3325#pullrequestreview-380584077", "createdAt": "2020-03-24T18:23:56Z", "commit": {"oid": "e2478c56487ee361302f621c310de59d1e3ac16e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1831, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}