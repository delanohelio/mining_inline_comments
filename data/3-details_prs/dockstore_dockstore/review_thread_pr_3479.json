{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjY4OTcw", "number": 3479, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MTowNVrOD998nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTowMzo0M1rOEAuUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA0NjY5OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MTowNVrOGXyI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MTowNVrOGXyI-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MTkyOQ==", "bodyText": "FYI, defaults to eager", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427591929", "createdAt": "2020-05-19T20:51:05Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA1MDQ0OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MjoyMlrOGXyLlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToyNjo0NlrOGYeYWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjU5OA==", "bodyText": "A little wary of this in production code, why is this necessary and has this pattern been used before?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427592598", "createdAt": "2020-05-19T20:52:22Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -267,14 +271,21 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n      * - Delete version for corresponding service and workflow\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n      * @param gitReference Git reference from GitHub (ex. refs/tags/1.0)\n+     * @param username Git user who triggered the event\n+     * @param installationId GitHub App installation ID\n      * @return List of updated workflows\n      */\n-    protected List<Workflow> githubWebhookDelete(String repository, String gitReference) {\n+    protected List<Workflow> githubWebhookDelete(String repository, String gitReference, String username, String installationId) {\n         // Retrieve name from gitReference\n         Optional<String> gitReferenceName = GitHelper.parseGitHubReference(gitReference);\n         if (gitReferenceName.isEmpty()) {\n             String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n             LOG.error(msg);\n+            LambdaEvent lambdaEvent = createBasicEvent(repository, gitReference, username, installationId, LambdaEvent.LambdaEventType.DELETE);\n+            lambdaEvent.setMessage(msg);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMDA2MA==", "bodyText": "Since an error is being thrown, the transaction is rolled back, so the message would never be written. We have used this once before for Zenodo I believe.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427600060", "createdAt": "2020-05-19T21:06:32Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -267,14 +271,21 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n      * - Delete version for corresponding service and workflow\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n      * @param gitReference Git reference from GitHub (ex. refs/tags/1.0)\n+     * @param username Git user who triggered the event\n+     * @param installationId GitHub App installation ID\n      * @return List of updated workflows\n      */\n-    protected List<Workflow> githubWebhookDelete(String repository, String gitReference) {\n+    protected List<Workflow> githubWebhookDelete(String repository, String gitReference, String username, String installationId) {\n         // Retrieve name from gitReference\n         Optional<String> gitReferenceName = GitHelper.parseGitHubReference(gitReference);\n         if (gitReferenceName.isEmpty()) {\n             String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n             LOG.error(msg);\n+            LambdaEvent lambdaEvent = createBasicEvent(repository, gitReference, username, installationId, LambdaEvent.LambdaEventType.DELETE);\n+            lambdaEvent.setMessage(msg);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjU5OA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MTM4OQ==", "bodyText": "What if I clear the session before updating (sessionFactory.getCurrentSession().clear()). From what I understand this would mean that no unexpected things would be saved, only the lambda event.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428051389", "createdAt": "2020-05-20T14:19:47Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -267,14 +271,21 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n      * - Delete version for corresponding service and workflow\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n      * @param gitReference Git reference from GitHub (ex. refs/tags/1.0)\n+     * @param username Git user who triggered the event\n+     * @param installationId GitHub App installation ID\n      * @return List of updated workflows\n      */\n-    protected List<Workflow> githubWebhookDelete(String repository, String gitReference) {\n+    protected List<Workflow> githubWebhookDelete(String repository, String gitReference, String username, String installationId) {\n         // Retrieve name from gitReference\n         Optional<String> gitReferenceName = GitHelper.parseGitHubReference(gitReference);\n         if (gitReferenceName.isEmpty()) {\n             String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n             LOG.error(msg);\n+            LambdaEvent lambdaEvent = createBasicEvent(repository, gitReference, username, installationId, LambdaEvent.LambdaEventType.DELETE);\n+            lambdaEvent.setMessage(msg);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjU5OA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MjIzNw==", "bodyText": "The docs say that a clear\n\n... cancel all pending saves, updates and deletions.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428052237", "createdAt": "2020-05-20T14:20:46Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -267,14 +271,21 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n      * - Delete version for corresponding service and workflow\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n      * @param gitReference Git reference from GitHub (ex. refs/tags/1.0)\n+     * @param username Git user who triggered the event\n+     * @param installationId GitHub App installation ID\n      * @return List of updated workflows\n      */\n-    protected List<Workflow> githubWebhookDelete(String repository, String gitReference) {\n+    protected List<Workflow> githubWebhookDelete(String repository, String gitReference, String username, String installationId) {\n         // Retrieve name from gitReference\n         Optional<String> gitReferenceName = GitHelper.parseGitHubReference(gitReference);\n         if (gitReferenceName.isEmpty()) {\n             String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n             LOG.error(msg);\n+            LambdaEvent lambdaEvent = createBasicEvent(repository, gitReference, username, installationId, LambdaEvent.LambdaEventType.DELETE);\n+            lambdaEvent.setMessage(msg);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjU5OA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxNjc2MQ==", "bodyText": "That does sound a bit safer", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428316761", "createdAt": "2020-05-20T21:26:46Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -267,14 +271,21 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n      * - Delete version for corresponding service and workflow\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n      * @param gitReference Git reference from GitHub (ex. refs/tags/1.0)\n+     * @param username Git user who triggered the event\n+     * @param installationId GitHub App installation ID\n      * @return List of updated workflows\n      */\n-    protected List<Workflow> githubWebhookDelete(String repository, String gitReference) {\n+    protected List<Workflow> githubWebhookDelete(String repository, String gitReference, String username, String installationId) {\n         // Retrieve name from gitReference\n         Optional<String> gitReferenceName = GitHelper.parseGitHubReference(gitReference);\n         if (gitReferenceName.isEmpty()) {\n             String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n             LOG.error(msg);\n+            LambdaEvent lambdaEvent = createBasicEvent(repository, gitReference, username, installationId, LambdaEvent.LambdaEventType.DELETE);\n+            lambdaEvent.setMessage(msg);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjU5OA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA1MjE1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1Mjo0NFrOGXyMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1Mjo0NFrOGXyMhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjgzOA==", "bodyText": "Ditto", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427592838", "createdAt": "2020-05-19T20:52:44Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -317,19 +332,48 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n             workflows.addAll(createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYaml12.getWorkflows(), repository, gitReference,\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n+            lambdaEventDAO.create(lambdaEvent);\n             return workflows;\n         } catch (CustomWebApplicationException | ClassCastException | DockstoreYamlHelper.DockstoreYamlException ex) {\n-            // TODO: Eventually want to record something to the database so that the user can know the type of lambda errors run into\n             String msg = \"User \" + username + \": Error handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.info(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        } catch (NullPointerException ex) {\n+        } catch (Exception ex) {\n             String msg = \"User \" + username + \": Unhandled error while handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.error(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA2MTIxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1NToyM1rOGXySSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowNzo1NFrOGXyrKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDMxMg==", "bodyText": "Might have lost context, why is there a new endpoint for this as opposed to the existing  release endpoint.\nIs this only for reporting lambda installs?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427594312", "createdAt": "2020-05-19T20:55:23Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1935,14 +1936,41 @@ public void deleteWorkflow(@ApiParam(hidden = true) @Parameter(hidden = true, na\n     @ApiOperation(value = \"Handle a release of a repository on GitHub. Will create a workflow/service and version when necessary.\", authorizations = {\n         @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Workflow.class, responseContainer = \"List\")\n     public List<Workflow> handleGitHubRelease(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n-        @ApiParam(value = \"Repository path (ex. dockstore/dockstore-ui2)\", required = true) @FormParam(\"repository\") String repository,\n-        @ApiParam(value = \"Username of user on GitHub who triggered action\", required = true) @FormParam(\"username\") String username,\n-        @ApiParam(value = \"Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0\", required = true) @FormParam(\"gitReference\") String gitReference,\n-        @ApiParam(value = \"GitHub installation ID\", required = true) @FormParam(\"installationId\") String installationId) {\n+        @Parameter(name = \"Repository path (ex. dockstore/dockstore-ui2)\", required = true) @FormParam(\"repository\") String repository,\n+        @Parameter(name = \"Username of user on GitHub who triggered action\", required = true) @FormParam(\"username\") String username,\n+        @Parameter(name = \"Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0\", required = true) @FormParam(\"gitReference\") String gitReference,\n+        @Parameter(name = \"GitHub installation ID\", required = true) @FormParam(\"installationId\") String installationId) {\n         LOG.info(\"Branch/tag \" + gitReference + \" pushed to \" + repository + \"(\" + username + \")\");\n         return githubWebhookRelease(repository, username, gitReference, installationId);\n     }\n \n+    @POST\n+    @Path(\"/github/install\")\n+    @Timed\n+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n+    @UnitOfWork\n+    @RolesAllowed({ \"curator\", \"admin\" })\n+    @Operation(description = \"Handle the installation of our GitHub app onto a repository or organization.\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = @ApiResponse(responseCode = \"418\", description = \"This code tells AWS Lambda not to retry.\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMDY4Mg==", "bodyText": "Ya, this is purely for reporting lambda installs. Users could technically see on GitHub which repos they have the app installed on, but thought they might want to know dockstore knows too.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427600682", "createdAt": "2020-05-19T21:07:54Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1935,14 +1936,41 @@ public void deleteWorkflow(@ApiParam(hidden = true) @Parameter(hidden = true, na\n     @ApiOperation(value = \"Handle a release of a repository on GitHub. Will create a workflow/service and version when necessary.\", authorizations = {\n         @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Workflow.class, responseContainer = \"List\")\n     public List<Workflow> handleGitHubRelease(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n-        @ApiParam(value = \"Repository path (ex. dockstore/dockstore-ui2)\", required = true) @FormParam(\"repository\") String repository,\n-        @ApiParam(value = \"Username of user on GitHub who triggered action\", required = true) @FormParam(\"username\") String username,\n-        @ApiParam(value = \"Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0\", required = true) @FormParam(\"gitReference\") String gitReference,\n-        @ApiParam(value = \"GitHub installation ID\", required = true) @FormParam(\"installationId\") String installationId) {\n+        @Parameter(name = \"Repository path (ex. dockstore/dockstore-ui2)\", required = true) @FormParam(\"repository\") String repository,\n+        @Parameter(name = \"Username of user on GitHub who triggered action\", required = true) @FormParam(\"username\") String username,\n+        @Parameter(name = \"Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0\", required = true) @FormParam(\"gitReference\") String gitReference,\n+        @Parameter(name = \"GitHub installation ID\", required = true) @FormParam(\"installationId\") String installationId) {\n         LOG.info(\"Branch/tag \" + gitReference + \" pushed to \" + repository + \"(\" + username + \")\");\n         return githubWebhookRelease(repository, username, gitReference, installationId);\n     }\n \n+    @POST\n+    @Path(\"/github/install\")\n+    @Timed\n+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n+    @UnitOfWork\n+    @RolesAllowed({ \"curator\", \"admin\" })\n+    @Operation(description = \"Handle the installation of our GitHub app onto a repository or organization.\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = @ApiResponse(responseCode = \"418\", description = \"This code tells AWS Lambda not to retry.\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDMxMg=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA2MzY4OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1NjowOFrOGXyT4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTozMDo0N1rOGYeffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDcyMw==", "bodyText": "I realise this is just a draft, but this will quickly need pagination or something to cut things down. Plus sorting", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427594723", "createdAt": "2020-05-19T20:56:08Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +766,17 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/github/events\")\n+    @Operation(operationId = \"getUserGitHubEvents\", description = \"Get all of the GitHub Events for the logged in user.\", security = @SecurityRequirement(name = \"bearer\"))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getUserGitHubEvents(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser) {\n+        final User user = userDAO.findById(authUser.getId());\n+        return lambdaEventDAO.findByUser(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NjEzOA==", "bodyText": "Do you know of a good endpoint that has pagination?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428096138", "createdAt": "2020-05-20T15:16:44Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +766,17 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/github/events\")\n+    @Operation(operationId = \"getUserGitHubEvents\", description = \"Get all of the GitHub Events for the logged in user.\", security = @SecurityRequirement(name = \"bearer\"))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getUserGitHubEvents(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser) {\n+        final User user = userDAO.findById(authUser.getId());\n+        return lambdaEventDAO.findByUser(user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDcyMw=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxODU5MQ==", "bodyText": "Offset and limit control pagination in DB here\nhttps://github.com/dockstore/dockstore/blob/develop/dockstore-webservice/src/main/java/io/dockstore/webservice/jdbi/EntryDAO.java#L176\nLooks like its used by the old tools and workflows pages that paginate", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428318591", "createdAt": "2020-05-20T21:30:47Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +766,17 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/github/events\")\n+    @Operation(operationId = \"getUserGitHubEvents\", description = \"Get all of the GitHub Events for the logged in user.\", security = @SecurityRequirement(name = \"bearer\"))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getUserGitHubEvents(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser) {\n+        final User user = userDAO.findById(authUser.getId());\n+        return lambdaEventDAO.findByUser(user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDcyMw=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzMyODUyOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoxNTowMlrOGYcPDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDo1Mjo0NVrOGcLccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA==", "bodyText": "If we surface this event to multiple users, then this would need to be an array/list of userids.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428281614", "createdAt": "2020-05-20T20:15:02Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzQxMA==", "bodyText": "Based on a discussion with Denis, this will only track the user who triggered the event. For other users to be able to see the events, we will use an endpoint which if a user has access, will show all events for a GitHub organisation. This way we don't need to keep track of all the users.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428897410", "createdAt": "2020-05-21T20:31:18Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2Mzk2Mg==", "bodyText": "When other users see events, will they be able to dismiss them? Will you record it? Or are you saying the other endpoint will handle that?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431363962", "createdAt": "2020-05-27T18:43:47Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2Njk3NA==", "bodyText": "Following on, if all users in the org can see the event, it seems that we won't be able to track it with one boolean (I'm ok with not tracking this)", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431366974", "createdAt": "2020-05-27T18:49:26Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMDgxNg==", "bodyText": "Depending on how intrusive the UI will be, I think its fair not to dismiss the event or track which users have seen it. The error should disappear when a new change is pushed (and hopefully fixed). We don't track or dismiss the validation error messages on the files tab for example.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432200816", "createdAt": "2020-05-29T00:52:45Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzM2NjE4OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyNzoyM1rOGYcnEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyNzoyM1rOGYcnEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4Nzc2Mg==", "bodyText": "I'm a big fan of methods returning Optional if null could be returned, but if you have a method that already returns a null, I think it's more complicated to create an Optional just to see if it's empty -- I would either just directly do a null check here, or change UserDAO.findByGitHubUsername to return an Optional. We don't have the DAOs returning Optionals, so I would lean towards the former.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428287762", "createdAt": "2020-05-20T20:27:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -317,19 +332,48 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n             workflows.addAll(createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYaml12.getWorkflows(), repository, gitReference,\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n+            lambdaEventDAO.create(lambdaEvent);\n             return workflows;\n         } catch (CustomWebApplicationException | ClassCastException | DockstoreYamlHelper.DockstoreYamlException ex) {\n-            // TODO: Eventually want to record something to the database so that the user can know the type of lambda errors run into\n             String msg = \"User \" + username + \": Error handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.info(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        } catch (NullPointerException ex) {\n+        } catch (Exception ex) {\n             String msg = \"User \" + username + \": Unhandled error while handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.error(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n     }\n \n+    /**\n+     * Create a basic lambda event\n+     * @param repository repository path\n+     * @param gitReference full git reference (ex. refs/heads/master)\n+     * @param username Username of GitHub user who triggered the event\n+     * @param installationId The GitHub App Installation ID\n+     * @param type Event type\n+     * @return New lambda event\n+     */\n+    private LambdaEvent createBasicEvent(String repository, String gitReference, String username, String installationId, LambdaEvent.LambdaEventType type) {\n+        LambdaEvent lambdaEvent = new LambdaEvent();\n+        lambdaEvent.setRepository(repository);\n+        lambdaEvent.setReference(gitReference);\n+        lambdaEvent.setUsername(username);\n+        lambdaEvent.setType(type);\n+        lambdaEvent.setInstallationId(installationId);\n+        Optional<User> user = Optional.ofNullable(userDAO.findByGitHubUsername(username));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzcwNzY4OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyNToyN1rOGYf9GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyNToyN1rOGYf9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MjU1Mw==", "bodyText": "I think the name of this should be something like gitHubUsername. I at first started to put comments about it thinking it was the Dockstore username, until I read you annotations.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428342553", "createdAt": "2020-05-20T22:25:27Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzcxMzUxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyNzoyOVrOGYgAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMzozN1rOGZWmkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MzQzOA==", "bodyText": "Isn't this semi-secret? Probably not, but just double-checking.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428343438", "createdAt": "2020-05-20T22:27:29Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The installation ID of the event.\", position = 9)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwMDI2Nw==", "bodyText": "Not entirely sure, will investigate.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428800267", "createdAt": "2020-05-21T17:25:54Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The installation ID of the event.\", position = 9)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MzQzOA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNzkwNQ==", "bodyText": "After investigating I am not entirely sure, though I think it is ok just to remove it since it is not a requirement. We don't do anything with it, so I am just going to remove it.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r429237905", "createdAt": "2020-05-22T13:13:37Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The installation ID of the event.\", position = 9)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MzQzOA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzcxODIwOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyOToyM1rOGYgDag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozNTo1N1rOGZB9KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0NDE3MA==", "bodyText": "Should this be lazy?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428344170", "createdAt": "2020-05-20T22:29:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5OTYyNA==", "bodyText": "Yes, it is now, just forgot to push changes.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428899624", "createdAt": "2020-05-21T20:35:57Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0NDE3MA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njc0OTY1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0MToxMVrOGbYRzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowMDoyOFrOGbc9KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjUwOQ==", "bodyText": "This may be overkill, but I wonder if this should be GitHubLambdaEvent? In case we ever add the GitHub apps equivalent for BitBucket and/ GitLab, or we ever add Lambdas for some other feature that I can't envision right now?\nOTOH, you could rename it if/when we get there.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431362509", "createdAt": "2020-05-27T18:41:11Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByOrganization\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository like :organization\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.githubUsername = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzOTE0NQ==", "bodyText": "I think I am ok just renaming later if the need ever comes up.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431439145", "createdAt": "2020-05-27T21:00:28Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByOrganization\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository like :organization\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.githubUsername = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjUwOQ=="}, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njc4NDgxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1MTo0M1rOGbYoZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1MTo0M1rOGbYoZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2ODI5NQ==", "bodyText": "Should be 401 status code, not 400.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431368295", "createdAt": "2020-05-27T18:51:43Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.LambdaEvent;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.Workflow;\n+import io.dockstore.webservice.jdbi.LambdaEventDAO;\n+import io.dockstore.webservice.jdbi.WorkflowDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT_TEXT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_OFFSET_TEXT;\n+\n+@Path(\"/lambdaEvents\")\n+@Api(\"/lambdaEvents\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Tag(name = \"lambdaEvents\", description = ResourceConstants.LAMBDAEVENTS)\n+public class LambdaEventResource {\n+    private final LambdaEventDAO lambdaEventDAO;\n+    private final WorkflowDAO workflowDAO;\n+    private SessionFactory sessionFactory;\n+\n+    public LambdaEventResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.lambdaEventDAO = new LambdaEventDAO(sessionFactory);\n+        this.workflowDAO = new WorkflowDAO(sessionFactory);\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{organization}\")\n+    @Operation(operationId = \"getLambdaEventsByOrganization\", description = \"Get all of the Lambda Events for the given GitHub organization.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getLambdaEventsByOrganization(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n+            @ApiParam(value = \"organization\", required = true) @PathParam(\"organization\") String organization,\n+            @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n+            @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n+        // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n+        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());\n+        boolean canAccessOrganization = workflows.stream().anyMatch(workflow -> Objects.equals(workflow.getOrganization(), organization) && Objects.equals(workflow.getSourceControl(),\n+                SourceControl.GITHUB));\n+        if (!canAccessOrganization) {\n+            throw new CustomWebApplicationException(\"You do not have access to the GitHub organization '\" + organization + \"'\", HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjgxMzE0OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1OTo1MVrOGbY6sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowMTo1MlrOGbc_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3Mjk3Nw==", "bodyText": "There is a workflowDAO.findPublishedByOrganization; you could tweak a findByOrganzation copy of it. Or you could go even further and create a named query that returns a count/boolean, e.g., hasWorkflowInOrganization.\nThis could be overkill, especially the second suggestion, given the upcoming changes for lazy sourcefiles and whatnot, but for certain users this will cause workflows with 600+ versions to be fetched just to see if you belong to an org.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431372977", "createdAt": "2020-05-27T18:59:51Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.LambdaEvent;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.Workflow;\n+import io.dockstore.webservice.jdbi.LambdaEventDAO;\n+import io.dockstore.webservice.jdbi.WorkflowDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT_TEXT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_OFFSET_TEXT;\n+\n+@Path(\"/lambdaEvents\")\n+@Api(\"/lambdaEvents\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Tag(name = \"lambdaEvents\", description = ResourceConstants.LAMBDAEVENTS)\n+public class LambdaEventResource {\n+    private final LambdaEventDAO lambdaEventDAO;\n+    private final WorkflowDAO workflowDAO;\n+    private SessionFactory sessionFactory;\n+\n+    public LambdaEventResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.lambdaEventDAO = new LambdaEventDAO(sessionFactory);\n+        this.workflowDAO = new WorkflowDAO(sessionFactory);\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{organization}\")\n+    @Operation(operationId = \"getLambdaEventsByOrganization\", description = \"Get all of the Lambda Events for the given GitHub organization.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getLambdaEventsByOrganization(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n+            @ApiParam(value = \"organization\", required = true) @PathParam(\"organization\") String organization,\n+            @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n+            @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n+        // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n+        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzOTg2Ng==", "bodyText": "I like this idea, I'll try one of the approaches.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431439866", "createdAt": "2020-05-27T21:01:52Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.LambdaEvent;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.Workflow;\n+import io.dockstore.webservice.jdbi.LambdaEventDAO;\n+import io.dockstore.webservice.jdbi.WorkflowDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT_TEXT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_OFFSET_TEXT;\n+\n+@Path(\"/lambdaEvents\")\n+@Api(\"/lambdaEvents\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Tag(name = \"lambdaEvents\", description = ResourceConstants.LAMBDAEVENTS)\n+public class LambdaEventResource {\n+    private final LambdaEventDAO lambdaEventDAO;\n+    private final WorkflowDAO workflowDAO;\n+    private SessionFactory sessionFactory;\n+\n+    public LambdaEventResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.lambdaEventDAO = new LambdaEventDAO(sessionFactory);\n+        this.workflowDAO = new WorkflowDAO(sessionFactory);\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{organization}\")\n+    @Operation(operationId = \"getLambdaEventsByOrganization\", description = \"Get all of the Lambda Events for the given GitHub organization.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getLambdaEventsByOrganization(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n+            @ApiParam(value = \"organization\", required = true) @PathParam(\"organization\") String organization,\n+            @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n+            @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n+        // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n+        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3Mjk3Nw=="}, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTkxOTUxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNDowMVrOGb3iZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1Njo0N1rOGb76ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NDY2Mg==", "bodyText": "This cuts down data loaded in memory from all workflows to an organization's workflows, which is a lot better.\nBut can still be better by avoiding loading workflows at all since checking that the user has access can be done purely by query or checking with GitHub that the user had access to the organization directly in the case that the user has not been added to a workflow in the org yet would be more efficient\n.\nPlease add as as a code comment (TODO) and ticket", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431874662", "createdAt": "2020-05-28T14:24:01Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -62,11 +65,12 @@ public LambdaEventResource(SessionFactory sessionFactory) {\n             @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n             @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n         // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n-        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());\n-        boolean canAccessOrganization = workflows.stream().anyMatch(workflow -> Objects.equals(workflow.getOrganization(), organization) && Objects.equals(workflow.getSourceControl(),\n+        User authUser = userDAO.findById(user.getId());\n+        List<Workflow> workflows = workflowDAO.findByOrganization(organization);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2237b48df80654f1bfa3fbe26a05f8dc240eab98"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NjQwMw==", "bodyText": "I ended up just changing it to call the GitHub API, much cleaner now.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431946403", "createdAt": "2020-05-28T15:56:47Z", "author": {"login": "agduncan94"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -62,11 +65,12 @@ public LambdaEventResource(SessionFactory sessionFactory) {\n             @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n             @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n         // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n-        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());\n-        boolean canAccessOrganization = workflows.stream().anyMatch(workflow -> Objects.equals(workflow.getOrganization(), organization) && Objects.equals(workflow.getSourceControl(),\n+        User authUser = userDAO.findById(user.getId());\n+        List<Workflow> workflows = workflowDAO.findByOrganization(organization);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NDY2Mg=="}, "originalCommit": {"oid": "2237b48df80654f1bfa3fbe26a05f8dc240eab98"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc4Mjg1OnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo1MTowMVrOGcANXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo1MTowMVrOGcANXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNjczMw==", "bodyText": "is this needed?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432016733", "createdAt": "2020-05-28T17:51:01Z", "author": {"login": "garyluu"}, "path": ".travis.yml", "diffHunk": "@@ -1,5 +1,6 @@\n services:\n - docker\n+- postgresql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTEwMzA5OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/resources/swagger.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyODo0MFrOGcDbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyODo0MFrOGcDbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2OTQ2OA==", "bodyText": "not really RESTful but if you don't forsee anyone querying by anything other that organization, then it doesn't matter", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432069468", "createdAt": "2020-05-28T19:28:40Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/swagger.yaml", "diffHunk": "@@ -2697,6 +2698,46 @@ paths:\n               $ref: \"#/definitions/Event\"\n       security:\n       - BEARER: []\n+  /lambdaEvents/{organization}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTEwNzExOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDowNFrOGcDeIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDowNFrOGcDeIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MDE3OQ==", "bodyText": "Is this the only response?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432070179", "createdAt": "2020-05-28T19:30:04Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "diffHunk": "@@ -4165,6 +4266,34 @@ paths:\n       - bearer: []\n       tags:\n       - workflows\n+  /workflows/github/install:\n+    post:\n+      description: Handle the installation of our GitHub app onto a repository or\n+        organization.\n+      operationId: handleGitHubInstallation\n+      requestBody:\n+        content:\n+          application/x-www-form-urlencoded:\n+            schema:\n+              properties:\n+                installationId:\n+                  type: string\n+                repositories:\n+                  type: string\n+                username:\n+                  type: string\n+              required:\n+              - installationId\n+              - repositories\n+              - username\n+              type: object\n+      responses:\n+        \"418\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTk0Mzg3OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/ResourceConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTowMzo0NFrOGcLmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTowMzo0NFrOGcLmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMzM5Nw==", "bodyText": "This seems like a high limit to me. Can always adjust later though.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432203397", "createdAt": "2020-05-29T01:03:44Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/ResourceConstants.java", "diffHunk": "@@ -33,7 +33,13 @@\n     public static final String ORGANIZATIONS = \"Operations on Dockstore organizations\";\n     public static final String CURATION = \"List and modify notifications for users of Dockstore\";\n     public static final String NIHDATACOMMONS = \"Needed for SmartAPI compatibility apparantly, might be cargo cult behaviour\";\n+    public static final String LAMBDAEVENTS = \"Query lambda events triggered by GitHub Apps\";\n     public static final String OPENAPI_JWT_SECURITY_DEFINITION_NAME = \"bearer\";\n+    public static final String PAGINATION_LIMIT = \"100\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502a8dc821f4d3fce7b05764abb55ef3367f0067"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2949, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}