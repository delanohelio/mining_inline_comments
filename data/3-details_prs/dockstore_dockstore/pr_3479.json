{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjY4OTcw", "number": 3479, "title": "Feature/3238/lambda error messages", "bodyText": "#3238\n\nTracks lambda events (push, delete and install) and stores into the database (new table)\nAdds a new endpoint for grabbing all lambda events for a user\nChange some existing endpoints to use open API\nAdds new endpoint for adding a GitHub installation event to Dockstore (called by lambda)\n\nThe Postgres issue (unrelated) is failing the Travis ci.\nCurrently, I just added the one endpoint for fetching all events for a user, though this may need changes or maybe even a new endpoint based on what people think is necessary.\nFor discussion:\nOne situation that I can think of that has a bit of an issue. If a user not on Dockstore tries to create/update a workflow that has the GitHub app installed (by pushing a branch with a dockstore.yml), this will throw an error since we can't associate it with a user. The issue is, who do we show this event to? We have no user associated, so the get user events doesn't work.", "createdAt": "2020-05-19T17:44:07Z", "url": "https://github.com/dockstore/dockstore/pull/3479", "merged": true, "mergeCommit": {"oid": "cb794a53d31ddf141f3bde309623bcc38fb03151"}, "closed": true, "closedAt": "2020-05-29T15:34:07Z", "author": {"login": "agduncan94"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg_H4OgH2gAyNDIwMjY4OTcwOjIzZTI4Mzk0YjYxZjg4NzY2M2I0MzcyZDFlMDI5NjA3ZTRmZjgxMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmDlzwgFqTQyMDM1MzAyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "23e28394b61f887663b4372d1e029607e4ff812a", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/23e28394b61f887663b4372d1e029607e4ff812a", "committedDate": "2020-05-13T20:44:17Z", "message": "basic class for storing lambda events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72a474b2b84b2984f31d27fa58e50dc33e66857", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/b72a474b2b84b2984f31d27fa58e50dc33e66857", "committedDate": "2020-05-14T15:20:46Z", "message": "store lambda events; also some dao functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10efda9007c33a41eb7ea4c6f9dac5d07801d133", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/10efda9007c33a41eb7ea4c6f9dac5d07801d133", "committedDate": "2020-05-14T15:49:29Z", "message": "delete event for gh apps now includes username"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aacbf891ebda37c15760d8a7b4999da190b30d7", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/3aacbf891ebda37c15760d8a7b4999da190b30d7", "committedDate": "2020-05-14T18:08:33Z", "message": "adds event for installation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a584afc11b8dd1a4b9d603af7ff7e35428b9b59c", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a584afc11b8dd1a4b9d603af7ff7e35428b9b59c", "committedDate": "2020-05-14T19:30:48Z", "message": "endpoint for grabbing all github events for a user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df236e9d0cb1ec5766b63683379e51de5639b9c3", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/df236e9d0cb1ec5766b63683379e51de5639b9c3", "committedDate": "2020-05-14T19:42:11Z", "message": "forgot to add new dao file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9dfc1b98202b43b5fcc11ccb44a4699ac5096bb", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a9dfc1b98202b43b5fcc11ccb44a4699ac5096bb", "committedDate": "2020-05-14T19:57:26Z", "message": "change some endpoints to use openapi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5b34a1c5198645d9e42611080c5db26d5f9123", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/da5b34a1c5198645d9e42611080c5db26d5f9123", "committedDate": "2020-05-19T13:57:32Z", "message": "update travis postgres service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c5d7ac8800789858e483e9fffc3190b62ee17a", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/88c5d7ac8800789858e483e9fffc3190b62ee17a", "committedDate": "2020-05-19T16:32:02Z", "message": "tests for lambda error messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00b0fa6fe01c4a1a28c2ec57d178d4bb5a101e48", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/00b0fa6fe01c4a1a28c2ec57d178d4bb5a101e48", "committedDate": "2020-05-19T17:58:56Z", "message": "attempt to fix travis issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1839ef68138f4ead2a936a115a61137656681303", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/1839ef68138f4ead2a936a115a61137656681303", "committedDate": "2020-05-19T20:48:01Z", "message": "Merge branch 'develop' into feature/3238/lambda-error-messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODEzMDgx", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-414813081", "createdAt": "2020-05-19T20:51:05Z", "commit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MTowNVrOGXyI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1NjowOFrOGXyT4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MTkyOQ==", "bodyText": "FYI, defaults to eager", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427591929", "createdAt": "2020-05-19T20:51:05Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjU5OA==", "bodyText": "A little wary of this in production code, why is this necessary and has this pattern been used before?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427592598", "createdAt": "2020-05-19T20:52:22Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -267,14 +271,21 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n      * - Delete version for corresponding service and workflow\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n      * @param gitReference Git reference from GitHub (ex. refs/tags/1.0)\n+     * @param username Git user who triggered the event\n+     * @param installationId GitHub App installation ID\n      * @return List of updated workflows\n      */\n-    protected List<Workflow> githubWebhookDelete(String repository, String gitReference) {\n+    protected List<Workflow> githubWebhookDelete(String repository, String gitReference, String username, String installationId) {\n         // Retrieve name from gitReference\n         Optional<String> gitReferenceName = GitHelper.parseGitHubReference(gitReference);\n         if (gitReferenceName.isEmpty()) {\n             String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n             LOG.error(msg);\n+            LambdaEvent lambdaEvent = createBasicEvent(repository, gitReference, username, installationId, LambdaEvent.LambdaEventType.DELETE);\n+            lambdaEvent.setMessage(msg);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MjgzOA==", "bodyText": "Ditto", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427592838", "createdAt": "2020-05-19T20:52:44Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -317,19 +332,48 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n             workflows.addAll(createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYaml12.getWorkflows(), repository, gitReference,\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n+            lambdaEventDAO.create(lambdaEvent);\n             return workflows;\n         } catch (CustomWebApplicationException | ClassCastException | DockstoreYamlHelper.DockstoreYamlException ex) {\n-            // TODO: Eventually want to record something to the database so that the user can know the type of lambda errors run into\n             String msg = \"User \" + username + \": Error handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.info(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        } catch (NullPointerException ex) {\n+        } catch (Exception ex) {\n             String msg = \"User \" + username + \": Unhandled error while handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.error(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDMxMg==", "bodyText": "Might have lost context, why is there a new endpoint for this as opposed to the existing  release endpoint.\nIs this only for reporting lambda installs?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427594312", "createdAt": "2020-05-19T20:55:23Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1935,14 +1936,41 @@ public void deleteWorkflow(@ApiParam(hidden = true) @Parameter(hidden = true, na\n     @ApiOperation(value = \"Handle a release of a repository on GitHub. Will create a workflow/service and version when necessary.\", authorizations = {\n         @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Workflow.class, responseContainer = \"List\")\n     public List<Workflow> handleGitHubRelease(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n-        @ApiParam(value = \"Repository path (ex. dockstore/dockstore-ui2)\", required = true) @FormParam(\"repository\") String repository,\n-        @ApiParam(value = \"Username of user on GitHub who triggered action\", required = true) @FormParam(\"username\") String username,\n-        @ApiParam(value = \"Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0\", required = true) @FormParam(\"gitReference\") String gitReference,\n-        @ApiParam(value = \"GitHub installation ID\", required = true) @FormParam(\"installationId\") String installationId) {\n+        @Parameter(name = \"Repository path (ex. dockstore/dockstore-ui2)\", required = true) @FormParam(\"repository\") String repository,\n+        @Parameter(name = \"Username of user on GitHub who triggered action\", required = true) @FormParam(\"username\") String username,\n+        @Parameter(name = \"Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0\", required = true) @FormParam(\"gitReference\") String gitReference,\n+        @Parameter(name = \"GitHub installation ID\", required = true) @FormParam(\"installationId\") String installationId) {\n         LOG.info(\"Branch/tag \" + gitReference + \" pushed to \" + repository + \"(\" + username + \")\");\n         return githubWebhookRelease(repository, username, gitReference, installationId);\n     }\n \n+    @POST\n+    @Path(\"/github/install\")\n+    @Timed\n+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n+    @UnitOfWork\n+    @RolesAllowed({ \"curator\", \"admin\" })\n+    @Operation(description = \"Handle the installation of our GitHub app onto a repository or organization.\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = @ApiResponse(responseCode = \"418\", description = \"This code tells AWS Lambda not to retry.\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDcyMw==", "bodyText": "I realise this is just a draft, but this will quickly need pagination or something to cut things down. Plus sorting", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r427594723", "createdAt": "2020-05-19T20:56:08Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +766,17 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/github/events\")\n+    @Operation(operationId = \"getUserGitHubEvents\", description = \"Get all of the GitHub Events for the logged in user.\", security = @SecurityRequirement(name = \"bearer\"))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getUserGitHubEvents(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser) {\n+        final User user = userDAO.findById(authUser.getId());\n+        return lambdaEventDAO.findByUser(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Njc5NTYz", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-415679563", "createdAt": "2020-05-20T20:13:00Z", "commit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoxNTowMlrOGYcPDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoyOToyM1rOGYgDag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA==", "bodyText": "If we surface this event to multiple users, then this would need to be an array/list of userids.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428281614", "createdAt": "2020-05-20T20:15:02Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4Nzc2Mg==", "bodyText": "I'm a big fan of methods returning Optional if null could be returned, but if you have a method that already returns a null, I think it's more complicated to create an Optional just to see if it's empty -- I would either just directly do a null check here, or change UserDAO.findByGitHubUsername to return an Optional. We don't have the DAOs returning Optionals, so I would lean towards the former.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428287762", "createdAt": "2020-05-20T20:27:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -317,19 +332,48 @@ private WorkflowVersion updateDBVersionSourceFilesWithRemoteVersionSourceFiles(W\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n             workflows.addAll(createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYaml12.getWorkflows(), repository, gitReference,\n                     gitHubSourceCodeRepo, user, dockstoreYml));\n+            lambdaEventDAO.create(lambdaEvent);\n             return workflows;\n         } catch (CustomWebApplicationException | ClassCastException | DockstoreYamlHelper.DockstoreYamlException ex) {\n-            // TODO: Eventually want to record something to the database so that the user can know the type of lambda errors run into\n             String msg = \"User \" + username + \": Error handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.info(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        } catch (NullPointerException ex) {\n+        } catch (Exception ex) {\n             String msg = \"User \" + username + \": Unhandled error while handling push event for repository \" + repository + \" and reference \" + gitReference + \"\\n\" + ex.getMessage();\n             LOG.error(msg, ex);\n+            lambdaEvent.setSuccess(false);\n+            lambdaEvent.setMessage(ex.getMessage());\n+            lambdaEventDAO.create(lambdaEvent);\n+            sessionFactory.getCurrentSession().getTransaction().commit();\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n     }\n \n+    /**\n+     * Create a basic lambda event\n+     * @param repository repository path\n+     * @param gitReference full git reference (ex. refs/heads/master)\n+     * @param username Username of GitHub user who triggered the event\n+     * @param installationId The GitHub App Installation ID\n+     * @param type Event type\n+     * @return New lambda event\n+     */\n+    private LambdaEvent createBasicEvent(String repository, String gitReference, String username, String installationId, LambdaEvent.LambdaEventType type) {\n+        LambdaEvent lambdaEvent = new LambdaEvent();\n+        lambdaEvent.setRepository(repository);\n+        lambdaEvent.setReference(gitReference);\n+        lambdaEvent.setUsername(username);\n+        lambdaEvent.setType(type);\n+        lambdaEvent.setInstallationId(installationId);\n+        Optional<User> user = Optional.ofNullable(userDAO.findByGitHubUsername(username));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MjU1Mw==", "bodyText": "I think the name of this should be something like gitHubUsername. I at first started to put comments about it thinking it was the Dockstore username, until I read you annotations.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428342553", "createdAt": "2020-05-20T22:25:27Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0MzQzOA==", "bodyText": "Isn't this semi-secret? Probably not, but just double-checking.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428343438", "createdAt": "2020-05-20T22:27:29Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The installation ID of the event.\", position = 9)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0NDE3MA==", "bodyText": "Should this be lazy?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r428344170", "createdAt": "2020-05-20T22:29:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)\n+    private boolean dismissed = false;\n+\n+    @Column\n+    @Enumerated(EnumType.STRING)\n+    @ApiModelProperty(value = \"The type of event.\", required = true, position = 7)\n+    private LambdaEventType type;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"userId\", referencedColumnName = \"id\")\n+    @ApiModelProperty(value = \"User that the event is acting on (if exists in Dockstore).\", position = 8)\n+    @JsonIgnore\n+    private User user;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95fabb35a4319f2dbf2e896b02b4e65a17674aa4", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/95fabb35a4319f2dbf2e896b02b4e65a17674aa4", "committedDate": "2020-05-21T12:51:06Z", "message": "some suggestions from PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af63fe31b4f516e9879302ac3b337398dd0d7f5", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/1af63fe31b4f516e9879302ac3b337398dd0d7f5", "committedDate": "2020-05-22T12:26:11Z", "message": "more suggestions from pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3b4761e91738966b8596e96515c7314472ab295", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/b3b4761e91738966b8596e96515c7314472ab295", "committedDate": "2020-05-22T15:15:28Z", "message": "remove installation id; add endpoint to get all lambda events for a given org"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14d3d6e3188c234e4b8389007968e32386b46124", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/14d3d6e3188c234e4b8389007968e32386b46124", "committedDate": "2020-05-22T15:16:07Z", "message": "small if fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c98220fd457baeb4944fb233b0156af882e6e34", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/7c98220fd457baeb4944fb233b0156af882e6e34", "committedDate": "2020-05-22T16:21:22Z", "message": "added test for new lambda events endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53a6173e032b9d7d86ba4b0dd4709bd8101d7e4e", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/53a6173e032b9d7d86ba4b0dd4709bd8101d7e4e", "committedDate": "2020-05-22T20:19:40Z", "message": "added pagination to getLambdaEventsByOrganization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae8b6303c9b82d069cd22c68a2211f76efec2a4", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/4ae8b6303c9b82d069cd22c68a2211f76efec2a4", "committedDate": "2020-05-25T14:11:34Z", "message": "add pagination to other endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73deb2a3ab0918162a589641ad20fc71ea592089", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/73deb2a3ab0918162a589641ad20fc71ea592089", "committedDate": "2020-05-25T15:14:23Z", "message": "more testing for pagination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20e0a50f5162e798c8c6b98d5f0bbfac347fbb4d", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/20e0a50f5162e798c8c6b98d5f0bbfac347fbb4d", "committedDate": "2020-05-25T17:20:44Z", "message": "Merge branch 'develop' into feature/3238/lambda-error-messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446f13a41255c6f67df8a6c3b567b6d9cdd7ccff", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/446f13a41255c6f67df8a6c3b567b6d9cdd7ccff", "committedDate": "2020-05-25T18:43:51Z", "message": "Merge branch 'develop' into feature/3238/lambda-error-messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e97e2bc140bb8a0980a848c6495d1066d01e68", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/b4e97e2bc140bb8a0980a848c6495d1066d01e68", "committedDate": "2020-05-26T20:01:57Z", "message": "converted test to open API, required converting some endpoints to support open API as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4", "committedDate": "2020-05-27T15:46:06Z", "message": "some open api fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTEzODk5", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-419513899", "createdAt": "2020-05-27T18:49:26Z", "commit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0OToyNlrOGbYjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0OToyNlrOGbYjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2Njk3NA==", "bodyText": "Following on, if all users in the org can see the event, it seems that we won't be able to track it with one boolean (I'm ok with not tracking this)", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431366974", "createdAt": "2020-05-27T18:49:26Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTA3OTk2", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-419507996", "createdAt": "2020-05-27T18:41:11Z", "commit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0MToxMVrOGbYRzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1OTo1MVrOGbY6sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjUwOQ==", "bodyText": "This may be overkill, but I wonder if this should be GitHubLambdaEvent? In case we ever add the GitHub apps equivalent for BitBucket and/ GitLab, or we ever add Lambdas for some other feature that I can't envision right now?\nOTOH, you could rename it if/when we get there.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431362509", "createdAt": "2020-05-27T18:41:11Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByOrganization\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository like :organization\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.githubUsername = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2Mzk2Mg==", "bodyText": "When other users see events, will they be able to dismiss them? Will you record it? Or are you saying the other endpoint will handle that?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431363962", "createdAt": "2020-05-27T18:43:47Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/LambdaEvent.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.webservice.core;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+/**\n+ * This describes events triggered by GitHub webhooks\n+ */\n+@ApiModel(\"LambdaEvent\")\n+@Entity\n+@Table(name = \"LambdaEvent\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByRepository\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.repository = :repository\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUsername\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.username = :username\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.LambdaEvent.findByUser\", query = \"SELECT lambdaEvent FROM LambdaEvent lambdaEvent WHERE lambdaEvent.user = :user\"),\n+})\n+@SuppressWarnings(\"checkstyle:magicnumber\")\n+public class LambdaEvent {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @ApiModelProperty(value = \"Unique ID of the event.\", position = 0)\n+    private long id;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The repository from the event.\", required = true, position = 1)\n+    private String repository;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The name of the user on GitHub that triggers the event.\", required = true, position = 2)\n+    private String username;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The git reference from the event.\", required = true, position = 3)\n+    private String reference;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default true\")\n+    @ApiModelProperty(value = \"Whether or not the event was successful.\", position = 4)\n+    private boolean success = true;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    @ApiModelProperty(value = \"The message associated with the event.\", position = 5)\n+    private String message;\n+\n+    @Column(nullable = false, columnDefinition = \"boolean default false\")\n+    @ApiModelProperty(value = \"Whether or not the user has dismissed the event.\", position = 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MTYxNA=="}, "originalCommit": {"oid": "1839ef68138f4ead2a936a115a61137656681303"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2ODI5NQ==", "bodyText": "Should be 401 status code, not 400.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431368295", "createdAt": "2020-05-27T18:51:43Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.LambdaEvent;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.Workflow;\n+import io.dockstore.webservice.jdbi.LambdaEventDAO;\n+import io.dockstore.webservice.jdbi.WorkflowDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT_TEXT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_OFFSET_TEXT;\n+\n+@Path(\"/lambdaEvents\")\n+@Api(\"/lambdaEvents\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Tag(name = \"lambdaEvents\", description = ResourceConstants.LAMBDAEVENTS)\n+public class LambdaEventResource {\n+    private final LambdaEventDAO lambdaEventDAO;\n+    private final WorkflowDAO workflowDAO;\n+    private SessionFactory sessionFactory;\n+\n+    public LambdaEventResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.lambdaEventDAO = new LambdaEventDAO(sessionFactory);\n+        this.workflowDAO = new WorkflowDAO(sessionFactory);\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{organization}\")\n+    @Operation(operationId = \"getLambdaEventsByOrganization\", description = \"Get all of the Lambda Events for the given GitHub organization.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getLambdaEventsByOrganization(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n+            @ApiParam(value = \"organization\", required = true) @PathParam(\"organization\") String organization,\n+            @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n+            @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n+        // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n+        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());\n+        boolean canAccessOrganization = workflows.stream().anyMatch(workflow -> Objects.equals(workflow.getOrganization(), organization) && Objects.equals(workflow.getSourceControl(),\n+                SourceControl.GITHUB));\n+        if (!canAccessOrganization) {\n+            throw new CustomWebApplicationException(\"You do not have access to the GitHub organization '\" + organization + \"'\", HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3Mjk3Nw==", "bodyText": "There is a workflowDAO.findPublishedByOrganization; you could tweak a findByOrganzation copy of it. Or you could go even further and create a named query that returns a count/boolean, e.g., hasWorkflowInOrganization.\nThis could be overkill, especially the second suggestion, given the upcoming changes for lazy sourcefiles and whatnot, but for certain users this will cause workflows with 600+ versions to be fetched just to see if you belong to an org.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431372977", "createdAt": "2020-05-27T18:59:51Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.dockstore.webservice.resources;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.CustomWebApplicationException;\n+import io.dockstore.webservice.core.LambdaEvent;\n+import io.dockstore.webservice.core.User;\n+import io.dockstore.webservice.core.Workflow;\n+import io.dockstore.webservice.jdbi.LambdaEventDAO;\n+import io.dockstore.webservice.jdbi.WorkflowDAO;\n+import io.dropwizard.auth.Auth;\n+import io.dropwizard.hibernate.UnitOfWork;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpStatus;\n+import org.hibernate.SessionFactory;\n+\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_LIMIT_TEXT;\n+import static io.dockstore.webservice.resources.ResourceConstants.PAGINATION_OFFSET_TEXT;\n+\n+@Path(\"/lambdaEvents\")\n+@Api(\"/lambdaEvents\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Tag(name = \"lambdaEvents\", description = ResourceConstants.LAMBDAEVENTS)\n+public class LambdaEventResource {\n+    private final LambdaEventDAO lambdaEventDAO;\n+    private final WorkflowDAO workflowDAO;\n+    private SessionFactory sessionFactory;\n+\n+    public LambdaEventResource(SessionFactory sessionFactory) {\n+        this.sessionFactory = sessionFactory;\n+        this.lambdaEventDAO = new LambdaEventDAO(sessionFactory);\n+        this.workflowDAO = new WorkflowDAO(sessionFactory);\n+    }\n+\n+    @GET\n+    @Timed\n+    @UnitOfWork(readOnly = true)\n+    @Path(\"/{organization}\")\n+    @Operation(operationId = \"getLambdaEventsByOrganization\", description = \"Get all of the Lambda Events for the given GitHub organization.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"See OpenApi for details\")\n+    public List<LambdaEvent> getLambdaEventsByOrganization(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User user,\n+            @ApiParam(value = \"organization\", required = true) @PathParam(\"organization\") String organization,\n+            @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n+            @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n+        // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n+        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc65d3a5a08adc09dc226ed24319cfb78ecf8e4"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e6d0e444fb19bcc9db7c367990126ce6dca959", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/27e6d0e444fb19bcc9db7c367990126ce6dca959", "committedDate": "2020-05-27T20:26:35Z", "message": "remove dismissed attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2237b48df80654f1bfa3fbe26a05f8dc240eab98", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/2237b48df80654f1bfa3fbe26a05f8dc240eab98", "committedDate": "2020-05-28T14:00:50Z", "message": "changes recommended in PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTYyODg2", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-420162886", "createdAt": "2020-05-28T14:24:01Z", "commit": {"oid": "2237b48df80654f1bfa3fbe26a05f8dc240eab98"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNDowMVrOGb3iZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNDowMVrOGb3iZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NDY2Mg==", "bodyText": "This cuts down data loaded in memory from all workflows to an organization's workflows, which is a lot better.\nBut can still be better by avoiding loading workflows at all since checking that the user has access can be done purely by query or checking with GitHub that the user had access to the organization directly in the case that the user has not been added to a workflow in the org yet would be more efficient\n.\nPlease add as as a code comment (TODO) and ticket", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r431874662", "createdAt": "2020-05-28T14:24:01Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/LambdaEventResource.java", "diffHunk": "@@ -62,11 +65,12 @@ public LambdaEventResource(SessionFactory sessionFactory) {\n             @ApiParam(value = PAGINATION_OFFSET_TEXT) @QueryParam(\"offset\") @DefaultValue(\"0\") String offset,\n             @ApiParam(value = PAGINATION_LIMIT_TEXT, allowableValues = \"range[1,100]\", defaultValue = PAGINATION_LIMIT) @DefaultValue(PAGINATION_LIMIT) @QueryParam(\"limit\") Integer limit) {\n         // To ensure a user has access to an organization, check that they have at least one workflow from that organization\n-        List<Workflow> workflows = workflowDAO.findMyEntries(user.getId());\n-        boolean canAccessOrganization = workflows.stream().anyMatch(workflow -> Objects.equals(workflow.getOrganization(), organization) && Objects.equals(workflow.getSourceControl(),\n+        User authUser = userDAO.findById(user.getId());\n+        List<Workflow> workflows = workflowDAO.findByOrganization(organization);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2237b48df80654f1bfa3fbe26a05f8dc240eab98"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/4cb2bdfd106369acfa1ea3747ba894958a515da4", "committedDate": "2020-05-28T15:43:01Z", "message": "use github api to check if user has access to an org"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzIyMjY1", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-420322265", "createdAt": "2020-05-28T17:09:26Z", "commit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzMwODQx", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-420330841", "createdAt": "2020-05-28T17:20:53Z", "commit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502a8dc821f4d3fce7b05764abb55ef3367f0067", "author": {"user": {"login": "denis-yuen", "name": "Denis Yuen"}}, "url": "https://github.com/dockstore/dockstore/commit/502a8dc821f4d3fce7b05764abb55ef3367f0067", "committedDate": "2020-05-28T19:35:14Z", "message": "Merge branch 'develop' into feature/3238/lambda-error-messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTg5MjQ1", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-420589245", "createdAt": "2020-05-29T01:03:43Z", "commit": {"oid": "502a8dc821f4d3fce7b05764abb55ef3367f0067"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTowMzo0NFrOGcLmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMTowMzo0NFrOGcLmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMzM5Nw==", "bodyText": "This seems like a high limit to me. Can always adjust later though.", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432203397", "createdAt": "2020-05-29T01:03:44Z", "author": {"login": "Ldcabansay"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/ResourceConstants.java", "diffHunk": "@@ -33,7 +33,13 @@\n     public static final String ORGANIZATIONS = \"Operations on Dockstore organizations\";\n     public static final String CURATION = \"List and modify notifications for users of Dockstore\";\n     public static final String NIHDATACOMMONS = \"Needed for SmartAPI compatibility apparantly, might be cargo cult behaviour\";\n+    public static final String LAMBDAEVENTS = \"Query lambda events triggered by GitHub Apps\";\n     public static final String OPENAPI_JWT_SECURITY_DEFINITION_NAME = \"bearer\";\n+    public static final String PAGINATION_LIMIT = \"100\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502a8dc821f4d3fce7b05764abb55ef3367f0067"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTkwMjY2", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-420590266", "createdAt": "2020-05-29T01:07:24Z", "commit": {"oid": "502a8dc821f4d3fce7b05764abb55ef3367f0067"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzUzMDIz", "url": "https://github.com/dockstore/dockstore/pull/3479#pullrequestreview-420353023", "createdAt": "2020-05-28T17:51:01Z", "commit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo1MTowMVrOGcANXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDowNFrOGcDeIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNjczMw==", "bodyText": "is this needed?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432016733", "createdAt": "2020-05-28T17:51:01Z", "author": {"login": "garyluu"}, "path": ".travis.yml", "diffHunk": "@@ -1,5 +1,6 @@\n services:\n - docker\n+- postgresql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2OTQ2OA==", "bodyText": "not really RESTful but if you don't forsee anyone querying by anything other that organization, then it doesn't matter", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432069468", "createdAt": "2020-05-28T19:28:40Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/swagger.yaml", "diffHunk": "@@ -2697,6 +2698,46 @@ paths:\n               $ref: \"#/definitions/Event\"\n       security:\n       - BEARER: []\n+  /lambdaEvents/{organization}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MDE3OQ==", "bodyText": "Is this the only response?", "url": "https://github.com/dockstore/dockstore/pull/3479#discussion_r432070179", "createdAt": "2020-05-28T19:30:04Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "diffHunk": "@@ -4165,6 +4266,34 @@ paths:\n       - bearer: []\n       tags:\n       - workflows\n+  /workflows/github/install:\n+    post:\n+      description: Handle the installation of our GitHub app onto a repository or\n+        organization.\n+      operationId: handleGitHubInstallation\n+      requestBody:\n+        content:\n+          application/x-www-form-urlencoded:\n+            schema:\n+              properties:\n+                installationId:\n+                  type: string\n+                repositories:\n+                  type: string\n+                username:\n+                  type: string\n+              required:\n+              - installationId\n+              - repositories\n+              - username\n+              type: object\n+      responses:\n+        \"418\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb2bdfd106369acfa1ea3747ba894958a515da4"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1891, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}