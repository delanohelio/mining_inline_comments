{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MzE3NDgz", "number": 3467, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo1MDowOVrOD7ZkIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozNzoxN1rOD8ghPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjExNDI2OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Collection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo1MDowOVrOGTs3Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowNDo0MVrOGULMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxMTEyMw==", "bodyText": "This does reduce response size but getEntries will still load all entries (and thus their versions) into memory.\nIs there a reason the named query strategy was not used in this case?\nhttps://github.com/dockstore/dockstore/pull/3462/files#diff-f57cce37c04c1e6fa1392a205af9efefR41", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r423311123", "createdAt": "2020-05-11T20:50:09Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Collection.java", "diffHunk": "@@ -142,6 +141,11 @@ public void setDescription(String description) {\n         return entries.stream().filter(entry -> entry.getIsPublished()).collect(Collectors.toSet());\n     }\n \n+    @JsonProperty(\"entries\")\n+    public Set<CollectionEntry> getCollectionEntries() {\n+        return getEntries().stream().map(entry -> new CollectionEntry(entry)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd3c45511951505a4888f262ec902b513c5e4b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3ODE3NA==", "bodyText": "Require DAO access which we normally do in a specific endpoint.  This is a JsonProperty.", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r423378174", "createdAt": "2020-05-11T23:33:29Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Collection.java", "diffHunk": "@@ -142,6 +141,11 @@ public void setDescription(String description) {\n         return entries.stream().filter(entry -> entry.getIsPublished()).collect(Collectors.toSet());\n     }\n \n+    @JsonProperty(\"entries\")\n+    public Set<CollectionEntry> getCollectionEntries() {\n+        return getEntries().stream().map(entry -> new CollectionEntry(entry)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxMTEyMw=="}, "originalCommit": {"oid": "7dd3c45511951505a4888f262ec902b513c5e4b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3MDAxNA==", "bodyText": "Yes, I think you will need to modify the DAO and tackle specific endpoints to avoid loading entries and their versions and avert OOM\nAt least until #3455", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r423770014", "createdAt": "2020-05-12T14:16:58Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Collection.java", "diffHunk": "@@ -142,6 +141,11 @@ public void setDescription(String description) {\n         return entries.stream().filter(entry -> entry.getIsPublished()).collect(Collectors.toSet());\n     }\n \n+    @JsonProperty(\"entries\")\n+    public Set<CollectionEntry> getCollectionEntries() {\n+        return getEntries().stream().map(entry -> new CollectionEntry(entry)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxMTEyMw=="}, "originalCommit": {"oid": "7dd3c45511951505a4888f262ec902b513c5e4b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwODE5Mg==", "bodyText": "that would be a relatively major change for a hotfix, modifying almost every endpoint that uses collection, ideally creating another endpoint to specifically get entries, and major modifications to the frontend entries retrieval code.", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r423808192", "createdAt": "2020-05-12T15:04:41Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Collection.java", "diffHunk": "@@ -142,6 +141,11 @@ public void setDescription(String description) {\n         return entries.stream().filter(entry -> entry.getIsPublished()).collect(Collectors.toSet());\n     }\n \n+    @JsonProperty(\"entries\")\n+    public Set<CollectionEntry> getCollectionEntries() {\n+        return getEntries().stream().map(entry -> new CollectionEntry(entry)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxMTEyMw=="}, "originalCommit": {"oid": "7dd3c45511951505a4888f262ec902b513c5e4b6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDcwMDI1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Entry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDowNToxN1rOGVBmIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozOTozNVrOGVff1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTQyNQ==", "bodyText": "I know it's a hassle, but why isn't the name value following the same naming convention as the other queries?", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r424699425", "createdAt": "2020-05-13T20:05:17Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Entry.java", "diffHunk": "@@ -78,7 +78,10 @@\n @NamedQueries({\n     @NamedQuery(name = \"Entry.getGenericEntryById\", query = \"SELECT e from Entry e WHERE :id = e.id\"),\n         @NamedQuery(name = \"Entry.getGenericEntryByAlias\", query = \"SELECT e from Entry e JOIN e.aliases a WHERE KEY(a) IN :alias\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Entry.findCollectionsByEntryId\", query = \"select new io.dockstore.webservice.core.CollectionOrganization(col.id, col.name, col.displayName, organization.id, organization.name, organization.displayName) from Collection col join col.entries as entry join col.organization as organization where entry.id = :entryId\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Entry.findCollectionsByEntryId\", query = \"select new io.dockstore.webservice.core.CollectionOrganization(col.id, col.name, col.displayName, organization.id, organization.name, organization.displayName) from Collection col join col.entries as entry join col.organization as organization where entry.id = :entryId\"),\n+        @NamedQuery(name = \"getCollectionWorkflows\", query = \"SELECT new io.dockstore.webservice.core.CollectionEntry(w.id, w.dbUpdateDate, 'workflow', w.sourceControl, w.organization, w.repository, w.workflowName) from BioWorkflow w, Collection col join col.entries as e where col.id = :collectionId and w.id = e.id and w.isPublished = true\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6d0d8d2b75c86580bc17c0208697d94fa7ae1dd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3OTU2NQ==", "bodyText": "There's only 3 other queries in the file and they don't seem to have the same naming convention.", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r424779565", "createdAt": "2020-05-13T23:03:10Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Entry.java", "diffHunk": "@@ -78,7 +78,10 @@\n @NamedQueries({\n     @NamedQuery(name = \"Entry.getGenericEntryById\", query = \"SELECT e from Entry e WHERE :id = e.id\"),\n         @NamedQuery(name = \"Entry.getGenericEntryByAlias\", query = \"SELECT e from Entry e JOIN e.aliases a WHERE KEY(a) IN :alias\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Entry.findCollectionsByEntryId\", query = \"select new io.dockstore.webservice.core.CollectionOrganization(col.id, col.name, col.displayName, organization.id, organization.name, organization.displayName) from Collection col join col.entries as entry join col.organization as organization where entry.id = :entryId\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Entry.findCollectionsByEntryId\", query = \"select new io.dockstore.webservice.core.CollectionOrganization(col.id, col.name, col.displayName, organization.id, organization.name, organization.displayName) from Collection col join col.entries as entry join col.organization as organization where entry.id = :entryId\"),\n+        @NamedQuery(name = \"getCollectionWorkflows\", query = \"SELECT new io.dockstore.webservice.core.CollectionEntry(w.id, w.dbUpdateDate, 'workflow', w.sourceControl, w.organization, w.repository, w.workflowName) from BioWorkflow w, Collection col join col.entries as e where col.id = :collectionId and w.id = e.id and w.isPublished = true\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTQyNQ=="}, "originalCommit": {"oid": "f6d0d8d2b75c86580bc17c0208697d94fa7ae1dd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4OTMzNA==", "bodyText": "My understanding is that JPA named queries should have a namespace of some kind to avoid accidental collisions.\nI don't have a preference between package + class name or just class name since we don't have a Entry class in multiple packages\n\nDo note that query names are part of a global namespace and are not automatically put in any namespace  based on the file they are defined in. In the example above queries are pre-fixed with \"Website.\", which happens  to be the name of the entity but you can choose anything you want here.\n\nhttps://arjan-tijms.omnifaces.org/2010/09/where-to-put-named-queries-in-jpa.html", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r425189334", "createdAt": "2020-05-14T14:39:35Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Entry.java", "diffHunk": "@@ -78,7 +78,10 @@\n @NamedQueries({\n     @NamedQuery(name = \"Entry.getGenericEntryById\", query = \"SELECT e from Entry e WHERE :id = e.id\"),\n         @NamedQuery(name = \"Entry.getGenericEntryByAlias\", query = \"SELECT e from Entry e JOIN e.aliases a WHERE KEY(a) IN :alias\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Entry.findCollectionsByEntryId\", query = \"select new io.dockstore.webservice.core.CollectionOrganization(col.id, col.name, col.displayName, organization.id, organization.name, organization.displayName) from Collection col join col.entries as entry join col.organization as organization where entry.id = :entryId\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Entry.findCollectionsByEntryId\", query = \"select new io.dockstore.webservice.core.CollectionOrganization(col.id, col.name, col.displayName, organization.id, organization.name, organization.displayName) from Collection col join col.entries as entry join col.organization as organization where entry.id = :entryId\"),\n+        @NamedQuery(name = \"getCollectionWorkflows\", query = \"SELECT new io.dockstore.webservice.core.CollectionEntry(w.id, w.dbUpdateDate, 'workflow', w.sourceControl, w.organization, w.repository, w.workflowName) from BioWorkflow w, Collection col join col.entries as e where col.id = :collectionId and w.id = e.id and w.isPublished = true\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTQyNQ=="}, "originalCommit": {"oid": "f6d0d8d2b75c86580bc17c0208697d94fa7ae1dd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzczOTQ4OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/CollectionEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozNzoxN1rOGVfZEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozNzoxN1rOGVfZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4NzYwMQ==", "bodyText": "Would like Javadoc for the class", "url": "https://github.com/dockstore/dockstore/pull/3467#discussion_r425187601", "createdAt": "2020-05-14T14:37:17Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/CollectionEntry.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.dockstore.webservice.core;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+import io.dockstore.common.SourceControl;\n+\n+public class CollectionEntry implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6d0d8d2b75c86580bc17c0208697d94fa7ae1dd"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2940, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}