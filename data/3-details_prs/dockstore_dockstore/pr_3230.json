{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTU3MDU5", "number": 3230, "title": "Feature/workflow GitHub app and yaml support", "bodyText": "Support for workflows and Dockstore.yml.\nFor first pass, .dockstore.yml v1.1 is only for services and v1.2 is only for workflows. In the future we will need to update v1.2 to support services.\nNow only one GitHub app endpoint. Before there was a create service and add version. Now there is one endpoint that will add a workflow/service if it doesn't exist, before adding the associated versions.\nThis also changed the sync method to only add users to GitHub app enabled workflows they should own. This has not been fully tested and will need to be tested (with hoverfly) in the future.\nI will be making more tickets to deal with the remainder of the features needed to be implemented.\nNOTE: This will break existing lambda calls, will need to update to point to only one endpoint.\n#2991", "createdAt": "2020-02-13T16:09:58Z", "url": "https://github.com/dockstore/dockstore/pull/3230", "merged": true, "mergeCommit": {"oid": "4c0f12d0e0c2988eaf4e701e224505892822745b"}, "closed": true, "closedAt": "2020-02-24T16:37:27Z", "author": {"login": "agduncan94"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8NTOagH2gAyMzc0OTU3MDU5OmRjNjk5NjFhZGFkYWU4YmIxNDdiNzJmYzgzYjFmNDY0NjEzYjA3OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHe_IyAFqTM2MzQ1OTYxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc69961adadae8bb147b72fc83b1f464613b078b", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/dc69961adadae8bb147b72fc83b1f464613b078b", "committedDate": "2020-01-20T14:20:09Z", "message": "endpoint for adding a workflow from GitHub install"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94295c5be0f01759e86c412dc6775ca7a12af209", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/94295c5be0f01759e86c412dc6775ca7a12af209", "committedDate": "2020-01-20T18:49:17Z", "message": "can upsertVersion to dockstore.yml workflows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93136e7f850fa5949450d9789c4d59197ee5107f", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/93136e7f850fa5949450d9789c4d59197ee5107f", "committedDate": "2020-01-31T15:39:55Z", "message": "new endpoint for handling release calls from GitHub App"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4cab8dd57631c04bad12a86f82e8c52c7507438", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/d4cab8dd57631c04bad12a86f82e8c52c7507438", "committedDate": "2020-01-31T20:33:00Z", "message": "added comments; removed some old code; some reorg of new code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2706267f43394568ac325f0ad4ee314c1dd96767", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/2706267f43394568ac325f0ad4ee314c1dd96767", "committedDate": "2020-02-03T14:53:42Z", "message": "can add test parameter files to dockstoreyml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74732f9df0f98b0b27787dd7c510fcb1587046a4", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/74732f9df0f98b0b27787dd7c510fcb1587046a4", "committedDate": "2020-02-03T16:24:00Z", "message": "reused more code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4dfdcbed6402b7b28d5e133e4790124b3afa197", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/b4dfdcbed6402b7b28d5e133e4790124b3afa197", "committedDate": "2020-02-03T20:44:33Z", "message": "remove old service code; handle dockstore.yml versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea548abbead014024a353adbd813edceb469969", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/9ea548abbead014024a353adbd813edceb469969", "committedDate": "2020-02-03T20:53:10Z", "message": "fix return error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fbeb148c19911ea2e1ca15c56bf4e4cdc56835d", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/3fbeb148c19911ea2e1ca15c56bf4e4cdc56835d", "committedDate": "2020-02-04T15:35:41Z", "message": "attempt at fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00611a17b509d6134d9cc401b0c397009ef46ac8", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/00611a17b509d6134d9cc401b0c397009ef46ac8", "committedDate": "2020-02-04T20:12:49Z", "message": "fix remainder of tests that were failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285eb87f47889cb5c80785593d4e53dbf2e69a0a", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/285eb87f47889cb5c80785593d4e53dbf2e69a0a", "committedDate": "2020-02-04T20:26:03Z", "message": "moved check user exists to later in the flow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfbd777207ec5b7232003a681978d8ecda77e1de", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/cfbd777207ec5b7232003a681978d8ecda77e1de", "committedDate": "2020-02-04T21:23:20Z", "message": "add test parameter code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3ff1e002ee98f0059a2a2410a64c44975d17ac", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/9d3ff1e002ee98f0059a2a2410a64c44975d17ac", "committedDate": "2020-02-04T21:23:35Z", "message": "started tests for dockore yml and workflows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ecf359be972d4c678e373324f5060b9fb80e6b", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/62ecf359be972d4c678e373324f5060b9fb80e6b", "committedDate": "2020-02-05T13:31:38Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02e2ebb82b52bd140c6fe441e27fdf4edf15c81a", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/02e2ebb82b52bd140c6fe441e27fdf4edf15c81a", "committedDate": "2020-02-05T14:22:59Z", "message": "updated sync services endpoint to also work with workflows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf4f24ac950c14c679ff93a2b7deb7b08a3b2932", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/cf4f24ac950c14c679ff93a2b7deb7b08a3b2932", "committedDate": "2020-02-05T14:23:14Z", "message": "added webhook test for no user on dockstore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66b90f3d425f1ca5ad56f28daa1e6505cdfb61ba", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/66b90f3d425f1ca5ad56f28daa1e6505cdfb61ba", "committedDate": "2020-02-06T14:19:29Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19f9facbb2d0c71ef82bdb9458dd2007a2df2d2", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a19f9facbb2d0c71ef82bdb9458dd2007a2df2d2", "committedDate": "2020-02-06T14:26:41Z", "message": "workflow and service now have subclass of descriptor types (optional)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a29628696a11fb2d8628581c8706978a092c9270", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a29628696a11fb2d8628581c8706978a092c9270", "committedDate": "2020-02-06T14:26:53Z", "message": "update junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d460a5785a5b4c14db2c9401cdfa37198fe97366", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/d460a5785a5b4c14db2c9401cdfa37198fe97366", "committedDate": "2020-02-06T16:08:49Z", "message": "fix for weird edge cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ccddf39183df0373b5732b34f5352e329608ec", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/61ccddf39183df0373b5732b34f5352e329608ec", "committedDate": "2020-02-06T16:30:41Z", "message": "update test for dockstore yml refresh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e99af7dbc0a5d47ac6a44d403df5cb9332688e22", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/e99af7dbc0a5d47ac6a44d403df5cb9332688e22", "committedDate": "2020-02-06T21:09:38Z", "message": "remove null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd80897b4333407ae5ac4eaca5d9878594fb09e", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/acd80897b4333407ae5ac4eaca5d9878594fb09e", "committedDate": "2020-02-10T14:28:03Z", "message": "change sync for services to be sync with github"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb2d8c42fffcb620c113a2c710a2030c40f23f15", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/bb2d8c42fffcb620c113a2c710a2030c40f23f15", "committedDate": "2020-02-10T14:55:44Z", "message": "more changes to sync, removed old tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03645a9d4ad7168057a82154ce97ce993e2abbb3", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/03645a9d4ad7168057a82154ce97ce993e2abbb3", "committedDate": "2020-02-10T15:03:06Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e98e2e272c6e38a5056588f595bedea90a4543", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/b4e98e2e272c6e38a5056588f595bedea90a4543", "committedDate": "2020-02-10T15:12:04Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77e2b83614d9a19bbccb9da1226d6585dbc18f52", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/77e2b83614d9a19bbccb9da1226d6585dbc18f52", "committedDate": "2020-02-12T20:29:41Z", "message": "fix check for subclass for 1.1 services, looks for type instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11223afccbf8a056ef11edd748b6b657c8057fde", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/11223afccbf8a056ef11edd748b6b657c8057fde", "committedDate": "2020-02-13T13:46:49Z", "message": "sync with github now returns workflows and services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52cb397dad430e9f881ac4b7ede99ca44bcae9b9", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/52cb397dad430e9f881ac4b7ede99ca44bcae9b9", "committedDate": "2020-02-13T15:21:12Z", "message": "fix messag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc1bec04f2ed479bbcba165e2fb2db84a28de40", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/4fc1bec04f2ed479bbcba165e2fb2db84a28de40", "committedDate": "2020-02-13T15:26:56Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "532d448930a5180e0d8a093b54b7fb0dd2b1c800", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/532d448930a5180e0d8a093b54b7fb0dd2b1c800", "committedDate": "2020-02-13T15:53:19Z", "message": "do not require class key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f5036c95b33991950052255f2530d1cafd7659", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/06f5036c95b33991950052255f2530d1cafd7659", "committedDate": "2020-02-13T16:51:33Z", "message": "added more values to descriptor language subclass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e30f0f26fa2215ab8ad6f0f874f0b4346d18097", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/6e30f0f26fa2215ab8ad6f0f874f0b4346d18097", "committedDate": "2020-02-13T17:00:43Z", "message": "field does not have required or allowableValues (use enum); also some codacy stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a5af2c931d88df5746deaefac12ee8f1907fa697", "committedDate": "2020-02-14T13:54:42Z", "message": "fix comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDA3NjYy", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-359007662", "createdAt": "2020-02-14T15:10:22Z", "commit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMDoyMlrOFp5uNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTozMToxN1rOFp6dNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MTY1Mw==", "bodyText": "Doubled-comment", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379481653", "createdAt": "2020-02-14T15:10:22Z", "author": {"login": "denis-yuen"}, "path": "dockstore-common/src/main/java/io/dockstore/common/DescriptorLanguageSubclass.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ *  *    Copyright 2020 OICR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjA2NQ==", "bodyText": "friendly name and short names aren't too different here, would recommend just picking one", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379482065", "createdAt": "2020-02-14T15:11:01Z", "author": {"login": "denis-yuen"}, "path": "dockstore-common/src/main/java/io/dockstore/common/DescriptorLanguageSubclass.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ *  *    Copyright 2020 OICR\n+ *  *\n+ *  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  *    you may not use this file except in compliance with the License.\n+ *  *    You may obtain a copy of the License at\n+ *  *\n+ *  *        http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  *    Unless required by applicable law or agreed to in writing, software\n+ *  *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  *    See the License for the specific language governing permissions and\n+ *  *    limitations under the License.\n+ *\n+ */\n+\n+package io.dockstore.common;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public enum DescriptorLanguageSubclass {\n+    DOCKER_COMPOSE(\"Docker Compose\", \"docker-compose\"),\n+    HELM(\"Helm\", \"helm\"),\n+    SWARM(\"Swarm\", \"swarm\"),\n+    KUBERNETES(\"Kubernetes\", \"kubernetes\");\n+\n+    private final String friendlyName;\n+\n+    private final String shortName;\n+\n+    DescriptorLanguageSubclass(final String friendlyName, final String shortName) {\n+        this.friendlyName = friendlyName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjczMg==", "bodyText": "Ditto, its probably an IDE config issue", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379482732", "createdAt": "2020-02-14T15:12:10Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ *\n+ *  *    Copyright 2020 OICR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NTIxNA==", "bodyText": "can use meaningful ids to make debugging in the DB easier, should also have a default even if its a \"I don't know yet\" or \"n/a\" type", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379485214", "createdAt": "2020-02-14T15:16:41Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/resources/migrations.1.9.0.xml", "diffHunk": "@@ -28,4 +28,12 @@\n             <where>type='ADD_VERSION_TO_ENTRY' and versionid is null</where>\n         </delete>\n     </changeSet>\n+    <changeSet author=\"aduncan\" id=\"1580931394009\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NzI4OA==", "bodyText": "@Operation has a nested @ApiResponse that can describe response codes. For that matter, these should described in OpenAPI", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379487288", "createdAt": "2020-02-14T15:20:20Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1801,16 +1783,19 @@ public void deleteWorkflow(@ApiParam(hidden = true) @Parameter(hidden = true, na\n         }\n     }\n \n-    /**\n-     * Finds the tool by Id, and then checks that it exists and that the user has access to it\n-     * @param entryId Id of tool of interest\n-     * @param user User to authenticate\n-     * @return Tool\n-     */\n-    private Workflow findWorkflowByIdAndCheckWorkflowAndUser(Long entryId, User user) {\n-        Workflow workflow = workflowDAO.findById(entryId);\n-        checkEntry(workflow);\n-        checkUser(user, workflow);\n-        return workflow;\n+    @POST\n+    @Path(\"/github/release\")\n+    @Timed\n+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n+    @UnitOfWork\n+    @RolesAllowed({ \"curator\", \"admin\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NzkwOQ==", "bodyText": "Refresh my memory from the presentation, why are duplicates not a concern with the new approach?", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379487909", "createdAt": "2020-02-14T15:21:28Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/ServiceIT.java", "diffHunk": "@@ -249,34 +247,6 @@ public void createServiceNoUser() throws Exception {\n         Assert.assertEquals(\"there should be no matching service\", 0, count);\n     }\n \n-    /**\n-     * Ensures that you cannot create a service if there already exists a service with the same path\n-     */\n-    @Test\n-    public void createServiceDuplicate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4ODk2OQ==", "bodyText": "I'd prefer this to be non-nullable and just set to a n/a term or similar by default.", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379488969", "createdAt": "2020-02-14T15:23:09Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Workflow.java", "diffHunk": "@@ -122,6 +123,11 @@\n     @ApiModelProperty(value = \"This is a descriptor type for the workflow, by default either CWL, WDL, NFL, or gxformat2 (Defaults to CWL).\", required = true, position = 18, allowableValues = \"CWL, WDL, NFL, gxformat2, service\")\n     private DescriptorLanguage descriptorType;\n \n+    @Column\n+    @Convert(converter = DescriptorLanguageSubclassConverter.class)\n+    @ApiModelProperty(value = \"This is a descriptor type subclass for the workflow. Currently it is only used for services.\", position = 19)\n+    private DescriptorLanguageSubclass descriptorTypeSubclass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTEzNg==", "bodyText": "Can get rid of this kind of thing and error prone null checks", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379489136", "createdAt": "2020-02-14T15:23:29Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Workflow.java", "diffHunk": "@@ -313,4 +329,20 @@ public DescriptorLanguage convertToEntityAttribute(String dbData) {\n             return DescriptorLanguage.convertShortStringToEnum(dbData);\n         }\n     }\n+\n+    public static class DescriptorLanguageSubclassConverter implements AttributeConverter<DescriptorLanguageSubclass, String> {\n+\n+        @Override\n+        public String convertToDatabaseColumn(DescriptorLanguageSubclass attribute) {\n+            if (attribute == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTYxNA==", "bodyText": "initializeWorkflow can be more descriptive if this is for github app installs only", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379489614", "createdAt": "2020-02-14T15:24:24Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -294,6 +296,24 @@ public Workflow initializeWorkflow(String repositoryId, Workflow workflow) {\n         return workflow;\n     }\n \n+    /**\n+     * Initializes a workflow based on GitHub app installation\n+     * @param repositoryId Organization and repository (ex. dockstore/dockstore-ui2)\n+     * @return stub workflow based on GitHub repository\n+     */\n+    public Workflow initializeWorkflow(String repositoryId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDg5NA==", "bodyText": "Use https://github.com/dockstore/dockstore/blob/develop/dockstore-common/src/main/java/io/dockstore/common/DescriptorLanguage.java#L146 or similar so that we don't need to touch this when we need to get Galaxy in here too.", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379490894", "createdAt": "2020-02-14T15:26:35Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -304,13 +324,63 @@ public Service initializeService(String repositoryId) {\n         service.setLastUpdated(new Date());\n         service.setDescriptorType(DescriptorLanguage.SERVICE);\n         service.setMode(WorkflowMode.SERVICE);\n-        service.setDefaultWorkflowPath(\".dockstore.yml\");\n+        service.setDefaultWorkflowPath(\"/.dockstore.yml\");\n+        return service;\n+    }\n+\n+    /**\n+     * Initialize service object for GitHub repository\n+     * @param repositoryId Organization and repository (ex. dockstore/dockstore-ui2)\n+     * @param subclass The subclass of the workflow (ex. docker-compose)\n+     * @return Service\n+     */\n+    public Service initializeServiceFromGitHub(String repositoryId, String subclass) {\n+        Service service = initializeService(repositoryId);\n+        service.setMode(WorkflowMode.DOCKSTORE_YML);\n+\n+        // Validate subclass\n+        if (subclass != null) {\n+            DescriptorLanguageSubclass descriptorLanguageSubclass;\n+            try {\n+                descriptorLanguageSubclass = DescriptorLanguageSubclass.convertShortNameStringToEnum(subclass);\n+            } catch (UnsupportedOperationException ex) {\n+                String msg = \"Subclass \" + subclass + \" is not a valid descriptor language subclass.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+            service.setDescriptorTypeSubclass(descriptorLanguageSubclass);\n+        }\n+\n         return service;\n     }\n \n+    /**\n+     * Initialize workflow object for GitHub repository\n+     * @param repositoryId Organization and repository (ex. dockstore/dockstore-ui2)\n+     * @param subclass Subclass of the workflow\n+     * @param workflowName Name of the workflow\n+     * @return Workflow\n+     */\n+    public BioWorkflow initializeWorkflowFromGitHub(String repositoryId, String subclass, String workflowName) {\n+        BioWorkflow workflow = (BioWorkflow)initializeWorkflow(repositoryId, new BioWorkflow());\n+        workflow.setWorkflowName(workflowName);\n+        workflow.setMode(WorkflowMode.DOCKSTORE_YML);\n+        if (Objects.equals(DescriptorLanguage.CWL.getLowerShortName(), subclass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MTc4Mw==", "bodyText": "Ditto", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379491783", "createdAt": "2020-02-14T15:28:06Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -511,55 +619,183 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n+            files = (List<String>)serviceObject.get(\"files\");\n+            // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+        for (String filePath: files) {\n+            String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n+            if (fileContent != null) {\n+                SourceFile file = new SourceFile();\n+                file.setAbsolutePath(filePath);\n+                file.setPath(filePath);\n+                file.setContent(fileContent);\n+                file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n+                version.getSourceFiles().add(file);\n+            } else {\n+                // File not found or null\n+                LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            }\n+        }\n \n-            version.getSourceFiles().add(dockstoreYml);\n+        return version;\n+    }\n \n-            // Grab all files from files array\n+    /**\n+     * Pull descriptor files for the given workflow version and add to version\n+     * @param ref Triple containing reference name, branch date, and SHA\n+     * @param repository GitHub repository object\n+     * @param version Version to update\n+     * @param workflow Workflow to add version to\n+     * @param existingDefaults Existing defaults\n+     * @param dockstoreYml Dockstore YML sourcefile\n+     * @return Version with updated sourcefiles\n+     */\n+    private WorkflowVersion setupWorkflowFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, Workflow workflow, Map<String, WorkflowVersion> existingDefaults, SourceFile dockstoreYml) {\n+        // Determine version information from dockstore.yml\n+        Map<String, Object> workflowMap = null;\n+        List<String> testParameterPaths = null;\n+        try {\n             Yaml yaml = new Yaml();\n-            List<String> files;\n-            try {\n-                Map<String, Object> map = yaml.load(dockstoreYmlContent);\n-                Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n-                files = (List<String>)serviceObject.get(\"files\");\n-                // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n-            } catch (YAMLException | ClassCastException | NullPointerException ex) {\n-                String msg = \"Invalid .dockstore.yml\";\n-                LOG.warn(msg, ex);\n-                return version;\n+\n+            // Find matching workflow entry in .dockstore.yml and grab information\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)map.get(\"workflows\");\n+            for (Map<String, Object> wf : workflows) {\n+                String wfName = (String)wf.get(\"name\");\n+                String dockstoreWorkflowPath = \"github.com/\" + repository.getFullName() + (wfName != null && !wfName.isEmpty() ? \"/\" + wfName : \"\");\n+\n+                if (Objects.equals(dockstoreWorkflowPath, workflow.getEntryPath())) {\n+                    workflowMap = wf;\n+                    testParameterPaths = (List<String>)wf.get(\"testParameterFiles\");\n+                    break;\n+                }\n+            }\n+\n+            // If no matching workflow found, ignore version\n+            if (workflowMap == null) {\n+                return null;\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+\n+        String primaryDescriptorPath = (String)workflowMap.get(\"primaryDescriptorPath\");\n+        if (primaryDescriptorPath == null)  {\n+            String msg = \".dockstore.yml is missing the required primaryDescriptorPath field.\";\n+            LOG.info(msg);\n+            return null;\n+        }\n+        String fileContent = this.readFileFromRepo(primaryDescriptorPath, ref.getLeft(), repository);\n+        if (fileContent != null) {\n+            // Add primary descriptor file and resolve imports\n+            SourceFile file = new SourceFile();\n+            file.setAbsolutePath(primaryDescriptorPath);\n+            file.setPath(primaryDescriptorPath);\n+            file.setContent(fileContent);\n+            DescriptorLanguage.FileType identifiedType;\n+            if (Objects.equals(workflow.getDescriptorType(), DescriptorLanguage.CWL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjM4NQ==", "bodyText": "This can use https://github.com/dockstore/dockstore/pull/3235/files#diff-fd5ac5b6f6fdba95c1c5be457e049d7dR207 after my merge", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379492385", "createdAt": "2020-02-14T15:29:03Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -511,55 +619,183 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n+            files = (List<String>)serviceObject.get(\"files\");\n+            // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+        for (String filePath: files) {\n+            String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n+            if (fileContent != null) {\n+                SourceFile file = new SourceFile();\n+                file.setAbsolutePath(filePath);\n+                file.setPath(filePath);\n+                file.setContent(fileContent);\n+                file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n+                version.getSourceFiles().add(file);\n+            } else {\n+                // File not found or null\n+                LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            }\n+        }\n \n-            version.getSourceFiles().add(dockstoreYml);\n+        return version;\n+    }\n \n-            // Grab all files from files array\n+    /**\n+     * Pull descriptor files for the given workflow version and add to version\n+     * @param ref Triple containing reference name, branch date, and SHA\n+     * @param repository GitHub repository object\n+     * @param version Version to update\n+     * @param workflow Workflow to add version to\n+     * @param existingDefaults Existing defaults\n+     * @param dockstoreYml Dockstore YML sourcefile\n+     * @return Version with updated sourcefiles\n+     */\n+    private WorkflowVersion setupWorkflowFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, Workflow workflow, Map<String, WorkflowVersion> existingDefaults, SourceFile dockstoreYml) {\n+        // Determine version information from dockstore.yml\n+        Map<String, Object> workflowMap = null;\n+        List<String> testParameterPaths = null;\n+        try {\n             Yaml yaml = new Yaml();\n-            List<String> files;\n-            try {\n-                Map<String, Object> map = yaml.load(dockstoreYmlContent);\n-                Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n-                files = (List<String>)serviceObject.get(\"files\");\n-                // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n-            } catch (YAMLException | ClassCastException | NullPointerException ex) {\n-                String msg = \"Invalid .dockstore.yml\";\n-                LOG.warn(msg, ex);\n-                return version;\n+\n+            // Find matching workflow entry in .dockstore.yml and grab information\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)map.get(\"workflows\");\n+            for (Map<String, Object> wf : workflows) {\n+                String wfName = (String)wf.get(\"name\");\n+                String dockstoreWorkflowPath = \"github.com/\" + repository.getFullName() + (wfName != null && !wfName.isEmpty() ? \"/\" + wfName : \"\");\n+\n+                if (Objects.equals(dockstoreWorkflowPath, workflow.getEntryPath())) {\n+                    workflowMap = wf;\n+                    testParameterPaths = (List<String>)wf.get(\"testParameterFiles\");\n+                    break;\n+                }\n+            }\n+\n+            // If no matching workflow found, ignore version\n+            if (workflowMap == null) {\n+                return null;\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+\n+        String primaryDescriptorPath = (String)workflowMap.get(\"primaryDescriptorPath\");\n+        if (primaryDescriptorPath == null)  {\n+            String msg = \".dockstore.yml is missing the required primaryDescriptorPath field.\";\n+            LOG.info(msg);\n+            return null;\n+        }\n+        String fileContent = this.readFileFromRepo(primaryDescriptorPath, ref.getLeft(), repository);\n+        if (fileContent != null) {\n+            // Add primary descriptor file and resolve imports\n+            SourceFile file = new SourceFile();\n+            file.setAbsolutePath(primaryDescriptorPath);\n+            file.setPath(primaryDescriptorPath);\n+            file.setContent(fileContent);\n+            DescriptorLanguage.FileType identifiedType;\n+            if (Objects.equals(workflow.getDescriptorType(), DescriptorLanguage.CWL)) {\n+                identifiedType = DescriptorLanguage.FileType.DOCKSTORE_CWL;\n+            } else if (Objects.equals(workflow.getDescriptorType(), DescriptorLanguage.WDL)) {\n+                identifiedType = DescriptorLanguage.FileType.DOCKSTORE_WDL;\n+            } else if (Objects.equals(workflow.getDescriptorType(), DescriptorLanguage.NEXTFLOW)) {\n+                identifiedType = DescriptorLanguage.FileType.NEXTFLOW_CONFIG;\n+            } else {\n+                String msg = \"Invalid type\";\n+                LOG.info(msg);\n+                return null;\n             }\n-            for (String filePath: files) {\n-                String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n-                if (fileContent != null) {\n-                    SourceFile file = new SourceFile();\n-                    file.setAbsolutePath(filePath);\n-                    file.setPath(filePath);\n-                    file.setContent(fileContent);\n-                    file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n-                    version.getSourceFiles().add(file);\n-                } else {\n-                    // File not found or null\n-                    LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            file.setType(identifiedType);\n+            version.setWorkflowPath(primaryDescriptorPath);\n+\n+            version = combineVersionAndSourcefile(repository.getFullName(), file, workflow, identifiedType, version, existingDefaults);\n+\n+            if (testParameterPaths != null) {\n+                for (String testParameterPath : testParameterPaths) {\n+                    String testJsonContent = this.readFileFromRepo(testParameterPath, ref.getLeft(), repository);\n+                    if (testJsonContent != null) {\n+                        SourceFile testJson = new SourceFile();\n+\n+                        if (identifiedType.equals(DescriptorLanguage.FileType.DOCKSTORE_CWL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 404}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjY4Ng==", "bodyText": "Non descriptive variable names", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379492686", "createdAt": "2020-02-14T15:29:32Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -68,6 +73,9 @@\n     private final String bitbucketClientID;\n     private final Class<T> entityClass;\n \n+    private final double version11 = 1.1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MzY4NA==", "bodyText": "Please write a test with a 1.1 and 1.2 schema file checked-in. I think we can make some quick decisions to make 1.2 support both and be compatible (i.e. can switch the version number from 1.1 to 1.2 to \"upgrade\", a 1.2 file can be read as a 1.1 file since your new keys should just be ignored)", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r379493684", "createdAt": "2020-02-14T15:31:17Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -256,136 +215,243 @@ protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Work\n         }\n     }\n \n-\n-    protected T upsertVersion(String repository, String username, String gitReference, String installationId, WorkflowMode workflowMode) {\n-        // Retrieve the user who triggered the call (may not exist on Dockstore)\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n+    /**\n+     * Handle webhooks from GitHub apps (redirected from AWS Lambda)\n+     * - Create services and workflows when necessary\n+     * - Add or update version for corresponding service and workflow\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param username Username of GitHub user that triggered action\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param installationId GitHub App installation ID\n+     * @return List of new and updated workflows\n+     */\n+    protected List<Workflow> githubWebhookRelease(String repository, String username, String gitReference, String installationId) {\n+        // Retrieve the user who triggered the call (must exist on Dockstore if workflow is not already present)\n+        User user = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n \n         // Get Installation Access Token\n         String installationAccessToken = gitHubAppSetup(installationId);\n \n-        // Call common upsert code\n-        String dockstoreServicePath = upsertVersionHelper(repository, gitReference, null, workflowMode, installationAccessToken);\n+        // Grab Dockstore YML from GitHub\n+        GitHubSourceCodeRepo gitHubSourceCodeRepo = (GitHubSourceCodeRepo)SourceCodeRepoFactory.createGitHubAppRepo(installationAccessToken);\n+        SourceFile dockstoreYml = gitHubSourceCodeRepo.getDockstoreYml(repository, gitReference);\n \n-        // Add user to service if necessary\n-        T entity = workflowDAO.findByPath(dockstoreServicePath, false, entityClass).get();\n-        if (sendingUser != null && !entity.getUsers().contains(sendingUser)) {\n-            entity.getUsers().add(sendingUser);\n-        }\n+        // Parse Dockstore YML and perform appropriate actions\n+        Yaml yaml = new Yaml();\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            double versionString = (double)map.get(\"version\");\n+\n+            if (Objects.equals(version11, versionString)) {\n+                // 1.1 - Only works with services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5af2c931d88df5746deaefac12ee8f1907fa697"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66f1824e8dd69c402834852ba54bb7da0555762", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/d66f1824e8dd69c402834852ba54bb7da0555762", "committedDate": "2020-02-14T16:33:36Z", "message": "fixes from pr review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8575d8cdfde4694f744f13c2d0235fc85a75669", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/c8575d8cdfde4694f744f13c2d0235fc85a75669", "committedDate": "2020-02-14T20:02:16Z", "message": "fix migrations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5df4151854b3f46561475c644a24298ffd54b08", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a5df4151854b3f46561475c644a24298ffd54b08", "committedDate": "2020-02-18T14:32:14Z", "message": "fix default value for descriptortypesubclass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e697783bee8c8485caa8d25931e0c2f13fffb6fa", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/e697783bee8c8485caa8d25931e0c2f13fffb6fa", "committedDate": "2020-02-18T14:41:12Z", "message": "migrate existing workflow and services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a40cc0a37b539e07872c764c411386e75a89587e", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a40cc0a37b539e07872c764c411386e75a89587e", "committedDate": "2020-02-18T14:48:28Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "467841f66e9b7586c4176997c8bdc4c8332f08e3", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/467841f66e9b7586c4176997c8bdc4c8332f08e3", "committedDate": "2020-02-18T14:57:12Z", "message": "fix migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862754acb90a718301106af23e20f721eedc87e9", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/862754acb90a718301106af23e20f721eedc87e9", "committedDate": "2020-02-18T15:26:03Z", "message": "fix for migration default value; some codacy fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDU5Njk5", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-360459699", "createdAt": "2020-02-18T15:58:27Z", "commit": {"oid": "862754acb90a718301106af23e20f721eedc87e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo1ODoyN1rOFrIImA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo1ODoyN1rOFrIImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc2NjM2MA==", "bodyText": "LAMBDA_ERROR = HttpStatus.Teapot or w/e?", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r380766360", "createdAt": "2020-02-18T15:58:27Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -55,6 +51,8 @@\n  */\n @Category(ConfidentialTest.class)\n public class WebhookIT extends BaseIT {\n+    private static final int LAMBDA_ERROR = 418;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862754acb90a718301106af23e20f721eedc87e9"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3245079d34f692d570a8f947a14a816089ca230", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/a3245079d34f692d570a8f947a14a816089ca230", "committedDate": "2020-02-18T16:19:37Z", "message": "simplify migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b622b9c6797e55dac52bb01d6ca641f4dab9a0c7", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/b622b9c6797e55dac52bb01d6ca641f4dab9a0c7", "committedDate": "2020-02-18T16:57:49Z", "message": "final fix for new column migration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTIzMjk0", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-360523294", "createdAt": "2020-02-18T17:16:23Z", "commit": {"oid": "b622b9c6797e55dac52bb01d6ca641f4dab9a0c7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxNjoyM1rOFrLMUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyODoxNFrOFrLmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxNjQ2NQ==", "bodyText": "I wonder if the name should have something to indicate workflow in it? What if we add support for tools and dockstore.yml?", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r380816465", "createdAt": "2020-02-18T17:16:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/WorkflowMode.java", "diffHunk": "@@ -40,5 +40,9 @@\n     /**\n      * A degenerate workflow\n      */\n-    SERVICE\n+    SERVICE,\n+    /**\n+     * A workflow that uses a .dockstore.yml\n+     */\n+    DOCKSTORE_YML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b622b9c6797e55dac52bb01d6ca641f4dab9a0c7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxOTAxMA==", "bodyText": "LOG.error and log the exception", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r380819010", "createdAt": "2020-02-18T17:20:43Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -336,8 +386,17 @@ public Workflow setupWorkflowVersions(String repositoryId, Workflow workflow, Op\n         // For each branch (reference) found, create a workflow version and find the associated descriptor files\n         for (Triple<String, Date, String> ref : references) {\n             if (ref != null) {\n+                SourceFile dockstoreYml = null;\n+                if (workflow.getMode() == WorkflowMode.DOCKSTORE_YML) {\n+                    try {\n+                        dockstoreYml = getDockstoreYml(repository.getFullName(), ref.getLeft());\n+                    } catch (CustomWebApplicationException ex) {\n+                        LOG.info(\"No .dockstore.yml present.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b622b9c6797e55dac52bb01d6ca641f4dab9a0c7"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDY0Ng==", "bodyText": "If you come in here, don't you want to thrown an exception? Otherwise it will go ahead and create the workflow on line 369.", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r380820646", "createdAt": "2020-02-18T17:23:38Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -256,136 +213,242 @@ protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Work\n         }\n     }\n \n-\n-    protected T upsertVersion(String repository, String username, String gitReference, String installationId, WorkflowMode workflowMode) {\n-        // Retrieve the user who triggered the call (may not exist on Dockstore)\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n+    /**\n+     * Handle webhooks from GitHub apps (redirected from AWS Lambda)\n+     * - Create services and workflows when necessary\n+     * - Add or update version for corresponding service and workflow\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param username Username of GitHub user that triggered action\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param installationId GitHub App installation ID\n+     * @return List of new and updated workflows\n+     */\n+    protected List<Workflow> githubWebhookRelease(String repository, String username, String gitReference, String installationId) {\n+        // Retrieve the user who triggered the call (must exist on Dockstore if workflow is not already present)\n+        User user = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n \n         // Get Installation Access Token\n         String installationAccessToken = gitHubAppSetup(installationId);\n \n-        // Call common upsert code\n-        String dockstoreServicePath = upsertVersionHelper(repository, gitReference, null, workflowMode, installationAccessToken);\n+        // Grab Dockstore YML from GitHub\n+        GitHubSourceCodeRepo gitHubSourceCodeRepo = (GitHubSourceCodeRepo)SourceCodeRepoFactory.createGitHubAppRepo(installationAccessToken);\n+        SourceFile dockstoreYml = gitHubSourceCodeRepo.getDockstoreYml(repository, gitReference);\n \n-        // Add user to service if necessary\n-        T entity = workflowDAO.findByPath(dockstoreServicePath, false, entityClass).get();\n-        if (sendingUser != null && !entity.getUsers().contains(sendingUser)) {\n-            entity.getUsers().add(sendingUser);\n-        }\n+        // Parse Dockstore YML and perform appropriate actions\n+        Yaml yaml = new Yaml();\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            double versionString = (double)map.get(\"version\");\n+\n+            if (Objects.equals(dockstoreYMLV11, versionString)) {\n+                // 1.1 - Only works with services\n+                return createServicesAndVersionsFromDockstoreYml(dockstoreYml, repository, gitReference, gitHubSourceCodeRepo, user, map);\n+            } else if (Objects.equals(dockstoreYMLV12, versionString)) {\n+                // 1.2 - Currently only supports workflows, though will eventually support services\n+                if (map.containsKey(\"services\")) {\n+                    LOG.info(\"Services are not yet implemented for version 1.2\");\n+                }\n+\n+                if (map.containsKey(\"workflows\")) {\n+                    return createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYml, repository, gitReference, map, gitHubSourceCodeRepo, user);\n+                }\n \n-        return entity;\n+                String msg = \"Invalid .dockstore.yml\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            } else {\n+                String msg = versionString + \" is not a valid version\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+        }\n     }\n \n     /**\n-     * Does the following:\n-     * 1) Add user to any existing Dockstore services they should own\n-     *\n-     * 2) For all of the users organizations that have the GitHub App installed on all repositories in those organizations,\n-     * add any services that should be on Dockstore but are not\n-     *\n-     * 3) For all of the repositories which have the GitHub App installed, add them to Dockstore if they are missing\n-     * @param user\n-     * @param organization\n+     * Create or retrieve workflows based on Dockstore.yml, add or update tag version\n+     * ONLY WORKS FOR v1.2\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param yml Dockstore YML map\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @param user User that triggered action\n+     * @return List of new and updated workflows\n      */\n-    void syncEntitiesForUser(User user, Optional<String> organization) {\n-        List<Token> githubByUserId = tokenDAO.findGithubByUserId(user.getId());\n-\n-        if (githubByUserId.isEmpty()) {\n-            String msg = \"The user does not have a GitHub token, please create one\";\n-            LOG.info(msg);\n-            throw new CustomWebApplicationException(msg, HttpStatus.SC_BAD_REQUEST);\n-        } else {\n-            syncEntities(user, organization, githubByUserId.get(0));\n+    private List<Workflow> createBioWorkflowsAndVersionsFromDockstoreYml(SourceFile dockstoreYml, String repository, String gitReference, Map<String, Object> yml, GitHubSourceCodeRepo gitHubSourceCodeRepo, User user) {\n+        try {\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)yml.get(\"workflows\");\n+            List<Workflow> updatedWorkflows = new ArrayList<>();\n+            for (Map<String, Object> wf : workflows) {\n+                String subclass = (String)wf.get(\"subclass\");\n+                String workflowName = (String)wf.get(\"name\");\n+\n+                updatedWorkflows.add(\n+                    createWorkflowAndVersionFromDockstoreYml(BioWorkflow.class, repository, gitReference, user, dockstoreYml, workflowName,\n+                        subclass, gitHubSourceCodeRepo));\n+            }\n+            return updatedWorkflows;\n+        } catch (ClassCastException ex) {\n+            String msg = \"Could not parse workflow array from YML.\";\n+            LOG.info(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n     }\n+\n     /**\n-     * Creates an entity (service or workflow) for a GitHub repository.\n-     *\n-     * Throws an exception if the entity already exists for that GitHub repo.\n-     *\n-     * Ideally would return T instead of Workflow, but punting on that for now.\n-     *\n-     * @param githubRepository\n-     * @param username\n-     * @param installationId\n-     * @return\n+     * Create or retrieve services based on Dockstore.yml, add or update tag version\n+     * ONLY WORKS FOR v1.1\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @param user User that triggered action\n+     * @param yml Dockstore YML map\n+     * @return List of new and updated services\n      */\n-    Workflow addEntityFromGitHubRepository(String githubRepository, String username, String installationId) {\n-        // Check for duplicates (currently workflows and services share paths)\n-        String entityPath = \"github.com/\" + githubRepository;\n-\n-        // Retrieve the user who triggered the call\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(tokenDAO, userDAO, username, true);\n-\n-        // Determine if service is already in Dockstore\n-        workflowDAO.findByPath(entityPath, false, entityClass).ifPresent((entity) -> {\n-            // TODO: When we add support for workflows, this message needs to be updated\n-            String msg = \"A service already exists for GitHub repository \" + githubRepository;\n-            LOG.info(msg);\n+    private List<Workflow> createServicesAndVersionsFromDockstoreYml(SourceFile dockstoreYml, String repository, String gitReference, GitHubSourceCodeRepo gitHubSourceCodeRepo, User user, Map<String, Object> yml) {\n+        List<Workflow> updatedServices = new ArrayList<>();\n+        // TODO: Currently only supports one service per .dockstore.yml\n+        String subclass;\n+        try {\n+            Map<String, Object> serviceObject = (Map<String, Object>)yml.get(\"service\");\n+            subclass = (String)serviceObject.get(\"type\");\n+            if (subclass == null) {\n+                String msg = \"Missing required type field.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        } catch (ClassCastException ex) {\n+            String msg = \"Could not parse .dockstore.yml\";\n+            LOG.info(msg, ex);\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        });\n+        }\n+        updatedServices.add(createWorkflowAndVersionFromDockstoreYml(Service.class, repository, gitReference, user, dockstoreYml, \"\", subclass, gitHubSourceCodeRepo));\n+        return updatedServices;\n+    }\n \n-        // Get Installation Access Token\n-        String installationAccessToken = GitHubHelper.gitHubAppSetup(gitHubAppId, gitHubPrivateKeyFile, installationId);\n+    /**\n+     * Create or retrieve workflow or service based on Dockstore.yml, also add or update tag version\n+     * @param workflowType Either BioWorkflow.class or Service.class\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param user User that triggered action\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param workflowName User that triggered action\n+     * @param subclass Subclass of the workflow\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @return New or updated workflow\n+     */\n+    @SuppressWarnings({\"checkstyle:ParameterNumber\"})\n+    private Workflow createWorkflowAndVersionFromDockstoreYml(Class workflowType, String repository, String gitReference, User user, SourceFile dockstoreYml, String workflowName, String subclass, GitHubSourceCodeRepo gitHubSourceCodeRepo) {\n+        // Check for existing workflow\n+        String dockstoreWorkflowPath = \"github.com/\" + repository + (workflowName != null && !workflowName.isEmpty() ? \"/\" + workflowName : \"\");\n+        Optional<Workflow> workflow = workflowDAO.findByPath(dockstoreWorkflowPath, false, workflowType);\n+\n+        Workflow workflowToUpdate = null;\n+        // Create workflow if one does not exist\n+        if (workflow.isEmpty()) {\n+            // Ensure that a Dockstore user exists to add to the workflow\n+            if (user == null) {\n+                String msg = \"User does not have an account on Dockstore.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n \n-        // Create a service object\n-        final GitHubSourceCodeRepo sourceCodeRepo = (GitHubSourceCodeRepo)SourceCodeRepoFactory.createGitHubAppRepo(installationAccessToken);\n+            if (workflowType == BioWorkflow.class) {\n+                workflowToUpdate = gitHubSourceCodeRepo.initializeWorkflowFromGitHub(repository, subclass, workflowName);\n+            } else if (workflowType == Service.class) {\n+                workflowToUpdate = gitHubSourceCodeRepo.initializeServiceFromGitHub(repository, subclass);\n+            } else {\n+                LOG.error(workflowType.getCanonicalName()  + \" is not a valid workflow type.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b622b9c6797e55dac52bb01d6ca641f4dab9a0c7"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMzE5MA==", "bodyText": "It was like this, so assume it's OK, but just double checking -- we are not handling Nextflow here on purpose, right?", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r380823190", "createdAt": "2020-02-18T17:28:14Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -387,15 +383,12 @@ public Workflow refresh(@ApiParam(hidden = true) @Auth User user,\n \n         // do a full refresh when targeted like this\n         // If this point has been reached, then the workflow will be a FULL workflow (and not a STUB)\n-        if (workflow.getDescriptorType() == DescriptorLanguage.SERVICE) {\n-            workflow.setMode(SERVICE);\n-        } else {\n+        if (!Objects.equals(workflow.getMode(), DOCKSTORE_YML)) {\n             workflow.setMode(WorkflowMode.FULL);\n         }\n \n         // look for checker workflows to associate with if applicable\n-        if (workflow instanceof BioWorkflow && !workflow.isIsChecker() && workflow.getDescriptorType() == CWL\n-            || workflow.getDescriptorType() == WDL) {\n+        if (workflow instanceof BioWorkflow && !workflow.isIsChecker() && workflow.getDescriptorType() == CWL || workflow.getDescriptorType() == WDL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b622b9c6797e55dac52bb01d6ca641f4dab9a0c7"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a1fab4cf40deaa0dde91967bf4ff8849a1429e", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/f4a1fab4cf40deaa0dde91967bf4ff8849a1429e", "committedDate": "2020-02-18T18:21:49Z", "message": "changes from pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7024678f9135588c9e6cacd3a257336cc9789d2", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/d7024678f9135588c9e6cacd3a257336cc9789d2", "committedDate": "2020-02-18T18:40:48Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f44289989346f17e84a27b545a7a2706571fdd", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/e4f44289989346f17e84a27b545a7a2706571fdd", "committedDate": "2020-02-18T20:23:43Z", "message": "dockstore.yml primary descriptor now being set; also fix for TRS and dockstore.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a4af044c76cc2696b05d617138bbd9e0a824e1", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/29a4af044c76cc2696b05d617138bbd9e0a824e1", "committedDate": "2020-02-18T20:49:12Z", "message": "fix new column issue with using shortname"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7404559bc577f8e41551edbc44979790c38e48ba", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/7404559bc577f8e41551edbc44979790c38e48ba", "committedDate": "2020-02-19T13:58:29Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35bdb6fa238e23ba53d37510cfd7dfa47e322946", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/35bdb6fa238e23ba53d37510cfd7dfa47e322946", "committedDate": "2020-02-19T14:35:33Z", "message": "attempt to fix migration :("}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/9d73cb7867104066e3650ef33a9c945b4b819969", "committedDate": "2020-02-19T16:31:37Z", "message": "fix for dockstore yml filetype"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjQ3NDMw", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-362247430", "createdAt": "2020-02-20T21:30:15Z", "commit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTozMDoxNlrOFsjzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozMDowN1rOFsmyBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2ODMyMg==", "bodyText": "Suggest LOG.error", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382268322", "createdAt": "2020-02-20T21:30:16Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -502,55 +591,168 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n+            files = (List<String>)serviceObject.get(\"files\");\n+            // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+        for (String filePath: files) {\n+            String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n+            if (fileContent != null) {\n+                SourceFile file = new SourceFile();\n+                file.setAbsolutePath(filePath);\n+                file.setPath(filePath);\n+                file.setContent(fileContent);\n+                file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n+                version.getSourceFiles().add(file);\n+            } else {\n+                // File not found or null\n+                LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            }\n+        }\n \n-            version.getSourceFiles().add(dockstoreYml);\n+        return version;\n+    }\n \n-            // Grab all files from files array\n+    /**\n+     * Pull descriptor files for the given workflow version and add to version\n+     * @param ref Triple containing reference name, branch date, and SHA\n+     * @param repository GitHub repository object\n+     * @param version Version to update\n+     * @param workflow Workflow to add version to\n+     * @param existingDefaults Existing defaults\n+     * @param dockstoreYml Dockstore YML sourcefile\n+     * @return Version with updated sourcefiles\n+     */\n+    private WorkflowVersion setupWorkflowFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, Workflow workflow, Map<String, WorkflowVersion> existingDefaults, SourceFile dockstoreYml) {\n+        // Determine version information from dockstore.yml\n+        Map<String, Object> workflowMap = null;\n+        List<String> testParameterPaths = null;\n+        try {\n             Yaml yaml = new Yaml();\n-            List<String> files;\n-            try {\n-                Map<String, Object> map = yaml.load(dockstoreYmlContent);\n-                Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n-                files = (List<String>)serviceObject.get(\"files\");\n-                // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n-            } catch (YAMLException | ClassCastException | NullPointerException ex) {\n-                String msg = \"Invalid .dockstore.yml\";\n-                LOG.warn(msg, ex);\n-                return version;\n+\n+            // Find matching workflow entry in .dockstore.yml and grab information\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)map.get(\"workflows\");\n+            for (Map<String, Object> wf : workflows) {\n+                String wfName = (String)wf.get(\"name\");\n+                String dockstoreWorkflowPath = \"github.com/\" + repository.getFullName() + (wfName != null && !wfName.isEmpty() ? \"/\" + wfName : \"\");\n+\n+                if (Objects.equals(dockstoreWorkflowPath, workflow.getEntryPath())) {\n+                    workflowMap = wf;\n+                    testParameterPaths = (List<String>)wf.get(\"testParameterFiles\");\n+                    break;\n+                }\n             }\n-            for (String filePath: files) {\n-                String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n-                if (fileContent != null) {\n-                    SourceFile file = new SourceFile();\n-                    file.setAbsolutePath(filePath);\n-                    file.setPath(filePath);\n-                    file.setContent(fileContent);\n-                    file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n-                    version.getSourceFiles().add(file);\n-                } else {\n-                    // File not found or null\n-                    LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+\n+            // If no matching workflow found, ignore version\n+            if (workflowMap == null) {\n+                return null;\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2ODc4Mg==", "bodyText": "Probably LOG.error here as well, although this may become moot when we create classes for dockstore.yml", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382268782", "createdAt": "2020-02-20T21:31:24Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -502,55 +591,168 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n+            files = (List<String>)serviceObject.get(\"files\");\n+            // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+        for (String filePath: files) {\n+            String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n+            if (fileContent != null) {\n+                SourceFile file = new SourceFile();\n+                file.setAbsolutePath(filePath);\n+                file.setPath(filePath);\n+                file.setContent(fileContent);\n+                file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n+                version.getSourceFiles().add(file);\n+            } else {\n+                // File not found or null\n+                LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            }\n+        }\n \n-            version.getSourceFiles().add(dockstoreYml);\n+        return version;\n+    }\n \n-            // Grab all files from files array\n+    /**\n+     * Pull descriptor files for the given workflow version and add to version\n+     * @param ref Triple containing reference name, branch date, and SHA\n+     * @param repository GitHub repository object\n+     * @param version Version to update\n+     * @param workflow Workflow to add version to\n+     * @param existingDefaults Existing defaults\n+     * @param dockstoreYml Dockstore YML sourcefile\n+     * @return Version with updated sourcefiles\n+     */\n+    private WorkflowVersion setupWorkflowFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, Workflow workflow, Map<String, WorkflowVersion> existingDefaults, SourceFile dockstoreYml) {\n+        // Determine version information from dockstore.yml\n+        Map<String, Object> workflowMap = null;\n+        List<String> testParameterPaths = null;\n+        try {\n             Yaml yaml = new Yaml();\n-            List<String> files;\n-            try {\n-                Map<String, Object> map = yaml.load(dockstoreYmlContent);\n-                Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n-                files = (List<String>)serviceObject.get(\"files\");\n-                // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n-            } catch (YAMLException | ClassCastException | NullPointerException ex) {\n-                String msg = \"Invalid .dockstore.yml\";\n-                LOG.warn(msg, ex);\n-                return version;\n+\n+            // Find matching workflow entry in .dockstore.yml and grab information\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)map.get(\"workflows\");\n+            for (Map<String, Object> wf : workflows) {\n+                String wfName = (String)wf.get(\"name\");\n+                String dockstoreWorkflowPath = \"github.com/\" + repository.getFullName() + (wfName != null && !wfName.isEmpty() ? \"/\" + wfName : \"\");\n+\n+                if (Objects.equals(dockstoreWorkflowPath, workflow.getEntryPath())) {\n+                    workflowMap = wf;\n+                    testParameterPaths = (List<String>)wf.get(\"testParameterFiles\");\n+                    break;\n+                }\n             }\n-            for (String filePath: files) {\n-                String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n-                if (fileContent != null) {\n-                    SourceFile file = new SourceFile();\n-                    file.setAbsolutePath(filePath);\n-                    file.setPath(filePath);\n-                    file.setContent(fileContent);\n-                    file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n-                    version.getSourceFiles().add(file);\n-                } else {\n-                    // File not found or null\n-                    LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+\n+            // If no matching workflow found, ignore version\n+            if (workflowMap == null) {\n+                return null;\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+\n+        String primaryDescriptorPath = (String)workflowMap.get(\"primaryDescriptorPath\");\n+        if (primaryDescriptorPath == null)  {\n+            String msg = \".dockstore.yml is missing the required primaryDescriptorPath field.\";\n+            LOG.info(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNzA2MQ==", "bodyText": "I wonder if we shouldn't have OTHER as well. The service definition is pretty agnostic to the technology. But I'm not sure what anybody would do with OTHER, so I'm torn.", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382317061", "createdAt": "2020-02-20T23:30:07Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/main/java/io/dockstore/common/DescriptorLanguageSubclass.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *\n+ *    Copyright 2020 OICR\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ *\n+ */\n+\n+package io.dockstore.common;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public enum DescriptorLanguageSubclass {\n+    DOCKER_COMPOSE(\"docker-compose\"),\n+    HELM(\"helm\"),\n+    SWARM(\"swarm\"),\n+    KUBERNETES(\"kubernetes\"),\n+    NOT_APPLICABLE(\"n/a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d17f57d758b363a3f41e9429ea4c5037338606e4", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/d17f57d758b363a3f41e9429ea4c5037338606e4", "committedDate": "2020-02-21T14:17:36Z", "message": "Merge branch 'develop' into feature/workflow-github-app-and-yaml-support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzI1NDkz", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-362725493", "createdAt": "2020-02-21T15:49:11Z", "commit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTo0OToxMVrOFs7ffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjowMDoyOFrOFs75_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1NjM4Mw==", "bodyText": "Add a TODO plus ticket code here for #3239\nTo let know next implementer a place where they can start", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382656383", "createdAt": "2020-02-21T15:49:11Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -294,23 +296,71 @@ public Workflow initializeWorkflow(String repositoryId, Workflow workflow) {\n         return workflow;\n     }\n \n-    @Override\n-    public Service initializeService(String repositoryId) {\n+    /**\n+     * Initialize service object for GitHub repository\n+     * @param repositoryId Organization and repository (ex. dockstore/dockstore-ui2)\n+     * @param subclass The subclass of the workflow (ex. docker-compose)\n+     * @return Service\n+     */\n+    public Service initializeServiceFromGitHub(String repositoryId, String subclass) {\n         Service service = new Service();\n         service.setOrganization(repositoryId.split(\"/\")[0]);\n         service.setRepository(repositoryId.split(\"/\")[1]);\n         service.setSourceControl(SourceControl.GITHUB);\n         service.setGitUrl(\"git@github.com:\" + repositoryId + \".git\");\n         service.setLastUpdated(new Date());\n         service.setDescriptorType(DescriptorLanguage.SERVICE);\n-        service.setMode(WorkflowMode.SERVICE);\n-        service.setDefaultWorkflowPath(\".dockstore.yml\");\n+        service.setDefaultWorkflowPath(\"/.dockstore.yml\");\n+        service.setMode(WorkflowMode.DOCKSTORE_YML);\n+\n+        // Validate subclass\n+        if (subclass != null) {\n+            DescriptorLanguageSubclass descriptorLanguageSubclass;\n+            try {\n+                descriptorLanguageSubclass = DescriptorLanguageSubclass.convertShortNameStringToEnum(subclass);\n+            } catch (UnsupportedOperationException ex) {\n+                String msg = \"Subclass \" + subclass + \" is not a valid descriptor language subclass.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1NzY3MA==", "bodyText": "TODO tag for #3239 as well", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382657670", "createdAt": "2020-02-21T15:51:27Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -502,55 +591,168 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n+            files = (List<String>)serviceObject.get(\"files\");\n+            // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+        for (String filePath: files) {\n+            String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n+            if (fileContent != null) {\n+                SourceFile file = new SourceFile();\n+                file.setAbsolutePath(filePath);\n+                file.setPath(filePath);\n+                file.setContent(fileContent);\n+                file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n+                version.getSourceFiles().add(file);\n+            } else {\n+                // File not found or null\n+                LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            }\n+        }\n \n-            version.getSourceFiles().add(dockstoreYml);\n+        return version;\n+    }\n \n-            // Grab all files from files array\n+    /**\n+     * Pull descriptor files for the given workflow version and add to version\n+     * @param ref Triple containing reference name, branch date, and SHA\n+     * @param repository GitHub repository object\n+     * @param version Version to update\n+     * @param workflow Workflow to add version to\n+     * @param existingDefaults Existing defaults\n+     * @param dockstoreYml Dockstore YML sourcefile\n+     * @return Version with updated sourcefiles\n+     */\n+    private WorkflowVersion setupWorkflowFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, Workflow workflow, Map<String, WorkflowVersion> existingDefaults, SourceFile dockstoreYml) {\n+        // Determine version information from dockstore.yml\n+        Map<String, Object> workflowMap = null;\n+        List<String> testParameterPaths = null;\n+        try {\n             Yaml yaml = new Yaml();\n-            List<String> files;\n-            try {\n-                Map<String, Object> map = yaml.load(dockstoreYmlContent);\n-                Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n-                files = (List<String>)serviceObject.get(\"files\");\n-                // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n-            } catch (YAMLException | ClassCastException | NullPointerException ex) {\n-                String msg = \"Invalid .dockstore.yml\";\n-                LOG.warn(msg, ex);\n-                return version;\n+\n+            // Find matching workflow entry in .dockstore.yml and grab information\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)map.get(\"workflows\");\n+            for (Map<String, Object> wf : workflows) {\n+                String wfName = (String)wf.get(\"name\");\n+                String dockstoreWorkflowPath = \"github.com/\" + repository.getFullName() + (wfName != null && !wfName.isEmpty() ? \"/\" + wfName : \"\");\n+\n+                if (Objects.equals(dockstoreWorkflowPath, workflow.getEntryPath())) {\n+                    workflowMap = wf;\n+                    testParameterPaths = (List<String>)wf.get(\"testParameterFiles\");\n+                    break;\n+                }\n             }\n-            for (String filePath: files) {\n-                String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n-                if (fileContent != null) {\n-                    SourceFile file = new SourceFile();\n-                    file.setAbsolutePath(filePath);\n-                    file.setPath(filePath);\n-                    file.setContent(fileContent);\n-                    file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n-                    version.getSourceFiles().add(file);\n-                } else {\n-                    // File not found or null\n-                    LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+\n+            // If no matching workflow found, ignore version\n+            if (workflowMap == null) {\n+                return null;\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+\n+        String primaryDescriptorPath = (String)workflowMap.get(\"primaryDescriptorPath\");\n+        if (primaryDescriptorPath == null)  {\n+            String msg = \".dockstore.yml is missing the required primaryDescriptorPath field.\";\n+            LOG.info(msg);\n+            return null;\n+        }\n+\n+        version.setWorkflowPath(primaryDescriptorPath);\n+\n+        String fileContent = this.readFileFromRepo(primaryDescriptorPath, ref.getLeft(), repository);\n+        if (fileContent != null) {\n+            // Add primary descriptor file and resolve imports\n+            SourceFile file = new SourceFile();\n+            file.setAbsolutePath(primaryDescriptorPath);\n+            file.setPath(primaryDescriptorPath);\n+            file.setContent(fileContent);\n+            DescriptorLanguage.FileType identifiedType = workflow.getDescriptorType().getFileType();\n+            file.setType(identifiedType);\n+            version.setWorkflowPath(primaryDescriptorPath);\n+\n+            version = combineVersionAndSourcefile(repository.getFullName(), file, workflow, identifiedType, version, existingDefaults);\n+\n+            if (testParameterPaths != null) {\n+                for (String testParameterPath : testParameterPaths) {\n+                    String testJsonContent = this.readFileFromRepo(testParameterPath, ref.getLeft(), repository);\n+                    if (testJsonContent != null) {\n+                        SourceFile testJson = new SourceFile();\n+                        // find type from file type, then find matching test param type\n+                        testJson.setType(workflow.getDescriptorType().getTestParamType());\n+                        testJson.setPath(workflow.getDefaultTestParameterFilePath());\n+                        testJson.setAbsolutePath(workflow.getDefaultTestParameterFilePath());\n+                        testJson.setContent(testJsonContent);\n+\n+                        // Only add test parameter file if it hasn't already been added\n+                        boolean hasDuplicate = version.getSourceFiles().stream().anyMatch(\n+                            (SourceFile sf) -> sf.getPath().equals(workflow.getDefaultTestParameterFilePath()) && sf.getType() == testJson.getType());\n+                        if (!hasDuplicate) {\n+                            version.getSourceFiles().add(testJson);\n+                        }\n+                    }\n                 }\n             }\n-            return version;\n         } else {\n+            // File not found or null\n+            LOG.info(\"Could not find file \" + primaryDescriptorPath + \" in repo \" + repository);\n             return null;\n         }\n+\n+        return version;\n+    }\n+\n+    /**\n+     * Retrieve the Dockstore YML from a given repository tag\n+     * @param repositoryId Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @return dockstore YML file\n+     */\n+    public SourceFile getDockstoreYml(String repositoryId, String gitReference) {\n+        String dockstoreYmlPath = \"/.dockstore.yml\";\n+        GHRepository repository;\n+        try {\n+            repository = getRepository(repositoryId);\n+        } catch (CustomWebApplicationException ex) {\n+            String msg = \"Could not find repository \" + repositoryId + \".\";\n+            LOG.warn(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+        }\n+        String dockstoreYmlContent = this.readFileFromRepo(dockstoreYmlPath, gitReference, repository);\n+        if (dockstoreYmlContent != null) {\n+            // Create file for .dockstore.yml\n+            SourceFile dockstoreYml = new SourceFile();\n+            dockstoreYml.setContent(dockstoreYmlContent);\n+            dockstoreYml.setPath(dockstoreYmlPath);\n+            dockstoreYml.setAbsolutePath(dockstoreYmlPath);\n+            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_YML);\n+\n+            return dockstoreYml;\n+        } else {\n+            String msg = \"Could not retrieve .dockstore.yml. Does the tag exist and have a .dockstore.yml?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 444}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2MDYxNw==", "bodyText": "I cut generated code some slack, but for our new own code, it is a good rule of thumb\nhttps://refactoring.guru/smells/long-parameter-list for example", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382660617", "createdAt": "2020-02-21T15:56:14Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -256,136 +213,243 @@ protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Work\n         }\n     }\n \n-\n-    protected T upsertVersion(String repository, String username, String gitReference, String installationId, WorkflowMode workflowMode) {\n-        // Retrieve the user who triggered the call (may not exist on Dockstore)\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n+    /**\n+     * Handle webhooks from GitHub apps (redirected from AWS Lambda)\n+     * - Create services and workflows when necessary\n+     * - Add or update version for corresponding service and workflow\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param username Username of GitHub user that triggered action\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param installationId GitHub App installation ID\n+     * @return List of new and updated workflows\n+     */\n+    protected List<Workflow> githubWebhookRelease(String repository, String username, String gitReference, String installationId) {\n+        // Retrieve the user who triggered the call (must exist on Dockstore if workflow is not already present)\n+        User user = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n \n         // Get Installation Access Token\n         String installationAccessToken = gitHubAppSetup(installationId);\n \n-        // Call common upsert code\n-        String dockstoreServicePath = upsertVersionHelper(repository, gitReference, null, workflowMode, installationAccessToken);\n+        // Grab Dockstore YML from GitHub\n+        GitHubSourceCodeRepo gitHubSourceCodeRepo = (GitHubSourceCodeRepo)SourceCodeRepoFactory.createGitHubAppRepo(installationAccessToken);\n+        SourceFile dockstoreYml = gitHubSourceCodeRepo.getDockstoreYml(repository, gitReference);\n \n-        // Add user to service if necessary\n-        T entity = workflowDAO.findByPath(dockstoreServicePath, false, entityClass).get();\n-        if (sendingUser != null && !entity.getUsers().contains(sendingUser)) {\n-            entity.getUsers().add(sendingUser);\n-        }\n+        // Parse Dockstore YML and perform appropriate actions\n+        Yaml yaml = new Yaml();\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            double versionString = (double)map.get(\"version\");\n+\n+            if (Objects.equals(dockstoreYMLV11, versionString)) {\n+                // 1.1 - Only works with services\n+                return createServicesAndVersionsFromDockstoreYml(dockstoreYml, repository, gitReference, gitHubSourceCodeRepo, user, map);\n+            } else if (Objects.equals(dockstoreYMLV12, versionString)) {\n+                // 1.2 - Currently only supports workflows, though will eventually support services\n+                if (map.containsKey(\"services\")) {\n+                    LOG.info(\"Services are not yet implemented for version 1.2\");\n+                }\n+\n+                if (map.containsKey(\"workflows\")) {\n+                    return createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYml, repository, gitReference, map, gitHubSourceCodeRepo, user);\n+                }\n \n-        return entity;\n+                String msg = \"Invalid .dockstore.yml\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            } else {\n+                String msg = versionString + \" is not a valid version\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+        }\n     }\n \n     /**\n-     * Does the following:\n-     * 1) Add user to any existing Dockstore services they should own\n-     *\n-     * 2) For all of the users organizations that have the GitHub App installed on all repositories in those organizations,\n-     * add any services that should be on Dockstore but are not\n-     *\n-     * 3) For all of the repositories which have the GitHub App installed, add them to Dockstore if they are missing\n-     * @param user\n-     * @param organization\n+     * Create or retrieve workflows based on Dockstore.yml, add or update tag version\n+     * ONLY WORKS FOR v1.2\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param yml Dockstore YML map\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @param user User that triggered action\n+     * @return List of new and updated workflows\n      */\n-    void syncEntitiesForUser(User user, Optional<String> organization) {\n-        List<Token> githubByUserId = tokenDAO.findGithubByUserId(user.getId());\n-\n-        if (githubByUserId.isEmpty()) {\n-            String msg = \"The user does not have a GitHub token, please create one\";\n-            LOG.info(msg);\n-            throw new CustomWebApplicationException(msg, HttpStatus.SC_BAD_REQUEST);\n-        } else {\n-            syncEntities(user, organization, githubByUserId.get(0));\n+    private List<Workflow> createBioWorkflowsAndVersionsFromDockstoreYml(SourceFile dockstoreYml, String repository, String gitReference, Map<String, Object> yml, GitHubSourceCodeRepo gitHubSourceCodeRepo, User user) {\n+        try {\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)yml.get(\"workflows\");\n+            List<Workflow> updatedWorkflows = new ArrayList<>();\n+            for (Map<String, Object> wf : workflows) {\n+                String subclass = (String)wf.get(\"subclass\");\n+                String workflowName = (String)wf.get(\"name\");\n+\n+                updatedWorkflows.add(\n+                    createWorkflowAndVersionFromDockstoreYml(BioWorkflow.class, repository, gitReference, user, dockstoreYml, workflowName,\n+                        subclass, gitHubSourceCodeRepo));\n+            }\n+            return updatedWorkflows;\n+        } catch (ClassCastException ex) {\n+            String msg = \"Could not parse workflow array from YML.\";\n+            LOG.info(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n     }\n+\n     /**\n-     * Creates an entity (service or workflow) for a GitHub repository.\n-     *\n-     * Throws an exception if the entity already exists for that GitHub repo.\n-     *\n-     * Ideally would return T instead of Workflow, but punting on that for now.\n-     *\n-     * @param githubRepository\n-     * @param username\n-     * @param installationId\n-     * @return\n+     * Create or retrieve services based on Dockstore.yml, add or update tag version\n+     * ONLY WORKS FOR v1.1\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @param user User that triggered action\n+     * @param yml Dockstore YML map\n+     * @return List of new and updated services\n      */\n-    Workflow addEntityFromGitHubRepository(String githubRepository, String username, String installationId) {\n-        // Check for duplicates (currently workflows and services share paths)\n-        String entityPath = \"github.com/\" + githubRepository;\n-\n-        // Retrieve the user who triggered the call\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(tokenDAO, userDAO, username, true);\n-\n-        // Determine if service is already in Dockstore\n-        workflowDAO.findByPath(entityPath, false, entityClass).ifPresent((entity) -> {\n-            // TODO: When we add support for workflows, this message needs to be updated\n-            String msg = \"A service already exists for GitHub repository \" + githubRepository;\n-            LOG.info(msg);\n+    private List<Workflow> createServicesAndVersionsFromDockstoreYml(SourceFile dockstoreYml, String repository, String gitReference, GitHubSourceCodeRepo gitHubSourceCodeRepo, User user, Map<String, Object> yml) {\n+        List<Workflow> updatedServices = new ArrayList<>();\n+        // TODO: Currently only supports one service per .dockstore.yml\n+        String subclass;\n+        try {\n+            Map<String, Object> serviceObject = (Map<String, Object>)yml.get(\"service\");\n+            subclass = (String)serviceObject.get(\"type\");\n+            if (subclass == null) {\n+                String msg = \"Missing required type field.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        } catch (ClassCastException ex) {\n+            String msg = \"Could not parse .dockstore.yml\";\n+            LOG.info(msg, ex);\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        });\n+        }\n+        updatedServices.add(createWorkflowAndVersionFromDockstoreYml(Service.class, repository, gitReference, user, dockstoreYml, \"\", subclass, gitHubSourceCodeRepo));\n+        return updatedServices;\n+    }\n \n-        // Get Installation Access Token\n-        String installationAccessToken = GitHubHelper.gitHubAppSetup(gitHubAppId, gitHubPrivateKeyFile, installationId);\n+    /**\n+     * Create or retrieve workflow or service based on Dockstore.yml, also add or update tag version\n+     * @param workflowType Either BioWorkflow.class or Service.class\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param user User that triggered action\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param workflowName User that triggered action\n+     * @param subclass Subclass of the workflow\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @return New or updated workflow\n+     */\n+    @SuppressWarnings({\"checkstyle:ParameterNumber\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2MTE2NA==", "bodyText": "Might be able to get away with protected", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382661164", "createdAt": "2020-02-21T15:57:06Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -256,136 +213,243 @@ protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Work\n         }\n     }\n \n-\n-    protected T upsertVersion(String repository, String username, String gitReference, String installationId, WorkflowMode workflowMode) {\n-        // Retrieve the user who triggered the call (may not exist on Dockstore)\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n+    /**\n+     * Handle webhooks from GitHub apps (redirected from AWS Lambda)\n+     * - Create services and workflows when necessary\n+     * - Add or update version for corresponding service and workflow\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param username Username of GitHub user that triggered action\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param installationId GitHub App installation ID\n+     * @return List of new and updated workflows\n+     */\n+    protected List<Workflow> githubWebhookRelease(String repository, String username, String gitReference, String installationId) {\n+        // Retrieve the user who triggered the call (must exist on Dockstore if workflow is not already present)\n+        User user = GitHubHelper.findUserByGitHubUsername(this.tokenDAO, this.userDAO, username, false);\n \n         // Get Installation Access Token\n         String installationAccessToken = gitHubAppSetup(installationId);\n \n-        // Call common upsert code\n-        String dockstoreServicePath = upsertVersionHelper(repository, gitReference, null, workflowMode, installationAccessToken);\n+        // Grab Dockstore YML from GitHub\n+        GitHubSourceCodeRepo gitHubSourceCodeRepo = (GitHubSourceCodeRepo)SourceCodeRepoFactory.createGitHubAppRepo(installationAccessToken);\n+        SourceFile dockstoreYml = gitHubSourceCodeRepo.getDockstoreYml(repository, gitReference);\n \n-        // Add user to service if necessary\n-        T entity = workflowDAO.findByPath(dockstoreServicePath, false, entityClass).get();\n-        if (sendingUser != null && !entity.getUsers().contains(sendingUser)) {\n-            entity.getUsers().add(sendingUser);\n-        }\n+        // Parse Dockstore YML and perform appropriate actions\n+        Yaml yaml = new Yaml();\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            double versionString = (double)map.get(\"version\");\n+\n+            if (Objects.equals(dockstoreYMLV11, versionString)) {\n+                // 1.1 - Only works with services\n+                return createServicesAndVersionsFromDockstoreYml(dockstoreYml, repository, gitReference, gitHubSourceCodeRepo, user, map);\n+            } else if (Objects.equals(dockstoreYMLV12, versionString)) {\n+                // 1.2 - Currently only supports workflows, though will eventually support services\n+                if (map.containsKey(\"services\")) {\n+                    LOG.info(\"Services are not yet implemented for version 1.2\");\n+                }\n+\n+                if (map.containsKey(\"workflows\")) {\n+                    return createBioWorkflowsAndVersionsFromDockstoreYml(dockstoreYml, repository, gitReference, map, gitHubSourceCodeRepo, user);\n+                }\n \n-        return entity;\n+                String msg = \"Invalid .dockstore.yml\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            } else {\n+                String msg = versionString + \" is not a valid version\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+        }\n     }\n \n     /**\n-     * Does the following:\n-     * 1) Add user to any existing Dockstore services they should own\n-     *\n-     * 2) For all of the users organizations that have the GitHub App installed on all repositories in those organizations,\n-     * add any services that should be on Dockstore but are not\n-     *\n-     * 3) For all of the repositories which have the GitHub App installed, add them to Dockstore if they are missing\n-     * @param user\n-     * @param organization\n+     * Create or retrieve workflows based on Dockstore.yml, add or update tag version\n+     * ONLY WORKS FOR v1.2\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param yml Dockstore YML map\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @param user User that triggered action\n+     * @return List of new and updated workflows\n      */\n-    void syncEntitiesForUser(User user, Optional<String> organization) {\n-        List<Token> githubByUserId = tokenDAO.findGithubByUserId(user.getId());\n-\n-        if (githubByUserId.isEmpty()) {\n-            String msg = \"The user does not have a GitHub token, please create one\";\n-            LOG.info(msg);\n-            throw new CustomWebApplicationException(msg, HttpStatus.SC_BAD_REQUEST);\n-        } else {\n-            syncEntities(user, organization, githubByUserId.get(0));\n+    private List<Workflow> createBioWorkflowsAndVersionsFromDockstoreYml(SourceFile dockstoreYml, String repository, String gitReference, Map<String, Object> yml, GitHubSourceCodeRepo gitHubSourceCodeRepo, User user) {\n+        try {\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)yml.get(\"workflows\");\n+            List<Workflow> updatedWorkflows = new ArrayList<>();\n+            for (Map<String, Object> wf : workflows) {\n+                String subclass = (String)wf.get(\"subclass\");\n+                String workflowName = (String)wf.get(\"name\");\n+\n+                updatedWorkflows.add(\n+                    createWorkflowAndVersionFromDockstoreYml(BioWorkflow.class, repository, gitReference, user, dockstoreYml, workflowName,\n+                        subclass, gitHubSourceCodeRepo));\n+            }\n+            return updatedWorkflows;\n+        } catch (ClassCastException ex) {\n+            String msg = \"Could not parse workflow array from YML.\";\n+            LOG.info(msg, ex);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n     }\n+\n     /**\n-     * Creates an entity (service or workflow) for a GitHub repository.\n-     *\n-     * Throws an exception if the entity already exists for that GitHub repo.\n-     *\n-     * Ideally would return T instead of Workflow, but punting on that for now.\n-     *\n-     * @param githubRepository\n-     * @param username\n-     * @param installationId\n-     * @return\n+     * Create or retrieve services based on Dockstore.yml, add or update tag version\n+     * ONLY WORKS FOR v1.1\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @param user User that triggered action\n+     * @param yml Dockstore YML map\n+     * @return List of new and updated services\n      */\n-    Workflow addEntityFromGitHubRepository(String githubRepository, String username, String installationId) {\n-        // Check for duplicates (currently workflows and services share paths)\n-        String entityPath = \"github.com/\" + githubRepository;\n-\n-        // Retrieve the user who triggered the call\n-        User sendingUser = GitHubHelper.findUserByGitHubUsername(tokenDAO, userDAO, username, true);\n-\n-        // Determine if service is already in Dockstore\n-        workflowDAO.findByPath(entityPath, false, entityClass).ifPresent((entity) -> {\n-            // TODO: When we add support for workflows, this message needs to be updated\n-            String msg = \"A service already exists for GitHub repository \" + githubRepository;\n-            LOG.info(msg);\n+    private List<Workflow> createServicesAndVersionsFromDockstoreYml(SourceFile dockstoreYml, String repository, String gitReference, GitHubSourceCodeRepo gitHubSourceCodeRepo, User user, Map<String, Object> yml) {\n+        List<Workflow> updatedServices = new ArrayList<>();\n+        // TODO: Currently only supports one service per .dockstore.yml\n+        String subclass;\n+        try {\n+            Map<String, Object> serviceObject = (Map<String, Object>)yml.get(\"service\");\n+            subclass = (String)serviceObject.get(\"type\");\n+            if (subclass == null) {\n+                String msg = \"Missing required type field.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        } catch (ClassCastException ex) {\n+            String msg = \"Could not parse .dockstore.yml\";\n+            LOG.info(msg, ex);\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n-        });\n+        }\n+        updatedServices.add(createWorkflowAndVersionFromDockstoreYml(Service.class, repository, gitReference, user, dockstoreYml, \"\", subclass, gitHubSourceCodeRepo));\n+        return updatedServices;\n+    }\n \n-        // Get Installation Access Token\n-        String installationAccessToken = GitHubHelper.gitHubAppSetup(gitHubAppId, gitHubPrivateKeyFile, installationId);\n+    /**\n+     * Create or retrieve workflow or service based on Dockstore.yml, also add or update tag version\n+     * @param workflowType Either BioWorkflow.class or Service.class\n+     * @param repository Repository path (ex. dockstore/dockstore-ui2)\n+     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param user User that triggered action\n+     * @param dockstoreYml Dockstore YAML File\n+     * @param workflowName User that triggered action\n+     * @param subclass Subclass of the workflow\n+     * @param gitHubSourceCodeRepo Source Code Repo\n+     * @return New or updated workflow\n+     */\n+    @SuppressWarnings({\"checkstyle:ParameterNumber\"})\n+    private Workflow createWorkflowAndVersionFromDockstoreYml(Class workflowType, String repository, String gitReference, User user, SourceFile dockstoreYml, String workflowName, String subclass, GitHubSourceCodeRepo gitHubSourceCodeRepo) {\n+        // Check for existing workflow\n+        String dockstoreWorkflowPath = \"github.com/\" + repository + (workflowName != null && !workflowName.isEmpty() ? \"/\" + workflowName : \"\");\n+        Optional<Workflow> workflow = workflowDAO.findByPath(dockstoreWorkflowPath, false, workflowType);\n+\n+        Workflow workflowToUpdate = null;\n+        // Create workflow if one does not exist\n+        if (workflow.isEmpty()) {\n+            // Ensure that a Dockstore user exists to add to the workflow\n+            if (user == null) {\n+                String msg = \"User does not have an account on Dockstore.\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n \n-        // Create a service object\n-        final GitHubSourceCodeRepo sourceCodeRepo = (GitHubSourceCodeRepo)SourceCodeRepoFactory.createGitHubAppRepo(installationAccessToken);\n+            if (workflowType == BioWorkflow.class) {\n+                workflowToUpdate = gitHubSourceCodeRepo.initializeWorkflowFromGitHub(repository, subclass, workflowName);\n+            } else if (workflowType == Service.class) {\n+                workflowToUpdate = gitHubSourceCodeRepo.initializeServiceFromGitHub(repository, subclass);\n+            } else {\n+                LOG.error(workflowType.getCanonicalName()  + \" is not a valid workflow type.\");\n+                throw new CustomWebApplicationException(\"Currently only workflows and services are supported by GitHub Apps.\", LAMBDA_FAILURE);\n+            }\n+            long workflowId = workflowDAO.create(workflowToUpdate);\n+            workflowToUpdate = workflowDAO.findById(workflowId);\n+            LOG.info(\"Workflow \" + dockstoreWorkflowPath + \" has been created.\");\n+        } else {\n+            workflowToUpdate = workflow.get();\n+            if (!Objects.equals(workflowToUpdate.getMode(), DOCKSTORE_YML)) {\n+                String msg = \"Workflow with path \" + dockstoreWorkflowPath + \" exists on Dockstore but does not use .dockstore.yml\";\n+                LOG.info(msg);\n+                throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+            }\n+        }\n+\n+        if (user != null) {\n+            workflowToUpdate.getUsers().add(user);\n+        }\n \n-        // Check that repository exists on GitHub\n         try {\n-            sourceCodeRepo.getRepository(githubRepository);\n-        } catch (CustomWebApplicationException ex) {\n-            String msg = \"Repository \" + githubRepository + \" does not exist on GitHub\";\n-            LOG.error(msg);\n+            // Create version and pull relevant files\n+            WorkflowVersion workflowVersion = gitHubSourceCodeRepo.createTagVersionForWorkflow(repository, gitReference, workflowToUpdate, dockstoreYml);\n+            workflowToUpdate.addWorkflowVersion(workflowVersion);\n+            LOG.info(\"Version \" + workflowVersion.getName() + \" has been added to workflow \" + workflowToUpdate.getWorkflowPath() + \".\");\n+        } catch (IOException ex) {\n+            String msg = \"Cannot retrieve the workflow reference from GitHub, ensure that \" + gitReference + \" is a valid tag.\";\n+            LOG.info(msg);\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n+        return workflowToUpdate;\n+    }\n+    /**\n+     * Add user to any existing Dockstore workflow and services from GitHub apps they should own\n+     * @param user\n+     */\n+    public void syncEntitiesForUser(User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2Mjg3Mg==", "bodyText": "Add TODO notes and ticket numbers for #3241", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382662872", "createdAt": "2020-02-21T15:59:55Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -502,55 +591,168 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2MzE2NA==", "bodyText": "Add TODO notes and ticket numbers for #3241\n(will skip this going forward, but there are probably many places like this)", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r382663164", "createdAt": "2020-02-21T16:00:28Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -502,55 +591,168 @@ private WorkflowVersion setupWorkflowFilesForVersion(String calculatedPath, Trip\n     }\n \n     /**\n-     * Retrieves the dockstore.yml file from GitHub and pulls all files in the files array\n-     * @param calculatedPath Path to dockstore.yml\n+     * Pull descriptor files for the given service version and add to version\n      * @param ref Triple containing reference name, branch date, and SHA\n      * @param repository GitHub repository object\n      * @param version Version to update\n+     * @param dockstoreYml Dockstore YML sourcefile\n      * @return Version with updated sourcefiles\n      */\n-    private WorkflowVersion setupServiceFilesForVersion(String calculatedPath, Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version) {\n-        String dockstoreYmlContent = this.readFileFromRepo(calculatedPath, ref.getLeft(), repository);\n-        if (dockstoreYmlContent != null) {\n-            SourceFile dockstoreYml = new SourceFile();\n-            dockstoreYml.setContent(dockstoreYmlContent);\n-            dockstoreYml.setPath(calculatedPath);\n-            dockstoreYml.setAbsolutePath(calculatedPath);\n-            dockstoreYml.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_YML);\n+    private WorkflowVersion setupServiceFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, SourceFile dockstoreYml) {\n+        // Grab all files from files array\n+        Yaml yaml = new Yaml();\n+        List<String> files;\n+        try {\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n+            files = (List<String>)serviceObject.get(\"files\");\n+            // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n+        } catch (YAMLException | ClassCastException | NullPointerException ex) {\n+            String msg = \"Invalid .dockstore.yml\";\n+            LOG.info(msg, ex);\n+            return null;\n+        }\n+        for (String filePath: files) {\n+            String fileContent = this.readFileFromRepo(filePath, ref.getLeft(), repository);\n+            if (fileContent != null) {\n+                SourceFile file = new SourceFile();\n+                file.setAbsolutePath(filePath);\n+                file.setPath(filePath);\n+                file.setContent(fileContent);\n+                file.setType(DescriptorLanguage.FileType.DOCKSTORE_SERVICE_OTHER);\n+                version.getSourceFiles().add(file);\n+            } else {\n+                // File not found or null\n+                LOG.info(\"Could not find file \" + filePath + \" in repo \" + repository);\n+            }\n+        }\n \n-            version.getSourceFiles().add(dockstoreYml);\n+        return version;\n+    }\n \n-            // Grab all files from files array\n+    /**\n+     * Pull descriptor files for the given workflow version and add to version\n+     * @param ref Triple containing reference name, branch date, and SHA\n+     * @param repository GitHub repository object\n+     * @param version Version to update\n+     * @param workflow Workflow to add version to\n+     * @param existingDefaults Existing defaults\n+     * @param dockstoreYml Dockstore YML sourcefile\n+     * @return Version with updated sourcefiles\n+     */\n+    private WorkflowVersion setupWorkflowFilesForGitHubVersion(Triple<String, Date, String> ref, GHRepository repository, WorkflowVersion version, Workflow workflow, Map<String, WorkflowVersion> existingDefaults, SourceFile dockstoreYml) {\n+        // Determine version information from dockstore.yml\n+        Map<String, Object> workflowMap = null;\n+        List<String> testParameterPaths = null;\n+        try {\n             Yaml yaml = new Yaml();\n-            List<String> files;\n-            try {\n-                Map<String, Object> map = yaml.load(dockstoreYmlContent);\n-                Map<String, Object> serviceObject = (Map<String, Object>)map.get(\"service\");\n-                files = (List<String>)serviceObject.get(\"files\");\n-                // null catch due to .dockstore.yml files like https://raw.githubusercontent.com/denis-yuen/test-malformed-app/c43103f4004241cb738280e54047203a7568a337/.dockstore.yml\n-            } catch (YAMLException | ClassCastException | NullPointerException ex) {\n-                String msg = \"Invalid .dockstore.yml\";\n-                LOG.warn(msg, ex);\n-                return version;\n+\n+            // Find matching workflow entry in .dockstore.yml and grab information\n+            Map<String, Object> map = yaml.load(dockstoreYml.getContent());\n+            List<Map<String, Object>> workflows = (List<Map<String, Object>>)map.get(\"workflows\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73cb7867104066e3650ef33a9c945b4b819969"}, "originalPosition": 331}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac8d3fd366ff95824d99547ed64b9d50a58c242", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/fac8d3fd366ff95824d99547ed64b9d50a58c242", "committedDate": "2020-02-21T20:29:51Z", "message": "more changes from pr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTIxMzQw", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-362921340", "createdAt": "2020-02-21T21:15:45Z", "commit": {"oid": "fac8d3fd366ff95824d99547ed64b9d50a58c242"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDAyMTg5", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-363402189", "createdAt": "2020-02-24T13:52:53Z", "commit": {"oid": "fac8d3fd366ff95824d99547ed64b9d50a58c242"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1Mjo1M1rOFthT1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1NzoxN1rOFthcYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3NTk4OA==", "bodyText": "missing assert fail.  test can skip apiexception and be perfectly fine.  here and other places too.", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r383275988", "createdAt": "2020-02-24T13:52:53Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ *\n+ *    Copyright 2020 OICR\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ *\n+ */\n+\n+package io.dockstore.webservice;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import io.dockstore.client.cli.BaseIT;\n+import io.dockstore.client.cli.BasicIT;\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.ConfidentialTest;\n+import io.swagger.client.ApiClient;\n+import io.swagger.client.ApiException;\n+import io.swagger.client.api.WorkflowsApi;\n+import io.swagger.client.model.Workflow;\n+import io.swagger.client.model.WorkflowVersion;\n+import org.hibernate.Session;\n+import org.hibernate.context.internal.ManagedSessionContext;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.ExpectedSystemExit;\n+import org.junit.contrib.java.lang.system.SystemErrRule;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author agduncan\n+ */\n+@Category(ConfidentialTest.class)\n+public class WebhookIT extends BaseIT {\n+    private static final int LAMBDA_ERROR = 418;\n+\n+    @Rule\n+    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog().muteForSuccessfulTests();\n+\n+    @Rule\n+    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests();\n+\n+    @Rule\n+    public final ExpectedSystemExit systemExit = ExpectedSystemExit.none();\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+    private Session session;\n+\n+    private final String workflowRepo = \"DockstoreTestUser2/workflow-dockstore-yml\";\n+    private final String installationId = \"1179416\";\n+\n+    @Before\n+    public void setup() {\n+        DockstoreWebserviceApplication application = SUPPORT.getApplication();\n+\n+        // non-confidential test database sequences seem messed up and need to be iterated past, but other tests may depend on ids\n+        testingPostgres.runUpdateStatement(\"alter sequence enduser_id_seq increment by 50 restart with 100\");\n+        testingPostgres.runUpdateStatement(\"alter sequence token_id_seq increment by 50 restart with 100\");\n+\n+        // used to allow us to use tokenDAO outside of the web service\n+        this.session = application.getHibernate().getSessionFactory().openSession();\n+        ManagedSessionContext.bind(session);\n+    }\n+\n+    /**\n+     * This tests the GitHub release process\n+     */\n+    @Test\n+    public void testGitHubReleaseNoWorkflowOnDockstore() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n+        final ApiClient webClient = getWebClient(BasicIT.USER_2_USERNAME, testingPostgres);\n+        WorkflowsApi client = new WorkflowsApi(webClient);\n+\n+        // Release 0.1 on GitHub - one new wdl workflow\n+        List<Workflow> workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"0.1\", installationId);\n+        assertEquals(\"Should only have one service\", 1, workflows.size());\n+\n+        // Ensure that new workflow is created and is what is expected\n+        Workflow workflow = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar\", \"\", false);\n+        assertEquals(\"Should be a WDL workflow\", Workflow.DescriptorTypeEnum.WDL, workflow.getDescriptorType());\n+        assertEquals(\"Should be type DOCKSTORE_YML\", Workflow.ModeEnum.DOCKSTORE_YML, workflow.getMode());\n+        assertEquals(\"Should have one version 0.1\", 1, workflow.getWorkflowVersions().size());\n+\n+        // Release 0.2 on GitHub - one existing wdl workflow, one new cwl workflow\n+        workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"0.2\", installationId);\n+        assertEquals(\"Should only have two services\", 2, workflows.size());\n+\n+        // Ensure that existing workflow is updated\n+        workflow = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar\", \"\", false);\n+        assertEquals(\"Should have two versions 0.1 and 0.2\", 2, workflow.getWorkflowVersions().size());\n+\n+        // Ensure that new workflow is created and is what is expected\n+        Workflow workflow2 = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar2\", \"\", false);\n+        assertEquals(\"Should be a CWL workflow\", Workflow.DescriptorTypeEnum.CWL, workflow2.getDescriptorType());\n+        assertEquals(\"Should be type DOCKSTORE_YML\", Workflow.ModeEnum.DOCKSTORE_YML, workflow2.getMode());\n+        assertEquals(\"Should have one version 0.2\", 1, workflow2.getWorkflowVersions().size());\n+    }\n+\n+    /**\n+     * This tests calling refresh on a workflow with a Dockstore.yml\n+     */\n+    @Test\n+    public void testManualRefreshWorkflowWithGitHubApp() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n+        final ApiClient webClient = getWebClient(BasicIT.USER_2_USERNAME, testingPostgres);\n+        WorkflowsApi client = new WorkflowsApi(webClient);\n+\n+        // Release 0.1 on GitHub - one new wdl workflow\n+        List<Workflow> workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"0.1\", installationId);\n+        assertEquals(\"Should only have one service\", 1, workflows.size());\n+\n+        // Ensure that new workflow is created and is what is expected\n+        Workflow workflow = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar\", \"\", false);\n+        assertEquals(\"Should be a WDL workflow\", Workflow.DescriptorTypeEnum.WDL, workflow.getDescriptorType());\n+        assertEquals(\"Should be type DOCKSTORE_YML\", Workflow.ModeEnum.DOCKSTORE_YML, workflow.getMode());\n+        assertEquals(\"Should have one version 0.1\", 1, workflow.getWorkflowVersions().size());\n+\n+        // Refresh\n+        workflow = client.refresh(workflow.getId());\n+        assertNotNull(workflow);\n+        assertEquals(\"Should have two workflow versions: 0.1, 0.2 and 0.3\", 3, workflow.getWorkflowVersions().size());\n+\n+        Optional<WorkflowVersion> versionTwo = workflow.getWorkflowVersions().stream().filter(workflowVersion -> Objects.equals(workflowVersion.getReference(), \"0.2\")).findFirst();\n+        Optional<WorkflowVersion> versionThree = workflow.getWorkflowVersions().stream().filter(workflowVersion -> Objects.equals(workflowVersion.getReference(), \"0.3\")).findFirst();\n+\n+        assertTrue(\"Version 0.2 should exist\", versionTwo.isPresent());\n+        assertEquals(\"\", \"/Dockstore.wdl\", versionTwo.get().getWorkflowPath());\n+\n+        assertTrue(\"Version 0.3 should exist\", versionThree.isPresent());\n+        assertEquals(\"\", \"/Dockstore2.wdl\", versionThree.get().getWorkflowPath());\n+    }\n+\n+    /**\n+     * This tests the GitHub release process does not work for users that do not exist on Dockstore\n+     */\n+    @Test\n+    public void testGitHubReleaseNoWorkflowOnDockstoreNoUser() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n+        final ApiClient webClient = getWebClient(BasicIT.USER_2_USERNAME, testingPostgres);\n+        WorkflowsApi client = new WorkflowsApi(webClient);\n+\n+        try {\n+            client.handleGitHubRelease(workflowRepo, \"thisisafakeuser\", \"0.1\", installationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac8d3fd366ff95824d99547ed64b9d50a58c242"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3ODE3OA==", "bodyText": "position 19 duplicate", "url": "https://github.com/dockstore/dockstore/pull/3230#discussion_r383278178", "createdAt": "2020-02-24T13:57:17Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Workflow.java", "diffHunk": "@@ -122,6 +123,11 @@\n     @ApiModelProperty(value = \"This is a descriptor type for the workflow, by default either CWL, WDL, NFL, or gxformat2 (Defaults to CWL).\", required = true, position = 18, allowableValues = \"CWL, WDL, NFL, gxformat2, service\")\n     private DescriptorLanguage descriptorType;\n \n+    @Column(nullable = false, columnDefinition = \"varchar(255) default 'n/a'\")\n+    @Convert(converter = DescriptorLanguageSubclassConverter.class)\n+    @ApiModelProperty(value = \"This is a descriptor type subclass for the workflow. Currently it is only used for services.\", required = true, position = 19)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac8d3fd366ff95824d99547ed64b9d50a58c242"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa70320ba9aa2dcef8ee326a6e35d3f2244985d", "author": {"user": {"login": "agduncan94", "name": "Andrew Duncan"}}, "url": "https://github.com/dockstore/dockstore/commit/4aa70320ba9aa2dcef8ee326a6e35d3f2244985d", "committedDate": "2020-02-24T14:29:34Z", "message": "Gary changes from PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDU5NjEx", "url": "https://github.com/dockstore/dockstore/pull/3230#pullrequestreview-363459611", "createdAt": "2020-02-24T15:09:40Z", "commit": {"oid": "4aa70320ba9aa2dcef8ee326a6e35d3f2244985d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1900, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}