{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODc5MjUx", "number": 3226, "title": "get quay images for cwl workflows", "bodyText": "Portion of SEAB-814, Need to do for dockerhub and make fixes for finding dockerPulls during the cwl parsing. Left some TODOs and will make tickets for them in Jira.", "createdAt": "2020-02-11T21:03:29Z", "url": "https://github.com/dockstore/dockstore/pull/3226", "merged": true, "mergeCommit": {"oid": "a5ec081ed19b3d3b75687bfa61a1725fa4377eab"}, "closed": true, "closedAt": "2020-02-19T19:41:20Z", "author": {"login": "NatalieEO"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDYxkRgFqTM1Njk5OTk4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF72D0gFqTM2MTM4MTE5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTk5OTg2", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-356999986", "createdAt": "2020-02-11T21:15:43Z", "commit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToxNTo0M1rOFoZWOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozMjoxNlrOFoZ5QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMjY1MQ==", "bodyText": "Create variable for error_message so you don't repeat it.\nDo you mean to continue if there's an error? I guess the other code will just fall through harmlessly?", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r377902651", "createdAt": "2020-02-11T21:15:43Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();\n+        dockerTools = (ArrayList<Map<String, String>>)gson.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker = image.split(\"/\");\n+                String[] splitTag = splitDocker[2].split(\":\");\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {\n+                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n+                        Map<String, String> errorMap = new HashMap<>();\n+                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(\"error_message\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDI5OA==", "bodyText": "I thought we discussed not allowing snapshotting if the images were parameterizable. Is that covered in another ticket?\nAlso, if there are errors in getting the images, this will fail silently and there will be no indication to the user. If there is an error, should we even allow snapshotting? Not sure...", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r377910298", "createdAt": "2020-02-11T21:29:43Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1307,7 +1309,16 @@ public Workflow manualRegister(@ApiParam(hidden = true) @Auth User user,\n                     existingTag.setDirtyBit(true);\n                 }\n \n+                boolean wasFrozen = existingTag.isFrozen();\n                 existingTag.updateByUser(version);\n+                boolean nowFrozen = existingTag.isFrozen();\n+                // If version is snapshotted on this update, grab and store image information\n+                if (!wasFrozen && nowFrozen) {\n+                    LanguageHandlerInterface lInterface = LanguageHandlerFactory.getInterface(w.getFileType());\n+                    String toolsJSONTable = lInterface.getContent(w.getWorkflowPath(), getMainDescriptorFile(existingTag).getContent(), extractDescriptorAndSecondaryFiles(existingTag), LanguageHandlerInterface.Type.TOOLS, toolDAO);\n+                    Set<Image> images = lInterface.getImagesFromRegistry(toolsJSONTable);\n+                    existingTag.getImages().addAll(images);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMTE5Ng==", "bodyText": "LOG.error instead of info\nLog the exception itself as well.", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r377911196", "createdAt": "2020-02-11T21:31:27Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();\n+        dockerTools = (ArrayList<Map<String, String>>)gson.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker = image.split(\"/\");\n+                String[] splitTag = splitDocker[2].split(\":\");\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {\n+                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n+                        Map<String, String> errorMap = new HashMap<>();\n+                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(\"error_message\") != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(\"error_message\"));\n+                        }\n+\n+                        try {\n+                            final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                            for (Map<String, String> tag : array) {\n+                                final String digest = tag.get(\"manifest_digest\");\n+                                final String imageID = tag.get(\"image_id\");\n+                                List<Checksum> checksums = new ArrayList<>();\n+                                checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                            }\n+\n+                        } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                            LOG.error(\"Could not get checksum information for \" + splitDocker[1]);\n+                        }\n+                    }\n+                } else {\n+                    LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n+                }\n+\n+            } else if (image.startsWith(\"images.sbgenomics\")) {\n+                return dockerImages;\n+\n+            } else if (image.startsWith(\"registry.gitlab.com\")) {\n+                return dockerImages;\n+\n+            } else if (parts.length == 2) {\n+                //dockerhub\n+                return dockerImages;\n+            }\n+        }\n+        return dockerImages;\n+    }\n+\n+    default Optional<String> getImageResponseFromQuay(String dockerName) {\n+        String[] splitDocker = dockerName.split(\"/\");\n+        String[] splitTag = splitDocker[2].split(\":\");\n+        final String tagUrl = QUAY_URL + \"repository/\" + splitDocker[1] + \"/\" + splitTag[0] + \"/tag/\" + \"?specificTag=\" + splitTag[1];\n+        Optional<String> response;\n+\n+        try {\n+            URL url = new URL(tagUrl);\n+            response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n+            if (response.isPresent()) {\n+                return response;\n+            }\n+        } catch (IOException ex) {\n+            LOG.info(\"Unable to get response from Quay\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMTYxNw==", "bodyText": "I don't think you need this if statement; if it's empty, you would just return the empty optional, which is what you want.", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r377911617", "createdAt": "2020-02-11T21:32:16Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();\n+        dockerTools = (ArrayList<Map<String, String>>)gson.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker = image.split(\"/\");\n+                String[] splitTag = splitDocker[2].split(\":\");\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {\n+                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n+                        Map<String, String> errorMap = new HashMap<>();\n+                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(\"error_message\") != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(\"error_message\"));\n+                        }\n+\n+                        try {\n+                            final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                            for (Map<String, String> tag : array) {\n+                                final String digest = tag.get(\"manifest_digest\");\n+                                final String imageID = tag.get(\"image_id\");\n+                                List<Checksum> checksums = new ArrayList<>();\n+                                checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                            }\n+\n+                        } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                            LOG.error(\"Could not get checksum information for \" + splitDocker[1]);\n+                        }\n+                    }\n+                } else {\n+                    LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n+                }\n+\n+            } else if (image.startsWith(\"images.sbgenomics\")) {\n+                return dockerImages;\n+\n+            } else if (image.startsWith(\"registry.gitlab.com\")) {\n+                return dockerImages;\n+\n+            } else if (parts.length == 2) {\n+                //dockerhub\n+                return dockerImages;\n+            }\n+        }\n+        return dockerImages;\n+    }\n+\n+    default Optional<String> getImageResponseFromQuay(String dockerName) {\n+        String[] splitDocker = dockerName.split(\"/\");\n+        String[] splitTag = splitDocker[2].split(\":\");\n+        final String tagUrl = QUAY_URL + \"repository/\" + splitDocker[1] + \"/\" + splitTag[0] + \"/tag/\" + \"?specificTag=\" + splitTag[1];\n+        Optional<String> response;\n+\n+        try {\n+            URL url = new URL(tagUrl);\n+            response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n+            if (response.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDMzOTc4", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-357033978", "createdAt": "2020-02-11T22:09:54Z", "commit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjowOTo1NVrOFobAGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjowOTo1NVrOFobAGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyOTc1Mg==", "bodyText": "Question: Why this over TagApi.listRepoTagsWithHttpInfo()?", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r377929752", "createdAt": "2020-02-11T22:09:55Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();\n+        dockerTools = (ArrayList<Map<String, String>>)gson.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker = image.split(\"/\");\n+                String[] splitTag = splitDocker[2].split(\":\");\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {\n+                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n+                        Map<String, String> errorMap = new HashMap<>();\n+                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(\"error_message\") != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(\"error_message\"));\n+                        }\n+\n+                        try {\n+                            final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                            for (Map<String, String> tag : array) {\n+                                final String digest = tag.get(\"manifest_digest\");\n+                                final String imageID = tag.get(\"image_id\");\n+                                List<Checksum> checksums = new ArrayList<>();\n+                                checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                            }\n+\n+                        } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                            LOG.error(\"Could not get checksum information for \" + splitDocker[1]);\n+                        }\n+                    }\n+                } else {\n+                    LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n+                }\n+\n+            } else if (image.startsWith(\"images.sbgenomics\")) {\n+                return dockerImages;\n+\n+            } else if (image.startsWith(\"registry.gitlab.com\")) {\n+                return dockerImages;\n+\n+            } else if (parts.length == 2) {\n+                //dockerhub\n+                return dockerImages;\n+            }\n+        }\n+        return dockerImages;\n+    }\n+\n+    default Optional<String> getImageResponseFromQuay(String dockerName) {\n+        String[] splitDocker = dockerName.split(\"/\");\n+        String[] splitTag = splitDocker[2].split(\":\");\n+        final String tagUrl = QUAY_URL + \"repository/\" + splitDocker[1] + \"/\" + splitTag[0] + \"/tag/\" + \"?specificTag=\" + splitTag[1];\n+        Optional<String> response;\n+\n+        try {\n+            URL url = new URL(tagUrl);\n+            response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTQ0MjA1", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-357544205", "createdAt": "2020-02-12T15:26:09Z", "commit": {"oid": "cb82de835fb4a35f60e3fa8656236ca991a1b71e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyNjowOVrOFoy-LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozMDozN1rOFozKlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMjQ3Ng==", "bodyText": "Can use List<Map<String, String>>\nhttps://stackoverflow.com/questions/9852831/polymorphism-why-use-list-list-new-arraylist-instead-of-arraylist-list-n kind of idea", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r378322476", "createdAt": "2020-02-12T15:26:09Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb82de835fb4a35f60e3fa8656236ca991a1b71e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMjgzMg==", "bodyText": "Can create once for the class since it doesn't change from method call to method call", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r378322832", "createdAt": "2020-02-12T15:26:41Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb82de835fb4a35f60e3fa8656236ca991a1b71e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNDEzNQ==", "bodyText": "Thought, this could be hooked up to a validation warning when we have it.\nFurther food for thought in #3216", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r378324135", "createdAt": "2020-02-12T15:28:34Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();\n+        dockerTools = (ArrayList<Map<String, String>>)gson.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String errorKey = \"error_message\";\n+                String[] splitDocker = image.split(\"/\");\n+                String[] splitTag = splitDocker[2].split(\":\");\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {\n+                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n+                        Map<String, String> errorMap = new HashMap<>();\n+                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(errorKey) != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n+                        } else {\n+                            try {\n+                                final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                                for (Map<String, String> tag : array) {\n+                                    final String digest = tag.get(\"manifest_digest\");\n+                                    final String imageID = tag.get(\"image_id\");\n+                                    List<Checksum> checksums = new ArrayList<>();\n+                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                    dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                                }\n+\n+                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                                LOG.error(\"Could not get checksum information for \" + splitDocker[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb82de835fb4a35f60e3fa8656236ca991a1b71e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNTY1NQ==", "bodyText": "Would be worth a follow-up ticket to fix it (the quay.io swagger), this code is pretty hard to read/understand", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r378325655", "createdAt": "2020-02-12T15:30:37Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +333,92 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        ArrayList<Map<String, String>> dockerTools = new ArrayList<>();\n+        Gson gson = new Gson();\n+        dockerTools = (ArrayList<Map<String, String>>)gson.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker = image.split(\"/\");\n+                String[] splitTag = splitDocker[2].split(\":\");\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {\n+                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n+                        Map<String, String> errorMap = new HashMap<>();\n+                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(\"error_message\") != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(\"error_message\"));\n+                        }\n+\n+                        try {\n+                            final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                            for (Map<String, String> tag : array) {\n+                                final String digest = tag.get(\"manifest_digest\");\n+                                final String imageID = tag.get(\"image_id\");\n+                                List<Checksum> checksums = new ArrayList<>();\n+                                checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                            }\n+\n+                        } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                            LOG.error(\"Could not get checksum information for \" + splitDocker[1]);\n+                        }\n+                    }\n+                } else {\n+                    LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n+                }\n+\n+            } else if (image.startsWith(\"images.sbgenomics\")) {\n+                return dockerImages;\n+\n+            } else if (image.startsWith(\"registry.gitlab.com\")) {\n+                return dockerImages;\n+\n+            } else if (parts.length == 2) {\n+                //dockerhub\n+                return dockerImages;\n+            }\n+        }\n+        return dockerImages;\n+    }\n+\n+    default Optional<String> getImageResponseFromQuay(String dockerName) {\n+        String[] splitDocker = dockerName.split(\"/\");\n+        String[] splitTag = splitDocker[2].split(\":\");\n+        final String tagUrl = QUAY_URL + \"repository/\" + splitDocker[1] + \"/\" + splitTag[0] + \"/tag/\" + \"?specificTag=\" + splitTag[1];\n+        Optional<String> response;\n+\n+        try {\n+            URL url = new URL(tagUrl);\n+            response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyOTc1Mg=="}, "originalCommit": {"oid": "2398600ecb9b1eba6abcf9fc50d027f5cdc71ff6"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTE3ODY5", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-359117869", "createdAt": "2020-02-14T17:56:54Z", "commit": {"oid": "24fc9ce669bbe491f1ab74d7e0fd91aae4249d9d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzo1Njo1NVrOFp-5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowNToyNlrOFp_HhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NjM2NQ==", "bodyText": "Log the exception itself as well as a second parameter", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379566365", "createdAt": "2020-02-14T17:56:55Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -362,25 +363,25 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n                     if (response.isPresent()) {\n                         Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n                         Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(\"error_message\") != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(\"error_message\"));\n-                        }\n-\n-                        try {\n-                            final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                            for (Map<String, String> tag : array) {\n-                                final String digest = tag.get(\"manifest_digest\");\n-                                final String imageID = tag.get(\"image_id\");\n-                                List<Checksum> checksums = new ArrayList<>();\n-                                checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(errorKey) != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n+                        } else {\n+                            try {\n+                                final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                                for (Map<String, String> tag : array) {\n+                                    final String digest = tag.get(\"manifest_digest\");\n+                                    final String imageID = tag.get(\"image_id\");\n+                                    List<Checksum> checksums = new ArrayList<>();\n+                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                    dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                                }\n+\n+                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                                LOG.error(\"Could not get checksum information for \" + splitDocker[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fc9ce669bbe491f1ab74d7e0fd91aae4249d9d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MDA1Mw==", "bodyText": "Also, what can cause the IndexOutOfBoundsException? If it's on splitDocker, which on a quick skim of the code, I don't think it is, then you'll get an exception logging the exception.\nAlso, rather than using indexes, it would be nice to have a variable name, but not crucial.", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379570053", "createdAt": "2020-02-14T18:05:26Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -362,25 +363,25 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n                     if (response.isPresent()) {\n                         Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n                         Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)gson.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)gson.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(\"error_message\") != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(\"error_message\"));\n-                        }\n-\n-                        try {\n-                            final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                            for (Map<String, String> tag : array) {\n-                                final String digest = tag.get(\"manifest_digest\");\n-                                final String imageID = tag.get(\"image_id\");\n-                                List<Checksum> checksums = new ArrayList<>();\n-                                checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n+                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n+                        if (errorMap.get(errorKey) != null) {\n+                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n+                        } else {\n+                            try {\n+                                final List<Map<String, String>> array = map.get(\"tags\");\n+\n+                                for (Map<String, String> tag : array) {\n+                                    final String digest = tag.get(\"manifest_digest\");\n+                                    final String imageID = tag.get(\"image_id\");\n+                                    List<Checksum> checksums = new ArrayList<>();\n+                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n+                                    dockerImages.add(new Image(checksums, repo, tagName, imageID));\n+                                }\n+\n+                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n+                                LOG.error(\"Could not get checksum information for \" + splitDocker[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NjM2NQ=="}, "originalCommit": {"oid": "24fc9ce669bbe491f1ab74d7e0fd91aae4249d9d"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTkxOTMx", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-359191931", "createdAt": "2020-02-14T20:10:35Z", "commit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDoxMDozNlrOFqCXtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0NTozNFrOFqDLfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMzM0OA==", "bodyText": "Make an issue if it hasn't been done already", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379623348", "createdAt": "2020-02-14T20:10:36Z", "author": {"login": "garyluu"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/EventResourceIT.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.ConfidentialTest;\n+import io.dockstore.common.Registry;\n+import io.dockstore.common.ToolTest;\n+import io.dockstore.webservice.jdbi.EventDAO;\n+import io.dockstore.webservice.resources.EventSearchType;\n+import io.swagger.client.ApiClient;\n+import io.swagger.client.ApiException;\n+import io.swagger.client.api.ContainersApi;\n+import io.swagger.client.api.ContainertagsApi;\n+import io.swagger.client.api.EventsApi;\n+import io.swagger.client.model.DockstoreTool;\n+import io.swagger.client.model.Event;\n+import io.swagger.client.model.StarRequest;\n+import io.swagger.client.model.Tag;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.ExpectedSystemExit;\n+import org.junit.contrib.java.lang.system.SystemErrRule;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+import org.junit.experimental.categories.Category;\n+\n+import static io.swagger.client.model.DockstoreTool.ModeEnum.MANUAL_IMAGE_PATH;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * This test was originally in BasicIT, but it sometimes fails on travis and fails consistently locally if it is run with another test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMTY5MQ==", "bodyText": "something something stream map collector to set", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379631691", "createdAt": "2020-02-14T20:32:31Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +334,91 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        List<Map<String, String>> dockerTools = new ArrayList<>();\n+        dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzMyNw==", "bodyText": "this doesn't need to be in the loop", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379633327", "createdAt": "2020-02-14T20:36:52Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -324,6 +334,91 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        List<Map<String, String>> dockerTools = new ArrayList<>();\n+        dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        Set<String> dockerStrings = new HashSet<>();\n+\n+        // Eliminate duplicate docker strings\n+        for (Map<String, String> tool : dockerTools) {\n+            dockerStrings.add(tool.get(\"docker\"));\n+        }\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String errorKey = \"error_message\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNjYwNA==", "bodyText": "update comments in this function. probably rename function too", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379636604", "createdAt": "2020-02-14T20:45:34Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -1638,6 +1649,9 @@ private void initializeValidations(String include, Workflow workflow) {\n         if (checkIncludes(include, ALIASES)) {\n             workflow.getWorkflowVersions().forEach(workflowVersion -> Hibernate.initialize(workflowVersion.getAliases()));\n         }\n+        if (checkIncludes(include, IMAGES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzI2OTk5", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-359326999", "createdAt": "2020-02-15T05:03:53Z", "commit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTowMzo1M1rOFqJHvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNTowNDozNVrOFqJI3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczMzk1MA==", "bodyText": "Extra line, don't know f it does anything. Does this test run this way?\nThink it was like this before, but still.", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379733950", "createdAt": "2020-02-15T05:03:53Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/EventResourceIT.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.ConfidentialTest;\n+import io.dockstore.common.Registry;\n+import io.dockstore.common.ToolTest;\n+import io.dockstore.webservice.jdbi.EventDAO;\n+import io.dockstore.webservice.resources.EventSearchType;\n+import io.swagger.client.ApiClient;\n+import io.swagger.client.ApiException;\n+import io.swagger.client.api.ContainersApi;\n+import io.swagger.client.api.ContainertagsApi;\n+import io.swagger.client.api.EventsApi;\n+import io.swagger.client.model.DockstoreTool;\n+import io.swagger.client.model.Event;\n+import io.swagger.client.model.StarRequest;\n+import io.swagger.client.model.Tag;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.ExpectedSystemExit;\n+import org.junit.contrib.java.lang.system.SystemErrRule;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+import org.junit.experimental.categories.Category;\n+\n+import static io.swagger.client.model.DockstoreTool.ModeEnum.MANUAL_IMAGE_PATH;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * This test was originally in BasicIT, but it sometimes fails on travis and fails consistently locally if it is run with another test\n+ * before it. If testRefreshAfterDeletingAVersion() was run before, eventResource fails. But if you comment out the lines that refresh the\n+ * tool then in testRefresh, the eventResource will pass. Separating out this test for now.\n+ */\n+@Category({ ConfidentialTest.class, ToolTest.class })\n+public class EventResourceIT extends BaseIT {\n+    @Rule\n+    public final ExpectedSystemExit systemExit = ExpectedSystemExit.none();\n+\n+    @Rule\n+    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog().muteForSuccessfulTests();\n+\n+    @Rule\n+    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests();\n+\n+    @Before\n+    @Override\n+    public void resetDBBetweenTests() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate1(SUPPORT);\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:parameternumber\")\n+    private DockstoreTool manualRegisterAndPublish(ContainersApi containersApi, String namespace, String name, String toolName,\n+        String gitUrl, String cwlPath, String wdlPath, String dockerfilePath, DockstoreTool.RegistryEnum registry, String gitReference,\n+        String versionName, boolean toPublish, boolean isPrivate, String email, String customDockerPath) {\n+        DockstoreTool newTool = new DockstoreTool();\n+        newTool.setNamespace(namespace);\n+        newTool.setName(name);\n+        newTool.setToolname(toolName);\n+        newTool.setDefaultCwlPath(cwlPath);\n+        newTool.setDefaultWdlPath(wdlPath);\n+        newTool.setDefaultDockerfilePath(dockerfilePath);\n+        newTool.setGitUrl(gitUrl);\n+        newTool.setRegistry(registry);\n+        newTool.setRegistryString(registry.getValue());\n+        newTool.setMode(MANUAL_IMAGE_PATH);\n+        newTool.setPrivateAccess(isPrivate);\n+        newTool.setToolMaintainerEmail(email);\n+        if (customDockerPath != null) {\n+            newTool.setRegistryString(customDockerPath);\n+        }\n+\n+        if (!Registry.QUAY_IO.name().equals(registry.name())) {\n+            Tag tag = new Tag();\n+            tag.setReference(gitReference);\n+            tag.setName(versionName);\n+            tag.setDockerfilePath(dockerfilePath);\n+            tag.setCwlPath(cwlPath);\n+            tag.setWdlPath(wdlPath);\n+            List<Tag> tags = new ArrayList<>();\n+            tags.add(tag);\n+            newTool.setWorkflowVersions(tags);\n+        }\n+\n+        // Manually register\n+        DockstoreTool tool = containersApi.registerManual(newTool);\n+\n+        // Refresh\n+        tool = containersApi.refresh(tool.getId());\n+\n+        // Publish\n+        if (toPublish) {\n+            tool = containersApi.publish(tool.getId(), SwaggerUtility.createPublishRequest(true));\n+            assertTrue(tool.isIsPublished());\n+        }\n+        return tool;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:parameternumber\")\n+    private DockstoreTool manualRegisterAndPublish(ContainersApi containersApi, String namespace, String name, String toolName,\n+            String gitUrl, String cwlPath, String wdlPath, String dockerfilePath, DockstoreTool.RegistryEnum registry, String gitReference,\n+            String versionName, boolean toPublish) {\n+        return manualRegisterAndPublish(containersApi, namespace, name, toolName, gitUrl, cwlPath, wdlPath, dockerfilePath, registry,\n+                gitReference, versionName, toPublish, false, null, null);\n+    }\n+\n+\n+    @Test()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTczNDIzNw==", "bodyText": "Do this before a merge.\nI would actually suggest https://github.com/dockstore-testing (in this case, I might be wrong but I don't think the test users need to own these workflows)", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r379734237", "createdAt": "2020-02-15T05:04:35Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/WorkflowIT.java", "diffHunk": "@@ -846,6 +849,47 @@ public void testManualRegisterThenPublish() throws ApiException {\n         workflowApi.publish(bitbucketWorkflow.getId(), publishRequest);\n     }\n \n+    //TODO: Fork these workflows onto dockstoretestuser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e00931bd674fccacea0c75aeeed11bc8466d4e", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/50e00931bd674fccacea0c75aeeed11bc8466d4e", "committedDate": "2020-02-18T22:18:25Z", "message": "get quay images for cwl workflows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b1227a50d9b3abc1791d4204682de4e54c8dd50", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/6b1227a50d9b3abc1791d4204682de4e54c8dd50", "committedDate": "2020-02-18T22:18:25Z", "message": "error message, log error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b9d8ff0e9f56efbdc5b23833f35f53c71c8845f", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/2b9d8ff0e9f56efbdc5b23833f35f53c71c8845f", "committedDate": "2020-02-18T22:18:25Z", "message": "no underscore :/"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "550c1cc3ab2f102f66b574fdddb3bf8e2255c44a", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/550c1cc3ab2f102f66b574fdddb3bf8e2255c44a", "committedDate": "2020-02-18T22:18:25Z", "message": "find the leak, other fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6758eeaaa575caeda38723654e48c1aca77e0461", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/6758eeaaa575caeda38723654e48c1aca77e0461", "committedDate": "2020-02-18T22:18:25Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001e91f389b373e7c17e2d1db2a84750e6067222", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/001e91f389b373e7c17e2d1db2a84750e6067222", "committedDate": "2020-02-18T22:24:07Z", "message": "separate out test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a0dfd05ac67748a836cda36a3c012ab227ab5ec", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/6a0dfd05ac67748a836cda36a3c012ab227ab5ec", "committedDate": "2020-02-18T22:24:07Z", "message": "Spacing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ecf3c67b5d2d87646e554a91e92b458dea7d708", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/3ecf3c67b5d2d87646e554a91e92b458dea7d708", "committedDate": "2020-02-18T22:24:07Z", "message": "pr changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a39b21335cbfd6409b0a3c93736a7522703d1ac9", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/a39b21335cbfd6409b0a3c93736a7522703d1ac9", "committedDate": "2020-02-14T18:03:06Z", "message": "Spacing"}, "afterCommit": {"oid": "3ecf3c67b5d2d87646e554a91e92b458dea7d708", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/3ecf3c67b5d2d87646e554a91e92b458dea7d708", "committedDate": "2020-02-18T22:24:07Z", "message": "pr changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzM5NTI0", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-360739524", "createdAt": "2020-02-18T23:07:10Z", "commit": {"oid": "3ecf3c67b5d2d87646e554a91e92b458dea7d708"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowNzoxMFrOFrVwpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxNjoyM1rOFrV8lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4OTYwNw==", "bodyText": "You are not explicitly handling the case if it is not present. If that is intentional, could you add a comment? If unintentional, you should handle.", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r380989607", "createdAt": "2020-02-18T23:07:10Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -325,6 +335,97 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        List<Map<String, String>> dockerTools = new ArrayList<>();\n+        dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        // Eliminate duplicate docker strings\n+        Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        String errorKey = \"error_message\";\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker;\n+                String[] splitTag;\n+\n+                try {\n+                    splitDocker = image.split(\"/\");\n+                    splitTag = splitDocker[2].split(\":\");\n+                } catch (ArrayIndexOutOfBoundsException ex) {\n+                    LOG.error(\"URL to image on Quay incomplete\", ex);\n+                    break;\n+                }\n+\n+\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);\n+\n+                    if (response.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ecf3c67b5d2d87646e554a91e92b458dea7d708"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MjY2MA==", "bodyText": "You recalculate splitDocker and splitTag inside getImageResponseFromQuay when you already calculated them above on lines 357-358.\nYou're not going to used repo and tagName unless you get inside the if (response.isPresent()... statement below; I would move lines 366-367 to inside the if block, where you actually need/use them.", "url": "https://github.com/dockstore/dockstore/pull/3226#discussion_r380992660", "createdAt": "2020-02-18T23:16:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -325,6 +335,97 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n+    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n+        List<Map<String, String>> dockerTools = new ArrayList<>();\n+        dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+\n+        // Eliminate duplicate docker strings\n+        Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n+\n+        Set<Image> dockerImages = new HashSet<>();\n+        String errorKey = \"error_message\";\n+        for (String image : dockerStrings) {\n+            String[] parts = image.split(\"/\");\n+\n+            Optional<String> response;\n+            if (image.startsWith(\"quay.io/\")) {\n+                String[] splitDocker;\n+                String[] splitTag;\n+\n+                try {\n+                    splitDocker = image.split(\"/\");\n+                    splitTag = splitDocker[2].split(\":\");\n+                } catch (ArrayIndexOutOfBoundsException ex) {\n+                    LOG.error(\"URL to image on Quay incomplete\", ex);\n+                    break;\n+                }\n+\n+\n+                if (splitTag.length > 1) {\n+                    String repo = splitDocker[1] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n+                    response = getImageResponseFromQuay(image);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ecf3c67b5d2d87646e554a91e92b458dea7d708"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "754052259af40c9188c5fc7c0d46d9c274e7b6ee", "author": {"user": {"login": "NatalieEO", "name": null}}, "url": "https://github.com/dockstore/dockstore/commit/754052259af40c9188c5fc7c0d46d9c274e7b6ee", "committedDate": "2020-02-19T06:01:41Z", "message": "handle response not present, more readable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjg0MDcz", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-361284073", "createdAt": "2020-02-19T17:21:27Z", "commit": {"oid": "754052259af40c9188c5fc7c0d46d9c274e7b6ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzgxMTk2", "url": "https://github.com/dockstore/dockstore/pull/3226#pullrequestreview-361381196", "createdAt": "2020-02-19T19:39:09Z", "commit": {"oid": "754052259af40c9188c5fc7c0d46d9c274e7b6ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1896, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}