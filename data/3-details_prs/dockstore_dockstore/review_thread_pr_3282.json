{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDA3OTEy", "number": 3282, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzo0OTo1NVrODj5jqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MzoyNFrODkxkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTY5NzcxOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzo0OTo1NVrOFv9hbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzo0OTo1NVrOFv9hbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNTM3NA==", "bodyText": "Suggest LOG.error", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r385835374", "createdAt": "2020-02-28T17:49:55Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -893,28 +891,44 @@ public void syncUserMetadataFromGitHub(User user) {\n     }\n \n     /**\n-     * Retrieves a tag from GitHub and creates a version on Dockstore\n+     * Retrieves a tag/branch from GitHub and creates a version on Dockstore\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n-     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param gitReference Branch/tag reference from GitHub (ex. refs/tags/1.0)\n      * @param workflow Workflow to add version to\n      * @param dockstoreYml Dockstore YML sourcefile\n      * @return New or updated version\n      * @throws IOException\n      */\n-    public WorkflowVersion createTagVersionForWorkflow(String repository, String gitReference, Workflow workflow, SourceFile dockstoreYml) throws IOException {\n+    public WorkflowVersion createVersionForWorkflow(String repository, String gitReference, Workflow workflow, SourceFile dockstoreYml) throws IOException {\n         GHRepository ghRepository = getRepository(repository);\n-        String refName = \"tags/\" + gitReference;\n-        GHRef ghRef = ghRepository.getRef(refName);\n+\n+        // Match the github reference (ex. refs/heads/feature/foobar or refs/tags/1.0)\n+        Pattern pattern = Pattern.compile(\"^refs/(tags|heads)/([a-zA-Z0-9]+([./_-]?[a-zA-Z0-9]+)*)$\");\n+        Matcher matcher = pattern.matcher(gitReference);\n+\n+        if (!matcher.find()) {\n+            String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n+            LOG.info(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c03af2ab872a93e515427dccdf080a7630b251"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTcxNTc2OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzo1NjoxOFrOFv9stA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzo1NjoxOFrOFv9stA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODI2MA==", "bodyText": "This is fine, but if so inclined you could just do existingVersion.isPresent(v -> workflow.removeWorkflowVersion(v)) instead of needing an if statement an calling 'get (exact syntax probably wrong)", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r385838260", "createdAt": "2020-02-28T17:56:18Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -893,28 +891,44 @@ public void syncUserMetadataFromGitHub(User user) {\n     }\n \n     /**\n-     * Retrieves a tag from GitHub and creates a version on Dockstore\n+     * Retrieves a tag/branch from GitHub and creates a version on Dockstore\n      * @param repository Repository path (ex. dockstore/dockstore-ui2)\n-     * @param gitReference Tag reference from GitHub (ex. 1.0)\n+     * @param gitReference Branch/tag reference from GitHub (ex. refs/tags/1.0)\n      * @param workflow Workflow to add version to\n      * @param dockstoreYml Dockstore YML sourcefile\n      * @return New or updated version\n      * @throws IOException\n      */\n-    public WorkflowVersion createTagVersionForWorkflow(String repository, String gitReference, Workflow workflow, SourceFile dockstoreYml) throws IOException {\n+    public WorkflowVersion createVersionForWorkflow(String repository, String gitReference, Workflow workflow, SourceFile dockstoreYml) throws IOException {\n         GHRepository ghRepository = getRepository(repository);\n-        String refName = \"tags/\" + gitReference;\n-        GHRef ghRef = ghRepository.getRef(refName);\n+\n+        // Match the github reference (ex. refs/heads/feature/foobar or refs/tags/1.0)\n+        Pattern pattern = Pattern.compile(\"^refs/(tags|heads)/([a-zA-Z0-9]+([./_-]?[a-zA-Z0-9]+)*)$\");\n+        Matcher matcher = pattern.matcher(gitReference);\n+\n+        if (!matcher.find()) {\n+            String msg = \"Reference \" + gitReference + \" is not of the valid form\";\n+            LOG.info(msg);\n+            throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n+        }\n+        String gitBranchType = matcher.group(1);\n+        String gitBranchName = matcher.group(2);\n+\n+        GHRef ghRef = ghRepository.getRef(gitBranchType + \"/\" + gitBranchName);\n \n         Triple<String, Date, String> ref = getRef(ghRef, ghRepository);\n         if (ref == null) {\n-            String msg = \"Cannot retrieve the workflow reference from GitHub, ensure that \" + gitReference + \" is a valid tag.\";\n+            String msg = \"Cannot retrieve the workflow reference from GitHub, ensure that \" + gitReference + \" is a valid branch/tag.\";\n             LOG.info(msg);\n             throw new CustomWebApplicationException(msg, LAMBDA_FAILURE);\n         }\n \n-        // Find existing version if it exists\n-        Optional<WorkflowVersion> existingVersion = workflow.getWorkflowVersions().stream().filter(workflowVersion -> Objects.equals(workflowVersion.getReference(), gitReference)).findFirst();\n+        // Delete existing version if it exists\n+        Optional<WorkflowVersion> existingVersion = workflow.getWorkflowVersions().stream().filter(workflowVersion -> Objects.equals(workflowVersion.getReference(), gitBranchName)).findFirst();\n+        if (existingVersion.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c03af2ab872a93e515427dccdf080a7630b251"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDAxOTU3OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/ServiceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0MToyMVrOFwAoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0MToyMVrOFwAoOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NjI2NA==", "bodyText": "Will die if DockstoreTestUser2 releases a new version or someone starts working on a PR", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r385886264", "createdAt": "2020-02-28T19:41:21Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/ServiceIT.java", "diffHunk": "@@ -353,16 +353,15 @@ public void updateServiceSync() throws Exception {\n         String installationId = \"1179416\";\n \n         // Add service\n-        List<io.swagger.client.model.Workflow> services = client.handleGitHubRelease(serviceRepo, \"DockstoreTestUser2\", \"1.0\", installationId);\n+        List<io.swagger.client.model.Workflow> services = client.handleGitHubRelease(serviceRepo, \"DockstoreTestUser2\", \"refs/tags/1.0\", installationId);\n         assertEquals(\"Should only have one service\", 1, services.size());\n         io.swagger.client.model.Workflow service = services.get(0);\n         service = client.refresh(service.getId());\n         assertNotNull(service);\n-        assertEquals(\"Should have one new version (one release has no yaml, another has invalid yaml)\", 1, service.getWorkflowVersions().size());\n+        assertEquals(\"Should have two new versions master and 1.0\", 2, service.getWorkflowVersions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c03af2ab872a93e515427dccdf080a7630b251"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDAyMTc5OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0MjowOVrOFwApmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozNzozNVrOFwfvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NjYxOA==", "bodyText": "Ditto", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r385886618", "createdAt": "2020-02-28T19:42:09Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -115,6 +115,16 @@ public void testGitHubReleaseNoWorkflowOnDockstore() throws Exception {\n         assertEquals(\"Should be a CWL workflow\", Workflow.DescriptorTypeEnum.CWL, workflow2.getDescriptorType());\n         assertEquals(\"Should be type DOCKSTORE_YML\", Workflow.ModeEnum.DOCKSTORE_YML, workflow2.getMode());\n         assertEquals(\"Should have one version 0.2\", 1, workflow2.getWorkflowVersions().size());\n+\n+        // Branch master on GitHub - updates two existing workflows\n+        workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"refs/heads/master\", installationId);\n+        assertEquals(\"Should only have two services\", 2, workflows.size());\n+\n+        workflow = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar\", \"\", false);\n+        assertEquals(\"Should have three versions 0.1, 0.2, and master\", 3, workflow.getWorkflowVersions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c03af2ab872a93e515427dccdf080a7630b251"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NjA3Nw==", "bodyText": "In this case I am explicitly adding versions, not calling a refresh. But I'll update to check for versions by name.", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r386396077", "createdAt": "2020-03-02T13:37:35Z", "author": {"login": "agduncan94"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -115,6 +115,16 @@ public void testGitHubReleaseNoWorkflowOnDockstore() throws Exception {\n         assertEquals(\"Should be a CWL workflow\", Workflow.DescriptorTypeEnum.CWL, workflow2.getDescriptorType());\n         assertEquals(\"Should be type DOCKSTORE_YML\", Workflow.ModeEnum.DOCKSTORE_YML, workflow2.getMode());\n         assertEquals(\"Should have one version 0.2\", 1, workflow2.getWorkflowVersions().size());\n+\n+        // Branch master on GitHub - updates two existing workflows\n+        workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"refs/heads/master\", installationId);\n+        assertEquals(\"Should only have two services\", 2, workflows.size());\n+\n+        workflow = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar\", \"\", false);\n+        assertEquals(\"Should have three versions 0.1, 0.2, and master\", 3, workflow.getWorkflowVersions().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NjYxOA=="}, "originalCommit": {"oid": "27c03af2ab872a93e515427dccdf080a7630b251"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDAyMjk5OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0MjozM1rOFwAqSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0MjozM1rOFwAqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4Njc5NA==", "bodyText": "Ditto (and will not repeat below)", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r385886794", "createdAt": "2020-02-28T19:42:33Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -139,16 +149,20 @@ public void testManualRefreshWorkflowWithGitHubApp() throws Exception {\n         // Refresh\n         workflow = client.refresh(workflow.getId());\n         assertNotNull(workflow);\n-        assertEquals(\"Should have two workflow versions: 0.1, 0.2 and 0.3\", 3, workflow.getWorkflowVersions().size());\n+        assertEquals(\"Should have four workflow versions: 0.1, 0.2 and 0.3, and master\", 4, workflow.getWorkflowVersions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c03af2ab872a93e515427dccdf080a7630b251"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg3NTQ2OnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MzoyNFrOFxSTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MzoyNFrOFxSTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyNDQ3NA==", "bodyText": "Isn't that a refresh on line 152?\nCouldn't someone else create new branches on DockstoreTestUser2/workflow-dockstore-yml and then break this?", "url": "https://github.com/dockstore/dockstore/pull/3282#discussion_r387224474", "createdAt": "2020-03-03T18:53:24Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -127,28 +139,36 @@ public void testManualRefreshWorkflowWithGitHubApp() throws Exception {\n         WorkflowsApi client = new WorkflowsApi(webClient);\n \n         // Release 0.1 on GitHub - one new wdl workflow\n-        List<Workflow> workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"0.1\", installationId);\n+        List<Workflow> workflows = client.handleGitHubRelease(workflowRepo, \"DockstoreTestUser2\", \"refs/tags/0.1\", installationId);\n         assertEquals(\"Should only have one service\", 1, workflows.size());\n \n         // Ensure that new workflow is created and is what is expected\n         Workflow workflow = client.getWorkflowByPath(\"github.com/\" + workflowRepo + \"/foobar\", \"\", false);\n         assertEquals(\"Should be a WDL workflow\", Workflow.DescriptorTypeEnum.WDL, workflow.getDescriptorType());\n         assertEquals(\"Should be type DOCKSTORE_YML\", Workflow.ModeEnum.DOCKSTORE_YML, workflow.getMode());\n-        assertEquals(\"Should have one version 0.1\", 1, workflow.getWorkflowVersions().size());\n+        assertTrue(\"Should have a 0.1 version.\", workflow.getWorkflowVersions().stream().anyMatch((WorkflowVersion version) -> Objects.equals(version.getName(), \"0.1\")));\n \n         // Refresh\n         workflow = client.refresh(workflow.getId());\n         assertNotNull(workflow);\n-        assertEquals(\"Should have two workflow versions: 0.1, 0.2 and 0.3\", 3, workflow.getWorkflowVersions().size());\n+        assertEquals(\"Should have four workflow versions: 0.1, 0.2 and 0.3, and master\", 4, workflow.getWorkflowVersions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6cd7885f46b2f58dc41a221da60aeda2f440b1"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3021, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}