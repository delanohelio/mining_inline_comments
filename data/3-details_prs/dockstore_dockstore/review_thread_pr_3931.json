{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTcxNjU5", "number": 3931, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1MTowMVrOE6RMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyNjozMFrOE9XVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTM0NDc4OnYy", "diffSide": "LEFT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1MTowMVrOH1OvEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowOTo1MlrOH2vtzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3ODAwMw==", "bodyText": "Can't comment on it directly, but above there's  .DS_Store which is I think Mac specific?", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525578003", "createdAt": "2020-11-17T22:51:01Z", "author": {"login": "denis-yuen"}, "path": ".circleci/config.yml", "diffHunk": "@@ -12,7 +12,7 @@ executors:\n           PG_HOST: localhost\n           POSTGRES_HOST_AUTH_METHOD: trust\n           POSTGRES_PASSWORD: postgres\n-      - image: docker.elastic.co/elasticsearch/elasticsearch:6.8.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NjkyNw==", "bodyText": "whoops, removed it", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r527166927", "createdAt": "2020-11-19T20:09:52Z", "author": {"login": "nrzhao4"}, "path": ".circleci/config.yml", "diffHunk": "@@ -12,7 +12,7 @@ executors:\n           PG_HOST: localhost\n           POSTGRES_HOST_AUTH_METHOD: trust\n           POSTGRES_PASSWORD: postgres\n-      - image: docker.elastic.co/elasticsearch/elasticsearch:6.8.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3ODAwMw=="}, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTM0ODQzOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1MjowMFrOH1OxNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1MjowMFrOH1OxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3ODU0OQ==", "bodyText": "Response is kinda redundant in these two methods (can return directly)", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525578549", "createdAt": "2020-11-17T22:52:00Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "diffHunk": "@@ -197,41 +197,25 @@ public Response toolsIndexGet(SecurityContext securityContext) {\n         return Response.ok().entity(0).build();\n     }\n \n+    @Override\n+    public Response entriesIndexSearch(String query, MultivaluedMap<String, String> queryParameters, SecurityContext securityContext) {\n+        final String index = \"tools,workflows\";\n+        Response response = searchIndex(query, queryParameters, index);\n+        return response;\n+    }\n+\n     @Override\n     public Response toolsIndexSearch(String query, MultivaluedMap<String, String> queryParameters, SecurityContext securityContext) {\n-        if (!config.getEsConfiguration().getHostname().isEmpty()) {\n-            try (RestClient restClient = RestClient\n-                    .builder(new HttpHost(config.getEsConfiguration().getHostname(), config.getEsConfiguration().getPort(), \"http\"))\n-                    .build()) {\n-                HttpEntity entity = query == null ? null : new NStringEntity(query, ContentType.APPLICATION_JSON);\n-                Map<String, String> parameters = new HashMap<>();\n-                // TODO: note that this is lossy if there are repeated parameters\n-                // but it looks like the elastic search http client classes don't handle it\n-                if (queryParameters != null) {\n-                    queryParameters.forEach((key, value) -> parameters.put(key, value.get(0)));\n-                }\n-                org.elasticsearch.client.Response get = restClient.performRequest(\"GET\", \"/tools,workflows/_search\", parameters, entity);\n-                if (get.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n-                    throw new CustomWebApplicationException(\"Could not submit index to elastic search\",\n-                            HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-                }\n-                return Response.ok().entity(get.getEntity().getContent()).build();\n-            } catch (ResponseException e) {\n-                // Only surface these codes to the user, everything else is not entirely obvious so returning 500 instead.\n-                int[] codesToResurface = {HttpStatus.SC_BAD_REQUEST};\n-                int statusCode = e.getResponse().getStatusLine().getStatusCode();\n-                LOG.error(\"Could not use Elasticsearch search\", e);\n-                if (ArrayUtils.contains(codesToResurface, statusCode)) {\n-                    throw new CustomWebApplicationException(e.getMessage(), statusCode);\n-                } else {\n-                    throw new CustomWebApplicationException(e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-                }\n-            } catch (IOException e2) {\n-                LOG.error(\"Could not use Elasticsearch search\", e2);\n-                throw new CustomWebApplicationException(e2.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-            }\n-        }\n-        return Response.ok().entity(0).build();\n+        final String index = \"tools\";\n+        Response response = searchIndex(query, queryParameters, index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTM3NjI0OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsExtendedApi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowMTowMVrOH1PBkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowMTowMVrOH1PBkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MjczNw==", "bodyText": "The main TRS repo has the concept of a toolClass https://github.com/ga4gh/tool-registry-service-schemas/blob/develop/openapi/ga4gh-tool-discovery.yaml#L147\nThis is a parameter which filters down tools by subclass (DockstoreTool, Workflow).\nWould it be possible to have the same parameter here for consistency (leaving it blank or null to get entries/all)\nThe Strings for the ToolClasses are available here \n  \n    \n      dockstore/dockstore-webservice/src/main/java/io/openapi/api/impl/ToolClassesApiServiceImpl.java\n    \n    \n         Line 34\n      in\n      b64cb4e\n    \n    \n    \n    \n\n        \n          \n           public static final String COMMAND_LINE_TOOL = \"CommandLineTool\";", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525582737", "createdAt": "2020-11-17T23:01:01Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsExtendedApi.java", "diffHunk": "@@ -83,32 +83,58 @@ public Response toolsOrgGet(\n     }\n \n     @POST\n-    @Path(\"/tools/entry/_search\")\n+    @Path(\"/entries/all/_search\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    @ApiOperation(nickname = EntriesIndexSearch.OPERATION_ID, value = EntriesIndexSearch.SUMMARY, notes = EntriesIndexSearch.DESCRIPTION, response = String.class)\n+    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = EntriesIndexSearch.OK_RESPONSE, response = String.class) })\n+    @Operation(operationId = EntriesIndexSearch.OPERATION_ID, summary = EntriesIndexSearch.SUMMARY, description = EntriesIndexSearch.DESCRIPTION, responses = {\n+            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = EntriesIndexSearch.OK_RESPONSE, content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(implementation = String.class)))\n+    })\n+    public Response entriesIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query,\n+        @Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n+        return delegate.entriesIndexSearch(query, uriInfo != null ? uriInfo.getQueryParameters() : null, securityContext);\n+    }\n+\n+    @POST\n+    @Path(\"/entries/tools/_search\")\n     @Produces({ MediaType.APPLICATION_JSON })\n     @ApiOperation(nickname = ToolsIndexSearch.OPERATION_ID, value = ToolsIndexSearch.SUMMARY, notes = ToolsIndexSearch.DESCRIPTION, response = String.class)\n     @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = ToolsIndexSearch.OK_RESPONSE, response = String.class) })\n     @Operation(operationId = ToolsIndexSearch.OPERATION_ID, summary = ToolsIndexSearch.SUMMARY, description = ToolsIndexSearch.DESCRIPTION, responses = {\n             @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = ToolsIndexSearch.OK_RESPONSE, content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(implementation = String.class)))\n     })\n-    public Response toolsIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query, @Context UriInfo uriInfo,\n-        @Context SecurityContext securityContext) {\n+    public Response toolsIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query,\n+                                       @Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n         return delegate.toolsIndexSearch(query, uriInfo != null ? uriInfo.getQueryParameters() : null, securityContext);\n     }\n \n     @POST\n-    @Path(\"/tools/index\")\n+    @Path(\"/entries/workflows/_search\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    @ApiOperation(nickname = WorkflowsIndexSearch.OPERATION_ID, value = WorkflowsIndexSearch.SUMMARY, notes = WorkflowsIndexSearch.DESCRIPTION, response = String.class)\n+    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = WorkflowsIndexSearch.OK_RESPONSE, response = String.class) })\n+    @Operation(operationId = WorkflowsIndexSearch.OPERATION_ID, summary = WorkflowsIndexSearch.SUMMARY, description = WorkflowsIndexSearch.DESCRIPTION, responses = {\n+            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = WorkflowsIndexSearch.OK_RESPONSE, content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(implementation = String.class)))\n+    })\n+    public Response workflowsIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query,\n+                                     @Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n+        return delegate.workflowsIndexSearch(query, uriInfo != null ? uriInfo.getQueryParameters() : null, securityContext);\n+    }\n+\n+    @POST\n+    @Path(\"/entries/index\")\n     @UnitOfWork\n     @RolesAllowed({\"curator\", \"admin\"})\n     @Produces({ MediaType.TEXT_PLAIN })\n-    @ApiOperation(value = ToolsIndexGet.SUMMARY, notes = ToolsIndexGet.DESCRIPTION, authorizations = {\n+    @ApiOperation(value = EntriesIndexGet.SUMMARY, notes = EntriesIndexGet.DESCRIPTION, authorizations = {\n         @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Integer.class)\n-    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = ToolsIndexGet.OK_RESPONSE) })\n-    @Operation(operationId = ToolsIndexGet.SUMMARY, summary = ToolsIndexGet.SUMMARY, description = ToolsIndexGet.DESCRIPTION, security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = {\n-        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = ToolsIndexGet.OK_RESPONSE, content = @Content(mediaType = MediaType.TEXT_PLAIN, schema = @Schema(implementation = Integer.class)))\n+    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = EntriesIndexGet.OK_RESPONSE) })\n+    @Operation(operationId = EntriesIndexGet.SUMMARY, summary = EntriesIndexGet.SUMMARY, description = EntriesIndexGet.DESCRIPTION, security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = {\n+        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = EntriesIndexGet.OK_RESPONSE, content = @Content(mediaType = MediaType.TEXT_PLAIN, schema = @Schema(implementation = Integer.class)))\n     })\n-    public Response toolsIndexGet(@ApiParam(hidden = true) @Parameter(hidden = true) @Auth User user, @Context SecurityContext securityContext)\n+    public Response entriesIndexGet(@ApiParam(hidden = true) @Parameter(hidden = true) @Auth User user, @Context SecurityContext securityContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTUyMzQ4OnYy", "diffSide": "LEFT", "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1OTo0NFrOH1QYpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1OTo0NFrOH1QYpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNTAzMQ==", "bodyText": "Ugh...I missed an endpoint in my fix", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525605031", "createdAt": "2020-11-17T23:59:44Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "diffHunk": "@@ -1841,7 +1841,7 @@ paths:\n           content:\n             application/json:\n               schema:\n-                $ref: '#/components/schemas/WorkflowVersion'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTU2Nzg1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDoxODo1M1rOH1QyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDoxODo1M1rOH1QyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxMTYxNw==", "bodyText": "I don't know ES terminology very well, but it seems like you're querying an index, not submitting one.", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525611617", "createdAt": "2020-11-18T00:18:53Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "diffHunk": "@@ -290,4 +274,41 @@ private void deleteIndex(RestClient restClient, String index) {\n             LOG.warn(\"Could not delete previous elastic search \" + index + \" index, not an issue if this is cold start\", e);\n         }\n     }\n+\n+    private Response searchIndex(String query, MultivaluedMap<String, String> queryParameters, String index) {\n+        if (!config.getEsConfiguration().getHostname().isEmpty()) {\n+            try (RestClient restClient = RestClient\n+                    .builder(new HttpHost(config.getEsConfiguration().getHostname(), config.getEsConfiguration().getPort(), \"http\"))\n+                    .build()) {\n+                HttpEntity entity = query == null ? null : new NStringEntity(query, ContentType.APPLICATION_JSON);\n+                Map<String, String> parameters = new HashMap<>();\n+                // TODO: note that this is lossy if there are repeated parameters\n+                // but it looks like the elastic search http client classes don't handle it\n+                if (queryParameters != null) {\n+                    queryParameters.forEach((key, value) -> parameters.put(key, value.get(0)));\n+                }\n+                org.elasticsearch.client.Response get = restClient.performRequest(\"GET\", \"/\" + index + \"/_search\", parameters, entity);\n+                if (get.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n+                    throw new CustomWebApplicationException(\"Could not submit \" + index + \"index to elastic search\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTYwNTkwOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDozNDozNVrOH1RIew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDozNDozNVrOH1RIew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxNzI3NQ==", "bodyText": "This is minor, but since we someday might have dedicated indexes for services and/or notebooks, I would move this up to the top along with constants for tools and workflows. Actually it looks like you also have the index names in ElasticListener -- the index names should be defined once, ideally.", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525617275", "createdAt": "2020-11-18T00:34:35Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "diffHunk": "@@ -197,41 +197,25 @@ public Response toolsIndexGet(SecurityContext securityContext) {\n         return Response.ok().entity(0).build();\n     }\n \n+    @Override\n+    public Response entriesIndexSearch(String query, MultivaluedMap<String, String> queryParameters, SecurityContext securityContext) {\n+        final String index = \"tools,workflows\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f258b07a2211074690b7eded772bd08249687b0a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc5MzUyOnYy", "diffSide": "RIGHT", "path": "dockstore-integration-testing/src/test/java/io/dockstore/common/CommonTestUtilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyMToyNFrOH6BAaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTozMzoxMFrOH6BWBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTk0Nw==", "bodyText": "Does the new ES take longer to start up?\nA more reliable way would be to run a command against the container, but probably not worth the effort. I think this is only called for a few tests. But if it's called by every test, it's going to significantly increase our build time (100 tests * 10 seconds) = 16 minutes (although we run in parallel).", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530595947", "createdAt": "2020-11-25T19:21:24Z", "author": {"login": "coverbeck"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/common/CommonTestUtilities.java", "diffHunk": "@@ -357,9 +357,9 @@ public static void restartElasticsearch() throws Exception {\n             Container container = elasticsearch.get();\n             try {\n                 docker.restartContainer(container.id());\n-                // Wait 15 seconds for elasticsearch to become ready\n+                // Wait 25 seconds for elasticsearch to become ready\n                 // TODO: Replace with better wait\n-                Thread.sleep(15000);\n+                Thread.sleep(25000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMTQ3OA==", "bodyText": "Yup, the new ES wasn't starting within 15 seconds", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530601478", "createdAt": "2020-11-25T19:33:10Z", "author": {"login": "nrzhao4"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/common/CommonTestUtilities.java", "diffHunk": "@@ -357,9 +357,9 @@ public static void restartElasticsearch() throws Exception {\n             Container container = elasticsearch.get();\n             try {\n                 docker.restartContainer(container.id());\n-                // Wait 15 seconds for elasticsearch to become ready\n+                // Wait 25 seconds for elasticsearch to become ready\n                 // TODO: Replace with better wait\n-                Thread.sleep(15000);\n+                Thread.sleep(25000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTk0Nw=="}, "originalCommit": {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc5NzUwOnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/resources/swagger.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyMjo0NVrOH6BC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTozMTo1NVrOH6BTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NjU4Nw==", "bodyText": "Hmm...\n\nIs it returning two arrays?\nIs it returning one with multiple types?\nPerhaps it should return just the number of tools/workflows\nMaybe it should just not return any body, just a 200", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530596587", "createdAt": "2020-11-25T19:22:45Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/resources/swagger.yaml", "diffHunk": "@@ -541,15 +541,16 @@ paths:\n     post:\n       tags:\n       - \"extendedGA4GH\"\n-      summary: \"Update the index of tools\"\n-      description: \"This endpoint updates the index for all published tools and workflows.\"\n+      summary: \"Update the workflows and tools indices\"\n+      description: \"This endpoint updates the indices for all published tools and\\\n+        \\ workflows.\"\n       operationId: \"toolsIndexGet\"\n       produces:\n       - \"text/plain\"\n       parameters: []\n       responses:\n         200:\n-          description: \"An array of Tools of the input organization.\"\n+          description: \"An array of Tools and an array of Workflows.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMDA5MQ==", "bodyText": "* Maybe it should just not return any body, just a 200\n\n\nNot sure about the broader point, but if it doesn't return a body, it should technically return a 204.", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530600091", "createdAt": "2020-11-25T19:30:14Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/resources/swagger.yaml", "diffHunk": "@@ -541,15 +541,16 @@ paths:\n     post:\n       tags:\n       - \"extendedGA4GH\"\n-      summary: \"Update the index of tools\"\n-      description: \"This endpoint updates the index for all published tools and workflows.\"\n+      summary: \"Update the workflows and tools indices\"\n+      description: \"This endpoint updates the indices for all published tools and\\\n+        \\ workflows.\"\n       operationId: \"toolsIndexGet\"\n       produces:\n       - \"text/plain\"\n       parameters: []\n       responses:\n         200:\n-          description: \"An array of Tools of the input organization.\"\n+          description: \"An array of Tools and an array of Workflows.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NjU4Nw=="}, "originalCommit": {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMDkwNA==", "bodyText": "Hm technically it doesn't \"return\" anything, it just updates the index entries and the frontend loads those into arrays", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530600904", "createdAt": "2020-11-25T19:31:55Z", "author": {"login": "nrzhao4"}, "path": "dockstore-webservice/src/main/resources/swagger.yaml", "diffHunk": "@@ -541,15 +541,16 @@ paths:\n     post:\n       tags:\n       - \"extendedGA4GH\"\n-      summary: \"Update the index of tools\"\n-      description: \"This endpoint updates the index for all published tools and workflows.\"\n+      summary: \"Update the workflows and tools indices\"\n+      description: \"This endpoint updates the indices for all published tools and\\\n+        \\ workflows.\"\n       operationId: \"toolsIndexGet\"\n       produces:\n       - \"text/plain\"\n       parameters: []\n       responses:\n         200:\n-          description: \"An array of Tools of the input organization.\"\n+          description: \"An array of Tools and an array of Workflows.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NjU4Nw=="}, "originalCommit": {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzgwODU1OnYy", "diffSide": "RIGHT", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/statelisteners/ElasticListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyNjozMFrOH6BJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyNjozMFrOH6BJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5ODM0Mg==", "bodyText": "I'd probably make these public and reference them from dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java.", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530598342", "createdAt": "2020-11-25T19:26:30Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/statelisteners/ElasticListener.java", "diffHunk": "@@ -63,6 +63,8 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ElasticListener.class);\n     private static final ObjectMapper MAPPER = Jackson.newObjectMapper();\n     private static final String MAPPER_ERROR = \"Could not convert Dockstore entry to Elasticsearch object\";\n+    private static final String TOOLS_INDEX = \"tools\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2751, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}