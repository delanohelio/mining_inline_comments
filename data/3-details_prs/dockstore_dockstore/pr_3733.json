{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2Nzk2MzEx", "number": 3733, "title": ".dockstore.yml in .github/ dir & Adding filters to .dockstore.yml", "bodyText": "#3682 & #3695 in the same PR since tests use same new GitHub testing repo.\nSupport Dockstore.yml existing in the /.github folder: #3682\n\nusing new DOCKSTORE_YML_PATHS constant list to check possible/allowed .dockstore.yml locations in order\n\nAdd filters to .dockstore.yml: #3695\n\nnew filters: list field in .dockstore.yml workflows & services\nif filters: is not included, don't filter out anything\nif filters: is included, only include branchs/tags matching the specified filters\nfilter matching strings use Linux-style globbing by default; matching strings surrounded by / use regex\nusing Java's PathMatcher for out-of-the-box glob/regex matching (matching the requested behaviour)\nsee WebhookIT test comments for branches/tags filtering examples\n\nExample:\nfilters:\n  branches:\n    - develop\n    - feature/**\n  tags:\n    - gwas*\n    - /\\d+\\.\\d+\\.\\d+/", "createdAt": "2020-08-12T14:08:24Z", "url": "https://github.com/dockstore/dockstore/pull/3733", "merged": true, "mergeCommit": {"oid": "75eb62cfd1e74f109d7eaf1309a1e00521631890"}, "closed": true, "closedAt": "2020-08-27T17:50:33Z", "author": {"login": "GFJHogue"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc94rhYgH2gAyNDY2Nzk2MzExOjE0ZGEwMDFhYjg5MTExZDgxOTEwOWYyYWQyZDgwNWViMmEwMGIxMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDD1IAgH2gAyNDY2Nzk2MzExOjlmNmEzMTNjMTYwZTQwMjg4ZGU4ZDdjNzE2YTk5NDIyZDI4MTlkMjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14da001ab89111d819109f2ad2d805eb2a00b131", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/14da001ab89111d819109f2ad2d805eb2a00b131", "committedDate": "2020-08-11T15:37:41Z", "message": "add filters to .dockstore.yml (WIP - needs tests)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7a04d03fa89d54a79ba335bba7993914dfb124", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/5e7a04d03fa89d54a79ba335bba7993914dfb124", "committedDate": "2020-08-12T13:44:56Z", "message": "add .github/.dockstore.yml as alternative .dockstore.yml path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5418612a6478e31f1738f7520bef088fd3cf07b9", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/5418612a6478e31f1738f7520bef088fd3cf07b9", "committedDate": "2020-08-12T13:45:57Z", "message": "tests for .dockstore.yml in .github/ & filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be93ff94bf2c6fe87318067c8dfc86d5874f1d34", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/be93ff94bf2c6fe87318067c8dfc86d5874f1d34", "committedDate": "2020-08-12T14:11:25Z", "message": "fix misleading filters comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTc2ODEz", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-465976813", "createdAt": "2020-08-12T14:33:08Z", "commit": {"oid": "be93ff94bf2c6fe87318067c8dfc86d5874f1d34"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozMzowOVrOG_kHCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDozNToyM1rOG_kNiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNTA5Nw==", "bodyText": "too similar to the other part, combine somehow.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469305097", "createdAt": "2020-08-12T14:33:09Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -411,6 +430,21 @@ private LambdaEvent createBasicEvent(String repository, String gitReference, Str\n             GitHubSourceCodeRepo gitHubSourceCodeRepo, User user, final SourceFile dockstoreYml) {\n         final List<Workflow> updatedServices = new ArrayList<>();\n         if (service != null) {\n+            final Path gitRefPath = Path.of(gitReference);\n+            final List<String> filters = service.getFilter();\n+            // Ignore filters if none specified\n+            Boolean isFiltered = !filters.isEmpty();\n+            for (String filter : filters) {\n+                final PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**/\" + filter);\n+                // If filter matches, don't exclude service\n+                if (pathMatcher.matches(gitRefPath)) {\n+                    isFiltered = false;\n+                    break;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be93ff94bf2c6fe87318067c8dfc86d5874f1d34"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjc2MA==", "bodyText": "There's a way to stream() anymatch/nonematch this", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469306760", "createdAt": "2020-08-12T14:35:23Z", "author": {"login": "garyluu"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -411,6 +430,21 @@ private LambdaEvent createBasicEvent(String repository, String gitReference, Str\n             GitHubSourceCodeRepo gitHubSourceCodeRepo, User user, final SourceFile dockstoreYml) {\n         final List<Workflow> updatedServices = new ArrayList<>();\n         if (service != null) {\n+            final Path gitRefPath = Path.of(gitReference);\n+            final List<String> filters = service.getFilter();\n+            // Ignore filters if none specified\n+            Boolean isFiltered = !filters.isEmpty();\n+            for (String filter : filters) {\n+                final PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**/\" + filter);\n+                // If filter matches, don't exclude service\n+                if (pathMatcher.matches(gitRefPath)) {\n+                    isFiltered = false;\n+                    break;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be93ff94bf2c6fe87318067c8dfc86d5874f1d34"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409f7ae2398a22be74a165874b872909981a90d5", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/409f7ae2398a22be74a165874b872909981a90d5", "committedDate": "2020-08-12T15:17:43Z", "message": "filtering code for workflows/services abstracted into 1 function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDIyOTEx", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-466022911", "createdAt": "2020-08-12T15:21:57Z", "commit": {"oid": "be93ff94bf2c6fe87318067c8dfc86d5874f1d34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyMTo1N1rOG_mSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyMTo1N1rOG_mSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MDgyMg==", "bodyText": "Have not worked with this library yet (looks like a good choice though)\nDoes  this **/ mean that if someone specifies develop as a filter will it will match a branch called feature/develop?\nAlternatively, will it be hubflow compatible?\nFor example if someone specifies feature/foo as a filter, will this work or would it only match potato/feature/foo?", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469340822", "createdAt": "2020-08-12T15:21:57Z", "author": {"login": "denis-yuen"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -383,7 +386,23 @@ private LambdaEvent createBasicEvent(String repository, String gitReference, Str\n             final SourceFile dockstoreYml) {\n         try {\n             List<Workflow> updatedWorkflows = new ArrayList<>();\n+            final Path gitRefPath = Path.of(gitReference);\n             for (YamlWorkflow wf : yamlWorkflows) {\n+                final List<String> filters = wf.getFilter();\n+                // Ignore filters if none specified\n+                Boolean isFiltered = !filters.isEmpty();\n+                for (String filter : filters) {\n+                    final PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**/\" + filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be93ff94bf2c6fe87318067c8dfc86d5874f1d34"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd8319235203ceb7871a1d1593ed9fe0a9026a83", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/dd8319235203ceb7871a1d1593ed9fe0a9026a83", "committedDate": "2020-08-12T15:44:51Z", "message": "remove leading slash from filters glob pathMatcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDc0MTI5", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-466074129", "createdAt": "2020-08-12T16:19:19Z", "commit": {"oid": "dd8319235203ceb7871a1d1593ed9fe0a9026a83"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxOToxOVrOG_o0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjozMDoyN1rOG_pOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MjE4OQ==", "bodyText": "I think this should go somewhere else -- if we ever add dockstore.yml support to tools, this code wouldn't be accessible.\nI think this method is a good candidate for unit tests, where you could throw a bunch of patterns it at to make sure they work as expected.\nCircleCI filters have separate subsections for branches and tags. We're not going with that syntax, which is fine, but I think we need to have that functionality expressable. Maybe it's already here and I just don't know the pattern of a gitRefPath, but for example, is it possible to:\n\nFilter for all tags but no branches\nFilter for all releases, no branches, and no tags that aren't also releases (this one is a stretch and may not be possible)\nOther patterns that I can't think of?\n\n\n\nIf these are possible, could you give examples in comments and/or the unit tests? If not, I think we need to handle them, in particular the only filter tags case.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469382189", "createdAt": "2020-08-12T16:19:19Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -419,6 +430,19 @@ private LambdaEvent createBasicEvent(String repository, String gitReference, Str\n         return updatedServices;\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    private boolean filterGitReference(final Path gitRefPath, final List<String> filters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8319235203ceb7871a1d1593ed9fe0a9026a83"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NzUyMw==", "bodyText": "I always go back and forth in my head about the meaning of filter (filter in or filter out?), but in Java, streams (and JavaScript filter as well), a filter that returns true means it should be included, so I think you should either rename this function or keep the name and reverse what it returns.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469387523", "createdAt": "2020-08-12T16:28:06Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -419,6 +430,19 @@ private LambdaEvent createBasicEvent(String repository, String gitReference, Str\n         return updatedServices;\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    private boolean filterGitReference(final Path gitRefPath, final List<String> filters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8319235203ceb7871a1d1593ed9fe0a9026a83"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4ODkzOQ==", "bodyText": "I find double negatives harder to understand; if you reverse the return value of the function per my other suggestion, then you wouldn't need the negations here.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469388939", "createdAt": "2020-08-12T16:30:27Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -419,6 +430,19 @@ private LambdaEvent createBasicEvent(String repository, String gitReference, Str\n         return updatedServices;\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    private boolean filterGitReference(final Path gitRefPath, final List<String> filters) {\n+        return !filters.isEmpty() && !filters.stream().anyMatch(filter -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8319235203ceb7871a1d1593ed9fe0a9026a83"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6daec496ad56e33ebce96f80bf8aa59fd4ea5368", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/6daec496ad56e33ebce96f80bf8aa59fd4ea5368", "committedDate": "2020-08-12T16:31:32Z", "message": "remove leading ** from filters matching & use a git reference \"template\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82eaa14aade81d93ed883788ccd563ecc6d4b4e4", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/82eaa14aade81d93ed883788ccd563ecc6d4b4e4", "committedDate": "2020-08-12T17:04:44Z", "message": "relocate filterGitReference() and negate boolean result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbff5e4792972f9ae11db30953986f6f82f86a9e", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/bbff5e4792972f9ae11db30953986f6f82f86a9e", "committedDate": "2020-08-12T17:34:06Z", "message": "move function above inner class to fix checkstyle error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/773cdc2ca21ef27973d5e2595c8756e232ea6070", "committedDate": "2020-08-12T19:28:34Z", "message": "regex filters (surround with /) & unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzQwMDYz", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-466340063", "createdAt": "2020-08-12T23:20:23Z", "commit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzoyMDoyM1rOG_2Ghw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDozN1rOG_2wTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5OTg3OQ==", "bodyText": "I think these should be assertFalse -- I was going to write a comment about how you should have some negative tests.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469599879", "createdAt": "2020-08-12T23:20:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/test/java/io/dockstore/common/yaml/DockstoreYamlTest.java", "diffHunk": "@@ -198,4 +202,81 @@ public void testGalaxySubclass() throws DockstoreYamlHelper.DockstoreYamlExcepti\n         assertEquals(4, workflows.stream().filter(w -> w.getSubclass().equalsIgnoreCase(\"gxformat2\")).count());\n     }\n \n+    @Test\n+    public void testGitReferenceFilter() {\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"anything\"), List.of()));\n+\n+        // Generic name filter\n+        // Glob\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), List.of(\"develop\")));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), List.of(\"develop\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), List.of(\"develop\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwMTM4Mw==", "bodyText": "Contradicting what I said in Slack, I think this should pass. The string 'develop' is in the path.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469601383", "createdAt": "2020-08-12T23:25:02Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/test/java/io/dockstore/common/yaml/DockstoreYamlTest.java", "diffHunk": "@@ -198,4 +202,81 @@ public void testGalaxySubclass() throws DockstoreYamlHelper.DockstoreYamlExcepti\n         assertEquals(4, workflows.stream().filter(w -> w.getSubclass().equalsIgnoreCase(\"gxformat2\")).count());\n     }\n \n+    @Test\n+    public void testGitReferenceFilter() {\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"anything\"), List.of()));\n+\n+        // Generic name filter\n+        // Glob\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), List.of(\"develop\")));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), List.of(\"develop\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), List.of(\"develop\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/foo/develop\"), List.of(\"develop\")));\n+        // Regex\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), List.of(\"/develop/\")));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), List.of(\"/develop/\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), List.of(\"/develop/\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNDg1NQ==", "bodyText": "I'm getting confused by this automatic start to the regex. It may be OK, and I just may not be understanding it, so speculating at this point:\nAs an example, how would I specify via RegEx all tags that start with Release?  As an end-user, I would be inclined to to write /^tags\\/Release.*/, but I don't think the double caret in here would work in conjunction the existing caret in ^refs.\nShould I instead write /^refs\\/tags\\/Release.*/? Although I'd still have the same problem.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469604855", "createdAt": "2020-08-12T23:35:46Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/main/java/io/dockstore/common/yaml/DockstoreYamlHelper.java", "diffHunk": "@@ -194,6 +198,26 @@ private static Validator createValidator() {\n         return validatorFactory.getValidator();\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    public static boolean filterGitReference(final Path gitRefPath, final List<String> filters) {\n+        return filters.isEmpty() || filters.stream().anyMatch(filter -> {\n+            String matcherString;\n+            // Use regex if filter string is surrounded by /\n+            if (filter.matches(\"^\\\\/.*\\\\/$\")) {\n+                matcherString = \"regex:^refs\\\\/(heads\\\\/|tags\\\\/|)\" + filter.substring(1, filter.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNzA1MA==", "bodyText": "What happens if the filter is not a valid regex, which will inevitably happen? Does the code on line 216 thrown an exception? Took a brief look at the code, and I think it does throw an exception:\nSome thoughts:\n\nLet it throw an exception, and we don't process the .dockstore.yml\nCatch the exception, and don't process the .dockstore.yml\nCatch the exception, and treat it as a filter that didn't pass, move on to next filter.\nValidate the filters when loading the .dockstore.yml and treat it as an invalid .dockstore.yml to start with.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469607050", "createdAt": "2020-08-12T23:43:04Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/main/java/io/dockstore/common/yaml/DockstoreYamlHelper.java", "diffHunk": "@@ -194,6 +198,26 @@ private static Validator createValidator() {\n         return validatorFactory.getValidator();\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    public static boolean filterGitReference(final Path gitRefPath, final List<String> filters) {\n+        return filters.isEmpty() || filters.stream().anyMatch(filter -> {\n+            String matcherString;\n+            // Use regex if filter string is surrounded by /\n+            if (filter.matches(\"^\\\\/.*\\\\/$\")) {\n+                matcherString = \"regex:^refs\\\\/(heads\\\\/|tags\\\\/|)\" + filter.substring(1, filter.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwODE5Nw==", "bodyText": "Edge case: What if the pattern is //? Will it match everything or nothing? Probably OK.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469608197", "createdAt": "2020-08-12T23:46:51Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/main/java/io/dockstore/common/yaml/DockstoreYamlHelper.java", "diffHunk": "@@ -194,6 +198,26 @@ private static Validator createValidator() {\n         return validatorFactory.getValidator();\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    public static boolean filterGitReference(final Path gitRefPath, final List<String> filters) {\n+        return filters.isEmpty() || filters.stream().anyMatch(filter -> {\n+            String matcherString;\n+            // Use regex if filter string is surrounded by /\n+            if (filter.matches(\"^\\\\/.*\\\\/$\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDU3Mw==", "bodyText": "Escaping gets confusing; I wonder if anything might get lost when going from the YAML to here.\nLet's say I want to only filter tags that use semantic versioning. I would have a regex something like this in the YAML: \\d+\\.\\d+\\.\\d+. Will that work? At first I was thinking it wouldn't, but now I think it would. If I wrote that in Java, I think I would have to escape the backslashes themselves. But that might be only for the compiler, so maybe this does work. Worth adding a test for in any case.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r469610573", "createdAt": "2020-08-12T23:54:37Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/main/java/io/dockstore/common/yaml/DockstoreYamlHelper.java", "diffHunk": "@@ -194,6 +198,26 @@ private static Validator createValidator() {\n         return validatorFactory.getValidator();\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    public static boolean filterGitReference(final Path gitRefPath, final List<String> filters) {\n+        return filters.isEmpty() || filters.stream().anyMatch(filter -> {\n+            String matcherString;\n+            // Use regex if filter string is surrounded by /\n+            if (filter.matches(\"^\\\\/.*\\\\/$\")) {\n+                matcherString = \"regex:^refs\\\\/(heads\\\\/|tags\\\\/|)\" + filter.substring(1, filter.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODI5MTM1", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-466829135", "createdAt": "2020-08-13T14:41:06Z", "commit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo0MTowNlrOHAOvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo0MTowNlrOHAOvew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwMzU3OQ==", "bodyText": "Can continue discussion in #dockstore but we probably need a new thread.\nI apologize for not catching this earlier, I'm not keen on the user needing to know the heads syntax, it doesn't seem to show up in the CI docs (I'm referring to circle, travis, appveyer)\nBut I think we can simplify things by doing regexes and exact match only, not globs as well (matching CI docs)\nAlternatively, we can discuss trade-offs of exact match and globs only?\nI realize this contradicts the original ticket. This is a lot hairier than I originally expected.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r470003579", "createdAt": "2020-08-13T14:41:06Z", "author": {"login": "denis-yuen"}, "path": "dockstore-common/src/test/java/io/dockstore/common/yaml/DockstoreYamlTest.java", "diffHunk": "@@ -198,4 +202,81 @@ public void testGalaxySubclass() throws DockstoreYamlHelper.DockstoreYamlExcepti\n         assertEquals(4, workflows.stream().filter(w -> w.getSubclass().equalsIgnoreCase(\"gxformat2\")).count());\n     }\n \n+    @Test\n+    public void testGitReferenceFilter() {\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"anything\"), List.of()));\n+\n+        // Generic name filter\n+        // Glob\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), List.of(\"develop\")));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), List.of(\"develop\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), List.of(\"develop\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/foo/develop\"), List.of(\"develop\")));\n+        // Regex\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), List.of(\"/develop/\")));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), List.of(\"/develop/\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), List.of(\"/develop/\")));\n+        assertTrue(!DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/foo/develop\"), List.of(\"/develop/\")));\n+\n+        // Branch-only name filter\n+        // Glob\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), List.of(\"heads/develop\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773cdc2ca21ef27973d5e2595c8756e232ea6070"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c90b9271280863282adcb8764da964c7d8adfc", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/16c90b9271280863282adcb8764da964c7d8adfc", "committedDate": "2020-08-14T18:14:45Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/3695/dockstoreyml-filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5b3ab0069a05dc9a51927fa753eb8487fd0ba9", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/7f5b3ab0069a05dc9a51927fa753eb8487fd0ba9", "committedDate": "2020-08-14T22:09:13Z", "message": "separate tags and branches filters; broken WebHookIT test needs fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d33bba66df41b8e3dbbe85a4719d5e1a33f0f3", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/f9d33bba66df41b8e3dbbe85a4719d5e1a33f0f3", "committedDate": "2020-08-24T16:27:58Z", "message": "fixed integration tests: allow null filters, handle/log regex errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035f7cbd347d5640bba7ce646dd7d81970cdf7bb", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/035f7cbd347d5640bba7ce646dd7d81970cdf7bb", "committedDate": "2020-08-24T16:28:14Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/3695/dockstoreyml-filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f4940283ca992a0934580bb43606063e379f74", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/44f4940283ca992a0934580bb43606063e379f74", "committedDate": "2020-08-24T18:28:09Z", "message": "fix unit test - regex error no longer fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b611886a6a132b8f895cf35c5c4b047d9f267d2", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/9b611886a6a132b8f895cf35c5c4b047d9f267d2", "committedDate": "2020-08-24T18:30:33Z", "message": "remove unused imports from unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8aa3b54accef1a02977cbbed16eb121efa2906", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/1d8aa3b54accef1a02977cbbed16eb121efa2906", "committedDate": "2020-08-25T13:43:26Z", "message": "Merge branch 'develop' into feature/3695/dockstoreyml-filters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTk3MDIx", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-475597021", "createdAt": "2020-08-26T15:19:03Z", "commit": {"oid": "1d8aa3b54accef1a02977cbbed16eb121efa2906"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxOTowM1rOHHRLCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyNDo0NVrOHHRblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4MzQzNQ==", "bodyText": "Yes, it should at least do a LOG.warn probably error\nIn fact, this seems so unexpected it should probably throw an exception and die hard rather than (only) log", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r477383435", "createdAt": "2020-08-26T15:19:03Z", "author": {"login": "denis-yuen"}, "path": "dockstore-common/src/main/java/io/dockstore/common/yaml/DockstoreYamlHelper.java", "diffHunk": "@@ -194,6 +199,52 @@ private static Validator createValidator() {\n         return validatorFactory.getValidator();\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    public static boolean filterGitReference(final Path gitRefPath, final Filters filters) {\n+        final List<String> branches = filters.getBranches();\n+        final List<String> tags = filters.getTags();\n+\n+        // If no filters specified, accept anything\n+        if (branches.isEmpty() && tags.isEmpty()) {\n+            return true;\n+        }\n+\n+        List<String> patterns;\n+        if (gitRefPath.startsWith(\"refs/heads/\")) {\n+            patterns = branches;\n+        } else if (gitRefPath.startsWith(\"refs/tags/\")) {\n+            patterns = tags;\n+        } else {\n+            // Reaching this is unexpected - should have a warning here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8aa3b54accef1a02977cbbed16eb121efa2906"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4NTkwMA==", "bodyText": "\ud83d\udc40  (technically semantic, but would be harder regex, don't need to change)", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r477385900", "createdAt": "2020-08-26T15:22:20Z", "author": {"login": "denis-yuen"}, "path": "dockstore-common/src/test/java/io/dockstore/common/yaml/DockstoreYamlTest.java", "diffHunk": "@@ -198,4 +207,65 @@ public void testGalaxySubclass() throws DockstoreYamlHelper.DockstoreYamlExcepti\n         assertEquals(4, workflows.stream().filter(w -> w.getSubclass().equalsIgnoreCase(\"gxformat2\")).count());\n     }\n \n+    @Test\n+    public void testGitReferenceFilter() {\n+        // Empty filters allow anything\n+        Filters filters = new Filters();\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/anything\"), filters));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/any/thing\"), filters));\n+\n+        // Only match develop branch\n+        // glob\n+        filters.setBranches(List.of(\"develop\"));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/developfoo\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), filters));\n+        // regex\n+        filters.setBranches(List.of());\n+        filters.setBranches(List.of(\"/develop/\"));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/develop\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/develop\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/developfoo\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/develop\"), filters));\n+\n+        // Only match 0.1 tag\n+        // glob\n+        filters.setBranches(List.of());\n+        filters.setTags(List.of(\"0.1\"));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/0.1\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/foo/0.1\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/0.1/foo\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/0.1\"), filters));\n+        // regex\n+        filters.setBranches(List.of());\n+        filters.setTags(List.of(\"/0\\\\.1/\"));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/0.1\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/foo/0.1\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/0.1/foo\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/0.1\"), filters));\n+\n+        // Match any feature/** branch and ALL tags\n+        // glob/regex combo\n+        filters.setBranches(List.of(\"feature/**\"));\n+        filters.setTags(List.of(\"/.*/\"));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/feature\"), filters));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/feature/1234\"), filters));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/feature/1234/filters\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/foo/feature/1234\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/heads/featurefoo\"), filters));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/anything\"), filters));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/any/thing\"), filters));\n+\n+        // X.X.X semantic version tags with regex\n+        filters.setBranches(List.of());\n+        filters.setTags(List.of(\"/\\\\d+\\\\.\\\\d+\\\\.\\\\d+/\"));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/0.0.0\"), filters));\n+        assertTrue(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/1.10.0\"), filters));\n+        assertFalse(DockstoreYamlHelper.filterGitReference(Path.of(\"refs/tags/1.10.0-beta\"), filters));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8aa3b54accef1a02977cbbed16eb121efa2906"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4NzY2OA==", "bodyText": "Code base is getting large enough, please add a link to https://github.com/DockstoreTestUser2/dockstoreyml-github-filters-test in the comment here for reviewers (we haven't done this before)", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r477387668", "createdAt": "2020-08-26T15:24:45Z", "author": {"login": "denis-yuen"}, "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -417,4 +419,94 @@ public void testInvalidDockstoreYmlFiles() throws Exception {\n             assertTrue(\"There should be 1 unsuccessful event\", failEvents.stream().filter(lambdaEvent -> !lambdaEvent.isSuccess()).count() == 1);\n         }\n     }\n+\n+    /**\n+     * This tests the GitHub release with .dockstore.yml located in /.github/.dockstore.yml\n+     */\n+    @Test\n+    public void testGithubDirDockstoreYml() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n+        final ApiClient webClient = getWebClient(BasicIT.USER_2_USERNAME, testingPostgres);\n+        WorkflowsApi client = new WorkflowsApi(webClient);\n+\n+        client.handleGitHubRelease(githubFiltersRepo, BasicIT.USER_2_USERNAME, \"refs/tags/1.0\", installationId);\n+        Workflow workflow = client.getWorkflowByPath(\"github.com/\" + githubFiltersRepo + \"/filternone\", \"\", false);\n+        assertNotNull(workflow);\n+    }\n+\n+    /**\n+     * This tests filters functionality in .dockstore.yml ; Workflow filters are configured as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8aa3b54accef1a02977cbbed16eb121efa2906"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b99d48c1bca5b738fedbf2b8e5a18d6fbd9bd2", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/22b99d48c1bca5b738fedbf2b8e5a18d6fbd9bd2", "committedDate": "2020-08-26T17:04:11Z", "message": "Merge branch 'develop' into feature/3695/dockstoreyml-filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ce82a517c348728930b79945a57d5f0d86ffcc", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/45ce82a517c348728930b79945a57d5f0d86ffcc", "committedDate": "2020-08-26T18:56:37Z", "message": "throw exception on invalid git reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/f9ef455574d5c5d5df4ca47de5b5917b252b04ba", "committedDate": "2020-08-26T19:16:15Z", "message": "use UnsupportedOperationException for invalid git reference error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MTUxNzc0", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-476151774", "createdAt": "2020-08-26T23:52:23Z", "commit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1MjoyM1rOHHk9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowNTowN1rOHHmMfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwNzY3Ng==", "bodyText": "Is it possible to have a glob syntax error (I don't know)? if it is, does it throw a PatternSyntaxException or something else? If something else, then you'd need to catch it.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r477707676", "createdAt": "2020-08-26T23:52:23Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/main/java/io/dockstore/common/yaml/DockstoreYamlHelper.java", "diffHunk": "@@ -194,6 +199,51 @@ private static Validator createValidator() {\n         return validatorFactory.getValidator();\n     }\n \n+    /**\n+     * Decide whether a gitReference is excluded, given a workflow/service's filters\n+     * @param gitRefPath Path.of(gitReference) for glob matching with PathMatcher\n+     * @param filters Filters specified for a workflow/service in .dockstore.yml\n+     * @return\n+     */\n+    public static boolean filterGitReference(final Path gitRefPath, final Filters filters) {\n+        final List<String> branches = filters.getBranches();\n+        final List<String> tags = filters.getTags();\n+\n+        // If no filters specified, accept anything\n+        if (branches.isEmpty() && tags.isEmpty()) {\n+            return true;\n+        }\n+\n+        List<String> patterns;\n+        if (gitRefPath.startsWith(\"refs/heads/\")) {\n+            patterns = branches;\n+        } else if (gitRefPath.startsWith(\"refs/tags/\")) {\n+            patterns = tags;\n+        } else {\n+            throw new UnsupportedOperationException(\"Invalid git reference: \" + gitRefPath.toString());\n+        }\n+\n+        // Remove refs/heads/ or refs/tags/ from Path for matching\n+        final Path matchPath = gitRefPath.subpath(2, gitRefPath.getNameCount());\n+        return patterns.stream().anyMatch(pattern -> {\n+            String matcherString;\n+            // Use regex if pattern string is surrounded by /, otherwise use glob\n+            if (pattern.matches(\"^\\\\/.*\\\\/$\")) {\n+                matcherString = \"regex:\" + pattern.substring(1, pattern.length() - 1);\n+            } else {\n+                matcherString = \"glob:\" + pattern;\n+            }\n+            try {\n+                final PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(matcherString);\n+                return pathMatcher.matches(matchPath);\n+            } catch (PatternSyntaxException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcxNjE2MA==", "bodyText": "You could make this List.of(DOCKSTORE_YML_PATH, \"/.github/.dockstore.yml\");", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r477716160", "createdAt": "2020-08-26T23:58:00Z", "author": {"login": "coverbeck"}, "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/Constants.java", "diffHunk": "@@ -25,6 +27,7 @@\n     public static final String OPTIONAL_AUTH_MESSAGE = \"Does not require authentication for published workflows,\"\n             + \" authentication can be provided for restricted workflows\";\n     public static final String DOCKSTORE_YML_PATH = \"/.dockstore.yml\";\n+    public static final List<String> DOCKSTORE_YML_PATHS = List.of(\"/.dockstore.yml\", \"/.github/.dockstore.yml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyNzg2OQ==", "bodyText": "A test for invalid regex (and glob?, see my other comment) would be a bonus.", "url": "https://github.com/dockstore/dockstore/pull/3733#discussion_r477727869", "createdAt": "2020-08-27T00:05:07Z", "author": {"login": "coverbeck"}, "path": "dockstore-common/src/test/java/io/dockstore/common/yaml/DockstoreYamlTest.java", "diffHunk": "@@ -198,4 +208,68 @@ public void testGalaxySubclass() throws DockstoreYamlHelper.DockstoreYamlExcepti\n         assertEquals(4, workflows.stream().filter(w -> w.getSubclass().equalsIgnoreCase(\"gxformat2\")).count());\n     }\n \n+    @Test\n+    public void testGitReferenceFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MjI3MTc0", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-476227174", "createdAt": "2020-08-27T00:37:05Z", "commit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzY0NjU3", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-476764657", "createdAt": "2020-08-27T14:15:02Z", "commit": {"oid": "f9ef455574d5c5d5df4ca47de5b5917b252b04ba"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b560c1806f88fbd532a64d0478bc574557cb2476", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/b560c1806f88fbd532a64d0478bc574557cb2476", "committedDate": "2020-08-27T14:26:52Z", "message": "invalid glob/regex unit test, matcher catch UnsupportedOperation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzgzNjkx", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-476783691", "createdAt": "2020-08-27T14:34:32Z", "commit": {"oid": "b560c1806f88fbd532a64d0478bc574557cb2476"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Nzg5Mzk3", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-476789397", "createdAt": "2020-08-27T14:40:26Z", "commit": {"oid": "b560c1806f88fbd532a64d0478bc574557cb2476"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf082c35e3e5aab9ef569eff38ee6b6826bac9b7", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/cf082c35e3e5aab9ef569eff38ee6b6826bac9b7", "committedDate": "2020-08-27T14:44:15Z", "message": "close comment bracket"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTI0NzIz", "url": "https://github.com/dockstore/dockstore/pull/3733#pullrequestreview-476924723", "createdAt": "2020-08-27T17:14:23Z", "commit": {"oid": "cf082c35e3e5aab9ef569eff38ee6b6826bac9b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f6a313c160e40288de8d7c716a99422d2819d24", "author": {"user": {"login": "GFJHogue", "name": "Gregory F J Hogue"}}, "url": "https://github.com/dockstore/dockstore/commit/9f6a313c160e40288de8d7c716a99422d2819d24", "committedDate": "2020-08-27T17:26:45Z", "message": "Merge branch 'develop' into feature/3695/dockstoreyml-filters"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1723, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}