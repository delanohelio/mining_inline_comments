{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODIwMzc3", "number": 1180, "title": "Make TopicReplicationFactorAnomalyFinder ignore topic with large minISR.", "bodyText": "Addresses the issue #1179 .", "createdAt": "2020-04-25T00:40:23Z", "url": "https://github.com/linkedin/cruise-control/pull/1180", "merged": true, "mergeCommit": {"oid": "0faf3d9c99580160871ed890fe53ed769622890e"}, "closed": true, "closedAt": "2020-04-29T16:49:39Z", "author": {"login": "kidkun"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca68X2gH2gAyNDA4ODIwMzc3OjQxZWEzYWRkMDU1MDUyNzZkZjRmZTU0NDllNzQzZTRmYTJlM2Y1NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccNuLbAH2gAyNDA4ODIwMzc3OjBlMDNmYWNhM2I0MWUyZGY3NjNiZGIwOTQ1MDM2ODgxNTI4YjMyZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "41ea3add05505276df4fe5449e743e4fa2e3f560", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/41ea3add05505276df4fe5449e743e4fa2e3f560", "committedDate": "2020-04-25T00:28:33Z", "message": "Make TopicReplicationFactorAnomalyFinder ignore topic with large minISR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e5e5a85a49a8431c90f09e8359bb3df6b1a4e20", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/2e5e5a85a49a8431c90f09e8359bb3df6b1a4e20", "committedDate": "2020-04-27T19:15:58Z", "message": "Fix build failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/2107a0b7f0e6170b7c8aad53a255d284bd9b7009", "committedDate": "2020-04-27T21:25:34Z", "message": "Lint fix."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDM1MjA5", "url": "https://github.com/linkedin/cruise-control/pull/1180#pullrequestreview-401435209", "createdAt": "2020-04-28T01:22:50Z", "commit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMToyMjo1MVrOGM-cSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjoxMjozOFrOGM_cRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1OTE0NQ==", "bodyText": "Nit: Topics which have at least one partition detected to violate replication factor requirement -> Topics, which have at least one partition that violates replication factor requirements.", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416259145", "createdAt": "2020-04-28T01:22:51Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -21,18 +21,16 @@\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.getSelfHealingGoalNames;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyUtils.buildTopicRegex;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyUtils.extractKafkaCruiseControlObjectFromConfig;\n-import static com.linkedin.kafka.cruisecontrol.detector.TopicReplicationFactorAnomalyFinder.SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG;\n-import static com.linkedin.kafka.cruisecontrol.detector.TopicReplicationFactorAnomalyFinder.TOPICS_WITH_BAD_REPLICATION_FACTOR_BY_FIXABILITY_CONFIG;\n+import static com.linkedin.kafka.cruisecontrol.detector.TopicReplicationFactorAnomalyFinder.BAD_TOPICS_BY_REPLICATION_FACTOR_CONFIG;\n import static com.linkedin.kafka.cruisecontrol.detector.notifier.KafkaAnomalyType.TOPIC_ANOMALY;\n \n \n /**\n- * Topics which contain at least one partition with replication factor not equal to the config value of\n- * {@link com.linkedin.kafka.cruisecontrol.detector.TopicReplicationFactorAnomalyFinder#SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG}\n+ * Topics which have at least one partition detected to violate replication factor requirement. For more detail about detection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1OTkyOQ==", "bodyText": "Can we indicate what we mean by badTopics in the JavaDoc?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416259929", "createdAt": "2020-04-28T01:24:59Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -53,31 +51,34 @@ public void configure(Map<String, ?> configs) {\n     super.configure(configs);\n     KafkaCruiseControl kafkaCruiseControl = extractKafkaCruiseControlObjectFromConfig(configs, KafkaAnomalyType.TOPIC_ANOMALY);\n     KafkaCruiseControlConfig config = kafkaCruiseControl.config();\n-    _topicsWithBadReplicationFactorByFixability = (Map<Boolean, Set<String>>) configs.get(TOPICS_WITH_BAD_REPLICATION_FACTOR_BY_FIXABILITY_CONFIG);\n-    if (_topicsWithBadReplicationFactorByFixability == null || _topicsWithBadReplicationFactorByFixability.isEmpty()) {\n+    _badTopicsByReplicationFactor = (Map<Short, Set<TopicReplicationFactorAnomalyEntry>>) configs.get(BAD_TOPICS_BY_REPLICATION_FACTOR_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MDUzOQ==", "bodyText": "Why do we explicitly pass _badTopicsByReplicationFactor  to populateTopicPatternByReplicationFactor, which would already have access to this variable w/o passing it?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416260539", "createdAt": "2020-04-28T01:26:44Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -53,31 +51,34 @@ public void configure(Map<String, ?> configs) {\n     super.configure(configs);\n     KafkaCruiseControl kafkaCruiseControl = extractKafkaCruiseControlObjectFromConfig(configs, KafkaAnomalyType.TOPIC_ANOMALY);\n     KafkaCruiseControlConfig config = kafkaCruiseControl.config();\n-    _topicsWithBadReplicationFactorByFixability = (Map<Boolean, Set<String>>) configs.get(TOPICS_WITH_BAD_REPLICATION_FACTOR_BY_FIXABILITY_CONFIG);\n-    if (_topicsWithBadReplicationFactorByFixability == null || _topicsWithBadReplicationFactorByFixability.isEmpty()) {\n+    _badTopicsByReplicationFactor = (Map<Short, Set<TopicReplicationFactorAnomalyEntry>>) configs.get(BAD_TOPICS_BY_REPLICATION_FACTOR_CONFIG);\n+    if (_badTopicsByReplicationFactor == null || _badTopicsByReplicationFactor.isEmpty()) {\n       throw new IllegalArgumentException(String.format(\"Missing %s for topic replication factor anomaly.\",\n-                                                       TOPICS_WITH_BAD_REPLICATION_FACTOR_BY_FIXABILITY_CONFIG));\n-    }\n-    _targetReplicationFactor = (Short) configs.get(SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG);\n-    if (_targetReplicationFactor == null) {\n-      throw new IllegalArgumentException(String.format(\"Missing %s for topic replication factor anomaly.\",\n-                                                       SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG));\n+                                                       BAD_TOPICS_BY_REPLICATION_FACTOR_CONFIG));\n     }\n     boolean allowCapacityEstimation = config.getBoolean(ANOMALY_DETECTION_ALLOW_CAPACITY_ESTIMATION_CONFIG);\n     boolean excludeRecentlyDemotedBrokers = config.getBoolean(SELF_HEALING_EXCLUDE_RECENTLY_DEMOTED_BROKERS_CONFIG);\n     boolean excludeRecentlyRemovedBrokers = config.getBoolean(SELF_HEALING_EXCLUDE_RECENTLY_REMOVED_BROKERS_CONFIG);\n-    if (_topicsWithBadReplicationFactorByFixability.get(true) != null && !_topicsWithBadReplicationFactorByFixability.get(true).isEmpty()) {\n-      Pattern topicRegex = buildTopicRegex(_topicsWithBadReplicationFactorByFixability.get(true));\n-      _updateTopicConfigurationRunnable = new UpdateTopicConfigurationRunnable(kafkaCruiseControl,\n-                                                                               Collections.singletonMap(_targetReplicationFactor,\n-                                                                                                        topicRegex),\n-                                                                               getSelfHealingGoalNames(config),\n-                                                                               allowCapacityEstimation,\n-                                                                               excludeRecentlyDemotedBrokers,\n-                                                                               excludeRecentlyRemovedBrokers,\n-                                                                               _anomalyId.toString(),\n-                                                                               reasonSupplier());\n+    Map<Short, Pattern> topicPatternByReplicationFactor = populateTopicPatternByReplicationFactor(_badTopicsByReplicationFactor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MTYwNw==", "bodyText": "Nit (conciseness): Detected following topics having replication factor violations -> Topics with replication factor (RF) violations?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416261607", "createdAt": "2020-04-28T01:29:52Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -88,17 +89,34 @@ public void configure(Map<String, ?> configs) {\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n-    sb.append(\"{Detected following topics which have at least one partition with replication factor other than \")\n-      .append(_targetReplicationFactor)\n-      .append(\": {fixable: [\");\n-    StringJoiner joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(true, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString())\n-      .append(\"], unfixable: [\");\n-    joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(false, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString());\n-    sb.append(\"]}}\");\n+    sb.append(\"{Detected following topics having replication factor violations: [\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MjIwNA==", "bodyText": "Nit (conciseness): (key, value) -> sb.append(String.format(\"{target replication factor %d, topics violated %s}, \", key, value)));\n-> (key, value) -> sb.append(String.format(\"{With desired RF %d: %s}, \", key, value)));?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416262204", "createdAt": "2020-04-28T01:31:35Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -88,17 +89,34 @@ public void configure(Map<String, ?> configs) {\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n-    sb.append(\"{Detected following topics which have at least one partition with replication factor other than \")\n-      .append(_targetReplicationFactor)\n-      .append(\": {fixable: [\");\n-    StringJoiner joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(true, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString())\n-      .append(\"], unfixable: [\");\n-    joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(false, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString());\n-    sb.append(\"]}}\");\n+    sb.append(\"{Detected following topics having replication factor violations: [\");\n+    _badTopicsByReplicationFactor.forEach(\n+        (key, value) -> sb.append(String.format(\"{target replication factor %d, topics violated %s}, \", key, value)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2NjIwNA==", "bodyText": "Nit (seems a little verbose to me): String.format(\"{Topic: %s, violation ratio %f%%}\", _topicName, _violationRatio * 100.0); -> String.format(\"{%s(%.2f)}\", _topicName, _violationRatio * 100.0);\nAlso if violation ratio is 1, can we avoid printing the ratio? I assume in the typical case, we expect to see this ratio as 1. This may make the plaintext response cleaner.", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416266204", "createdAt": "2020-04-28T01:44:11Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -88,17 +89,34 @@ public void configure(Map<String, ?> configs) {\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n-    sb.append(\"{Detected following topics which have at least one partition with replication factor other than \")\n-      .append(_targetReplicationFactor)\n-      .append(\": {fixable: [\");\n-    StringJoiner joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(true, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString())\n-      .append(\"], unfixable: [\");\n-    joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(false, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString());\n-    sb.append(\"]}}\");\n+    sb.append(\"{Detected following topics having replication factor violations: [\");\n+    _badTopicsByReplicationFactor.forEach(\n+        (key, value) -> sb.append(String.format(\"{target replication factor %d, topics violated %s}, \", key, value)));\n+    sb.setLength(sb.length() - 2);\n+    sb.append(\"]}\");\n     return sb.toString();\n   }\n+\n+  public static class TopicReplicationFactorAnomalyEntry {\n+    private final String _topicName;\n+    private final double _violationRatio;\n+\n+    public TopicReplicationFactorAnomalyEntry(String topicName, double violationRatio) {\n+      _topicName = topicName;\n+      _violationRatio = violationRatio;\n+    }\n+\n+    public String getTopicName() {\n+      return _topicName;\n+    }\n+\n+    public double getViolationRatio() {\n+      return _violationRatio;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.format(\"{Topic: %s, violation ratio %f%%}\", _topicName, _violationRatio * 100.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2NzcxMg==", "bodyText": "Nit (code convention): Can we drop get from getters?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416267712", "createdAt": "2020-04-28T01:48:39Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -88,17 +89,34 @@ public void configure(Map<String, ?> configs) {\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n-    sb.append(\"{Detected following topics which have at least one partition with replication factor other than \")\n-      .append(_targetReplicationFactor)\n-      .append(\": {fixable: [\");\n-    StringJoiner joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(true, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString())\n-      .append(\"], unfixable: [\");\n-    joiner = new StringJoiner(\",\");\n-    _topicsWithBadReplicationFactorByFixability.getOrDefault(false, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString());\n-    sb.append(\"]}}\");\n+    sb.append(\"{Detected following topics having replication factor violations: [\");\n+    _badTopicsByReplicationFactor.forEach(\n+        (key, value) -> sb.append(String.format(\"{target replication factor %d, topics violated %s}, \", key, value)));\n+    sb.setLength(sb.length() - 2);\n+    sb.append(\"]}\");\n     return sb.toString();\n   }\n+\n+  public static class TopicReplicationFactorAnomalyEntry {\n+    private final String _topicName;\n+    private final double _violationRatio;\n+\n+    public TopicReplicationFactorAnomalyEntry(String topicName, double violationRatio) {\n+      _topicName = topicName;\n+      _violationRatio = violationRatio;\n+    }\n+\n+    public String getTopicName() {\n+      return _topicName;\n+    }\n+\n+    public double getViolationRatio() {\n+      return _violationRatio;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3MDM5Mg==", "bodyText": "This is not clear. What does the former refer to in this sentence? Can we put bullet points in JavaDoc to clearly explain each case?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416270392", "createdAt": "2020-04-28T01:56:46Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomalyFinder.java", "diffHunk": "@@ -33,10 +33,15 @@\n import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.getConfiguredInstance;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.KAFKA_CRUISE_CONTROL_OBJECT_CONFIG;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG;\n+import static com.linkedin.kafka.cruisecontrol.detector.TopicReplicationFactorAnomaly.TopicReplicationFactorAnomalyEntry;\n \n \n /**\n- * The class will check whether there are topics having partition(s) with replication factor different than the desired value.\n+ * The class will check whether there are topics having partition(s) with replication factor different than the desired value\n+ * which is configured by {@link #SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG}.\n+ * Note for topics having special minISR config, if its minISR plus value of {@link #TOPIC_REPLICATION_FACTOR_MARGIN_CONFIG}\n+ * is larger than the value of {@link #SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG} and its replication factor equals\n+ * to the former, the topic will not be taken as an anomaly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3MTMwMQ==", "bodyText": "Description is missing in JavaDoc.", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416271301", "createdAt": "2020-04-28T01:59:32Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomalyFinder.java", "diffHunk": "@@ -59,12 +64,12 @@\n   public static final String DEFAULT_TOPIC_EXCLUDED_FROM_REPLICATION_FACTOR_CHECK = \"\";\n   public static final String TOPIC_REPLICATION_FACTOR_ANOMALY_CLASS_CONFIG = \"topic.replication.topic.anomaly.class\";\n   public static final Class<?> DEFAULT_TOPIC_REPLICATION_FACTOR_ANOMALY_CLASS = TopicReplicationFactorAnomaly.class;\n-  public static final String TOPICS_WITH_BAD_REPLICATION_FACTOR_BY_FIXABILITY_CONFIG = \"topics.with.bad.replication.factor.by.fixability\";\n+  public static final String BAD_TOPICS_BY_REPLICATION_FACTOR_CONFIG = \"bad.topics.by.replication.factor\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3MjkwOA==", "bodyText": "maximal of -> maximum?", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416272908", "createdAt": "2020-04-28T02:04:30Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomalyFinder.java", "diffHunk": "@@ -124,28 +153,33 @@ private void maybeRetrieveAndCacheTopicMinISR(Set<String> topicsToCheck) {\n   }\n \n   /**\n-   * Scan through topics with bad replication factor to check whether the topic is fixable or not.\n-   * One topic is fixable if the target replication factor is no less than the topic's minISR config plus topic replication\n-   * factor margin.\n+   * Scan through topics to check whether the topic having partition(s) with bad replication factor. For each topic, the\n+   * target replication factor to check against is the maximal of value of {@link #SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3MzkzOA==", "bodyText": "Nit: pinfo -> partitionInfo", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416273938", "createdAt": "2020-04-28T02:07:31Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomalyFinder.java", "diffHunk": "@@ -124,28 +153,33 @@ private void maybeRetrieveAndCacheTopicMinISR(Set<String> topicsToCheck) {\n   }\n \n   /**\n-   * Scan through topics with bad replication factor to check whether the topic is fixable or not.\n-   * One topic is fixable if the target replication factor is no less than the topic's minISR config plus topic replication\n-   * factor margin.\n+   * Scan through topics to check whether the topic having partition(s) with bad replication factor. For each topic, the\n+   * target replication factor to check against is the maximal of value of {@link #SELF_HEALING_TARGET_TOPIC_REPLICATION_FACTOR_CONFIG}\n+   * and topic's minISR plus value of {@link #TOPIC_REPLICATION_FACTOR_MARGIN_CONFIG}.\n    *\n-   * @param topicsWithBadReplicationFactor Set of topics with bad replication factor.\n-   * @return Topics with bad replication factor by fixability.\n+   * @param topicsToCheck Set of topics to check.\n+   * @return Map of detected topic replication factor anomaly entries by target replication factor.\n    */\n-  private Map<Boolean, Set<String>> populateTopicFixability(Set<String> topicsWithBadReplicationFactor) {\n-    Map<Boolean, Set<String>> topicsByFixability = new HashMap<>(2);\n-    for (String topic : topicsWithBadReplicationFactor) {\n+  private Map<Short, Set<TopicReplicationFactorAnomalyEntry>> populateBadTopicsByReplicationFactor(Set<String> topicsToCheck, Cluster cluster) {\n+    Map<Short, Set<TopicReplicationFactorAnomalyEntry>> topicsByReplicationFactor = new HashMap<>();\n+    for (String topic : topicsToCheck) {\n       if (_cachedTopicMinISR.containsKey(topic)) {\n         short topicMinISR = _cachedTopicMinISR.get(topic).minISR();\n-        if (_targetReplicationFactor < topicMinISR + _topicReplicationFactorMargin) {\n-          topicsByFixability.putIfAbsent(false, new HashSet<>());\n-          topicsByFixability.get(false).add(topic);\n-        } else {\n-          topicsByFixability.putIfAbsent(true, new HashSet<>());\n-          topicsByFixability.get(true).add(topic);\n+        short targetReplicationFactor = (short) Math.max(_targetReplicationFactor, topicMinISR + _topicReplicationFactorMargin);\n+        int violatedPartitionCount = 0;\n+        for (PartitionInfo pinfo : cluster.partitionsForTopic(topic)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3NTUyNg==", "bodyText": "Missing EasyMock.verify() in tests.", "url": "https://github.com/linkedin/cruise-control/pull/1180#discussion_r416275526", "createdAt": "2020-04-28T02:12:38Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomalyFinderTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControlUnitTestUtils;\n+import com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfig;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.Config;\n+import org.apache.kafka.clients.admin.ConfigEntry;\n+import org.apache.kafka.clients.admin.DescribeConfigsResult;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.KafkaFuture;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.config.ConfigResource;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+\n+import static com.linkedin.kafka.cruisecontrol.detector.TopicReplicationFactorAnomalyFinder.DESCRIBE_TOPIC_CONFIG_TIMEOUT_MS;\n+import static org.apache.kafka.common.config.TopicConfig.MIN_IN_SYNC_REPLICAS_CONFIG;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+\n+public class TopicReplicationFactorAnomalyFinderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2107a0b7f0e6170b7c8aad53a255d284bd9b7009"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6110bf0d2ca9c9588f6ca36cad67cc562023b1fd", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/6110bf0d2ca9c9588f6ca36cad67cc562023b1fd", "committedDate": "2020-04-29T00:29:45Z", "message": "Address the feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5aeafa12f5835603828e59327a29cb7a63d560", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/bb5aeafa12f5835603828e59327a29cb7a63d560", "committedDate": "2020-04-29T00:49:00Z", "message": "Make comment more clear."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzA4NDg1", "url": "https://github.com/linkedin/cruise-control/pull/1180#pullrequestreview-402308485", "createdAt": "2020-04-29T00:52:14Z", "commit": {"oid": "bb5aeafa12f5835603828e59327a29cb7a63d560"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c9feaab44b60ed2ad8b18ced3ded9cd8f4aa06", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/e9c9feaab44b60ed2ad8b18ced3ded9cd8f4aa06", "committedDate": "2020-04-29T00:53:01Z", "message": "fix the typo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e03faca3b41e2df763bdb0945036881528b32d6", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/0e03faca3b41e2df763bdb0945036881528b32d6", "committedDate": "2020-04-29T00:55:10Z", "message": "fix format."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 212, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}