{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODg0NjQx", "number": 1138, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNDo1NlrODoBb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyOTowOFrODoaJgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzMTYxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNDo1NlrOF2W_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNDo1NlrOF2W_ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDE1OA==", "bodyText": "Can we make this method static?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544158", "createdAt": "2020-03-14T01:24:56Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzMzk2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyODozOFrOF2XA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyODozOFrOF2XA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDQ4Nw==", "bodyText": "Nit: IF -> If", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544487", "createdAt": "2020-03-14T01:28:38Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n+    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n+           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  }\n+\n   private void reportBrokerFailures() {\n     if (!_failedBrokers.isEmpty()) {\n-      Map<String, Object> parameterConfigOverrides = new HashMap<>(3);\n+      Map<String, Object> parameterConfigOverrides = new HashMap<>(4);\n       parameterConfigOverrides.put(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, _kafkaCruiseControl);\n-      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers());\n+      Map<Integer, Long> failedBrokers = failedBrokers();\n+      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers);\n       parameterConfigOverrides.put(ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG, _kafkaCruiseControl.timeMs());\n+      // IF there are too many broker fails at the same time, mark the anomaly as unfixable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzNDk1OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMDoxMlrOF2XBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMDoxMlrOF2XBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDYzMg==", "bodyText": "Since the focus of this patch is the addition of these configs, can we also make them configurable in this patch rather postponing it?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544632", "createdAt": "2020-03-14T01:30:12Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -44,8 +44,12 @@\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n+  // TODO: make the threshold configurable\n+  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n+  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzNjQwOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMjozNFrOF2XCOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMjozNFrOF2XCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDgyNA==", "bodyText": "Nit: For consistency with the relevant config: deadBrokerCount -> failedBrokerCount?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544824", "createdAt": "2020-03-14T01:32:34Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzNzE1OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMzo0NVrOF2XCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMzo0NVrOF2XCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDkyNQ==", "bodyText": "The role of this config is not clear from the name. Should we add a comment to clarify?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544925", "createdAt": "2020-03-14T01:33:45Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -44,8 +44,12 @@\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzOTc0OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozODoyMFrOF2XD-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozODoyMFrOF2XD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTI3NA==", "bodyText": "0.2 means that in a cluster of 9 brokers, more than 1 broker failure cannot be handled. This seems a little aggressive to me.\nCan we set the default FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY  and FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY to less aggressive values to avoid a dramatic change in the existing behavior?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392545274", "createdAt": "2020-03-14T01:38:20Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -44,8 +44,12 @@\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n+  // TODO: make the threshold configurable\n+  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n+  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk0MzE4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo0NDo0N1rOF2XF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo0NDo0N1rOF2XF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTc2Mw==", "bodyText": "This comment seems inconsistent with the operation -- i.e. this piece of code just sets a config value.\nCan we move this comment to the relevant function that interprets this config?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392545763", "createdAt": "2020-03-14T01:44:47Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n+    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n+           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  }\n+\n   private void reportBrokerFailures() {\n     if (!_failedBrokers.isEmpty()) {\n-      Map<String, Object> parameterConfigOverrides = new HashMap<>(3);\n+      Map<String, Object> parameterConfigOverrides = new HashMap<>(4);\n       parameterConfigOverrides.put(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, _kafkaCruiseControl);\n-      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers());\n+      Map<Integer, Long> failedBrokers = failedBrokers();\n+      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers);\n       parameterConfigOverrides.put(ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG, _kafkaCruiseControl.timeMs());\n+      // IF there are too many broker fails at the same time, mark the anomaly as unfixable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk0NjU3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/notifier/SelfHealingNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1MDo1NlrOF2XHuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1MDo1NlrOF2XHuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjIzMw==", "bodyText": "This seems to subsume / hide the detail on non-fixable broker failure state. Can we make sure that this information is exposed in (1) alerts, (2) logs, and (3) anomaly detector state?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392546233", "createdAt": "2020-03-14T01:50:56Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/notifier/SelfHealingNotifier.java", "diffHunk": "@@ -233,8 +233,8 @@ public AnomalyNotificationResult onBrokerFailure(BrokerFailures brokerFailures)\n       long delay = selfHealingTimeMs - nowMs;\n       result = AnomalyNotificationResult.check(delay);\n     } else {\n-      // Reached auto fix threshold. Alert and fix if self healing is enabled.\n-      boolean autoFixTriggered = _selfHealingEnabled.get(KafkaAnomalyType.BROKER_FAILURE);\n+      // Reached auto fix threshold. Alert and fix if self healing is enabled and anomaly is fixable.\n+      boolean autoFixTriggered = _selfHealingEnabled.get(KafkaAnomalyType.BROKER_FAILURE) && brokerFailures.fixable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk0NzQ4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1MjoyM1rOF2XIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1MjoyM1rOF2XIMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjM1Mg==", "bodyText": "Can we clarify what it means to be fixable for broker failures?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392546352", "createdAt": "2020-03-14T01:52:23Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java", "diffHunk": "@@ -43,11 +44,19 @@ public BrokerFailures() {\n     return _failedBrokers;\n   }\n \n+  /**\n+   * Whether detected broker failures are fixable or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk0ODU2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1NDoxNVrOF2XIvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1NDoxNVrOF2XIvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjQ5Mg==", "bodyText": "Can we add unit tests for this new functionality?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392546492", "createdAt": "2020-03-14T01:54:15Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTest.java", "diffHunk": "@@ -48,6 +48,7 @@\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.KAFKA_CRUISE_CONTROL_OBJECT_CONFIG;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.anomalyComparator;\n+import static com.linkedin.kafka.cruisecontrol.detector.BrokerFailureDetector.BROKER_FAILURES_FIXABLE_CONFIG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk2NDMxOnYy", "diffSide": "RIGHT", "path": "docs/wiki/User Guide/Configurations.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNDo1NlrOF277hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNDo1NlrOF277hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0OTMxNw==", "bodyText": "Based on the current defaults, fixable.failed.broker.count.threshold will be the limiting factor in any cluster larger than 12 brokers. Should we adjust these limits such that they map to the equal broker count for a medium cluster size -- e.g. a cluster of 25 brokers leads to fixable.failed.broker.count.threshold default value of 10?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393149317", "createdAt": "2020-03-16T16:24:56Z", "author": {"login": "efeg"}, "path": "docs/wiki/User Guide/Configurations.md", "diffHunk": "@@ -112,6 +112,8 @@ The following configurations are inherited from the open source Kafka client con\n | anomaly.detection.goals                       | List    | N         | com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareCapacityGoal, com.linkedin.kafka.cruisecontrol.analyzer.goals.PotentialNwOutGoal, com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal, com.linkedin.kafka.cruisecontrol.analyzer.goals.LeaderBytesInDistributionGoals, com.linkedin.kafka.cruisecontrol.analyzer.goals.TopicReplicaDistributionGoal, com.linkedin.kafka.cruisecontrol.analyzer.goals.ReplicaDistributionGoal | The goals that anomaly detector should detect if they are violated.                                                                                                                                                                                                                                                                                                                                                 |\n | metric.anomaly.analyzer.metrics               | String  | N         | \"\"                                                                                                                                                                                                                                                                                                                                                                                                                     | The metric ids that the metric anomaly detector should detect if they are violated.                                                                                                                                                                                                                                                        |\n | failed.brokers.zk.path                        | String  | N         | /CruiseControlBrokerList                                                                                                                                                                                                                                                                                                                                                                                               | The zk path to store the failed broker list. This is to persist the broker failure time in case Cruise Control failed and restarted when some brokers are down.                                                                                                                                                                                                                                                     |\n+| fixable.failed.broker.count.threshold         | Integer | N         | 5                                                                                                                                                                                                                                                                                                                                                                                               |The upper boundary of concurrently failed broker count that are taken as fixable.                                                                                                                                                                                                                                                     |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780c086647ca2ee75bd1e58424fcdd1719da5e9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk3MzcxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNzoxNFrOF28Bkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNzoxNFrOF28Bkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDg2Ng==", "bodyText": "fails -> failures", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393150866", "createdAt": "2020-03-16T16:27:14Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java", "diffHunk": "@@ -46,6 +46,8 @@ public BrokerFailures() {\n \n   /**\n    * Whether detected broker failures are fixable or not.\n+   * If there are too many broker fails at the same time, the anomaly is taken as unfixable and needs human intervention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780c086647ca2ee75bd1e58424fcdd1719da5e9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk3ODI5OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyODozNlrOF28E1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyODozNlrOF28E1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTcwMw==", "bodyText": "Isn't it sufficient to make this and _fixableFailedBrokerCountThreshold  a Short?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393151703", "createdAt": "2020-03-16T16:28:36Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -71,6 +71,8 @@ public BrokerFailureDetector(Queue<Anomaly> anomalies,\n     _failedBrokersZkPath = config.getString(AnomalyDetectorConfig.FAILED_BROKERS_ZK_PATH_CONFIG);\n     _anomalies = anomalies;\n     _kafkaCruiseControl = kafkaCruiseControl;\n+    _fixableFailedBrokerCountThreshold = config.getInt(AnomalyDetectorConfig.FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780c086647ca2ee75bd1e58424fcdd1719da5e9f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk4MDUxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyOTowOFrOF28GRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyOTowOFrOF28GRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjA3MA==", "bodyText": "Should this be a Short?", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393152070", "createdAt": "2020-03-16T16:29:08Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java", "diffHunk": "@@ -264,6 +282,16 @@ public static ConfigDef define(ConfigDef configDef) {\n                             DEFAULT_FAILED_BROKERS_ZK_PATH,\n                             ConfigDef.Importance.LOW,\n                             FAILED_BROKERS_ZK_PATH_DOC)\n+                    .define(FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG,\n+                            ConfigDef.Type.INT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780c086647ca2ee75bd1e58424fcdd1719da5e9f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}