{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTEwMTg4", "number": 1111, "title": "Add support for topic partition size anomaly detection.", "bodyText": "Addresses the issue #1097 .", "createdAt": "2020-02-21T23:09:38Z", "url": "https://github.com/linkedin/cruise-control/pull/1111", "merged": true, "mergeCommit": {"oid": "16105350055ce359ee42278749f24a3a61cbda9a"}, "closed": true, "closedAt": "2020-02-28T18:16:25Z", "author": {"login": "kidkun"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHkHSvAFqTM2MzU1Nzk5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcITTAdABqjMwNzYzMTI0NjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTU3OTk0", "url": "https://github.com/linkedin/cruise-control/pull/1111#pullrequestreview-363557994", "createdAt": "2020-02-24T17:13:32Z", "commit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMzozM1rOFtoyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowNjo1MFrOFtqeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5ODQwMg==", "bodyText": "Missing unit of SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG and DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD -- i.e. are they in bytes, KB, MB?", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383398402", "createdAt": "2020-02-24T17:13:33Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;\n+\n+/**\n+ * The class will check whether there are topics having partition(s) with gigantic size.\n+ * Required configurations for this class.\n+ * <ul>\n+ *   <li>{@link #SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}: The config for the partition size threshold to alert,\n+ *   default value is set to {@link #DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5ODY0NA==", "bodyText": "Can we avoid star import?", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383398644", "createdAt": "2020-02-24T17:13:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwOTU5Mg==", "bodyText": "This JavaDoc presents (1) meta discussion around large partitions, (2) terms w/o definitions, and (3) a (i.e. one of many) potential way to use this function. However, it doesn't provide information on what this function simply does.\nCan we\n\nMove the generic discussion about large partitions to the class JavaDoc.\nClarify what it means to break the client-side applications,\nAvoid limiting the potential ways to fix partitions with large size -- i.e. it is possible to fix them in other ways, such as deleting topics with large partitions.\nRemove references to sending out alerts, and\nAdd description of what this function simply does.", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383409592", "createdAt": "2020-02-24T17:33:56Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomaly.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.kafka.common.TopicPartition;\n+\n+import static com.linkedin.kafka.cruisecontrol.detector.TopicPartitionSizeAnomalyFinder.PARTITIONS_WITH_LARGE_SIZE_CONFIG;\n+\n+\n+/**\n+ * Topic partitions with size larger than\n+ * {@link com.linkedin.kafka.cruisecontrol.detector.TopicPartitionSizeAnomalyFinder#SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}\n+ */\n+public class TopicPartitionSizeAnomaly extends TopicAnomaly {\n+  protected Map<TopicPartition, Double> _sizeByPartition;\n+\n+  /**\n+   * There are two potential ways to fix partitions with large size, i.e. increasing topic's partition count and reducing\n+   * topic's retention time/size.\n+   * But both ways could break the client-side applications, therefore it is safer for Cruise Control to just send out alert\n+   * and not try to self-heal the anomaly.\n+   *\n+   * @return True if fix was started successfully (i.e. there is actual work towards a fix), false otherwise.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzI5MQ==", "bodyText": "Incomplete implementation -- i.e. can we add a reason for a potential self-healing (i.e. in case fix() return true in a future implementation) -- e.g. return () -> String.format(\"Self healing for topic partition size anomaly: %s\", this);", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383413291", "createdAt": "2020-02-24T17:41:28Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomaly.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.kafka.common.TopicPartition;\n+\n+import static com.linkedin.kafka.cruisecontrol.detector.TopicPartitionSizeAnomalyFinder.PARTITIONS_WITH_LARGE_SIZE_CONFIG;\n+\n+\n+/**\n+ * Topic partitions with size larger than\n+ * {@link com.linkedin.kafka.cruisecontrol.detector.TopicPartitionSizeAnomalyFinder#SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}\n+ */\n+public class TopicPartitionSizeAnomaly extends TopicAnomaly {\n+  protected Map<TopicPartition, Double> _sizeByPartition;\n+\n+  /**\n+   * There are two potential ways to fix partitions with large size, i.e. increasing topic's partition count and reducing\n+   * topic's retention time/size.\n+   * But both ways could break the client-side applications, therefore it is safer for Cruise Control to just send out alert\n+   * and not try to self-heal the anomaly.\n+   *\n+   * @return True if fix was started successfully (i.e. there is actual work towards a fix), false otherwise.\n+   */\n+  @Override\n+  public boolean fix() {\n+    return false;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public void configure(Map<String, ?> configs) {\n+    super.configure(configs);\n+    _sizeByPartition = (Map<TopicPartition, Double>) configs.get(PARTITIONS_WITH_LARGE_SIZE_CONFIG);\n+    if (_sizeByPartition == null || _sizeByPartition.isEmpty()) {\n+      throw new IllegalArgumentException(String.format(\"Missing %s for topic partition size anomaly.\", PARTITIONS_WITH_LARGE_SIZE_CONFIG));\n+    }\n+  }\n+\n+  @Override\n+  public Supplier<String> reasonSupplier() {\n+    return () -> \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzY0NQ==", "bodyText": "Can we also include the unit of size?", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383413645", "createdAt": "2020-02-24T17:42:03Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomaly.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.kafka.common.TopicPartition;\n+\n+import static com.linkedin.kafka.cruisecontrol.detector.TopicPartitionSizeAnomalyFinder.PARTITIONS_WITH_LARGE_SIZE_CONFIG;\n+\n+\n+/**\n+ * Topic partitions with size larger than\n+ * {@link com.linkedin.kafka.cruisecontrol.detector.TopicPartitionSizeAnomalyFinder#SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}\n+ */\n+public class TopicPartitionSizeAnomaly extends TopicAnomaly {\n+  protected Map<TopicPartition, Double> _sizeByPartition;\n+\n+  /**\n+   * There are two potential ways to fix partitions with large size, i.e. increasing topic's partition count and reducing\n+   * topic's retention time/size.\n+   * But both ways could break the client-side applications, therefore it is safer for Cruise Control to just send out alert\n+   * and not try to self-heal the anomaly.\n+   *\n+   * @return True if fix was started successfully (i.e. there is actual work towards a fix), false otherwise.\n+   */\n+  @Override\n+  public boolean fix() {\n+    return false;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public void configure(Map<String, ?> configs) {\n+    super.configure(configs);\n+    _sizeByPartition = (Map<TopicPartition, Double>) configs.get(PARTITIONS_WITH_LARGE_SIZE_CONFIG);\n+    if (_sizeByPartition == null || _sizeByPartition.isEmpty()) {\n+      throw new IllegalArgumentException(String.format(\"Missing %s for topic partition size anomaly.\", PARTITIONS_WITH_LARGE_SIZE_CONFIG));\n+    }\n+  }\n+\n+  @Override\n+  public Supplier<String> reasonSupplier() {\n+    return () -> \"\";\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{Detected following topic partitions having too large size:\\n\");\n+    for (Map.Entry<TopicPartition, Double> entry : _sizeByPartition.entrySet()) {\n+      sb.append(String.format(\"\\t%s\\t%f%n\", entry.getKey().toString(), entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNDg5OQ==", "bodyText": "Incorrect class name: TopicPartitionSizeAnomaly -> TopicPartitionSizeAnomalyFinder", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383414899", "createdAt": "2020-02-24T17:44:27Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;\n+\n+/**\n+ * The class will check whether there are topics having partition(s) with gigantic size.\n+ * Required configurations for this class.\n+ * <ul>\n+ *   <li>{@link #SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}: The config for the partition size threshold to alert,\n+ *   default value is set to {@link #DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD}.\n+ *   <li>{@link #TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}: The config to specify topics excluded from the anomaly checking.\n+ *   The value is treated as a regular expression, default value is set to\n+ *   {@link #DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}.\n+ *   <li>{@link #TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG}: The config for the topic anomaly class name,\n+ *   default value is set to {@link #DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS}.\n+ * </ul>\n+ */\n+public class TopicPartitionSizeAnomalyFinder implements TopicAnomalyFinder {\n+  private static final Logger LOG = LoggerFactory.getLogger(TopicPartitionSizeAnomaly.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxODc1MQ==", "bodyText": "Nit: \"Topic partition  -> \"Partition", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383418751", "createdAt": "2020-02-24T17:52:09Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;\n+\n+/**\n+ * The class will check whether there are topics having partition(s) with gigantic size.\n+ * Required configurations for this class.\n+ * <ul>\n+ *   <li>{@link #SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}: The config for the partition size threshold to alert,\n+ *   default value is set to {@link #DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD}.\n+ *   <li>{@link #TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}: The config to specify topics excluded from the anomaly checking.\n+ *   The value is treated as a regular expression, default value is set to\n+ *   {@link #DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}.\n+ *   <li>{@link #TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG}: The config for the topic anomaly class name,\n+ *   default value is set to {@link #DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS}.\n+ * </ul>\n+ */\n+public class TopicPartitionSizeAnomalyFinder implements TopicAnomalyFinder {\n+  private static final Logger LOG = LoggerFactory.getLogger(TopicPartitionSizeAnomaly.class);\n+  public static final String SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG = \"self.healing.partition.size.threshold\";\n+  public static final Integer DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD = 500 * 1024 * 1024;\n+  public static final String TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK = \"topic.excluded.from.partition.size.check\";\n+  public static final String DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK = \"\";\n+  public static final String TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG = \"topic.partition.size.anomaly.class\";\n+  public static final Class<?> DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS = TopicPartitionSizeAnomaly.class;\n+  public static final String PARTITIONS_WITH_LARGE_SIZE_CONFIG = \"partitions.with.large.size\";\n+  private KafkaCruiseControl _kafkaCruiseControl;\n+  private int _partitionSizeThreshold;\n+  private Pattern _topicExcludedFromCheck;\n+  private Class<?> _topicPartitionSizeAnomalyClass;\n+\n+  @Override\n+  public Set<TopicAnomaly> topicAnomalies() {\n+    Map<TopicPartition, Double> partitionsWithLargeSize = new HashMap<>();\n+    OperationProgress operationProgress = new OperationProgress();\n+    ClusterModel clusterModel;\n+    try (AutoCloseable ignored = _kafkaCruiseControl.acquireForModelGeneration(operationProgress)) {\n+      clusterModel = _kafkaCruiseControl.clusterModel(\n+          new ModelCompletenessRequirements(MIN_NUM_VALID_WINDOWS_FOR_SELF_HEALING, 0.0, true), new OperationProgress());\n+      for (Map.Entry<String, List<Partition>> entry: clusterModel.getPartitionsByTopic().entrySet()) {\n+        if (_topicExcludedFromCheck.matcher(entry.getKey()).matches()) {\n+          continue;\n+        }\n+        for (Partition partition : entry.getValue()) {\n+          double partitionSize = partition.leader().load().expectedUtilizationFor(Resource.DISK);\n+          if (partitionSize > _partitionSizeThreshold) {\n+            partitionsWithLargeSize.put(partition.topicPartition(), partitionSize);\n+          }\n+        }\n+      }\n+    } catch (NotEnoughValidWindowsException nevwe) {\n+      LOG.debug(\"Skipping topic partition size anomaly detection because there are not enough valid windows.\", nevwe);\n+    } catch (KafkaCruiseControlException kcce) {\n+      LOG.warn(\"Topic partition size anomaly finder received exception\", kcce);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxODg0Mg==", "bodyText": "Nit: \"Topic partition  -> \"Partition", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383418842", "createdAt": "2020-02-24T17:52:21Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;\n+\n+/**\n+ * The class will check whether there are topics having partition(s) with gigantic size.\n+ * Required configurations for this class.\n+ * <ul>\n+ *   <li>{@link #SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}: The config for the partition size threshold to alert,\n+ *   default value is set to {@link #DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD}.\n+ *   <li>{@link #TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}: The config to specify topics excluded from the anomaly checking.\n+ *   The value is treated as a regular expression, default value is set to\n+ *   {@link #DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}.\n+ *   <li>{@link #TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG}: The config for the topic anomaly class name,\n+ *   default value is set to {@link #DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS}.\n+ * </ul>\n+ */\n+public class TopicPartitionSizeAnomalyFinder implements TopicAnomalyFinder {\n+  private static final Logger LOG = LoggerFactory.getLogger(TopicPartitionSizeAnomaly.class);\n+  public static final String SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG = \"self.healing.partition.size.threshold\";\n+  public static final Integer DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD = 500 * 1024 * 1024;\n+  public static final String TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK = \"topic.excluded.from.partition.size.check\";\n+  public static final String DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK = \"\";\n+  public static final String TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG = \"topic.partition.size.anomaly.class\";\n+  public static final Class<?> DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS = TopicPartitionSizeAnomaly.class;\n+  public static final String PARTITIONS_WITH_LARGE_SIZE_CONFIG = \"partitions.with.large.size\";\n+  private KafkaCruiseControl _kafkaCruiseControl;\n+  private int _partitionSizeThreshold;\n+  private Pattern _topicExcludedFromCheck;\n+  private Class<?> _topicPartitionSizeAnomalyClass;\n+\n+  @Override\n+  public Set<TopicAnomaly> topicAnomalies() {\n+    Map<TopicPartition, Double> partitionsWithLargeSize = new HashMap<>();\n+    OperationProgress operationProgress = new OperationProgress();\n+    ClusterModel clusterModel;\n+    try (AutoCloseable ignored = _kafkaCruiseControl.acquireForModelGeneration(operationProgress)) {\n+      clusterModel = _kafkaCruiseControl.clusterModel(\n+          new ModelCompletenessRequirements(MIN_NUM_VALID_WINDOWS_FOR_SELF_HEALING, 0.0, true), new OperationProgress());\n+      for (Map.Entry<String, List<Partition>> entry: clusterModel.getPartitionsByTopic().entrySet()) {\n+        if (_topicExcludedFromCheck.matcher(entry.getKey()).matches()) {\n+          continue;\n+        }\n+        for (Partition partition : entry.getValue()) {\n+          double partitionSize = partition.leader().load().expectedUtilizationFor(Resource.DISK);\n+          if (partitionSize > _partitionSizeThreshold) {\n+            partitionsWithLargeSize.put(partition.topicPartition(), partitionSize);\n+          }\n+        }\n+      }\n+    } catch (NotEnoughValidWindowsException nevwe) {\n+      LOG.debug(\"Skipping topic partition size anomaly detection because there are not enough valid windows.\", nevwe);\n+    } catch (KafkaCruiseControlException kcce) {\n+      LOG.warn(\"Topic partition size anomaly finder received exception\", kcce);\n+    } catch (Exception e) {\n+      LOG.error(\"Unexpected exception\", e);\n+    }\n+    if (!partitionsWithLargeSize.isEmpty()) {\n+      return Collections.singleton(createTopicPartitionSizeAnomaly(partitionsWithLargeSize));\n+    }\n+    return Collections.emptySet();\n+  }\n+\n+  private TopicAnomaly createTopicPartitionSizeAnomaly(Map<TopicPartition, Double> partitionsWithLargeSize) {\n+    Map<String, Object> configs = new HashMap<>(3);\n+    configs.put(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, _kafkaCruiseControl);\n+    configs.put(PARTITIONS_WITH_LARGE_SIZE_CONFIG, partitionsWithLargeSize);\n+    configs.put(ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG, _kafkaCruiseControl.timeMs());\n+    return getConfiguredInstance(_topicPartitionSizeAnomalyClass, TopicAnomaly.class, configs);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, ?> configs) {\n+    _kafkaCruiseControl = (KafkaCruiseControl) configs.get(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG);\n+    if (_kafkaCruiseControl == null) {\n+      throw new IllegalArgumentException(\"Topic partition size anomaly finder is missing \" + KAFKA_CRUISE_CONTROL_OBJECT_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMjc1Mg==", "bodyText": "Nit: Should we name it TopicPartitionSizeAnomalyFinder -> PartitionSizeAnomalyFinder for simplicity? -- i.e. this class already implements TopicAnomalyFinder; hence, the connotation is clear.", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383422752", "createdAt": "2020-02-24T18:00:05Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;\n+\n+/**\n+ * The class will check whether there are topics having partition(s) with gigantic size.\n+ * Required configurations for this class.\n+ * <ul>\n+ *   <li>{@link #SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}: The config for the partition size threshold to alert,\n+ *   default value is set to {@link #DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD}.\n+ *   <li>{@link #TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}: The config to specify topics excluded from the anomaly checking.\n+ *   The value is treated as a regular expression, default value is set to\n+ *   {@link #DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}.\n+ *   <li>{@link #TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG}: The config for the topic anomaly class name,\n+ *   default value is set to {@link #DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS}.\n+ * </ul>\n+ */\n+public class TopicPartitionSizeAnomalyFinder implements TopicAnomalyFinder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNjA2Mg==", "bodyText": "Nit: topic partition -> partition", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r383426062", "createdAt": "2020-02-24T18:06:50Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicPartitionSizeAnomalyFinder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.config.ConfigDef;\n+import com.linkedin.cruisecontrol.exception.NotEnoughValidWindowsException;\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControl;\n+import com.linkedin.kafka.cruisecontrol.async.progress.OperationProgress;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.exception.KafkaCruiseControlException;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.Partition;\n+import com.linkedin.kafka.cruisecontrol.monitor.ModelCompletenessRequirements;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.TopicPartition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.linkedin.cruisecontrol.common.config.ConfigDef.Type.*;\n+import static com.linkedin.kafka.cruisecontrol.analyzer.goals.GoalUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfigUtils.*;\n+import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.*;\n+\n+/**\n+ * The class will check whether there are topics having partition(s) with gigantic size.\n+ * Required configurations for this class.\n+ * <ul>\n+ *   <li>{@link #SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG}: The config for the partition size threshold to alert,\n+ *   default value is set to {@link #DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD}.\n+ *   <li>{@link #TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}: The config to specify topics excluded from the anomaly checking.\n+ *   The value is treated as a regular expression, default value is set to\n+ *   {@link #DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK}.\n+ *   <li>{@link #TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG}: The config for the topic anomaly class name,\n+ *   default value is set to {@link #DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS}.\n+ * </ul>\n+ */\n+public class TopicPartitionSizeAnomalyFinder implements TopicAnomalyFinder {\n+  private static final Logger LOG = LoggerFactory.getLogger(TopicPartitionSizeAnomaly.class);\n+  public static final String SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG = \"self.healing.partition.size.threshold\";\n+  public static final Integer DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD = 500 * 1024 * 1024;\n+  public static final String TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK = \"topic.excluded.from.partition.size.check\";\n+  public static final String DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK = \"\";\n+  public static final String TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG = \"topic.partition.size.anomaly.class\";\n+  public static final Class<?> DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS = TopicPartitionSizeAnomaly.class;\n+  public static final String PARTITIONS_WITH_LARGE_SIZE_CONFIG = \"partitions.with.large.size\";\n+  private KafkaCruiseControl _kafkaCruiseControl;\n+  private int _partitionSizeThreshold;\n+  private Pattern _topicExcludedFromCheck;\n+  private Class<?> _topicPartitionSizeAnomalyClass;\n+\n+  @Override\n+  public Set<TopicAnomaly> topicAnomalies() {\n+    Map<TopicPartition, Double> partitionsWithLargeSize = new HashMap<>();\n+    OperationProgress operationProgress = new OperationProgress();\n+    ClusterModel clusterModel;\n+    try (AutoCloseable ignored = _kafkaCruiseControl.acquireForModelGeneration(operationProgress)) {\n+      clusterModel = _kafkaCruiseControl.clusterModel(\n+          new ModelCompletenessRequirements(MIN_NUM_VALID_WINDOWS_FOR_SELF_HEALING, 0.0, true), new OperationProgress());\n+      for (Map.Entry<String, List<Partition>> entry: clusterModel.getPartitionsByTopic().entrySet()) {\n+        if (_topicExcludedFromCheck.matcher(entry.getKey()).matches()) {\n+          continue;\n+        }\n+        for (Partition partition : entry.getValue()) {\n+          double partitionSize = partition.leader().load().expectedUtilizationFor(Resource.DISK);\n+          if (partitionSize > _partitionSizeThreshold) {\n+            partitionsWithLargeSize.put(partition.topicPartition(), partitionSize);\n+          }\n+        }\n+      }\n+    } catch (NotEnoughValidWindowsException nevwe) {\n+      LOG.debug(\"Skipping topic partition size anomaly detection because there are not enough valid windows.\", nevwe);\n+    } catch (KafkaCruiseControlException kcce) {\n+      LOG.warn(\"Topic partition size anomaly finder received exception\", kcce);\n+    } catch (Exception e) {\n+      LOG.error(\"Unexpected exception\", e);\n+    }\n+    if (!partitionsWithLargeSize.isEmpty()) {\n+      return Collections.singleton(createTopicPartitionSizeAnomaly(partitionsWithLargeSize));\n+    }\n+    return Collections.emptySet();\n+  }\n+\n+  private TopicAnomaly createTopicPartitionSizeAnomaly(Map<TopicPartition, Double> partitionsWithLargeSize) {\n+    Map<String, Object> configs = new HashMap<>(3);\n+    configs.put(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, _kafkaCruiseControl);\n+    configs.put(PARTITIONS_WITH_LARGE_SIZE_CONFIG, partitionsWithLargeSize);\n+    configs.put(ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG, _kafkaCruiseControl.timeMs());\n+    return getConfiguredInstance(_topicPartitionSizeAnomalyClass, TopicAnomaly.class, configs);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, ?> configs) {\n+    _kafkaCruiseControl = (KafkaCruiseControl) configs.get(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG);\n+    if (_kafkaCruiseControl == null) {\n+      throw new IllegalArgumentException(\"Topic partition size anomaly finder is missing \" + KAFKA_CRUISE_CONTROL_OBJECT_CONFIG);\n+    }\n+    String topicExcludedFromCheck = (String) configs.get(TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK);\n+    _topicExcludedFromCheck = Pattern.compile(topicExcludedFromCheck == null ? DEFAULT_TOPIC_EXCLUDED_FROM_PARTITION_SIZE_CHECK\n+                                                                             : topicExcludedFromCheck);\n+    Integer partitionSizeThreshold = (Integer) configs.get(SELF_HEALING_PARTITION_SIZE_THRESHOLD_CONFIG);\n+    _partitionSizeThreshold = partitionSizeThreshold == null ? DEFAULT_SELF_HEALING_PARTITION_SIZE_THRESHOLD\n+                                                             : partitionSizeThreshold;\n+    String topicPartitionSizeAnomalyClass = (String) configs.get(TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG);\n+    if (topicPartitionSizeAnomalyClass == null) {\n+      _topicPartitionSizeAnomalyClass = DEFAULT_TOPIC_PARTITION_SIZE_ANOMALY_CLASS;\n+    } else {\n+      _topicPartitionSizeAnomalyClass = (Class<?>) ConfigDef.parseType(TOPIC_PARTITION_SIZE_ANOMALY_CLASS_CONFIG,\n+                                                                       topicPartitionSizeAnomalyClass,\n+                                                                       CLASS);\n+      if (_topicPartitionSizeAnomalyClass == null || !TopicAnomaly.class.isAssignableFrom(_topicPartitionSizeAnomalyClass)) {\n+        throw new IllegalArgumentException(String.format(\"Invalid %s is provided to topic partition size anomaly finder, provided %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b99afd9e27406264708572fb61102085dc45ecc"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzY4MjU2", "url": "https://github.com/linkedin/cruise-control/pull/1111#pullrequestreview-365368256", "createdAt": "2020-02-27T01:55:08Z", "commit": {"oid": "517f6af86d9659b3e7a97bad38c291cdca3797c6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMTo1NTowOFrOFvCxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMjowMTo0M1rOFvC4HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MjcyNw==", "bodyText": "-- Log file has been pushed to PR.\nTip: If you would rebase on master, you can avoid pushing this file again because it has been added to gitignore.", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r384872727", "createdAt": "2020-02-27T01:55:08Z", "author": {"login": "efeg"}, "path": "cruise-control/access.log", "diffHunk": "@@ -0,0 +1 @@\n+127.0.0.1 - test [26/Feb/2020:01:47:32 +0000] \"GET /kafkacruisecontrol/STATE HTTP/1.1\" 200 1052  229", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517f6af86d9659b3e7a97bad38c291cdca3797c6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NDUyNQ==", "bodyText": "Nit: Could you clarify why the code shrinks the size by 2?", "url": "https://github.com/linkedin/cruise-control/pull/1111#discussion_r384874525", "createdAt": "2020-02-27T02:01:43Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java", "diffHunk": "@@ -202,10 +202,11 @@ private SlowBrokers createSlowBrokersAnomaly(Map<BrokerEntity, Long> detectedBro\n   }\n \n   private String getSlowBrokerDescription(Map<BrokerEntity, Long> detectedBrokers) {\n-    StringBuilder descriptionSb = new StringBuilder().append(\"{\\n\");\n+    StringBuilder descriptionSb = new StringBuilder().append(\"{\");\n     detectedBrokers.forEach((key, value) -> {\n-      descriptionSb.append(\"\\tBroker \").append(key.brokerId()).append(\"'s performance degraded at \").append(toDateString(value)).append(\"\\n\");\n+      descriptionSb.append(\"Broker \").append(key.brokerId()).append(\"'s performance degraded at \").append(toDateString(value)).append(\", \");\n     });\n+    descriptionSb.setLength(descriptionSb.length() - 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517f6af86d9659b3e7a97bad38c291cdca3797c6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f55ed412f1b0581d29f74a679fad3d9508d1aa97", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/f55ed412f1b0581d29f74a679fad3d9508d1aa97", "committedDate": "2020-02-27T04:00:18Z", "message": "Add support for topic partition size anomaly detection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3f5c4250e37857e999326582821daa90e2cb7e9", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/b3f5c4250e37857e999326582821daa90e2cb7e9", "committedDate": "2020-02-27T04:00:18Z", "message": "Address the feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f09b29c4c96ae8ea7238cc90de95d52c4b48007", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/7f09b29c4c96ae8ea7238cc90de95d52c4b48007", "committedDate": "2020-02-27T04:06:19Z", "message": "Address the feedback."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "517f6af86d9659b3e7a97bad38c291cdca3797c6", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/517f6af86d9659b3e7a97bad38c291cdca3797c6", "committedDate": "2020-02-26T01:48:52Z", "message": "Address the feedback."}, "afterCommit": {"oid": "7f09b29c4c96ae8ea7238cc90de95d52c4b48007", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/7f09b29c4c96ae8ea7238cc90de95d52c4b48007", "committedDate": "2020-02-27T04:06:19Z", "message": "Address the feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 168, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}