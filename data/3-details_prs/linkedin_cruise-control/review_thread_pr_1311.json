{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjYxNDk5", "number": 1311, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo0M1rOEXYFpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNTowMVrOEXf4Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ3MzY1OnYy", "diffSide": "RIGHT", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo0M1rOG_IsGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo0M1rOG_IsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTgzMg==", "bodyText": "Nit: Redundant space.", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468855832", "createdAt": "2020-08-11T20:48:43Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -26,7 +26,10 @@\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ4MDczOnYy", "diffSide": "RIGHT", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MDozNFrOG_IwPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MDozNFrOG_IwPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1Njg5NA==", "bodyText": "Typo: Therfore -> Therefore", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468856894", "createdAt": "2020-08-11T20:50:34Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ4OTUyOnYy", "diffSide": "RIGHT", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MzoyOFrOG_I16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MzoyOFrOG_I16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1ODM0NA==", "bodyText": "Nit: KafkaYammerMetrics  -> {@link KafkaYammerMetrics}.\nGiven this link, maybe we can drop: More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java?", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468858344", "createdAt": "2020-08-11T20:53:28Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU0MTM0OnYy", "diffSide": "RIGHT", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowOTo0N1rOG_JVtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1NTowMlrOG_lGDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjQ4NA==", "bodyText": "I initially assumed there were significant backwards incompatible changes from 2.5 to 2.6, but if this function would be sufficient to make migrate_to_kafka_2_5 compatible with Kafka 2.6, can we rebase this patch on migrate_to_kafka_2_5 branch to eliminate the overhead of managing one more branch?", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468866484", "createdAt": "2020-08-11T21:09:47Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMjM4Ng==", "bodyText": "I will run some tests to make sure this metrics reporter works ok with 2.5.", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469102386", "createdAt": "2020-08-12T08:44:02Z", "author": {"login": "tomncooper"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjQ4NA=="}, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMTIyOQ==", "bodyText": "From my testing it seems this function works as expected and allows this code to be run on Kafka 2.5 and 2.6 brokers. So I will rebase this against the migrate_to_kafka_2_5 branch and you can delete the 2.6 branch.", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469321229", "createdAt": "2020-08-12T14:55:02Z", "author": {"login": "tomncooper"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjQ4NA=="}, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU3NTUzOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMToxOFrOG_JrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMToxOFrOG_JrGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTk2Mw==", "bodyText": "Nit: Redundant space.", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468871963", "createdAt": "2020-08-11T21:21:18Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java", "diffHunk": "@@ -11,12 +11,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU4ODY0OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNTozOVrOG_JzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNTozOVrOG_JzJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDAyMg==", "bodyText": "Nit: 2017 -> 2020", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468874022", "createdAt": "2020-08-11T21:25:39Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc1MDQyOnYy", "diffSide": "RIGHT", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNTowMVrOG_UbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1NTo0MFrOG_lILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODI2MQ==", "bodyText": "This method seems to be called in each cycle of metrics reporting. Can we call the metricsRegistry() method once, cache the regustry and reuse it each time is required?", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469048261", "createdAt": "2020-08-12T07:05:01Z", "author": {"login": "amuraru"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n+   *\n+   * @return  MetricsRegistry with Kafka metrics\n+   */\n+  private MetricsRegistry metricsRegistry()   {\n+    try {\n+      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMTc3NA==", "bodyText": "Good point, I added a field and instantiated it in the init() method.", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469321774", "createdAt": "2020-08-12T14:55:40Z", "author": {"login": "tomncooper"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n+   *\n+   * @return  MetricsRegistry with Kafka metrics\n+   */\n+  private MetricsRegistry metricsRegistry()   {\n+    try {\n+      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODI2MQ=="}, "originalCommit": {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 684, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}