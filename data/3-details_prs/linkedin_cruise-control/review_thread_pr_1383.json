{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTgzMjQx", "number": 1383, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzozMTowNFrOE3dENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo0NzoxMlrOE3dTUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTgzMzUwOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzozMTowNFrOHwzsBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjo1Mzo1M1rOHw6otg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MDU1MQ==", "bodyText": "Nit: Consider making it more memory efficient.\ntopicsToRebalance = new HashSet<>(clusterModel.selfHealingEligibleReplicas().size())", "url": "https://github.com/linkedin/cruise-control/pull/1383#discussion_r520940551", "createdAt": "2020-11-10T23:31:04Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -389,6 +389,62 @@ public static String replicaSortName(Goal goal, boolean reverse, boolean leaderO\n     return String.format(\"%s%s%s\", goal.name(), reverse ? \"-REVERSE\" : \"\", leaderOnly ? \"-LEADER\" : \"\");\n   }\n \n+\n+  /**\n+   * Get the set of topics to rebalance for a soft goal.\n+   *\n+   * @param clusterModel The state of the cluster.\n+   * @param excludedTopics The topics to exclude from rebalance.\n+   * @return Topics of self-healing eligible replicas if the given cluster model has any, all topics except the given\n+   * excluded topics otherwise.\n+   */\n+  public static Set<String> topicsToRebalance(ClusterModel clusterModel, Set<String> excludedTopics) {\n+    Set<String> topicsToRebalance;\n+    if (!clusterModel.selfHealingEligibleReplicas().isEmpty()) {\n+      topicsToRebalance = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aafe2bf57b69f7b8aa69fe29cade83a812e030"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA1NDM5MA==", "bodyText": "Self-healing eligible replicas could be all from the same or different topic. So the size is in [1, clusterModel.selfHealingEligibleReplicas().size()]. If the majority of replicas share the same topic, then we may end up wasting memory.", "url": "https://github.com/linkedin/cruise-control/pull/1383#discussion_r521054390", "createdAt": "2020-11-11T02:53:53Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -389,6 +389,62 @@ public static String replicaSortName(Goal goal, boolean reverse, boolean leaderO\n     return String.format(\"%s%s%s\", goal.name(), reverse ? \"-REVERSE\" : \"\", leaderOnly ? \"-LEADER\" : \"\");\n   }\n \n+\n+  /**\n+   * Get the set of topics to rebalance for a soft goal.\n+   *\n+   * @param clusterModel The state of the cluster.\n+   * @param excludedTopics The topics to exclude from rebalance.\n+   * @return Topics of self-healing eligible replicas if the given cluster model has any, all topics except the given\n+   * excluded topics otherwise.\n+   */\n+  public static Set<String> topicsToRebalance(ClusterModel clusterModel, Set<String> excludedTopics) {\n+    Set<String> topicsToRebalance;\n+    if (!clusterModel.selfHealingEligibleReplicas().isEmpty()) {\n+      topicsToRebalance = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MDU1MQ=="}, "originalCommit": {"oid": "94aafe2bf57b69f7b8aa69fe29cade83a812e030"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTg3MjE5OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo0NzoxMlrOHw0DEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjo1Mzo1NFrOHw6o2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NjQ0OA==", "bodyText": "Maybe I am missing something here. when isExcludedForReplicaMove(sourceBroker) == true, we might return ACCEPT  to allow a INTER_BROKER_REPLICA_MOVEMENT  action? Intuitively, It feels strange. Shouldn't it be that if the source broker is excluded for replica move, we reject this INTER_BROKER_REPLICA_MOVEMENT action?\nPlease consider adding some comments here for clarification.", "url": "https://github.com/linkedin/cruise-control/pull/1383#discussion_r520946448", "createdAt": "2020-11-10T23:47:12Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java", "diffHunk": "@@ -93,7 +95,8 @@ public ActionAcceptance actionAcceptance(BalancingAction action, ClusterModel cl\n \n         //Check that destination and source would not become unbalanced.\n         return (isReplicaCountUnderBalanceUpperLimitAfterChange(destinationBroker, destinationBroker.replicas().size(), ADD)\n-               && isReplicaCountAboveBalanceLowerLimitAfterChange(sourceBroker, sourceBroker.replicas().size(), REMOVE))\n+               && (isExcludedForReplicaMove(sourceBroker)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aafe2bf57b69f7b8aa69fe29cade83a812e030"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA1NDQyNw==", "bodyText": "I agree that the name is confusing -- added documentation to clarify what is meant by excluded for replica move. In summary, a broker that is excluded for replica move cannot receive replicas, but can give away replicas -- e.g. a Preferred Leader in LinkedIn Kafka cluster is an excluded broker.", "url": "https://github.com/linkedin/cruise-control/pull/1383#discussion_r521054427", "createdAt": "2020-11-11T02:53:54Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java", "diffHunk": "@@ -93,7 +95,8 @@ public ActionAcceptance actionAcceptance(BalancingAction action, ClusterModel cl\n \n         //Check that destination and source would not become unbalanced.\n         return (isReplicaCountUnderBalanceUpperLimitAfterChange(destinationBroker, destinationBroker.replicas().size(), ADD)\n-               && isReplicaCountAboveBalanceLowerLimitAfterChange(sourceBroker, sourceBroker.replicas().size(), REMOVE))\n+               && (isExcludedForReplicaMove(sourceBroker)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NjQ0OA=="}, "originalCommit": {"oid": "94aafe2bf57b69f7b8aa69fe29cade83a812e030"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 727, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}