{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODM0ODkz", "number": 1082, "title": " Make CruiseControlReporter check metrics topic's partition count during bootstrap", "bodyText": "Addresses the issue #1081 .", "createdAt": "2020-01-30T00:37:32Z", "url": "https://github.com/linkedin/cruise-control/pull/1082", "merged": true, "mergeCommit": {"oid": "07eda5e419ad7c57a8ed2a531800b12b0af60a8a"}, "closed": true, "closedAt": "2020-02-21T23:47:26Z", "author": {"login": "kidkun"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-7ENlAH2gAyMzY4ODM0ODkzOmJjNjE3OTQ3YTU3MTRmNTQ4OTNhNjIxNGI3MDJlOWE3NWE0NjQyMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGojQCAFqTM2Mjk3OTQ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc617947a5714f54893a6214b702e9a75a46421c", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/bc617947a5714f54893a6214b702e9a75a46421c", "committedDate": "2020-01-29T00:47:14Z", "message": "Fix the JSON response of state endpoint."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f066c1642a8a57a020d2cb708144a9af1ebfe19", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/5f066c1642a8a57a020d2cb708144a9af1ebfe19", "committedDate": "2020-01-30T00:36:55Z", "message": "Make CruiseControlReporter check metrics topic's partition count during bootstrap."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7a95910241381a49a46ae8d409bf6041d57cae", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/2d7a95910241381a49a46ae8d409bf6041d57cae", "committedDate": "2020-01-30T01:15:57Z", "message": "Fix style issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDM5NjM0", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-351039634", "createdAt": "2020-01-30T18:20:16Z", "commit": {"oid": "2d7a95910241381a49a46ae8d409bf6041d57cae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMDoxNlrOFj1Cog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODozMDowM1rOFj1V7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMzUwNg==", "bodyText": "Nit: Should we use lazy logging to avoid string concat? -- i.e.\nLOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373113506", "createdAt": "2020-01-30T18:20:16Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -162,20 +165,48 @@ private void createCruiseControlMetricsTopic() {\n       createTopicsResult.values().get(_newTopic.name()).get();\n       LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7a95910241381a49a46ae8d409bf6041d57cae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODIxMw==", "bodyText": "We have some common logic regarding (1) creating non-existing topic and (2) modifying the selected configs of existing topics (i.e. here and in sample store topic creation).\nCan we make the relevant logic (1) shared and (2) pluggable between the two? The first part will ensure a common code path for similar execution. The second part will enable users to add their custom logic that they may want to automate during topic creation (e.g. generating ACLs).", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373118213", "createdAt": "2020-01-30T18:29:34Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -162,20 +165,48 @@ private void createCruiseControlMetricsTopic() {\n       createTopicsResult.values().get(_newTopic.name()).get();\n       LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7a95910241381a49a46ae8d409bf6041d57cae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODQ0Nw==", "bodyText": "Nit: Can we avoid hard coding 5000?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373118447", "createdAt": "2020-01-30T18:30:03Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -162,20 +165,48 @@ private void createCruiseControlMetricsTopic() {\n       createTopicsResult.values().get(_newTopic.name()).get();\n       LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  private void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      TopicDescription topicDescription =\n+          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n+                      .get(_cruiseControlMetricsTopic).get();\n+      if (topicDescription.partitions().size() < _newTopic.numPartitions()) {\n+        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+                                                               NewPartitions.increaseTo(_newTopic.numPartitions())));\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(String.format(\"Unable to increase Cruise Cruise Control metrics topic %s's partition number to %d\",\n+                             _cruiseControlMetricsTopic, _newTopic.replicationFactor()), e);\n+      }\n+    }\n+\n   @Override\n   public void run() {\n     LOG.info(\"Starting Cruise Control metrics reporter with reporting interval of {} ms.\", _reportingIntervalMs);\n-\n     if (_newTopic != null && _adminClient != null) {\n-      LOG.info(\"Try to create Cruise Control metrics topic if not exist\");\n-      createCruiseControlMetricsTopic();\n-      CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);\n+      try {\n+        Collection<TopicListing> topicListings = _adminClient.listTopics().listings().get();\n+        boolean topicExists = false;\n+        for (TopicListing topicListing : topicListings) {\n+          if (topicListing.name().equals(_cruiseControlMetricsTopic)) {\n+            topicExists = true;\n+            break;\n+          }\n+        }\n+        if (topicExists) {\n+          maybeUpdateCruiseControlMetricsTopic();\n+        } else {\n+          createCruiseControlMetricsTopic();\n+        }\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Skip checking Cruise Control metrics topic \" + _newTopic.name(), e);\n+      } finally {\n+        CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7a95910241381a49a46ae8d409bf6041d57cae"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "committedDate": "2020-01-30T18:57:44Z", "message": "Address the feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ff5e2850ef639896f143d02f997552a7b7be83", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/86ff5e2850ef639896f143d02f997552a7b7be83", "committedDate": "2020-01-31T01:21:05Z", "message": "Address the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzk4Mjg0", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-351798284", "createdAt": "2020-01-31T21:49:42Z", "commit": {"oid": "86ff5e2850ef639896f143d02f997552a7b7be83"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0OTo0MlrOFkY5oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0OTo0MlrOFkY5oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMTAyNQ==", "bodyText": "(Applies to topic creation code path) Missing modification regarding cleanup policy and retention (please see KafkaSampleStore#ensureTopicCreated).", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373701025", "createdAt": "2020-01-31T21:49:42Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -156,26 +159,54 @@ private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterCo\n     return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ff5e2850ef639896f143d02f997552a7b7be83"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2321217263fcb88b875a9d8402bd36886679371", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/c2321217263fcb88b875a9d8402bd36886679371", "committedDate": "2020-02-01T01:02:58Z", "message": "fix the feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "committedDate": "2020-02-03T18:09:00Z", "message": "Fix style issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjI3ODk4", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-352627898", "createdAt": "2020-02-03T23:08:58Z", "commit": {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzowODo1OFrOFlDKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzoxNDoxMVrOFlDRag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MzQ3NQ==", "bodyText": "Should it be equals(...) or !equals(...)?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374393475", "createdAt": "2020-02-03T23:08:58Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +150,105 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      if (topicConfig.get(LogConfig.RetentionMsProp()) == null ||\n+          !topicConfig.get(LogConfig.RetentionMsProp()).value().equals(_newTopic.configs().get(LogConfig.RetentionMsProp()))) {\n+        configsToBeSet.add(new AlterConfigOp(new ConfigEntry(LogConfig.RetentionMsProp(),\n+                                                             _newTopic.configs().get(LogConfig.RetentionMsProp())),\n+                                             AlterConfigOp.OpType.SET));\n+      }\n+      if (topicConfig.get(LogConfig.CleanupPolicyProp()) == null ||\n+          topicConfig.get(LogConfig.CleanupPolicyProp()).value().equals(_newTopic.configs().get(LogConfig.CleanupPolicyProp()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDEzOA==", "bodyText": "This and the following if statements seem to be good candidates to move to a util function, which adds a config to the given set if it satisfies certain criteria.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374394138", "createdAt": "2020-02-03T23:10:59Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +150,105 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      if (topicConfig.get(LogConfig.RetentionMsProp()) == null ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDkyMQ==", "bodyText": "This and the preceding try-catch blocks seem to perform independent operations -- would it possible to move them to their own functions?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374394921", "createdAt": "2020-02-03T23:13:19Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +150,105 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      if (topicConfig.get(LogConfig.RetentionMsProp()) == null ||\n+          !topicConfig.get(LogConfig.RetentionMsProp()).value().equals(_newTopic.configs().get(LogConfig.RetentionMsProp()))) {\n+        configsToBeSet.add(new AlterConfigOp(new ConfigEntry(LogConfig.RetentionMsProp(),\n+                                                             _newTopic.configs().get(LogConfig.RetentionMsProp())),\n+                                             AlterConfigOp.OpType.SET));\n+      }\n+      if (topicConfig.get(LogConfig.CleanupPolicyProp()) == null ||\n+          topicConfig.get(LogConfig.CleanupPolicyProp()).value().equals(_newTopic.configs().get(LogConfig.CleanupPolicyProp()))) {\n+        configsToBeSet.add(new AlterConfigOp(new ConfigEntry(LogConfig.CleanupPolicyProp(),\n+                                                             _newTopic.configs().get(LogConfig.CleanupPolicyProp())),\n+                                             AlterConfigOp.OpType.SET));\n+      }\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NTI0Mg==", "bodyText": "I don't think this should be configurable -- i.e. we do not support any other configuration, let's avoid exposing it.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374395242", "createdAt": "2020-02-03T23:14:11Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -48,6 +52,8 @@\n   private static final Integer DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS = -1;\n   private static final boolean DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE = false;\n   private static final Short DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR = -1;\n+  private static final String DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY = \"delete\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0000f286d2d3814fe65d6091927a569c30074a1", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/f0000f286d2d3814fe65d6091927a569c30074a1", "committedDate": "2020-02-04T00:06:22Z", "message": "Address the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjUxNDkz", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-352651493", "createdAt": "2020-02-04T00:14:13Z", "commit": {"oid": "f0000f286d2d3814fe65d6091927a569c30074a1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoxNDoxM1rOFlEYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDoyMTo1MFrOFlEhHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMzQyOQ==", "bodyText": "Nit-1: The description is missing the unit of the retention time.\nNit-2: Missing dot at the end.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374413429", "createdAt": "2020-02-04T00:14:13Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -31,6 +31,8 @@\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_DOC = \"The number of partitions of Cruise Control metrics topic\";\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG = \"cruise.control.metrics.topic.replication.factor\";\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_DOC = \"The replication factor of Cruise Control metrics topic\";\n+  public static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG = \"cruise.control.metrics.topic.retention.ms\";\n+  private static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_DOC = \"The retention time of Cruise Control metrics topic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0000f286d2d3814fe65d6091927a569c30074a1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNDQyOA==", "bodyText": "Can we (1) make it static? ... -> protected static void maybeUpdateConfig and (2) move it to CruiseControlMetricsUtils with a JavaDoc?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374414428", "createdAt": "2020-02-04T00:17:46Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +151,116 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.RetentionMsProp(),\n+                        _newTopic.configs().get(LogConfig.RetentionMsProp()),\n+                        topicConfig);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.CleanupPolicyProp(),\n+                        _newTopic.configs().get(LogConfig.CleanupPolicyProp()),\n+                        topicConfig);\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n+      }\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0000f286d2d3814fe65d6091927a569c30074a1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNTY0NA==", "bodyText": "Can we add a unit test to verify that this function works as expected?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374415644", "createdAt": "2020-02-04T00:21:50Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +151,116 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0000f286d2d3814fe65d6091927a569c30074a1"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3664fb06d55ec9708625404c3360168db415e224", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/3664fb06d55ec9708625404c3360168db415e224", "committedDate": "2020-02-04T00:58:26Z", "message": "Address the feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27262f62fc0cef66ddf41929ec69569ada0b601e", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/27262f62fc0cef66ddf41929ec69569ada0b601e", "committedDate": "2020-02-04T00:59:28Z", "message": "Remove redundant import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0beb3c721bded6d816ccacc83185c103c481758f", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/0beb3c721bded6d816ccacc83185c103c481758f", "committedDate": "2020-02-12T01:19:28Z", "message": "Add unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acfb598b9702ae12757e74f0ab0add04f29a54e", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/6acfb598b9702ae12757e74f0ab0add04f29a54e", "committedDate": "2020-02-12T01:22:03Z", "message": "Get rid of wildcard import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e088bc8d080f6ad3d53db8e8e9cb0b2ef2fcd2", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/12e088bc8d080f6ad3d53db8e8e9cb0b2ef2fcd2", "committedDate": "2020-02-12T18:25:31Z", "message": "Fix build failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d5e7ef435cabf96a01dbac92b0fd5ea9bd8959", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/33d5e7ef435cabf96a01dbac92b0fd5ea9bd8959", "committedDate": "2020-02-12T19:13:38Z", "message": "Increase broker boot waiting time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "committedDate": "2020-02-12T23:04:25Z", "message": "Skip ssl test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjE4MjA2", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-358618206", "createdAt": "2020-02-13T23:12:27Z", "commit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxMjoyOFrOFpmxNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1MToxNlrOFpni7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MTEyNQ==", "bodyText": "Nit: Would it be possible to make this and the other DEFAULT_* static final variables public? This allows users to access these defaults in other pluggable implementations of metrics reporter in case of need.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379171125", "createdAt": "2020-02-13T23:12:28Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -31,6 +31,8 @@\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_DOC = \"The number of partitions of Cruise Control metrics topic\";\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG = \"cruise.control.metrics.topic.replication.factor\";\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_DOC = \"The replication factor of Cruise Control metrics topic\";\n+  public static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG = \"cruise.control.metrics.topic.retention.ms\";\n+  private static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_DOC = \"The retention time in milliseconds of Cruise Control metrics topic.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3ODc2Mg==", "bodyText": "This call to listTopics() introduces an additional network roundtrip in case the topic does not exist.\nWouldn't it be more efficient to attempt to create the topic and handle TopicExistsException? If the topic exists, then we can update it.\nMaybe more importantly, if the topic is created after the topic list is retrieved here, the call to create topic will fail with TopicExistsException and the code won't be able to handle it.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379178762", "createdAt": "2020-02-13T23:35:20Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.RetentionMsProp(),\n+                        _newTopic.configs().get(LogConfig.RetentionMsProp()),\n+                        topicConfig);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.CleanupPolicyProp(),\n+                        _newTopic.configs().get(LogConfig.CleanupPolicyProp()),\n+                        topicConfig);\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n       }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeIncreaseTopicPartitionCount() {\n+    try {\n+      // Retrieve topic partition count to check and update.\n+      TopicDescription topicDescription =\n+          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n+                      .get(_cruiseControlMetricsTopic).get();\n+      if (topicDescription.partitions().size() < _newTopic.numPartitions()) {\n+        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+                                                               NewPartitions.increaseTo(_newTopic.numPartitions())));\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to increase Cruise Cruise Control metrics topic {} partition number to {}\",\n+               _cruiseControlMetricsTopic, _newTopic.replicationFactor(), e);\n     }\n   }\n \n   @Override\n   public void run() {\n     LOG.info(\"Starting Cruise Control metrics reporter with reporting interval of {} ms.\", _reportingIntervalMs);\n-\n     if (_newTopic != null && _adminClient != null) {\n-      LOG.info(\"Try to create Cruise Control metrics topic if not exist\");\n-      createCruiseControlMetricsTopic();\n-      CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);\n+      try {\n+        Collection<TopicListing> topicListings = _adminClient.listTopics().listings().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3OTc0OQ==", "bodyText": "Is it possible to make this static and move it to CruiseControlMetricsUtils with a JavaDoc?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379179749", "createdAt": "2020-02-13T23:38:29Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MDMxMA==", "bodyText": "Nit: Can we use {} rather than string concat?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379180310", "createdAt": "2020-02-13T23:39:55Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.RetentionMsProp(),\n+                        _newTopic.configs().get(LogConfig.RetentionMsProp()),\n+                        topicConfig);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.CleanupPolicyProp(),\n+                        _newTopic.configs().get(LogConfig.CleanupPolicyProp()),\n+                        topicConfig);\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n       }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeIncreaseTopicPartitionCount() {\n+    try {\n+      // Retrieve topic partition count to check and update.\n+      TopicDescription topicDescription =\n+          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n+                      .get(_cruiseControlMetricsTopic).get();\n+      if (topicDescription.partitions().size() < _newTopic.numPartitions()) {\n+        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+                                                               NewPartitions.increaseTo(_newTopic.numPartitions())));\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to increase Cruise Cruise Control metrics topic {} partition number to {}\",\n+               _cruiseControlMetricsTopic, _newTopic.replicationFactor(), e);\n     }\n   }\n \n   @Override\n   public void run() {\n     LOG.info(\"Starting Cruise Control metrics reporter with reporting interval of {} ms.\", _reportingIntervalMs);\n-\n     if (_newTopic != null && _adminClient != null) {\n-      LOG.info(\"Try to create Cruise Control metrics topic if not exist\");\n-      createCruiseControlMetricsTopic();\n-      CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);\n+      try {\n+        Collection<TopicListing> topicListings = _adminClient.listTopics().listings().get();\n+        boolean topicExists = false;\n+        for (TopicListing topicListing : topicListings) {\n+          if (topicListing.name().equals(_cruiseControlMetricsTopic)) {\n+            topicExists = true;\n+            break;\n+          }\n+        }\n+        if (topicExists) {\n+          maybeUpdateCruiseControlMetricsTopic();\n+        } else {\n+          createCruiseControlMetricsTopic();\n+        }\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Skip checking Cruise Control metrics topic \" + _newTopic.name(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MzQxOA==", "bodyText": "For describeConfigsResult and alterConfigsResult, we seem to be blocking indefinitely.\nCan we add timeouts to relevant get calls to avoid potential deadlock?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379183418", "createdAt": "2020-02-13T23:49:49Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4Mzg1NA==", "bodyText": "Would it be possible to combine configName and targetConfigValue in a Map? This allows getting response from this util function in one call.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379183854", "createdAt": "2020-02-13T23:51:16Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java", "diffHunk": "@@ -106,4 +110,20 @@ private static void setStringConfigIfExists(CruiseControlMetricsReporterConfig c\n       // let it go.\n     }\n   }\n+\n+  /**\n+   * Create a config altering operation if config's current value does not equal to target value.\n+   * @param configsToAlter Set of config altering operations to be applied.\n+   * @param configName Name of config to check.\n+   * @param targetConfigValue Target value of the config.\n+   * @param currentConfig Current value of the config.\n+   */\n+  public static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n+                                       String configName,\n+                                       String targetConfigValue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6ec370fbc78fc0a14057c4184897583d1790df", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/ef6ec370fbc78fc0a14057c4184897583d1790df", "committedDate": "2020-02-15T05:57:56Z", "message": "Addres the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjExNjgx", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-362211681", "createdAt": "2020-02-20T20:30:27Z", "commit": {"oid": "ef6ec370fbc78fc0a14057c4184897583d1790df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDozMDoyN1rOFsiIeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDozMzo0NVrOFsiORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MDg4OQ==", "bodyText": "Nit: 10000 -> 10000L", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382240889", "createdAt": "2020-02-20T20:30:27Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java", "diffHunk": "@@ -18,6 +19,7 @@\n public class CruiseControlMetricsUtils {\n \n   public static final long ADMIN_CLIENT_CLOSE_TIMEOUT_MS = 10000;\n+  public static final long CLIENT_REQUEST_TIMEOUT_MS = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6ec370fbc78fc0a14057c4184897583d1790df"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MjM3NA==", "bodyText": "Do we need to verify that the exception is a TopicExistsException and not due to another reason?", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382242374", "createdAt": "2020-02-20T20:33:45Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -130,52 +145,98 @@ public void configure(Map<String, ?> configs) {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createMetricsTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n+  }\n+\n+  protected void createCruiseControlMetricsTopic() throws ExecutionException {\n+    try {\n+      CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_metricsTopic));\n+      createTopicsResult.values().get(_metricsTopic.name()).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (InterruptedException | TimeoutException e) {\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6ec370fbc78fc0a14057c4184897583d1790df"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b001fa2d95e49e508836b5c8437d5a36a902c5", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/11b001fa2d95e49e508836b5c8437d5a36a902c5", "committedDate": "2020-02-21T18:13:52Z", "message": "Address the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODc0MDI0", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-362874024", "createdAt": "2020-02-21T19:45:54Z", "commit": {"oid": "11b001fa2d95e49e508836b5c8437d5a36a902c5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6443dcfe9c971872f3d9e2d55c19abde87084ec8", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/6443dcfe9c971872f3d9e2d55c19abde87084ec8", "committedDate": "2020-02-21T22:20:48Z", "message": "Address the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTczMjg2", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-362973286", "createdAt": "2020-02-21T23:21:17Z", "commit": {"oid": "6443dcfe9c971872f3d9e2d55c19abde87084ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzoyMToxOFrOFtHXwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzoyMToxOFrOFtHXwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1MTAwOA==", "bodyText": "Not sure why we need a cast here.", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382851008", "createdAt": "2020-02-21T23:21:18Z", "author": {"login": "efeg"}, "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -130,52 +146,104 @@ public void configure(Map<String, ?> configs) {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createMetricsTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n+  }\n+\n+  protected void createCruiseControlMetricsTopic() throws TopicExistsException {\n+    try {\n+      CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_metricsTopic));\n+      createTopicsResult.values().get(_metricsTopic.name()).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (ExecutionException e) {\n+      if (e.getCause() instanceof TopicExistsException) {\n+        throw (TopicExistsException) e.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6443dcfe9c971872f3d9e2d55c19abde87084ec8"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c83da7bef041db946ee29f6011df7afe06f2d7", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/92c83da7bef041db946ee29f6011df7afe06f2d7", "committedDate": "2020-02-21T23:33:17Z", "message": "Address the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTc5NDcy", "url": "https://github.com/linkedin/cruise-control/pull/1082#pullrequestreview-362979472", "createdAt": "2020-02-21T23:44:20Z", "commit": {"oid": "92c83da7bef041db946ee29f6011df7afe06f2d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 151, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}