{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDAzMDg5", "number": 1364, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyNjowMlrOEyd4Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyODoyOVrOEyd9hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzUzNzU0OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyNjowMlrOHpIA6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODowNjowNFrOHpJ-Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NDk2OA==", "bodyText": "Nit: maybe considering the below approach which is slightly more cohesive. I personally like immutability.\n    Map<String, Object> overrideConfigs = Collections.unmodifiableMap(new HashMap<String, Object>(2) {{\n      put(KAFKA_CRUISE_CONTROL_CONFIG_OBJECT_CONFIG, config);\n      put(ADMIN_CLIENT_CONFIG, adminClient);\n    }});", "url": "https://github.com/linkedin/cruise-control/pull/1364#discussion_r512884968", "createdAt": "2020-10-27T17:26:02Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java", "diffHunk": "@@ -121,7 +124,9 @@ public GoalOptimizer(KafkaCruiseControlConfig config,\n     _priorityWeight = config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_PRIORITY_WEIGHT_CONFIG);\n     _strictnessWeight = config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_STRICTNESS_WEIGHT_CONFIG);\n     _allowCapacityEstimationOnProposalPrecompute = config.getBoolean(AnalyzerConfig.ALLOW_CAPACITY_ESTIMATION_ON_PROPOSAL_PRECOMPUTE_CONFIG);\n-    Map<String, Object> overrideConfigs = Collections.singletonMap(KAFKA_CRUISE_CONTROL_CONFIG_OBJECT_CONFIG, config);\n+    Map<String, Object> overrideConfigs = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32d8a9b2ce8caeb42ab496e0f607eec10a5c765"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkxNzA4Mw==", "bodyText": "Double brace initialization comes with a significant overhead (please see efficiency-of-java-double-brace-initialization) and (personally) an unorthodox syntax. Hence, I'd prefer to avoid it.\nIn this particular use-case, immutability does not provide much benefit as the map is purely generated for the use of KafkaCruiseControlConfig#getConfiguredInstance and not for any subsequent use.", "url": "https://github.com/linkedin/cruise-control/pull/1364#discussion_r512917083", "createdAt": "2020-10-27T18:06:04Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/GoalOptimizer.java", "diffHunk": "@@ -121,7 +124,9 @@ public GoalOptimizer(KafkaCruiseControlConfig config,\n     _priorityWeight = config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_PRIORITY_WEIGHT_CONFIG);\n     _strictnessWeight = config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_STRICTNESS_WEIGHT_CONFIG);\n     _allowCapacityEstimationOnProposalPrecompute = config.getBoolean(AnalyzerConfig.ALLOW_CAPACITY_ESTIMATION_ON_PROPOSAL_PRECOMPUTE_CONFIG);\n-    Map<String, Object> overrideConfigs = Collections.singletonMap(KAFKA_CRUISE_CONTROL_CONFIG_OBJECT_CONFIG, config);\n+    Map<String, Object> overrideConfigs = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NDk2OA=="}, "originalCommit": {"oid": "c32d8a9b2ce8caeb42ab496e0f607eec10a5c765"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzU1MTQyOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyODoyOVrOHpIJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODowNjoyM1rOHpJ_OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NzE1NQ==", "bodyText": "Nit: same suggestion as above", "url": "https://github.com/linkedin/cruise-control/pull/1364#discussion_r512887155", "createdAt": "2020-10-27T17:28:29Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java", "diffHunk": "@@ -72,7 +73,9 @@ public GoalViolationDetector(Queue<Anomaly> anomalies, KafkaCruiseControl kafkaC\n                                                      config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_PRIORITY_WEIGHT_CONFIG),\n                                                      config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_STRICTNESS_WEIGHT_CONFIG));\n     _balancednessScore = MAX_BALANCEDNESS_SCORE;\n-    Map<String, Object> overrideConfigs = Collections.singletonMap(KAFKA_CRUISE_CONTROL_CONFIG_OBJECT_CONFIG, config);\n+    Map<String, Object> overrideConfigs = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32d8a9b2ce8caeb42ab496e0f607eec10a5c765"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkxNzMwNA==", "bodyText": "Please see the previous response.", "url": "https://github.com/linkedin/cruise-control/pull/1364#discussion_r512917304", "createdAt": "2020-10-27T18:06:23Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java", "diffHunk": "@@ -72,7 +73,9 @@ public GoalViolationDetector(Queue<Anomaly> anomalies, KafkaCruiseControl kafkaC\n                                                      config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_PRIORITY_WEIGHT_CONFIG),\n                                                      config.getDouble(AnalyzerConfig.GOAL_BALANCEDNESS_STRICTNESS_WEIGHT_CONFIG));\n     _balancednessScore = MAX_BALANCEDNESS_SCORE;\n-    Map<String, Object> overrideConfigs = Collections.singletonMap(KAFKA_CRUISE_CONTROL_CONFIG_OBJECT_CONFIG, config);\n+    Map<String, Object> overrideConfigs = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NzE1NQ=="}, "originalCommit": {"oid": "c32d8a9b2ce8caeb42ab496e0f607eec10a5c765"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 712, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}