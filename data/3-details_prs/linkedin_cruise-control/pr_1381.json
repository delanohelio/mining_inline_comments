{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjIxNDk3", "number": 1381, "title": "Fix a bug that might cause invalid throttle replica list to be used", "bodyText": "This PR resolves #1322.", "createdAt": "2020-11-06T09:30:50Z", "url": "https://github.com/linkedin/cruise-control/pull/1381", "merged": true, "mergeCommit": {"oid": "e290e987fd8b8f90bfafddaadeeaedac85566beb"}, "closed": true, "closedAt": "2020-11-15T19:17:14Z", "author": {"login": "Lincong"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbNsr_AFqTUyNzQ2NjgwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdc0tBKgFqTUzMDgyMjk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDY2ODAw", "url": "https://github.com/linkedin/cruise-control/pull/1381#pullrequestreview-527466800", "createdAt": "2020-11-10T18:00:52Z", "commit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowMDo1MlrOHwo0GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODozMDozM1rOHwp3aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM5Mw==", "bodyText": "Superfluous parentheses around (1) !configKey.equals(LEADER_THROTTLED_RATE) and (2) !configKey.equals(FOLLOWER_THROTTLED_RATE). Can we drop them for better readability?\n\n\nPlease see https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html\n\n\nNit: This is a private function of the class -- i.e. no public / protected / package private access. Hence, I feel that this sanity check is redundant all together, but the decision to keep or remove it is up to you.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520762393", "createdAt": "2020-11-10T18:00:52Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -151,8 +151,14 @@ private void setFollowerThrottledRateIfUnset(int brokerId) {\n   }\n \n   private void setThrottledRateIfUnset(int brokerId, String configKey) {\n-    assert (_throttleRate != null);\n-    assert (configKey.equals(LEADER_THROTTLED_RATE) || configKey.equals(FOLLOWER_THROTTLED_RATE));\n+    if (_throttleRate == null) {\n+      throw new IllegalStateException(\"Throttle rate cannot be null\");\n+    }\n+    if ((!configKey.equals(LEADER_THROTTLED_RATE)) && (!configKey.equals(FOLLOWER_THROTTLED_RATE))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MzQ0MQ==", "bodyText": "Superfluous parentheses - please see the comment above.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520763441", "createdAt": "2020-11-10T18:02:35Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ==", "bodyText": "Does this private function ever expected to get * as input for a replica in replicas? Isn't this dead code?", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520773539", "createdAt": "2020-11-10T18:19:47Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed\n+      return;\n+    }\n+\n+    if (replicas.size() == 1 && replicas.iterator().next().trim().equals(\"*\")) {\n+      config.setProperty(configKey, \"*\");\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTYyNA==", "bodyText": "Don't we need a similar special treatment when removing throttled replicas from a topic? If the existing throttle is *, it should be guaranteed that it is not set by CC; hence, shouldn't we leave it as it is (i.e. untouched)?", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520779624", "createdAt": "2020-11-10T18:30:33Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjAzOTMz", "url": "https://github.com/linkedin/cruise-control/pull/1381#pullrequestreview-527603933", "createdAt": "2020-11-10T21:01:33Z", "commit": {"oid": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMTozNFrOHwvdqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMTozNFrOHwvdqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MTMzOQ==", "bodyText": "Does #removeThrottledReplicasFromTopic take the right action (i.e. leave the value as *) when the relevant config was already *? I suspect that it doesn't.\n\nWe are also missing a unit test for this scenario, can we add one?", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520871339", "createdAt": "2020-11-10T21:01:34Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTYyNA=="}, "originalCommit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDUyMjg2", "url": "https://github.com/linkedin/cruise-control/pull/1381#pullrequestreview-528452286", "createdAt": "2020-11-11T18:59:54Z", "commit": {"oid": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODo1OTo1NFrOHxaUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOToxMTozOVrOHxasRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3MzUzMQ==", "bodyText": "optional: extract this repeated into some helper (assertConfigKeyIsThrottledReplicas(...) ?)", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521573531", "createdAt": "2020-11-11T18:59:54Z", "author": {"login": "robinp-tw"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NDkxNQ==", "bodyText": "nit - end-of-line dot missing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // The existing setup throttles all replica. So, nothing needs to be changed\n          \n          \n            \n                  // The existing setup throttles all replica. So, nothing needs to be changed.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521574915", "createdAt": "2020-11-11T19:02:34Z", "author": {"login": "robinp-tw"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NTE4MA==", "bodyText": "nit: magic value \"*\" to a constant?", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521575180", "createdAt": "2020-11-11T19:03:07Z", "author": {"login": "robinp-tw"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed\n+      return;\n+    }\n+\n+    if (replicas.size() == 1 && replicas.iterator().next().trim().equals(\"*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3OTU4OA==", "bodyText": "I'm not following exactly, but given the bug happened where a * and a kv-list were joined (thus this PR), it well might be that this method gets called with a * member, isn't it?\nhttps://kafka.apache.org/documentation/#leader.replication.throttled.replicas and the Kafka validation code certainly allows for *. If CC should not allow for a * in this method, what is the codepath that still smuggled it? Or otherwise how could the bug happen?\nAgree the unit-tests would be welcome nevertheless.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521579588", "createdAt": "2020-11-11T19:11:39Z", "author": {"login": "robinp-tw"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed\n+      return;\n+    }\n+\n+    if (replicas.size() == 1 && replicas.iterator().next().trim().equals(\"*\")) {\n+      config.setProperty(configKey, \"*\");\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ=="}, "originalCommit": {"oid": "76b9676f698d595fe070f279aa89b91cd098e26f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "committedDate": "2020-11-13T08:39:04Z", "message": "Fix a bug that might cause invalid throttle replica list to be used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39cb3a3bec204bea3e330a2c8321b386bbca399a", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/39cb3a3bec204bea3e330a2c8321b386bbca399a", "committedDate": "2020-11-13T08:39:04Z", "message": "Removed superfluous parentheses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff5974dd6baf6f06043355405e15147bc3fb22e", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/5ff5974dd6baf6f06043355405e15147bc3fb22e", "committedDate": "2020-11-13T08:39:04Z", "message": "Handle the removeThrottledRateFromBroker method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6883909cf2534e690dfdf1671dd8fef2cd2a66d7", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/6883909cf2534e690dfdf1671dd8fef2cd2a66d7", "committedDate": "2020-11-13T08:39:04Z", "message": "Add a unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/c5b44f1de4f472ebadb94b65d835d1e55bf49103", "committedDate": "2020-11-13T08:39:04Z", "message": "Re-named oldFollower* and oldLeader* to currFollower* and currLeader* since it's more accurate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "627696c347b3e853eca90fe5941a604493badb16", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/627696c347b3e853eca90fe5941a604493badb16", "committedDate": "2020-11-13T08:38:04Z", "message": "Re-named oldFollower* and oldLeader* to currFollower* and currLeader* since it's more accurate"}, "afterCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/c5b44f1de4f472ebadb94b65d835d1e55bf49103", "committedDate": "2020-11-13T08:39:04Z", "message": "Re-named oldFollower* and oldLeader* to currFollower* and currLeader* since it's more accurate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNTIxNDU5", "url": "https://github.com/linkedin/cruise-control/pull/1381#pullrequestreview-530521459", "createdAt": "2020-11-14T01:10:16Z", "commit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMToxMDoxNlrOHzEpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMTo1MTo1OVrOHzF99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMxNTU4Ng==", "bodyText": "Nit: WILD_CARD_ASTERISK -> WILDCARD_ASTERISK", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523315586", "createdAt": "2020-11-14T01:10:16Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n class ReplicationThrottleHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationThrottleHelper.class);\n-\n+  static final String WILD_CARD_ASTERISK = \"*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMyNDM1OA==", "bodyText": "Nit: So, not remove ... -> So, do not remove ...\n\nmultiple occurrences, please see #removeThrottledRateFromBroker", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523324358", "createdAt": "2020-11-14T01:20:31Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -191,65 +199,101 @@ static String removeReplicasFromConfig(String throttleConfig, Set<String> replic\n     return String.join(\",\", throttles);\n   }\n \n-  private void removeLeaderThrottledReplicasFromTopic(Properties config, String topic, Set<String> replicas) {\n-    String oldLeaderThrottledReplicas = config.getProperty(LEADER_THROTTLED_REPLICAS);\n-    if (oldLeaderThrottledReplicas != null) {\n+  /**\n+   * It gets whether there is any throttled leader replica specified in the configuration property. If there is and the\n+   * specified throttled leader replica does not equal to \"*\", it modifies the configuration property by removing a\n+   * given set of replicas from the a set of throttled leader replica\n+   *\n+   * @param config configuration properties\n+   * @param topic name of topic which contains <code>replicas</code>\n+   * @param replicas replicas to remove from the configuration properties\n+   * @return true if the given configuration properties are modified and false otherwise\n+   */\n+  private boolean removeLeaderThrottledReplicasFromTopic(Properties config, String topic, Set<String> replicas) {\n+    String currLeaderThrottledReplicas = config.getProperty(LEADER_THROTTLED_REPLICAS);\n+    if (currLeaderThrottledReplicas != null) {\n+      if (currLeaderThrottledReplicas.equals(WILD_CARD_ASTERISK)) {\n+        LOG.debug(\"Existing config throttles all leader replicas. So, not remove any leader replica throttle\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzMTc5OQ==", "bodyText": "Nit: Indentation seems off -- can we use:\n    for (String replicaThrottleProp : Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS,\n                                                    ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523331799", "createdAt": "2020-11-14T01:29:17Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -61,6 +61,15 @@ private void createTopics() {\n     }\n   }\n \n+  private void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {\n+    for (String replicaThrottleProp :\n+        Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS, ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNDcxMA==", "bodyText": "Can we make this function static? This would make it clear that it does not modify the state of the object and just a utility function.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523334710", "createdAt": "2020-11-14T01:35:10Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -61,6 +61,15 @@ private void createTopics() {\n     }\n   }\n \n+  private void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNDg2Nw==", "bodyText": "Nit: Bad indentation.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523334867", "createdAt": "2020-11-14T01:36:04Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNTI1OA==", "bodyText": "Nit: Bad indentation -- please align after ( and refrain from putting the first argument to ExecutionProposal on a different line -- looks like the rest of this test (independent of this PR) also has issues with those.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523335258", "createdAt": "2020-11-14T01:39:07Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);\n+\n+    // Set replica throttle config values for both topics\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC0);\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC1);\n+\n+    final long throttleRate = 100L;\n+\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n+    ExecutionProposal proposal = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 0),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 1),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjQ4MA==", "bodyText": "This test and testDoNotRemoveThrottlesForInProgressTasks seems to have some duplicate parts. I am curious if we can extract those common code to a function?", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523336480", "createdAt": "2020-11-14T01:46:45Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNzAzNQ==", "bodyText": "This comment is not correct right? -- i.e. it should not clean everything as you have demonstrated below with the topic-level throttled replica config remaining as WILD_CARD_ASTERISK.", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523337035", "createdAt": "2020-11-14T01:50:44Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);\n+\n+    // Set replica throttle config values for both topics\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC0);\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC1);\n+\n+    final long throttleRate = 100L;\n+\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n+    ExecutionProposal proposal = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 0),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 1),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n+\n+    ExecutionTask completedTask = completedTaskForProposal(0, proposal);\n+    ExecutionTask inProgressTask = inProgressTaskForProposal(1, proposal2);\n+\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // passing an inProgress task that is not complete should have no effect.\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // Completing the in-progress task and clearing the throttles should clean everything up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNzIwNA==", "bodyText": "Nit: Redundant new line", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523337204", "createdAt": "2020-11-14T01:51:59Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);\n+\n+    // Set replica throttle config values for both topics\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC0);\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC1);\n+\n+    final long throttleRate = 100L;\n+\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n+    ExecutionProposal proposal = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 0),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 1),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n+\n+    ExecutionTask completedTask = completedTaskForProposal(0, proposal);\n+    ExecutionTask inProgressTask = inProgressTaskForProposal(1, proposal2);\n+\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // passing an inProgress task that is not complete should have no effect.\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // Completing the in-progress task and clearing the throttles should clean everything up.\n+    inProgressTask.completed(3);\n+    throttleHelper.clearThrottles(Arrays.asList(completedTask, inProgressTask), Collections.emptyList());\n+\n+    Arrays.asList(0, 1, 2, 3).forEach((i) -> assertExpectedThrottledRateForBroker(kafkaZkClient, i, null));\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/1f7b180e1a1433570df8e4a5bd4f787b076a016d", "committedDate": "2020-11-14T06:05:47Z", "message": "Fix issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c29c4b49034868dbf96b951e6fab2f6d5130649", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/1c29c4b49034868dbf96b951e6fab2f6d5130649", "committedDate": "2020-11-14T06:11:35Z", "message": "Fix more identation cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODIyOTc1", "url": "https://github.com/linkedin/cruise-control/pull/1381#pullrequestreview-530822975", "createdAt": "2020-11-15T18:31:21Z", "commit": {"oid": "1c29c4b49034868dbf96b951e6fab2f6d5130649"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 102, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}