{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzU5MTE0", "number": 1198, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoyMDoyNVrOEA_iDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0MzoyN1rOEA_82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDc2MzY1OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoyMDoyNVrOGcna-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozMzozN1rOGii3ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1OTE5NQ==", "bodyText": "These hardcoded config names and the way the user is expected to name their environment variables to pass them to CC is not very clear. Would it help if we (1) refer to the following names rather than hardcoding these configs:\n\nAbstractConfig#CONFIG_PROVIDERS_CONFIG, and\nAbstractConfig#CONFIG_PROVIDERS_PARAM\n\nand (2) provide a brief section in Configurations.md regarding how to name env variables to pass them to CC?", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r432659195", "createdAt": "2020-05-29T18:20:25Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "diffHunk": "@@ -541,4 +547,20 @@ public static void sanityCheckNonExistingGoal(List<String> goals, Map<String, Go\n \n     return balancednessCostByGoal;\n   }\n+\n+  /**\n+   * Reads the configuration file, parses and validates the configs.\n+   * @param propertiesFile is the file containing the Cruise Control configuration.\n+   * @return a parsed {@link KafkaCruiseControlConfig}\n+   * @throws IOException if the configuration file can't be read.\n+   */\n+  public static KafkaCruiseControlConfig readConfig(String propertiesFile) throws IOException {\n+    Properties props = new Properties();\n+    try (InputStream propStream = new FileInputStream(propertiesFile)) {\n+      props.put(\"config.providers\", \"env\");\n+      props.put(\"config.providers.env.class\", EnvConfigProvider.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3NjAwNA==", "bodyText": "AbstractConfig#CONFIG_PROVIDERS_PARAM seems to be private but I'll resolve the other points.", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r438876004", "createdAt": "2020-06-11T15:33:37Z", "author": {"login": "viktorsomogyi"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "diffHunk": "@@ -541,4 +547,20 @@ public static void sanityCheckNonExistingGoal(List<String> goals, Map<String, Go\n \n     return balancednessCostByGoal;\n   }\n+\n+  /**\n+   * Reads the configuration file, parses and validates the configs.\n+   * @param propertiesFile is the file containing the Cruise Control configuration.\n+   * @return a parsed {@link KafkaCruiseControlConfig}\n+   * @throws IOException if the configuration file can't be read.\n+   */\n+  public static KafkaCruiseControlConfig readConfig(String propertiesFile) throws IOException {\n+    Properties props = new Properties();\n+    try (InputStream propStream = new FileInputStream(propertiesFile)) {\n+      props.put(\"config.providers\", \"env\");\n+      props.put(\"config.providers.env.class\", EnvConfigProvider.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1OTE5NQ=="}, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDc4MDU2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODoyNTo0NlrOGcnl5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1ODowNlrOGiovbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MTk5MA==", "bodyText": "Should we also mention the properties that enable configs to be provided out of the configuration file?\nIs it intentional to override these hardcoded properties if they were also defined in the configuration file?", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r432661990", "createdAt": "2020-05-29T18:25:46Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "diffHunk": "@@ -541,4 +547,20 @@ public static void sanityCheckNonExistingGoal(List<String> goals, Map<String, Go\n \n     return balancednessCostByGoal;\n   }\n+\n+  /**\n+   * Reads the configuration file, parses and validates the configs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjI2OA==", "bodyText": "1st: acked, will do\n2nd: well, I treat them as defaults here so if people want to do something else than what CC does by default, then they should be free to. What can I improve here?", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r438972268", "createdAt": "2020-06-11T17:58:06Z", "author": {"login": "viktorsomogyi"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "diffHunk": "@@ -541,4 +547,20 @@ public static void sanityCheckNonExistingGoal(List<String> goals, Map<String, Go\n \n     return balancednessCostByGoal;\n   }\n+\n+  /**\n+   * Reads the configuration file, parses and validates the configs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MTk5MA=="}, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDgyMTQ2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/EnvConfigProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0MDowMFrOGcoALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozNTo0MlrOGii_JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2ODcxNw==", "bodyText": "Should we clear() _preConfiguredEnvironmentVariables?", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r432668717", "createdAt": "2020-05-29T18:40:00Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/EnvConfigProvider.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import org.apache.kafka.common.config.ConfigData;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.apache.kafka.common.config.provider.ConfigProvider;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EnvConfigProvider implements ConfigProvider {\n+\n+  private Map<String, String> _preConfiguredEnvironmentVariables;\n+\n+  @Override\n+  public ConfigData get(String path) {\n+    assertNoPath(path);\n+    return new ConfigData(getenv());\n+  }\n+\n+  @Override\n+  public ConfigData get(String path, Set<String> keys) {\n+    assertNoPath(path);\n+    Map<String, String> filtered = new HashMap<>(getenv());\n+    filtered.keySet().retainAll(keys);\n+    return new ConfigData(filtered);\n+  }\n+\n+  @Override\n+  public void close() {\n+    // nop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3Nzk4OA==", "bodyText": "Good point, will do so.", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r438877988", "createdAt": "2020-06-11T15:35:42Z", "author": {"login": "viktorsomogyi"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/EnvConfigProvider.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import org.apache.kafka.common.config.ConfigData;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.apache.kafka.common.config.provider.ConfigProvider;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EnvConfigProvider implements ConfigProvider {\n+\n+  private Map<String, String> _preConfiguredEnvironmentVariables;\n+\n+  @Override\n+  public ConfigData get(String path) {\n+    assertNoPath(path);\n+    return new ConfigData(getenv());\n+  }\n+\n+  @Override\n+  public ConfigData get(String path, Set<String> keys) {\n+    assertNoPath(path);\n+    Map<String, String> filtered = new HashMap<>(getenv());\n+    filtered.keySet().retainAll(keys);\n+    return new ConfigData(filtered);\n+  }\n+\n+  @Override\n+  public void close() {\n+    // nop", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2ODcxNw=="}, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDgzMjI3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/EnvConfigProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0MzoyN1rOGcoGzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0MzoyN1rOGcoGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MDQxMg==", "bodyText": "Nit: Is it possible to move the hardcoded value to a static variable?", "url": "https://github.com/linkedin/cruise-control/pull/1198#discussion_r432670412", "createdAt": "2020-05-29T18:43:27Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/EnvConfigProviderTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.KafkaCruiseControlUtils;\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.types.Password;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class EnvConfigProviderTest {\n+\n+  public static final String TEST_PASSWORD = \"testPassword123\";\n+  public static final String NOT_SUBSTITUTED_CONFIG = \"${env:SSL_KEY_PASSWORD}\";\n+\n+  @Test\n+  public void testEnvConfigProvider() throws IOException {\n+    KafkaCruiseControlConfig configs = KafkaCruiseControlUtils.readConfig(\n+        Objects.requireNonNull(this.getClass().getClassLoader().getResource(\"envConfigProviderTest.properties\")).getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726125da7865e4ee4a77b689ecca9b68c36274e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 835, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}