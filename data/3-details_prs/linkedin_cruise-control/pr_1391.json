{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NDQ0ODEz", "number": 1391, "title": "Calculate balance lower bound for resource distribution lower bound with low utilization threshold", "bodyText": "This PR resolves #1147 .", "createdAt": "2020-11-20T05:38:42Z", "url": "https://github.com/linkedin/cruise-control/pull/1391", "merged": true, "mergeCommit": {"oid": "4153171bc220174bdaade83af2ce945deb4fd660"}, "closed": true, "closedAt": "2020-12-02T22:37:40Z", "author": {"login": "Lincong"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfuZhkAFqTUzNzc2MDQxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiWZpTgFqTU0MzI5NTU4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NzYwNDEw", "url": "https://github.com/linkedin/cruise-control/pull/1391#pullrequestreview-537760410", "createdAt": "2020-11-24T17:44:48Z", "commit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0NDo0OFrOH5OLuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1MTo1MFrOH5Qt3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MzI1Ng==", "bodyText": "Can we avoid using wildcard import?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529763256", "createdAt": "2020-11-24T17:44:48Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MTEzOQ==", "bodyText": "This does not look right.\n--\nSuppose the cluster has 3 brokers.\nOne broker has a resource utilization under LowUtilizationThreshold, and\nthe other two are within the balance upper and lower limits.\nWhile this load distribution is clearly not balanced, the resource distribution goal will report a false positive -- i.e. _succeeded will be true.\nThis function should answer the following question:\n\nDo all brokers have a resource utilization under LowUtilizationThreshold?\n1.1. If answer to 1 is true, then this goal returns success,\n1.2. otherwise, continue checking for lower/upper limits using the existing logic.", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529771139", "createdAt": "2020-11-24T17:57:14Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java", "diffHunk": "@@ -260,6 +260,10 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n     // Log broker Ids over balancing limit.\n     // While proposals exclude the excludedTopics, the balance still considers utilization of the excludedTopic replicas.\n     for (Broker broker : clusterModel.aliveBrokers()) {\n+      if (isLoadUnderLowUtilizationThreshold(broker)) {\n+        continue;\n+      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5NzM1Nw==", "bodyText": "Looks like actionAcceptance implementation above does not take low utilization threshold into account. It should ensure that if all brokers were already under the low threshold, anything under low threshold is acceptable. Am I missing something?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529797357", "createdAt": "2020-11-24T18:39:17Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java", "diffHunk": "@@ -260,6 +260,10 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n     // Log broker Ids over balancing limit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5OTI2Ng==", "bodyText": "If all brokers are under low utilization threshold, shouldn't we update the following in initGoalState function to make sure that balancing limits are set properly?\n  private double _balanceUpperThreshold;\n  private double _balanceLowerThreshold;", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529799266", "createdAt": "2020-11-24T18:42:20Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java", "diffHunk": "@@ -260,6 +260,10 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n     // Log broker Ids over balancing limit.\n     // While proposals exclude the excludedTopics, the balance still considers utilization of the excludedTopic replicas.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMDg5NQ==", "bodyText": "What if there are dead disks -- i.e. broker is alive, but there are dead disks on alive brokers?\nWouldn't this cause us to drop JBOD support when there are offline disks?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529800895", "createdAt": "2020-11-24T18:45:05Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java", "diffHunk": "@@ -329,6 +333,11 @@ protected void rebalanceForBroker(Broker broker,\n                                     ClusterModel clusterModel,\n                                     Set<Goal> optimizedGoals,\n                                     OptimizationOptions optimizationOptions) {\n+\n+    if (clusterModel.deadBrokers().isEmpty() && allAliveBrokersBalanced(clusterModel, optimizationOptions)) {\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMjY5NA==", "bodyText": "Above you are checking whether _brokersAllowedReplicaMove are having utilization over lowUtilizationThreshold or not. Here you are claiming that all alive brokers are balanced. Which one is it?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529802694", "createdAt": "2020-11-24T18:48:31Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -279,13 +282,23 @@ private void utilizationForResources(ClusterModel clusterModel, OptimizationOpti\n           double capacity = resource.isHostResource() ? broker.host().capacityFor(resource)\n                                                       : broker.capacityFor(resource);\n           double utilizationPercentage = utilization / capacity;\n+          if (utilizationPercentage > lowUtilizationThreshold) {\n+            allBrokersBelowLowUtilizationThreshold = false;\n+          }\n+\n           if (utilizationPercentage >= balanceLowerThreshold && utilizationPercentage <= balanceUpperThreshold) {\n             numBalancedBrokersInBrokersAllowedReplicaMove++;\n           }\n           varianceSum += Math.pow(utilization - avgUtilizationPercentage * capacity, 2);\n         }\n       }\n-      _numBalancedBrokersByResource.put(resource, numBalancedBrokersInBrokersAllowedReplicaMove);\n+\n+      if (allBrokersBelowLowUtilizationThreshold) {\n+        // All alive brokers are balanced\n+        _numBalancedBrokersByResource.put(resource, clusterModel.aliveBrokers().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNDc2NQ==", "bodyText": "What if the lowUtilizationThreshold and utilizationPercentage are both 0? Wouldn't >= be a sufficient condition?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r529804765", "createdAt": "2020-11-24T18:51:50Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -279,13 +282,23 @@ private void utilizationForResources(ClusterModel clusterModel, OptimizationOpti\n           double capacity = resource.isHostResource() ? broker.host().capacityFor(resource)\n                                                       : broker.capacityFor(resource);\n           double utilizationPercentage = utilization / capacity;\n+          if (utilizationPercentage > lowUtilizationThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd5498ccfdc58b41a2cebf216a0ec45d08950662", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/bd5498ccfdc58b41a2cebf216a0ec45d08950662", "committedDate": "2020-11-20T05:35:28Z", "message": "Add unit test"}, "afterCommit": {"oid": "31ac3c0371bef7765e236fdc6c5783dedc7a1ce1", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/31ac3c0371bef7765e236fdc6c5783dedc7a1ce1", "committedDate": "2020-11-25T08:05:21Z", "message": "Fixed some issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31ac3c0371bef7765e236fdc6c5783dedc7a1ce1", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/31ac3c0371bef7765e236fdc6c5783dedc7a1ce1", "committedDate": "2020-11-25T08:05:21Z", "message": "Fixed some issues"}, "afterCommit": {"oid": "c75c51970820f50ffaff6488c18a9c779b309aac", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/c75c51970820f50ffaff6488c18a9c779b309aac", "committedDate": "2020-11-26T02:36:10Z", "message": "Fixed PR issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjQ1MTUx", "url": "https://github.com/linkedin/cruise-control/pull/1391#pullrequestreview-542245151", "createdAt": "2020-12-01T19:54:17Z", "commit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1NDoxN1rOH89VCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxNzoyMVrOH9AG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4MTQxNg==", "bodyText": "Typo: ... -> @param balancingConstraint Balancing constraint.", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533681416", "createdAt": "2020-12-01T19:54:17Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -486,4 +487,67 @@ public static String mitigationForOptimizationFailures(OptimizationOptions optim\n \n     return sb.toString();\n   }\n+\n+  /**\n+   * Compute the utilization upper/lower threshold in percent for the given type of resource\n+   *\n+   * @param avgUtilizationPercentage Average cluster utilization that excludes the capacity of brokers excluded for replica moves.\n+   * @param resource {@link Resource}\n+   * @param balancingConstraint balancing contraints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4MjM4Mg==", "bodyText": "(Applies to other classes in this PR -- e.g. GoalUtilsTest) Bad indentation -- please see https://github.com/linkedin/cruise-control/blob/master/docs/code-style.xml", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533682382", "createdAt": "2020-12-01T19:55:47Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -486,4 +487,67 @@ public static String mitigationForOptimizationFailures(OptimizationOptions optim\n \n     return sb.toString();\n   }\n+\n+  /**\n+   * Compute the utilization upper/lower threshold in percent for the given type of resource\n+   *\n+   * @param avgUtilizationPercentage Average cluster utilization that excludes the capacity of brokers excluded for replica moves.\n+   * @param resource {@link Resource}\n+   * @param balancingConstraint balancing contraints\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.\n+   * @param balanceMargin resource distribution goal balance margin\n+   * @param isLowerThreshold whether this method calculates resource utilization threshold upper bound or lower bound\n+   * @return The utilization upper/lower threshold in percent for the given type of resource\n+   */\n+  public static double computeResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  BalancingConstraint balancingConstraint,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold) {\n+\n+    if (balanceMargin >= 1) {\n+      throw new IllegalArgumentException(\"Balance margin must be less than 1.0. Got: \" + balanceMargin);\n+    }\n+    boolean isLowUtilization = avgUtilizationPercentage <= balancingConstraint.lowUtilizationThreshold(resource);\n+\n+    if (isLowerThreshold) {\n+      if (isLowUtilization) {\n+        return 0.0;\n+      }\n+      double balancePercentageWithMargin =\n+          balancePercentageWithMargin(isTriggeredByGoalViolation, balancingConstraint, resource, balanceMargin);\n+      return avgUtilizationPercentage * Math.max(0, (1 - balancePercentageWithMargin));\n+\n+    } else {\n+      if (isLowUtilization) {\n+        return balancingConstraint.lowUtilizationThreshold(resource) * balanceMargin;\n+      }\n+      double balancePercentageWithMargin =\n+          balancePercentageWithMargin(isTriggeredByGoalViolation, balancingConstraint, resource, balanceMargin);\n+      return avgUtilizationPercentage * (1 + balancePercentageWithMargin);\n+    }\n+  }\n+\n+  /**\n+   * To avoid churns, we add a balance margin to the user specified rebalance threshold. e.g. when user sets the\n+   * threshold to be resourceBalancePercentage, we use (resourceBalancePercentage-1)*balanceMargin instead.\n+   *\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.\n+   * @return The rebalance threshold with a margin.\n+   */\n+  private static double balancePercentageWithMargin(boolean isTriggeredByGoalViolation,\n+      BalancingConstraint balancingConstraint,\n+      Resource resource,\n+      double balanceMargin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4NTk0MA==", "bodyText": "Nit: Redundant space.", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533685940", "createdAt": "2020-12-01T20:01:37Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java", "diffHunk": "@@ -329,6 +340,7 @@ protected void rebalanceForBroker(Broker broker,\n                                     ClusterModel clusterModel,\n                                     Set<Goal> optimizedGoals,\n                                     OptimizationOptions optimizationOptions) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4OTU3Mw==", "bodyText": "The method has 4 parameters, but only one of them is documented in the JavaDoc.\nCan we document the missing parameters?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533689573", "createdAt": "2020-12-01T20:08:25Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -486,4 +487,67 @@ public static String mitigationForOptimizationFailures(OptimizationOptions optim\n \n     return sb.toString();\n   }\n+\n+  /**\n+   * Compute the utilization upper/lower threshold in percent for the given type of resource\n+   *\n+   * @param avgUtilizationPercentage Average cluster utilization that excludes the capacity of brokers excluded for replica moves.\n+   * @param resource {@link Resource}\n+   * @param balancingConstraint balancing contraints\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.\n+   * @param balanceMargin resource distribution goal balance margin\n+   * @param isLowerThreshold whether this method calculates resource utilization threshold upper bound or lower bound\n+   * @return The utilization upper/lower threshold in percent for the given type of resource\n+   */\n+  public static double computeResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  BalancingConstraint balancingConstraint,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold) {\n+\n+    if (balanceMargin >= 1) {\n+      throw new IllegalArgumentException(\"Balance margin must be less than 1.0. Got: \" + balanceMargin);\n+    }\n+    boolean isLowUtilization = avgUtilizationPercentage <= balancingConstraint.lowUtilizationThreshold(resource);\n+\n+    if (isLowerThreshold) {\n+      if (isLowUtilization) {\n+        return 0.0;\n+      }\n+      double balancePercentageWithMargin =\n+          balancePercentageWithMargin(isTriggeredByGoalViolation, balancingConstraint, resource, balanceMargin);\n+      return avgUtilizationPercentage * Math.max(0, (1 - balancePercentageWithMargin));\n+\n+    } else {\n+      if (isLowUtilization) {\n+        return balancingConstraint.lowUtilizationThreshold(resource) * balanceMargin;\n+      }\n+      double balancePercentageWithMargin =\n+          balancePercentageWithMargin(isTriggeredByGoalViolation, balancingConstraint, resource, balanceMargin);\n+      return avgUtilizationPercentage * (1 + balancePercentageWithMargin);\n+    }\n+  }\n+\n+  /**\n+   * To avoid churns, we add a balance margin to the user specified rebalance threshold. e.g. when user sets the\n+   * threshold to be resourceBalancePercentage, we use (resourceBalancePercentage-1)*balanceMargin instead.\n+   *\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.\n+   * @return The rebalance threshold with a margin.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MDUzNQ==", "bodyText": "The definition of this parameters seems incorrect.", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533690535", "createdAt": "2020-12-01T20:09:58Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -486,4 +487,67 @@ public static String mitigationForOptimizationFailures(OptimizationOptions optim\n \n     return sb.toString();\n   }\n+\n+  /**\n+   * Compute the utilization upper/lower threshold in percent for the given type of resource\n+   *\n+   * @param avgUtilizationPercentage Average cluster utilization that excludes the capacity of brokers excluded for replica moves.\n+   * @param resource {@link Resource}\n+   * @param balancingConstraint balancing contraints\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.\n+   * @param balanceMargin resource distribution goal balance margin\n+   * @param isLowerThreshold whether this method calculates resource utilization threshold upper bound or lower bound\n+   * @return The utilization upper/lower threshold in percent for the given type of resource\n+   */\n+  public static double computeResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  BalancingConstraint balancingConstraint,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold) {\n+\n+    if (balanceMargin >= 1) {\n+      throw new IllegalArgumentException(\"Balance margin must be less than 1.0. Got: \" + balanceMargin);\n+    }\n+    boolean isLowUtilization = avgUtilizationPercentage <= balancingConstraint.lowUtilizationThreshold(resource);\n+\n+    if (isLowerThreshold) {\n+      if (isLowUtilization) {\n+        return 0.0;\n+      }\n+      double balancePercentageWithMargin =\n+          balancePercentageWithMargin(isTriggeredByGoalViolation, balancingConstraint, resource, balanceMargin);\n+      return avgUtilizationPercentage * Math.max(0, (1 - balancePercentageWithMargin));\n+\n+    } else {\n+      if (isLowUtilization) {\n+        return balancingConstraint.lowUtilizationThreshold(resource) * balanceMargin;\n+      }\n+      double balancePercentageWithMargin =\n+          balancePercentageWithMargin(isTriggeredByGoalViolation, balancingConstraint, resource, balanceMargin);\n+      return avgUtilizationPercentage * (1 + balancePercentageWithMargin);\n+    }\n+  }\n+\n+  /**\n+   * To avoid churns, we add a balance margin to the user specified rebalance threshold. e.g. when user sets the\n+   * threshold to be resourceBalancePercentage, we use (resourceBalancePercentage-1)*balanceMargin instead.\n+   *\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MzMyMw==", "bodyText": "Can we update the JavaDoc to explain how this function computes the value it returns?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533693323", "createdAt": "2020-12-01T20:15:00Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -486,4 +487,67 @@ public static String mitigationForOptimizationFailures(OptimizationOptions optim\n \n     return sb.toString();\n   }\n+\n+  /**\n+   * Compute the utilization upper/lower threshold in percent for the given type of resource\n+   *\n+   * @param avgUtilizationPercentage Average cluster utilization that excludes the capacity of brokers excluded for replica moves.\n+   * @param resource {@link Resource}\n+   * @param balancingConstraint balancing contraints\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.\n+   * @param balanceMargin resource distribution goal balance margin\n+   * @param isLowerThreshold whether this method calculates resource utilization threshold upper bound or lower bound\n+   * @return The utilization upper/lower threshold in percent for the given type of resource\n+   */\n+  public static double computeResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  BalancingConstraint balancingConstraint,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold) {\n+\n+    if (balanceMargin >= 1) {\n+      throw new IllegalArgumentException(\"Balance margin must be less than 1.0. Got: \" + balanceMargin);\n+    }\n+    boolean isLowUtilization = avgUtilizationPercentage <= balancingConstraint.lowUtilizationThreshold(resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NjM5OA==", "bodyText": "The definition of this parameters seems incorrect.", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533696398", "createdAt": "2020-12-01T20:20:32Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -486,4 +487,67 @@ public static String mitigationForOptimizationFailures(OptimizationOptions optim\n \n     return sb.toString();\n   }\n+\n+  /**\n+   * Compute the utilization upper/lower threshold in percent for the given type of resource\n+   *\n+   * @param avgUtilizationPercentage Average cluster utilization that excludes the capacity of brokers excluded for replica moves.\n+   * @param resource {@link Resource}\n+   * @param balancingConstraint balancing contraints\n+   * @param isTriggeredByGoalViolation Options to adjust balance percentage with margin in case goal optimization is triggered\n+   * by goal violation detector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NzcxOQ==", "bodyText": "Nit: Redundant space", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533697719", "createdAt": "2020-12-01T20:23:04Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -262,13 +263,27 @@ private void utilizationForResources(ClusterModel clusterModel, OptimizationOpti\n     for (Resource resource : Resource.cachedValues()) {\n       double resourceUtilization = clusterModel.load().expectedUtilizationFor(resource);\n       double avgUtilizationPercentage = resourceUtilization / clusterModel.capacityWithAllowedReplicaMovesFor(resource, optimizationOptions);\n-      double balanceUpperThreshold = avgUtilizationPercentage * _balancingConstraint.resourceBalancePercentage(resource);\n-      double balanceLowerThreshold = avgUtilizationPercentage * Math.max(0, (2 - _balancingConstraint.resourceBalancePercentage(resource)));\n+\n+      double balanceUpperThreshold = GoalUtils.computeResourceUtilizationBalanceThreshold(avgUtilizationPercentage,\n+                                                                                          resource,\n+                                                                                          _balancingConstraint,\n+                                                                                          optimizationOptions.isTriggeredByGoalViolation(),\n+                                                                                          ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                                          false);\n+\n+      double balanceLowerThreshold = GoalUtils.computeResourceUtilizationBalanceThreshold(avgUtilizationPercentage,\n+                                                                                          resource,\n+                                                                                          _balancingConstraint,\n+                                                                                          optimizationOptions.isTriggeredByGoalViolation(),\n+                                                                                          ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                                          true);\n+\n       // Maximum, minimum, and standard deviation utilization for the resource.\n       double hottestBrokerUtilization = 0.0;\n       double coldestBrokerUtilization = Double.MAX_VALUE;\n       double varianceSum = 0.0;\n       int numBalancedBrokersInBrokersAllowedReplicaMove = 0;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5Nzc1Ng==", "bodyText": "Nit: Redundant space", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533697756", "createdAt": "2020-12-01T20:23:09Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -285,6 +300,7 @@ private void utilizationForResources(ClusterModel clusterModel, OptimizationOpti\n           varianceSum += Math.pow(utilization - avgUtilizationPercentage * capacity, 2);\n         }\n       }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5ODc2MQ==", "bodyText": "new HashMap<Resource, Double> -> new HashMap<>", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533698761", "createdAt": "2020-12-01T20:24:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5OTc4OA==", "bodyText": "Nit: Why is expectRebalance a Boolean? -- i.e. is it expected to get a null value?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533699788", "createdAt": "2020-12-01T20:26:47Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{\n+    put(Resource.CPU, 200.0);\n+    put(Resource.DISK, 1000.0);\n+    put(Resource.NW_IN, 2000.0);\n+    put(Resource.NW_OUT, 2000.0);\n+  }};\n+\n+  private final ClusterModel _clusterModel;\n+  private final ResourceDistributionGoal _resourceDistributionGoal;\n+  private final Map<String, Object> _goalConfigs;\n+  private final Boolean _expectRebalance;\n+\n+  public LowResourceUtilizationTest(ClusterModel clusterModel,\n+                                    ResourceDistributionGoal resourceDistributionGoal,\n+                                    Map<String, Object> goalConfigs,\n+                                    Boolean expectRebalance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwNDcyNg==", "bodyText": "I wonder if we really need to call getDefaultGoalConfigs() before each test?\nCan't we call it once and use goalConfigs.put(XXX); to override the relevant config afterwards?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533704726", "createdAt": "2020-12-01T20:35:43Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{\n+    put(Resource.CPU, 200.0);\n+    put(Resource.DISK, 1000.0);\n+    put(Resource.NW_IN, 2000.0);\n+    put(Resource.NW_OUT, 2000.0);\n+  }};\n+\n+  private final ClusterModel _clusterModel;\n+  private final ResourceDistributionGoal _resourceDistributionGoal;\n+  private final Map<String, Object> _goalConfigs;\n+  private final Boolean _expectRebalance;\n+\n+  public LowResourceUtilizationTest(ClusterModel clusterModel,\n+                                    ResourceDistributionGoal resourceDistributionGoal,\n+                                    Map<String, Object> goalConfigs,\n+                                    Boolean expectRebalance) {\n+\n+    _clusterModel = clusterModel;\n+    _resourceDistributionGoal = resourceDistributionGoal;\n+    _goalConfigs = goalConfigs;\n+    _expectRebalance = expectRebalance;\n+  }\n+\n+  /**\n+   * Populate parameters to test rebalance with low utilization threshold. All brokers are alive.\n+   *\n+   * @return Parameters to test rebalance with low utilization threshold.\n+   */\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    Collection<Object[]> p = new ArrayList<>();\n+\n+    // Expect rebalance on CPU usage distribution goal since one broker's CPU usage is above the low CPU utilization threshold\n+    ClusterModel clusterModel = createSmallClusterModel();\n+    Map<String, Object> goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3474);\n+    p.add(params(clusterModel, new CpuUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on CPU usage distribution goal since all brokers' CPU usage is below the low CPU utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3862);\n+    p.add(params(clusterModel, new CpuUsageDistributionGoal(), goalConfigs, false));\n+\n+    // Expect rebalance on disk usage distribution goal since one broker's disk usage is above the low disk utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.DISK_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.27);\n+    p.add(params(clusterModel, new DiskUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on disk usage distribution goal since all brokers' disk usage is below the low disk utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.DISK_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3223);\n+    p.add(params(clusterModel, new DiskUsageDistributionGoal(), goalConfigs, false));\n+\n+    // Expect rebalance on network inbound usage distribution goal since one broker's network inbound usage is\n+    // above the low network inbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_INBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.12);\n+    p.add(params(clusterModel, new NetworkInboundUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on network inbound usage distribution goal since all brokers' network inbound usage is\n+    // below the low network inbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_INBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.14445);\n+    p.add(params(clusterModel, new NetworkInboundUsageDistributionGoal(), goalConfigs, false));\n+\n+\n+    // Expect rebalance on network outbound usage distribution goal since one broker's network outbound usage is\n+    // above the low network outbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_OUTBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.14);\n+    p.add(params(clusterModel, new NetworkOutboundUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on network outbound usage distribution goal since all brokers' network outbound usage is\n+    // below the low network outbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_OUTBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.1639);\n+    p.add(params(clusterModel, new NetworkOutboundUsageDistributionGoal(), goalConfigs, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwNjk0OQ==", "bodyText": "Looks like we always create and pass the same cluster model here.\nWhy don't we create it inside public void test() throws OptimizationFailureException {...}?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533706949", "createdAt": "2020-12-01T20:39:58Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{\n+    put(Resource.CPU, 200.0);\n+    put(Resource.DISK, 1000.0);\n+    put(Resource.NW_IN, 2000.0);\n+    put(Resource.NW_OUT, 2000.0);\n+  }};\n+\n+  private final ClusterModel _clusterModel;\n+  private final ResourceDistributionGoal _resourceDistributionGoal;\n+  private final Map<String, Object> _goalConfigs;\n+  private final Boolean _expectRebalance;\n+\n+  public LowResourceUtilizationTest(ClusterModel clusterModel,\n+                                    ResourceDistributionGoal resourceDistributionGoal,\n+                                    Map<String, Object> goalConfigs,\n+                                    Boolean expectRebalance) {\n+\n+    _clusterModel = clusterModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwNzkxMQ==", "bodyText": "If this assert statement fails, then initReplicaDistribution and initLeaderDistribution are computed for no reason.\nShould we move them after the assert statement?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533707911", "createdAt": "2020-12-01T20:41:41Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{\n+    put(Resource.CPU, 200.0);\n+    put(Resource.DISK, 1000.0);\n+    put(Resource.NW_IN, 2000.0);\n+    put(Resource.NW_OUT, 2000.0);\n+  }};\n+\n+  private final ClusterModel _clusterModel;\n+  private final ResourceDistributionGoal _resourceDistributionGoal;\n+  private final Map<String, Object> _goalConfigs;\n+  private final Boolean _expectRebalance;\n+\n+  public LowResourceUtilizationTest(ClusterModel clusterModel,\n+                                    ResourceDistributionGoal resourceDistributionGoal,\n+                                    Map<String, Object> goalConfigs,\n+                                    Boolean expectRebalance) {\n+\n+    _clusterModel = clusterModel;\n+    _resourceDistributionGoal = resourceDistributionGoal;\n+    _goalConfigs = goalConfigs;\n+    _expectRebalance = expectRebalance;\n+  }\n+\n+  /**\n+   * Populate parameters to test rebalance with low utilization threshold. All brokers are alive.\n+   *\n+   * @return Parameters to test rebalance with low utilization threshold.\n+   */\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    Collection<Object[]> p = new ArrayList<>();\n+\n+    // Expect rebalance on CPU usage distribution goal since one broker's CPU usage is above the low CPU utilization threshold\n+    ClusterModel clusterModel = createSmallClusterModel();\n+    Map<String, Object> goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3474);\n+    p.add(params(clusterModel, new CpuUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on CPU usage distribution goal since all brokers' CPU usage is below the low CPU utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3862);\n+    p.add(params(clusterModel, new CpuUsageDistributionGoal(), goalConfigs, false));\n+\n+    // Expect rebalance on disk usage distribution goal since one broker's disk usage is above the low disk utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.DISK_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.27);\n+    p.add(params(clusterModel, new DiskUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on disk usage distribution goal since all brokers' disk usage is below the low disk utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.DISK_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3223);\n+    p.add(params(clusterModel, new DiskUsageDistributionGoal(), goalConfigs, false));\n+\n+    // Expect rebalance on network inbound usage distribution goal since one broker's network inbound usage is\n+    // above the low network inbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_INBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.12);\n+    p.add(params(clusterModel, new NetworkInboundUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on network inbound usage distribution goal since all brokers' network inbound usage is\n+    // below the low network inbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_INBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.14445);\n+    p.add(params(clusterModel, new NetworkInboundUsageDistributionGoal(), goalConfigs, false));\n+\n+\n+    // Expect rebalance on network outbound usage distribution goal since one broker's network outbound usage is\n+    // above the low network outbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_OUTBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.14);\n+    p.add(params(clusterModel, new NetworkOutboundUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on network outbound usage distribution goal since all brokers' network outbound usage is\n+    // below the low network outbound utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.NETWORK_OUTBOUND_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.1639);\n+    p.add(params(clusterModel, new NetworkOutboundUsageDistributionGoal(), goalConfigs, false));\n+\n+    return p;\n+  }\n+\n+  private static Map<String, Object> getDefaultGoalConfigs() {\n+    return new HashMap<String, Object>() {{\n+      put(MonitorConfig.BOOTSTRAP_SERVERS_CONFIG, \"bootstrap.servers\");\n+      put(ExecutorConfig.ZOOKEEPER_CONNECT_CONFIG, \"connect:1234\");\n+    }};\n+  }\n+\n+  /**\n+   * Creates a small cluster model with broker resource utilization percentage shown below:\n+   *    Broker-0:\n+   *      CPU:    34.75%\n+   *      Disk:   28%\n+   *      NW_IN:  13%\n+   *      NW_OUT: 14.75%\n+   *\n+   *    Broker-1:\n+   *      CPU:    14%\n+   *      Disk:   15.5%\n+   *      NW_IN:  7%\n+   *      NW_OUT: 5.8%\n+   *\n+   *    Broker-2:\n+   *      CPU:    9.75%\n+   *      Disk:   13.5%\n+   *      NW_IN:  6.5%\n+   *      NW_OUT: 0%\n+   *\n+   * @return cluster model\n+   */\n+  private static ClusterModel createSmallClusterModel() {\n+    return DeterministicCluster.smallClusterModel(BROKER_CAPACITY);\n+  }\n+\n+  private static Object[] params(ClusterModel clusterModel,\n+                                 ResourceDistributionGoal resourceDistributionGoal,\n+                                 Map<String, Object> goalConfigs,\n+                                 Boolean expectRebalance) {\n+    return new Object[]{clusterModel, resourceDistributionGoal, goalConfigs, expectRebalance};\n+  }\n+\n+  @Test\n+  public void test() throws OptimizationFailureException {\n+    Map<TopicPartition, List<ReplicaPlacementInfo>> initReplicaDistribution = _clusterModel.getReplicaDistribution();\n+    Map<TopicPartition, ReplicaPlacementInfo> initLeaderDistribution = _clusterModel.getLeaderDistribution();\n+\n+    _resourceDistributionGoal.configure(_goalConfigs);\n+    assertTrue(\"Failed to optimize \" + _resourceDistributionGoal.name(),\n+        _resourceDistributionGoal.optimize(_clusterModel, Collections.emptySet(), new OptimizationOptions(Collections.emptySet())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxMjgxMw==", "bodyText": "In CC, goals are instantiated by reflection and need to take configuration parameters.\nHence, instantiating CC goals this way is not the expected use-pattern -- can we use the AnalyzerUnitTestUtils#goal API?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533712813", "createdAt": "2020-12-01T20:50:31Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{\n+    put(Resource.CPU, 200.0);\n+    put(Resource.DISK, 1000.0);\n+    put(Resource.NW_IN, 2000.0);\n+    put(Resource.NW_OUT, 2000.0);\n+  }};\n+\n+  private final ClusterModel _clusterModel;\n+  private final ResourceDistributionGoal _resourceDistributionGoal;\n+  private final Map<String, Object> _goalConfigs;\n+  private final Boolean _expectRebalance;\n+\n+  public LowResourceUtilizationTest(ClusterModel clusterModel,\n+                                    ResourceDistributionGoal resourceDistributionGoal,\n+                                    Map<String, Object> goalConfigs,\n+                                    Boolean expectRebalance) {\n+\n+    _clusterModel = clusterModel;\n+    _resourceDistributionGoal = resourceDistributionGoal;\n+    _goalConfigs = goalConfigs;\n+    _expectRebalance = expectRebalance;\n+  }\n+\n+  /**\n+   * Populate parameters to test rebalance with low utilization threshold. All brokers are alive.\n+   *\n+   * @return Parameters to test rebalance with low utilization threshold.\n+   */\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    Collection<Object[]> p = new ArrayList<>();\n+\n+    // Expect rebalance on CPU usage distribution goal since one broker's CPU usage is above the low CPU utilization threshold\n+    ClusterModel clusterModel = createSmallClusterModel();\n+    Map<String, Object> goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3474);\n+    p.add(params(clusterModel, new CpuUsageDistributionGoal(), goalConfigs, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNDkzNA==", "bodyText": "Can we explain in comments how we came up with these numbers? Looks like 0.3862 is much higher than the highest broker utilization (i.e. 34.75). Why do we add this additional buffer?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533724934", "createdAt": "2020-12-01T21:13:32Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/LowResourceUtilizationTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundUsageDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.analyzer.goals.ResourceDistributionGoal;\n+import com.linkedin.kafka.cruisecontrol.common.DeterministicCluster;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n+import com.linkedin.kafka.cruisecontrol.executor.ExecutionProposal;\n+import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n+import com.linkedin.kafka.cruisecontrol.model.ReplicaPlacementInfo;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.TopicPartition;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit test for testing low utilization threshold taking effect to prevent rebalance for resource distribution goals\n+ */\n+@RunWith(Parameterized.class)\n+public class LowResourceUtilizationTest {\n+\n+  private static final Map<Resource, Double> BROKER_CAPACITY = new HashMap<Resource, Double>() {{\n+    put(Resource.CPU, 200.0);\n+    put(Resource.DISK, 1000.0);\n+    put(Resource.NW_IN, 2000.0);\n+    put(Resource.NW_OUT, 2000.0);\n+  }};\n+\n+  private final ClusterModel _clusterModel;\n+  private final ResourceDistributionGoal _resourceDistributionGoal;\n+  private final Map<String, Object> _goalConfigs;\n+  private final Boolean _expectRebalance;\n+\n+  public LowResourceUtilizationTest(ClusterModel clusterModel,\n+                                    ResourceDistributionGoal resourceDistributionGoal,\n+                                    Map<String, Object> goalConfigs,\n+                                    Boolean expectRebalance) {\n+\n+    _clusterModel = clusterModel;\n+    _resourceDistributionGoal = resourceDistributionGoal;\n+    _goalConfigs = goalConfigs;\n+    _expectRebalance = expectRebalance;\n+  }\n+\n+  /**\n+   * Populate parameters to test rebalance with low utilization threshold. All brokers are alive.\n+   *\n+   * @return Parameters to test rebalance with low utilization threshold.\n+   */\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    Collection<Object[]> p = new ArrayList<>();\n+\n+    // Expect rebalance on CPU usage distribution goal since one broker's CPU usage is above the low CPU utilization threshold\n+    ClusterModel clusterModel = createSmallClusterModel();\n+    Map<String, Object> goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3474);\n+    p.add(params(clusterModel, new CpuUsageDistributionGoal(), goalConfigs, true));\n+\n+    // Expect no rebalance on CPU usage distribution goal since all brokers' CPU usage is below the low CPU utilization threshold\n+    clusterModel = createSmallClusterModel();\n+    goalConfigs = getDefaultGoalConfigs();\n+    goalConfigs.put(AnalyzerConfig.CPU_LOW_UTILIZATION_THRESHOLD_CONFIG, 0.3862);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNTY2OQ==", "bodyText": "Is EasyMock.verify(XXX) missing intentionally?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533725669", "createdAt": "2020-12-01T21:14:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.analyzer.goals;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class GoalUtilsTest {\n+\n+  @Test\n+  public void testComputeResourceUtilizationBalanceThreshold() {\n+    Resource resource = Resource.CPU;\n+\n+    // Verify 1: Low utilization and compute balance threshold lower bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       true,\n+                                                       true,\n+                                                       0.4,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.0);\n+\n+    // Verify 2: Low utilization and compute balance threshold upper bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       false,\n+                                                       true,\n+                                                       0.4,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n+\n+    // Verify 3: Not low utilization and compute balance threshold lower bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       true,\n+                                                       true,\n+                                                       0.2,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+\n+    // Verify 4: Not low utilization and compute balance threshold upper bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       false,\n+                                                       true,\n+                                                       0.2,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+\n+  }\n+\n+  private void verifyComputingResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double lowUtilizationThreshold,\n+                                                                  double resourceBalancePercentage,\n+                                                                  double goalViolationDistributionThresholdMultiplier,\n+                                                                  double expectedComputedBalanceThreshold) {\n+\n+    BalancingConstraint mockBalanceConstraint = EasyMock.mock(BalancingConstraint.class);\n+    EasyMock.expect(mockBalanceConstraint.lowUtilizationThreshold(resource)).andReturn(lowUtilizationThreshold).anyTimes();\n+    EasyMock.expect(mockBalanceConstraint.resourceBalancePercentage(resource)).andReturn(resourceBalancePercentage).anyTimes();\n+    EasyMock.expect(mockBalanceConstraint.goalViolationDistributionThresholdMultiplier()).\n+        andReturn(goalViolationDistributionThresholdMultiplier).anyTimes();\n+\n+    EasyMock.replay(mockBalanceConstraint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNjE1MA==", "bodyText": "We have a lot of parameters, but seems like we only test a few. Can we either drop the constant parameters and assign the value within this function or add test cases that varies the tested parameter.", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533726150", "createdAt": "2020-12-01T21:15:47Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.analyzer.goals;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class GoalUtilsTest {\n+\n+  @Test\n+  public void testComputeResourceUtilizationBalanceThreshold() {\n+    Resource resource = Resource.CPU;\n+\n+    // Verify 1: Low utilization and compute balance threshold lower bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       true,\n+                                                       true,\n+                                                       0.4,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.0);\n+\n+    // Verify 2: Low utilization and compute balance threshold upper bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       false,\n+                                                       true,\n+                                                       0.4,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n+\n+    // Verify 3: Not low utilization and compute balance threshold lower bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       true,\n+                                                       true,\n+                                                       0.2,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+\n+    // Verify 4: Not low utilization and compute balance threshold upper bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       false,\n+                                                       true,\n+                                                       0.2,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+\n+  }\n+\n+  private void verifyComputingResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double lowUtilizationThreshold,\n+                                                                  double resourceBalancePercentage,\n+                                                                  double goalViolationDistributionThresholdMultiplier,\n+                                                                  double expectedComputedBalanceThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNjk1Mw==", "bodyText": "Do we really expect this functions to be called anyTimes()? Can't we be more specific?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r533726953", "createdAt": "2020-12-01T21:17:21Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.analyzer.goals;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class GoalUtilsTest {\n+\n+  @Test\n+  public void testComputeResourceUtilizationBalanceThreshold() {\n+    Resource resource = Resource.CPU;\n+\n+    // Verify 1: Low utilization and compute balance threshold lower bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       true,\n+                                                       true,\n+                                                       0.4,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.0);\n+\n+    // Verify 2: Low utilization and compute balance threshold upper bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       false,\n+                                                       true,\n+                                                       0.4,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n+\n+    // Verify 3: Not low utilization and compute balance threshold lower bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       true,\n+                                                       true,\n+                                                       0.2,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+\n+    // Verify 4: Not low utilization and compute balance threshold upper bound\n+    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n+                                                       resource,\n+                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n+                                                       false,\n+                                                       true,\n+                                                       0.2,\n+                                                       1.3,\n+                                                       1.2,\n+                                                       0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+\n+  }\n+\n+  private void verifyComputingResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n+                                                                  Resource resource,\n+                                                                  double balanceMargin,\n+                                                                  boolean isLowerThreshold,\n+                                                                  boolean isTriggeredByGoalViolation,\n+                                                                  double lowUtilizationThreshold,\n+                                                                  double resourceBalancePercentage,\n+                                                                  double goalViolationDistributionThresholdMultiplier,\n+                                                                  double expectedComputedBalanceThreshold) {\n+\n+    BalancingConstraint mockBalanceConstraint = EasyMock.mock(BalancingConstraint.class);\n+    EasyMock.expect(mockBalanceConstraint.lowUtilizationThreshold(resource)).andReturn(lowUtilizationThreshold).anyTimes();\n+    EasyMock.expect(mockBalanceConstraint.resourceBalancePercentage(resource)).andReturn(resourceBalancePercentage).anyTimes();\n+    EasyMock.expect(mockBalanceConstraint.goalViolationDistributionThresholdMultiplier()).\n+        andReturn(goalViolationDistributionThresholdMultiplier).anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75cc104686b5101cd3a14da85124274f82fb816", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/c75cc104686b5101cd3a14da85124274f82fb816", "committedDate": "2020-12-02T15:39:41Z", "message": "Calculate balance lower bound for resource distribution lower bound with low utilization threshold"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebe6e70ec7b956d5609f3cd453bce65e84e87dbc", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/ebe6e70ec7b956d5609f3cd453bce65e84e87dbc", "committedDate": "2020-12-02T15:39:41Z", "message": "Adjust implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9845f10a46f104dba9b9bacb5c9d71fa3bf0410a", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/9845f10a46f104dba9b9bacb5c9d71fa3bf0410a", "committedDate": "2020-12-02T15:39:41Z", "message": "Add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c74851dd702c73460d669b4afaeb6861df86691", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/4c74851dd702c73460d669b4afaeb6861df86691", "committedDate": "2020-12-02T15:39:41Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9de69e6e6dc9c9a4e5f202a8e74f522aab83a7", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/ee9de69e6e6dc9c9a4e5f202a8e74f522aab83a7", "committedDate": "2020-12-02T15:39:41Z", "message": "Fixed some issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b46676d9f8d084d5792dd99ce470caed251f84", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/b7b46676d9f8d084d5792dd99ce470caed251f84", "committedDate": "2020-12-02T15:39:41Z", "message": "[WIP] Need to squash this commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22c5261891eecaa6173b2633f60d13352061e466", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/22c5261891eecaa6173b2633f60d13352061e466", "committedDate": "2020-12-02T15:39:41Z", "message": "Fixed PR issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8656898b27227799a208705dac69761328150e37", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/8656898b27227799a208705dac69761328150e37", "committedDate": "2020-12-02T15:39:41Z", "message": "Delete unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415c13c38e2815aeb538beed2562866f427c3f6a", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/415c13c38e2815aeb538beed2562866f427c3f6a", "committedDate": "2020-12-02T15:39:41Z", "message": "Add unit test for GoalUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fbb50819c99e08b64089338e7d0a5dc91bb013b", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/1fbb50819c99e08b64089338e7d0a5dc91bb013b", "committedDate": "2020-12-02T18:10:00Z", "message": "Fixed PR issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0111f5dca716caddf672e6581b6c176add204eeb", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/0111f5dca716caddf672e6581b6c176add204eeb", "committedDate": "2020-11-26T03:25:36Z", "message": "Add unit test for GoalUtil"}, "afterCommit": {"oid": "1fbb50819c99e08b64089338e7d0a5dc91bb013b", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/1fbb50819c99e08b64089338e7d0a5dc91bb013b", "committedDate": "2020-12-02T18:10:00Z", "message": "Fixed PR issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjY5MTA1", "url": "https://github.com/linkedin/cruise-control/pull/1391#pullrequestreview-543269105", "createdAt": "2020-12-02T21:54:57Z", "commit": {"oid": "1fbb50819c99e08b64089338e7d0a5dc91bb013b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo1NDo1N1rOH9vvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo1NDo1N1rOH9vvIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwNzI5Nw==", "bodyText": "Nit: Can we move the hardcoded constants to static variables?", "url": "https://github.com/linkedin/cruise-control/pull/1391#discussion_r534507297", "createdAt": "2020-12-02T21:54:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -17,75 +17,35 @@ public void testComputeResourceUtilizationBalanceThreshold() {\n     Resource resource = Resource.CPU;\n \n     // Verify 1: Low utilization and compute balance threshold lower bound\n-    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n-                                                       resource,\n-                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n-                                                       true,\n-                                                       true,\n-                                                       0.4,\n-                                                       1.3,\n-                                                       1.2,\n-                                                       0.0);\n+    verifyComputingResourceUtilizationBalanceThreshold(resource, true, 0.4, 0.0);\n \n     // Verify 2: Low utilization and compute balance threshold upper bound\n-    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n-                                                       resource,\n-                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n-                                                       false,\n-                                                       true,\n-                                                       0.4,\n-                                                       1.3,\n-                                                       1.2,\n-                                                       0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n+    verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.4, 0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n \n     // Verify 3: Not low utilization and compute balance threshold lower bound\n-    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n-                                                       resource,\n-                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n-                                                       true,\n-                                                       true,\n-                                                       0.2,\n-                                                       1.3,\n-                                                       1.2,\n-                                                       0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n+    verifyComputingResourceUtilizationBalanceThreshold(resource, true, 0.2, 0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n \n     // Verify 4: Not low utilization and compute balance threshold upper bound\n-    verifyComputingResourceUtilizationBalanceThreshold(0.3,\n-                                                       resource,\n-                                                       ResourceDistributionGoal.BALANCE_MARGIN,\n-                                                       false,\n-                                                       true,\n-                                                       0.2,\n-                                                       1.3,\n-                                                       1.2,\n-                                                       0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n-\n+    verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.2, 0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n   }\n \n-  private void verifyComputingResourceUtilizationBalanceThreshold(double avgUtilizationPercentage,\n-                                                                  Resource resource,\n-                                                                  double balanceMargin,\n+  private void verifyComputingResourceUtilizationBalanceThreshold(Resource resource,\n                                                                   boolean isLowerThreshold,\n-                                                                  boolean isTriggeredByGoalViolation,\n                                                                   double lowUtilizationThreshold,\n-                                                                  double resourceBalancePercentage,\n-                                                                  double goalViolationDistributionThresholdMultiplier,\n                                                                   double expectedComputedBalanceThreshold) {\n \n     BalancingConstraint mockBalanceConstraint = EasyMock.mock(BalancingConstraint.class);\n     EasyMock.expect(mockBalanceConstraint.lowUtilizationThreshold(resource)).andReturn(lowUtilizationThreshold).anyTimes();\n-    EasyMock.expect(mockBalanceConstraint.resourceBalancePercentage(resource)).andReturn(resourceBalancePercentage).anyTimes();\n+    EasyMock.expect(mockBalanceConstraint.resourceBalancePercentage(resource)).andReturn(1.3).anyTimes();\n     EasyMock.expect(mockBalanceConstraint.goalViolationDistributionThresholdMultiplier()).\n-        andReturn(goalViolationDistributionThresholdMultiplier).anyTimes();\n+        andReturn(1.2).anyTimes();\n \n     EasyMock.replay(mockBalanceConstraint);\n-    double computedBalanceThreshold = GoalUtils.computeResourceUtilizationBalanceThreshold(avgUtilizationPercentage,\n+    double computedBalanceThreshold = GoalUtils.computeResourceUtilizationBalanceThreshold(0.3,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbb50819c99e08b64089338e7d0a5dc91bb013b"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c185566220cf6e46de3d00755c7489a4e86b621", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/1c185566220cf6e46de3d00755c7489a4e86b621", "committedDate": "2020-12-02T22:19:36Z", "message": "Fix one PR issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b2c9177df3e514faeecfa60a9301c179d287cd", "author": {"user": {"login": "Lincong", "name": "Lincong Li"}}, "url": "https://github.com/linkedin/cruise-control/commit/19b2c9177df3e514faeecfa60a9301c179d287cd", "committedDate": "2020-12-02T22:33:34Z", "message": "Fixed one missing PR issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjk1NTgy", "url": "https://github.com/linkedin/cruise-control/pull/1391#pullrequestreview-543295582", "createdAt": "2020-12-02T22:36:35Z", "commit": {"oid": "19b2c9177df3e514faeecfa60a9301c179d287cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 112, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}