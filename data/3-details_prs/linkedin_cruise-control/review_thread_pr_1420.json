{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NjE2MTUy", "number": 1420, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxNDo1N1rOFDuxjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyODoxNVrOFDwGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDU2Mzk4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxNDo1N1rOIDh0JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDozOFrOIDimKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MDY2MQ==", "bodyText": "This looks incorrect to me.\nShouldn't we pick the maximum between the following:\n\nbalancingConstraint.lowUtilizationThreshold(resource) * balanceMargin and\navgUtilizationPercentage * (1 + balancePercentageWithMargin)", "url": "https://github.com/linkedin/cruise-control/pull/1420#discussion_r540570661", "createdAt": "2020-12-10T23:14:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -530,7 +530,10 @@ public static double computeResourceUtilizationBalanceThreshold(double avgUtiliz\n \n     } else {\n       if (isLowUtilization) {\n-        return balancingConstraint.lowUtilizationThreshold(resource) * balanceMargin;\n+        double resourceBalanceUtilizationUpperLimit =\n+            Math.max(balancingConstraint.resourceBalancePercentage(resource) * avgUtilizationPercentage,\n+                     balancingConstraint.lowUtilizationThreshold(resource));\n+        return resourceBalanceUtilizationUpperLimit * balanceMargin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f261928c0126cbf7dbe2d63ab14ca474ca1b9e31"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MzQ2Ng==", "bodyText": "Right. This way does make more sense", "url": "https://github.com/linkedin/cruise-control/pull/1420#discussion_r540583466", "createdAt": "2020-12-10T23:44:38Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java", "diffHunk": "@@ -530,7 +530,10 @@ public static double computeResourceUtilizationBalanceThreshold(double avgUtiliz\n \n     } else {\n       if (isLowUtilization) {\n-        return balancingConstraint.lowUtilizationThreshold(resource) * balanceMargin;\n+        double resourceBalanceUtilizationUpperLimit =\n+            Math.max(balancingConstraint.resourceBalancePercentage(resource) * avgUtilizationPercentage,\n+                     balancingConstraint.lowUtilizationThreshold(resource));\n+        return resourceBalanceUtilizationUpperLimit * balanceMargin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MDY2MQ=="}, "originalCommit": {"oid": "f261928c0126cbf7dbe2d63ab14ca474ca1b9e31"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDU3MTQ5OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxNzoyNFrOIDh4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NDo0NFrOIDimVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MTcxMA==", "bodyText": "Nit: Bad indentation", "url": "https://github.com/linkedin/cruise-control/pull/1420#discussion_r540571710", "createdAt": "2020-12-10T23:17:24Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -13,34 +13,51 @@\n public class GoalUtilsTest {\n \n   private static final double AVG_UTILIZATION_PERCENTAGE = 0.3;\n-  private static final double RESOURCE_BALANCE_THRESHOLD = 1.3;\n+  private static final double DEFAULT_RESOURCE_BALANCE_THRESHOLD = 1.3;\n   private static final double GOAL_VIOLATION_DISTRIBUTION_THRESHOLD_MULTIPLIER = 1.2;\n \n   @Test\n   public void testComputeResourceUtilizationBalanceThreshold() {\n     Resource resource = Resource.CPU;\n \n-    // Verify 1: Low utilization and compute balance threshold lower bound\n+    // Verify case 1: Low utilization and compute balance threshold lower bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, true, 0.4, 0.0);\n \n-    // Verify 2: Low utilization and compute balance threshold upper bound\n+    // Verify case 2: Low utilization and compute balance threshold upper bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.4, 0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n \n-    // Verify 3: Not low utilization and compute balance threshold lower bound\n+    // Verify case 3: Low utilization. But the average utilization percentage * resource balance threshold > low resource utilization percentage\n+    double resourceBalanceThreshold = 1.6;\n+    double expectedComputedBalanceUpperLimit = resourceBalanceThreshold * AVG_UTILIZATION_PERCENTAGE * ResourceDistributionGoal.BALANCE_MARGIN;\n+    verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.4, expectedComputedBalanceUpperLimit, resourceBalanceThreshold);\n+\n+    // Verify case 4: Not low utilization and compute balance threshold lower bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, true, 0.2, 0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n \n-    // Verify 4: Not low utilization and compute balance threshold upper bound\n+    // Verify case 5: Not low utilization and compute balance threshold upper bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.2, 0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n   }\n \n+  private void verifyComputingResourceUtilizationBalanceThreshold(Resource resource,\n+      boolean isLowerThreshold,\n+      double lowUtilizationThreshold,\n+      double expectedComputedBalanceThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f261928c0126cbf7dbe2d63ab14ca474ca1b9e31"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MzUxMA==", "bodyText": "Fixex", "url": "https://github.com/linkedin/cruise-control/pull/1420#discussion_r540583510", "createdAt": "2020-12-10T23:44:44Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -13,34 +13,51 @@\n public class GoalUtilsTest {\n \n   private static final double AVG_UTILIZATION_PERCENTAGE = 0.3;\n-  private static final double RESOURCE_BALANCE_THRESHOLD = 1.3;\n+  private static final double DEFAULT_RESOURCE_BALANCE_THRESHOLD = 1.3;\n   private static final double GOAL_VIOLATION_DISTRIBUTION_THRESHOLD_MULTIPLIER = 1.2;\n \n   @Test\n   public void testComputeResourceUtilizationBalanceThreshold() {\n     Resource resource = Resource.CPU;\n \n-    // Verify 1: Low utilization and compute balance threshold lower bound\n+    // Verify case 1: Low utilization and compute balance threshold lower bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, true, 0.4, 0.0);\n \n-    // Verify 2: Low utilization and compute balance threshold upper bound\n+    // Verify case 2: Low utilization and compute balance threshold upper bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.4, 0.4 * ResourceDistributionGoal.BALANCE_MARGIN);\n \n-    // Verify 3: Not low utilization and compute balance threshold lower bound\n+    // Verify case 3: Low utilization. But the average utilization percentage * resource balance threshold > low resource utilization percentage\n+    double resourceBalanceThreshold = 1.6;\n+    double expectedComputedBalanceUpperLimit = resourceBalanceThreshold * AVG_UTILIZATION_PERCENTAGE * ResourceDistributionGoal.BALANCE_MARGIN;\n+    verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.4, expectedComputedBalanceUpperLimit, resourceBalanceThreshold);\n+\n+    // Verify case 4: Not low utilization and compute balance threshold lower bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, true, 0.2, 0.3 * (1 - ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n \n-    // Verify 4: Not low utilization and compute balance threshold upper bound\n+    // Verify case 5: Not low utilization and compute balance threshold upper bound\n     verifyComputingResourceUtilizationBalanceThreshold(resource, false, 0.2, 0.3 * (1 + ((1.3 * 1.2) - 1) * ResourceDistributionGoal.BALANCE_MARGIN));\n   }\n \n+  private void verifyComputingResourceUtilizationBalanceThreshold(Resource resource,\n+      boolean isLowerThreshold,\n+      double lowUtilizationThreshold,\n+      double expectedComputedBalanceThreshold) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MTcxMA=="}, "originalCommit": {"oid": "f261928c0126cbf7dbe2d63ab14ca474ca1b9e31"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc4MDQ2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyODoxNVrOIDjpog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyODoxNVrOIDjpog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMDczOA==", "bodyText": "Nit: (not introduced in this patch): Bad indentation\n    double computedBalanceThreshold = GoalUtils.computeResourceUtilizationBalanceThreshold(AVG_UTILIZATION_PERCENTAGE,\n                                                                                           resource,\n                                                                                           mockBalanceConstraint, \n                                                                                           true,\n                                                                                           ResourceDistributionGoal.BALANCE_MARGIN,\n                                                                                           isLowerThreshold);", "url": "https://github.com/linkedin/cruise-control/pull/1420#discussion_r540600738", "createdAt": "2020-12-11T00:28:15Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtilsTest.java", "diffHunk": "@@ -40,7 +46,7 @@ private void verifyComputingResourceUtilizationBalanceThreshold(Resource resourc\n \n     BalancingConstraint mockBalanceConstraint = EasyMock.mock(BalancingConstraint.class);\n     EasyMock.expect(mockBalanceConstraint.lowUtilizationThreshold(resource)).andReturn(lowUtilizationThreshold).anyTimes();\n-    EasyMock.expect(mockBalanceConstraint.resourceBalancePercentage(resource)).andReturn(RESOURCE_BALANCE_THRESHOLD).anyTimes();\n+    EasyMock.expect(mockBalanceConstraint.resourceBalancePercentage(resource)).andReturn(DEFAULT_RESOURCE_BALANCE_THRESHOLD).anyTimes();\n     EasyMock.expect(mockBalanceConstraint.goalViolationDistributionThresholdMultiplier()).\n         andReturn(GOAL_VIOLATION_DISTRIBUTION_THRESHOLD_MULTIPLIER).anyTimes();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16f8fdf223d1925e552c0ff260aeb35d3d269c15"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 755, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}