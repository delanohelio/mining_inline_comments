{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTk4MzU3", "number": 1159, "title": "Spnego and trusted proxy authentication", "bodyText": "Addresses the issue #1158.\nThis change includes SPNEGO and trusted proxy security providers.\nTesting is done with unit tests and integration tests where a Kafka - Cruise Control environment with a KDC is set up with various principals.", "createdAt": "2020-03-31T09:30:57Z", "url": "https://github.com/linkedin/cruise-control/pull/1159", "merged": true, "mergeCommit": {"oid": "0ca06127f1fc5b5584b6509edb004a2e07a2dbc4"}, "closed": true, "closedAt": "2020-05-15T17:07:24Z", "author": {"login": "viktorsomogyi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS-ZGdgH2gAyMzk2MTk4MzU3OjkwYzEzYjgyNjAwZjIwMjU0MzhiYTkxNjc3NzljZDg2ZjM2NjEzNjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchlM2DAFqTQxMjgyMTMxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "90c13b82600f2025438ba9167779cd86f3661363", "author": {"user": {"login": "viktorsomogyi", "name": "Viktor Somogyi-Vass"}}, "url": "https://github.com/linkedin/cruise-control/commit/90c13b82600f2025438ba9167779cd86f3661363", "committedDate": "2020-03-31T07:58:15Z", "message": "Spnego and trusted proxy authentication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069545a21527c98025e1ded5d01903217bb0c0a9", "author": {"user": {"login": "viktorsomogyi", "name": "Viktor Somogyi-Vass"}}, "url": "https://github.com/linkedin/cruise-control/commit/069545a21527c98025e1ded5d01903217bb0c0a9", "committedDate": "2020-04-03T15:40:02Z", "message": "Added docs and fixed shortname parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aa050271fd67efea7020def4714c1e9e3ea6ac8", "author": {"user": {"login": "viktorsomogyi", "name": "Viktor Somogyi-Vass"}}, "url": "https://github.com/linkedin/cruise-control/commit/5aa050271fd67efea7020def4714c1e9e3ea6ac8", "committedDate": "2020-04-03T15:42:05Z", "message": "Fix naming in docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966", "author": {"user": {"login": "viktorsomogyi", "name": "Viktor Somogyi-Vass"}}, "url": "https://github.com/linkedin/cruise-control/commit/59736ab34dd917daa9a2d2e16d34c0600e9bf966", "committedDate": "2020-04-09T15:05:15Z", "message": "Use separate auth service for spnego"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTQyMjA0", "url": "https://github.com/linkedin/cruise-control/pull/1159#pullrequestreview-407942204", "createdAt": "2020-05-08T01:35:42Z", "commit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTozNTo0M1rOGSV9lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjoxODozM1rOGSWpeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NzM4MQ==", "bodyText": "Does this class need to override this function? -- i.e. the content of this function and what it overrides at UserStoreAuthorizationService seem to be the same. Am I missing something?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421887381", "createdAt": "2020-05-08T01:35:43Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/security/spnego/SpnegoUserStoreAuthorizationService.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security.spnego;\n+\n+import com.linkedin.kafka.cruisecontrol.servlet.security.UserStoreAuthorizationService;\n+import org.eclipse.jetty.security.UserStore;\n+import org.eclipse.jetty.server.UserIdentity;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpnegoUserStoreAuthorizationService extends UserStoreAuthorizationService {\n+\n+  public SpnegoUserStoreAuthorizationService(String privilegesFilePath) {\n+    super(privilegesFilePath);\n+  }\n+\n+  public SpnegoUserStoreAuthorizationService(UserStore userStore) {\n+    super(userStore);\n+  }\n+\n+  @Override\n+  public UserIdentity getUserIdentity(HttpServletRequest request, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4OTU3NQ==", "bodyText": "Nit: Is it possible to define these params?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421889575", "createdAt": "2020-05-08T01:43:43Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/security/trustedproxy/TrustedProxyLoginService.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security.trustedproxy;\n+\n+import com.linkedin.kafka.cruisecontrol.servlet.security.spnego.SpnegoLoginServiceWithAuthServiceLifecycle;\n+import org.eclipse.jetty.security.ConfigurableSpnegoLoginService;\n+import org.eclipse.jetty.security.IdentityService;\n+import org.eclipse.jetty.security.LoginService;\n+import org.eclipse.jetty.security.SpnegoUserIdentity;\n+import org.eclipse.jetty.security.SpnegoUserPrincipal;\n+import org.eclipse.jetty.security.authentication.AuthorizationService;\n+import org.eclipse.jetty.server.UserIdentity;\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.security.auth.Subject;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n+import java.nio.file.Path;\n+import java.security.Principal;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.linkedin.kafka.cruisecontrol.servlet.parameters.ParameterUtils.DO_AS;\n+\n+/**\n+ * <code>TrustedProxyLoginService</code> is a special SPNEGO login service where we only allow a list of trusted services\n+ * to act on behalf of clients. The login service authenticates the trusted party but creates credentials for the client\n+ * based on the {@link AuthorizationService}.\n+ */\n+public class TrustedProxyLoginService extends ContainerLifeCycle implements LoginService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TrustedProxyLoginService.class);\n+  private final AuthorizationService _trustedUserAuthorizer;\n+  // use encapsulation instead of inheritance as it's easier to test\n+  private final ConfigurableSpnegoLoginService _delegateSpnegoLoginService;\n+\n+  /**\n+   * Creates a new instance based on the kerberos realm, the list of trusted proxies, their allowed IP pattern and the\n+   * {@link AuthorizationService} that stores the end users.\n+   * @param realm\n+   * @param userAuthorizer\n+   * @param trustedProxies\n+   * @param trustedProxyIpPattern", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NDk1Ng==", "bodyText": "Nit: Public/private credentials of subject seem to use some default values, should we move them to static variables?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421894956", "createdAt": "2020-05-08T02:03:27Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/security/trustedproxy/TrustedProxyLoginService.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security.trustedproxy;\n+\n+import com.linkedin.kafka.cruisecontrol.servlet.security.spnego.SpnegoLoginServiceWithAuthServiceLifecycle;\n+import org.eclipse.jetty.security.ConfigurableSpnegoLoginService;\n+import org.eclipse.jetty.security.IdentityService;\n+import org.eclipse.jetty.security.LoginService;\n+import org.eclipse.jetty.security.SpnegoUserIdentity;\n+import org.eclipse.jetty.security.SpnegoUserPrincipal;\n+import org.eclipse.jetty.security.authentication.AuthorizationService;\n+import org.eclipse.jetty.server.UserIdentity;\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.security.auth.Subject;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n+import java.nio.file.Path;\n+import java.security.Principal;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.linkedin.kafka.cruisecontrol.servlet.parameters.ParameterUtils.DO_AS;\n+\n+/**\n+ * <code>TrustedProxyLoginService</code> is a special SPNEGO login service where we only allow a list of trusted services\n+ * to act on behalf of clients. The login service authenticates the trusted party but creates credentials for the client\n+ * based on the {@link AuthorizationService}.\n+ */\n+public class TrustedProxyLoginService extends ContainerLifeCycle implements LoginService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TrustedProxyLoginService.class);\n+  private final AuthorizationService _trustedUserAuthorizer;\n+  // use encapsulation instead of inheritance as it's easier to test\n+  private final ConfigurableSpnegoLoginService _delegateSpnegoLoginService;\n+\n+  /**\n+   * Creates a new instance based on the kerberos realm, the list of trusted proxies, their allowed IP pattern and the\n+   * {@link AuthorizationService} that stores the end users.\n+   * @param realm\n+   * @param userAuthorizer\n+   * @param trustedProxies\n+   * @param trustedProxyIpPattern\n+   */\n+  public TrustedProxyLoginService(String realm, AuthorizationService userAuthorizer, List<String> trustedProxies, String trustedProxyIpPattern) {\n+    _delegateSpnegoLoginService = new SpnegoLoginServiceWithAuthServiceLifecycle(\n+        realm, new TrustedProxyAuthorizationService(trustedProxies, trustedProxyIpPattern));\n+    _trustedUserAuthorizer = userAuthorizer;\n+  }\n+\n+  // visible for testing\n+  TrustedProxyLoginService(ConfigurableSpnegoLoginService delegateSpnegoLoginService, AuthorizationService trustedProxyAuthorizer) {\n+    _delegateSpnegoLoginService = delegateSpnegoLoginService;\n+    _trustedUserAuthorizer = trustedProxyAuthorizer;\n+  }\n+\n+  // ------- ConfigurableSpnegoLoginService methods -------\n+\n+  public void setServiceName(String serviceName) {\n+    _delegateSpnegoLoginService.setServiceName(serviceName);\n+  }\n+\n+  public void setHostName(String hostName) {\n+    _delegateSpnegoLoginService.setHostName(hostName);\n+  }\n+\n+  public void setKeyTabPath(Path path) {\n+    _delegateSpnegoLoginService.setKeyTabPath(path);\n+  }\n+\n+  // ------- LoginService methods -------\n+\n+  @Override\n+  public String getName() {\n+    return _delegateSpnegoLoginService.getName();\n+  }\n+\n+  @Override\n+  public UserIdentity login(String username, Object credentials, ServletRequest request) {\n+    if (!(request instanceof HttpServletRequest)) {\n+      return null;\n+    }\n+    SpnegoUserIdentity serviceIdentity = (SpnegoUserIdentity) _delegateSpnegoLoginService.login(username, credentials, request);\n+    SpnegoUserPrincipal servicePrincipal = (SpnegoUserPrincipal) serviceIdentity.getUserPrincipal();\n+    String doAsUser = request.getParameter(DO_AS);\n+    LOG.info(\"Authorizing proxy user {} from {} service\", doAsUser, servicePrincipal.getName());\n+    UserIdentity doAsIdentity = null;\n+    if (doAsUser != null && !doAsUser.isEmpty()) {\n+      doAsIdentity = _trustedUserAuthorizer.getUserIdentity((HttpServletRequest) request, doAsUser);\n+    }\n+\n+    Principal principal = new TrustedProxyPrincipal(doAsUser, servicePrincipal);\n+    Subject subject = new Subject(true, Collections.singleton(principal), Collections.emptySet(), Collections.emptySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTg4Mw==", "bodyText": "Typo: ans tarts the KDC. -> and starts the KDC.", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421895883", "createdAt": "2020-05-08T02:07:17Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/security/MiniKdc.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security;\n+\n+import org.apache.kerby.kerberos.kerb.KrbException;\n+import org.apache.kerby.kerberos.kerb.client.JaasKrbUtil;\n+import org.apache.kerby.kerberos.kerb.server.SimpleKdcServer;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.LoginException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * A very simple KDC that can be used for testing.\n+ */\n+public class MiniKdc {\n+\n+  private static final String TEMP_DIR_PROPERTY_KEY = \"java.io.tmpdir\";\n+\n+  private final SimpleKdcServer _kerbyServer;\n+  private final File _keytab;\n+  private final String _realm;\n+  private List<String> _principals;\n+\n+  public MiniKdc(String realm, List<String> principals) throws KrbException {\n+    _kerbyServer = new SimpleKdcServer();\n+    _realm = realm;\n+    _principals = principals;\n+    _keytab = Paths.get(System.getProperty(TEMP_DIR_PROPERTY_KEY), UUID.randomUUID().toString() + \".keytab\").toFile();\n+  }\n+\n+  public File keytab() {\n+    return _keytab;\n+  }\n+\n+  /**\n+   * Initializes ans tarts the KDC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NjA1Mw==", "bodyText": "Nit: Can we move the hardcoded string .keytab to a static variable?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421896053", "createdAt": "2020-05-08T02:08:02Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/security/MiniKdc.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security;\n+\n+import org.apache.kerby.kerberos.kerb.KrbException;\n+import org.apache.kerby.kerberos.kerb.client.JaasKrbUtil;\n+import org.apache.kerby.kerberos.kerb.server.SimpleKdcServer;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.LoginException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * A very simple KDC that can be used for testing.\n+ */\n+public class MiniKdc {\n+\n+  private static final String TEMP_DIR_PROPERTY_KEY = \"java.io.tmpdir\";\n+\n+  private final SimpleKdcServer _kerbyServer;\n+  private final File _keytab;\n+  private final String _realm;\n+  private List<String> _principals;\n+\n+  public MiniKdc(String realm, List<String> principals) throws KrbException {\n+    _kerbyServer = new SimpleKdcServer();\n+    _realm = realm;\n+    _principals = principals;\n+    _keytab = Paths.get(System.getProperty(TEMP_DIR_PROPERTY_KEY), UUID.randomUUID().toString() + \".keytab\").toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NjEyNg==", "bodyText": "Nit: Can we move the hardcoded string kerby-server-test-harness- to a static variable?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421896126", "createdAt": "2020-05-08T02:08:16Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/security/MiniKdc.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security;\n+\n+import org.apache.kerby.kerberos.kerb.KrbException;\n+import org.apache.kerby.kerberos.kerb.client.JaasKrbUtil;\n+import org.apache.kerby.kerberos.kerb.server.SimpleKdcServer;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.LoginException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * A very simple KDC that can be used for testing.\n+ */\n+public class MiniKdc {\n+\n+  private static final String TEMP_DIR_PROPERTY_KEY = \"java.io.tmpdir\";\n+\n+  private final SimpleKdcServer _kerbyServer;\n+  private final File _keytab;\n+  private final String _realm;\n+  private List<String> _principals;\n+\n+  public MiniKdc(String realm, List<String> principals) throws KrbException {\n+    _kerbyServer = new SimpleKdcServer();\n+    _realm = realm;\n+    _principals = principals;\n+    _keytab = Paths.get(System.getProperty(TEMP_DIR_PROPERTY_KEY), UUID.randomUUID().toString() + \".keytab\").toFile();\n+  }\n+\n+  public File keytab() {\n+    return _keytab;\n+  }\n+\n+  /**\n+   * Initializes ans tarts the KDC.\n+   * @throws KrbException\n+   * @throws IOException\n+   */\n+  public void start() throws KrbException, IOException {\n+    _kerbyServer.setWorkDir(Files.createTempDirectory(\"kerby-server-test-harness-\").toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NjQ5Mw==", "bodyText": "Nit: Can we move this hardcoded string to a static variable?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421896493", "createdAt": "2020-05-08T02:09:47Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/security/jwt/JwtSecurityProviderIntegrationTest.java", "diffHunk": "@@ -137,7 +137,7 @@ public void teardown() throws Exception {\n             \"&\" + TEST_PASSWORD_KEY + \"=\" + TEST_PASSWORD +\n             \"&origin=\" + JwtAuthenticator.REDIRECT_URL);\n     securityConfigs.put(WebServerConfig.WEBSERVER_AUTH_CREDENTIALS_FILE_CONFIG,\n-        Objects.requireNonNull(this.getClass().getClassLoader().getResource(\"jwt-auth.credentials\")).getPath());\n+        Objects.requireNonNull(this.getClass().getClassLoader().getResource(\"auth.credentials\")).getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5Njc3Nw==", "bodyText": "Nit: Can we move this hardcoded string to a static variable?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421896777", "createdAt": "2020-05-08T02:10:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/security/spnego/SpnegoSecurityProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security.spnego;\n+\n+import com.linkedin.kafka.cruisecontrol.servlet.security.MiniKdc;\n+import com.linkedin.kafka.cruisecontrol.CruiseControlIntegrationTestHarness;\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kerby.kerberos.kerb.KrbException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.security.auth.Subject;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.STATE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class SpnegoSecurityProviderIntegrationTest extends CruiseControlIntegrationTestHarness {\n+\n+  private static final String CRUISE_CONTROL_STATE_ENDPOINT = \"kafkacruisecontrol/\" + STATE;\n+\n+  private static final String CC_TEST_ADMIN = \"ccTestAdmin\";\n+  private static final String REALM = \"LINKEDINTEST.COM\";\n+  private static final String CLIENT_PRINCIPAL = CC_TEST_ADMIN + \"/localhost\";\n+  private static final String SOME_OTHER_SERVICE_PRINCIPAL = \"someotherservice/localhost\";\n+  private static final String SPNEGO_SERVICE_PRINCIPAL = \"HTTP/localhost\";\n+\n+  private MiniKdc _miniKdc;\n+\n+  public SpnegoSecurityProviderIntegrationTest() throws KrbException {\n+    List<String> principals = new ArrayList<>();\n+    principals.add(CLIENT_PRINCIPAL);\n+    principals.add(SPNEGO_SERVICE_PRINCIPAL);\n+    principals.add(SOME_OTHER_SERVICE_PRINCIPAL);\n+    _miniKdc = new MiniKdc(REALM, principals);\n+  }\n+\n+  @Override\n+  protected Map<String, Object> withConfigs() {\n+    Map<String, Object> configs = new HashMap<>();\n+    configs.put(WebServerConfig.WEBSERVER_SECURITY_ENABLE_CONFIG, true);\n+    configs.put(WebServerConfig.WEBSERVER_SECURITY_PROVIDER_CONFIG, SpnegoSecurityProvider.class);\n+    configs.put(WebServerConfig.WEBSERVER_AUTH_CREDENTIALS_FILE_CONFIG,\n+        Objects.requireNonNull(this.getClass().getClassLoader().getResource(\"auth.credentials\")).getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NzM2NA==", "bodyText": "Nit: Can we move the hardcoded string to a static variable?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421897364", "createdAt": "2020-05-08T02:13:29Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/security/trustedproxy/TrustedProxySecurityProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.security.trustedproxy;\n+\n+import com.linkedin.kafka.cruisecontrol.servlet.security.MiniKdc;\n+import com.linkedin.kafka.cruisecontrol.CruiseControlIntegrationTestHarness;\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kerby.kerberos.kerb.KrbException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.security.auth.Subject;\n+import javax.servlet.http.HttpServletResponse;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.STATE;\n+import static com.linkedin.kafka.cruisecontrol.servlet.parameters.ParameterUtils.DO_AS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class TrustedProxySecurityProviderIntegrationTest extends CruiseControlIntegrationTestHarness {\n+\n+  private static final String CRUISE_CONTROL_STATE_ENDPOINT = \"kafkacruisecontrol/\" + STATE;\n+\n+  private static final String CC_TEST_ADMIN = \"ccTestAdmin\";\n+  private static final String REALM = \"LINKEDINTEST.COM\";\n+  private static final String AUTH_SERVICE_NAME = \"testauthservice\";\n+  private static final String AUTH_SERVICE_PRINCIPAL = AUTH_SERVICE_NAME + \"/localhost\";\n+  private static final String SOME_OTHER_SERVICE_PRINCIPAL = \"someotherservice/localhost\";\n+  private static final String SPNEGO_SERVICE_PRINCIPAL = \"HTTP/localhost\";\n+\n+  private MiniKdc _miniKdc;\n+\n+  public TrustedProxySecurityProviderIntegrationTest() throws KrbException {\n+    List<String> principals = new ArrayList<>();\n+    principals.add(AUTH_SERVICE_PRINCIPAL);\n+    principals.add(SPNEGO_SERVICE_PRINCIPAL);\n+    principals.add(SOME_OTHER_SERVICE_PRINCIPAL);\n+    _miniKdc = new MiniKdc(REALM, principals);\n+  }\n+\n+  @Override\n+  protected Map<String, Object> withConfigs() {\n+    Map<String, Object> configs = new HashMap<>();\n+    configs.put(WebServerConfig.WEBSERVER_SECURITY_ENABLE_CONFIG, true);\n+    configs.put(WebServerConfig.WEBSERVER_SECURITY_PROVIDER_CONFIG, TrustedProxySecurityProvider.class);\n+    configs.put(WebServerConfig.WEBSERVER_AUTH_CREDENTIALS_FILE_CONFIG,\n+        Objects.requireNonNull(this.getClass().getClassLoader().getResource(\"auth.credentials\")).getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5ODYxNw==", "bodyText": "Can we also update the supported parameters in REST-APIs.md?", "url": "https://github.com/linkedin/cruise-control/pull/1159#discussion_r421898617", "createdAt": "2020-05-08T02:18:33Z", "author": {"login": "efeg"}, "path": "docs/wiki/User Guide/Security.md", "diffHunk": "@@ -58,6 +58,46 @@ jwt.auth.certificate.location=/tmp/knox-1.3.0/data/security/keystores/gateway-id\n with the admin/admin-password username/password pair). It should redirect to the CC page. It is important to use the same\n hostname (i.e. `localhost`) with CC otherwise Knox rejects the request.\n \n+### SPNEGO Authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59736ab34dd917daa9a2d2e16d34c0600e9bf966"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f97376a3ca17eebc6276e64c3bd8f2fff05ddd", "author": {"user": {"login": "viktorsomogyi", "name": "Viktor Somogyi-Vass"}}, "url": "https://github.com/linkedin/cruise-control/commit/37f97376a3ca17eebc6276e64c3bd8f2fff05ddd", "committedDate": "2020-05-15T14:58:08Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODIxMzE2", "url": "https://github.com/linkedin/cruise-control/pull/1159#pullrequestreview-412821316", "createdAt": "2020-05-15T17:06:06Z", "commit": {"oid": "37f97376a3ca17eebc6276e64c3bd8f2fff05ddd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 200, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}