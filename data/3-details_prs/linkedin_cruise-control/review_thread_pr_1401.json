{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTc0OTM0", "number": 1401, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoyNzowNVrOE8_qjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowNTo0NlrOE_6wXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzkzMTAzOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoyNzowNVrOH5cuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoyNzowNVrOH5cuZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMTUxMA==", "bodyText": "Can we avoid wildcard imports?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530001510", "createdAt": "2020-11-24T23:27:05Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "diffHunk": "@@ -30,6 +30,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzkzMjc4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoyNzoyNFrOH5cveQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzoxNToyMFrOH5hlIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMTc4NQ==", "bodyText": "If this PR honors configurable request URI, can we drop this hardcoded value?\n\n  \n    \n      cruise-control/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java\n    \n    \n        Lines 38 to 39\n      in\n      5ed774e\n    \n    \n    \n    \n\n        \n          \n           // FIXME: Read this from a configuration \n        \n\n        \n          \n           public static final String REQUEST_URI = \"/KAFKACRUISECONTROL/\";", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530001785", "createdAt": "2020-11-24T23:27:24Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));\n     if (endPoint == null) {\n       String method = request.getMethod();\n       String errorMessage = String.format(\"Unrecognized endpoint in request '%s'%nSupported %s endpoints: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA4MTA1OA==", "bodyText": "Yes. I agree that we can drop this value and (indirectly) use the default web server API URL prefix value DEFAULT_WEBSERVER_API_URLPREFIX", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530081058", "createdAt": "2020-11-25T03:15:20Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));\n     if (endPoint == null) {\n       String method = request.getMethod();\n       String errorMessage = String.format(\"Unrecognized endpoint in request '%s'%nSupported %s endpoints: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMTc4NQ=="}, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzk3Nzk1OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozNToyMlrOH5dNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozNToyMlrOH5dNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwOTM1OA==", "bodyText": "According to the Java Servlet specification, the config WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG must end with /* suffix.\n\nThe following comment seems incomplete:\n\n\n  \n    \n      cruise-control/config/cruisecontrol.properties\n    \n    \n        Lines 325 to 327\n      in\n      5ed774e\n    \n    \n    \n    \n\n        \n          \n           # REST API default prefix \n        \n\n        \n          \n           # (dont forget the ending *) \n        \n\n        \n          \n           webserver.api.urlprefix=/kafkacruisecontrol/* \n        \n    \n  \n\n\nCan we update it to say:\n# REST API default prefix (dont forget the ending /*)\n\n\nWe don't have any sanity check to enforce this suffix upon configuration time. Can we add a sanity check for WEBSERVER_API_URLPREFIX_CONFIG under KafkaCruiseControlConfig?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530009358", "createdAt": "2020-11-24T23:35:22Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));\n     if (endPoint == null) {\n       String method = request.getMethod();\n       String errorMessage = String.format(\"Unrecognized endpoint in request '%s'%nSupported %s endpoints: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzk5NjI3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozODozNVrOH5dY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozODozNVrOH5dY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxMjM4Ng==", "bodyText": "apiUrlPrefix must end with /* -- i.e. failure of this condition must result in a configuration time failure.\nHence, this if check is redundant.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530012386", "createdAt": "2020-11-24T23:38:35Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +177,11 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    if (apiUrlPrefix.endsWith(\"/*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDAyMDY3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0NDo0OVrOH5doEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo1ODo1M1rOH6CEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI3NQ==", "bodyText": "Do we have to do this pruning and upper case conversion for apiUrlPrefix for every single request that hits a CC endpoint?\napiUrlPrefix is already known at configuration time -- i.e. it won't change throughout the lifetime of this CC instance. So can't we initialize this static util class with the well-formatted REQUEST_URI (which is constructed by pruning and upper case conversion of WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG once) and use that here as before?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530016275", "createdAt": "2020-11-24T23:44:49Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +177,11 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    if (apiUrlPrefix.endsWith(\"/*\")) {\n+      // Ignore the last character '*'\n+      apiUrlPrefix = apiUrlPrefix.substring(0, apiUrlPrefix.length() - 1);\n+    }\n+    String path = request.getRequestURI().toUpperCase().replace(apiUrlPrefix.toUpperCase(), \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5NjMxNw==", "bodyText": "It's not a good practice to use a static class to \"cache\" any value. A static method should be 100% stateless. So I strongly prefer to just stick with the current implementation with the blow change:\n    if (!apiUrlPrefix.endsWith(\"/*\")) {\n      throw new IllegalArgumentException(\"API URL prefix should end with \\\"/*\\\". Got: \" + apiUrlPrefix));\n    }\n\nIn this approach, we need to do this pruning and upper case conversion for every single request. It's not a big deal. If we really want to save this \"overhead\". We will need to think of some way that does not use the static method/class. However, that might over-complicate the whole thing. So, I prefer to stick with this approach.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530096317", "createdAt": "2020-11-25T04:11:32Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +177,11 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    if (apiUrlPrefix.endsWith(\"/*\")) {\n+      // Ignore the last character '*'\n+      apiUrlPrefix = apiUrlPrefix.substring(0, apiUrlPrefix.length() - 1);\n+    }\n+    String path = request.getRequestURI().toUpperCase().replace(apiUrlPrefix.toUpperCase(), \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI3NQ=="}, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxMzQ1MA==", "bodyText": "Discussed offline and we decided to stick with the current implementation for now. In the future, we can consider using Dagger 2", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530613450", "createdAt": "2020-11-25T19:58:53Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +177,11 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    if (apiUrlPrefix.endsWith(\"/*\")) {\n+      // Ignore the last character '*'\n+      apiUrlPrefix = apiUrlPrefix.substring(0, apiUrlPrefix.length() - 1);\n+    }\n+    String path = request.getRequestURI().toUpperCase().replace(apiUrlPrefix.toUpperCase(), \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI3NQ=="}, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDAyNTM0OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo0Njo0NFrOH5dqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDoxMTo1MFrOH5ihFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjk1OA==", "bodyText": "Passing config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG) to endpoint seems redundant (please see my comment on ParameterUtils#endPoint )", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530016958", "createdAt": "2020-11-24T23:46:44Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5NjQwNA==", "bodyText": "Replied to the previous comment", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530096404", "createdAt": "2020-11-25T04:11:50Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjk1OA=="}, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDAzNjA4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo1MToyOVrOH5dw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDoxMjo1MlrOH5iijg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxODUzNg==", "bodyText": "REQUEST_URI is a malformed _apiUrlPrefix -- i.e. it does not end with * -- hence, it shall not be used interchangeably here.\nWith the proposed change in ParameterUtils (please see earlier comment), we can drop these changes.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530018536", "createdAt": "2020-11-24T23:51:29Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManager.java", "diffHunk": "@@ -136,6 +138,7 @@ protected boolean removeEldestEntry(Map.Entry<UUID, UserTaskInfo> eldest) {\n     }\n     _sessionExpiryMs = sessionExpiryMs;\n     _maxActiveUserTasks = maxActiveUserTasks;\n+    _apiUrlPrefix = KafkaCruiseControlServletUtils.REQUEST_URI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5Njc4Mg==", "bodyText": "I changed it to:\n_apiUrlPrefix = config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG);", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530096782", "createdAt": "2020-11-25T04:12:52Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManager.java", "diffHunk": "@@ -136,6 +138,7 @@ protected boolean removeEldestEntry(Map.Entry<UUID, UserTaskInfo> eldest) {\n     }\n     _sessionExpiryMs = sessionExpiryMs;\n     _maxActiveUserTasks = maxActiveUserTasks;\n+    _apiUrlPrefix = KafkaCruiseControlServletUtils.REQUEST_URI;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxODUzNg=="}, "originalCommit": {"oid": "22bba336d1fed726f402e881ae976de1b5dbcacc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU0MDE3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/KafkaCruiseControlConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDozNDoyOFrOH6H3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzozOTo1N1rOH6Kxew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwODMwMg==", "bodyText": "Nit: We are using the expectedUrlPrefixEnd to check both webserverApiUrlPrefix and webserverUiUrlPrefix. Should we name it to something that applies to both? -- e.g. expectedSuffix", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530708302", "createdAt": "2020-11-26T00:34:28Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/KafkaCruiseControlConfig.java", "diffHunk": "@@ -464,6 +464,25 @@ void sanityCheckSecurity() { // visible for testing\n     }\n   }\n \n+  /**\n+   * Sanity check to ensure that webserver URL prefix is set up correctly. This means the following:\n+   *  <code>webserver.api.urlprefix</code> and <code>webserver.ui.urlprefix</code> must end with \"/*\"\n+   */\n+  void sanityCheckWebServerUrlPrefix() { // visible for testing\n+    String expectedUrlPrefixEnd = \"/*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NTk2Mw==", "bodyText": "Good idea", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530755963", "createdAt": "2020-11-26T03:39:57Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/KafkaCruiseControlConfig.java", "diffHunk": "@@ -464,6 +464,25 @@ void sanityCheckSecurity() { // visible for testing\n     }\n   }\n \n+  /**\n+   * Sanity check to ensure that webserver URL prefix is set up correctly. This means the following:\n+   *  <code>webserver.api.urlprefix</code> and <code>webserver.ui.urlprefix</code> must end with \"/*\"\n+   */\n+  void sanityCheckWebServerUrlPrefix() { // visible for testing\n+    String expectedUrlPrefixEnd = \"/*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwODMwMg=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU0NjIxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDozNzoyM1rOH6H6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo0MTo1NVrOH6KzbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwOTEzMA==", "bodyText": "Looks like we use this function only in tests. Should we move it to a relevant test utility class?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530709130", "createdAt": "2020-11-26T00:37:23Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -283,4 +281,10 @@ static void ensureHeaderNotPresent(HttpServletRequest request, String headerName\n   public static String httpServletRequestToString(HttpServletRequest request) {\n     return String.format(\"%s %s\", request.getMethod(), request.getRequestURI());\n   }\n+\n+  public static String getDefaultWebServerApiUrlPrefix() {\n+    // Strip off the '*' from the end of the default web server API URL prefix\n+    return WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX\n+        .substring(0, WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX.length() - 1);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NjQ2MQ==", "bodyText": "After adding back the SessionManager class, it will use this method. So, I will leave it here for now and move it to some util test class when we remove SessionManager", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530756461", "createdAt": "2020-11-26T03:41:55Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -283,4 +281,10 @@ static void ensureHeaderNotPresent(HttpServletRequest request, String headerName\n   public static String httpServletRequestToString(HttpServletRequest request) {\n     return String.format(\"%s %s\", request.getMethod(), request.getRequestURI());\n   }\n+\n+  public static String getDefaultWebServerApiUrlPrefix() {\n+    // Strip off the '*' from the end of the default web server API URL prefix\n+    return WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX\n+        .substring(0, WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX.length() - 1);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwOTEzMA=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU2NDg3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo0ODoxOVrOH6IE8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo0ODoxOVrOH6IE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMTc5NA==", "bodyText": "Can we avoid wildcard import?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530711794", "createdAt": "2020-11-26T00:48:19Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU2NzIyOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo0OTo0OFrOH6IGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo0OTo0OFrOH6IGTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjE0Mg==", "bodyText": "Let's not use the deprecated API any more. We can instead use Assert.assertThrows to check for expected exceptions.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530712142", "createdAt": "2020-11-26T00:49:48Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU3MDU1OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1MTozNlrOH6IIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1NDo0MVrOH6K-mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjYxNQ==", "bodyText": "Can we move all occurrences of the hardcoded \"getString\" to a static final variable?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530712615", "createdAt": "2020-11-26T00:51:36Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTMyMA==", "bodyText": "Fixed", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530759320", "createdAt": "2020-11-26T03:54:41Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjYxNQ=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU3NzcxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1NDoyM1rOH6IL1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjo0NToyOFrOH9ILPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw==", "bodyText": "Since we already have testWebserverUrlPrefixConfigsCorrectSetup can we drop this test?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530713557", "createdAt": "2020-11-26T00:54:23Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MzMyNw==", "bodyText": "I think the value of this test is to ensure that if those default values ever change to something that is not valid, this test will catch it and the testWebserverUrlPrefixConfigsCorrectSetup serves a different purpose", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530763327", "createdAt": "2020-11-26T04:12:01Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2OTY3NA==", "bodyText": "Don't we have sanity checks in KafkaCruiseControlConfig.java to ensure validity of config values in production regardless of whether they are the default ones or overridden by users?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r532769674", "createdAt": "2020-11-30T17:26:09Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5NjkyMA==", "bodyText": "Yes, the sanity checks will catch invalid web server URL prefix. However, invalid URL prefix can only be caught during runtime whereas this test fails the build process if the default webserver URL is invalid.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r532896920", "createdAt": "2020-11-30T20:54:29Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxODkxNQ==", "bodyText": "The existing unit tests already verify (as they should) the behavior of the tested unit with all possible good and bad inputs. The default value is just one such input, whose behavior is known -- because we already tested what such an input would generate. We know that if a future programmer changes the default value, CC will fail to start and provide a meaningful message to help resolve the configuration issue, because it is tested.\nI am against adding individual tests specifically for the default values as it eventually leads to bloating, making a build take longer at CircleCI with no additional testing coverage.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533618915", "createdAt": "2020-12-01T18:09:45Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1OTEzNQ==", "bodyText": "Makes sense. I'll remove it", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533859135", "createdAt": "2020-12-02T02:45:28Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU3ODM4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1NDo0MFrOH6IMLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1NDo0MFrOH6IMLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzY0NQ==", "bodyText": "Can we avoid using wildcard import?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530713645", "createdAt": "2020-11-26T00:54:40Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -34,8 +35,7 @@\n import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.REBALANCE;\n import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.REMOVE_BROKER;\n import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.USER_TASKS;\n-import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.GET_METHOD;\n-import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.POST_METHOD;\n+import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU4MDAxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1NToyMFrOH6INEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1NToyMFrOH6INEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzg3Mg==", "bodyText": "Can we avoid wildcard import?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530713872", "createdAt": "2020-11-26T00:55:20Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -14,6 +16,8 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODU4NjUxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDo1OTowOFrOH6IQ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDowMTo1MVrOH6LE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDg1Nw==", "bodyText": "Is apiUrlPrefix expected to be the same as apiUrlPrefixParam w/o an * at the end? If so, can we drop apiUrlPrefix from the parameters of this function and infer its value from apiUrlPrefixParam?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530714857", "createdAt": "2020-11-26T00:59:08Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +140,40 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/\", \"/a/*\");\n+    verifyGetEndpoint(\"/kafkacruisecontrol/\", WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefix API URL prefix used to concatenate with \"/endpoint_name\" to mock the URL in a request\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefix, String apiUrlPrefixParam) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDkxMw==", "bodyText": "Yes, good idea", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530760913", "createdAt": "2020-11-26T04:01:51Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +140,40 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/\", \"/a/*\");\n+    verifyGetEndpoint(\"/kafkacruisecontrol/\", WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefix API URL prefix used to concatenate with \"/endpoint_name\" to mock the URL in a request\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefix, String apiUrlPrefixParam) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDg1Nw=="}, "originalCommit": {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg3NDc2OnYy", "diffSide": "LEFT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMjoxMFrOH85msw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjo1NzoyMlrOH9IZ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDQwMw==", "bodyText": "Looks like this change modifies and breaks the indentation formatting. Can we avoid such changes?\nImporting the project style file on IntelliJ may help: https://github.com/linkedin/cruise-control/blob/master/docs/code-style.xml", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533620403", "createdAt": "2020-12-01T18:12:10Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "diffHunk": "@@ -51,8 +52,8 @@\n   private final Time _time;\n   private final ScheduledExecutorService _sessionCleaner =\n       Executors.newSingleThreadScheduledExecutor(new KafkaCruiseControlThreadFactory(\"SessionCleaner\",\n-                                                                                     true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540f22f46f69bde7bc97b77472aa484c68df4055"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2Mjg5MA==", "bodyText": "Will do. Thanks", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533862890", "createdAt": "2020-12-02T02:57:22Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "diffHunk": "@@ -51,8 +52,8 @@\n   private final Time _time;\n   private final ScheduledExecutorService _sessionCleaner =\n       Executors.newSingleThreadScheduledExecutor(new KafkaCruiseControlThreadFactory(\"SessionCleaner\",\n-                                                                                     true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDQwMw=="}, "originalCommit": {"oid": "540f22f46f69bde7bc97b77472aa484c68df4055"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg3NzQ4OnYy", "diffSide": "LEFT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMjo1N1rOH85oaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMjo1N1rOH85oaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDg0MQ==", "bodyText": "Bad indentation -- please see the earlier comment.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533620841", "createdAt": "2020-12-01T18:12:57Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManagerTest.java", "diffHunk": "@@ -36,8 +36,8 @@ public void testCreateAndCloseSession() {\n     SessionManager sessionManager = new SessionManager(1, 1000, context.time(), new MetricRegistry(), null);\n \n     sessionManager.getAndCreateSessionIfNotExist(context.request(0),\n-                                                 () -> new OperationFuture(\"testCreateSession\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540f22f46f69bde7bc97b77472aa484c68df4055"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTQ5OTUxOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzoyMDozNFrOH9I1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyMjoyNlrOH9K6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2OTg0MA==", "bodyText": "Was this added intentionally?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533869840", "createdAt": "2020-12-02T03:20:34Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServlet.java", "diffHunk": "@@ -74,6 +74,10 @@ public void destroy() {\n     }\n   }\n \n+  public String apiUrlPrefix() {\n+    return _config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMzg5NA==", "bodyText": "I was added for testing purposes. I'll remove it.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533903894", "createdAt": "2020-12-02T05:22:26Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServlet.java", "diffHunk": "@@ -74,6 +74,10 @@ public void destroy() {\n     }\n   }\n \n+  public String apiUrlPrefix() {\n+    return _config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG);\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2OTg0MA=="}, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUxOTUzOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/AbstractConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzoyOToyMlrOH9JAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyOTozN1rOH9LCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mjc5NQ==", "bodyText": "I am not sure if extending an abstract class like this by SecurityAndSslConfigTest and WebserverUrlPrefixConfigTest is the best approach.\n\nSecurityAndSslConfigTest does not use GET_CLASS_METHOD_NAME anywhere, and\nWebserverUrlPrefixConfigTest does not use GET_BOOLEAN_METHOD_NAME and HASH_CODE_METHOD_NAME anywhere.\n\nInheritance should imply that everything in the abstract class applies to the classes that extend from it. If the goal here is to share common constants across classes, can we move these constants to a utility class within config package?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533872795", "createdAt": "2020-12-02T03:29:22Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/AbstractConfigTest.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+abstract class AbstractConfigTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwNjAwMg==", "bodyText": "Sure", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533906002", "createdAt": "2020-12-02T05:29:37Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/AbstractConfigTest.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+abstract class AbstractConfigTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mjc5NQ=="}, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUyMjAzOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/SecurityAndSslConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozMDoyN1rOH9JB9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozMDoyN1rOH9JB9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3MzE0Mg==", "bodyText": "There are some missing cases below -- see:\n        .addMockedMethod(\"getBoolean\")\n        .addMockedMethod(\"getClass\")\n        .addMockedMethod(\"hashCode\")", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533873142", "createdAt": "2020-12-02T03:30:27Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/SecurityAndSslConfigTest.java", "diffHunk": "@@ -16,17 +16,17 @@\n import static org.easymock.EasyMock.replay;\n import static org.easymock.EasyMock.verify;\n \n-public class SecurityAndSslConfigTest {\n+public class SecurityAndSslConfigTest extends AbstractConfigTest {\n \n   @Rule\n   public ExpectedException _expectedException = ExpectedException.none();\n \n   @Test\n   public void testSslConfigsSetUpThrowsExceptionOnNullKeystoreLocation() {\n     KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n-        .addMockedMethod(\"getBoolean\")\n-        .addMockedMethod(\"getString\")\n-        .addMockedMethod(\"hashCode\")\n+        .addMockedMethod(GET_BOOLEAN_METHOD_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUzMjg2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozNjoxOVrOH9JIDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToyMDowMlrOH9K3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDcwMQ==", "bodyText": "Nit: It is common practice / convention to make utility classes final.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533874701", "createdAt": "2020-12-02T03:36:19Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletTestUtils.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.servlet;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+\n+\n+public class KafkaCruiseControlServletTestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMzIwMg==", "bodyText": "Thanks for letting me know", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533903202", "createdAt": "2020-12-02T05:20:02Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletTestUtils.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.servlet;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+\n+\n+public class KafkaCruiseControlServletTestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDcwMQ=="}, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUzMzk1OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozNjo1NVrOH9JIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozNjo1NVrOH9JIrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDg2MQ==", "bodyText": "Nit: times(1) -> once()", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533874861", "createdAt": "2020-12-02T03:36:55Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefixParam) {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String apiUrlPrefix = apiUrlPrefixParam.substring(0, apiUrlPrefixParam.length() - 1);\n+    for (CruiseControlEndPoint getEndPoint : CruiseControlEndPoint.getEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + getEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(GET_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(getEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);\n+    }\n+\n+    for (CruiseControlEndPoint postEndPoint : CruiseControlEndPoint.postEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + postEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(POST_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUzOTg5OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzo0MDowMlrOH9JL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToxOTowMlrOH9K2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NTcxMQ==", "bodyText": "I'd recommend dropping the test for the default -- i.e.\nverifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n\nand moving the content of the private function verifyGetEndpoint inside this test function as it is not used anywhere else and contains all the logic of this test.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533875711", "createdAt": "2020-12-02T03:40:02Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMjg4OQ==", "bodyText": "I have changed the implementation and the verifyGetEndpoint method is not used any more in test", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533902889", "createdAt": "2020-12-02T05:19:02Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NTcxMQ=="}, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTU0NjE4OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzo0MzoxNVrOH9JPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNToxOToxNlrOH9K2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjU5Nw==", "bodyText": "Does reset call also verify the mock? -- i.e. if not do we need EasyMock.verify()? (similar use above)", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533876597", "createdAt": "2020-12-02T03:43:15Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefixParam) {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String apiUrlPrefix = apiUrlPrefixParam.substring(0, apiUrlPrefixParam.length() - 1);\n+    for (CruiseControlEndPoint getEndPoint : CruiseControlEndPoint.getEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + getEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(GET_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(getEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);\n+    }\n+\n+    for (CruiseControlEndPoint postEndPoint : CruiseControlEndPoint.postEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + postEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(POST_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(postEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMjk4MA==", "bodyText": "I will call verify before reset", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533902980", "createdAt": "2020-12-02T05:19:16Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefixParam) {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String apiUrlPrefix = apiUrlPrefixParam.substring(0, apiUrlPrefixParam.length() - 1);\n+    for (CruiseControlEndPoint getEndPoint : CruiseControlEndPoint.getEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + getEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(GET_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(getEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);\n+    }\n+\n+    for (CruiseControlEndPoint postEndPoint : CruiseControlEndPoint.postEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + postEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(POST_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(postEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjU5Nw=="}, "originalCommit": {"oid": "48038e7c7620b259769a99eb5ad0b09c343edd94"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU0MTQzOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo0NTo0OVrOH94NIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTowMDo1NFrOH95phA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjA0OQ==", "bodyText": "If the URL does not have any extra path information, request.getPathInfo() can return null. In this case, I believe this method should return null.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534646049", "createdAt": "2020-12-03T03:45:49Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +176,7 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    String path = request.getPathInfo().substring(1); // Skip the first character '/'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2OTcwMA==", "bodyText": "Good point!", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534669700", "createdAt": "2020-12-03T05:00:54Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +176,7 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    String path = request.getPathInfo().substring(1); // Skip the first character '/'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjA0OQ=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU0MzM3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo0NjozNlrOH94OJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo0NjozNlrOH94OJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjMwOQ==", "bodyText": "Can we drop the unused apiUrlPrefix?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534646309", "createdAt": "2020-12-03T03:46:36Z", "author": {"login": "efeg"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -881,7 +880,7 @@ static int partitionBoundary(HttpServletRequest request, boolean isUpperBound) {\n     return Integer.parseInt(boundaries[isUpperBound ? 1 : 0]);\n   }\n \n-  static Set<Integer> brokerIds(HttpServletRequest request, boolean isOptional) throws UnsupportedEncodingException {\n+  static Set<Integer> brokerIds(HttpServletRequest request, String apiUrlPrefix, boolean isOptional) throws UnsupportedEncodingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU1MTY3OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzo1MDoxN1rOH94Syw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0MDoxNVrOH-xgsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ5OQ==", "bodyText": "Nit: Why do we break the line -- i.e. are there any code changes here?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534647499", "createdAt": "2020-12-03T03:50:17Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -234,7 +234,8 @@ private static UserTasksParameters mockUserTasksParameters(HttpServletRequest an\n     EasyMock.expect(parameters.userTaskIds()).andReturn(ParameterUtils.userTaskIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.clientIds()).andReturn(ParameterUtils.clientIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.endPoints()).andReturn(ParameterUtils.endPoints(answerQueryRequest)).anyTimes();\n-    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils.endPoint(answerQueryRequest)).anyTimes();\n+    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils\n+        .endPoint(answerQueryRequest)).anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3MTI5Ng==", "bodyText": "Right. No need to break the line here and no code change here", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534671296", "createdAt": "2020-12-03T05:06:01Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -234,7 +234,8 @@ private static UserTasksParameters mockUserTasksParameters(HttpServletRequest an\n     EasyMock.expect(parameters.userTaskIds()).andReturn(ParameterUtils.userTaskIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.clientIds()).andReturn(ParameterUtils.clientIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.endPoints()).andReturn(ParameterUtils.endPoints(answerQueryRequest)).anyTimes();\n-    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils.endPoint(answerQueryRequest)).anyTimes();\n+    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils\n+        .endPoint(answerQueryRequest)).anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ5OQ=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NDk0Nw==", "bodyText": "Nit: This line still has the line break even after this issue is marked as resolved.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535584947", "createdAt": "2020-12-03T20:40:15Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -234,7 +234,8 @@ private static UserTasksParameters mockUserTasksParameters(HttpServletRequest an\n     EasyMock.expect(parameters.userTaskIds()).andReturn(ParameterUtils.userTaskIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.clientIds()).andReturn(ParameterUtils.clientIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.endPoints()).andReturn(ParameterUtils.endPoints(answerQueryRequest)).anyTimes();\n-    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils.endPoint(answerQueryRequest)).anyTimes();\n+    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils\n+        .endPoint(answerQueryRequest)).anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ5OQ=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU3NTMzOnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowMTozMVrOH94gow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1Mzo1MlrOH-ya6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA0Mw==", "bodyText": "(Not introduced in this patch) Looks like this class has no EasyMock.verify(XXX) calls; hence, it is hard to verify if the expected calls are made as many as required. Should we add verify before appropriate EasyMock.reset() calls? -- e.g. for the first one in testUserTaskParameters\n    EasyMock.verify(answerQueryRequest1, parameters1, _mockUUIDGenerator, _mockHttpSession, _mockHttpServletResponse);", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534651043", "createdAt": "2020-12-03T04:01:31Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -260,8 +261,10 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession()).andReturn(session).anyTimes();\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(method).anyTimes();\n-    EasyMock.expect(request.getRequestURI()).andReturn(KafkaCruiseControlServletUtils.REQUEST_URI + resource).anyTimes();\n+    EasyMock.expect(request.getRequestURI())\n+        .andReturn(KafkaCruiseControlServletTestUtils.getDefaultWebServerApiUrlPrefix() + resource).anyTimes();\n     EasyMock.expect(request.getParameterMap()).andReturn(params).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(\"/\" + resource).anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyOTc4Nw==", "bodyText": "I tried to add verify to KafkaCruiseControlServletEndpointTest.java and UserTaskManagerTest.java and I realized that the test cases need to be changed to pass the verify method and it requires some relatively non-trivial change or even re-write some of the unit tests.\nSo, I suggest not doing it in this PR since it's irrelevant and creating an issue for this task.", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535429787", "createdAt": "2020-12-03T17:18:36Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -260,8 +261,10 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession()).andReturn(session).anyTimes();\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(method).anyTimes();\n-    EasyMock.expect(request.getRequestURI()).andReturn(KafkaCruiseControlServletUtils.REQUEST_URI + resource).anyTimes();\n+    EasyMock.expect(request.getRequestURI())\n+        .andReturn(KafkaCruiseControlServletTestUtils.getDefaultWebServerApiUrlPrefix() + resource).anyTimes();\n     EasyMock.expect(request.getParameterMap()).andReturn(params).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(\"/\" + resource).anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA0Mw=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5OTg0OQ==", "bodyText": "Issue created: #1408", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535599849", "createdAt": "2020-12-03T20:53:52Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -260,8 +261,10 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession()).andReturn(session).anyTimes();\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(method).anyTimes();\n-    EasyMock.expect(request.getRequestURI()).andReturn(KafkaCruiseControlServletUtils.REQUEST_URI + resource).anyTimes();\n+    EasyMock.expect(request.getRequestURI())\n+        .andReturn(KafkaCruiseControlServletTestUtils.getDefaultWebServerApiUrlPrefix() + resource).anyTimes();\n     EasyMock.expect(request.getParameterMap()).andReturn(params).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(\"/\" + resource).anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA0Mw=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU4Mzk2OnYy", "diffSide": "RIGHT", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManagerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowNTo0NlrOH94lsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0MToyOVrOH-xmHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjMzOA==", "bodyText": "(Not introduced in this PR) Can we add verify for mocks? (please see earlier similar comment)", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534652338", "createdAt": "2020-12-03T04:05:46Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManagerTest.java", "diffHunk": "@@ -296,6 +296,7 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(GET_METHOD).anyTimes();\n     EasyMock.expect(request.getRequestURI()).andReturn(resource).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(resource).anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyOTk3Nw==", "bodyText": "Same comment as above", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535429977", "createdAt": "2020-12-03T17:18:52Z", "author": {"login": "Lincong"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManagerTest.java", "diffHunk": "@@ -296,6 +296,7 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(GET_METHOD).anyTimes();\n     EasyMock.expect(request.getRequestURI()).andReturn(resource).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(resource).anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjMzOA=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NjMzMw==", "bodyText": "Sure, we can address them in a separate PR -- can we create an issue about them?", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535586333", "createdAt": "2020-12-03T20:41:29Z", "author": {"login": "efeg"}, "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManagerTest.java", "diffHunk": "@@ -296,6 +296,7 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(GET_METHOD).anyTimes();\n     EasyMock.expect(request.getRequestURI()).andReturn(resource).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(resource).anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjMzOA=="}, "originalCommit": {"oid": "5ede61bc8158263994bc7864f10e39dc4919b6be"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 745, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}