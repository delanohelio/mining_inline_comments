{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDgzNDAx", "number": 1130, "title": "add_broker should drop brokers-to-be-added from recently-removed-brokers", "bodyText": "Addresses the issue #1114.", "createdAt": "2020-03-05T20:26:03Z", "url": "https://github.com/linkedin/cruise-control/pull/1130", "merged": true, "mergeCommit": {"oid": "421918006b71ab89ec9499c8a16c77090d705ad7"}, "closed": true, "closedAt": "2020-03-06T02:37:50Z", "author": {"login": "efeg"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKxYj5AH2gAyMzg0NDgzNDAxOjkwMzA4ZWVjNmYwNGVkNzBmMWI2NmM2NDQzY2ExZTNlYWRlNjU1Y2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK12X4gFqTM3MDAzMDI2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "90308eec6f04ed70f1b66c6443ca1e3eade655cc", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/90308eec6f04ed70f1b66c6443ca1e3eade655cc", "committedDate": "2020-03-05T20:17:30Z", "message": "add_broker should drop brokers-to-be-added from recently-removed-brokers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTk2ODM3", "url": "https://github.com/linkedin/cruise-control/pull/1130#pullrequestreview-369996837", "createdAt": "2020-03-06T00:00:54Z", "commit": {"oid": "90308eec6f04ed70f1b66c6443ca1e3eade655cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDowMDo1NFrOFyoYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDowMDo1NFrOFyoYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzNDc0OA==", "bodyText": "should we also drop to_be_added_broker from recently_demoted_broker set?", "url": "https://github.com/linkedin/cruise-control/pull/1130#discussion_r388634748", "createdAt": "2020-03-06T00:00:54Z", "author": {"login": "kidkun"}, "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/handler/async/runnable/RunnableUtils.java", "diffHunk": "@@ -259,6 +260,72 @@ public static void maybeStopOngoingExecutionToModifyAndWait(KafkaCruiseControl k\n     step.done();\n   }\n \n+  /**\n+   * Compute optimization options, update recently removed brokers (if not dryRun) and return the computed result.\n+   *\n+   * @param clusterModel The state of the cluster.\n+   * @param isTriggeredByGoalViolation True if proposals is triggered by goal violation, false otherwise.\n+   * @param kafkaCruiseControl The Kafka Cruise Control instance.\n+   * @param brokersToDropFromRecentlyRemoved Brokers to drop from recently removed brokers. Modifies the actual values if not dryRun.\n+   * @param dryRun True if dryrun, false otherwise.\n+   * @param excludeRecentlyDemotedBrokers Exclude recently demoted brokers from proposal generation for leadership transfer.\n+   * @param excludeRecentlyRemovedBrokers Exclude recently removed brokers from proposal generation for replica transfer.\n+   * @param excludedTopicsPattern The topics that should be excluded from the optimization action.\n+   * @param requestedDestinationBrokerIds Explicitly requested destination broker Ids to limit the replica movement to\n+   *                                      these brokers (if empty, no explicit filter is enforced -- cannot be null).\n+   * @param onlyMoveImmigrantReplicas True to move only immigrant replicas, false otherwise.\n+   * @return Computed optimization options.\n+   */\n+  public static OptimizationOptions computeOptimizationOptions(ClusterModel clusterModel,\n+                                                               boolean isTriggeredByGoalViolation,\n+                                                               KafkaCruiseControl kafkaCruiseControl,\n+                                                               Set<Integer> brokersToDropFromRecentlyRemoved,\n+                                                               boolean dryRun,\n+                                                               boolean excludeRecentlyDemotedBrokers,\n+                                                               boolean excludeRecentlyRemovedBrokers,\n+                                                               Pattern excludedTopicsPattern,\n+                                                               Set<Integer> requestedDestinationBrokerIds,\n+                                                               boolean onlyMoveImmigrantReplicas) {\n+\n+    // Update recently removed brokers.\n+    Set<Integer> intendedRecentlyRemovedBrokers = maybeDropRecentlyRemovedBrokers(kafkaCruiseControl,\n+                                                                                  brokersToDropFromRecentlyRemoved,\n+                                                                                  dryRun);\n+\n+    Set<Integer> excludedBrokersForLeadership = excludeRecentlyDemotedBrokers ? kafkaCruiseControl.executorState().recentlyDemotedBrokers()\n+                                                                              : Collections.emptySet();\n+\n+    Set<Integer> excludedBrokersForReplicaMove = excludeRecentlyRemovedBrokers ? intendedRecentlyRemovedBrokers\n+                                                                               : Collections.emptySet();\n+\n+    Set<String> excludedTopics = kafkaCruiseControl.excludedTopics(clusterModel, excludedTopicsPattern);\n+    LOG.debug(\"Topics excluded from partition movement: {}\", excludedTopics);\n+    return new OptimizationOptions(excludedTopics, excludedBrokersForLeadership, excludedBrokersForReplicaMove,\n+                                   isTriggeredByGoalViolation, requestedDestinationBrokerIds, onlyMoveImmigrantReplicas);\n+  }\n+\n+\n+  /**\n+   * Update recently removed brokers with the given brokers to drop if the given dryrun is false.\n+   *\n+   * @param kafkaCruiseControl The Kafka Cruise Control instance.\n+   * @param brokersToDropFromRecentlyRemoved Brokers to drop from recently removed brokers (if exist).\n+   * @param dryRun True if dryrun, false otherwise.\n+   * @return Brokers intended to be in recently removed brokers.\n+   */\n+  private static Set<Integer> maybeDropRecentlyRemovedBrokers(KafkaCruiseControl kafkaCruiseControl,\n+                                                              Set<Integer> brokersToDropFromRecentlyRemoved,\n+                                                              boolean dryRun) {\n+    if (!dryRun) {\n+      kafkaCruiseControl.dropRecentBrokers(brokersToDropFromRecentlyRemoved, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90308eec6f04ed70f1b66c6443ca1e3eade655cc"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a3bceadabc4be68d7125ddc31c67da8b553578", "author": {"user": null}, "url": "https://github.com/linkedin/cruise-control/commit/f4a3bceadabc4be68d7125ddc31c67da8b553578", "committedDate": "2020-03-06T01:23:51Z", "message": "Address the feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDMwMjY0", "url": "https://github.com/linkedin/cruise-control/pull/1130#pullrequestreview-370030264", "createdAt": "2020-03-06T01:29:41Z", "commit": {"oid": "f4a3bceadabc4be68d7125ddc31c67da8b553578"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 179, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}