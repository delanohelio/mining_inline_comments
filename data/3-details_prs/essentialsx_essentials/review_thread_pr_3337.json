{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjA2NDcx", "number": 3337, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDowNzo1MlrOEBHC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NToxOVrOEL1mhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTk5NDgwOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDowNzo1MlrOGcyuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDowNzo1MlrOGcyuLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDMzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void parseCommand(Server server, CommandSource sender, String[] args) throws Exception {\n          \n          \n            \n                private void parseOthers(Server server, CommandSource sender, String[] args) throws Exception {", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432844333", "createdAt": "2020-05-30T14:07:52Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandback.java", "diffHunk": "@@ -32,28 +29,17 @@ protected void run(Server server, User user, String commandLabel, String[] args)\n \n     @Override\n     protected void run(Server server, CommandSource sender, String commandLabel, String[] args) throws Exception {\n-        if (args.length < 1) {\n+        if (args.length == 0) {\n             throw new NotEnoughArgumentsException();\n         }\n \n-        this.parseCommand(server, sender, args, true);\n+        this.parseCommand(server, sender, args);\n     }\n \n-    private void parseCommand(Server server, CommandSource sender, String[] args, boolean allowOthers) throws Exception {\n-        Collection<Player> players = new ArrayList<>();\n-\n-        if (allowOthers && args.length > 0 && args[0].trim().length() > 2) {\n-            players = server.matchPlayer(args[0].trim());\n-        }\n-\n-        if (players.size() < 1) {\n-            throw new PlayerNotFoundException();\n-        }\n-\n-        for (Player player : players) {\n-            sender.sendMessage(tl(\"backOther\", player.getName()));\n-            teleportBack(sender, ess.getUser(player));\n-        }\n+    private void parseCommand(Server server, CommandSource sender, String[] args) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTk5Njk2OnYy", "diffSide": "LEFT", "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxMTo0NVrOGcyvVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxMTo0NVrOGcyvVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDYzMA==", "bodyText": "Not sure about this; sure, this is a lot of exceptions in the method signature, but this encourages throwing whatever you want and not caring about what you catch.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432844630", "createdAt": "2020-05-30T14:11:45Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -19,27 +19,31 @@ public EssentialsLoopCommand(String command) {\n         super(command);\n     }\n \n-    protected void loopOfflinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws PlayerNotFoundException, NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTk5NzAzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxMjowNlrOGcyvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDozNTo1NlrOGcy1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDY0NA==", "bodyText": "This is an overloaded method, why change the name?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432844644", "createdAt": "2020-05-30T14:12:06Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -19,27 +19,31 @@ public EssentialsLoopCommand(String command) {\n         super(command);\n     }\n \n-    protected void loopOfflinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws PlayerNotFoundException, NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {\n+    protected void loopOfflinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws Exception {\n+        loopOfflinePlayersConsumer(server, sender, multipleStringMatches, matchWildcards, searchTerm, user -> updatePlayer(server, sender, user, commandArgs));\n+    }\n+\n+    protected void loopOfflinePlayersConsumer(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, UserConsumer userConsumer) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NjI1NA==", "bodyText": "Some uses of loop methods provide null to the args array which would create an ambiguous method call due to the fact that the String[] args argument isn't in loopOfflinePlayersConsumer", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432846254", "createdAt": "2020-05-30T14:35:56Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -19,27 +19,31 @@ public EssentialsLoopCommand(String command) {\n         super(command);\n     }\n \n-    protected void loopOfflinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws PlayerNotFoundException, NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {\n+    protected void loopOfflinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws Exception {\n+        loopOfflinePlayersConsumer(server, sender, multipleStringMatches, matchWildcards, searchTerm, user -> updatePlayer(server, sender, user, commandArgs));\n+    }\n+\n+    protected void loopOfflinePlayersConsumer(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, UserConsumer userConsumer) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDY0NA=="}, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTk5NzQwOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxMjo0MlrOGcyvmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxMjo0MlrOGcyvmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDY5Nw==", "bodyText": "Same concerns as above.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432844697", "createdAt": "2020-05-30T14:12:42Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -48,19 +52,23 @@ protected void loopOfflinePlayers(final Server server, final CommandSource sende\n             final List<Player> matchedPlayers = server.matchPlayer(searchTerm);\n             if (matchedPlayers.isEmpty()) {\n                 final User matchedUser = getPlayer(server, searchTerm, true, true);\n-                updatePlayer(server, sender, matchedUser, commandArgs);\n+                userConsumer.accept(matchedUser);\n             }\n             for (Player matchPlayer : matchedPlayers) {\n                 final User matchedUser = ess.getUser(matchPlayer);\n-                updatePlayer(server, sender, matchedUser, commandArgs);\n+                userConsumer.accept(matchedUser);\n             }\n         } else {\n             final User user = getPlayer(server, searchTerm, true, true);\n-            updatePlayer(server, sender, user, commandArgs);\n+            userConsumer.accept(user);\n         }\n     }\n \n-    protected void loopOnlinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws PlayerNotFoundException, NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {\n+    protected void loopOnlinePlayers(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, final String[] commandArgs) throws Exception {\n+        loopOnlinePlayersConsumer(server, sender, multipleStringMatches, matchWildcards, searchTerm, user -> updatePlayer(server, sender, user, commandArgs));\n+    }\n+\n+    protected void loopOnlinePlayersConsumer(final Server server, final CommandSource sender, final boolean multipleStringMatches, boolean matchWildcards, final String searchTerm, UserConsumer userConsumer) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTk5ODc1OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxNToyOFrOGcywXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxNToyOFrOGcywXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDg5Mw==", "bodyText": "I'd prefer keeping this abstract, it's still used in most places, and the few cases where it's unused we can implement the empty method.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432844893", "createdAt": "2020-05-30T14:15:28Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -100,19 +108,21 @@ protected void loopOnlinePlayers(final Server server, final CommandSource sender\n                         continue;\n                     }\n                     foundUser = true;\n-                    updatePlayer(server, sender, player, commandArgs);\n+                    userConsumer.accept(player);\n                 }\n             }\n             if (!foundUser) {\n                 throw new PlayerNotFoundException();\n             }\n         } else {\n             final User player = getPlayer(server, sender, searchTerm);\n-            updatePlayer(server, sender, player, commandArgs);\n+            userConsumer.accept(player);\n         }\n     }\n \n-    protected abstract void updatePlayer(Server server, CommandSource sender, User user, String[] args) throws NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException;\n+    protected void updatePlayer(Server server, CommandSource sender, User user, String[] args) throws NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTk5OTI5OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoxNjoxMVrOGcywow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDoyMjoyOVrOGcyyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDk2Mw==", "bodyText": "Is this interface really necessary? Why not Consumer<User>?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432844963", "createdAt": "2020-05-30T14:16:11Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -129,4 +139,8 @@ protected void loopOnlinePlayers(final Server server, final CommandSource sender\n         players.add(\"*\");\n         return players;\n     }\n+\n+    public interface UserConsumer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NTMzNg==", "bodyText": "Consumers are not allowed to throw exceptions", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432845336", "createdAt": "2020-05-30T14:22:29Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/EssentialsLoopCommand.java", "diffHunk": "@@ -129,4 +139,8 @@ protected void loopOnlinePlayers(final Server server, final CommandSource sender\n         players.add(\"*\");\n         return players;\n     }\n+\n+    public interface UserConsumer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDk2Mw=="}, "originalCommit": {"oid": "a65315b21e9371fd13a864b2ffd0f050984decec"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjEwMzQzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNToxNjo1OVrOGcz2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNToxNjo1OVrOGcz2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2MjkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.parseCommand(server, sender, args);\n          \n          \n            \n                        this.parseOthers(server, sender, args);\n          \n      \n    \n    \n  \n\nFixes compile", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r432862917", "createdAt": "2020-05-30T15:16:59Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandback.java", "diffHunk": "@@ -23,7 +20,7 @@ public Commandback() {\n     protected void run(Server server, User user, String commandLabel, String[] args) throws Exception {\n         CommandSource sender = user.getSource();\n         if (args.length > 0 && user.isAuthorized(\"essentials.back.others\")) {\n-            this.parseCommand(server, sender, args, true);\n+            this.parseCommand(server, sender, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344e68be7c5b56e28dc72dc7c3686d35fa11c57c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjY4NjQwOnYy", "diffSide": "RIGHT", "path": "Essentials/src/messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDowNDo0MVrOGf71ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDowNDo0MVrOGf71ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzOTQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            jumpEasterDisable=\\u00a76Flying wizard mode disabled\n          \n          \n            \n            jumpEasterEnable=\\u00a76Enabling flying wizard mode\n          \n          \n            \n            jumpEasterDisable=\\u00a76Flying wizard mode disabled.\n          \n          \n            \n            jumpEasterEnable=\\u00a76Flying wizard mode enabled.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r436139427", "createdAt": "2020-06-05T20:04:41Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/messages.properties", "diffHunk": "@@ -244,6 +244,8 @@ jailReleased=\\u00a76Player \\u00a7c{0}\\u00a76 unjailed.\n jailReleasedPlayerNotify=\\u00a76You have been released\\!\n jailSentenceExtended=\\u00a76Jail time extended to \\u00a7c{0}\\u00a76.\n jailSet=\\u00a76Jail\\u00a7c {0} \\u00a76has been set.\n+jumpEasterDisable=\\u00a76Flying wizard mode disabled\n+jumpEasterEnable=\\u00a76Enabling flying wizard mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370d755e28240a92cd9026f1cc09022c0b56536d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE5NjgyOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/CommandSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0MjowOFrOGhy6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo1Njo0N1rOGtm2dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5MDMwNw==", "bodyText": "This feels icky. Why move this to CommandSource?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r438090307", "createdAt": "2020-06-10T12:42:08Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/CommandSource.java", "diffHunk": "@@ -22,8 +22,15 @@ public final Player getPlayer() {\n         return null;\n     }\n \n+    public final net.ess3.api.IUser getUser(IEssentials ess) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5466205f00f17a435295610618d2a34f135d9a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3NTYzNw==", "bodyText": "Because ess.getUser(source.getSender()) vs source.getUser(ess)", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450475637", "createdAt": "2020-07-06T20:56:47Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/CommandSource.java", "diffHunk": "@@ -22,8 +22,15 @@ public final Player getPlayer() {\n         return null;\n     }\n \n+    public final net.ess3.api.IUser getUser(IEssentials ess) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5MDMwNw=="}, "originalCommit": {"oid": "0d5466205f00f17a435295610618d2a34f135d9a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM3MDc5OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandpaytoggle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMDoyMFrOGjx1Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMDoyMFrOGjx1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTc4Mw==", "bodyText": "Might be worth turning this into an EssentialsLoopCommand (see #3087).", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r440169783", "createdAt": "2020-06-15T13:20:20Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandpaytoggle.java", "diffHunk": "@@ -20,11 +20,7 @@ public void run(Server server, User user, String commandLabel, String[] args) th\n             acceptingPay = false;\n         }\n         user.setAcceptingPay(acceptingPay);\n-        if (acceptingPay) {\n-            user.sendMessage(tl(\"payToggleOn\"));\n-        } else {\n-            user.sendMessage(tl(\"payToggleOff\"));\n-        }\n+        user.sendMessage(acceptingPay ? tl(\"payToggleOn\") : tl(\"payToggleOff\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5466205f00f17a435295610618d2a34f135d9a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODc0NTk3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/IEssentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzoyMToyMVrOGkwaGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzoyMToyMVrOGkwaGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NTAzMw==", "bodyText": "Maybe Collection<User> would be better here?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441195033", "createdAt": "2020-06-16T23:21:21Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/IEssentials.java", "diffHunk": "@@ -103,7 +103,7 @@\n \n     Collection<Player> getOnlinePlayers();\n \n-    Iterable<User> getOnlineUsers();\n+    List<User> getOnlineUsers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE0NTkyOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoxNzo1MVrOGk0Mwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoxNzo1MVrOGk0Mwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzE1NA==", "bodyText": "Commands that have * as their first argument seem not to work, for example /clear * ** or /clear * dirt 1.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441257154", "createdAt": "2020-06-17T03:17:51Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java", "diffHunk": "@@ -16,73 +16,55 @@\n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandclearinventory extends EssentialsCommand {\n+public class Commandclearinventory extends EssentialsLoopCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE0OTg4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyMDoyOFrOGk0PMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDozMDozNlrOGlbr7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1Nzc3Ng==", "bodyText": "/eco give <player> -1 takes $1, but /eco take pop4959 -1 does not give $1, which is a bit of an inconsistency in the command.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441257776", "createdAt": "2020-06-17T03:20:28Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "diffHunk": "@@ -18,9 +18,6 @@\n \n \n public class Commandeco extends EssentialsLoopCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1NjE4MA==", "bodyText": "Just tested this, the - is ignored just like it way before this refactor", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441556180", "createdAt": "2020-06-17T13:44:36Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "diffHunk": "@@ -18,9 +18,6 @@\n \n \n public class Commandeco extends EssentialsLoopCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1Nzc3Ng=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNDEwOQ==", "bodyText": "I guess this is technically a \"refactor\", so you shouldn't have to change any preexisting behavior, but it's still strange that it works this way.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441904109", "createdAt": "2020-06-18T00:30:36Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "diffHunk": "@@ -18,9 +18,6 @@\n \n \n public class Commandeco extends EssentialsLoopCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1Nzc3Ng=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE1NzIzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyNToyNFrOGk0T5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDozMTo0OVrOGlbtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk4MQ==", "bodyText": "I think I prefer this over the consumer, and it's a bit weird to have only one implemented or the other", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441258981", "createdAt": "2020-06-17T03:25:24Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "diffHunk": "@@ -32,82 +29,61 @@ public void run(final Server server, final CommandSource sender, final String co\n             throw new NotEnoughArgumentsException();\n         }\n \n-        BigDecimal startingBalance = ess.getSettings().getStartingBalance();\n-\n+        EcoCommands cmd;\n+        boolean isPercent;\n+        BigDecimal amount;\n         try {\n-            cmd = Commandeco.EcoCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n+            cmd = EcoCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n             isPercent = cmd != EcoCommands.RESET && args[2].endsWith(\"%\");\n-            amount = (cmd == Commandeco.EcoCommands.RESET) ? startingBalance : new BigDecimal(args[2].replaceAll(\"[^0-9\\\\.]\", \"\"));\n+            amount = (cmd == EcoCommands.RESET) ? ess.getSettings().getStartingBalance() : new BigDecimal(args[2].replaceAll(\"[^0-9\\\\.]\", \"\"));\n         } catch (Exception ex) {\n             throw new NotEnoughArgumentsException(ex);\n         }\n \n-        loopOfflinePlayers(server, sender, false, true, args[1], args);\n-\n-        if (cmd == Commandeco.EcoCommands.RESET || cmd == Commandeco.EcoCommands.SET) {\n-            if (args[1].contentEquals(\"**\")) {\n-                server.broadcastMessage(tl(\"resetBalAll\", NumberUtil.displayCurrency(amount, ess)));\n-            } else if (args[1].contentEquals(\"*\")) {\n-                server.broadcastMessage(tl(\"resetBal\", NumberUtil.displayCurrency(amount, ess)));\n+        loopOfflinePlayersConsumer(server, sender, false, true, args[1], player -> {\n+            BigDecimal userAmount = amount;\n+            if (isPercent) {\n+                userAmount = player.getMoney().multiply(userAmount).scaleByPowerOfTen(-2);\n             }\n-        }\n-    }\n-\n-    @Override\n-    protected void updatePlayer(final Server server, final CommandSource sender, final User player, final String[] args) throws NotEnoughArgumentsException, ChargeException, MaxMoneyException {\n-        if (isPercent && cmd != EcoCommands.RESET) {\n-            amount = player.getMoney().multiply(amount).scaleByPowerOfTen(-2);\n-        }\n-        switch (cmd) {\n-            case GIVE:\n-                player.giveMoney(amount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-                break;\n-\n-            case TAKE:\n-                take(amount, player, sender);\n-                break;\n-\n-            case RESET:\n-            case SET:\n-                set(amount, player, sender);\n-                break;\n-        }\n-    }\n \n-    private void take(BigDecimal amount, final User player, final CommandSource sender) throws ChargeException {\n-        BigDecimal money = player.getMoney();\n-        BigDecimal minBalance = ess.getSettings().getMinMoney();\n-        if (money.subtract(amount).compareTo(minBalance) >= 0) {\n-            player.takeMoney(amount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-        } else if (sender == null) {\n-            try {\n-                player.setMoney(minBalance, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-            } catch (MaxMoneyException ex) {\n-                // Take shouldn't be able to throw a max money exception\n+            switch (cmd) {\n+                case GIVE: {\n+                    player.giveMoney(userAmount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    break;\n+                }\n+                case TAKE: {\n+                    if (player.getMoney().subtract(userAmount).compareTo(ess.getSettings().getMinMoney()) >= 0) {\n+                        player.takeMoney(userAmount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    } else {\n+                        ess.showError(sender, new Exception(tl(\"minimumBalanceError\", NumberUtil.displayCurrency(ess.getSettings().getMinMoney(), ess))), commandLabel);\n+                    }\n+                    break;\n+                }\n+                case RESET:\n+                case SET: {\n+                    BigDecimal minBal = ess.getSettings().getMinMoney();\n+                    BigDecimal maxBal = ess.getSettings().getMaxMoney();\n+                    boolean underMin = (userAmount.compareTo(minBal) < 0);\n+                    boolean aboveMax = (userAmount.compareTo(maxBal) > 0);\n+                    player.setMoney(underMin ? minBal : aboveMax ? maxBal : userAmount, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    player.sendMessage(tl(\"setBal\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n+                    sender.sendMessage(tl(\"setBalOthers\", player.getDisplayName(), NumberUtil.displayCurrency(player.getMoney(), ess)));\n+                    break;\n+                }\n             }\n-            player.sendMessage(tl(\"takenFromAccount\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        } else {\n-            throw new ChargeException(tl(\"insufficientFunds\"));\n-        }\n-    }\n-\n-    private void set(BigDecimal amount, final User player, final CommandSource sender) throws MaxMoneyException {\n-        BigDecimal minBalance = ess.getSettings().getMinMoney();\n-        BigDecimal maxBalance = ess.getSettings().getMaxMoney();\n-        boolean underMinimum = (amount.compareTo(minBalance) < 0);\n-        boolean aboveMax = (amount.compareTo(maxBalance) > 0);\n-        player.setMoney(underMinimum ? minBalance : aboveMax ? maxBalance : amount, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-        player.sendMessage(tl(\"setBal\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        if (sender != null) {\n-            sender.sendMessage(tl(\"setBalOthers\", player.getDisplayName(), NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        }\n+        });\n     }\n \n \n     private enum EcoCommands {\n         GIVE, TAKE, SET, RESET\n     }\n \n+    @Override\n+    protected void updatePlayer(Server server, CommandSource sender, User user, String[] args) throws NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5MjAxNQ==", "bodyText": "md wanted this to remain abstract #3337 (comment)\nAs for consumers vs this method, consumers allows us not to have to use instance/static variables laying around the command.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441592015", "createdAt": "2020-06-17T14:32:22Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "diffHunk": "@@ -32,82 +29,61 @@ public void run(final Server server, final CommandSource sender, final String co\n             throw new NotEnoughArgumentsException();\n         }\n \n-        BigDecimal startingBalance = ess.getSettings().getStartingBalance();\n-\n+        EcoCommands cmd;\n+        boolean isPercent;\n+        BigDecimal amount;\n         try {\n-            cmd = Commandeco.EcoCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n+            cmd = EcoCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n             isPercent = cmd != EcoCommands.RESET && args[2].endsWith(\"%\");\n-            amount = (cmd == Commandeco.EcoCommands.RESET) ? startingBalance : new BigDecimal(args[2].replaceAll(\"[^0-9\\\\.]\", \"\"));\n+            amount = (cmd == EcoCommands.RESET) ? ess.getSettings().getStartingBalance() : new BigDecimal(args[2].replaceAll(\"[^0-9\\\\.]\", \"\"));\n         } catch (Exception ex) {\n             throw new NotEnoughArgumentsException(ex);\n         }\n \n-        loopOfflinePlayers(server, sender, false, true, args[1], args);\n-\n-        if (cmd == Commandeco.EcoCommands.RESET || cmd == Commandeco.EcoCommands.SET) {\n-            if (args[1].contentEquals(\"**\")) {\n-                server.broadcastMessage(tl(\"resetBalAll\", NumberUtil.displayCurrency(amount, ess)));\n-            } else if (args[1].contentEquals(\"*\")) {\n-                server.broadcastMessage(tl(\"resetBal\", NumberUtil.displayCurrency(amount, ess)));\n+        loopOfflinePlayersConsumer(server, sender, false, true, args[1], player -> {\n+            BigDecimal userAmount = amount;\n+            if (isPercent) {\n+                userAmount = player.getMoney().multiply(userAmount).scaleByPowerOfTen(-2);\n             }\n-        }\n-    }\n-\n-    @Override\n-    protected void updatePlayer(final Server server, final CommandSource sender, final User player, final String[] args) throws NotEnoughArgumentsException, ChargeException, MaxMoneyException {\n-        if (isPercent && cmd != EcoCommands.RESET) {\n-            amount = player.getMoney().multiply(amount).scaleByPowerOfTen(-2);\n-        }\n-        switch (cmd) {\n-            case GIVE:\n-                player.giveMoney(amount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-                break;\n-\n-            case TAKE:\n-                take(amount, player, sender);\n-                break;\n-\n-            case RESET:\n-            case SET:\n-                set(amount, player, sender);\n-                break;\n-        }\n-    }\n \n-    private void take(BigDecimal amount, final User player, final CommandSource sender) throws ChargeException {\n-        BigDecimal money = player.getMoney();\n-        BigDecimal minBalance = ess.getSettings().getMinMoney();\n-        if (money.subtract(amount).compareTo(minBalance) >= 0) {\n-            player.takeMoney(amount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-        } else if (sender == null) {\n-            try {\n-                player.setMoney(minBalance, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-            } catch (MaxMoneyException ex) {\n-                // Take shouldn't be able to throw a max money exception\n+            switch (cmd) {\n+                case GIVE: {\n+                    player.giveMoney(userAmount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    break;\n+                }\n+                case TAKE: {\n+                    if (player.getMoney().subtract(userAmount).compareTo(ess.getSettings().getMinMoney()) >= 0) {\n+                        player.takeMoney(userAmount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    } else {\n+                        ess.showError(sender, new Exception(tl(\"minimumBalanceError\", NumberUtil.displayCurrency(ess.getSettings().getMinMoney(), ess))), commandLabel);\n+                    }\n+                    break;\n+                }\n+                case RESET:\n+                case SET: {\n+                    BigDecimal minBal = ess.getSettings().getMinMoney();\n+                    BigDecimal maxBal = ess.getSettings().getMaxMoney();\n+                    boolean underMin = (userAmount.compareTo(minBal) < 0);\n+                    boolean aboveMax = (userAmount.compareTo(maxBal) > 0);\n+                    player.setMoney(underMin ? minBal : aboveMax ? maxBal : userAmount, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    player.sendMessage(tl(\"setBal\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n+                    sender.sendMessage(tl(\"setBalOthers\", player.getDisplayName(), NumberUtil.displayCurrency(player.getMoney(), ess)));\n+                    break;\n+                }\n             }\n-            player.sendMessage(tl(\"takenFromAccount\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        } else {\n-            throw new ChargeException(tl(\"insufficientFunds\"));\n-        }\n-    }\n-\n-    private void set(BigDecimal amount, final User player, final CommandSource sender) throws MaxMoneyException {\n-        BigDecimal minBalance = ess.getSettings().getMinMoney();\n-        BigDecimal maxBalance = ess.getSettings().getMaxMoney();\n-        boolean underMinimum = (amount.compareTo(minBalance) < 0);\n-        boolean aboveMax = (amount.compareTo(maxBalance) > 0);\n-        player.setMoney(underMinimum ? minBalance : aboveMax ? maxBalance : amount, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-        player.sendMessage(tl(\"setBal\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        if (sender != null) {\n-            sender.sendMessage(tl(\"setBalOthers\", player.getDisplayName(), NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        }\n+        });\n     }\n \n \n     private enum EcoCommands {\n         GIVE, TAKE, SET, RESET\n     }\n \n+    @Override\n+    protected void updatePlayer(Server server, CommandSource sender, User user, String[] args) throws NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk4MQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNDQyNQ==", "bodyText": "Fair enough. I don't dislike the new method, but it could perhaps be its own distinct class (still abstract), since only one or the other method is ever being used.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441904425", "createdAt": "2020-06-18T00:31:49Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandeco.java", "diffHunk": "@@ -32,82 +29,61 @@ public void run(final Server server, final CommandSource sender, final String co\n             throw new NotEnoughArgumentsException();\n         }\n \n-        BigDecimal startingBalance = ess.getSettings().getStartingBalance();\n-\n+        EcoCommands cmd;\n+        boolean isPercent;\n+        BigDecimal amount;\n         try {\n-            cmd = Commandeco.EcoCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n+            cmd = EcoCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n             isPercent = cmd != EcoCommands.RESET && args[2].endsWith(\"%\");\n-            amount = (cmd == Commandeco.EcoCommands.RESET) ? startingBalance : new BigDecimal(args[2].replaceAll(\"[^0-9\\\\.]\", \"\"));\n+            amount = (cmd == EcoCommands.RESET) ? ess.getSettings().getStartingBalance() : new BigDecimal(args[2].replaceAll(\"[^0-9\\\\.]\", \"\"));\n         } catch (Exception ex) {\n             throw new NotEnoughArgumentsException(ex);\n         }\n \n-        loopOfflinePlayers(server, sender, false, true, args[1], args);\n-\n-        if (cmd == Commandeco.EcoCommands.RESET || cmd == Commandeco.EcoCommands.SET) {\n-            if (args[1].contentEquals(\"**\")) {\n-                server.broadcastMessage(tl(\"resetBalAll\", NumberUtil.displayCurrency(amount, ess)));\n-            } else if (args[1].contentEquals(\"*\")) {\n-                server.broadcastMessage(tl(\"resetBal\", NumberUtil.displayCurrency(amount, ess)));\n+        loopOfflinePlayersConsumer(server, sender, false, true, args[1], player -> {\n+            BigDecimal userAmount = amount;\n+            if (isPercent) {\n+                userAmount = player.getMoney().multiply(userAmount).scaleByPowerOfTen(-2);\n             }\n-        }\n-    }\n-\n-    @Override\n-    protected void updatePlayer(final Server server, final CommandSource sender, final User player, final String[] args) throws NotEnoughArgumentsException, ChargeException, MaxMoneyException {\n-        if (isPercent && cmd != EcoCommands.RESET) {\n-            amount = player.getMoney().multiply(amount).scaleByPowerOfTen(-2);\n-        }\n-        switch (cmd) {\n-            case GIVE:\n-                player.giveMoney(amount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-                break;\n-\n-            case TAKE:\n-                take(amount, player, sender);\n-                break;\n-\n-            case RESET:\n-            case SET:\n-                set(amount, player, sender);\n-                break;\n-        }\n-    }\n \n-    private void take(BigDecimal amount, final User player, final CommandSource sender) throws ChargeException {\n-        BigDecimal money = player.getMoney();\n-        BigDecimal minBalance = ess.getSettings().getMinMoney();\n-        if (money.subtract(amount).compareTo(minBalance) >= 0) {\n-            player.takeMoney(amount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-        } else if (sender == null) {\n-            try {\n-                player.setMoney(minBalance, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-            } catch (MaxMoneyException ex) {\n-                // Take shouldn't be able to throw a max money exception\n+            switch (cmd) {\n+                case GIVE: {\n+                    player.giveMoney(userAmount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    break;\n+                }\n+                case TAKE: {\n+                    if (player.getMoney().subtract(userAmount).compareTo(ess.getSettings().getMinMoney()) >= 0) {\n+                        player.takeMoney(userAmount, sender, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    } else {\n+                        ess.showError(sender, new Exception(tl(\"minimumBalanceError\", NumberUtil.displayCurrency(ess.getSettings().getMinMoney(), ess))), commandLabel);\n+                    }\n+                    break;\n+                }\n+                case RESET:\n+                case SET: {\n+                    BigDecimal minBal = ess.getSettings().getMinMoney();\n+                    BigDecimal maxBal = ess.getSettings().getMaxMoney();\n+                    boolean underMin = (userAmount.compareTo(minBal) < 0);\n+                    boolean aboveMax = (userAmount.compareTo(maxBal) > 0);\n+                    player.setMoney(underMin ? minBal : aboveMax ? maxBal : userAmount, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n+                    player.sendMessage(tl(\"setBal\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n+                    sender.sendMessage(tl(\"setBalOthers\", player.getDisplayName(), NumberUtil.displayCurrency(player.getMoney(), ess)));\n+                    break;\n+                }\n             }\n-            player.sendMessage(tl(\"takenFromAccount\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        } else {\n-            throw new ChargeException(tl(\"insufficientFunds\"));\n-        }\n-    }\n-\n-    private void set(BigDecimal amount, final User player, final CommandSource sender) throws MaxMoneyException {\n-        BigDecimal minBalance = ess.getSettings().getMinMoney();\n-        BigDecimal maxBalance = ess.getSettings().getMaxMoney();\n-        boolean underMinimum = (amount.compareTo(minBalance) < 0);\n-        boolean aboveMax = (amount.compareTo(maxBalance) > 0);\n-        player.setMoney(underMinimum ? minBalance : aboveMax ? maxBalance : amount, UserBalanceUpdateEvent.Cause.COMMAND_ECO);\n-        player.sendMessage(tl(\"setBal\", NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        if (sender != null) {\n-            sender.sendMessage(tl(\"setBalOthers\", player.getDisplayName(), NumberUtil.displayCurrency(player.getMoney(), ess)));\n-        }\n+        });\n     }\n \n \n     private enum EcoCommands {\n         GIVE, TAKE, SET, RESET\n     }\n \n+    @Override\n+    protected void updatePlayer(Server server, CommandSource sender, User user, String[] args) throws NotEnoughArgumentsException, PlayerExemptException, ChargeException, MaxMoneyException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk4MQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE3NDg2OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandexp.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzozNzoyMFrOGk0e2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDozMjozNVrOGlbt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MTc4Ng==", "bodyText": "This seems a little weird to me, why not just check the permissions normally but maybe just store the permission node on the enum?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441261786", "createdAt": "2020-06-17T03:37:20Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandexp.java", "diffHunk": "@@ -1,140 +1,136 @@\n package com.earth2me.essentials.commands;\n \n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n import com.earth2me.essentials.craftbukkit.SetExpFix;\n import com.earth2me.essentials.utils.NumberUtil;\n import com.google.common.collect.Lists;\n import org.bukkit.Server;\n-import org.bukkit.entity.Player;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandexp extends EssentialsCommand {\n+public class Commandexp extends EssentialsLoopCommand {\n     public Commandexp() {\n         super(\"exp\");\n     }\n \n     @Override\n-    public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length == 0) {\n-            showExp(user.getSource(), user);\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"set\") && user.isAuthorized(\"essentials.exp.set\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.set.others\")) {\n-                expMatch(server, user.getSource(), args[1], args[2], false);\n-            } else {\n-                setExp(user.getSource(), user, args[1], false);\n+    public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n+        IUser user = sender.getUser(ess);\n+        if (args.length == 0 || (args.length < 2 && user == null)) {\n+            if (user == null) {\n+                throw new NotEnoughArgumentsException();\n             }\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"give\") && user.isAuthorized(\"essentials.exp.give\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.give.others\")) {\n-                expMatch(server, user.getSource(), args[1], args[2], true);\n-            } else {\n-                setExp(user.getSource(), user, args[1], true);\n+            showExp(sender, user);\n+            return;\n+        }\n+\n+        ExpCommands cmd;\n+        try {\n+            cmd = ExpCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n+        } catch (Exception ex) {\n+            throw new NotEnoughArgumentsException(ex);\n+        }\n+\n+        if (!cmd.hasPermission(user)) {\n+            user.sendMessage(tl(\"noAccessSubCommand\", \"/\" + commandLabel + \" \" + cmd.name().toLowerCase(Locale.ENGLISH)));\n+            return;\n+        }\n+\n+        switch (cmd) {\n+            case SET: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server,sender, false, true, args[1], player -> setExp(sender, player, args[2], false));\n+                } else if (args.length == 2 && user != null) {\n+                    setExp(sender, user, args[1], false);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"take\") && user.isAuthorized(\"essentials.exp.take\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.take.others\")) {\n-                expMatch(server, user.getSource(), args[1], \"-\" + args[2], true);\n-            } else {\n-                setExp(user.getSource(), user, \"-\" + args[1], true);\n-            }        \n-        } else if (args.length < 3 && args[0].equalsIgnoreCase(\"reset\") && user.isAuthorized(\"essentials.exp.reset\")) {\n-            if (args.length == 2 && user.isAuthorized(\"essentials.exp.reset.others\")) {\n-                expMatch(server, user.getSource(), args[1], \"0\", false);\n-            } else {\n-                setExp(user.getSource(), user, \"0\", false);\n+            case GIVE: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, args[2], true));\n+                } else if (args.length == 2 && user != null) {\n+                    setExp(sender, user, args[1], true);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else if (args[0].equalsIgnoreCase(\"show\")) {\n-            if (args.length >= 2 && user.isAuthorized(\"essentials.exp.others\")) {\n-                String match = args[1].trim();\n-                showMatch(server, user.getSource(), match);\n-            } else {\n-                showExp(user.getSource(), user);\n+            case TAKE: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, \"-\" + args[2], true));\n+                } else if (args.length == 2) {\n+                    setExp(sender, user, \"-\" + args[1], true);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else {\n-            if (args.length >= 1 && NumberUtil.isInt(args[0].toLowerCase(Locale.ENGLISH).replace(\"l\", \"\")) && user.isAuthorized(\"essentials.exp.give\")) {\n-                if (args.length >= 2 && user.isAuthorized(\"essentials.exp.give.others\")) {\n-                    expMatch(server, user.getSource(), args[1], args[0], true);\n+            case RESET: {\n+                if (args.length == 2 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, \"0\", false));\n+                } else if (user != null) {\n+                    setExp(sender, user, \"0\", false);\n                 } else {\n-                    setExp(user.getSource(), user, args[0], true);\n+                    throw new NotEnoughArgumentsException();\n                 }\n-            } else if (args.length >= 1 && user.isAuthorized(\"essentials.exp.others\")) {\n-                String match = args[0].trim();\n-                showMatch(server, user.getSource(), match);\n-            } else {\n-                showExp(user.getSource(), user);\n+                return;\n             }\n-        }\n-    }\n-\n-    @Override\n-    public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length < 1) {\n-            throw new NotEnoughArgumentsException();\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"set\")) {\n-            expMatch(server, sender, args[1], args[2], false);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"give\")) {\n-            expMatch(server, sender, args[1], args[2], true);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"take\")) {\n-            expMatch(server, sender, args[1], \"-\" + args[2], true);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"reset\")) {\n-            expMatch(server, sender, args[1], \"0\", false);\n-        } else {\n-            String match = args[0].trim();\n-            if (args.length >= 2 && NumberUtil.isInt(args[0].toLowerCase(Locale.ENGLISH).replace(\"l\", \"\"))) {\n-                match = args[1].trim();\n-                expMatch(server, sender, match, args[0], true);\n-            } else if (args.length == 1) {\n-                match = args[0].trim();\n+            case SHOW: {\n+                if (args.length == 2 && (user == null || user.isAuthorized(\"essentials.exp.others\"))) {\n+                    showExp(sender, getPlayer(server, sender, args[1]));\n+                } else if (user != null) {\n+                    showExp(sender, user);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-            showMatch(server, sender, match);\n         }\n+        throw new NotEnoughArgumentsException(); //Should never happen but in the impossible chance it does...\n     }\n \n-    private void showMatch(final Server server, final CommandSource sender, final String match) throws PlayerNotFoundException {\n-        boolean skipHidden = sender.isPlayer() && !ess.getUser(sender.getPlayer()).canInteractVanished();\n-        boolean foundUser = false;\n-        final List<Player> matchedPlayers = server.matchPlayer(match);\n-        for (Player matchPlayer : matchedPlayers) {\n-            final User player = ess.getUser(matchPlayer);\n-            if (skipHidden && player.isHidden(sender.getPlayer()) && !sender.getPlayer().canSee(matchPlayer)) {\n-                continue;\n-            }\n-            foundUser = true;\n-            showExp(sender, player);\n+    private enum ExpCommands {\n+        SET,\n+        GIVE,\n+        TAKE,\n+        RESET,\n+        SHOW(false);\n+\n+        private final boolean permCheck;\n+\n+        ExpCommands() {\n+            permCheck = true;\n         }\n-        if (!foundUser) {\n-            throw new PlayerNotFoundException();\n+\n+        ExpCommands(boolean perm) {\n+            permCheck = perm;\n         }\n-    }\n \n-    private void expMatch(final Server server, final CommandSource sender, final String match, String amount, final boolean give) throws NotEnoughArgumentsException, PlayerNotFoundException {\n-        boolean skipHidden = sender.isPlayer() && !ess.getUser(sender.getPlayer()).canInteractVanished();\n-        boolean foundUser = false;\n-        final List<Player> matchedPlayers = server.matchPlayer(match);\n-        for (Player matchPlayer : matchedPlayers) {\n-            final User player = ess.getUser(matchPlayer);\n-            if (skipHidden && player.isHidden(sender.getPlayer()) && !sender.getPlayer().canSee(matchPlayer)) {\n-                continue;\n-            }\n-            foundUser = true;\n-            setExp(sender, player, amount, give);\n+        boolean hasPermission(IUser user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5MjkzMQ==", "bodyText": "This way it reduces code duplication", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441592931", "createdAt": "2020-06-17T14:33:44Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandexp.java", "diffHunk": "@@ -1,140 +1,136 @@\n package com.earth2me.essentials.commands;\n \n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n import com.earth2me.essentials.craftbukkit.SetExpFix;\n import com.earth2me.essentials.utils.NumberUtil;\n import com.google.common.collect.Lists;\n import org.bukkit.Server;\n-import org.bukkit.entity.Player;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandexp extends EssentialsCommand {\n+public class Commandexp extends EssentialsLoopCommand {\n     public Commandexp() {\n         super(\"exp\");\n     }\n \n     @Override\n-    public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length == 0) {\n-            showExp(user.getSource(), user);\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"set\") && user.isAuthorized(\"essentials.exp.set\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.set.others\")) {\n-                expMatch(server, user.getSource(), args[1], args[2], false);\n-            } else {\n-                setExp(user.getSource(), user, args[1], false);\n+    public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n+        IUser user = sender.getUser(ess);\n+        if (args.length == 0 || (args.length < 2 && user == null)) {\n+            if (user == null) {\n+                throw new NotEnoughArgumentsException();\n             }\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"give\") && user.isAuthorized(\"essentials.exp.give\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.give.others\")) {\n-                expMatch(server, user.getSource(), args[1], args[2], true);\n-            } else {\n-                setExp(user.getSource(), user, args[1], true);\n+            showExp(sender, user);\n+            return;\n+        }\n+\n+        ExpCommands cmd;\n+        try {\n+            cmd = ExpCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n+        } catch (Exception ex) {\n+            throw new NotEnoughArgumentsException(ex);\n+        }\n+\n+        if (!cmd.hasPermission(user)) {\n+            user.sendMessage(tl(\"noAccessSubCommand\", \"/\" + commandLabel + \" \" + cmd.name().toLowerCase(Locale.ENGLISH)));\n+            return;\n+        }\n+\n+        switch (cmd) {\n+            case SET: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server,sender, false, true, args[1], player -> setExp(sender, player, args[2], false));\n+                } else if (args.length == 2 && user != null) {\n+                    setExp(sender, user, args[1], false);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"take\") && user.isAuthorized(\"essentials.exp.take\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.take.others\")) {\n-                expMatch(server, user.getSource(), args[1], \"-\" + args[2], true);\n-            } else {\n-                setExp(user.getSource(), user, \"-\" + args[1], true);\n-            }        \n-        } else if (args.length < 3 && args[0].equalsIgnoreCase(\"reset\") && user.isAuthorized(\"essentials.exp.reset\")) {\n-            if (args.length == 2 && user.isAuthorized(\"essentials.exp.reset.others\")) {\n-                expMatch(server, user.getSource(), args[1], \"0\", false);\n-            } else {\n-                setExp(user.getSource(), user, \"0\", false);\n+            case GIVE: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, args[2], true));\n+                } else if (args.length == 2 && user != null) {\n+                    setExp(sender, user, args[1], true);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else if (args[0].equalsIgnoreCase(\"show\")) {\n-            if (args.length >= 2 && user.isAuthorized(\"essentials.exp.others\")) {\n-                String match = args[1].trim();\n-                showMatch(server, user.getSource(), match);\n-            } else {\n-                showExp(user.getSource(), user);\n+            case TAKE: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, \"-\" + args[2], true));\n+                } else if (args.length == 2) {\n+                    setExp(sender, user, \"-\" + args[1], true);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else {\n-            if (args.length >= 1 && NumberUtil.isInt(args[0].toLowerCase(Locale.ENGLISH).replace(\"l\", \"\")) && user.isAuthorized(\"essentials.exp.give\")) {\n-                if (args.length >= 2 && user.isAuthorized(\"essentials.exp.give.others\")) {\n-                    expMatch(server, user.getSource(), args[1], args[0], true);\n+            case RESET: {\n+                if (args.length == 2 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, \"0\", false));\n+                } else if (user != null) {\n+                    setExp(sender, user, \"0\", false);\n                 } else {\n-                    setExp(user.getSource(), user, args[0], true);\n+                    throw new NotEnoughArgumentsException();\n                 }\n-            } else if (args.length >= 1 && user.isAuthorized(\"essentials.exp.others\")) {\n-                String match = args[0].trim();\n-                showMatch(server, user.getSource(), match);\n-            } else {\n-                showExp(user.getSource(), user);\n+                return;\n             }\n-        }\n-    }\n-\n-    @Override\n-    public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length < 1) {\n-            throw new NotEnoughArgumentsException();\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"set\")) {\n-            expMatch(server, sender, args[1], args[2], false);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"give\")) {\n-            expMatch(server, sender, args[1], args[2], true);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"take\")) {\n-            expMatch(server, sender, args[1], \"-\" + args[2], true);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"reset\")) {\n-            expMatch(server, sender, args[1], \"0\", false);\n-        } else {\n-            String match = args[0].trim();\n-            if (args.length >= 2 && NumberUtil.isInt(args[0].toLowerCase(Locale.ENGLISH).replace(\"l\", \"\"))) {\n-                match = args[1].trim();\n-                expMatch(server, sender, match, args[0], true);\n-            } else if (args.length == 1) {\n-                match = args[0].trim();\n+            case SHOW: {\n+                if (args.length == 2 && (user == null || user.isAuthorized(\"essentials.exp.others\"))) {\n+                    showExp(sender, getPlayer(server, sender, args[1]));\n+                } else if (user != null) {\n+                    showExp(sender, user);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-            showMatch(server, sender, match);\n         }\n+        throw new NotEnoughArgumentsException(); //Should never happen but in the impossible chance it does...\n     }\n \n-    private void showMatch(final Server server, final CommandSource sender, final String match) throws PlayerNotFoundException {\n-        boolean skipHidden = sender.isPlayer() && !ess.getUser(sender.getPlayer()).canInteractVanished();\n-        boolean foundUser = false;\n-        final List<Player> matchedPlayers = server.matchPlayer(match);\n-        for (Player matchPlayer : matchedPlayers) {\n-            final User player = ess.getUser(matchPlayer);\n-            if (skipHidden && player.isHidden(sender.getPlayer()) && !sender.getPlayer().canSee(matchPlayer)) {\n-                continue;\n-            }\n-            foundUser = true;\n-            showExp(sender, player);\n+    private enum ExpCommands {\n+        SET,\n+        GIVE,\n+        TAKE,\n+        RESET,\n+        SHOW(false);\n+\n+        private final boolean permCheck;\n+\n+        ExpCommands() {\n+            permCheck = true;\n         }\n-        if (!foundUser) {\n-            throw new PlayerNotFoundException();\n+\n+        ExpCommands(boolean perm) {\n+            permCheck = perm;\n         }\n-    }\n \n-    private void expMatch(final Server server, final CommandSource sender, final String match, String amount, final boolean give) throws NotEnoughArgumentsException, PlayerNotFoundException {\n-        boolean skipHidden = sender.isPlayer() && !ess.getUser(sender.getPlayer()).canInteractVanished();\n-        boolean foundUser = false;\n-        final List<Player> matchedPlayers = server.matchPlayer(match);\n-        for (Player matchPlayer : matchedPlayers) {\n-            final User player = ess.getUser(matchPlayer);\n-            if (skipHidden && player.isHidden(sender.getPlayer()) && !sender.getPlayer().canSee(matchPlayer)) {\n-                continue;\n-            }\n-            foundUser = true;\n-            setExp(sender, player, amount, give);\n+        boolean hasPermission(IUser user) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MTc4Ng=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNDYxOQ==", "bodyText": "Feels a bit forced but OK", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441904619", "createdAt": "2020-06-18T00:32:35Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandexp.java", "diffHunk": "@@ -1,140 +1,136 @@\n package com.earth2me.essentials.commands;\n \n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n import com.earth2me.essentials.craftbukkit.SetExpFix;\n import com.earth2me.essentials.utils.NumberUtil;\n import com.google.common.collect.Lists;\n import org.bukkit.Server;\n-import org.bukkit.entity.Player;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandexp extends EssentialsCommand {\n+public class Commandexp extends EssentialsLoopCommand {\n     public Commandexp() {\n         super(\"exp\");\n     }\n \n     @Override\n-    public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length == 0) {\n-            showExp(user.getSource(), user);\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"set\") && user.isAuthorized(\"essentials.exp.set\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.set.others\")) {\n-                expMatch(server, user.getSource(), args[1], args[2], false);\n-            } else {\n-                setExp(user.getSource(), user, args[1], false);\n+    public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n+        IUser user = sender.getUser(ess);\n+        if (args.length == 0 || (args.length < 2 && user == null)) {\n+            if (user == null) {\n+                throw new NotEnoughArgumentsException();\n             }\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"give\") && user.isAuthorized(\"essentials.exp.give\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.give.others\")) {\n-                expMatch(server, user.getSource(), args[1], args[2], true);\n-            } else {\n-                setExp(user.getSource(), user, args[1], true);\n+            showExp(sender, user);\n+            return;\n+        }\n+\n+        ExpCommands cmd;\n+        try {\n+            cmd = ExpCommands.valueOf(args[0].toUpperCase(Locale.ENGLISH));\n+        } catch (Exception ex) {\n+            throw new NotEnoughArgumentsException(ex);\n+        }\n+\n+        if (!cmd.hasPermission(user)) {\n+            user.sendMessage(tl(\"noAccessSubCommand\", \"/\" + commandLabel + \" \" + cmd.name().toLowerCase(Locale.ENGLISH)));\n+            return;\n+        }\n+\n+        switch (cmd) {\n+            case SET: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server,sender, false, true, args[1], player -> setExp(sender, player, args[2], false));\n+                } else if (args.length == 2 && user != null) {\n+                    setExp(sender, user, args[1], false);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else if (args.length > 1 && args[0].equalsIgnoreCase(\"take\") && user.isAuthorized(\"essentials.exp.take\")) {\n-            if (args.length == 3 && user.isAuthorized(\"essentials.exp.take.others\")) {\n-                expMatch(server, user.getSource(), args[1], \"-\" + args[2], true);\n-            } else {\n-                setExp(user.getSource(), user, \"-\" + args[1], true);\n-            }        \n-        } else if (args.length < 3 && args[0].equalsIgnoreCase(\"reset\") && user.isAuthorized(\"essentials.exp.reset\")) {\n-            if (args.length == 2 && user.isAuthorized(\"essentials.exp.reset.others\")) {\n-                expMatch(server, user.getSource(), args[1], \"0\", false);\n-            } else {\n-                setExp(user.getSource(), user, \"0\", false);\n+            case GIVE: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, args[2], true));\n+                } else if (args.length == 2 && user != null) {\n+                    setExp(sender, user, args[1], true);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else if (args[0].equalsIgnoreCase(\"show\")) {\n-            if (args.length >= 2 && user.isAuthorized(\"essentials.exp.others\")) {\n-                String match = args[1].trim();\n-                showMatch(server, user.getSource(), match);\n-            } else {\n-                showExp(user.getSource(), user);\n+            case TAKE: {\n+                if (args.length == 3 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, \"-\" + args[2], true));\n+                } else if (args.length == 2) {\n+                    setExp(sender, user, \"-\" + args[1], true);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-        } else {\n-            if (args.length >= 1 && NumberUtil.isInt(args[0].toLowerCase(Locale.ENGLISH).replace(\"l\", \"\")) && user.isAuthorized(\"essentials.exp.give\")) {\n-                if (args.length >= 2 && user.isAuthorized(\"essentials.exp.give.others\")) {\n-                    expMatch(server, user.getSource(), args[1], args[0], true);\n+            case RESET: {\n+                if (args.length == 2 && cmd.hasOtherPermission(user)) {\n+                    loopOnlinePlayersConsumer(server, sender, false, true, args[1], player -> setExp(sender, player, \"0\", false));\n+                } else if (user != null) {\n+                    setExp(sender, user, \"0\", false);\n                 } else {\n-                    setExp(user.getSource(), user, args[0], true);\n+                    throw new NotEnoughArgumentsException();\n                 }\n-            } else if (args.length >= 1 && user.isAuthorized(\"essentials.exp.others\")) {\n-                String match = args[0].trim();\n-                showMatch(server, user.getSource(), match);\n-            } else {\n-                showExp(user.getSource(), user);\n+                return;\n             }\n-        }\n-    }\n-\n-    @Override\n-    public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length < 1) {\n-            throw new NotEnoughArgumentsException();\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"set\")) {\n-            expMatch(server, sender, args[1], args[2], false);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"give\")) {\n-            expMatch(server, sender, args[1], args[2], true);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"take\")) {\n-            expMatch(server, sender, args[1], \"-\" + args[2], true);\n-        } else if (args.length > 2 && args[0].equalsIgnoreCase(\"reset\")) {\n-            expMatch(server, sender, args[1], \"0\", false);\n-        } else {\n-            String match = args[0].trim();\n-            if (args.length >= 2 && NumberUtil.isInt(args[0].toLowerCase(Locale.ENGLISH).replace(\"l\", \"\"))) {\n-                match = args[1].trim();\n-                expMatch(server, sender, match, args[0], true);\n-            } else if (args.length == 1) {\n-                match = args[0].trim();\n+            case SHOW: {\n+                if (args.length == 2 && (user == null || user.isAuthorized(\"essentials.exp.others\"))) {\n+                    showExp(sender, getPlayer(server, sender, args[1]));\n+                } else if (user != null) {\n+                    showExp(sender, user);\n+                } else {\n+                    throw new NotEnoughArgumentsException();\n+                }\n+                return;\n             }\n-            showMatch(server, sender, match);\n         }\n+        throw new NotEnoughArgumentsException(); //Should never happen but in the impossible chance it does...\n     }\n \n-    private void showMatch(final Server server, final CommandSource sender, final String match) throws PlayerNotFoundException {\n-        boolean skipHidden = sender.isPlayer() && !ess.getUser(sender.getPlayer()).canInteractVanished();\n-        boolean foundUser = false;\n-        final List<Player> matchedPlayers = server.matchPlayer(match);\n-        for (Player matchPlayer : matchedPlayers) {\n-            final User player = ess.getUser(matchPlayer);\n-            if (skipHidden && player.isHidden(sender.getPlayer()) && !sender.getPlayer().canSee(matchPlayer)) {\n-                continue;\n-            }\n-            foundUser = true;\n-            showExp(sender, player);\n+    private enum ExpCommands {\n+        SET,\n+        GIVE,\n+        TAKE,\n+        RESET,\n+        SHOW(false);\n+\n+        private final boolean permCheck;\n+\n+        ExpCommands() {\n+            permCheck = true;\n         }\n-        if (!foundUser) {\n-            throw new PlayerNotFoundException();\n+\n+        ExpCommands(boolean perm) {\n+            permCheck = perm;\n         }\n-    }\n \n-    private void expMatch(final Server server, final CommandSource sender, final String match, String amount, final boolean give) throws NotEnoughArgumentsException, PlayerNotFoundException {\n-        boolean skipHidden = sender.isPlayer() && !ess.getUser(sender.getPlayer()).canInteractVanished();\n-        boolean foundUser = false;\n-        final List<Player> matchedPlayers = server.matchPlayer(match);\n-        for (Player matchPlayer : matchedPlayers) {\n-            final User player = ess.getUser(matchPlayer);\n-            if (skipHidden && player.isHidden(sender.getPlayer()) && !sender.getPlayer().canSee(matchPlayer)) {\n-                continue;\n-            }\n-            foundUser = true;\n-            setExp(sender, player, amount, give);\n+        boolean hasPermission(IUser user) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MTc4Ng=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE5Njg3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandjails.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo1MjoyNVrOGk0sag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo1MjoyNVrOGk0sag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTI1OA==", "bodyText": "This is a bug", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441265258", "createdAt": "2020-06-17T03:52:25Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandjails.java", "diffHunk": "@@ -14,7 +14,7 @@ public Commandjails() {\n \n     @Override\n     protected void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n-        if (ess.getJails().getCount() < 1) {\n+        if (ess.getJails().getCount() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIwMDc3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandjump.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo1NTowOFrOGk0uzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjoxMTo0MlrOGmFzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTg3MQ==", "bodyText": "This easter egg doesn't appear to be functional. It's probably not worth adding to the translations.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441265871", "createdAt": "2020-06-17T03:55:08Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandjump.java", "diffHunk": "@@ -24,10 +24,10 @@ public void run(final Server server, final User user, final String commandLabel,\n         if (args.length > 0 && args[0].contains(\"lock\") && user.isAuthorized(\"essentials.jump.lock\")) {\n             if (user.isFlyClickJump()) {\n                 user.setRightClickJump(false);\n-                user.sendMessage(\"Flying wizard mode disabled\");\n+                user.sendMessage(tl(\"jumpEasterDisable\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5NDAyNg==", "bodyText": "/shrug", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441594026", "createdAt": "2020-06-17T14:35:09Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandjump.java", "diffHunk": "@@ -24,10 +24,10 @@ public void run(final Server server, final User user, final String commandLabel,\n         if (args.length > 0 && args[0].contains(\"lock\") && user.isAuthorized(\"essentials.jump.lock\")) {\n             if (user.isFlyClickJump()) {\n                 user.setRightClickJump(false);\n-                user.sendMessage(\"Flying wizard mode disabled\");\n+                user.sendMessage(tl(\"jumpEasterDisable\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTg3MQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4OTg1NQ==", "bodyText": "Why wouldn't this be working? :P\nSteps:\n\nEnable Fly\nFly in the sky\nType /jump lock\npunch the air, while looking at the ground some distance away\n\nYou will be teleported to the location x/z, but keep the same y.\nOdd feature... But that's why it was an easteregg.\nBasically", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r442589855", "createdAt": "2020-06-19T01:53:56Z", "author": {"login": "khobbits"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandjump.java", "diffHunk": "@@ -24,10 +24,10 @@ public void run(final Server server, final User user, final String commandLabel,\n         if (args.length > 0 && args[0].contains(\"lock\") && user.isAuthorized(\"essentials.jump.lock\")) {\n             if (user.isFlyClickJump()) {\n                 user.setRightClickJump(false);\n-                user.sendMessage(\"Flying wizard mode disabled\");\n+                user.sendMessage(tl(\"jumpEasterDisable\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTg3MQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NDE2Ng==", "bodyText": "I stand corrected! I wasn't in fly mode, and I must have glossed over that when looking at the feature in code. Either way, it's an easteregg so it being translated or not too consequential. I'm impartial to it, since the feature is indeed working.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r442594166", "createdAt": "2020-06-19T02:11:42Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandjump.java", "diffHunk": "@@ -24,10 +24,10 @@ public void run(final Server server, final User user, final String commandLabel,\n         if (args.length > 0 && args[0].contains(\"lock\") && user.isAuthorized(\"essentials.jump.lock\")) {\n             if (user.isFlyClickJump()) {\n                 user.setRightClickJump(false);\n-                user.sendMessage(\"Flying wizard mode disabled\");\n+                user.sendMessage(tl(\"jumpEasterDisable\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTg3MQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIwNzExOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandmute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo1OToxNVrOGk0yiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo1OToxNVrOGk0yiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NjgyNA==", "bodyText": "nitpick: could be condensed to else if {", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441266824", "createdAt": "2020-06-17T03:59:15Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandmute.java", "diffHunk": "@@ -32,12 +32,12 @@ public void run(final Server server, final CommandSource sender, final String co\n             nomatch = true;\n             user = ess.getUser(new OfflinePlayer(args[0], ess.getServer()));\n         }\n-        if (!user.getBase().isOnline()) {\n-            if (sender.isPlayer() && !ess.getUser(sender.getPlayer()).isAuthorized(\"essentials.mute.offline\")) {\n+        if (!user.getBase().isOnline() && sender.isPlayer()) {\n+            if (!sender.isAuthorized(\"essentials.mute.offline\", ess)) {\n                 throw new Exception(tl(\"muteExemptOffline\"));\n             }\n         } else {\n-            if (user.isAuthorized(\"essentials.mute.exempt\") && sender.isPlayer()) {\n+            if (user.isAuthorized(\"essentials.mute.exempt\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIxNDE1OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandnuke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNDowN1rOGk025Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDozNTo1NlrOGlbxbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2Nzk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; args.length > i; i++) {\n          \n          \n            \n                        for (int i = 0; i < args.length; ++i) {", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441267941", "createdAt": "2020-06-17T04:04:07Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandnuke.java", "diffHunk": "@@ -25,10 +25,8 @@ protected void run(final Server server, final CommandSource sender, final String\n         Collection<Player> targets;\n         if (args.length > 0) {\n             targets = new ArrayList<>();\n-            int pos = 0;\n-            for (String arg : args) {\n-                targets.add(getPlayer(server, sender, args, pos).getBase());\n-                pos++;\n+            for (int i = 0; args.length > i; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNTUxOA==", "bodyText": "In response to the commit message pop wanted this idk why tho: The way I've suggested it is more commonly used (I don't think I've seen it the other way often if at all in Essentials, or most other code). Late night me reviewing this thought this was a bug at first because it was the other way around.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441905518", "createdAt": "2020-06-18T00:35:56Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandnuke.java", "diffHunk": "@@ -25,10 +25,8 @@ protected void run(final Server server, final CommandSource sender, final String\n         Collection<Player> targets;\n         if (args.length > 0) {\n             targets = new ArrayList<>();\n-            int pos = 0;\n-            for (String arg : args) {\n-                targets.add(getPlayer(server, sender, args, pos).getBase());\n-                pos++;\n+            for (int i = 0; args.length > i; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2Nzk0MQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIyODM3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandptime.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDoxNDoxMVrOGk0_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDozNzo1NlrOGlbzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MDE1NA==", "bodyText": "This should remain private. Also, perhaps <T> Arrays::asList(T...) would be cleaner here instead of the set + static block.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441270154", "createdAt": "2020-06-17T04:14:11Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandptime.java", "diffHunk": "@@ -1,21 +1,20 @@\n package com.earth2me.essentials.commands;\n \n-import com.google.common.collect.Lists;\n-\n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n import com.earth2me.essentials.utils.DescParseTickFormat;\n+import com.google.common.collect.Lists;\n import org.bukkit.Server;\n import org.bukkit.World;\n-import org.bukkit.entity.Player;\n \n import java.util.*;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandptime extends EssentialsCommand {\n-    private static final Set<String> getAliases = new HashSet<>();\n+public class Commandptime extends EssentialsLoopCommand {\n+    protected static final Set<String> getAliases = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5Nzg4Mw==", "bodyText": "Is protected for its use in Commandpweather", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441597883", "createdAt": "2020-06-17T14:40:16Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandptime.java", "diffHunk": "@@ -1,21 +1,20 @@\n package com.earth2me.essentials.commands;\n \n-import com.google.common.collect.Lists;\n-\n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n import com.earth2me.essentials.utils.DescParseTickFormat;\n+import com.google.common.collect.Lists;\n import org.bukkit.Server;\n import org.bukkit.World;\n-import org.bukkit.entity.Player;\n \n import java.util.*;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandptime extends EssentialsCommand {\n-    private static final Set<String> getAliases = new HashSet<>();\n+public class Commandptime extends EssentialsLoopCommand {\n+    protected static final Set<String> getAliases = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MDE1NA=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNjAwNQ==", "bodyText": "Only because you've forced it to be used in Commandpweather. Is there any particular reason why this is necessary? I think encapsulating each command is more important, and there is no other command as far as I know that borrows code from another directly like this.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441906005", "createdAt": "2020-06-18T00:37:56Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandptime.java", "diffHunk": "@@ -1,21 +1,20 @@\n package com.earth2me.essentials.commands;\n \n-import com.google.common.collect.Lists;\n-\n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n import com.earth2me.essentials.utils.DescParseTickFormat;\n+import com.google.common.collect.Lists;\n import org.bukkit.Server;\n import org.bukkit.World;\n-import org.bukkit.entity.Player;\n \n import java.util.*;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n-public class Commandptime extends EssentialsCommand {\n-    private static final Set<String> getAliases = new HashSet<>();\n+public class Commandptime extends EssentialsLoopCommand {\n+    protected static final Set<String> getAliases = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MDE1NA=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIzMDI4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandpweather.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDoxNToyNlrOGk1Amw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDozODo0N1rOGlb0Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MDQyNw==", "bodyText": "Big nope", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441270427", "createdAt": "2020-06-17T04:15:26Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandpweather.java", "diffHunk": "@@ -1,27 +1,21 @@\n package com.earth2me.essentials.commands;\n \n-import com.google.common.collect.Lists;\n-\n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n+import com.google.common.collect.Lists;\n import org.bukkit.Server;\n import org.bukkit.WeatherType;\n-import org.bukkit.entity.Player;\n \n import java.util.*;\n \n import static com.earth2me.essentials.I18n.tl;\n+import static com.earth2me.essentials.commands.Commandptime.getAliases;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNjIwNg==", "bodyText": "I noticed this after seeing the protected scope change earlier (hence why I asked why you did it). Now I see, but this isn't a good idea in my opinion.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441906206", "createdAt": "2020-06-18T00:38:47Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandpweather.java", "diffHunk": "@@ -1,27 +1,21 @@\n package com.earth2me.essentials.commands;\n \n-import com.google.common.collect.Lists;\n-\n import com.earth2me.essentials.CommandSource;\n+import com.earth2me.essentials.IUser;\n import com.earth2me.essentials.User;\n+import com.google.common.collect.Lists;\n import org.bukkit.Server;\n import org.bukkit.WeatherType;\n-import org.bukkit.entity.Player;\n \n import java.util.*;\n \n import static com.earth2me.essentials.I18n.tl;\n+import static com.earth2me.essentials.commands.Commandptime.getAliases;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MDQyNw=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIzOTE1OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandrtoggle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDoyMTowNlrOGk1Fww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDoyMTowNlrOGk1Fww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MTc0Nw==", "bodyText": "Why protected?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441271747", "createdAt": "2020-06-17T04:21:06Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandrtoggle.java", "diffHunk": "@@ -22,7 +22,7 @@ public void run(Server server, CommandSource sender, String commandLabel, String\n     }\n \n     @Override\n-    void togglePlayer(CommandSource sender, User user, Boolean enabled) throws NotEnoughArgumentsException {\n+    protected void togglePlayer(CommandSource sender, User user, Boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI1MDAzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandspeed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDoyODozMlrOGk1MWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDoyODozMlrOGk1MWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3MzQzMg==", "bodyText": "This tab method is a little weird, because it doesn't actually suggest anything until the user has entered 2 args already, making it fairly useless currently.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441273432", "createdAt": "2020-06-17T04:28:32Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandspeed.java", "diffHunk": "@@ -133,18 +131,9 @@ private float getRealMoveSpeed(final float userSpeed, final boolean isFly, final\n         }\n     }\n \n-    @Override\n-    protected List<String> getTabCompleteOptions(Server server, User user, String commandLabel, String[] args) {\n-        if (args.length == 3 && user.isAuthorized(\"essentials.speed.others\")) {\n-            return getPlayers(server, user);\n-        } else {\n-            return Collections.emptyList();\n-        }\n-    }\n-\n     @Override\n     protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI1ODI0OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandthunder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDozNDozOVrOGk1RjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDo0MTowMVrOGlb2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NDc2NQ==", "bodyText": "This method doesn't need to be called twice", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441274765", "createdAt": "2020-06-17T04:34:39Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandthunder.java", "diffHunk": "@@ -18,22 +18,21 @@ public Commandthunder() {\n \n     @Override\n     public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length < 1) {\n+        if (args.length == 0) {\n             throw new NotEnoughArgumentsException();\n         }\n \n         final World world = user.getWorld();\n         final boolean setThunder = args[0].equalsIgnoreCase(\"true\");\n-        if (args.length > 1) {\n-\n-            world.setThundering(setThunder);\n-            world.setThunderDuration(Integer.parseInt(args[1]) * 20);\n-            user.sendMessage(tl(\"thunderDuration\", (setThunder ? tl(\"enabled\") : tl(\"disabled\")), Integer.parseInt(args[1])));\n-\n-        } else {\n+        if (args.length == 1) {\n             world.setThundering(setThunder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTYyNg==", "bodyText": "Which method?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441609626", "createdAt": "2020-06-17T14:55:33Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandthunder.java", "diffHunk": "@@ -18,22 +18,21 @@ public Commandthunder() {\n \n     @Override\n     public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length < 1) {\n+        if (args.length == 0) {\n             throw new NotEnoughArgumentsException();\n         }\n \n         final World world = user.getWorld();\n         final boolean setThunder = args[0].equalsIgnoreCase(\"true\");\n-        if (args.length > 1) {\n-\n-            world.setThundering(setThunder);\n-            world.setThunderDuration(Integer.parseInt(args[1]) * 20);\n-            user.sendMessage(tl(\"thunderDuration\", (setThunder ? tl(\"enabled\") : tl(\"disabled\")), Integer.parseInt(args[1])));\n-\n-        } else {\n+        if (args.length == 1) {\n             world.setThundering(setThunder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NDc2NQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNjc0MA==", "bodyText": "Ignore, was blind and didn't see the return.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441906740", "createdAt": "2020-06-18T00:41:01Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandthunder.java", "diffHunk": "@@ -18,22 +18,21 @@ public Commandthunder() {\n \n     @Override\n     public void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception {\n-        if (args.length < 1) {\n+        if (args.length == 0) {\n             throw new NotEnoughArgumentsException();\n         }\n \n         final World world = user.getWorld();\n         final boolean setThunder = args[0].equalsIgnoreCase(\"true\");\n-        if (args.length > 1) {\n-\n-            world.setThundering(setThunder);\n-            world.setThunderDuration(Integer.parseInt(args[1]) * 20);\n-            user.sendMessage(tl(\"thunderDuration\", (setThunder ? tl(\"enabled\") : tl(\"disabled\")), Integer.parseInt(args[1])));\n-\n-        } else {\n+        if (args.length == 1) {\n             world.setThundering(setThunder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NDc2NQ=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI2Mjg5OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDozNzoyMFrOGk1UMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDozNzoyMFrOGk1UMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NTQ0MA==", "bodyText": "Numbers are a bit weird to autocomplete (they are ordered in lexicographical order), so maybe leave out 500 and increment by 1000 or something, or just leave out completions entirely.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441275440", "createdAt": "2020-06-17T04:37:20Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "diffHunk": "@@ -166,25 +130,29 @@ private String normalizeWorldName(World world) {\n \n     @Override\n     protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {\n-        final User user = ess.getUser(sender.getPlayer());\n-\n+        boolean isConsole = sender.isPlayer();\n         if (args.length == 1) {\n-            if (user == null || user.isAuthorized(\"essentials.time.set\")) {\n+            if (isConsole || sender.isAuthorized(\"essentials.time.set\", ess)) {\n                 return Lists.newArrayList(\"set\", \"add\");\n             } else {\n                 return Collections.emptyList();\n             }\n-        } else if (args.length == 2 && args[0].equalsIgnoreCase(\"set\")) {\n-            return Lists.newArrayList(\"sunrise\", \"day\", \"morning\", \"noon\", \"afternoon\", \"sunset\", \"night\", \"midnight\");\n-            // TODO: handle tab completion for add\n+        } else if (args.length == 2) {\n+            if (args[0].equalsIgnoreCase(\"set\")) {\n+                return Lists.newArrayList(\"sunrise\", \"day\", \"morning\", \"noon\", \"afternoon\", \"sunset\", \"night\", \"midnight\");\n+            } else if (args[0].equalsIgnoreCase(\"add\")) {\n+                return Lists.newArrayList(\"500\", \"1000\", \"1500\", \"2000\", \"2500\", \"3000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI2NDA2OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDozODowNVrOGk1U5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDo0Mzo1MFrOGlb4oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NTYyMg==", "bodyText": "This logic doesn't seem right to me", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441275622", "createdAt": "2020-06-17T04:38:05Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "diffHunk": "@@ -166,25 +130,29 @@ private String normalizeWorldName(World world) {\n \n     @Override\n     protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {\n-        final User user = ess.getUser(sender.getPlayer());\n-\n+        boolean isConsole = sender.isPlayer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxMzg5MQ==", "bodyText": "What logic?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441613891", "createdAt": "2020-06-17T15:00:50Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "diffHunk": "@@ -166,25 +130,29 @@ private String normalizeWorldName(World world) {\n \n     @Override\n     protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {\n-        final User user = ess.getUser(sender.getPlayer());\n-\n+        boolean isConsole = sender.isPlayer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NTYyMg=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNjgyOQ==", "bodyText": "if the sender is a player, they are not console.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441906829", "createdAt": "2020-06-18T00:41:27Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "diffHunk": "@@ -166,25 +130,29 @@ private String normalizeWorldName(World world) {\n \n     @Override\n     protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {\n-        final User user = ess.getUser(sender.getPlayer());\n-\n+        boolean isConsole = sender.isPlayer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NTYyMg=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNzM2MQ==", "bodyText": "oh lmao, fixed i fixed that up", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441907361", "createdAt": "2020-06-18T00:43:50Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "diffHunk": "@@ -166,25 +130,29 @@ private String normalizeWorldName(World world) {\n \n     @Override\n     protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {\n-        final User user = ess.getUser(sender.getPlayer());\n-\n+        boolean isConsole = sender.isPlayer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NTYyMg=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI3NTQ3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0NToxNlrOGk1b3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0NToxNlrOGk1b3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzQwNw==", "bodyText": "Maybe better: \"Time was moved forward by...\"", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441277407", "createdAt": "2020-06-17T04:45:16Z", "author": {"login": "pop4959"}, "path": "Essentials/src/messages.properties", "diffHunk": "@@ -772,6 +776,7 @@ timeCommandUsage=/<command> [day|night|dawn|17:30|4pm|4000ticks] [worldname|all]\n timeFormat=\\u00a7c{0}\\u00a76 or \\u00a7c{1}\\u00a76 or \\u00a7c{2}\\u00a76\n timeSetPermission=\\u00a74You are not authorized to set the time.\n timeSetWorldPermission=\\u00a74You are not authorized to set the time in world ''{0}''.\n+timeWorldAdd=\\u00a76The time was increased by\\u00a7c {0} \\u00a76in\\: \\u00a7c{1}\\u00a76.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI3NzU1OnYy", "diffSide": "LEFT", "path": "Essentials/src/plugin.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0NjoxOFrOGk1dCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDo0NDozMVrOGlb5Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzcwNw==", "bodyText": "Why is this getting removed?", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441277707", "createdAt": "2020-06-17T04:46:18Z", "author": {"login": "pop4959"}, "path": "Essentials/src/plugin.yml", "diffHunk": "@@ -621,9 +621,6 @@ permissions:\n   essentials.silentquit:\n     default: false\n     description: Suppress leave/quit messages for users with this permission.\n-  essentials.sleepingignored:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNDgwMQ==", "bodyText": "It was a duplicate entry", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441614801", "createdAt": "2020-06-17T15:01:56Z", "author": {"login": "JRoy"}, "path": "Essentials/src/plugin.yml", "diffHunk": "@@ -621,9 +621,6 @@ permissions:\n   essentials.silentquit:\n     default: false\n     description: Suppress leave/quit messages for users with this permission.\n-  essentials.sleepingignored:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzcwNw=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNzUxNA==", "bodyText": "Ah I see", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441907514", "createdAt": "2020-06-18T00:44:31Z", "author": {"login": "pop4959"}, "path": "Essentials/src/plugin.yml", "diffHunk": "@@ -621,9 +621,6 @@ permissions:\n   essentials.silentquit:\n     default: false\n     description: Suppress leave/quit messages for users with this permission.\n-  essentials.sleepingignored:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzcwNw=="}, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI3ODkzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/plugin.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0NzoxMlrOGk1d1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0NzoxMlrOGk1d1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzkwOQ==", "bodyText": "Optional arguments should use square brackets", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441277909", "createdAt": "2020-06-17T04:47:12Z", "author": {"login": "pop4959"}, "path": "Essentials/src/plugin.yml", "diffHunk": "@@ -438,7 +438,7 @@ commands:\n     aliases: [ethunder]\n   time:\n     description: Display/Change the world time. Defaults to current world.\n-    usage: /<command> [day|night|dawn|17:30|4pm|4000ticks] [worldname|all]\n+    usage: /<command> [set|add] <day|night|dawn|17:30|4pm|4000ticks> [worldname|all]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI3OTczOnYy", "diffSide": "RIGHT", "path": "Essentials/src/plugin.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0Nzo0MFrOGk1eRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0Nzo0MFrOGk1eRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3ODAyMg==", "bodyText": "These descriptions/usage will need to be updated in messages.properties as well", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441278022", "createdAt": "2020-06-17T04:47:40Z", "author": {"login": "pop4959"}, "path": "Essentials/src/plugin.yml", "diffHunk": "@@ -133,8 +133,8 @@ commands:\n     usage: /<command>\n     aliases: [eessentials, ess, eess, essversion]\n   exp:\n-    description: Give, set or look at a players exp.\n-    usage: /<command> [show|set|give] [playername [amount]]\n+    description: Give, set, reset, or look at a players exp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI4MjQ1OnYy", "diffSide": "RIGHT", "path": "EssentialsXMPP/src/com/earth2me/essentials/xmpp/Commandxmpp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0OToxNFrOGk1fwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0OToxNFrOGk1fwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3ODQwMA==", "bodyText": "Would probably be better to use ChatColor here", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r441278400", "createdAt": "2020-06-17T04:49:14Z", "author": {"login": "pop4959"}, "path": "EssentialsXMPP/src/com/earth2me/essentials/xmpp/Commandxmpp.java", "diffHunk": "@@ -21,13 +21,14 @@ protected void run(final Server server, final CommandSource sender, final String\n         final String address = EssentialsXMPP.getInstance().getAddress(args[0]);\n         if (address == null) {\n             sender.sendMessage(\"\u00a7cThere are no players matching that name.\");\n-        } else {\n-            final String message = getFinalArg(args, 1);\n-            final String senderName = sender.isPlayer() ? ess.getUser(sender.getPlayer()).getDisplayName() : Console.NAME;\n-            sender.sendMessage(\"[\" + senderName + \">\" + address + \"] \" + message);\n-            if (!EssentialsXMPP.getInstance().sendMessage(address, \"[\" + senderName + \"] \" + message)) {\n-                sender.sendMessage(\"\u00a7cError sending message.\");\n-            }\n+            return;\n+        }\n+\n+        final String message = getFinalArg(args, 1);\n+        final String senderName = sender.isPlayer() ? ess.getUser(sender.getPlayer()).getDisplayName() : Console.NAME;\n+        sender.sendMessage(\"[\" + senderName + \">\" + address + \"] \" + message);\n+        if (!EssentialsXMPP.getInstance().sendMessage(address, \"[\" + senderName + \"] \" + message)) {\n+            sender.sendMessage(\"\u00a7cError sending message.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fe71ed615b84a866b848e0197f3c0e6f0562e1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQ0ODA0OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandspeed.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDozNDo1N1rOGtmNwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo0Nzo0MlrOGtoKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2NTIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final List<String> types = Arrays.asList(\"walk\", \"fly\", \"1\", \"1.5\", \"1.75\", \"2\");\n          \n          \n            \n                private final List<String> speeds = Arrays.asList(\"1\", \"1.5\", \"1.75\", \"2\");\n          \n          \n            \n                private static final List<String> types = Arrays.asList(\"walk\", \"fly\", \"1\", \"1.5\", \"1.75\", \"2\");\n          \n          \n            \n                private static final List<String> speeds = Arrays.asList(\"1\", \"1.5\", \"1.75\", \"2\");", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450465217", "createdAt": "2020-07-06T20:34:57Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandspeed.java", "diffHunk": "@@ -6,13 +6,17 @@\n import org.bukkit.Server;\n import org.bukkit.entity.Player;\n \n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n public class Commandspeed extends EssentialsCommand {\n+    private final List<String> types = Arrays.asList(\"walk\", \"fly\", \"1\", \"1.5\", \"1.75\", \"2\");\n+    private final List<String> speeds = Arrays.asList(\"1\", \"1.5\", \"1.75\", \"2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MjE3NA==", "bodyText": "I would also suggest using a better range of speeds, such as 1,2,3,4,5 instead of these random decimals", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450492174", "createdAt": "2020-07-06T21:35:10Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandspeed.java", "diffHunk": "@@ -6,13 +6,17 @@\n import org.bukkit.Server;\n import org.bukkit.entity.Player;\n \n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n public class Commandspeed extends EssentialsCommand {\n+    private final List<String> types = Arrays.asList(\"walk\", \"fly\", \"1\", \"1.5\", \"1.75\", \"2\");\n+    private final List<String> speeds = Arrays.asList(\"1\", \"1.5\", \"1.75\", \"2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2NTIxNw=="}, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5NzA1MQ==", "bodyText": "or just maybe don't put the numbers lol its kind of weird to suggest specific numbers in general imo", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450497051", "createdAt": "2020-07-06T21:47:42Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandspeed.java", "diffHunk": "@@ -6,13 +6,17 @@\n import org.bukkit.Server;\n import org.bukkit.entity.Player;\n \n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n import static com.earth2me.essentials.I18n.tl;\n \n \n public class Commandspeed extends EssentialsCommand {\n+    private final List<String> types = Arrays.asList(\"walk\", \"fly\", \"1\", \"1.5\", \"1.75\", \"2\");\n+    private final List<String> speeds = Arrays.asList(\"1\", \"1.5\", \"1.75\", \"2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2NTIxNw=="}, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQ2MzE1OnYy", "diffSide": "LEFT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0MDowMlrOGtmXNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0MDowMlrOGtmXNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2NzYzNw==", "bodyText": "Comment should probably be improved not just removed", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450467637", "createdAt": "2020-07-06T20:40:02Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandtime.java", "diffHunk": "@@ -14,120 +14,94 @@\n \n \n public class Commandtime extends EssentialsCommand {\n+    private final List<String> subCommands = Arrays.asList(\"add\", \"set\");\n+    private final List<String> timeNames = Arrays.asList(\"sunrise\", \"day\", \"morning\", \"noon\", \"afternoon\", \"sunset\", \"night\", \"midnight\");\n+    private final List<String> timeNumbers = Arrays.asList(\"1000\", \"2000\", \"3000\", \"4000\", \"5000\");\n+\n+\n     public Commandtime() {\n         super(\"time\");\n     }\n \n     @Override\n     public void run(final Server server, final CommandSource sender, final String commandLabel, final String[] args) throws Exception {\n+        long timeTick;\n+        Set<World> worlds;\n         boolean add = false;\n-        final List<String> argList = new ArrayList<>(Arrays.asList(args));\n-        if (argList.remove(\"set\") && !argList.isEmpty() && NumberUtil.isInt(argList.get(0))) {\n-            argList.set(0, argList.get(0) + \"t\");\n-        }\n-        if (argList.remove(\"add\") && !argList.isEmpty() && NumberUtil.isInt(argList.get(0))) {\n-            add = true;\n-            argList.set(0, argList.get(0) + \"t\");\n-        }\n-        final String[] validArgs = argList.toArray(new String[0]);\n-\n-        // Which World(s) are we interested in?\n-        String worldSelector = null;\n-        if (validArgs.length == 2) {\n-            worldSelector = validArgs[1];\n-        }\n-        final Set<World> worlds = getWorlds(server, sender, worldSelector);\n-        final String setTime;\n-\n-        // If no arguments we are reading the time\n-        if (validArgs.length == 0) {\n-            if (commandLabel.equalsIgnoreCase(\"day\") || commandLabel.equalsIgnoreCase(\"eday\")) {\n-                setTime = \"day\";\n-            } else if (commandLabel.equalsIgnoreCase(\"night\") || commandLabel.equalsIgnoreCase(\"enight\")) {\n-                setTime = \"night\";\n+        if (args.length == 0) {\n+            worlds = getWorlds(server, sender, null);\n+            if (commandLabel.endsWith(\"day\") || commandLabel.endsWith(\"night\")) {\n+                timeTick = DescParseTickFormat.parse(commandLabel.toLowerCase(Locale.ENGLISH).replace(\"e\", \"\")); // These are 100% safe things to parse, no need for catching\n             } else {\n                 getWorldsTime(sender, worlds);\n-                throw new NoChargeException();\n+                return;\n+            }\n+        } else if (args.length == 1) {\n+            worlds = getWorlds(server, sender, null);\n+            try {\n+                timeTick = DescParseTickFormat.parse(NumberUtil.isInt(args[0]) ? (args[0] + \"t\") : args[0]);\n+            } catch (NumberFormatException e) {\n+                throw new NotEnoughArgumentsException(e);\n             }\n         } else {\n-            setTime = validArgs[0];\n-        }\n-\n-        final User user = ess.getUser(sender.getPlayer());\n-        if (user != null && !user.isAuthorized(\"essentials.time.set\")) {\n-            throw new Exception(tl(\"timeSetPermission\"));\n-        }\n-\n-        // Parse the target time int ticks from args[0]\n-        long ticks;\n-        try {\n-            ticks = DescParseTickFormat.parse(setTime);\n-        } catch (NumberFormatException e) {\n-            throw new NotEnoughArgumentsException(e);\n-        }\n-\n-        setWorldsTime(sender, worlds, ticks, add);\n-    }\n-\n-    /**\n-     * Used to get the time and inform\n-     */\n-    private void getWorldsTime(final CommandSource sender, final Collection<World> worlds) {\n-        if (worlds.size() == 1) {\n-            final Iterator<World> iter = worlds.iterator();\n-            sender.sendMessage(DescParseTickFormat.format(iter.next().getTime()));\n-            return;\n-        }\n-\n-        for (World world : worlds) {\n-            sender.sendMessage(tl(\"timeWorldCurrent\", world.getName(), DescParseTickFormat.format(world.getTime())));\n+            if (args[0].equalsIgnoreCase(\"set\") || args[0].equalsIgnoreCase(\"add\")) {\n+                try {\n+                    add = args[0].equalsIgnoreCase(\"add\");\n+                    timeTick = DescParseTickFormat.parse(NumberUtil.isInt(args[1]) ? (args[1] + \"t\") : args[1]);\n+                    worlds = getWorlds(server, sender, args.length > 2 ? args[2] : null);\n+                } catch (NumberFormatException e) {\n+                    throw new NotEnoughArgumentsException(e);\n+                }\n+            } else {\n+                try {\n+                    timeTick = DescParseTickFormat.parse(NumberUtil.isInt(args[0]) ? (args[0] + \"t\") : args[0]);\n+                    worlds = getWorlds(server, sender, args[1]);\n+                } catch (NumberFormatException e) {\n+                    throw new NotEnoughArgumentsException(e);\n+                }\n+            }\n         }\n-    }\n \n-    /**\n-     * Used to set the time and inform of the change\n-     */\n-    private void setWorldsTime(final CommandSource sender, final Collection<World> worlds, final long ticks, final boolean add) throws Exception {\n+        // Start updating world times, we have what we need\n         User user = ess.getUser(sender.getPlayer());\n         for (World world : worlds) {\n             if (!canUpdateWorld(user, world)) {\n                 throw new Exception(tl(\"timeSetWorldPermission\", user.getWorld().getName()));\n             }\n         }\n \n-        // Update the time\n+        final StringJoiner joiner = new StringJoiner(\",\");\n         for (World world : worlds) {\n             long time = world.getTime();\n             if (!add) {\n                 time -= time % 24000;\n             }\n-            world.setTime(time + (add ? 0 : 24000) + ticks);\n+            world.setTime(time + (add ? 0 : 24000) + timeTick);\n+            joiner.add(world.getName());\n         }\n \n-        final StringBuilder output = new StringBuilder();\n-        for (World world : worlds) {\n-            if (output.length() > 0) {\n-                output.append(\", \");\n-            }\n+        sender.sendMessage(tl(add ? \"timeWorldAdd\" : \"timeWorldSet\", DescParseTickFormat.formatTicks(timeTick), joiner.toString()));\n+    }\n \n-            output.append(world.getName());\n+    private void getWorldsTime(final CommandSource sender, final Collection<World> worlds) {\n+        if (worlds.size() == 1) {\n+            final Iterator<World> iter = worlds.iterator();\n+            sender.sendMessage(DescParseTickFormat.format(iter.next().getTime()));\n+            return;\n         }\n \n-        sender.sendMessage(tl(\"timeWorldSet\", DescParseTickFormat.format(ticks), output.toString()));\n+        for (World world : worlds) {\n+            sender.sendMessage(tl(\"timeWorldCurrent\", world.getName(), DescParseTickFormat.format(world.getTime())));\n+        }\n     }\n \n-    /**\n-     * Used to parse an argument of the type \"world(s) selector\"\n-     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQ3NDgzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0MzozOFrOGtmeEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0MzozOFrOGtmeEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2OTM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            expCommandDescription=Give, set, reset, or look at a players exp.\n          \n          \n            \n            expCommandDescription=Give, set, reset, or look at a players experience.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450469394", "createdAt": "2020-07-06T20:43:38Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/messages.properties", "diffHunk": "@@ -191,8 +191,8 @@ essentialsHelp1=The file is broken and Essentials can''t open it. Essentials is\n essentialsHelp2=The file is broken and Essentials can''t open it. Essentials is now disabled. If you can''t fix the file yourself, either type /essentialshelp in game or go to http\\://tiny.cc/EssentialsChat\n essentialsReload=\\u00a76Essentials reloaded\\u00a7c {0}.\n exp=\\u00a7c{0} \\u00a76has\\u00a7c {1} \\u00a76exp (level\\u00a7c {2}\\u00a76) and needs\\u00a7c {3} \\u00a76more exp to level up.\n-expCommandDescription=Give, set or look at a players exp.\n-expCommandUsage=/<command> [show|set|give] [playername [amount]]\n+expCommandDescription=Give, set, reset, or look at a players exp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQ3NjkzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/plugin.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NDoyMVrOGtmfXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NDoyMVrOGtmfXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2OTcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                description: Give, set, reset, or look at a players exp.\n          \n          \n            \n                description: Give, set, reset, or look at a players experience.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450469724", "createdAt": "2020-07-06T20:44:21Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/plugin.yml", "diffHunk": "@@ -133,8 +133,8 @@ commands:\n     usage: /<command>\n     aliases: [eessentials, ess, eess, essversion]\n   exp:\n-    description: Give, set or look at a players exp.\n-    usage: /<command> [show|set|give] [playername [amount]]\n+    description: Give, set, reset, or look at a players exp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQ4MDA0OnYy", "diffSide": "RIGHT", "path": "EssentialsSpawn/src/com/earth2me/essentials/spawn/Commandsetspawn.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NToxOVrOGtmhRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0NToxOVrOGtmhRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3MDIxMw==", "bodyText": "Should return a list of groups in the permission manager.", "url": "https://github.com/EssentialsX/Essentials/pull/3337#discussion_r450470213", "createdAt": "2020-07-06T20:45:19Z", "author": {"login": "mdcfe"}, "path": "EssentialsSpawn/src/com/earth2me/essentials/spawn/Commandsetspawn.java", "diffHunk": "@@ -18,4 +22,9 @@ public void run(final Server server, final User user, final String commandLabel,\n         ((SpawnStorage) module).setSpawn(user.getLocation(), group);\n         user.sendMessage(tl(\"spawnSet\", group));\n     }\n+\n+    @Override\n+    protected List<String> getTabCompleteOptions(Server server, CommandSource sender, String commandLabel, String[] args) {\n+        return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07399502fefc8cc63ff2678cbaebec6a559ef4c"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4712, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}