{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzODg5ODc2", "number": 3855, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyMToxMVrOFII2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToyMDo1MVrOFidWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc3ODk0OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyMToxMVrOIJ5TCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyMToxMVrOIJ5TCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0Njg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static String REPO = \"EssentialsX/Essentials\";\n          \n          \n            \n                private final static String BRANCH = \"2.x\";\n          \n          \n            \n                private static final String REPO = \"EssentialsX/Essentials\";\n          \n          \n            \n                private static final String BRANCH = \"2.x\";\n          \n      \n    \n    \n  \n\nwh-", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r547246859", "createdAt": "2020-12-22T12:21:11Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+public final class EssentialsUpdateChecker {\n+    private final static String REPO = \"EssentialsX/Essentials\";\n+    private final static String BRANCH = \"2.x\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75f75f8aea7182922f69762660a8778efc04094e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY1NjM3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxODozMVrOIWHtkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxODozMVrOIWHtkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NTkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);\n          \n          \n            \n                        \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);\n          \n      \n    \n    \n  \n\nUnnecessary spacing change", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560065936", "createdAt": "2021-01-19T10:18:31Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -490,7 +542,7 @@ public void reload() {\n     @Override\n     public List<String> onTabComplete(final CommandSender sender, final Command command, final String commandLabel, final String[] args) {\n         return onTabCompleteEssentials(sender, command, commandLabel, args, Essentials.class.getClassLoader(),\n-            \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);\n+                \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY1NzE1OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxODo0M1rOIWHuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxODo0M1rOIWHuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NjA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[]{bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n          \n          \n            \n                                Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[] {bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560066066", "createdAt": "2021-01-19T10:18:43Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -603,10 +655,10 @@ public boolean onCommandEssentials(final CommandSender cSender, final Command co\n \n             if (bSenderBlock != null) {\n                 if (getSettings().logCommandBlockCommands()) {\n-                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[] {bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n+                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[]{bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY1NzU4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxODo1M1rOIWHuXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxODo1M1rOIWHuXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NjE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[]{cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n          \n          \n            \n                            Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[] {cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560066143", "createdAt": "2021-01-19T10:18:53Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -603,10 +655,10 @@ public boolean onCommandEssentials(final CommandSender cSender, final Command co\n \n             if (bSenderBlock != null) {\n                 if (getSettings().logCommandBlockCommands()) {\n-                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[] {bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n+                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[]{bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n                 }\n             } else if (user == null) {\n-                Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[] {cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n+                Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[]{cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY2MTEwOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsPlayerListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxOTo0OFrOIWHwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxOTo0OFrOIWHwhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NjY5NQ==", "bodyText": "Maybe move this into a showJoinUpdateCheck method or something?", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560066695", "createdAt": "2021-01-19T10:19:48Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsPlayerListener.java", "diffHunk": "@@ -420,6 +420,53 @@ public void run() {\n                         final TextPager pager = new TextPager(output, true);\n                         pager.showPage(\"1\", null, \"motd\", user.getSource());\n                     }\n+\n+                    if (!user.isAuthorized(\"essentials.updatecheck\")) {\n+                        return;\n+                    }\n+\n+                    if (EssentialsUpdateChecker.isDevBuild()) {\n+                        EssentialsUpdateChecker.getDevToken().thenAccept(token -> {\n+                            switch (token.getBranchStatus()) {\n+                                case BEHIND: {\n+                                    user.sendMessage(tl(\"versionDevBehind\", token.getDistance()));\n+                                    break;\n+                                }\n+                                case AHEAD:\n+                                case DIVERGED: {\n+                                    user.sendMessage(tl(token.getDistance() == 0 ? \"versionDevDivergedLatest\" : \"versionDevDiverged\", token.getDistance()));\n+                                    user.sendMessage(tl(\"versionDevDivergedBranch\", EssentialsUpdateChecker.getVersionBranch()));\n+                                    break;\n+                                }\n+                                case ERROR: {\n+                                    user.sendMessage(tl(\"versionErrorPlayer\"));\n+                                    break;\n+                                }\n+                                default: {\n+                                    break;\n+                                }\n+                            }\n+                        });\n+                    } else {\n+                        EssentialsUpdateChecker.getReleaseToken().thenAccept(token -> {\n+                            switch (token.getBranchStatus()) {\n+                                case BEHIND: {\n+                                    user.sendMessage(tl(\"versionReleaseNew\", EssentialsUpdateChecker.getLatestRelease()));\n+                                    //TODO download link? (https://github.com/EssentialsX/Website/issues/26)\n+                                    break;\n+                                }\n+                                case DIVERGED: //WhatChamp\n+                                case AHEAD: //monkaW????\n+                                case ERROR: {\n+                                    user.sendMessage(tl(\"versionErrorPlayer\"));\n+                                    break;\n+                                }\n+                                default: {\n+                                    break;\n+                                }\n+                            }\n+                        });\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY3MDMyOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/metrics/MetricsWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoyMTo0OFrOIWH19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoyMTo0OFrOIWH19A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2ODA4NA==", "bodyText": "Preferably put this in its own method for consistency", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560068084", "createdAt": "2021-01-19T10:21:48Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/metrics/MetricsWrapper.java", "diffHunk": "@@ -38,6 +39,7 @@ public MetricsWrapper(final Plugin plugin, final int pluginId, final boolean inc\n         checkForcedMetrics();\n         addPermsChart();\n         addEconomyChart();\n+        addCustomChart(new Metrics.SimplePie(\"releaseBranch\", EssentialsUpdateChecker::getVersionBranch));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY3NzYxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoyMzo0NFrOIWH6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoyMzo0NFrOIWH6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2OTI0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    inputs.property('fullVersion', fullVersion)\n          \n          \n            \n                    // Always process resources if version string or git branch changes\n          \n          \n            \n                    inputs.property('fullVersion', fullVersion)", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560069247", "createdAt": "2021-01-19T10:23:44Z", "author": {"login": "mdcfe"}, "path": "build.gradle", "diffHunk": "@@ -88,8 +89,10 @@ subprojects {\n     // Version Injection\n     processResources {\n         inputs.property('fullVersion', fullVersion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzQ5NjExOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzo0OToyNVrOImHQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzo0OToyNVrOImHQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzNTc5Ng==", "bodyText": "Pending adding a release page to the website, see EssentialsX/Website#29", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r576835796", "createdAt": "2021-02-16T13:49:25Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java", "diffHunk": "@@ -388,10 +389,63 @@ private void runVersion(final Server server, final CommandSource sender, final S\n                 sender.sendMessage(tl(\"serverUnsupportedLimitedApi\"));\n                 break;\n         }\n-\n         if (VersionUtil.getSupportStatusClass() != null) {\n             sender.sendMessage(tl(\"serverUnsupportedClass\", VersionUtil.getSupportStatusClass()));\n         }\n+\n+        sender.sendMessage(tl(\"versionFetching\"));\n+        ess.runTaskAsynchronously(() -> {\n+            if (EssentialsUpdateChecker.isDevBuild()) {\n+                final EssentialsUpdateChecker.UpdateToken devToken = EssentialsUpdateChecker.getDevToken().join();\n+                switch (devToken.getBranchStatus()) {\n+                    case IDENTICAL: {\n+                        sender.sendMessage(tl(\"versionDevLatest\"));\n+                        break;\n+                    }\n+                    case BEHIND: {\n+                        sender.sendMessage(tl(\"versionDevBehind\", devToken.getDistance()));\n+                        break;\n+                    }\n+                    case AHEAD:\n+                    case DIVERGED: {\n+                        sender.sendMessage(tl(devToken.getDistance() == 0 ? \"versionDevDivergedLatest\" : \"versionDevDiverged\", devToken.getDistance()));\n+                        sender.sendMessage(tl(\"versionDevDivergedBranch\", EssentialsUpdateChecker.getVersionBranch()));\n+                        break;\n+                    }\n+                    case UNKNOWN: {\n+                        sender.sendMessage(tl(\"versionCustom\", EssentialsUpdateChecker.getBuildInfo()));\n+                        break;\n+                    }\n+                    case ERROR: {\n+                        sender.sendMessage(tl(\"versionError\", EssentialsUpdateChecker.getBuildInfo()));\n+                        break;\n+                    }\n+                }\n+            } else {\n+                final EssentialsUpdateChecker.UpdateToken releaseToken = EssentialsUpdateChecker.getReleaseToken().join();\n+                switch (releaseToken.getBranchStatus()) {\n+                    case IDENTICAL: {\n+                        sender.sendMessage(tl(\"versionReleaseLatest\"));\n+                        break;\n+                    }\n+                    case BEHIND: {\n+                        sender.sendMessage(tl(\"versionReleaseNew\", EssentialsUpdateChecker.getLatestRelease()));\n+                        //TODO download link? (https://github.com/EssentialsX/Website/issues/26)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5d53fbe5400a7e8ff6864d1b20c31e44c6be39"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc1NjUxOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNTowOTowNVrOIxnKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNTowOTowNVrOIxnKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MjczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n          \n          \n            \n                    if (versionStr.size() == 2) {\n          \n          \n            \n                        if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n          \n          \n            \n                            identifier = versionStr.get(0).split(\"-\")[2];\n          \n          \n            \n                            dev = true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            identifier = versionStr.get(0);\n          \n          \n            \n                        }\n          \n          \n            \n                        branch = versionStr.get(1);\n          \n          \n            \n                    }\n          \n          \n            \n                    final InputStream inputStream = EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\");\n          \n          \n            \n                    if (inputStream != null) {\n          \n          \n            \n                        final List<String> versionStr = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n          \n          \n            \n                        if (versionStr.size() == 2) {\n          \n          \n            \n                            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n          \n          \n            \n                                identifier = versionStr.get(0).split(\"-\")[2];\n          \n          \n            \n                                dev = true;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                identifier = versionStr.get(0);\n          \n          \n            \n                            }\n          \n          \n            \n                            branch = versionStr.get(1);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nAfaik Objects.requireNonNull in the static block here will cause the class to not initialize, so EssentialsX won't load if the release file is missing.", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588892737", "createdAt": "2021-03-06T15:09:05Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc1OTI2OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxMjowN1rOIxnLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxMjowN1rOIxnLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzA3Ng==", "bodyText": "Should have a config option to disable - as it stands, this PR makes external connections without letting the user control them.\nProbably worth making the methods in this class non-static, passing in ISettings here, and only triggering update checks if enabled in config.", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893076", "createdAt": "2021-03-06T15:12:07Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc1OTg4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxMzowN1rOIxnL4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxMzowN1rOIxnL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzE1Mg==", "bodyText": "Possibly move to com.earth2me.essentials.updatecheck.UpdateChecker? Base package is cluttered as it is.", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893152", "createdAt": "2021-03-06T15:13:07Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc2MTM3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxNTowOVrOIxnMlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxNTowOVrOIxnMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzMzMg==", "bodyText": "Why set to null here?", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893332", "createdAt": "2021-03-06T15:15:09Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc2NDk0OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxODowOFrOIxnOKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxODowOFrOIxnOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzczOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    return pendingReleaseFuture;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nWithout this, we would just return the cached result. On first run this is null and causes NPEs:", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893739", "createdAt": "2021-03-06T15:18:08Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc2NjM4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxOTo0NFrOIxnO2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToxOTo0NFrOIxnO2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzkxMw==", "bodyText": "...methods?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String[] getVersionMethods(final boolean sendLatestMessage, final boolean verboseErrors) {\n          \n          \n            \n                public static String[] getVersionMessages(final boolean sendLatestMessage, final boolean verboseErrors) {", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893913", "createdAt": "2021-03-06T15:19:44Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+        }\n+        return CompletableFuture.completedFuture(cachedRelease);\n+    }\n+\n+    public static String getVersionIdentifier() {\n+        return versionIdentifier;\n+    }\n+\n+    public static String getVersionBranch() {\n+        return versionBranch;\n+    }\n+\n+    public static String getBuildInfo() {\n+        return \"id:'\" + getVersionIdentifier() + \"' branch:'\" + getVersionBranch() + \"' isDev:\" + isDevBuild();\n+    }\n+\n+    public static String getLatestRelease() {\n+        return latestRelease;\n+    }\n+\n+    private static UpdateToken fetchDistance(final String head, final String hash) {\n+        try {\n+            final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/compare/\" + head + \"...\" + hash).openConnection();\n+            connection.connect();\n+\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                // Locally built?\n+                return new UpdateToken(BranchStatus.UNKNOWN);\n+            }\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                // Github is down\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);\n+                switch (obj.get(\"status\").getAsString()) {\n+                    case \"identical\": {\n+                        return new UpdateToken(BranchStatus.IDENTICAL, 0);\n+                    }\n+                    case \"ahead\": {\n+                        return new UpdateToken(BranchStatus.AHEAD, 0);\n+                    }\n+                    case \"behind\": {\n+                        return new UpdateToken(BranchStatus.BEHIND, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    case \"diverged\": {\n+                        return new UpdateToken(BranchStatus.DIVERGED, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    default: {\n+                        return new UpdateToken(BranchStatus.UNKNOWN);\n+                    }\n+                }\n+            } catch (JsonSyntaxException | NumberFormatException e) {\n+                e.printStackTrace();\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            return new UpdateToken(BranchStatus.ERROR);\n+        }\n+    }\n+\n+    public static String[] getVersionMethods(final boolean sendLatestMessage, final boolean verboseErrors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNjc2NzUwOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToyMDo1MVrOIxnPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToyMDo1MVrOIxnPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5NDA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class UpdateToken {\n          \n          \n            \n                public static class Version {", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588894044", "createdAt": "2021-03-06T15:20:51Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+        }\n+        return CompletableFuture.completedFuture(cachedRelease);\n+    }\n+\n+    public static String getVersionIdentifier() {\n+        return versionIdentifier;\n+    }\n+\n+    public static String getVersionBranch() {\n+        return versionBranch;\n+    }\n+\n+    public static String getBuildInfo() {\n+        return \"id:'\" + getVersionIdentifier() + \"' branch:'\" + getVersionBranch() + \"' isDev:\" + isDevBuild();\n+    }\n+\n+    public static String getLatestRelease() {\n+        return latestRelease;\n+    }\n+\n+    private static UpdateToken fetchDistance(final String head, final String hash) {\n+        try {\n+            final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/compare/\" + head + \"...\" + hash).openConnection();\n+            connection.connect();\n+\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                // Locally built?\n+                return new UpdateToken(BranchStatus.UNKNOWN);\n+            }\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                // Github is down\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);\n+                switch (obj.get(\"status\").getAsString()) {\n+                    case \"identical\": {\n+                        return new UpdateToken(BranchStatus.IDENTICAL, 0);\n+                    }\n+                    case \"ahead\": {\n+                        return new UpdateToken(BranchStatus.AHEAD, 0);\n+                    }\n+                    case \"behind\": {\n+                        return new UpdateToken(BranchStatus.BEHIND, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    case \"diverged\": {\n+                        return new UpdateToken(BranchStatus.DIVERGED, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    default: {\n+                        return new UpdateToken(BranchStatus.UNKNOWN);\n+                    }\n+                }\n+            } catch (JsonSyntaxException | NumberFormatException e) {\n+                e.printStackTrace();\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            return new UpdateToken(BranchStatus.ERROR);\n+        }\n+    }\n+\n+    public static String[] getVersionMethods(final boolean sendLatestMessage, final boolean verboseErrors) {\n+        if (EssentialsUpdateChecker.isDevBuild()) {\n+            final EssentialsUpdateChecker.UpdateToken devToken = EssentialsUpdateChecker.getDevToken().join();\n+            switch (devToken.getBranchStatus()) {\n+                case IDENTICAL: {\n+                    return sendLatestMessage ? new String[] {tl(\"versionDevLatest\")} : new String[] {};\n+                }\n+                case BEHIND: {\n+                    return new String[] {tl(\"versionDevBehind\", devToken.getDistance()),\n+                            tl(\"versionReleaseNewLink\", \"https://essentialsx.net/downloads.html\")};\n+                }\n+                case AHEAD:\n+                case DIVERGED: {\n+                    return new String[] {tl(devToken.getDistance() == 0 ? \"versionDevDivergedLatest\" : \"versionDevDiverged\", devToken.getDistance()),\n+                            tl(\"versionDevDivergedBranch\", EssentialsUpdateChecker.getVersionBranch()) };\n+                }\n+                case UNKNOWN: {\n+                    return verboseErrors ? new String[] {tl(\"versionCustom\", EssentialsUpdateChecker.getBuildInfo())} : new String[] {};\n+                }\n+                case ERROR: {\n+                    return new String[] {tl(verboseErrors ? \"versionError\" : \"versionErrorPlayer\", EssentialsUpdateChecker.getBuildInfo())};\n+                }\n+                default: {\n+                    return new String[] {};\n+                }\n+            }\n+        } else {\n+            final EssentialsUpdateChecker.UpdateToken releaseToken = EssentialsUpdateChecker.getReleaseToken().join();\n+            switch (releaseToken.getBranchStatus()) {\n+                case IDENTICAL: {\n+                    return sendLatestMessage ? new String[] {tl(\"versionReleaseLatest\")} : new String[] {};\n+                }\n+                case BEHIND: {\n+                    return new String[] {tl(\"versionReleaseNew\", EssentialsUpdateChecker.getLatestRelease()),\n+                            tl(\"versionReleaseNewLink\", \"https://essentialsx.net/downloads.html?branch=stable\")};\n+                }\n+                case DIVERGED: //WhatChamp\n+                case AHEAD: //monkaW?\n+                case UNKNOWN: {\n+                    return verboseErrors ? new String[] {tl(\"versionCustom\", EssentialsUpdateChecker.getBuildInfo())} : new String[] {};\n+                }\n+                case ERROR: {\n+                    return new String[] {tl(verboseErrors ? \"versionError\" : \"versionErrorPlayer\", EssentialsUpdateChecker.getBuildInfo())};\n+                }\n+                default: {\n+                    return new String[] {};\n+                }\n+            }\n+        }\n+    }\n+\n+    public static class UpdateToken {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 228}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}