{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzODg5ODc2", "number": 3855, "title": "Add update checker", "bodyText": "Adds an update checker to Essentials that will check for the latest version on startup, on player join (permission is essentials.updatecheck), or manually with /ess version.\nOn startup, the update checker will fetch build information from a resource generated at compile time and determine if the build is a dev or stable build. If it's a stable build, the update checker will only check for a new release; while a dev build will check for any new commits.\nThere are 6 different types of messages the update checker will return;\n\nIdentical: The current build is the latest stable release or latest dev build. This message is only shown in the /ess version command.\nBehind: If the current build is stable, it's an entire stable build behind, otherwise it's one or more dev builds behind.\nDiverged: The current build was made from a branch other than 2.x and is also one or more dev builds behind the latest commit on 2.x.\nDiverged Latest: The current build was made from a branch other than 2.x but is based on the latest commit from 2.x.\nUnknown: The current build either has invalid build information or was customly built. This message is show everywhere but on player join.\nError: There was an error while fetching the latest version information.\n\nUpdate checks can be disabled using the update-check option in config.yml.", "createdAt": "2020-12-22T06:00:31Z", "url": "https://github.com/EssentialsX/Essentials/pull/3855", "merged": true, "mergeCommit": {"oid": "10fa3b5a3130211fc6a3afb2c88c69e1f3d59396"}, "closed": true, "closedAt": "2021-03-06T16:29:43Z", "author": {"login": "JRoy"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoaAHkAH2gAyNTQzODg5ODc2OmZiZmIwMGRmYmJlMzVlZDE1ODU4MWY0ZDA4NzdmM2U0YzI4YjUzYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeAhdL2AFqTYwNTc2ODcxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fbfb00dfbbe35ed158581f4d0877f3e4c28b53b4", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/fbfb00dfbbe35ed158581f4d0877f3e4c28b53b4", "committedDate": "2020-12-21T18:11:52Z", "message": "Create framework for update checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c51b532a754e4eea9d649929e5a4d49f54b936", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/37c51b532a754e4eea9d649929e5a4d49f54b936", "committedDate": "2020-12-21T19:07:14Z", "message": "Only include commit hash in dev builds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20c5149a6f669125340e173031ab8451892fe065", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/20c5149a6f669125340e173031ab8451892fe065", "committedDate": "2020-12-22T04:03:12Z", "message": "Add version info message in `/ess version` command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3e381bcdff13f93f79f582b9ea13e80c936874", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/3a3e381bcdff13f93f79f582b9ea13e80c936874", "committedDate": "2020-12-22T05:07:01Z", "message": "Add version info message on startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3e564167f15ff1492ffb2963b6f6844e56a06f", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/3d3e564167f15ff1492ffb2963b6f6844e56a06f", "committedDate": "2020-12-22T05:11:43Z", "message": "Use Essentials#runTaskAsynchronously shortcut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21fa2f4ef2b467388c8fd7ab712877fd63cf0ac", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/d21fa2f4ef2b467388c8fd7ab712877fd63cf0ac", "committedDate": "2020-12-22T05:33:56Z", "message": "Add version info message on player join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8939756d761423d5b63cdbb090b007ef64c4c8", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/5b8939756d761423d5b63cdbb090b007ef64c4c8", "committedDate": "2020-12-22T05:59:22Z", "message": "Don't show custom builds on player join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83f7fa1c8c7af7584e959f744d4dba38ae933c9", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/a83f7fa1c8c7af7584e959f744d4dba38ae933c9", "committedDate": "2020-12-22T06:01:50Z", "message": "Merge branch '2.x' into feature/update-checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f75f8aea7182922f69762660a8778efc04094e", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/75f75f8aea7182922f69762660a8778efc04094e", "committedDate": "2020-12-22T06:07:45Z", "message": "Account for ahead branches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9de7f27155a20d2ef800a0e6f438966d292e51cd", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/9de7f27155a20d2ef800a0e6f438966d292e51cd", "committedDate": "2021-01-10T22:33:34Z", "message": "Merge branch '2.x' into feature/update-checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6fea37b31191f5748bb8abf0a805ae8cad556ee", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/d6fea37b31191f5748bb8abf0a805ae8cad556ee", "committedDate": "2021-01-11T00:18:13Z", "message": "Add bstats chart for build branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/2ef496bc07c3893d66379f39e195dac2945c2b57", "committedDate": "2021-01-11T00:46:17Z", "message": "Extend release cache to 30 min"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a5d53fbe5400a7e8ff6864d1b20c31e44c6be39", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/2a5d53fbe5400a7e8ff6864d1b20c31e44c6be39", "committedDate": "2021-01-19T12:45:55Z", "message": "Merge branch '2.x' into feature/update-checker\n\n# Conflicts:\n#\tEssentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDM5NzQz", "url": "https://github.com/EssentialsX/Essentials/pull/3855#pullrequestreview-557039743", "createdAt": "2020-12-22T12:21:11Z", "commit": {"oid": "75f75f8aea7182922f69762660a8778efc04094e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyMToxMVrOIJ5TCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzo0OToyNVrOImHQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0Njg1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static String REPO = \"EssentialsX/Essentials\";\n          \n          \n            \n                private final static String BRANCH = \"2.x\";\n          \n          \n            \n                private static final String REPO = \"EssentialsX/Essentials\";\n          \n          \n            \n                private static final String BRANCH = \"2.x\";\n          \n      \n    \n    \n  \n\nwh-", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r547246859", "createdAt": "2020-12-22T12:21:11Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+public final class EssentialsUpdateChecker {\n+    private final static String REPO = \"EssentialsX/Essentials\";\n+    private final static String BRANCH = \"2.x\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75f75f8aea7182922f69762660a8778efc04094e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NTkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);\n          \n          \n            \n                        \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);\n          \n      \n    \n    \n  \n\nUnnecessary spacing change", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560065936", "createdAt": "2021-01-19T10:18:31Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -490,7 +542,7 @@ public void reload() {\n     @Override\n     public List<String> onTabComplete(final CommandSender sender, final Command command, final String commandLabel, final String[] args) {\n         return onTabCompleteEssentials(sender, command, commandLabel, args, Essentials.class.getClassLoader(),\n-            \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);\n+                \"com.earth2me.essentials.commands.Command\", \"essentials.\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NjA2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[]{bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n          \n          \n            \n                                Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[] {bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560066066", "createdAt": "2021-01-19T10:18:43Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -603,10 +655,10 @@ public boolean onCommandEssentials(final CommandSender cSender, final Command co\n \n             if (bSenderBlock != null) {\n                 if (getSettings().logCommandBlockCommands()) {\n-                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[] {bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n+                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[]{bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NjE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[]{cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n          \n          \n            \n                            Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[] {cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560066143", "createdAt": "2021-01-19T10:18:53Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -603,10 +655,10 @@ public boolean onCommandEssentials(final CommandSender cSender, final Command co\n \n             if (bSenderBlock != null) {\n                 if (getSettings().logCommandBlockCommands()) {\n-                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[] {bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n+                    Bukkit.getLogger().log(Level.INFO, \"CommandBlock at {0},{1},{2} issued server command: /{3} {4}\", new Object[]{bSenderBlock.getX(), bSenderBlock.getY(), bSenderBlock.getZ(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n                 }\n             } else if (user == null) {\n-                Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[] {cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});\n+                Bukkit.getLogger().log(Level.INFO, \"{0} issued server command: /{1} {2}\", new Object[]{cSender.getName(), commandLabel, EssentialsCommand.getFinalArg(args, 0)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NjY5NQ==", "bodyText": "Maybe move this into a showJoinUpdateCheck method or something?", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560066695", "createdAt": "2021-01-19T10:19:48Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsPlayerListener.java", "diffHunk": "@@ -420,6 +420,53 @@ public void run() {\n                         final TextPager pager = new TextPager(output, true);\n                         pager.showPage(\"1\", null, \"motd\", user.getSource());\n                     }\n+\n+                    if (!user.isAuthorized(\"essentials.updatecheck\")) {\n+                        return;\n+                    }\n+\n+                    if (EssentialsUpdateChecker.isDevBuild()) {\n+                        EssentialsUpdateChecker.getDevToken().thenAccept(token -> {\n+                            switch (token.getBranchStatus()) {\n+                                case BEHIND: {\n+                                    user.sendMessage(tl(\"versionDevBehind\", token.getDistance()));\n+                                    break;\n+                                }\n+                                case AHEAD:\n+                                case DIVERGED: {\n+                                    user.sendMessage(tl(token.getDistance() == 0 ? \"versionDevDivergedLatest\" : \"versionDevDiverged\", token.getDistance()));\n+                                    user.sendMessage(tl(\"versionDevDivergedBranch\", EssentialsUpdateChecker.getVersionBranch()));\n+                                    break;\n+                                }\n+                                case ERROR: {\n+                                    user.sendMessage(tl(\"versionErrorPlayer\"));\n+                                    break;\n+                                }\n+                                default: {\n+                                    break;\n+                                }\n+                            }\n+                        });\n+                    } else {\n+                        EssentialsUpdateChecker.getReleaseToken().thenAccept(token -> {\n+                            switch (token.getBranchStatus()) {\n+                                case BEHIND: {\n+                                    user.sendMessage(tl(\"versionReleaseNew\", EssentialsUpdateChecker.getLatestRelease()));\n+                                    //TODO download link? (https://github.com/EssentialsX/Website/issues/26)\n+                                    break;\n+                                }\n+                                case DIVERGED: //WhatChamp\n+                                case AHEAD: //monkaW????\n+                                case ERROR: {\n+                                    user.sendMessage(tl(\"versionErrorPlayer\"));\n+                                    break;\n+                                }\n+                                default: {\n+                                    break;\n+                                }\n+                            }\n+                        });\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2ODA4NA==", "bodyText": "Preferably put this in its own method for consistency", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560068084", "createdAt": "2021-01-19T10:21:48Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/metrics/MetricsWrapper.java", "diffHunk": "@@ -38,6 +39,7 @@ public MetricsWrapper(final Plugin plugin, final int pluginId, final boolean inc\n         checkForcedMetrics();\n         addPermsChart();\n         addEconomyChart();\n+        addCustomChart(new Metrics.SimplePie(\"releaseBranch\", EssentialsUpdateChecker::getVersionBranch));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2OTI0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    inputs.property('fullVersion', fullVersion)\n          \n          \n            \n                    // Always process resources if version string or git branch changes\n          \n          \n            \n                    inputs.property('fullVersion', fullVersion)", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r560069247", "createdAt": "2021-01-19T10:23:44Z", "author": {"login": "mdcfe"}, "path": "build.gradle", "diffHunk": "@@ -88,8 +89,10 @@ subprojects {\n     // Version Injection\n     processResources {\n         inputs.property('fullVersion', fullVersion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef496bc07c3893d66379f39e195dac2945c2b57"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzNTc5Ng==", "bodyText": "Pending adding a release page to the website, see EssentialsX/Website#29", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r576835796", "createdAt": "2021-02-16T13:49:25Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java", "diffHunk": "@@ -388,10 +389,63 @@ private void runVersion(final Server server, final CommandSource sender, final S\n                 sender.sendMessage(tl(\"serverUnsupportedLimitedApi\"));\n                 break;\n         }\n-\n         if (VersionUtil.getSupportStatusClass() != null) {\n             sender.sendMessage(tl(\"serverUnsupportedClass\", VersionUtil.getSupportStatusClass()));\n         }\n+\n+        sender.sendMessage(tl(\"versionFetching\"));\n+        ess.runTaskAsynchronously(() -> {\n+            if (EssentialsUpdateChecker.isDevBuild()) {\n+                final EssentialsUpdateChecker.UpdateToken devToken = EssentialsUpdateChecker.getDevToken().join();\n+                switch (devToken.getBranchStatus()) {\n+                    case IDENTICAL: {\n+                        sender.sendMessage(tl(\"versionDevLatest\"));\n+                        break;\n+                    }\n+                    case BEHIND: {\n+                        sender.sendMessage(tl(\"versionDevBehind\", devToken.getDistance()));\n+                        break;\n+                    }\n+                    case AHEAD:\n+                    case DIVERGED: {\n+                        sender.sendMessage(tl(devToken.getDistance() == 0 ? \"versionDevDivergedLatest\" : \"versionDevDiverged\", devToken.getDistance()));\n+                        sender.sendMessage(tl(\"versionDevDivergedBranch\", EssentialsUpdateChecker.getVersionBranch()));\n+                        break;\n+                    }\n+                    case UNKNOWN: {\n+                        sender.sendMessage(tl(\"versionCustom\", EssentialsUpdateChecker.getBuildInfo()));\n+                        break;\n+                    }\n+                    case ERROR: {\n+                        sender.sendMessage(tl(\"versionError\", EssentialsUpdateChecker.getBuildInfo()));\n+                        break;\n+                    }\n+                }\n+            } else {\n+                final EssentialsUpdateChecker.UpdateToken releaseToken = EssentialsUpdateChecker.getReleaseToken().join();\n+                switch (releaseToken.getBranchStatus()) {\n+                    case IDENTICAL: {\n+                        sender.sendMessage(tl(\"versionReleaseLatest\"));\n+                        break;\n+                    }\n+                    case BEHIND: {\n+                        sender.sendMessage(tl(\"versionReleaseNew\", EssentialsUpdateChecker.getLatestRelease()));\n+                        //TODO download link? (https://github.com/EssentialsX/Website/issues/26)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5d53fbe5400a7e8ff6864d1b20c31e44c6be39"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f64efa45c1b857cdacf53c4097010300401cecc", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/3f64efa45c1b857cdacf53c4097010300401cecc", "committedDate": "2021-02-16T14:57:28Z", "message": "Apply suggestions from code review\n\nCo-authored-by: MD <1917406+mdcfe@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a487d3f4289ca63180c14d0279fb71fddd6d20a9", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/a487d3f4289ca63180c14d0279fb71fddd6d20a9", "committedDate": "2021-02-16T15:03:02Z", "message": "Move release branch chart to its own method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66415902d0604eb33742fcb58b7749426d2a66be", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/66415902d0604eb33742fcb58b7749426d2a66be", "committedDate": "2021-02-16T17:22:36Z", "message": "Reduce code duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5283ea9262e872caac5bac39932038d02c721c6", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/b5283ea9262e872caac5bac39932038d02c721c6", "committedDate": "2021-02-16T18:50:54Z", "message": "Merge branch '2.x' into feature/update-checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d36c54f1085a99434780ee3053e29c4c3b5e02d", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/7d36c54f1085a99434780ee3053e29c4c3b5e02d", "committedDate": "2021-02-24T23:18:25Z", "message": "Add download link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/EssentialsX/Essentials/commit/ad9f8596e044f9c459d2bbd7d3a61ab527872af9", "committedDate": "2021-02-25T05:17:23Z", "message": "Merge branch '2.x' into feature/update-checker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1NzYzMjYy", "url": "https://github.com/EssentialsX/Essentials/pull/3855#pullrequestreview-605763262", "createdAt": "2021-03-06T15:09:05Z", "commit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNTowOTowNVrOIxnKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxNToyMDo1MVrOIxnPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MjczNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n          \n          \n            \n                    if (versionStr.size() == 2) {\n          \n          \n            \n                        if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n          \n          \n            \n                            identifier = versionStr.get(0).split(\"-\")[2];\n          \n          \n            \n                            dev = true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            identifier = versionStr.get(0);\n          \n          \n            \n                        }\n          \n          \n            \n                        branch = versionStr.get(1);\n          \n          \n            \n                    }\n          \n          \n            \n                    final InputStream inputStream = EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\");\n          \n          \n            \n                    if (inputStream != null) {\n          \n          \n            \n                        final List<String> versionStr = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n          \n          \n            \n                        if (versionStr.size() == 2) {\n          \n          \n            \n                            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n          \n          \n            \n                                identifier = versionStr.get(0).split(\"-\")[2];\n          \n          \n            \n                                dev = true;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                identifier = versionStr.get(0);\n          \n          \n            \n                            }\n          \n          \n            \n                            branch = versionStr.get(1);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nAfaik Objects.requireNonNull in the static block here will cause the class to not initialize, so EssentialsX won't load if the release file is missing.", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588892737", "createdAt": "2021-03-06T15:09:05Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzA3Ng==", "bodyText": "Should have a config option to disable - as it stands, this PR makes external connections without letting the user control them.\nProbably worth making the methods in this class non-static, passing in ISettings here, and only triggering update checks if enabled in config.", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893076", "createdAt": "2021-03-06T15:12:07Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzE1Mg==", "bodyText": "Possibly move to com.earth2me.essentials.updatecheck.UpdateChecker? Base package is cluttered as it is.", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893152", "createdAt": "2021-03-06T15:13:07Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzMzMg==", "bodyText": "Why set to null here?", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893332", "createdAt": "2021-03-06T15:15:09Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzczOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    return pendingReleaseFuture;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nWithout this, we would just return the cached result. On first run this is null and causes NPEs:", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893739", "createdAt": "2021-03-06T15:18:08Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5MzkxMw==", "bodyText": "...methods?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String[] getVersionMethods(final boolean sendLatestMessage, final boolean verboseErrors) {\n          \n          \n            \n                public static String[] getVersionMessages(final boolean sendLatestMessage, final boolean verboseErrors) {", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588893913", "createdAt": "2021-03-06T15:19:44Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+        }\n+        return CompletableFuture.completedFuture(cachedRelease);\n+    }\n+\n+    public static String getVersionIdentifier() {\n+        return versionIdentifier;\n+    }\n+\n+    public static String getVersionBranch() {\n+        return versionBranch;\n+    }\n+\n+    public static String getBuildInfo() {\n+        return \"id:'\" + getVersionIdentifier() + \"' branch:'\" + getVersionBranch() + \"' isDev:\" + isDevBuild();\n+    }\n+\n+    public static String getLatestRelease() {\n+        return latestRelease;\n+    }\n+\n+    private static UpdateToken fetchDistance(final String head, final String hash) {\n+        try {\n+            final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/compare/\" + head + \"...\" + hash).openConnection();\n+            connection.connect();\n+\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                // Locally built?\n+                return new UpdateToken(BranchStatus.UNKNOWN);\n+            }\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                // Github is down\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);\n+                switch (obj.get(\"status\").getAsString()) {\n+                    case \"identical\": {\n+                        return new UpdateToken(BranchStatus.IDENTICAL, 0);\n+                    }\n+                    case \"ahead\": {\n+                        return new UpdateToken(BranchStatus.AHEAD, 0);\n+                    }\n+                    case \"behind\": {\n+                        return new UpdateToken(BranchStatus.BEHIND, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    case \"diverged\": {\n+                        return new UpdateToken(BranchStatus.DIVERGED, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    default: {\n+                        return new UpdateToken(BranchStatus.UNKNOWN);\n+                    }\n+                }\n+            } catch (JsonSyntaxException | NumberFormatException e) {\n+                e.printStackTrace();\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            return new UpdateToken(BranchStatus.ERROR);\n+        }\n+    }\n+\n+    public static String[] getVersionMethods(final boolean sendLatestMessage, final boolean verboseErrors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODg5NDA0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class UpdateToken {\n          \n          \n            \n                public static class Version {", "url": "https://github.com/EssentialsX/Essentials/pull/3855#discussion_r588894044", "createdAt": "2021-03-06T15:20:51Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/EssentialsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.earth2me.essentials;\n+\n+import com.google.common.base.Charsets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public final class EssentialsUpdateChecker {\n+    private static final String REPO = \"EssentialsX/Essentials\";\n+    private static final String BRANCH = \"2.x\";\n+\n+    private static final String versionIdentifier;\n+    private static final String versionBranch;\n+    private static final boolean devBuild;\n+    private static long lastFetchTime = 0;\n+    private static CompletableFuture<UpdateToken> pendingDevFuture;\n+    private static CompletableFuture<UpdateToken> pendingReleaseFuture;\n+    private static String latestRelease = null;\n+    private static UpdateToken cachedDev = null;\n+    private static UpdateToken cachedRelease = null;\n+\n+    static {\n+        String identifier = \"INVALID\";\n+        String branch = \"INVALID\";\n+        boolean dev = false;\n+        final List<String> versionStr = new BufferedReader(new InputStreamReader(Objects.requireNonNull(EssentialsUpdateChecker.class.getClassLoader().getResourceAsStream(\"release\")), StandardCharsets.UTF_8)).lines().collect(Collectors.toList());\n+        if (versionStr.size() == 2) {\n+            if (versionStr.get(0).matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+-dev\\\\+\\\\d\\\\d-[0-9a-f]{7,40}\")) {\n+                identifier = versionStr.get(0).split(\"-\")[2];\n+                dev = true;\n+            } else {\n+                identifier = versionStr.get(0);\n+            }\n+            branch = versionStr.get(1);\n+        }\n+        versionIdentifier = identifier;\n+        versionBranch = branch;\n+        devBuild = dev;\n+    }\n+\n+    private EssentialsUpdateChecker() {\n+    }\n+\n+    public static boolean isDevBuild() {\n+        return devBuild;\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getDevToken() {\n+        if (cachedDev == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingDevFuture != null) {\n+                return pendingDevFuture;\n+            }\n+            pendingDevFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                pendingDevFuture.complete(cachedDev = fetchDistance(BRANCH, getVersionIdentifier()));\n+                pendingDevFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+            return pendingDevFuture;\n+        }\n+        return CompletableFuture.completedFuture(cachedDev);\n+    }\n+\n+    public static CompletableFuture<UpdateToken> getReleaseToken() {\n+        if (cachedRelease == null || ((System.currentTimeMillis() - lastFetchTime) > 1800000L)) {\n+            if (pendingReleaseFuture != null) {\n+                return pendingReleaseFuture;\n+            }\n+            pendingReleaseFuture = new CompletableFuture<>();\n+            new Thread(() -> {\n+                catchBlock:\n+                try {\n+                    final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/releases/latest\").openConnection();\n+                    connection.connect();\n+\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                        // Locally built?\n+                        pendingReleaseFuture.complete(cachedRelease = new UpdateToken(BranchStatus.UNKNOWN));\n+                        break catchBlock;\n+                    }\n+                    if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                        // Github is down\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                        break catchBlock;\n+                    }\n+\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                        latestRelease = new Gson().fromJson(reader, JsonObject.class).get(\"tag_name\").getAsString();\n+                        pendingReleaseFuture.complete(cachedRelease = fetchDistance(latestRelease, getVersionIdentifier()));\n+                    } catch (JsonSyntaxException | NumberFormatException e) {\n+                        e.printStackTrace();\n+                        pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    pendingReleaseFuture.complete(new UpdateToken(BranchStatus.ERROR));\n+                }\n+                pendingReleaseFuture = null;\n+                lastFetchTime = System.currentTimeMillis();\n+            }).start();\n+        }\n+        return CompletableFuture.completedFuture(cachedRelease);\n+    }\n+\n+    public static String getVersionIdentifier() {\n+        return versionIdentifier;\n+    }\n+\n+    public static String getVersionBranch() {\n+        return versionBranch;\n+    }\n+\n+    public static String getBuildInfo() {\n+        return \"id:'\" + getVersionIdentifier() + \"' branch:'\" + getVersionBranch() + \"' isDev:\" + isDevBuild();\n+    }\n+\n+    public static String getLatestRelease() {\n+        return latestRelease;\n+    }\n+\n+    private static UpdateToken fetchDistance(final String head, final String hash) {\n+        try {\n+            final HttpURLConnection connection = (HttpURLConnection) new URL(\"https://api.github.com/repos/\" + REPO + \"/compare/\" + head + \"...\" + hash).openConnection();\n+            connection.connect();\n+\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+                // Locally built?\n+                return new UpdateToken(BranchStatus.UNKNOWN);\n+            }\n+            if (connection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n+                // Github is down\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {\n+                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);\n+                switch (obj.get(\"status\").getAsString()) {\n+                    case \"identical\": {\n+                        return new UpdateToken(BranchStatus.IDENTICAL, 0);\n+                    }\n+                    case \"ahead\": {\n+                        return new UpdateToken(BranchStatus.AHEAD, 0);\n+                    }\n+                    case \"behind\": {\n+                        return new UpdateToken(BranchStatus.BEHIND, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    case \"diverged\": {\n+                        return new UpdateToken(BranchStatus.DIVERGED, obj.get(\"behind_by\").getAsInt());\n+                    }\n+                    default: {\n+                        return new UpdateToken(BranchStatus.UNKNOWN);\n+                    }\n+                }\n+            } catch (JsonSyntaxException | NumberFormatException e) {\n+                e.printStackTrace();\n+                return new UpdateToken(BranchStatus.ERROR);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            return new UpdateToken(BranchStatus.ERROR);\n+        }\n+    }\n+\n+    public static String[] getVersionMethods(final boolean sendLatestMessage, final boolean verboseErrors) {\n+        if (EssentialsUpdateChecker.isDevBuild()) {\n+            final EssentialsUpdateChecker.UpdateToken devToken = EssentialsUpdateChecker.getDevToken().join();\n+            switch (devToken.getBranchStatus()) {\n+                case IDENTICAL: {\n+                    return sendLatestMessage ? new String[] {tl(\"versionDevLatest\")} : new String[] {};\n+                }\n+                case BEHIND: {\n+                    return new String[] {tl(\"versionDevBehind\", devToken.getDistance()),\n+                            tl(\"versionReleaseNewLink\", \"https://essentialsx.net/downloads.html\")};\n+                }\n+                case AHEAD:\n+                case DIVERGED: {\n+                    return new String[] {tl(devToken.getDistance() == 0 ? \"versionDevDivergedLatest\" : \"versionDevDiverged\", devToken.getDistance()),\n+                            tl(\"versionDevDivergedBranch\", EssentialsUpdateChecker.getVersionBranch()) };\n+                }\n+                case UNKNOWN: {\n+                    return verboseErrors ? new String[] {tl(\"versionCustom\", EssentialsUpdateChecker.getBuildInfo())} : new String[] {};\n+                }\n+                case ERROR: {\n+                    return new String[] {tl(verboseErrors ? \"versionError\" : \"versionErrorPlayer\", EssentialsUpdateChecker.getBuildInfo())};\n+                }\n+                default: {\n+                    return new String[] {};\n+                }\n+            }\n+        } else {\n+            final EssentialsUpdateChecker.UpdateToken releaseToken = EssentialsUpdateChecker.getReleaseToken().join();\n+            switch (releaseToken.getBranchStatus()) {\n+                case IDENTICAL: {\n+                    return sendLatestMessage ? new String[] {tl(\"versionReleaseLatest\")} : new String[] {};\n+                }\n+                case BEHIND: {\n+                    return new String[] {tl(\"versionReleaseNew\", EssentialsUpdateChecker.getLatestRelease()),\n+                            tl(\"versionReleaseNewLink\", \"https://essentialsx.net/downloads.html?branch=stable\")};\n+                }\n+                case DIVERGED: //WhatChamp\n+                case AHEAD: //monkaW?\n+                case UNKNOWN: {\n+                    return verboseErrors ? new String[] {tl(\"versionCustom\", EssentialsUpdateChecker.getBuildInfo())} : new String[] {};\n+                }\n+                case ERROR: {\n+                    return new String[] {tl(verboseErrors ? \"versionError\" : \"versionErrorPlayer\", EssentialsUpdateChecker.getBuildInfo())};\n+                }\n+                default: {\n+                    return new String[] {};\n+                }\n+            }\n+        }\n+    }\n+\n+    public static class UpdateToken {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9f8596e044f9c459d2bbd7d3a61ab527872af9"}, "originalPosition": 228}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e7b9b14fdea5169e0912b4931164793695df90b", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/3e7b9b14fdea5169e0912b4931164793695df90b", "committedDate": "2021-03-06T15:25:40Z", "message": "Don't return cached release info before actually fetching it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdca8f68b631c59d5f26e3a2a4e553f20014e78", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/dfdca8f68b631c59d5f26e3a2a4e553f20014e78", "committedDate": "2021-03-06T15:26:18Z", "message": "Don't implode when release file is missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3cbe8fde6dda5832ce92dc89b062a427f6b6490", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/e3cbe8fde6dda5832ce92dc89b062a427f6b6490", "committedDate": "2021-03-06T15:30:56Z", "message": "Rename UpdateToken to RemoteVersion\n\nwtf is a token jroy pls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b823e4dd02a5aaf52c57d6ad981e836a93a2ef7a", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/b823e4dd02a5aaf52c57d6ad981e836a93a2ef7a", "committedDate": "2021-03-06T15:48:50Z", "message": "Rename EssentialsUpdateChecker -> UpdateChecker; make non-static\n\nHoly mother of static abuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e454493c3db22269f2e00818aa1a702ec6e599", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/68e454493c3db22269f2e00818aa1a702ec6e599", "committedDate": "2021-03-06T15:58:32Z", "message": "Add config option for update checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945d1bbda888cbb8c23f35014b1efd4988f75446", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/945d1bbda888cbb8c23f35014b1efd4988f75446", "committedDate": "2021-03-06T16:04:56Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1NzY4MTAz", "url": "https://github.com/EssentialsX/Essentials/pull/3855#pullrequestreview-605768103", "createdAt": "2021-03-06T16:18:43Z", "commit": {"oid": "945d1bbda888cbb8c23f35014b1efd4988f75446"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a36f99945e09d68facb258e350f40e235fdf8a7", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/7a36f99945e09d68facb258e350f40e235fdf8a7", "committedDate": "2021-03-06T16:26:39Z", "message": "Add config option to config.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e44fd3be5479d3a4d09c6e2350a9e3d6c0b266", "author": {"user": {"login": "mdcfe", "name": "MD"}}, "url": "https://github.com/EssentialsX/Essentials/commit/c4e44fd3be5479d3a4d09c6e2350a9e3d6c0b266", "committedDate": "2021-03-06T16:26:59Z", "message": "Merge branch '2.x' into feature/update-checker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1NzY4NzE2", "url": "https://github.com/EssentialsX/Essentials/pull/3855#pullrequestreview-605768716", "createdAt": "2021-03-06T16:27:08Z", "commit": {"oid": "c4e44fd3be5479d3a4d09c6e2350a9e3d6c0b266"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}