{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NTc1ODYz", "number": 3239, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNTo0NFrOD6RPaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1ODowM1rOEFhmUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDI2NDcyOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandspawner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNTo0NFrOGSAq-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDoxMDowMFrOGSOdNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzODU1Mg==", "bodyText": "All of the Class and Field objects should be stored as a private static final field. Additionally, the Method objects should be stored as a MethodHandle.\nSee https://github.com/EssentialsX/Essentials/pull/3157/files#diff-d515c857ac85b710ac67491e3dd1779aR121-R148 for an example.", "url": "https://github.com/EssentialsX/Essentials/pull/3239#discussion_r421538552", "createdAt": "2020-05-07T14:15:44Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandspawner.java", "diffHunk": "@@ -57,8 +62,31 @@ protected void run(final Server server, final User user, final String commandLab\n         final Trade charge = new Trade(\"spawner-\" + mob.name.toLowerCase(Locale.ENGLISH), ess);\n         charge.isAffordableFor(user);\n         try {\n-            CreatureSpawner spawner = (CreatureSpawner) target.getBlock().getState();\n+            Block block = target.getBlock();\n+            CreatureSpawner spawner = (CreatureSpawner) block.getState();\n             spawner.setSpawnedType(mob.getType());\n+            if (delay > 0) {\n+                if (VersionUtil.getServerBukkitVersion().isHigherThanOrEqualTo(VersionUtil.v1_12_2_R01)) {\n+                    spawner.setMinSpawnDelay(0);\n+                    spawner.setMaxSpawnDelay(Integer.MAX_VALUE);\n+                    spawner.setMinSpawnDelay(delay);\n+                    spawner.setMaxSpawnDelay(delay);\n+                } else {\n+                    Class<?> craftWorld = ReflUtil.getOBCClass(\"CraftWorld\");\n+                    Class<?> tileEntityMobSpawner = ReflUtil.getNMSClass(\"TileEntityMobSpawner\");\n+                    Class<?> mobSpawnerAbstract = ReflUtil.getNMSClass(\"MobSpawnerAbstract\");\n+                    Method getSpawner = tileEntityMobSpawner.getDeclaredMethod(\"getSpawner\");\n+                    Method getTileEntityAt = craftWorld.getDeclaredMethod(\"getTileEntityAt\", int.class, int.class, int.class);\n+                    Object craftTileEntity = getTileEntityAt.invoke(block.getWorld(), block.getX(), block.getY(), block.getZ());\n+                    Object nmsSpawner = getSpawner.invoke(craftTileEntity);\n+                    Field minSpawnDelay = ReflUtil.getFieldCached(mobSpawnerAbstract, \"minSpawnDelay\");\n+                    Field maxSpawnDelay = ReflUtil.getFieldCached(mobSpawnerAbstract, \"maxSpawnDelay\");\n+                    if (minSpawnDelay != null && maxSpawnDelay != null) {\n+                        minSpawnDelay.setInt(nmsSpawner, delay);\n+                        maxSpawnDelay.setInt(nmsSpawner, delay);\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c97f0fe92a8204c7e6dbeedc88d48fa428394b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2NDQwNA==", "bodyText": "I overlooked this because I noticed ReflUtil already does a lot of the caching, but this is certainly a good idea. Also, didn't know about MethodHandle. From a quick google search, it looks like the main benefit there is it'll be a little faster to call than Method? I'll probably be refactoring this into it's own provider once I get some clarification from MD on how I should do that, so the NMS code won't just awkwardly be sitting inside Commandspawner.", "url": "https://github.com/EssentialsX/Essentials/pull/3239#discussion_r421764404", "createdAt": "2020-05-07T20:10:00Z", "author": {"login": "pop4959"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandspawner.java", "diffHunk": "@@ -57,8 +62,31 @@ protected void run(final Server server, final User user, final String commandLab\n         final Trade charge = new Trade(\"spawner-\" + mob.name.toLowerCase(Locale.ENGLISH), ess);\n         charge.isAffordableFor(user);\n         try {\n-            CreatureSpawner spawner = (CreatureSpawner) target.getBlock().getState();\n+            Block block = target.getBlock();\n+            CreatureSpawner spawner = (CreatureSpawner) block.getState();\n             spawner.setSpawnedType(mob.getType());\n+            if (delay > 0) {\n+                if (VersionUtil.getServerBukkitVersion().isHigherThanOrEqualTo(VersionUtil.v1_12_2_R01)) {\n+                    spawner.setMinSpawnDelay(0);\n+                    spawner.setMaxSpawnDelay(Integer.MAX_VALUE);\n+                    spawner.setMinSpawnDelay(delay);\n+                    spawner.setMaxSpawnDelay(delay);\n+                } else {\n+                    Class<?> craftWorld = ReflUtil.getOBCClass(\"CraftWorld\");\n+                    Class<?> tileEntityMobSpawner = ReflUtil.getNMSClass(\"TileEntityMobSpawner\");\n+                    Class<?> mobSpawnerAbstract = ReflUtil.getNMSClass(\"MobSpawnerAbstract\");\n+                    Method getSpawner = tileEntityMobSpawner.getDeclaredMethod(\"getSpawner\");\n+                    Method getTileEntityAt = craftWorld.getDeclaredMethod(\"getTileEntityAt\", int.class, int.class, int.class);\n+                    Object craftTileEntity = getTileEntityAt.invoke(block.getWorld(), block.getX(), block.getY(), block.getZ());\n+                    Object nmsSpawner = getSpawner.invoke(craftTileEntity);\n+                    Field minSpawnDelay = ReflUtil.getFieldCached(mobSpawnerAbstract, \"minSpawnDelay\");\n+                    Field maxSpawnDelay = ReflUtil.getFieldCached(mobSpawnerAbstract, \"maxSpawnDelay\");\n+                    if (minSpawnDelay != null && maxSpawnDelay != null) {\n+                        minSpawnDelay.setInt(nmsSpawner, delay);\n+                        maxSpawnDelay.setInt(nmsSpawner, delay);\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzODU1Mg=="}, "originalCommit": {"oid": "b0c97f0fe92a8204c7e6dbeedc88d48fa428394b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI4ODE5OnYy", "diffSide": "RIGHT", "path": "nms/UpdatedMetaProvider/src/net/ess3/nms/updatedmeta/BukkitSpawnerBlockProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1ODowM1rOGjxA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxMjoxOFrOGkFvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1NjQwOA==", "bodyText": "tryProvider should be implemented by the abstract provider class and should attempt to call one of the provider's methods. Otherwise we don't know for certain that this provider actually does what it's supposed to in a consistent fashion.", "url": "https://github.com/EssentialsX/Essentials/pull/3239#discussion_r440156408", "createdAt": "2020-06-15T12:58:03Z", "author": {"login": "mdcfe"}, "path": "nms/UpdatedMetaProvider/src/net/ess3/nms/updatedmeta/BukkitSpawnerBlockProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.ess3.nms.updatedmeta;\n+\n+import net.ess3.nms.SpawnerBlockProvider;\n+import org.bukkit.block.CreatureSpawner;\n+\n+public class BukkitSpawnerBlockProvider extends SpawnerBlockProvider {\n+    @Override\n+    public void setMaxSpawnDelay(CreatureSpawner spawner, int delay) {\n+        spawner.setMaxSpawnDelay(delay);\n+    }\n+\n+    @Override\n+    public void setMinSpawnDelay(CreatureSpawner spawner, int delay) {\n+        spawner.setMinSpawnDelay(delay);\n+    }\n+\n+    @Override\n+    public boolean tryProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b090fc982fe0270f0e13d6c8e3b9dabe9455f4d5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NjAzNw==", "bodyText": "Difficult to do in this circumstance, since we do not have a CreatureSpawner instance to call the provider's methods on. For the other providers, it's easier to do this since it only uses ItemStack, EntityType and Material classes, which are enums or easily instantiated. That's why I opted to implement tryProvider in the concrete class rather than in the abstract one. It's definitely different, but I don't think it's bad. The way it's set up, if the methods required from the API do not exist, we safely assume that this is MC 1.8-1.11, where we need NMS (old versions are not going to change). Otherwise, we can rely on the API (the implementation may change, but it should not concern us).", "url": "https://github.com/EssentialsX/Essentials/pull/3239#discussion_r440496037", "createdAt": "2020-06-15T23:12:18Z", "author": {"login": "pop4959"}, "path": "nms/UpdatedMetaProvider/src/net/ess3/nms/updatedmeta/BukkitSpawnerBlockProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.ess3.nms.updatedmeta;\n+\n+import net.ess3.nms.SpawnerBlockProvider;\n+import org.bukkit.block.CreatureSpawner;\n+\n+public class BukkitSpawnerBlockProvider extends SpawnerBlockProvider {\n+    @Override\n+    public void setMaxSpawnDelay(CreatureSpawner spawner, int delay) {\n+        spawner.setMaxSpawnDelay(delay);\n+    }\n+\n+    @Override\n+    public void setMinSpawnDelay(CreatureSpawner spawner, int delay) {\n+        spawner.setMinSpawnDelay(delay);\n+    }\n+\n+    @Override\n+    public boolean tryProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1NjQwOA=="}, "originalCommit": {"oid": "b090fc982fe0270f0e13d6c8e3b9dabe9455f4d5"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4670, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}