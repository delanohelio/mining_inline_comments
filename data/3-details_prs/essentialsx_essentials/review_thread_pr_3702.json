{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MzA3NTEy", "number": 3702, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzowNDo1NlrOEqgpzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMTo1NTowMVrOFadK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDEwNjM4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/commands/Commandbalancetop.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzowNDo1NlrOHcwmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNzo0MFrOHcx5xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxODQxMQ==", "bodyText": "Why remove final here?", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r499918411", "createdAt": "2020-10-05T23:04:56Z", "author": {"login": "mbax"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandbalancetop.java", "diffHunk": "@@ -102,38 +98,17 @@ public void run() {\n             lock.writeLock().lock();\n             try {\n                 if (force || cacheage <= System.currentTimeMillis() - CACHETIME) {\n-                    cache.getLines().clear();\n-                    final Map<String, BigDecimal> balances = new HashMap<>();\n-                    BigDecimal totalMoney = BigDecimal.ZERO;\n                     if (ess.getSettings().isEcoDisabled()) {\n                         if (ess.getSettings().isDebug()) {\n                             ess.getLogger().info(\"Internal economy functions disabled, aborting baltop.\");\n                         }\n                     } else {\n-                        for (final UUID u : ess.getUserMap().getAllUniqueUsers()) {\n-                            final User user = ess.getUserMap().getUser(u);\n-                            if (user != null) {\n-                                if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n-                                    // Don't list NPCs in output\n-                                    continue;\n-                                }\n-                                if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n-                                    final BigDecimal userMoney = user.getMoney();\n-                                    user.updateMoneyCache(userMoney);\n-                                    totalMoney = totalMoney.add(userMoney);\n-                                    final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n-                                    balances.put(name, userMoney);\n-                                }\n-                            }\n-                        }\n+                        viewer.getSender().calculateBalanceTopMap(ess);\n                     }\n \n-                    final List<Map.Entry<String, BigDecimal>> sortedEntries = new ArrayList<>(balances.entrySet());\n-                    sortedEntries.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n-\n-                    cache.getLines().add(tl(\"serverTotal\", NumberUtil.displayCurrency(totalMoney, ess)));\n+                    cache.getLines().add(tl(\"serverTotal\", NumberUtil.displayCurrency(ess.getBalanceTop().getBalanceTopTotal(), ess)));\n                     int pos = 1;\n-                    for (final Map.Entry<String, BigDecimal> entry : sortedEntries) {\n+                    for (Map.Entry<String, BigDecimal> entry : ess.getBalanceTop().getBalanceTopCache()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ecde5df6b5632b7575774c27efa7adce8484964"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTc4MQ==", "bodyText": "conflict hell", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r499939781", "createdAt": "2020-10-06T00:17:40Z", "author": {"login": "JRoy"}, "path": "Essentials/src/com/earth2me/essentials/commands/Commandbalancetop.java", "diffHunk": "@@ -102,38 +98,17 @@ public void run() {\n             lock.writeLock().lock();\n             try {\n                 if (force || cacheage <= System.currentTimeMillis() - CACHETIME) {\n-                    cache.getLines().clear();\n-                    final Map<String, BigDecimal> balances = new HashMap<>();\n-                    BigDecimal totalMoney = BigDecimal.ZERO;\n                     if (ess.getSettings().isEcoDisabled()) {\n                         if (ess.getSettings().isDebug()) {\n                             ess.getLogger().info(\"Internal economy functions disabled, aborting baltop.\");\n                         }\n                     } else {\n-                        for (final UUID u : ess.getUserMap().getAllUniqueUsers()) {\n-                            final User user = ess.getUserMap().getUser(u);\n-                            if (user != null) {\n-                                if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n-                                    // Don't list NPCs in output\n-                                    continue;\n-                                }\n-                                if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n-                                    final BigDecimal userMoney = user.getMoney();\n-                                    user.updateMoneyCache(userMoney);\n-                                    totalMoney = totalMoney.add(userMoney);\n-                                    final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n-                                    balances.put(name, userMoney);\n-                                }\n-                            }\n-                        }\n+                        viewer.getSender().calculateBalanceTopMap(ess);\n                     }\n \n-                    final List<Map.Entry<String, BigDecimal>> sortedEntries = new ArrayList<>(balances.entrySet());\n-                    sortedEntries.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n-\n-                    cache.getLines().add(tl(\"serverTotal\", NumberUtil.displayCurrency(totalMoney, ess)));\n+                    cache.getLines().add(tl(\"serverTotal\", NumberUtil.displayCurrency(ess.getBalanceTop().getBalanceTopTotal(), ess)));\n                     int pos = 1;\n-                    for (final Map.Entry<String, BigDecimal> entry : sortedEntries) {\n+                    for (Map.Entry<String, BigDecimal> entry : ess.getBalanceTop().getBalanceTopCache()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxODQxMQ=="}, "originalCommit": {"oid": "4ecde5df6b5632b7575774c27efa7adce8484964"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDIyNDMzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDowMzo0NFrOHcxqpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDowMzo0NFrOHcxqpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzNTkwOQ==", "bodyText": "Should there be a linebreak before the @return here?", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r499935909", "createdAt": "2020-10-06T00:03:44Z", "author": {"login": "mbax"}, "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTop {\n+    private final transient IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();\n+    private transient BigDecimal balanceTopTotal = BigDecimal.ZERO;\n+\n+    public BalanceTop(IEssentials ess) {\n+        this.ess = ess;\n+        calculateBalanceTopMap();\n+    }\n+\n+    protected void calculateBalanceTopMap() {\n+        final Map<String, BigDecimal> map = new HashMap<>();\n+        for (UUID u : ess.getUserMap().getAllUniqueUsers()) {\n+            final User user = ess.getUserMap().getUser(u);\n+            if (user != null) {\n+                if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n+                    // Don't list NPCs in output\n+                    continue;\n+                }\n+                if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n+                    final BigDecimal userMoney = user.getMoney();\n+                    user.updateMoneyCache(userMoney);\n+                    balanceTopTotal = balanceTopTotal.add(userMoney);\n+                    final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n+                    map.put(name, userMoney);\n+                }\n+            }\n+        }\n+        topCache = new ArrayList<>(map.entrySet());\n+        topCache.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n+    }\n+\n+    /**\n+     * Returns a future which will be completed with the latest calculated balance top map.\n+     * @return A future with the latest balance top map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ecde5df6b5632b7575774c27efa7adce8484964"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY1MTk1OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozMDoxNVrOHm0kxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozMDoxNVrOHm0kxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2OTMxOA==", "bodyText": "IMO this should be private to BalanceTop, and not exposed to plugins or /balancetop - both should wait on the async method.", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r510469318", "createdAt": "2020-10-22T21:30:15Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTop {\n+    private final transient IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();\n+    private transient BigDecimal balanceTopTotal = BigDecimal.ZERO;\n+\n+    public BalanceTop(IEssentials ess) {\n+        this.ess = ess;\n+        calculateBalanceTopMap();\n+    }\n+\n+    protected void calculateBalanceTopMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be83245f6cebb1a2a97cb58c106ba5a9d7df1c22"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY2Njg0OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNDo0NVrOHm0tpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNDo0NVrOHm0tpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MTU4OQ==", "bodyText": "Returning the results here makes it less clear to API callers what this does. I'd suggest that this method wraps calculateBalanceTopMap and returns a CompletableFuture<Void> that completes when done, then plugins can access the newly-updated cached baltop map from getBalanceTopCache.", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r510471589", "createdAt": "2020-10-22T21:34:45Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTop {\n+    private final transient IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();\n+    private transient BigDecimal balanceTopTotal = BigDecimal.ZERO;\n+\n+    public BalanceTop(IEssentials ess) {\n+        this.ess = ess;\n+        calculateBalanceTopMap();\n+    }\n+\n+    protected void calculateBalanceTopMap() {\n+        final Map<String, BigDecimal> map = new HashMap<>();\n+        for (UUID u : ess.getUserMap().getAllUniqueUsers()) {\n+            final User user = ess.getUserMap().getUser(u);\n+            if (user != null) {\n+                if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n+                    // Don't list NPCs in output\n+                    continue;\n+                }\n+                if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n+                    final BigDecimal userMoney = user.getMoney();\n+                    user.updateMoneyCache(userMoney);\n+                    balanceTopTotal = balanceTopTotal.add(userMoney);\n+                    final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n+                    map.put(name, userMoney);\n+                }\n+            }\n+        }\n+        topCache = new ArrayList<>(map.entrySet());\n+        topCache.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n+    }\n+\n+    /**\n+     * Returns a future which will be completed with the latest calculated balance top map.\n+     *\n+     * @return A future with the latest balance top map.\n+     */\n+    public CompletableFuture<List<Map.Entry<String, BigDecimal>>> calculateBalanceTopMapAsync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be83245f6cebb1a2a97cb58c106ba5a9d7df1c22"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY3MDc5OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNTo1N1rOHm0v7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNTo1N1rOHm0v7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MjE3NA==", "bodyText": "Consider adding a timestamp that stores the last update time, so that plugins and /baltop can decide to update the cache based on when the last update occurred?", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r510472174", "createdAt": "2020-10-22T21:35:57Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/BalanceTop.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTop {\n+    private final transient IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();\n+    private transient BigDecimal balanceTopTotal = BigDecimal.ZERO;\n+\n+    public BalanceTop(IEssentials ess) {\n+        this.ess = ess;\n+        calculateBalanceTopMap();\n+    }\n+\n+    protected void calculateBalanceTopMap() {\n+        final Map<String, BigDecimal> map = new HashMap<>();\n+        for (UUID u : ess.getUserMap().getAllUniqueUsers()) {\n+            final User user = ess.getUserMap().getUser(u);\n+            if (user != null) {\n+                if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n+                    // Don't list NPCs in output\n+                    continue;\n+                }\n+                if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n+                    final BigDecimal userMoney = user.getMoney();\n+                    user.updateMoneyCache(userMoney);\n+                    balanceTopTotal = balanceTopTotal.add(userMoney);\n+                    final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n+                    map.put(name, userMoney);\n+                }\n+            }\n+        }\n+        topCache = new ArrayList<>(map.entrySet());\n+        topCache.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n+    }\n+\n+    /**\n+     * Returns a future which will be completed with the latest calculated balance top map.\n+     *\n+     * @return A future with the latest balance top map.\n+     */\n+    public CompletableFuture<List<Map.Entry<String, BigDecimal>>> calculateBalanceTopMapAsync() {\n+        final CompletableFuture<List<Map.Entry<String, BigDecimal>>> future = new CompletableFuture<>();\n+        ess.runTaskAsynchronously(() -> {\n+            final Map<String, BigDecimal> map = new HashMap<>();\n+            final List<Map.Entry<String, BigDecimal>> returned;\n+            for (UUID u : ess.getUserMap().getAllUniqueUsers()) {\n+                final User user = ess.getUserMap().getUser(u);\n+                if (user != null) {\n+                    if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n+                        // Don't list NPCs in output\n+                        continue;\n+                    }\n+                    if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n+                        final BigDecimal userMoney = user.getMoney();\n+                        user.updateMoneyCache(userMoney);\n+                        final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n+                        map.put(name, userMoney);\n+                    }\n+                }\n+            }\n+            returned = new ArrayList<>(map.entrySet());\n+            returned.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n+            future.complete(returned);\n+        });\n+        return future;\n+    }\n+\n+    /**\n+     * There is no guarantee the returned cache is up to date. The balancetop command is directly responsible for updating\n+     * this cache and does so every two minutes (if executed). See {@link BalanceTop#calculateBalanceTopMapAsync()} if\n+     * you need an up-to-date balance map.\n+     *\n+     * @see BalanceTop#calculateBalanceTopMapAsync()\n+     * @return The balance top cache.\n+     */\n+    public List<Map.Entry<String, BigDecimal>> getBalanceTopCache() {\n+        return Collections.unmodifiableList(topCache);\n+    }\n+\n+    public BigDecimal getBalanceTopTotal() {\n+        return balanceTopTotal;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be83245f6cebb1a2a97cb58c106ba5a9d7df1c22"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY3MjA0OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/CommandSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNjoxOFrOHm0wqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNjoxOFrOHm0wqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MjM2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                /**\n          \n          \n            \n                 * Helper method to access protected method {@link BalanceTop#calculateBalanceTopMap()} due to its dangerous nature.\n          \n          \n            \n                 */\n          \n          \n            \n                public void calculateBalanceTopMap(IEssentials ess) {\n          \n          \n            \n                    ess.getBalanceTop().calculateBalanceTopMap();\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThis is leaking way too far beyond where it should exist", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r510472363", "createdAt": "2020-10-22T21:36:18Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/CommandSource.java", "diffHunk": "@@ -53,4 +53,11 @@ public String getSelfSelector() {\n     public String getDisplayName() {\n         return sender instanceof Player ? getPlayer().getDisplayName() : getSender().getName();\n     }\n+\n+    /**\n+     * Helper method to access protected method {@link BalanceTop#calculateBalanceTopMap()} due to its dangerous nature.\n+     */\n+    public void calculateBalanceTopMap(IEssentials ess) {\n+        ess.getBalanceTop().calculateBalanceTopMap();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be83245f6cebb1a2a97cb58c106ba5a9d7df1c22"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY3MzE1OnYy", "diffSide": "RIGHT", "path": "Essentials/src/com/earth2me/essentials/Essentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNjo0MVrOHm0xZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNjo0MVrOHm0xZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MjU0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            execTimer.mark(\"Init(Balancetop)\");\n          \n          \n            \n                            execTimer.mark(\"Init(BalanceTop)\");", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r510472549", "createdAt": "2020-10-22T21:36:41Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -232,6 +234,9 @@ public void onEnable() {\n                 confList.add(userMap);\n                 execTimer.mark(\"Init(Usermap)\");\n \n+                balanceTop = new BalanceTop(this);\n+                execTimer.mark(\"Init(Balancetop)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be83245f6cebb1a2a97cb58c106ba5a9d7df1c22"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ1NjM4OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTowOTozNFrOH9uQFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTowOTozNFrOH9uQFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4Mjk2Ng==", "bodyText": "Best to return BalanceTop here so people using Essentials will import the API class rather than impl", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r534482966", "createdAt": "2020-12-02T21:09:34Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -947,6 +952,11 @@ public UserMap getUserMap() {\n         return userMap;\n     }\n \n+    @Override\n+    public BalanceTopImpl getBalanceTop() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeeb7563de6cb7b0323b9412ea0bafbc33dd33e9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ1ODI3OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/net/essentialsx/api/v2/services/BalanceTop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMDowOFrOH9uRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMDowOFrOH9uRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r534483253", "createdAt": "2020-12-02T21:10:08Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/net/essentialsx/api/v2/services/BalanceTop.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package net.essentialsx.api.v2.services;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class which provides numerous methods to interact with Essentials' balance top calculations.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeeb7563de6cb7b0323b9412ea0bafbc33dd33e9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDI4OTY2OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandbalancetop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxMDoxNFrOH_VDuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxMDoxNFrOH_VDuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //If there are less than 50 users in our usermap, there is no need to display a warning as these calculations should be done quickly\n          \n          \n            \n                    // If there are less than 50 users in our usermap, there is no need to display a warning as these calculations should be done quickly", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r536167353", "createdAt": "2020-12-04T15:10:14Z", "author": {"login": "Proximyst"}, "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandbalancetop.java", "diffHunk": "@@ -54,25 +48,17 @@ protected void run(final Server server, final CommandSource sender, final String\n             }\n         }\n \n-        if (!force && lock.readLock().tryLock()) {\n-            try {\n-                if (cacheage > System.currentTimeMillis() - CACHETIME) {\n-                    outputCache(sender, page);\n-                    return;\n-                }\n-                if (ess.getUserMap().getUniqueUsers() > MINUSERS) {\n-                    sender.sendMessage(tl(\"orderBalances\", ess.getUserMap().getUniqueUsers()));\n-                }\n-            } finally {\n-                lock.readLock().unlock();\n-            }\n-        } else {\n-            if (ess.getUserMap().getUniqueUsers() > MINUSERS) {\n-                sender.sendMessage(tl(\"orderBalances\", ess.getUserMap().getUniqueUsers()));\n-            }\n+        if (!force && ess.getBalanceTop().getCacheAge() > System.currentTimeMillis() - CACHETIME) {\n+            outputCache(sender, page);\n+            return;\n+        }\n+\n+        //If there are less than 50 users in our usermap, there is no need to display a warning as these calculations should be done quickly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce7c89e4ab8eccf032935f4559ad8c75f1231c3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDI5MDM5OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/BalanceTopImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxMDoyNFrOH_VEKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTozMDowOFrOH_V8Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzQ2NA==", "bodyText": "Guava anyone ?", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r536167464", "createdAt": "2020-12-04T15:10:24Z", "author": {"login": "Proximyst"}, "path": "Essentials/src/main/java/com/earth2me/essentials/BalanceTopImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+import net.essentialsx.api.v2.services.BalanceTop;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTopImpl implements BalanceTop {\n+    private final IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce7c89e4ab8eccf032935f4559ad8c75f1231c3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MDExMw==", "bodyText": "absolutely not", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r536170113", "createdAt": "2020-12-04T15:14:08Z", "author": {"login": "TehBrian"}, "path": "Essentials/src/main/java/com/earth2me/essentials/BalanceTopImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+import net.essentialsx.api.v2.services.BalanceTop;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTopImpl implements BalanceTop {\n+    private final IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzQ2NA=="}, "originalCommit": {"oid": "3ce7c89e4ab8eccf032935f4559ad8c75f1231c3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MTg1NA==", "bodyText": "don't need any of guava's cache features. the whole list is thrown out periodically anyway.", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r536181854", "createdAt": "2020-12-04T15:30:08Z", "author": {"login": "JRoy"}, "path": "Essentials/src/main/java/com/earth2me/essentials/BalanceTopImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+import net.essentialsx.api.v2.services.BalanceTop;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTopImpl implements BalanceTop {\n+    private final IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzQ2NA=="}, "originalCommit": {"oid": "3ce7c89e4ab8eccf032935f4559ad8c75f1231c3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDMyMzkzOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxNzoxMVrOH_VXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyMjoxMlrOH_Vlpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MjQ0MA==", "bodyText": "shouldn't the type be the interface and not the impl?", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r536172440", "createdAt": "2020-12-04T15:17:11Z", "author": {"login": "TehBrian"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -125,6 +126,7 @@\n     private transient PermissionsHandler permissionsHandler;\n     private transient AlternativeCommandsHandler alternativeCommandsHandler;\n     private transient UserMap userMap;\n+    private transient BalanceTopImpl balanceTop;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5c7d71a74c18092ece60aac1728476d1630a10"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3NjAzOQ==", "bodyText": "Essentials is an impli class itself so it doesn't really matter. I'll keep it in case we need to use any impli methods in the Ess class itself.", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r536176039", "createdAt": "2020-12-04T15:22:12Z", "author": {"login": "JRoy"}, "path": "Essentials/src/main/java/com/earth2me/essentials/Essentials.java", "diffHunk": "@@ -125,6 +126,7 @@\n     private transient PermissionsHandler permissionsHandler;\n     private transient AlternativeCommandsHandler alternativeCommandsHandler;\n     private transient UserMap userMap;\n+    private transient BalanceTopImpl balanceTop;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MjQ0MA=="}, "originalCommit": {"oid": "ff5c7d71a74c18092ece60aac1728476d1630a10"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjYyODcxOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/BalanceTopImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxMTo1N1rOIWHcrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxMTo1N1rOIWHcrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2MTYxNQ==", "bodyText": "LinkedHashMap is probably what we're after?", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r560061615", "createdAt": "2021-01-19T10:11:57Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/BalanceTopImpl.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.earth2me.essentials;\n+\n+import net.ess3.api.IEssentials;\n+import net.essentialsx.api.v2.services.BalanceTop;\n+import org.bukkit.plugin.ServicePriority;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class BalanceTopImpl implements BalanceTop {\n+    private final IEssentials ess;\n+    private List<Map.Entry<String, BigDecimal>> topCache = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ebab3364da3825a06f7c0800a5dc39dd5ec0b1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjY0NzU2OnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/net/essentialsx/api/v2/services/BalanceTop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxNjozMVrOIWHobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMDoxNjozMVrOIWHobg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2NDYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<Map.Entry<String, BigDecimal>> getBalanceTopCache();\n          \n          \n            \n                LinkedHashMap<String, BigDecimal> getBalanceTopCache();", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r560064622", "createdAt": "2021-01-19T10:16:31Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/net/essentialsx/api/v2/services/BalanceTop.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package net.essentialsx.api.v2.services;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A class which provides numerous methods to interact with Essentials' balance top calculations.\n+ * <p>\n+ * Note: Implementations of this class should be thread-safe and thus do not need to be called from the server thread.\n+ */\n+public interface BalanceTop extends EssentialsService {\n+\n+    /**\n+     * Re-calculates the balance top cache asynchronously.\n+     *\n+     * This method will return a {@link CompletableFuture CompletableFuture&lt;Void&gt;} which\n+     * will be completed upon the recalculation of the balance top map.\n+     * After which you should run {@link BalanceTop#getBalanceTopCache()}\n+     * to get the newly updated cache\n+     *\n+     * @return A future which completes after the balance top cache has been calculated.\n+     */\n+    CompletableFuture<Void> calculateBalanceTopMapAsync();\n+\n+    /**\n+     * Gets the balance top cache or an empty list if one has not been calculated yet. The balance top cache is a list\n+     * of {@link Map.Entry} objects which map a user's display name to their balance. The returned list is sorted by\n+     * greatest to least wealth.\n+     *\n+     * There is no guarantee the returned cache is up to date. The balancetop command is directly responsible for updating\n+     * this cache and does so every two minutes (if executed). See {@link BalanceTop#calculateBalanceTopMapAsync()} to\n+     * manually update this cache yourself.\n+     *\n+     * @see BalanceTop#calculateBalanceTopMapAsync()\n+     * @return The balance top cache.\n+     */\n+    List<Map.Entry<String, BigDecimal>> getBalanceTopCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ebab3364da3825a06f7c0800a5dc39dd5ec0b1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzMjg1MjAyOnYy", "diffSide": "RIGHT", "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandbalancetop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMTo1NTowMVrOIlcy7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMTo1NTowMVrOIlcy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjE0MDAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        future.thenAccept(unused -> {\n          \n          \n            \n                        future.thenRun(() -> {", "url": "https://github.com/EssentialsX/Essentials/pull/3702#discussion_r576140012", "createdAt": "2021-02-15T11:55:01Z", "author": {"login": "mdcfe"}, "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandbalancetop.java", "diffHunk": "@@ -88,89 +75,42 @@ protected void run(final Server server, final CommandSource sender, final String\n         }\n     }\n \n-    private class Calculator implements Runnable {\n-        private final transient Viewer viewer;\n-        private final boolean force;\n-\n-        Calculator(final Viewer viewer, final boolean force) {\n-            this.viewer = viewer;\n-            this.force = force;\n-        }\n-\n-        @Override\n-        public void run() {\n-            lock.writeLock().lock();\n-            try {\n-                if (force || cacheage <= System.currentTimeMillis() - CACHETIME) {\n-                    cache.getLines().clear();\n-                    final Map<String, BigDecimal> balances = new HashMap<>();\n-                    BigDecimal totalMoney = BigDecimal.ZERO;\n-                    if (ess.getSettings().isEcoDisabled()) {\n-                        if (ess.getSettings().isDebug()) {\n-                            ess.getLogger().info(\"Internal economy functions disabled, aborting baltop.\");\n-                        }\n-                    } else {\n-                        for (final UUID u : ess.getUserMap().getAllUniqueUsers()) {\n-                            final User user = ess.getUserMap().getUser(u);\n-                            if (user != null) {\n-                                if (!ess.getSettings().isNpcsInBalanceRanking() && user.isNPC()) {\n-                                    // Don't list NPCs in output\n-                                    continue;\n-                                }\n-                                if (!user.isAuthorized(\"essentials.balancetop.exclude\")) {\n-                                    final BigDecimal userMoney = user.getMoney();\n-                                    user.updateMoneyCache(userMoney);\n-                                    totalMoney = totalMoney.add(userMoney);\n-                                    final String name = user.isHidden() ? user.getName() : user.getDisplayName();\n-                                    balances.put(name, userMoney);\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    final List<Map.Entry<String, BigDecimal>> sortedEntries = new ArrayList<>(balances.entrySet());\n-                    sortedEntries.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));\n-\n-                    cache.getLines().add(tl(\"serverTotal\", NumberUtil.displayCurrency(totalMoney, ess)));\n-                    int pos = 1;\n-                    for (final Map.Entry<String, BigDecimal> entry : sortedEntries) {\n-                        cache.getLines().add(tl(\"balanceTopLine\", pos, entry.getKey(), NumberUtil.displayCurrency(entry.getValue(), ess)));\n-                        pos++;\n-                    }\n-                    cacheage = System.currentTimeMillis();\n-                }\n-            } finally {\n-                lock.writeLock().unlock();\n-            }\n-            ess.runTaskAsynchronously(viewer);\n-        }\n-    }\n-\n     private class Viewer implements Runnable {\n         private final transient CommandSource sender;\n         private final transient int page;\n         private final transient boolean force;\n-        private final transient String commandLabel;\n \n-        Viewer(final CommandSource sender, final String commandLabel, final int page, final boolean force) {\n+        Viewer(final CommandSource sender, final int page, final boolean force) {\n             this.sender = sender;\n             this.page = page;\n             this.force = force;\n-            this.commandLabel = commandLabel;\n         }\n \n         @Override\n         public void run() {\n-            lock.readLock().lock();\n-            try {\n-                if (!force && cacheage > System.currentTimeMillis() - CACHETIME) {\n-                    outputCache(sender, page);\n-                    return;\n+            if (ess.getSettings().isEcoDisabled()) {\n+                if (ess.getSettings().isDebug()) {\n+                    ess.getLogger().info(\"Internal economy functions disabled, aborting baltop.\");\n                 }\n-            } finally {\n-                lock.readLock().unlock();\n+                return;\n             }\n-            ess.runTaskAsynchronously(new Calculator(new Viewer(sender, commandLabel, page, false), force));\n+\n+            final boolean fresh = force || ess.getBalanceTop().isCacheLocked() || ess.getBalanceTop().getCacheAge() <= System.currentTimeMillis() - CACHETIME;\n+            final CompletableFuture<Void> future = fresh ? ess.getBalanceTop().calculateBalanceTopMapAsync() : CompletableFuture.completedFuture(null);\n+            future.thenAccept(unused -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c64cf52a9eff6c7ac4419a5c919be4d1b80bd2d"}, "originalPosition": 176}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}