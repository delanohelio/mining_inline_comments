{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyODI0NTQx", "number": 4967, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMDo1MVrOE0twZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTowMTozNlrOE3DwFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzExMDc5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMDo1MVrOHslneQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowODowM1rOHtVWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ==", "bodyText": "I think this is a good starting point as a check. Is there something else, in addition to the request parameter check, that can be done to detect the request as a password-reset? Perhaps something in the RequestContext that track this execution as \"this is a password reset\"?\nFor example, a password-reset request should be:\n\nThere is a token in the request\nIt's valid token, has not been used, has not expired, etc.\nOnly then, when all those checks pass should SSO be disabled.\n\nI suspect those checks are already part of the flow, (you should not have to repeat them here) and their result is tracked in RequestContext, or should be if not already.\nThere is no danger in this solution per se; I'd like to see if there is a way we could harden the check, and not allow bypassing of SSO only with a simple request parameter (that anyone any way can supply with any value).", "url": "https://github.com/apereo/cas/pull/4967#discussion_r516515705", "createdAt": "2020-11-03T09:10:51Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzNjIwNw==", "bodyText": "Thanks for the review.\nThere is an action wich is verifying if there is a token in the request and if it contains an username, it's called InitPasswordResetAction and it's called in the pswdFlow subflow.\nThere is another one which is called just after the security question view: verifyPasswordResetRequestAction which is verifying if the token is valid.\nI guess i could try to look in the requestContext if we are in the view casMustChangePassView or VerifyPasswordResetRequestAction. Will try it.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r516536207", "createdAt": "2020-11-03T09:44:35Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzODUzNw==", "bodyText": "Yes, VerifyPasswordResetRequestAction is probably the best spot. It should be tracking the result of the token validation, or if not, you could add something to the request context that tracks that, and then use that in the strategy for disabling sso.\nThe trick is to make sure that action and its result are executed and tracked before the sso strategy runs, so the result can be used. If they run after, then we can possibly add logic in the strategy again to validate the token similar to how the action runs those validation rules.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r516538537", "createdAt": "2020-11-03T09:48:14Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0MDgxOA==", "bodyText": "Understood. Will try it. :)", "url": "https://github.com/apereo/cas/pull/4967#discussion_r516540818", "createdAt": "2020-11-03T09:51:38Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzNTQ5MA==", "bodyText": "The SSO Strategy run before the action. So, I've done what's you wanted in the strategy:\n\nVerify if there is a token in the request\nVerify if the token exists and if it's a TST\n\nIt's working if the token in the request is valid but when it's not, you're redirected to the service if you're using the cas protocol or you got the 500 error if you're using the oauth/oidc protocol... So the problem is coming back for this case :/\nI guess it's not the best solution to add this logic here.\nIt's not related to our problem but i wondered if this code in the verifyPasswordResetRequestAction:\nval request = WebUtils.getHttpServletRequestFromExternalWebflowContext(requestContext);\nval transientTicket = request.getParameter(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n\ncould be simplified with the following:\nval transientTicket = requestContext\n            .getRequestParameters()\n            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n\nRegards", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517035490", "createdAt": "2020-11-04T00:40:14Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxMDIyMg==", "bodyText": "Both of those snippets do the same thing; perhaps one fails if the token is not found?\n\n\nYou should not check if the token is a TST. You should just check that the token can be found, and can be parsed. Ignore its type.\n\n\nIf it's not valid, then you should not disable SSO and should continue to support the request. But, if the token is not valid, some of the other actions that verify the token should fail. Failing is the correct behavior.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517210222", "createdAt": "2020-11-04T09:35:40Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NTk2Mg==", "bodyText": "Misagh,\nThe main point here is if I do not disable SSO when the ticket is not valid i'm redirected to the service (which is failing if it's an oauth/oidc one) because i'm logged in.\nThe fail occurs in the verify action but i'm still redirected.\nSo if I do what you want i'm not fixing the problem in that kind of scenario. I'm only fixing it if the token is valid.\nI'll try to find if there is a way to show the error view without disabling the sso.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517275962", "createdAt": "2020-11-04T11:25:15Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3ODA0NA==", "bodyText": "If you provide an invalid password reset token when you have SSO, do password-reset webflow actions run to validate the token at all?\nIf you provide an invalid password reset token when you do not have SSO, do password-reset webflow actions run to validate the token at all?", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517278044", "createdAt": "2020-11-04T11:29:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NDc0OA==", "bodyText": "If you provide an invalid password reset token when you have SSO, do password-reset webflow actions run to validate the token at all?\nNo\nIf you provide an invalid password reset token when you do not have SSO, do password-reset webflow actions run to validate the token at all?\nYes", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517284748", "createdAt": "2020-11-04T11:42:20Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NzQ2Mw==", "bodyText": "OK, so that's where another problem lies. This is what should happen:\nWhen a token is specified even with SSO, some webflow action must run to validate the token. If token is valid, the flow proceeds. If the token is invalid, then the flow should stop and must route to an error page, explaining the scenario. It sounds like this validation step is missing in the flow when there is SSO, so perhaps a new action needs to be added at the very beginning of the flow in the right stop to make sure if a valid token is specified for password resets.\nOnce you have this action in place, then the SSO strategy can do its job as it does now; validate the token and determine SSO etc.\nI can take a look at the webflow validation action and try to fix it if it's easier for you to resume your work here.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517287463", "createdAt": "2020-11-04T11:47:37Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Njc1Mw==", "bodyText": "I'll try to fix the webflow by myself first if you don't mind. :)", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517296753", "createdAt": "2020-11-04T12:05:45Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Nzg2Nw==", "bodyText": "Unless you want to fix this as soon as possible of course.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r517297867", "createdAt": "2020-11-04T12:08:03Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.val;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        val params = requestContext.getRequestParameters();\n+        return params.contains(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNTcwNQ=="}, "originalCommit": {"oid": "e55b5889d504f35dc1cb6c1179a324423feea6b8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzE2MjM1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzowNToyNFrOHvhGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxMzo1MFrOHv5EQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NzM2MQ==", "bodyText": "You should be using CentralAuthenticationService, and then catch exceptions when you get the ticket. Also, please add logging statements under debug/trace to the method here to explain the behavior.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r519587361", "createdAt": "2020-11-09T07:05:24Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final TicketRegistry ticketRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8072030e02f017dbd863f50cdc0ed02fe5fb07c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMTA1NA==", "bodyText": "Will do it. :)\nI'm a bit curious. Is it related to performance to catch an exception rather than have a null response ?", "url": "https://github.com/apereo/cas/pull/4967#discussion_r519611054", "createdAt": "2020-11-09T07:53:47Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final TicketRegistry ticketRegistry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NzM2MQ=="}, "originalCommit": {"oid": "a8072030e02f017dbd863f50cdc0ed02fe5fb07c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNDA5Mw==", "bodyText": "No, it has to do with transactional semantics. Fetching a ticket id via TicketRegistry without a running transaction can cause issues for registry implementations that require transactions like those backed by JDBC and a relational database. CentralAuthenticationService helps with that.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r519624093", "createdAt": "2020-11-09T08:20:35Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final TicketRegistry ticketRegistry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NzM2MQ=="}, "originalCommit": {"oid": "a8072030e02f017dbd863f50cdc0ed02fe5fb07c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NzE1Mw==", "bodyText": "Understood. Will remember it for future work.\nThanks", "url": "https://github.com/apereo/cas/pull/4967#discussion_r519647153", "createdAt": "2020-11-09T09:01:03Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final TicketRegistry ticketRegistry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NzM2MQ=="}, "originalCommit": {"oid": "a8072030e02f017dbd863f50cdc0ed02fe5fb07c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4MDA5Nw==", "bodyText": "Done", "url": "https://github.com/apereo/cas/pull/4967#discussion_r519980097", "createdAt": "2020-11-09T17:13:50Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final TicketRegistry ticketRegistry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NzM2MQ=="}, "originalCommit": {"oid": "a8072030e02f017dbd863f50cdc0ed02fe5fb07c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY4NTk2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTowMTozNlrOHwL1Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0ODowMVrOHwR5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw==", "bodyText": "These lines are unnecessary. The ticket that is returned from CAS should always be valid, or else exceptions are thrown.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520287527", "createdAt": "2020-11-10T05:01:36Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NTA4OA==", "bodyText": "Even with a JPA Ticket Registry where an expired token is not immediately deleted but deleted periodically with a cleaner?\nBut I could do it, sure.\nThere is only one thing i'm not confortable with. Aren't we doing the same verification 3 times if the token is valid?\n\nAt the right beginning of the flow with the ValidatePasswordResetTokenAction\nInside the Single Sign On Participation Stategy\nIn the VerifyPasswordResetRequestAction wich finaly put the token in the flow with PasswordManagementWebflowUtils.putPasswordResetToken(requestContext, token) and then it's used by the InitPasswordResetAction with PasswordManagementWebflowUtils.getPasswordResetToken(requestContext, token).\n\nIsn't it a better design if the Validate Password Reset Token Action put the token in the flow if it is valid and then the Single Sign On Participation Strategy & the verification password reset request action get it from the flow with the getPasswordResetToken method?", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520355088", "createdAt": "2020-11-10T07:53:08Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1OTk0Ng==", "bodyText": "Even with a JPA Ticket Registry where an expired token is not immediately deleted but deleted periodically with a cleaner?\n\nYes, could be. Not sure how this is related to this section?\n\nIsn't it a better design if the Validate Password Reset Token Action put the token in the flow if it is valid and then the Single Sign On Participation Strategy & the verification password reset request action get it from the flow with the getPasswordResetToken method?\n\nSeems like it, yes. You are welcome to rework this all in a separate pull request.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520359946", "createdAt": "2020-11-10T08:02:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2NDI5MQ==", "bodyText": "Never used the JPA Ticket Registry but the doc explain there is a cleaner which periodically delete the expired token.\nWhich mean to me that an expired token could exist in the Ticket Registry if it has not been cleaned yet.\nAlso, the getTicket method documentation tel us:\n/**\n     * Obtains the given ticket by its id\n     * and returns the CAS-representative object. **Implementations\n     * need to check for the validity of the ticket by making sure\n     * it exists and has not expired yet**, etc. This method is specifically\n     * designed to remove the need to access the ticket registry.\n**/", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520364291", "createdAt": "2020-11-10T08:10:37Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2NTUzNA==", "bodyText": "Still not sure how it's related. You should examine the source code for the CAS implementation component to see how it basically does the same checks. If you do use CAS, the checks you have here (and should be removed) are handled automatically for you. It has nothing to do with JPA, etc.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520365534", "createdAt": "2020-11-10T08:12:53Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2ODAxNg==", "bodyText": "The source code of CAS is full of these kind of check. For instance :\nprivate OAuth20DeviceUserCode getDeviceUserCodeFromRegistry(final OAuth20DeviceToken deviceCodeTicket) {\n        val userCode = this.centralAuthenticationService.getTicket(deviceCodeTicket.getUserCode(), OAuth20DeviceUserCode.class);\n        if (userCode == null) {\n            LOGGER.error(\"Provided user code [{}] is invalid or expired and cannot be found in the ticket registry\", deviceCodeTicket.getUserCode());\n            throw new InvalidOAuth20DeviceTokenException(deviceCodeTicket.getUserCode());\n        }\n        if (userCode.isExpired()) {\n            this.centralAuthenticationService.deleteTicket(userCode.getId());\n            LOGGER.error(\"Provided device code [{}] has expired and will be removed from the ticket registry\", deviceCodeTicket.getUserCode());\n            throw new InvalidOAuth20DeviceTokenException(deviceCodeTicket.getUserCode());\n        }\n        return userCode;\n    }\n\nHere:\nprivate TransientSessionTicket getTransientSessionTicketForSession(final JEEContext context) {\n        try {\n            val sessionId = getOrCreateSessionId(context);\n            val ticketId = TransientSessionTicketFactory.normalizeTicketId(sessionId);\n\n            LOGGER.trace(\"fetching ticket: {}\", ticketId);\n            val ticket = this.centralAuthenticationService.getTicket(ticketId, TransientSessionTicket.class);\n            if (ticket == null || ticket.isExpired()) {\n                LOGGER.trace(\"Ticket [{}] does not exist or is expired\", ticketId);\n                return null;\n            }\n            return ticket;\n        } catch (final Exception e) {\n            LOGGER.trace(e.getMessage(), e);\n        }\n        return null;\n    }\n\nBut I'll delete it, no problem really. :)", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520368016", "createdAt": "2020-11-10T08:17:12Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2ODQyMA==", "bodyText": "You're checking if the ticket is not null and not expired after you get a ticket.\nIf you do centralAuthenticationService.getTicket(), those checks are automatically done for you. You should not have to repeat them.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520368420", "createdAt": "2020-11-10T08:17:55Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2ODk4NA==", "bodyText": "The source code of CAS is full of these kind of check. For instance :\n\nAll such checks should be cleaned up too; they are duplicates.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520368984", "createdAt": "2020-11-10T08:18:52Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3MDUxMQ==", "bodyText": "I can handle the clean up bit to remove these checks. I think the reason they exist is because at some point, references to ticketRegistry were swapped with centralAuthenticationService to handle transactions better when fetching tickets. Seems like the duplicate checks were not cleaned up, so we should remove those (which would also improve coverage as well).\nThanks for the catch! Looking good so far.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520370511", "createdAt": "2020-11-10T08:21:19Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3MjYxNg==", "bodyText": "Ok, the check is done in the verifyTicketState method of the AbstractCentralAuthenticationService class. :)\nI guess a code cleanup should be done in oauth, pac4j etc...", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520372616", "createdAt": "2020-11-10T08:24:54Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4MTI1OQ==", "bodyText": "Right now I'm working on a better support of oauth/oidc because it would be nice to see CAS in the certified OIDC Provider lists.\nLater I'll try the design improvement we discussed here.", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520381259", "createdAt": "2020-11-10T08:39:14Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4NjgyNA==", "bodyText": "Done", "url": "https://github.com/apereo/cas/pull/4967#discussion_r520386824", "createdAt": "2020-11-10T08:48:01Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementSingleSignOnParticipationStrategy.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apereo.cas.pm.web.flow;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.ticket.TransientSessionTicket;\n+import org.apereo.cas.web.flow.SingleSignOnParticipationStrategy;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * This is {@link PasswordManagementSingleSignOnParticipationStrategy}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class PasswordManagementSingleSignOnParticipationStrategy implements SingleSignOnParticipationStrategy {\n+    private final CentralAuthenticationService centralAuthenticationService;\n+\n+    @Override\n+    public boolean supports(final RequestContext requestContext) {\n+        LOGGER.trace(\"Evaluating if the Password Reset request is valid\");\n+        val transientTicket = requestContext\n+            .getRequestParameters()\n+            .get(PasswordManagementWebflowUtils.REQUEST_PARAMETER_NAME_PASSWORD_RESET_TOKEN);\n+\n+        if (StringUtils.isBlank(transientTicket)) {\n+            LOGGER.trace(\"Password reset token is missing\");\n+            return false;\n+        }\n+\n+        try {\n+            val ticket = centralAuthenticationService.getTicket(transientTicket, TransientSessionTicket.class);\n+            if (ticket != null || !ticket.isExpired()) {\n+                LOGGER.trace(\"Token ticket [{}] is valid, SSO will be disabled\", transientTicket);\n+                return true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NzUyNw=="}, "originalCommit": {"oid": "c9e6ce53bc513984f2ac095c7308946945b708ba"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3988, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}