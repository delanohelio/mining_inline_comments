{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTIyNDE2", "number": 5001, "title": "MFA Inwebo connector support", "bodyText": "This PR adds a new MFA connector for Inwebo: https://www.inwebo.com/\nIt is developed in the same way as other MFA connectors. Unit tests and the documentation have been added as well.\nIt supports both the push mobile/desktop authentication and the browser authentication.\nIn the webflow, it first checks what authentication methods the user supports.\nWhen only one, it starts the appropriate authentication method. If both are supported by the user, he can select the one he wants in a specific screen.\nFor the push method, a check is performed until the user accepts the notification on his mobile/desktop app or until timeout.\nFor the browser authentication, if the user is not enrolled, he can do that in a specific form (activation + pin codes). Otherwise, he just needs to fill in his PIN code.\nAuthentication attributes (authenticationMethod , authnContextClass , successfulAuthenticationHandlers ) are populated as usual for MFA connector. One specific authentication attribute is the \"inweboAuthenticationDevice\" to track the device used for authentication.", "createdAt": "2020-12-02T10:42:28Z", "url": "https://github.com/apereo/cas/pull/5001", "merged": true, "mergeCommit": {"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b"}, "closed": true, "closedAt": "2021-01-06T07:31:04Z", "author": {"login": "leleuj"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiMEiwgH2gAyNTMwOTIyNDE2OjUwNDY1M2UwN2MwYWU1NmUyMmU2ZTRjMmRmZTI5ODY1MTMyNzEwNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtMLiAgH2gAyNTMwOTIyNDE2OjRiNGE5ZjJkZTAzNjlkYmFhYzE4MjAyYjBlYWY2ODQ1MTM0YmRhMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "504653e07c0ae56e22e6e4c2dfe2986513271078", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/504653e07c0ae56e22e6e4c2dfe2986513271078", "committedDate": "2020-12-02T10:34:29Z", "message": "MFA Inwebo connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/15be5d5834ee7caedfca1aba476d0a5ddfa72f27", "committedDate": "2020-12-02T10:44:24Z", "message": "Merge branch 'master' of github.com:apereo/cas into inwebo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzE1MzA5", "url": "https://github.com/apereo/cas/pull/5001#pullrequestreview-542715309", "createdAt": "2020-12-02T10:51:16Z", "commit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MToxNlrOH9VPgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MzoxNVrOH9VT8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzIxNg==", "bodyText": "Remove all. Use libraries.springws instead", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534073216", "createdAt": "2020-12-02T10:51:16Z", "author": {"login": "mmoayyed"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3409,6 +3409,28 @@ ext.libraries = [\n \n                 }\n         ],\n+        springwsclient          : [\n+                dependencies.create(\"org.springframework.boot:spring-boot-starter-web-services:$springBootVersion\") {\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-dom\")\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-common\")\n+                    exclude(group: \"org.jvnet.mimepull\", module: \"mimepull\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-core\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-classic\")\n+                    exclude(group: \"log4j\", module: \"log4j\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-api\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-log4j12\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-web\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-validation\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-actuator\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-logging\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter\")\n+\n+                },\n+                dependencies.create(\"org.springframework.ws:spring-ws-support:$springWsVersion\") {\n+                },\n+                dependencies.create(\"com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion\") {\n+                },\n+        ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzQxNA==", "bodyText": "Remove in favor of springws", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534073414", "createdAt": "2020-12-02T10:51:38Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = \"Apereo CAS Inwebo MFA Support\"\n+dependencies {\n+    api project(\":api:cas-server-core-api-webflow\")\n+\n+    implementation libraries.springwsclient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzU4MA==", "bodyText": "Also add ...-util-api for tests.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534073580", "createdAt": "2020-12-02T10:51:56Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = \"Apereo CAS Inwebo MFA Support\"\n+dependencies {\n+    api project(\":api:cas-server-core-api-webflow\")\n+\n+    implementation libraries.springwsclient\n+\n+    implementation project(\":api:cas-server-core-api-mfa\")\n+    implementation project(\":core:cas-server-core-authentication-mfa-api\")\n+    implementation project(\":core:cas-server-core-webflow-mfa-api\")\n+    implementation project(\":core:cas-server-core-webflow-api\")\n+    implementation project(\":core:cas-server-core-util-api\")\n+    implementation project(\":core:cas-server-core-authentication-api\")\n+    implementation project(\":core:cas-server-core-web-api\")\n+    implementation project(\":support:cas-server-support-trusted-mfa-core\")\n+\n+    compileOnlyApi project(\":support:cas-server-support-trusted-mfa\")\n+\n+    testImplementation project(path: \":core:cas-server-core-authentication-api\", configuration: \"tests\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg==", "bodyText": "This doesn't seem right. You are not actually doing authentication, when the method asks for doAuthentication. The credential needs to be verified somehow. If you're doing that elsewhere, you'd need to move that logic into the handler here.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534074352", "createdAt": "2020-12-02T10:53:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.apereo.cas.support.inwebo.authentication;\n+\n+import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;\n+import org.apereo.cas.authentication.Credential;\n+import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+import org.apereo.cas.services.ServicesManager;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * The Inwebo authentication handler.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n+\n+    public InweboAuthenticationHandler(final ServicesManager servicesManager,\n+                                       final PrincipalFactory principalFactory,\n+                                       final InweboMultifactorProperties inweboProperties) {\n+        super(inweboProperties.getName(),\n+              servicesManager,\n+              principalFactory,\n+              inweboProperties.getOrder());\n+    }\n+\n+    @Override\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n+        val login = credential.getId();\n+        LOGGER.info(\"Creating principal result for: {}\", login);\n+        val pushCredential = (InweboCredential) credential;\n+        val principal = this.principalFactory.createPrincipal(login);\n+        return createHandlerResult(pushCredential, principal);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9ca325a5f5a3785f781a06ba3110109e6b5f91b", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/c9ca325a5f5a3785f781a06ba3110109e6b5f91b", "committedDate": "2020-12-02T11:13:11Z", "message": "add missing WebflowMfaActions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ab496f38d7d4d4c8d8a5b8c8c7489b9391404b", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/02ab496f38d7d4d4c8d8a5b8c8c7489b9391404b", "committedDate": "2020-12-02T11:33:55Z", "message": "added missing cas-server-core-util-api tests dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4c51d0db82349458054dbf9c88c971212da717", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/eb4c51d0db82349458054dbf9c88c971212da717", "committedDate": "2020-12-02T14:38:13Z", "message": "Fix the javadoc and add the RefreshScope annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44cb4da6834112e1471e3635c9fb8d8cfe20052", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/a44cb4da6834112e1471e3635c9fb8d8cfe20052", "committedDate": "2020-12-02T17:21:51Z", "message": "Updated `@since 6.4.0` in Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ebc47831fbfe1164b0f3347ee4ff59a61f919e", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/f1ebc47831fbfe1164b0f3347ee4ff59a61f919e", "committedDate": "2020-12-02T17:23:40Z", "message": "Updated `@since 6.4.0` in Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/89b75b211977e12c5ce3879b4b846787d51678a9", "committedDate": "2020-12-02T17:24:12Z", "message": "Merge branch 'inwebo' of github.com:leleuj/cas into inwebo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjI0MTY0", "url": "https://github.com/apereo/cas/pull/5001#pullrequestreview-543624164", "createdAt": "2020-12-03T06:35:47Z", "commit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjozNTo0N1rOH99szA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowODowOVrOH-AGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng==", "bodyText": "Switch type to SpringResource instead", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534736076", "createdAt": "2020-12-03T06:35:47Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apereo.cas.configuration.model.support.mfa;\n+\n+import org.apereo.cas.configuration.support.RequiredProperty;\n+import org.apereo.cas.configuration.support.RequiresModule;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * The Inwebo MFA properties.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiresModule(name = \"cas-server-support-inwebo-mfa\")\n+@Getter\n+@Setter\n+@Accessors(chain = true)\n+public class InweboMultifactorProperties extends BaseMultifactorProviderProperties {\n+\n+    /**\n+     * Provider id by default.\n+     */\n+    public static final String DEFAULT_IDENTIFIER = \"mfa-inwebo\";\n+\n+    private static final long serialVersionUID = -942637204816051814L;\n+\n+    /**\n+     * The Inwebo serviceId.\n+     */\n+    @RequiredProperty\n+    private Long serviceId;\n+\n+    /**\n+     * The location of the client certificate (PKCS12 format).\n+     */\n+    @RequiredProperty\n+    private transient Resource clientCertificate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNzQ5NQ==", "bodyText": "Thanks for the update. Please add the missing dependencies to the springws closure instead. The (Any) module should only reference libraries.springws to bring on support for Spring WS. This will actually become quite handy, as I am also working on another MFA implementation that requires SOAP support and I should be able to reuse your work here.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534737495", "createdAt": "2020-12-03T06:37:16Z", "author": {"login": "mmoayyed"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3409,6 +3409,28 @@ ext.libraries = [\n \n                 }\n         ],\n+        springwsclient          : [\n+                dependencies.create(\"org.springframework.boot:spring-boot-starter-web-services:$springBootVersion\") {\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-dom\")\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-common\")\n+                    exclude(group: \"org.jvnet.mimepull\", module: \"mimepull\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-core\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-classic\")\n+                    exclude(group: \"log4j\", module: \"log4j\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-api\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-log4j12\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-web\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-validation\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-actuator\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-logging\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter\")\n+\n+                },\n+                dependencies.create(\"org.springframework.ws:spring-ws-support:$springWsVersion\") {\n+                },\n+                dependencies.create(\"com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion\") {\n+                },\n+        ],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzIxNg=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NTU5Nw==", "bodyText": "I don't entirely follow. I guess the real question is, what does it really mean to authenticate with Inwebo? At some point somewhere, you would be receiving a response back from that service that needs validation right? That response needs to be validated by the handler which is the actual act of authentication. What you have here as an authentication handler is not actually handling any sort of authentication. It's stub code, and therefore it's inconsistent with all other handlers we have.\nIf the response is \"wait until the user responds\", you don't need to invoke the authentication handler just yet. You'd wait until the response is something that can be in fact validated, right? The only time you need to invoke the handler is when there is something that can be terminally validated, and for sure, the validation must happen in the handler, and the entire authentication engine machinery that goes along with it. Otherwise, it doesn't make much sense to have a handler in the engine that basically does nothing other than to satisfy some webflow weirdness. That's an implementation nuance that creeping into the authentication handler/manager engine and should be avoided.\nI am happy to lend a hand in this area and propose alternatives, if you think that would be helpful.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534745597", "createdAt": "2020-12-03T06:45:57Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.apereo.cas.support.inwebo.authentication;\n+\n+import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;\n+import org.apereo.cas.authentication.Credential;\n+import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+import org.apereo.cas.services.ServicesManager;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * The Inwebo authentication handler.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n+\n+    public InweboAuthenticationHandler(final ServicesManager servicesManager,\n+                                       final PrincipalFactory principalFactory,\n+                                       final InweboMultifactorProperties inweboProperties) {\n+        super(inweboProperties.getName(),\n+              servicesManager,\n+              principalFactory,\n+              inweboProperties.getOrder());\n+    }\n+\n+    @Override\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n+        val login = credential.getId();\n+        LOGGER.info(\"Creating principal result for: {}\", login);\n+        val pushCredential = (InweboCredential) credential;\n+        val principal = this.principalFactory.createPrincipal(login);\n+        return createHandlerResult(pushCredential, principal);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0Njg5MA==", "bodyText": "Please rename the class to carry the MFA provider name, much like other MFA components to be consistent; something like InweboAuthenticationDeviceMetadata... etc", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534746890", "createdAt": "2020-12-03T06:47:21Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlanConfigurer;\n+import org.apereo.cas.authentication.AuthenticationHandler;\n+import org.apereo.cas.authentication.AuthenticationMetaDataPopulator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationFailureModeEvaluator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationProvider;\n+import org.apereo.cas.authentication.bypass.MultifactorAuthenticationProviderBypassEvaluator;\n+import org.apereo.cas.authentication.handler.ByCredentialTypeAuthenticationHandlerResolver;\n+import org.apereo.cas.authentication.metadata.AuthenticationContextAttributeMetaDataPopulator;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.InweboMultifactorAuthenticationProvider;\n+import org.apereo.cas.support.inwebo.authentication.AuthenticationDeviceMetadataPopulator;\n+import org.apereo.cas.support.inwebo.authentication.InweboAuthenticationHandler;\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * The Inwebo MFA authentication configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboAuthenticationConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+public class InweboAuthenticationConfiguration {\n+\n+    @Autowired\n+    @Qualifier(\"inweboBypassEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationProviderBypassEvaluator> inweboBypassEvaluator;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    @Qualifier(\"failureModeEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationFailureModeEvaluator> failureModeEvaluator;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationProvider\")\n+    @RefreshScope\n+    public MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider() {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val p = new InweboMultifactorAuthenticationProvider();\n+        p.setBypassEvaluator(inweboBypassEvaluator.getObject());\n+        p.setFailureMode(inwebo.getFailureMode());\n+        p.setFailureModeEvaluator(failureModeEvaluator.getObject());\n+        p.setOrder(inwebo.getRank());\n+        p.setId(inwebo.getId());\n+        return p;\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboPrincipalFactory\")\n+    @Bean\n+    public PrincipalFactory inweboPrincipalFactory() {\n+        return PrincipalFactoryUtils.newPrincipalFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationHandler\")\n+    @Bean\n+    @RefreshScope\n+    public AuthenticationHandler inweboAuthenticationHandler() {\n+        return new InweboAuthenticationHandler(servicesManager.getObject(), inweboPrincipalFactory(), casProperties.getAuthn().getMfa().getInwebo());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationMetaDataPopulator\")\n+    @RefreshScope\n+    public AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator() {\n+        return new AuthenticationContextAttributeMetaDataPopulator(\n+                casProperties.getAuthn().getMfa().getAuthenticationContextAttribute(),\n+                inweboAuthenticationHandler(),\n+                inweboMultifactorAuthenticationProvider().getId()\n+        );\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n+    public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n+        return new AuthenticationDeviceMetadataPopulator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0OTczNw==", "bodyText": "Does this really need to be a bean? If so, please prefix all bean names to use inwebo. I ask the question because, is it possible for spring-ws auto-configuration to be affected by this bean? Is it going to be pick up every bean that is of type Jaxb2Marshaller? Will this interfere with some other module that wants to have their own Jaxb2Marshaller?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534749737", "createdAt": "2020-12-03T06:50:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA==", "bodyText": "Wouldn't you be able to just merge the 3 beans that exist here to the InweboAuthenticationConfiguration class? Why a separate config?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534750494", "createdAt": "2020-12-03T06:50:59Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA==", "bodyText": "You should not preferably spin up an isolated trust-manager; rather you should be using one that is provided by CAS automatically so the behavior of the trust-manager can be controlled via settings. I believe this is done in the util or web module where the http-client is constructed.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534752354", "createdAt": "2020-12-03T06:52:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n+    @RefreshScope\n+    public ConsoleAdmin consoleAdmin() {\n+        val client = new ConsoleAdmin();\n+        client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n+        client.setMarshaller(marshaller());\n+        client.setUnmarshaller(marshaller());\n+\n+        try {\n+            val messageSender = new HttpsUrlConnectionMessageSender();\n+            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+            tmFactory.init((KeyStore) null);\n+            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            client.setMessageSender(messageSender);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1Mzg2Mg==", "bodyText": "Please prefix all webflow actions to carry the MFA provider name, similar to simple-mfa or Duo.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534753862", "createdAt": "2020-12-03T06:53:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NzA2MQ==", "bodyText": "This is unnecessary. Use StaticEventExecutionAction#SUCCESS instead.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534757061", "createdAt": "2020-12-03T06:55:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @RefreshScope\n+    public Action checkUserAction() {\n+        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n+    public Action mustEnrollAction() {\n+        return new MustEnrollAction(messageSource.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @RefreshScope\n+    public Action checkAuthenticationAction() {\n+        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"successAction\")\n+    public Action successAction() {\n+        return new SuccessAction();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODM0NQ==", "bodyText": "It's not clear if this method is overriding something from the parent class? If not, why not mark this as a static method?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534758345", "createdAt": "2020-12-03T06:56:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearch;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResult;\n+\n+import lombok.val;\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+/**\n+ * The Inwebo SOAP client for user management.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class ConsoleAdmin extends WebServiceGatewaySupport {\n+\n+    public LoginSearchResult loginSearch(final String login, final long serviceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1OTE2OA==", "bodyText": "Mark as static, and make sure you're finding/registering jackson modules as other instances of mapper do.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534759168", "createdAt": "2020-12-03T06:56:39Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MDA2MQ==", "bodyText": "SSLContext should not be constructed manually, but should be obtained from the runtime; there is one already available for you.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534760061", "createdAt": "2020-12-03T06:57:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MTY1NQ==", "bodyText": "Possible to use a URL builder to avoid string-concatenation and encoding params manually?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534761655", "createdAt": "2020-12-03T06:58:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+        this.casProperties = casProperties;\n+        this.consoleAdmin = consoleAdmin;\n+\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        try {\n+            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            this.context = SSLContext.getInstance(\"TLS\");\n+            context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n+        } catch (final Exception e) {\n+            throw new RuntimeException(\"Cannot initialize Inwebo service\", e);\n+        }\n+    }\n+\n+    public LoginSearchResponse loginSearch(final String login) {\n+        val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n+        val err = soap.getErr();\n+        val response = (LoginSearchResponse) buildResponse(new LoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        if (response.isOk()) {\n+            val count = soap.getCount();\n+            response.setCount(count);\n+            if (count == 1) {\n+                response.setUserId(soap.getId().get(0));\n+                response.setUserStatus(soap.getStatus().get(0));\n+                response.setActivationStatus(soap.getActivationStatus().get(0));\n+            }\n+        }\n+        return response;\n+    }\n+\n+    public PushAuthenticateResponse pushAuthenticate(final String login) {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val url = API_URL + \"action=pushAuthenticate\"\n+                + \"&serviceId=\" + URLEncoder.encode(StringUtils.EMPTY + inwebo.getServiceId(), StandardCharsets.UTF_8)\n+                + \"&userId=\" + URLEncoder.encode(login, StandardCharsets.UTF_8)\n+                + \"&format=json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MzI3OA==", "bodyText": "If this is necessary, it feels like something that can be moved to a Utils class somewhere in the util module.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534763278", "createdAt": "2020-12-03T06:59:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+\n+import lombok.val;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+\n+/**\n+ * An SSL utility class to use a client certificate.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SSLUtil {\n+\n+    public static KeyManagerFactory buildKeystore(final InweboMultifactorProperties properties) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDQ2OQ==", "bodyText": "Please make sure all model classes in the response or soap packages are prefixed with Inwebo.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534764469", "createdAt": "2020-12-03T07:00:03Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.apereo.cas.support.inwebo.service.response;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * The abstract JSON response.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Getter\n+@Setter\n+public abstract class AbstractResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ==", "bodyText": "Can be obtained from the request-context. Shouldn't have to pass it in?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534766341", "createdAt": "2020-12-03T07:01:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NzYyMw==", "bodyText": "You shouldn't need to implement a constants interface to use what's in it, unless it actually represents a type. Remove the clause, and use the constants directly with a qualified class name to be easy on the reader.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534767623", "createdAt": "2020-12-03T07:02:05Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2ODUzMQ==", "bodyText": "Please make sure all webflow action classes are prefixes with Inwebo, similar to simple-mfa.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534768531", "createdAt": "2020-12-03T07:02:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTE4Nw==", "bodyText": "This should be a trace statement. Also please use [{}] for placeholders to be consistent.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534769187", "createdAt": "2020-12-03T07:03:07Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY1Nw==", "bodyText": "Should be trace", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534769657", "createdAt": "2020-12-03T07:03:26Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+        val otp = requestContext.getRequestParameters().get(OTP);\n+        val flowScope = requestContext.getFlowScope();\n+        val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n+        if (StringUtils.isNotBlank(otp)) {\n+            val response = service.authenticateExtended(login, otp);\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            }\n+        } else if (StringUtils.isNotBlank(sessionId)) {\n+            val response = service.checkPushResult(login, sessionId);\n+            val result = response.getResult();\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            } else if (result == Result.WAITING) {\n+                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MDQwNg==", "bodyText": "All error calls to the logger should be using LoggingUtils.error()", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534770406", "createdAt": "2020-12-03T07:03:59Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the user (status).\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckUserAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+\n+        val flowScope = requestContext.getFlowScope();\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        flowScope.put(SITE_ALIAS, inwebo.getSiteAlias());\n+        flowScope.put(SITE_DESCRIPTION, inwebo.getSiteDescription());\n+        flowScope.put(LOGIN, login);\n+\n+        try {\n+            val response = service.loginSearch(login);\n+            val oneUser = response.isOk() && response.getCount() == 1 && response.getUserId() > 0;\n+            if (oneUser) {\n+                val userIsBlocked = response.getUserStatus() == 1;\n+                if (userIsBlocked) {\n+                    LOGGER.error(\"User is blocked: {}\", login);\n+                    return error();\n+                }\n+                val activationStatus = response.getActivationStatus();\n+                if (activationStatus == 0) {\n+                    LOGGER.debug(\"User is not registered: {}\", login);\n+                    flowScope.put(MUST_ENROLL, true);\n+                    flowScope.put(INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n+                } else if (activationStatus == 1) {\n+                    LOGGER.debug(\"User can only handle push notifications: {}\", login);\n+                    return getEventFactorySupport().event(this, PUSH);\n+                } else if (activationStatus == 2) {\n+                    LOGGER.debug(\"User can only handle browser authentication: {}\", login);\n+                    return getEventFactorySupport().event(this, BROWSER);\n+                } else if (activationStatus == 3 || activationStatus == 5) {\n+                    LOGGER.debug(\"User must select the authentication method: {}\", login);\n+                    return getEventFactorySupport().event(this, SELECT);\n+                } else {\n+                    LOGGER.error(\"Unknown activation status: {} for: {}\", activationStatus, login);\n+                }\n+            } else {\n+                LOGGER.error(\"No user found for: {}\", login);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTM1NQ==", "bodyText": "Should be unnecessary. Use StaticEventExecutionAction", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534771355", "createdAt": "2020-12-03T07:04:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A simple web action for success.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SuccessAction extends AbstractAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MjA2OQ==", "bodyText": "All webflow activity should be constructed dynamically in webflow-configurer classes with no XML whatsoever, except perhaps one end-state. The current webflow module cannot be constructed with an XML configuration file, so we'd include one state in the configuration to allow for the initialization step, and build everything dynamically in the webflow configurer (which you can of course unit test unlike xml)", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534772069", "createdAt": "2020-12-03T07:05:48Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/resources/webflow/mfa-inwebo/mfa-inwebo-webflow.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n+      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n+                          http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n+\n+    <on-start>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NTQ5Mg==", "bodyText": "HTML pages should be renamed to either fully refer to \"Authntication\", or shortened for \"Authn\". \"Authent\" seems quite odd to me.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534775492", "createdAt": "2020-12-03T07:08:09Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-thymeleaf/src/main/resources/templates/inwebo/casInweboBrowserAuthentView.html", "diffHunk": "@@ -0,0 +1,85 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680ad270cb61efeafa2e71a6910bfdf508626a0d", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/680ad270cb61efeafa2e71a6910bfdf508626a0d", "committedDate": "2020-12-03T08:18:13Z", "message": "use SpringResourceProperties for client certificate and supplement the springws dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60930c35b781991437a8a72cc6977a51b87a0dc0", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/60930c35b781991437a8a72cc6977a51b87a0dc0", "committedDate": "2020-12-04T09:38:13Z", "message": "Merge branch 'master' of github.com:apereo/cas into inwebo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66874878ddfcd3f2af78c74b8bbe7c77370819fa", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/66874878ddfcd3f2af78c74b8bbe7c77370819fa", "committedDate": "2020-12-04T11:07:07Z", "message": "authentication mostly happens in InweboAuthenticationHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "committedDate": "2020-12-04T12:35:27Z", "message": "renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "committedDate": "2020-12-07T11:16:01Z", "message": "Remove success action, fix object mapper and use UriComponentsBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2df31d4ff51b8443d9fcf25416580a32370e685", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/c2df31d4ff51b8443d9fcf25416580a32370e685", "committedDate": "2020-12-07T11:46:25Z", "message": "add ClientCertificateProperties and SSLUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53efbb0a8574fb322809f83a05780b68d159a36", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/d53efbb0a8574fb322809f83a05780b68d159a36", "committedDate": "2020-12-07T14:10:51Z", "message": "renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a8c17649323890effbb574bf2a1ca21ad4622d5", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/5a8c17649323890effbb574bf2a1ca21ad4622d5", "committedDate": "2020-12-09T06:51:35Z", "message": "rename InweboConfiguration -> InweboServiceConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eeef2ec25787a1a9e2c28abf7e9dda5f098990f", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/7eeef2ec25787a1a9e2c28abf7e9dda5f098990f", "committedDate": "2020-12-09T07:36:47Z", "message": "webflow in Java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43cb2f6478baf50206b8fd4f73da3653e56ee45b", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/43cb2f6478baf50206b8fd4f73da3653e56ee45b", "committedDate": "2020-12-09T08:25:35Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945698852ded2c23cb4de216f41926023fa35b7b", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/945698852ded2c23cb4de216f41926023fa35b7b", "committedDate": "2020-12-09T09:10:51Z", "message": "expose DefaultCasSslContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4651f160705f415025716d5ae470f17477eb0b", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/ff4651f160705f415025716d5ae470f17477eb0b", "committedDate": "2020-12-09T10:21:20Z", "message": "Removed injected MessageSource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d551a7cb441d48999140b09433e0c137bbf7791", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/2d551a7cb441d48999140b09433e0c137bbf7791", "committedDate": "2020-12-11T10:01:03Z", "message": "add 2 UI tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fbccf673a47aab2b11c4e2bc9a283fb4dc9cfb8", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/6fbccf673a47aab2b11c4e2bc9a283fb4dc9cfb8", "committedDate": "2020-12-11T13:38:32Z", "message": "finish browser UI test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e3d4594037158d2a7b5629d3f173ccb2659e149", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/8e3d4594037158d2a7b5629d3f173ccb2659e149", "committedDate": "2020-12-11T15:22:18Z", "message": "fix checktyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2aa4f0a677f7525c0d85da26c1684b8c76366b", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/1a2aa4f0a677f7525c0d85da26c1684b8c76366b", "committedDate": "2020-12-11T17:30:17Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b4a9f2de0369dbaac18202b0eaf6845134bda12", "author": {"user": {"login": "leleuj", "name": "CAS in the cloud LELEU J\u00e9r\u00f4me"}}, "url": "https://github.com/apereo/cas/commit/4b4a9f2de0369dbaac18202b0eaf6845134bda12", "committedDate": "2021-01-05T14:55:17Z", "message": "sync with master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}