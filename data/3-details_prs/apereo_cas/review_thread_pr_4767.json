{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzA3ODAx", "number": 4767, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyNzoyMlrODqq2kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDo1NVrODqq6Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY4ODgzOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyNzoyMlrOF6jp5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNzozNFrOF62Nkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NTg5Mw==", "bodyText": "This should be unnecessary. SingleLogoutServiceMessageHandler are or can be ordered. The default runs last. So if all other handlers fail to support the service, this one should run by default automatically, and there is no need to check for service types as such, because other handlers should be given more priority with a lower order value.\nAlso, comparing types by String will never scale and will be unmaintainable. (This is already missing a service type, for example)", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396945893", "createdAt": "2020-03-24T07:27:22Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java", "diffHunk": "@@ -23,4 +27,21 @@ public DefaultSingleLogoutServiceMessageHandler(final HttpClient httpClient,\n         super(httpClient, logoutMessageBuilder, servicesManager, singleLogoutServiceLogoutUrlBuilder,\n             asynchronous, authenticationRequestServiceSelectionStrategies);\n     }\n+\n+    /**\n+     * The default handler only applies on the CAS protocol services.\n+     * For the SAML and OIDC protocols, specific handlers exist.\n+     * For the OAuth protocol, no logout process is handled.\n+     *\n+     * The check of the service type is made by the class name not to add support-* dependencies.\n+     *\n+     * @param singleLogoutService the single logout service\n+     * @param registeredService   the registered service\n+     * @return whether the handler applies\n+     */\n+    @Override\n+    protected boolean supportsInternal(final WebApplicationService singleLogoutService, final RegisteredService registeredService) {\n+        val name = registeredService.getClass().getSimpleName();\n+        return !\"SamlRegisteredService\".equals(name) && !\"OidcRegisteredService\".equals(name) && !\"OAuthRegisteredService\".equals(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0Nzc1Mg==", "bodyText": "In general the order of execution is:\n\nProtocol-specific ones, such as SAML2, OIDC, OAUTH, etc\n1.1 Each handler checks for a service type and passes it onto the next, if it doesn't support the type\nDefault runs as a catch-all.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947752", "createdAt": "2020-03-24T07:31:52Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java", "diffHunk": "@@ -23,4 +27,21 @@ public DefaultSingleLogoutServiceMessageHandler(final HttpClient httpClient,\n         super(httpClient, logoutMessageBuilder, servicesManager, singleLogoutServiceLogoutUrlBuilder,\n             asynchronous, authenticationRequestServiceSelectionStrategies);\n     }\n+\n+    /**\n+     * The default handler only applies on the CAS protocol services.\n+     * For the SAML and OIDC protocols, specific handlers exist.\n+     * For the OAuth protocol, no logout process is handled.\n+     *\n+     * The check of the service type is made by the class name not to add support-* dependencies.\n+     *\n+     * @param singleLogoutService the single logout service\n+     * @param registeredService   the registered service\n+     * @return whether the handler applies\n+     */\n+    @Override\n+    protected boolean supportsInternal(final WebApplicationService singleLogoutService, final RegisteredService registeredService) {\n+        val name = registeredService.getClass().getSimpleName();\n+        return !\"SamlRegisteredService\".equals(name) && !\"OidcRegisteredService\".equals(name) && !\"OAuthRegisteredService\".equals(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NTg5Mw=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTkzOQ==", "bodyText": "Yes, it makes sense. It will be much better.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r397249939", "createdAt": "2020-03-24T15:37:34Z", "author": {"login": "leleuj"}, "path": "core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java", "diffHunk": "@@ -23,4 +27,21 @@ public DefaultSingleLogoutServiceMessageHandler(final HttpClient httpClient,\n         super(httpClient, logoutMessageBuilder, servicesManager, singleLogoutServiceLogoutUrlBuilder,\n             asynchronous, authenticationRequestServiceSelectionStrategies);\n     }\n+\n+    /**\n+     * The default handler only applies on the CAS protocol services.\n+     * For the SAML and OIDC protocols, specific handlers exist.\n+     * For the OAuth protocol, no logout process is handled.\n+     *\n+     * The check of the service type is made by the class name not to add support-* dependencies.\n+     *\n+     * @param singleLogoutService the single logout service\n+     * @param registeredService   the registered service\n+     * @return whether the handler applies\n+     */\n+    @Override\n+    protected boolean supportsInternal(final WebApplicationService singleLogoutService, final RegisteredService registeredService) {\n+        val name = registeredService.getClass().getSimpleName();\n+        return !\"SamlRegisteredService\".equals(name) && !\"OidcRegisteredService\".equals(name) && !\"OAuthRegisteredService\".equals(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NTg5Mw=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5MTAyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyODowNFrOF6jrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToxNDoyMVrOF8CB5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjIyMg==", "bodyText": "All such settings should be controllable via CAS settings, in scenarios where a deployment would want to forcefully turn off logout.\nFunctionality related to these settings should also turn itself on/off based on the value.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946222", "createdAt": "2020-03-24T07:28:04Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java", "diffHunk": "@@ -119,4 +119,24 @@ public String getIntrospectionEndpoint() {\n     public String getRevocationEndpoint() {\n         return this.serverPrefix.concat('/' + OidcConstants.BASE_OIDC_URL + '/' + OidcConstants.REVOCATION_URL);\n     }\n+\n+    @JsonProperty(\"backchannel_logout_supported\")\n+    public boolean getBackchannelLogoutSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"backchannel_logout_session_supported\")\n+    public boolean getBackchannelLogoutSessionSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"frontchannel_logout_supported\")\n+    public boolean getFrontchannelLogoutSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"frontchannel_logout_session_supported\")\n+    public boolean getFrontchannelLogoutSessionSupported() {\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MjEzMg==", "bodyText": "OK. I will do that. By default, I'll keep the logout enabled.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398492132", "createdAt": "2020-03-26T11:14:21Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java", "diffHunk": "@@ -119,4 +119,24 @@ public String getIntrospectionEndpoint() {\n     public String getRevocationEndpoint() {\n         return this.serverPrefix.concat('/' + OidcConstants.BASE_OIDC_URL + '/' + OidcConstants.REVOCATION_URL);\n     }\n+\n+    @JsonProperty(\"backchannel_logout_supported\")\n+    public boolean getBackchannelLogoutSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"backchannel_logout_session_supported\")\n+    public boolean getBackchannelLogoutSessionSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"frontchannel_logout_supported\")\n+    public boolean getFrontchannelLogoutSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"frontchannel_logout_session_supported\")\n+    public boolean getFrontchannelLogoutSessionSupported() {\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjIyMg=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5MjE3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyODozM1rOF6jr6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToxNzoyM1rOF8CIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjQxMQ==", "bodyText": "Is there a need for an exp claim, and do we also need to account for time skew?", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946411", "createdAt": "2020-03-24T07:28:33Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {\n+\n+    private final OAuth20ConfigurationContext configurationContext;\n+\n+    @Override\n+    public SingleLogoutMessage create(final SingleLogoutRequest request) {\n+        val builder = SingleLogoutMessage.builder();\n+        if (request.getLogoutType() == RegisteredServiceLogoutType.BACK_CHANNEL) {\n+            LOGGER.trace(\"Building logout token for [{}]\", request.getRegisteredService());\n+\n+            val claims = buildJwtClaims(request);\n+            val logoutToken = configurationContext.getIdTokenSigningAndEncryptionService()\n+                    .encode((OidcRegisteredService) request.getRegisteredService(), claims);\n+            return builder.payload(logoutToken).build();\n+        }\n+        return builder.payload(StringUtils.EMPTY).build();\n+    }\n+\n+    protected JwtClaims buildJwtClaims(final SingleLogoutRequest request) {\n+\n+        val oidc = configurationContext.getCasProperties().getAuthn().getOidc();\n+\n+        val claims = new JwtClaims();\n+\n+        claims.setIssuer(oidc.getIssuer());\n+        claims.setSubject(request.getTicketGrantingTicket().getAuthentication().getPrincipal().getId());\n+        claims.setAudience(((OidcRegisteredService) request.getRegisteredService()).getClientId());\n+        claims.setIssuedAtToNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MzYxOA==", "bodyText": "As far as I can read, the spec: https://openid.net/specs/openid-connect-backchannel-1_0.html#LogoutToken does not request an exp claim, nor a time skew. So I left that aside.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398493618", "createdAt": "2020-03-26T11:16:59Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {\n+\n+    private final OAuth20ConfigurationContext configurationContext;\n+\n+    @Override\n+    public SingleLogoutMessage create(final SingleLogoutRequest request) {\n+        val builder = SingleLogoutMessage.builder();\n+        if (request.getLogoutType() == RegisteredServiceLogoutType.BACK_CHANNEL) {\n+            LOGGER.trace(\"Building logout token for [{}]\", request.getRegisteredService());\n+\n+            val claims = buildJwtClaims(request);\n+            val logoutToken = configurationContext.getIdTokenSigningAndEncryptionService()\n+                    .encode((OidcRegisteredService) request.getRegisteredService(), claims);\n+            return builder.payload(logoutToken).build();\n+        }\n+        return builder.payload(StringUtils.EMPTY).build();\n+    }\n+\n+    protected JwtClaims buildJwtClaims(final SingleLogoutRequest request) {\n+\n+        val oidc = configurationContext.getCasProperties().getAuthn().getOidc();\n+\n+        val claims = new JwtClaims();\n+\n+        claims.setIssuer(oidc.getIssuer());\n+        claims.setSubject(request.getTicketGrantingTicket().getAuthentication().getPrincipal().getId());\n+        claims.setAudience(((OidcRegisteredService) request.getRegisteredService()).getClientId());\n+        claims.setIssuedAtToNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjQxMQ=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MzgzNw==", "bodyText": "But this is something which can be easily revisited.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398493837", "createdAt": "2020-03-26T11:17:23Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {\n+\n+    private final OAuth20ConfigurationContext configurationContext;\n+\n+    @Override\n+    public SingleLogoutMessage create(final SingleLogoutRequest request) {\n+        val builder = SingleLogoutMessage.builder();\n+        if (request.getLogoutType() == RegisteredServiceLogoutType.BACK_CHANNEL) {\n+            LOGGER.trace(\"Building logout token for [{}]\", request.getRegisteredService());\n+\n+            val claims = buildJwtClaims(request);\n+            val logoutToken = configurationContext.getIdTokenSigningAndEncryptionService()\n+                    .encode((OidcRegisteredService) request.getRegisteredService(), claims);\n+            return builder.payload(logoutToken).build();\n+        }\n+        return builder.payload(StringUtils.EMPTY).build();\n+    }\n+\n+    protected JwtClaims buildJwtClaims(final SingleLogoutRequest request) {\n+\n+        val oidc = configurationContext.getCasProperties().getAuthn().getOidc();\n+\n+        val claims = new JwtClaims();\n+\n+        claims.setIssuer(oidc.getIssuer());\n+        claims.setSubject(request.getTicketGrantingTicket().getAuthentication().getPrincipal().getId());\n+        claims.setAudience(((OidcRegisteredService) request.getRegisteredService()).getClientId());\n+        claims.setIssuedAtToNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjQxMQ=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5Mjk1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyODo0OVrOF6jsZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyODo0OVrOF6jsZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjUzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());\n          \n          \n            \n                    events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap<>());", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946532", "createdAt": "2020-03-24T07:28:49Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {\n+\n+    private final OAuth20ConfigurationContext configurationContext;\n+\n+    @Override\n+    public SingleLogoutMessage create(final SingleLogoutRequest request) {\n+        val builder = SingleLogoutMessage.builder();\n+        if (request.getLogoutType() == RegisteredServiceLogoutType.BACK_CHANNEL) {\n+            LOGGER.trace(\"Building logout token for [{}]\", request.getRegisteredService());\n+\n+            val claims = buildJwtClaims(request);\n+            val logoutToken = configurationContext.getIdTokenSigningAndEncryptionService()\n+                    .encode((OidcRegisteredService) request.getRegisteredService(), claims);\n+            return builder.payload(logoutToken).build();\n+        }\n+        return builder.payload(StringUtils.EMPTY).build();\n+    }\n+\n+    protected JwtClaims buildJwtClaims(final SingleLogoutRequest request) {\n+\n+        val oidc = configurationContext.getCasProperties().getAuthn().getOidc();\n+\n+        val claims = new JwtClaims();\n+\n+        claims.setIssuer(oidc.getIssuer());\n+        claims.setSubject(request.getTicketGrantingTicket().getAuthentication().getPrincipal().getId());\n+        claims.setAudience(((OidcRegisteredService) request.getRegisteredService()).getClientId());\n+        claims.setIssuedAtToNow();\n+        claims.setJwtId(UUID.randomUUID().toString());\n+        val events = new HashMap<String, Object>();\n+        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5Mzc5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyOToxMVrOF6js6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToxOToxMFrOF8CMVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjY2NA==", "bodyText": "Please add tests.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946664", "createdAt": "2020-03-24T07:29:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NDgwNw==", "bodyText": "Sure. But I was waiting for the feedbacks before writing the tests in case I needed to change everything.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398494807", "createdAt": "2020-03-26T11:19:10Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjY2NA=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5NDA5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyOToxN1rOF6jtDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyOToxN1rOF6jtDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjcwMQ==", "bodyText": "Please add tests.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946701", "createdAt": "2020-03-24T07:29:17Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.principal.WebApplicationService;\n+import org.apereo.cas.logout.LogoutHttpMessage;\n+import org.apereo.cas.logout.slo.BaseSingleLogoutServiceMessageHandler;\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.logout.slo.SingleLogoutServiceLogoutUrlBuilder;\n+import org.apereo.cas.logout.slo.SingleLogoutUrl;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.ticket.TicketGrantingTicket;\n+import org.apereo.cas.util.CollectionUtils;\n+import org.apereo.cas.util.DigestUtils;\n+import org.apereo.cas.util.HttpUtils;\n+import org.apereo.cas.util.http.HttpClient;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.http.HttpResponse;\n+import org.jose4j.jwt.ReservedClaimNames;\n+import org.pac4j.core.util.CommonHelper;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The message handler for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OidcSingleLogoutServiceMessageHandler extends BaseSingleLogoutServiceMessageHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5NDkyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/OidcConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzoyOTozNFrOF6jtjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToyMDoyNVrOF8CPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String CLAIM_SESSIOND_ID = \"sid\";\n          \n          \n            \n                String SLO_SESSIOND_ID = \"sid\";", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946828", "createdAt": "2020-03-24T07:29:34Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/OidcConstants.java", "diffHunk": "@@ -51,6 +51,10 @@\n      * The access token hash.\n      */\n     String CLAIM_AT_HASH = \"at_hash\";\n+    /**\n+     * The session identifier claim.\n+     */\n+    String CLAIM_SESSIOND_ID = \"sid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NTUwOA==", "bodyText": "I'd prefer to keep the \"CLAIM\" tag in the name...", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398495508", "createdAt": "2020-03-26T11:20:25Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/OidcConstants.java", "diffHunk": "@@ -51,6 +51,10 @@\n      * The access token hash.\n      */\n     String CLAIM_AT_HASH = \"at_hash\";\n+    /**\n+     * The session identifier claim.\n+     */\n+    String CLAIM_SESSIOND_ID = \"sid\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjgyOA=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5NjE5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDowN1rOF6juYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDowN1rOF6juYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzA0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @Bean\n          \n          \n            \n                @ConditionalOnMissingBean(name = \"oidcLogoutExecutionPlanConfigurer\")", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947042", "createdAt": "2020-03-24T07:30:07Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean\n+    public SingleLogoutServiceMessageHandler oidcSingleLogoutServiceMessageHandler() {\n+        return new OidcSingleLogoutServiceMessageHandler(httpClient.getObject(),\n+                oidcSingleLogoutMessageCreator(),\n+                servicesManager.getObject(),\n+                singleLogoutServiceLogoutUrlBuilder.getObject(),\n+                casProperties.getSlo().isAsynchronous(),\n+                authenticationServiceSelectionPlan.getObject(),\n+                casProperties.getAuthn().getOidc().getIssuer());\n+    }\n+\n+    @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5Njc1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDoyMFrOF6juug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDoyMFrOF6juug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @Bean\n          \n          \n            \n                @RefreshScope", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947130", "createdAt": "2020-03-24T07:30:20Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5NzA2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDoyOVrOF6ju8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDoyOVrOF6ju8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @Bean\n          \n          \n            \n                @RefreshScope", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947187", "createdAt": "2020-03-24T07:30:29Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDY5ODM1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzozMDo1NVrOF6jvsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMToyMTozM1rOF8CRgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzM3Nw==", "bodyText": "You should set an order to this handler runs before the default one if necessary.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947377", "createdAt": "2020-03-24T07:30:55Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean\n+    public SingleLogoutServiceMessageHandler oidcSingleLogoutServiceMessageHandler() {\n+        return new OidcSingleLogoutServiceMessageHandler(httpClient.getObject(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NjEzMQ==", "bodyText": "Sure, I will handle the order aspect of all message handlers.", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398496131", "createdAt": "2020-03-26T11:21:33Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean\n+    public SingleLogoutServiceMessageHandler oidcSingleLogoutServiceMessageHandler() {\n+        return new OidcSingleLogoutServiceMessageHandler(httpClient.getObject(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzM3Nw=="}, "originalCommit": {"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4082, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}