{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTE2ODQ1", "number": 4860, "title": "fix bean creation error for LDAP password sync", "bodyText": "I was getting a bean in process of creation or bean cycle error when running in an overlay. This moves bean creation inside of lambda function which was first attempt to avoid the error. That didn't help so I had to turn set proxyBeanMethods=true. The latter is probably sufficient and I can back out moving the bean creation into the lambda (which is little messier since it can't leverage sneakythrows). I was only able to recreate this error in the overlay.", "createdAt": "2020-05-20T05:30:51Z", "url": "https://github.com/apereo/cas/pull/4860", "merged": true, "mergeCommit": {"oid": "a43e2e852f601ab1c208286e4c658749b55a398a"}, "closed": true, "closedAt": "2020-05-25T10:15:47Z", "author": {"login": "hdeadman"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjb8dDAFqTQxNjA2OTk2NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcktTZMAFqTQxNzYxMDY4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDY5OTY1", "url": "https://github.com/apereo/cas/pull/4860#pullrequestreview-416069965", "createdAt": "2020-05-21T11:24:43Z", "commit": {"oid": "047ef70f0d7957f7296eb797daf93c4e59d3bd1c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMToyNDo0M1rOGYvVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMToyNjowNlrOGYvX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NDYzNg==", "bodyText": "Small note: exception messages do no work as parameterized messages.", "url": "https://github.com/apereo/cas/pull/4860#discussion_r428594636", "createdAt": "2020-05-21T11:24:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -50,21 +51,24 @@ protected void destroyInstance(final List list) {\n \n     @ConditionalOnMissingBean(name = \"ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n-    @SneakyThrows\n     @Autowired\n     public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer(\n         @Qualifier(\"ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean\")\n         final ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean) {\n-        val postProcessorList = ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject();\n         return plan -> {\n-            val ldap = casProperties.getAuthn().getPasswordSync().getLdap();\n-            ldap.stream()\n-                .filter(LdapPasswordSynchronizationProperties::isEnabled)\n-                .forEach(instance -> {\n-                    val postProcessor = new LdapPasswordSynchronizationAuthenticationPostProcessor(instance);\n-                    postProcessorList.add(postProcessor);\n-                    plan.registerAuthenticationPostProcessor(postProcessor);\n-                });\n+            try {\n+                val postProcessorList = Objects.requireNonNull(ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject());\n+                val ldap = casProperties.getAuthn().getPasswordSync().getLdap();\n+                ldap.stream()\n+                        .filter(LdapPasswordSynchronizationProperties::isEnabled)\n+                        .forEach(instance -> {\n+                            val postProcessor = new LdapPasswordSynchronizationAuthenticationPostProcessor(instance);\n+                            postProcessorList.add(postProcessor);\n+                            plan.registerAuthenticationPostProcessor(postProcessor);\n+                        });\n+            } catch (final Exception e) {\n+                throw new BeanCreationException(\"Error creating ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047ef70f0d7957f7296eb797daf93c4e59d3bd1c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NDY5NA==", "bodyText": "Tab back 4 spaces.", "url": "https://github.com/apereo/cas/pull/4860#discussion_r428594694", "createdAt": "2020-05-21T11:24:55Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -50,21 +51,24 @@ protected void destroyInstance(final List list) {\n \n     @ConditionalOnMissingBean(name = \"ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n-    @SneakyThrows\n     @Autowired\n     public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer(\n         @Qualifier(\"ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean\")\n         final ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean) {\n-        val postProcessorList = ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject();\n         return plan -> {\n-            val ldap = casProperties.getAuthn().getPasswordSync().getLdap();\n-            ldap.stream()\n-                .filter(LdapPasswordSynchronizationProperties::isEnabled)\n-                .forEach(instance -> {\n-                    val postProcessor = new LdapPasswordSynchronizationAuthenticationPostProcessor(instance);\n-                    postProcessorList.add(postProcessor);\n-                    plan.registerAuthenticationPostProcessor(postProcessor);\n-                });\n+            try {\n+                val postProcessorList = Objects.requireNonNull(ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject());\n+                val ldap = casProperties.getAuthn().getPasswordSync().getLdap();\n+                ldap.stream()\n+                        .filter(LdapPasswordSynchronizationProperties::isEnabled)\n+                        .forEach(instance -> {\n+                            val postProcessor = new LdapPasswordSynchronizationAuthenticationPostProcessor(instance);\n+                            postProcessorList.add(postProcessor);\n+                            plan.registerAuthenticationPostProcessor(postProcessor);\n+                        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047ef70f0d7957f7296eb797daf93c4e59d3bd1c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NTE2OQ==", "bodyText": "Also the exception message is misleading; there is nothing that would indicate the problem might have to do with ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean, if for example, something in the constructor of LdapPasswordSynchronizationAuthenticationPostProcessor goes wrong.", "url": "https://github.com/apereo/cas/pull/4860#discussion_r428595169", "createdAt": "2020-05-21T11:26:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -50,21 +51,24 @@ protected void destroyInstance(final List list) {\n \n     @ConditionalOnMissingBean(name = \"ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n-    @SneakyThrows\n     @Autowired\n     public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer(\n         @Qualifier(\"ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean\")\n         final ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean) {\n-        val postProcessorList = ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject();\n         return plan -> {\n-            val ldap = casProperties.getAuthn().getPasswordSync().getLdap();\n-            ldap.stream()\n-                .filter(LdapPasswordSynchronizationProperties::isEnabled)\n-                .forEach(instance -> {\n-                    val postProcessor = new LdapPasswordSynchronizationAuthenticationPostProcessor(instance);\n-                    postProcessorList.add(postProcessor);\n-                    plan.registerAuthenticationPostProcessor(postProcessor);\n-                });\n+            try {\n+                val postProcessorList = Objects.requireNonNull(ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject());\n+                val ldap = casProperties.getAuthn().getPasswordSync().getLdap();\n+                ldap.stream()\n+                        .filter(LdapPasswordSynchronizationProperties::isEnabled)\n+                        .forEach(instance -> {\n+                            val postProcessor = new LdapPasswordSynchronizationAuthenticationPostProcessor(instance);\n+                            postProcessorList.add(postProcessor);\n+                            plan.registerAuthenticationPostProcessor(postProcessor);\n+                        });\n+            } catch (final Exception e) {\n+                throw new BeanCreationException(\"Error creating ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047ef70f0d7957f7296eb797daf93c4e59d3bd1c"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "047ef70f0d7957f7296eb797daf93c4e59d3bd1c", "author": {"user": {"login": "hdeadman", "name": "Hal Deadman"}}, "url": "https://github.com/apereo/cas/commit/047ef70f0d7957f7296eb797daf93c4e59d3bd1c", "committedDate": "2020-05-20T05:25:37Z", "message": "set proxyBeanMethods to true"}, "afterCommit": {"oid": "a23ee8e7d11117a749bfdb9cd70bc46e1c422768", "author": {"user": {"login": "hdeadman", "name": "Hal Deadman"}}, "url": "https://github.com/apereo/cas/commit/a23ee8e7d11117a749bfdb9cd70bc46e1c422768", "committedDate": "2020-05-21T15:14:50Z", "message": "fix bean creation error\n\nalso add user to AD reset password script\n\nset proxyBeanMethods to true\n\naddress feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzcyMDA4", "url": "https://github.com/apereo/cas/pull/4860#pullrequestreview-417372008", "createdAt": "2020-05-24T16:16:17Z", "commit": {"oid": "7776e9c6d18412dd68d74273a93d4ea391e18696"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjoxNjoxN1rOGZv4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjoxNjozOFrOGZv4lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1MjEwMA==", "bodyText": "Should be documented in the docs.", "url": "https://github.com/apereo/cas/pull/4860#discussion_r429652100", "createdAt": "2020-05-24T16:16:17Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/authentication/passwordsync/PasswordSynchronizationProperties.java", "diffHunk": "@@ -23,6 +23,11 @@\n public class PasswordSynchronizationProperties implements Serializable {\n     private static final long serialVersionUID = -3878237508646993100L;\n \n+    /**\n+     * Allow password synchronization to be turned off globally.\n+     */\n+    private boolean enabled = true;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7776e9c6d18412dd68d74273a93d4ea391e18696"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1MjExNg==", "bodyText": "This should go to the class definition to control all beans.", "url": "https://github.com/apereo/cas/pull/4860#discussion_r429652116", "createdAt": "2020-05-24T16:16:38Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -33,8 +35,10 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+\n     @Bean\n     @SneakyThrows\n+    @ConditionalOnProperty(prefix = \"cas.authn.password-sync\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7776e9c6d18412dd68d74273a93d4ea391e18696"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80d7f33f196e114723e42ddb4a2fc21f511358fa", "author": {"user": {"login": "hdeadman", "name": "Hal Deadman"}}, "url": "https://github.com/apereo/cas/commit/80d7f33f196e114723e42ddb4a2fc21f511358fa", "committedDate": "2020-05-25T00:48:06Z", "message": "enable proxy bean methods to avoid bean creation error\nadd password sync enabled property\nalso add user to AD reset password script"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7776e9c6d18412dd68d74273a93d4ea391e18696", "author": {"user": {"login": "hdeadman", "name": "Hal Deadman"}}, "url": "https://github.com/apereo/cas/commit/7776e9c6d18412dd68d74273a93d4ea391e18696", "committedDate": "2020-05-22T01:51:23Z", "message": "attempt to disable password sync beans"}, "afterCommit": {"oid": "80d7f33f196e114723e42ddb4a2fc21f511358fa", "author": {"user": {"login": "hdeadman", "name": "Hal Deadman"}}, "url": "https://github.com/apereo/cas/commit/80d7f33f196e114723e42ddb4a2fc21f511358fa", "committedDate": "2020-05-25T00:48:06Z", "message": "enable proxy bean methods to avoid bean creation error\nadd password sync enabled property\nalso add user to AD reset password script"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjEwNjg1", "url": "https://github.com/apereo/cas/pull/4860#pullrequestreview-417610685", "createdAt": "2020-05-25T10:14:16Z", "commit": {"oid": "80d7f33f196e114723e42ddb4a2fc21f511358fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3606, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}