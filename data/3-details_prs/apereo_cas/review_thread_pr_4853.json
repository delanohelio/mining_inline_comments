{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NzkyNjI5", "number": 4853, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMToyMlrOD8aMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowNTo1NFrOD-LvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwMzAxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMToyMlrOGVVFgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMToyMlrOGVVFgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxODc1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HashMap<LdapAcceptableUsagePolicyProperties, ConnectionFactory> connectionFactoryList = new HashMap<>();\n          \n          \n            \n                private final Map<String, ConnectionFactory> connectionFactoryList = new ConcurrentHashMap<>();", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425018755", "createdAt": "2020-05-14T10:01:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -30,12 +32,17 @@\n  * @since 4.2\n  */\n @Slf4j\n-public class LdapAcceptableUsagePolicyRepository extends BaseAcceptableUsagePolicyRepository {\n+public class LdapAcceptableUsagePolicyRepository extends BaseAcceptableUsagePolicyRepository implements DisposableBean {\n     private static final long serialVersionUID = 1600024683199961892L;\n \n+    private HashMap<LdapAcceptableUsagePolicyProperties, ConnectionFactory> connectionFactoryList = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwNTI3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjowM1rOGVVHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1MjoyMlrOGVgGMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTE0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    val connectionFactory = connectionFactoryList.get(ldap);\n          \n          \n            \n                    val connectionFactory = connectionFactoryList.get(ldap.getLdapUrl());", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425019140", "createdAt": "2020-05-14T10:02:03Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -52,7 +59,7 @@ public LdapAcceptableUsagePolicyRepository(final TicketRegistrySupport ticketReg\n             LdapUtils.LDAP_SEARCH_FILTER_DEFAULT_PARAM_NAME,\n             CollectionUtils.wrap(id));\n         LOGGER.debug(\"Constructed LDAP filter [{}]\", filter);\n-        val connectionFactory = LdapUtils.newLdaptiveConnectionFactory(ldap);\n+        val connectionFactory = connectionFactoryList.get(ldap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNzkwNw==", "bodyText": "Do you want to make getLdapUrl as key? If so then I need to rewrite the corresponding set method too.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425137907", "createdAt": "2020-05-14T13:31:03Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -52,7 +59,7 @@ public LdapAcceptableUsagePolicyRepository(final TicketRegistrySupport ticketReg\n             LdapUtils.LDAP_SEARCH_FILTER_DEFAULT_PARAM_NAME,\n             CollectionUtils.wrap(id));\n         LOGGER.debug(\"Constructed LDAP filter [{}]\", filter);\n-        val connectionFactory = LdapUtils.newLdaptiveConnectionFactory(ldap);\n+        val connectionFactory = connectionFactoryList.get(ldap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTE0MA=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5OTE1NQ==", "bodyText": "Yes. Using a key based on a properties object here is scary since the object's structure is controlled by lombok. The key would be somewhat \"non-deterministic\". Using an LDAP url as a String is safer, and possibly slightly faster as a lookup key.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425199155", "createdAt": "2020-05-14T14:52:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -52,7 +59,7 @@ public LdapAcceptableUsagePolicyRepository(final TicketRegistrySupport ticketReg\n             LdapUtils.LDAP_SEARCH_FILTER_DEFAULT_PARAM_NAME,\n             CollectionUtils.wrap(id));\n         LOGGER.debug(\"Constructed LDAP filter [{}]\", filter);\n-        val connectionFactory = LdapUtils.newLdaptiveConnectionFactory(ldap);\n+        val connectionFactory = connectionFactoryList.get(ldap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTE0MA=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwNjIwOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjoxN1rOGVVHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjoxN1rOGVVHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    connectionFactoryList.forEach((ldap, connectionFactory) -> {\n          \n          \n            \n                        connectionFactory.close();\n          \n          \n            \n                    });\n          \n          \n            \n                    connectionFactoryList.forEach((ldap, connectionFactory) -> \n          \n          \n            \n                        connectionFactory.close();\n          \n          \n            \n                    );", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425019287", "createdAt": "2020-05-14T10:02:17Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -85,4 +92,11 @@ public boolean submit(final RequestContext requestContext, final Credential cred\n         }\n         return false;\n     }\n+\n+    @Override\n+    public void destroy() {\n+        connectionFactoryList.forEach((ldap, connectionFactory) -> {\n+            connectionFactory.close();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwOTI1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzowOFrOGVVJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1MDo0MVrOGVgBMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTgxMg==", "bodyText": "Pass the connection factory, remove ctor and use lombok.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425019812", "createdAt": "2020-05-14T10:03:08Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java", "diffHunk": "@@ -20,12 +21,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n-public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository {\n+public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository, DisposableBean {\n     private static final long serialVersionUID = 421732017215881244L;\n \n     private final CasConfigurationProperties casProperties;\n \n+    private ConnectionFactory connectionFactory;\n+\n+    public LdapUserGraphicalAuthenticationRepository(final CasConfigurationProperties casProperties) {\n+        this.casProperties = casProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(\n+            casProperties.getAuthn().getGua().getLdap());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODc4NQ==", "bodyText": "Do you want to convert connectionFactory to a separate bean? I think this is a overkill to create a separate bean just to wrap connectionFactory into a DisposableBean.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425138785", "createdAt": "2020-05-14T13:32:19Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java", "diffHunk": "@@ -20,12 +21,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n-public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository {\n+public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository, DisposableBean {\n     private static final long serialVersionUID = 421732017215881244L;\n \n     private final CasConfigurationProperties casProperties;\n \n+    private ConnectionFactory connectionFactory;\n+\n+    public LdapUserGraphicalAuthenticationRepository(final CasConfigurationProperties casProperties) {\n+        this.casProperties = casProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(\n+            casProperties.getAuthn().getGua().getLdap());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTgxMg=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5Nzg3NQ==", "bodyText": "Not quite. Let me clarify: There is a bean somewhere that is creating an instance of LdapUserGraphicalAuthenticationRepository, right? Inside that bean, you need to build the connection factory (as you're doing above in the ctor) and then pass to the ctor here as an argument.\nThis is so that,\n\nBuilding \"bean\" instance should happen during the configuration of the bean itself.\nDoing this allows you to delete the manual ctor and use lombok directly to generate it. Fewer LOC.\nMakes it easier to write unit tests, in case something has to be mocked down the line.\n\nI think the same pattern more or less applies to other areas in the patch.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425197875", "createdAt": "2020-05-14T14:50:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java", "diffHunk": "@@ -20,12 +21,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n-public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository {\n+public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository, DisposableBean {\n     private static final long serialVersionUID = 421732017215881244L;\n \n     private final CasConfigurationProperties casProperties;\n \n+    private ConnectionFactory connectionFactory;\n+\n+    public LdapUserGraphicalAuthenticationRepository(final CasConfigurationProperties casProperties) {\n+        this.casProperties = casProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(\n+            casProperties.getAuthn().getGua().getLdap());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTgxMg=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwOTk4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzoxOVrOGVVKGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzoxOVrOGVVKGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTkyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ConnectionFactory connectionFactory;\n          \n          \n            \n                private final ConnectionFactory connectionFactory;", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425019929", "createdAt": "2020-05-14T10:03:19Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java", "diffHunk": "@@ -20,12 +21,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n-public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository {\n+public class LdapUserGraphicalAuthenticationRepository implements UserGraphicalAuthenticationRepository, DisposableBean {\n     private static final long serialVersionUID = 421732017215881244L;\n \n     private final CasConfigurationProperties casProperties;\n \n+    private ConnectionFactory connectionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxMTI5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzo0MVrOGVVK8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozMzo1MFrOGVfPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDE0Nw==", "bodyText": "Necessary?", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425020147", "createdAt": "2020-05-14T10:03:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -260,11 +264,31 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n     public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n \n+        @Bean\n+        @RefreshScope", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzOTU4OQ==", "bodyText": "ldapAttributeRepositories is a RefreshScope. If ldapAttributeRepositories refreshes then the corresponding ConnectionFactory should be closed too to free resources.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425139589", "createdAt": "2020-05-14T13:33:24Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -260,11 +264,31 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n     public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n \n+        @Bean\n+        @RefreshScope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDE0Nw=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4NTIwMg==", "bodyText": "Anyway this is no longer relevant now after refactoring.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425185202", "createdAt": "2020-05-14T14:33:50Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -260,11 +264,31 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n     public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n \n+        @Bean\n+        @RefreshScope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDE0Nw=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxMjA0OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzo1N1rOGVVLeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzo1N1rOGVVLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDI4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        bean.setSourceList(new ArrayList<>());\n          \n          \n            \n                        bean.setSourceList(new ArrayList<>(0));", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425020280", "createdAt": "2020-05-14T10:03:57Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -260,11 +264,31 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n     public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n \n+        @Bean\n+        @RefreshScope\n+        public ListFactoryBean personDirectoryAttributeRepositoryPlanConfigurerListConnectionFactoryListBean() {\n+            val bean = new ListFactoryBean() {\n+                @Override\n+                protected void destroyInstance(final List list) {\n+                    list.forEach(dao ->\n+                        ((ConnectionFactory) dao).close()\n+                    );\n+                }\n+            };\n+            bean.setSourceList(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyMDAzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNjowOVrOGVVQkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoyNDoyNFrOGVeyfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMTU4NQ==", "bodyText": "This is not a good pattern. Here's what you should do instead:\n\nRemove the PersonDirectoryAttributeRepositoryPlanConfigurer from the class\nCreate a Bean of type PersonDirectoryAttributeRepositoryPlanConfigurer. Mark as conditional.\nInject and qualify personDirectoryAttributeRepositoryPlanConfigurerListConnectionFactoryListBean into that bean.\nRegister the ldap attribute repository into the plan as usual.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425021585", "createdAt": "2020-05-14T10:06:09Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -307,7 +333,9 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n \n         @Override\n         public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepositoryPlan plan) {\n-            plan.registerAttributeRepositories(ldapAttributeRepositories());\n+            plan.registerAttributeRepositories(ldapAttributeRepositories(\n+                personDirectoryAttributeRepositoryPlanConfigurerListConnectionFactoryListBean()\n+            ));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NzcyNw==", "bodyText": "Do you want me to refactor like this?\ne007c63\nBTW I found that I have to create a named class to make check style to pass (lambda too long), I took this chance to put the connectionFactoryList into the class. Therefore no more ListFactoryBean needed.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425177727", "createdAt": "2020-05-14T14:24:24Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -307,7 +333,9 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n \n         @Override\n         public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepositoryPlan plan) {\n-            plan.registerAttributeRepositories(ldapAttributeRepositories());\n+            plan.registerAttributeRepositories(ldapAttributeRepositories(\n+                personDirectoryAttributeRepositoryPlanConfigurerListConnectionFactoryListBean()\n+            ));\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMTU4NQ=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyMTU1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNjozN1rOGVVRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNjozN1rOGVVRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMTg0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final HashMap<LdapPasswordManagementProperties, ConnectionFactory> connectionFactoryMap = new HashMap<>();\n          \n          \n            \n                private final Map<String, ConnectionFactory> connectionFactoryMap = new ConcurrentHashMap<>();", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425021845", "createdAt": "2020-05-14T10:06:37Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "diffHunk": "@@ -29,8 +31,9 @@\n  * @since 5.0.0\n  */\n @Slf4j\n-public class LdapPasswordManagementService extends BasePasswordManagementService {\n+public class LdapPasswordManagementService extends BasePasswordManagementService implements DisposableBean {\n     private final List<LdapPasswordManagementProperties> ldapProperties;\n+    private final HashMap<LdapPasswordManagementProperties, ConnectionFactory> connectionFactoryMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyNTQ1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzozN1rOGVVUCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNDowOFrOGVcf2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjQ3Mg==", "bodyText": "Pass the connection factory map as a ctor argument; build the map inside the bean", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425022472", "createdAt": "2020-05-14T10:07:37Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "diffHunk": "@@ -39,6 +42,16 @@ public LdapPasswordManagementService(final CipherExecutor<Serializable, String>\n                                          final PasswordHistoryService passwordHistoryService) {\n         super(passwordManagementProperties, cipherExecutor, issuer, passwordHistoryService);\n         this.ldapProperties = passwordManagementProperties.getLdap();\n+        this.ldapProperties.forEach(ldap -> {\n+            this.connectionFactoryMap.put(ldap, LdapUtils.newLdaptiveConnectionFactory(ldap));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDE4NQ==", "bodyText": "See above. I believe making connectionFactoryMap into a separate bean is a overkill.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425140185", "createdAt": "2020-05-14T13:34:08Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "diffHunk": "@@ -39,6 +42,16 @@ public LdapPasswordManagementService(final CipherExecutor<Serializable, String>\n                                          final PasswordHistoryService passwordHistoryService) {\n         super(passwordManagementProperties, cipherExecutor, issuer, passwordHistoryService);\n         this.ldapProperties = passwordManagementProperties.getLdap();\n+        this.ldapProperties.forEach(ldap -> {\n+            this.connectionFactoryMap.put(ldap, LdapUtils.newLdaptiveConnectionFactory(ldap));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjQ3Mg=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyNjE3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzo0N1rOGVVUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzo0N1rOGVVUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.connectionFactoryMap.forEach((ldap, connectionFactory) -> {\n          \n          \n            \n                        connectionFactory.close();\n          \n          \n            \n                    });\n          \n          \n            \n                    this.connectionFactoryMap.forEach((ldap, connectionFactory) -> \n          \n          \n            \n                        connectionFactory.close();\n          \n          \n            \n                    );", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425022598", "createdAt": "2020-05-14T10:07:47Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "diffHunk": "@@ -39,6 +42,16 @@ public LdapPasswordManagementService(final CipherExecutor<Serializable, String>\n                                          final PasswordHistoryService passwordHistoryService) {\n         super(passwordManagementProperties, cipherExecutor, issuer, passwordHistoryService);\n         this.ldapProperties = passwordManagementProperties.getLdap();\n+        this.ldapProperties.forEach(ldap -> {\n+            this.connectionFactoryMap.put(ldap, LdapUtils.newLdaptiveConnectionFactory(ldap));\n+        });\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        this.connectionFactoryMap.forEach((ldap, connectionFactory) -> {\n+            connectionFactory.close();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyNzIwOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowODowNVrOGVVVKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowODowNVrOGVVVKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjc2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            val ldapConnectionFactory = this.connectionFactoryMap.get(ldap);\n          \n          \n            \n                            val ldapConnectionFactory = this.connectionFactoryMap.get(ldap.getLdapUrl());", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425022760", "createdAt": "2020-05-14T10:08:05Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-pm-ldap/src/main/java/org/apereo/cas/pm/LdapPasswordManagementService.java", "diffHunk": "@@ -75,7 +88,7 @@ public String findUsername(final String email) {\n                     LdapUtils.LDAP_SEARCH_FILTER_DEFAULT_PARAM_NAME,\n                     CollectionUtils.wrap(username));\n                 LOGGER.debug(\"Constructed LDAP filter [{}] to locate security questions\", filter);\n-                val ldapConnectionFactory = LdapUtils.newLdaptiveConnectionFactory(ldap);\n+                val ldapConnectionFactory = this.connectionFactoryMap.get(ldap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjczMDkxOnYy", "diffSide": "RIGHT", "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowOTowOFrOGVVXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNDoyMFrOGVcgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzM5Nw==", "bodyText": "Pass to the ctor as argument; build inside the bean definition during construction time.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425023397", "createdAt": "2020-05-14T10:09:08Z", "author": {"login": "mmoayyed"}, "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "diffHunk": "@@ -43,10 +43,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n public class MonitorEndpointLdapAuthenticationProvider implements AuthenticationProvider {\n     private final MonitorProperties.Endpoints.LdapSecurity ldapProperties;\n     private final SecurityProperties securityProperties;\n+    private ConnectionFactory connectionFactory;\n+    private Authenticator authenticator;\n+\n+    public MonitorEndpointLdapAuthenticationProvider(final MonitorProperties.Endpoints.LdapSecurity ldapProperties,\n+                                                     final SecurityProperties securityProperties) {\n+        this.ldapProperties = ldapProperties;\n+        this.securityProperties = securityProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(this.ldapProperties);\n+        this.authenticator = LdapUtils.newLdaptiveAuthenticator(this.ldapProperties);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDMxMw==", "bodyText": "See above", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425140313", "createdAt": "2020-05-14T13:34:20Z", "author": {"login": "leeyc0"}, "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "diffHunk": "@@ -43,10 +43,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n public class MonitorEndpointLdapAuthenticationProvider implements AuthenticationProvider {\n     private final MonitorProperties.Endpoints.LdapSecurity ldapProperties;\n     private final SecurityProperties securityProperties;\n+    private ConnectionFactory connectionFactory;\n+    private Authenticator authenticator;\n+\n+    public MonitorEndpointLdapAuthenticationProvider(final MonitorProperties.Endpoints.LdapSecurity ldapProperties,\n+                                                     final SecurityProperties securityProperties) {\n+        this.ldapProperties = ldapProperties;\n+        this.securityProperties = securityProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(this.ldapProperties);\n+        this.authenticator = LdapUtils.newLdaptiveAuthenticator(this.ldapProperties);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzM5Nw=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjczMzYwOnYy", "diffSide": "RIGHT", "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowOTo1M1rOGVVZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNDo1NFrOGVciBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzg0Mw==", "bodyText": "Missing @Override?", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425023843", "createdAt": "2020-05-14T10:09:53Z", "author": {"login": "mmoayyed"}, "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "diffHunk": "@@ -43,10 +43,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n public class MonitorEndpointLdapAuthenticationProvider implements AuthenticationProvider {\n     private final MonitorProperties.Endpoints.LdapSecurity ldapProperties;\n     private final SecurityProperties securityProperties;\n+    private ConnectionFactory connectionFactory;\n+    private Authenticator authenticator;\n+\n+    public MonitorEndpointLdapAuthenticationProvider(final MonitorProperties.Endpoints.LdapSecurity ldapProperties,\n+                                                     final SecurityProperties securityProperties) {\n+        this.ldapProperties = ldapProperties;\n+        this.securityProperties = securityProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(this.ldapProperties);\n+        this.authenticator = LdapUtils.newLdaptiveAuthenticator(this.ldapProperties);\n+    }\n+\n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDc0MQ==", "bodyText": "This particular class is not a bean so I am not declaring it as a DisposableBean.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425140741", "createdAt": "2020-05-14T13:34:54Z", "author": {"login": "leeyc0"}, "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "diffHunk": "@@ -43,10 +43,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n public class MonitorEndpointLdapAuthenticationProvider implements AuthenticationProvider {\n     private final MonitorProperties.Endpoints.LdapSecurity ldapProperties;\n     private final SecurityProperties securityProperties;\n+    private ConnectionFactory connectionFactory;\n+    private Authenticator authenticator;\n+\n+    public MonitorEndpointLdapAuthenticationProvider(final MonitorProperties.Endpoints.LdapSecurity ldapProperties,\n+                                                     final SecurityProperties securityProperties) {\n+        this.ldapProperties = ldapProperties;\n+        this.securityProperties = securityProperties;\n+        this.connectionFactory = LdapUtils.newLdaptiveConnectionFactory(this.ldapProperties);\n+        this.authenticator = LdapUtils.newLdaptiveAuthenticator(this.ldapProperties);\n+    }\n+\n+    public void destroy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzg0Mw=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjczNDUzOnYy", "diffSide": "RIGHT", "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxMDowNVrOGVVZ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxMDowNVrOGVVZ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ConnectionFactory connectionFactory;\n          \n          \n            \n                private Authenticator authenticator;\n          \n          \n            \n                private final ConnectionFactory connectionFactory;\n          \n          \n            \n                private final Authenticator authenticator;", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425023991", "createdAt": "2020-05-14T10:10:05Z", "author": {"login": "mmoayyed"}, "path": "webapp/cas-server-webapp-config/src/main/java/org/apereo/cas/web/security/authentication/MonitorEndpointLdapAuthenticationProvider.java", "diffHunk": "@@ -43,10 +43,24 @@\n  * @since 5.1.0\n  */\n @Slf4j\n-@RequiredArgsConstructor\n public class MonitorEndpointLdapAuthenticationProvider implements AuthenticationProvider {\n     private final MonitorProperties.Endpoints.LdapSecurity ldapProperties;\n     private final SecurityProperties securityProperties;\n+    private ConnectionFactory connectionFactory;\n+    private Authenticator authenticator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc0MDYwOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxMTozNlrOGVVdrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNTowOVrOGVcivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNDk0MQ==", "bodyText": "Pass the connection factory map as argument; build inside the bean in config class.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425024941", "createdAt": "2020-05-14T10:11:36Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -30,12 +32,17 @@\n  * @since 4.2\n  */\n @Slf4j\n-public class LdapAcceptableUsagePolicyRepository extends BaseAcceptableUsagePolicyRepository {\n+public class LdapAcceptableUsagePolicyRepository extends BaseAcceptableUsagePolicyRepository implements DisposableBean {\n     private static final long serialVersionUID = 1600024683199961892L;\n \n+    private HashMap<LdapAcceptableUsagePolicyProperties, ConnectionFactory> connectionFactoryList = new HashMap<>();\n+\n     public LdapAcceptableUsagePolicyRepository(final TicketRegistrySupport ticketRegistrySupport,\n                                                final AcceptableUsagePolicyProperties aupProperties) {\n         super(ticketRegistrySupport, aupProperties);\n+        aupProperties.getLdap().forEach(ldap -> {\n+            connectionFactoryList.put(ldap, LdapUtils.newLdaptiveConnectionFactory(ldap));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDkyNA==", "bodyText": "See above.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r425140924", "createdAt": "2020-05-14T13:35:09Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-aup-ldap/src/main/java/org/apereo/cas/aup/LdapAcceptableUsagePolicyRepository.java", "diffHunk": "@@ -30,12 +32,17 @@\n  * @since 4.2\n  */\n @Slf4j\n-public class LdapAcceptableUsagePolicyRepository extends BaseAcceptableUsagePolicyRepository {\n+public class LdapAcceptableUsagePolicyRepository extends BaseAcceptableUsagePolicyRepository implements DisposableBean {\n     private static final long serialVersionUID = 1600024683199961892L;\n \n+    private HashMap<LdapAcceptableUsagePolicyProperties, ConnectionFactory> connectionFactoryList = new HashMap<>();\n+\n     public LdapAcceptableUsagePolicyRepository(final TicketRegistrySupport ticketRegistrySupport,\n                                                final AcceptableUsagePolicyProperties aupProperties) {\n         super(ticketRegistrySupport, aupProperties);\n+        aupProperties.getLdap().forEach(ldap -> {\n+            connectionFactoryList.put(ldap, LdapUtils.newLdaptiveConnectionFactory(ldap));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNDk0MQ=="}, "originalCommit": {"oid": "146998c17e45a59efb8b311bb01cbd8d953c21bd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTI5NzkwOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowMzoyMFrOGYIORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowMzoyMFrOGYIORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MzczNQ==", "bodyText": "Remove Autowired.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r427953735", "createdAt": "2020-05-20T12:03:20Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -257,23 +260,36 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     }\n \n     @ConditionalOnProperty(name = \"cas.authn.attribute-repository.ldap[0].ldap-url\")\n-    @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n-    public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n+    @Bean\n+    @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984dbec0bd1e23a25c23e567123136aa86e8c4c4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTI5OTQ4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowMzo1M1rOGYIPVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowMzo1M1rOGYIPVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NDAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final ArrayList<ConnectionFactory> connectionFactoryList = new ArrayList<>(0);\n          \n          \n            \n                    private final List<ConnectionFactory> connectionFactoryList = new ArrayList<>(0);", "url": "https://github.com/apereo/cas/pull/4853#discussion_r427954007", "createdAt": "2020-05-20T12:03:53Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -257,23 +260,36 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     }\n \n     @ConditionalOnProperty(name = \"cas.authn.attribute-repository.ldap[0].ldap-url\")\n-    @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n-    public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n+    @Bean\n+    @Autowired\n+    @RefreshScope\n+    public PersonDirectoryAttributeRepositoryPlanConfigurer ldapAttributeRepositoryPlanConfigurer() {\n+        return new LdapAttributeRepositoryPlanConfigurer();\n+    }\n \n-        @ConditionalOnMissingBean(name = \"ldapAttributeRepositories\")\n-        @Bean\n-        @RefreshScope\n-        public List<IPersonAttributeDao> ldapAttributeRepositories() {\n-            val list = new ArrayList<IPersonAttributeDao>();\n+    private class LdapAttributeRepositoryPlanConfigurer implements PersonDirectoryAttributeRepositoryPlanConfigurer, DisposableBean {\n+        private final ArrayList<ConnectionFactory> connectionFactoryList = new ArrayList<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984dbec0bd1e23a25c23e567123136aa86e8c4c4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTI5OTk0OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowNDowM1rOGYIPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjowMzoxMVrOGYS_bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NDA4OA==", "bodyText": "Can this be a static class?", "url": "https://github.com/apereo/cas/pull/4853#discussion_r427954088", "createdAt": "2020-05-20T12:04:03Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -257,23 +260,36 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     }\n \n     @ConditionalOnProperty(name = \"cas.authn.attribute-repository.ldap[0].ldap-url\")\n-    @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n-    public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n+    @Bean\n+    @Autowired\n+    @RefreshScope\n+    public PersonDirectoryAttributeRepositoryPlanConfigurer ldapAttributeRepositoryPlanConfigurer() {\n+        return new LdapAttributeRepositoryPlanConfigurer();\n+    }\n \n-        @ConditionalOnMissingBean(name = \"ldapAttributeRepositories\")\n-        @Bean\n-        @RefreshScope\n-        public List<IPersonAttributeDao> ldapAttributeRepositories() {\n-            val list = new ArrayList<IPersonAttributeDao>();\n+    private class LdapAttributeRepositoryPlanConfigurer implements PersonDirectoryAttributeRepositoryPlanConfigurer, DisposableBean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984dbec0bd1e23a25c23e567123136aa86e8c4c4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNjMyMA==", "bodyText": "configureAttributeRepositoryPlan() have a reference to casProperties, which is instance property. It is possible to convert to static if we tweak LdapAttributeRepositoryPlanConfigurer and add casProperties as a inner class attribute. Is it absolutely necessary?", "url": "https://github.com/apereo/cas/pull/4853#discussion_r428126320", "createdAt": "2020-05-20T15:57:50Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -257,23 +260,36 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     }\n \n     @ConditionalOnProperty(name = \"cas.authn.attribute-repository.ldap[0].ldap-url\")\n-    @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n-    public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n+    @Bean\n+    @Autowired\n+    @RefreshScope\n+    public PersonDirectoryAttributeRepositoryPlanConfigurer ldapAttributeRepositoryPlanConfigurer() {\n+        return new LdapAttributeRepositoryPlanConfigurer();\n+    }\n \n-        @ConditionalOnMissingBean(name = \"ldapAttributeRepositories\")\n-        @Bean\n-        @RefreshScope\n-        public List<IPersonAttributeDao> ldapAttributeRepositories() {\n-            val list = new ArrayList<IPersonAttributeDao>();\n+    private class LdapAttributeRepositoryPlanConfigurer implements PersonDirectoryAttributeRepositoryPlanConfigurer, DisposableBean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NDA4OA=="}, "originalCommit": {"oid": "984dbec0bd1e23a25c23e567123136aa86e8c4c4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMDE1OA==", "bodyText": "It's not. Thanks for the note. Let's keep it the way you have it now.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r428130158", "createdAt": "2020-05-20T16:03:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -257,23 +260,36 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     }\n \n     @ConditionalOnProperty(name = \"cas.authn.attribute-repository.ldap[0].ldap-url\")\n-    @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n-    public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n+    @Bean\n+    @Autowired\n+    @RefreshScope\n+    public PersonDirectoryAttributeRepositoryPlanConfigurer ldapAttributeRepositoryPlanConfigurer() {\n+        return new LdapAttributeRepositoryPlanConfigurer();\n+    }\n \n-        @ConditionalOnMissingBean(name = \"ldapAttributeRepositories\")\n-        @Bean\n-        @RefreshScope\n-        public List<IPersonAttributeDao> ldapAttributeRepositories() {\n-            val list = new ArrayList<IPersonAttributeDao>();\n+    private class LdapAttributeRepositoryPlanConfigurer implements PersonDirectoryAttributeRepositoryPlanConfigurer, DisposableBean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NDA4OA=="}, "originalCommit": {"oid": "984dbec0bd1e23a25c23e567123136aa86e8c4c4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTMwNTc2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowNTo1NFrOGYITXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjowNTo1NFrOGYITXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzOQ==", "bodyText": "Managing the connection factory should be the responsibility of the LDAP DAO itself. On dispose, you should call the plan for each LDAP DAO to invoke each DAO to destroy/close, and the DAO will know what to do on close. Consider merging with master once where you can take advantage of the DAO#close() ops for LDAP DAOs, and also you'd have the ability to filter attribute repositories by a type predicate.", "url": "https://github.com/apereo/cas/pull/4853#discussion_r427955039", "createdAt": "2020-05-20T12:05:54Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-person-directory/src/main/java/org/apereo/cas/config/CasPersonDirectoryConfiguration.java", "diffHunk": "@@ -257,23 +260,36 @@ public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepos\n     }\n \n     @ConditionalOnProperty(name = \"cas.authn.attribute-repository.ldap[0].ldap-url\")\n-    @Configuration(\"CasPersonDirectoryLdapConfiguration\")\n-    public class CasPersonDirectoryLdapConfiguration implements PersonDirectoryAttributeRepositoryPlanConfigurer {\n+    @Bean\n+    @Autowired\n+    @RefreshScope\n+    public PersonDirectoryAttributeRepositoryPlanConfigurer ldapAttributeRepositoryPlanConfigurer() {\n+        return new LdapAttributeRepositoryPlanConfigurer();\n+    }\n \n-        @ConditionalOnMissingBean(name = \"ldapAttributeRepositories\")\n-        @Bean\n-        @RefreshScope\n-        public List<IPersonAttributeDao> ldapAttributeRepositories() {\n-            val list = new ArrayList<IPersonAttributeDao>();\n+    private class LdapAttributeRepositoryPlanConfigurer implements PersonDirectoryAttributeRepositoryPlanConfigurer, DisposableBean {\n+        private final ArrayList<ConnectionFactory> connectionFactoryList = new ArrayList<>(0);\n+\n+        @Override\n+        public void destroy() {\n+            connectionFactoryList.forEach(ConnectionFactory::close);\n+        }\n+\n+        @Override\n+        @SneakyThrows\n+        public void configureAttributeRepositoryPlan(final PersonDirectoryAttributeRepositoryPlan plan) {\n             val attrs = casProperties.getAuthn().getAttributeRepository();\n+\n             attrs.getLdap()\n                 .stream()\n                 .filter(ldap -> StringUtils.isNotBlank(ldap.getBaseDn()) && StringUtils.isNotBlank(ldap.getLdapUrl()))\n                 .forEach(ldap -> {\n                     val ldapDao = new LdaptivePersonAttributeDao();\n                     FunctionUtils.doIfNotNull(ldap.getId(), ldapDao::setId);\n                     LOGGER.debug(\"Configured LDAP attribute source for [{}] and baseDn [{}]\", ldap.getLdapUrl(), ldap.getBaseDn());\n-                    ldapDao.setConnectionFactory(LdapUtils.newLdaptiveConnectionFactory(ldap));\n+                    val connectionFactory = LdapUtils.newLdaptiveConnectionFactory(ldap);\n+                    connectionFactoryList.add(connectionFactory);\n+                    ldapDao.setConnectionFactory(connectionFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984dbec0bd1e23a25c23e567123136aa86e8c4c4"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4042, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}