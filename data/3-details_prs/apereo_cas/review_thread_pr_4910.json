{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NTU1OTY2", "number": 4910, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMDo0MVrOERkGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMDo0MVrOERkGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODUyNzYzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-saml-idp-core/src/main/java/org/apereo/cas/support/saml/idp/metadata/locator/AbstractSamlIdPMetadataLocator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMDo0MVrOG2WTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMDo0MVrOG2WTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SamlIdPMetadataDocument metadataDocument = fetchInternal(registeredService);\n          \n          \n            \n                        val metadataDocument = fetchInternal(registeredService);", "url": "https://github.com/apereo/cas/pull/4910#discussion_r459641766", "createdAt": "2020-07-23T18:20:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp-core/src/main/java/org/apereo/cas/support/saml/idp/metadata/locator/AbstractSamlIdPMetadataLocator.java", "diffHunk": "@@ -123,21 +123,18 @@ public boolean exists(final Optional<SamlRegisteredService> registeredService) {\n     public final SamlIdPMetadataDocument fetch(final Optional<SamlRegisteredService> registeredService) {\n         initializeCache();\n \n-        val map = metadataCache.asMap();\n         val key = buildCacheKey(registeredService);\n \n-        if (map.containsKey(key)) {\n-            LOGGER.trace(\"Found SAML IdP metadata document from cache key [{}]\", key);\n-            return map.get(key);\n-        }\n-        val metadataDocument = fetchInternal(registeredService);\n-        if (metadataDocument != null && metadataDocument.isValid()) {\n-            LOGGER.trace(\"Fetched and cached SAML IdP metadata document [{}] under key [{}]\", metadataDocument, key);\n-            map.put(key, metadataDocument);\n-        } else {\n+        return metadataCache.get(key, k -> {\n+            SamlIdPMetadataDocument metadataDocument = fetchInternal(registeredService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9dc6c4a6232598d58fa5860dab668747d92a576"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4014, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}