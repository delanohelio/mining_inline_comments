{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDQ4MjIx", "number": 4854, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NDoxOFrOD8hADg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0Mzo0MFrOEA19yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgxODM4OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NDoxOFrOGVgMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NDoxOFrOGVgMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMDcwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by matching with the supplied name.\n          \n          \n            \n                 * Find a {@link RegisteredService} by matching with the supplied name.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425200702", "createdAt": "2020-05-14T14:54:18Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730d5135275f85e7dafb96c4674cadafd274c15f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgxOTMzOnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NDoyOVrOGVgM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NDoyOVrOGVgM0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMDg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService that matches the supplied service.\n          \n          \n            \n                 * @return the {@link RegisteredService} that matches the supplied service.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425200851", "createdAt": "2020-05-14T14:54:29Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730d5135275f85e7dafb96c4674cadafd274c15f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgyMjAwOnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NTowMVrOGVgOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NTowMVrOGVgOig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTI5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by matching with the supplied name.\n          \n          \n            \n                 * Find a {@link RegisteredService} by matching with the supplied name.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425201290", "createdAt": "2020-05-14T14:55:01Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.\n+     */\n+    RegisteredService findServiceByName(String name);\n+\n+    /**\n+     * Find a RegisteredService by matching with the supplied name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730d5135275f85e7dafb96c4674cadafd274c15f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgyMzExOnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NToxNFrOGVgPOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NToxNFrOGVgPOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService that matches the supplied service.\n          \n          \n            \n                 * @return the {@link RegisteredService} that matches the supplied service.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425201465", "createdAt": "2020-05-14T14:55:14Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.\n+     */\n+    RegisteredService findServiceByName(String name);\n+\n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param <T>   the type parameter\n+     * @param name    the name to match with.\n+     * @param clazz the clazz\n+     * @return the RegisteredService that matches the supplied service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730d5135275f85e7dafb96c4674cadafd274c15f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgyNzg5OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NjoxMVrOGVgSOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NjoxMVrOGVgSOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMjIzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RegisteredService service = getCandidateServicesToMatch(serviceId)\n          \n          \n            \n                    var service = getCandidateServicesToMatch(serviceId)", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425202232", "createdAt": "2020-05-14T14:56:11Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +104,14 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730d5135275f85e7dafb96c4674cadafd274c15f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgyODg2OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NjoyNVrOGVgS8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NjoyNVrOGVgS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMjQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RegisteredService result = this.services.get(id);\n          \n          \n            \n                    var result = this.services.get(id);", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425202416", "createdAt": "2020-05-14T14:56:25Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,30 +158,54 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        RegisteredService result = this.services.get(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730d5135275f85e7dafb96c4674cadafd274c15f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU4Njg2OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMjoyOFrOGaHtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMjoyOFrOGaHtwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjU2MQ==", "bodyText": "Seems like you should explain these in much more detail.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042561", "createdAt": "2020-05-25T18:32:28Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -144,7 +144,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU4NzM4OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMjo1MlrOGaHuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMjo1MlrOGaHuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by exact service id.\n          \n          \n            \n                 * Find a {@link RegisteredService} by exact service id.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042632", "createdAt": "2020-05-25T18:32:52Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,38 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by exact service id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU4Nzc5OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMzowNlrOGaHuQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMzowNlrOGaHuQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjY5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService\n          \n          \n            \n                 * @return the service definition or null", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042691", "createdAt": "2020-05-25T18:33:06Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,38 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the RegisteredService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU4ODgxOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMzo0OFrOGaHu3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMzo0OFrOGaHu3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mjg0NQ==", "bodyText": "Is this change needed?", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042845", "createdAt": "2020-05-25T18:33:48Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -63,7 +55,7 @@ public RegisteredService save(final RegisteredService registeredService) {\n     @Override\n     public synchronized RegisteredService save(final RegisteredService registeredService, final boolean publishEvent) {\n         publishEvent(new CasRegisteredServicePreSaveEvent(this, registeredService));\n-        val r = this.serviceRegistry.save(registeredService);\n+        var r = this.serviceRegistry.save(registeredService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU4OTcyOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNDoyMFrOGaHvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNDoyMFrOGaHvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mjk3MQ==", "bodyText": "It would be good to add some log statements here under trace to explain the behavior and flow.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042971", "createdAt": "2020-05-25T18:34:20Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,17 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU4OTk2OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNDozMlrOGaHvgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNDozMlrOGaHvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzAxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var results= serviceRegistry.findServicePredicate(predicate).\n          \n          \n            \n                    var results = serviceRegistry.findServicePredicate(predicate).", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043010", "createdAt": "2020-05-25T18:34:32Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -118,22 +117,24 @@ public RegisteredService findServiceBy(final String serviceId) {\n     @Override\n     public RegisteredService findServiceBy(final Service service) {\n         return Optional.ofNullable(service)\n-            .map(svc -> findServiceBy(svc.getId()))\n-            .orElse(null);\n+                .map(svc -> findServiceBy(svc.getId()))\n+                .orElse(null);\n     }\n \n     @Override\n     public Collection<RegisteredService> findServiceBy(final Predicate<RegisteredService> predicate) {\n         if (predicate == null) {\n             return new ArrayList<>(0);\n         }\n-\n-        return getAllServices()\n-            .stream()\n-            .filter(getRegisteredServicesFilteringPredicate(predicate))\n-            .sorted()\n-            .peek(RegisteredService::initialize)\n-            .collect(Collectors.toList());\n+        var results= serviceRegistry.findServicePredicate(predicate).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU5MTcwOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNTo1M1rOGaHwmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNTo1M1rOGaHwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzI5MA==", "bodyText": "Are you switching to var in order to correctly determine the final type?", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043290", "createdAt": "2020-05-25T18:35:53Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU5MjQ5OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNjoyOFrOGaHxIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNjoyOFrOGaHxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzQyNw==", "bodyText": "Similar to above, log statements under trace would be good.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043427", "createdAt": "2020-05-25T18:36:28Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU5Mjg5OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNjo0OVrOGaHxXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNjo0OVrOGaHxXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n          \n          \n            \n                    var result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043486", "createdAt": "2020-05-25T18:36:49Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU5NDM4OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNzo0OFrOGaHyKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozNzo0OFrOGaHyKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzY5MA==", "bodyText": "This won't work.\nWhat happens if the result is null?", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043690", "createdAt": "2020-05-25T18:37:48Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU5NTE5OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozODoxNlrOGaHypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozODoxNlrOGaHypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzgxMw==", "bodyText": "Likewise, logs would be good.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043813", "createdAt": "2020-05-25T18:38:16Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODU5NTQzOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozODozMlrOGaHyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozODozMlrOGaHyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mzg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n          \n          \n            \n                                LOGGER.trace(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043854", "createdAt": "2020-05-25T18:38:32Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values()\n-            .stream()\n-            .filter(this::validateAndFilterServiceByEnvironment)\n-            .filter(getRegisteredServicesFilteringPredicate())\n-            .sorted()\n-            .peek(RegisteredService::initialize)\n-            .collect(Collectors.toList());\n+        return this.services.asMap().values().\n+                stream().\n+                filter(this::validateAndFilterServiceByEnvironment).\n+                filter(getRegisteredServicesFilteringPredicate()).\n+                sorted().\n+                peek(RegisteredService::initialize).\n+                collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n-            .stream()\n-            .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n-                return r.getId();\n-            }, Function.identity(), (r, s) -> s));\n+        this.services.putAll(this.serviceRegistry.load()\n+                .stream()\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE3MDc0OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozNDoxMlrOGcXizg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozNDoxMlrOGcXizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n          \n          \n            \n                        LOGGER.trace(\"The service that matches the service id [{}] is not found in the cache; trying to find it from [{}]\",", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432399054", "createdAt": "2020-05-29T10:34:12Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,21 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE3MTM2OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozNDozMFrOGcXjMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozNDozMFrOGcXjMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTE1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n          \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432399152", "createdAt": "2020-05-29T10:34:30Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,21 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE4MTM0OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozODoxMlrOGcXpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozODoxMlrOGcXpPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDcwMg==", "bodyText": "This doesn't look right. Should be:\nresult = services.get(result.getId(), k -> this.serviceRegistry.findServiceById(id, clazz));\n\nAlso, don't forget to check the result to make sure it's has the correct type based on clazz", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400702", "createdAt": "2020-05-29T10:38:12Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE4MjM2OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozODozN1rOGcXp6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozODozN1rOGcXp6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n          \n          \n            \n                        LOGGER.trace(\"The service with name [{}] is not found in the cache, try to find it from [{}]\",", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400875", "createdAt": "2020-05-29T10:38:37Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE4Mjk5OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozODo1MlrOGcXqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozODo1MlrOGcXqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDk3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n          \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),\n          \n      \n    \n    \n  \n\nAlso, formatting of parameters is off here. Should be: \"The service [{}] is found in service registry [{}]\" and cached.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400979", "createdAt": "2020-05-29T10:38:52Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE4NjkxOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MDoyMFrOGcXsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MDoyMFrOGcXsvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTU5OQ==", "bodyText": "Same as above.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432401599", "createdAt": "2020-05-29T10:40:20Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE4NzM3OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MDoyOVrOGcXtAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MDoyOVrOGcXtAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTY2Nw==", "bodyText": "Same as above.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432401667", "createdAt": "2020-05-29T10:40:29Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE5NTU5OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MzoyM1rOGcXyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MzoyM1rOGcXyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzAwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n          \n          \n            \n                 * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403009", "createdAt": "2020-05-29T10:43:23Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE5NTkwOnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MzozMVrOGcXycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0MzozMVrOGcXycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzA1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache size specifies the maximum number of entries the cache may contain.\n          \n          \n            \n                 * Services cache size specifies the maximum number of entries the cache may contain.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403059", "createdAt": "2020-05-29T10:43:31Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size specifies the maximum number of entries the cache may contain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE5NjI1OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0Mzo0MFrOGcXytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0Mzo0MFrOGcXytA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzEyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache capacity sets the minimum total size for the internal data structures.\n          \n          \n            \n                 * Services cache capacity sets the minimum total size for the internal data structures.", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403124", "createdAt": "2020-05-29T10:43:40Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size specifies the maximum number of entries the cache may contain.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity sets the minimum total size for the internal data structures.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4048, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}