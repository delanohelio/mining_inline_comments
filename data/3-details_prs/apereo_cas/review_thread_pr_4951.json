{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTc4NjU1", "number": 4951, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOToxN1rOEucTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxMDo1MVrOEucW2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTMzNzY1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOToxN1rOHi2Pfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOToxN1rOHi2Pfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjMzNA==", "bodyText": "You don't need this. Use mocks, and then do when(myresolver.resolve(...)).thenThrow()...", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506302334", "createdAt": "2020-10-16T11:09:17Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);\n+\n+        val service1 = RegisteredServiceTestUtils.getRegisteredService(\"urn:abc:def.+\");\n+        service1.setEvaluationOrder(9);\n+        val entityID = \"https://sp.testshib.org/shibboleth-sp\";\n+        val service = webApplicationServiceFactory.createService(entityID);\n+\n+        locator.locate(List.of(service1), service, r -> r.matches(entityID));\n+    }\n+\n+    private static class BrokenMetadataResolver implements SamlRegisteredServiceCachingMetadataResolver {\n+        public MetadataResolver resolve(SamlRegisteredService service, CriteriaSet criteriaSet) {\n+            throw new IllegalStateException(\"This method shouldn't have been called\");\n+        }\n+\n+        public void invalidate() {\n+        }\n+\n+        public void invalidate(SamlRegisteredService s, CriteriaSet c) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTMzOTc1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOTo0NFrOHi2Q2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOTo0NFrOHi2Q2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjY4Mg==", "bodyText": "Remove author tag please, and put it at the top of the class instead.", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506302682", "createdAt": "2020-10-16T11:09:44Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTM0NDkzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxMDo0M1rOHi2UJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxMDo0M1rOHi2UJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMzUyNQ==", "bodyText": "You must assert the result somehow to actually verify things. The verification might in fact be : \"make sure nothing is thrown\", etc. if that's what you're going for.", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506303525", "createdAt": "2020-10-16T11:10:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);\n+\n+        val service1 = RegisteredServiceTestUtils.getRegisteredService(\"urn:abc:def.+\");\n+        service1.setEvaluationOrder(9);\n+        val entityID = \"https://sp.testshib.org/shibboleth-sp\";\n+        val service = webApplicationServiceFactory.createService(entityID);\n+\n+        locator.locate(List.of(service1), service, r -> r.matches(entityID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTM0NTUyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxMDo1MVrOHi2Uhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxMDo1MVrOHi2Uhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMzYyMg==", "bodyText": "Switch to val", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506303622", "createdAt": "2020-10-16T11:10:51Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3982, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}