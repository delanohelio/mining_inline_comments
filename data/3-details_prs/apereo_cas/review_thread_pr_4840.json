{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTgxOTE4", "number": 4840, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNjozNlrOD8Voxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzo0MVrOD8Vp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk1NjU1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-rest-core/src/main/java/org/apereo/cas/support/rest/resources/RestResourceUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNjozNlrOGVNrDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowODo1MlrOGVOzJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzI5Mw==", "bodyText": "Why this change?", "url": "https://github.com/apereo/cas/pull/4840#discussion_r424897293", "createdAt": "2020-05-14T06:26:36Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-rest-core/src/main/java/org/apereo/cas/support/rest/resources/RestResourceUtils.java", "diffHunk": "@@ -39,8 +39,12 @@\n             .findAndRegisterModules()\n             .configure(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE, false)\n             .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)\n-            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY)\n-            .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+        MAPPER.activateDefaultTyping(\n+                MAPPER.getPolymorphicTypeValidator(),\n+                ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef736679dddcf791d36da49bae0b1466119cb0a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNDA0NQ==", "bodyText": "enableDefaultTyping is deprecated and sonar check points to this https://rules.sonarsource.com/java/RSPEC-4544", "url": "https://github.com/apereo/cas/pull/4840#discussion_r424914045", "createdAt": "2020-05-14T07:05:14Z", "author": {"login": "johnjcool"}, "path": "support/cas-server-support-rest-core/src/main/java/org/apereo/cas/support/rest/resources/RestResourceUtils.java", "diffHunk": "@@ -39,8 +39,12 @@\n             .findAndRegisterModules()\n             .configure(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE, false)\n             .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)\n-            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY)\n-            .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+        MAPPER.activateDefaultTyping(\n+                MAPPER.getPolymorphicTypeValidator(),\n+                ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzI5Mw=="}, "originalCommit": {"oid": "ef736679dddcf791d36da49bae0b1466119cb0a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTU3MA==", "bodyText": "under the hood jackson is doing the same in enableDefaultTyping.", "url": "https://github.com/apereo/cas/pull/4840#discussion_r424915570", "createdAt": "2020-05-14T07:08:30Z", "author": {"login": "johnjcool"}, "path": "support/cas-server-support-rest-core/src/main/java/org/apereo/cas/support/rest/resources/RestResourceUtils.java", "diffHunk": "@@ -39,8 +39,12 @@\n             .findAndRegisterModules()\n             .configure(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE, false)\n             .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)\n-            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY)\n-            .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+        MAPPER.activateDefaultTyping(\n+                MAPPER.getPolymorphicTypeValidator(),\n+                ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzI5Mw=="}, "originalCommit": {"oid": "ef736679dddcf791d36da49bae0b1466119cb0a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNTc1MQ==", "bodyText": "Indeed. However, since that is unrelated to your changeset, please reset back to original. If you want to clean up deprecated instances such as this, that would be a separate PR and one that needs to be applied everywhere to be consistent.", "url": "https://github.com/apereo/cas/pull/4840#discussion_r424915751", "createdAt": "2020-05-14T07:08:52Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-rest-core/src/main/java/org/apereo/cas/support/rest/resources/RestResourceUtils.java", "diffHunk": "@@ -39,8 +39,12 @@\n             .findAndRegisterModules()\n             .configure(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE, false)\n             .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)\n-            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY)\n-            .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+            .setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+        MAPPER.activateDefaultTyping(\n+                MAPPER.getPolymorphicTypeValidator(),\n+                ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzI5Mw=="}, "originalCommit": {"oid": "ef736679dddcf791d36da49bae0b1466119cb0a4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk1OTA4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-rest/src/test/java/org/apereo/cas/support/rest/RestResourceUtilsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzozMFrOGVNsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzozMFrOGVNsfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzY2MA==", "bodyText": "Tag with @Tag(\"RestfulApi\")", "url": "https://github.com/apereo/cas/pull/4840#discussion_r424897660", "createdAt": "2020-05-14T06:27:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-rest/src/test/java/org/apereo/cas/support/rest/RestResourceUtilsTests.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.apereo.cas.support.rest;\n+\n+import lombok.val;\n+import org.apereo.cas.authentication.AuthenticationException;\n+import org.apereo.cas.authentication.adaptive.UnauthorizedAuthenticationException;\n+import org.apereo.cas.support.rest.resources.RestResourceUtils;\n+import org.apereo.cas.util.CollectionUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.http.ResponseEntity;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.HashMap;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * This is {@link RestResourceUtilsTests}.\n+ *\n+ * @author john.j.cool\n+ * @since 6.1.6\n+ */\n+@ExtendWith(MockitoExtension.class)\n+public class RestResourceUtilsTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef736679dddcf791d36da49bae0b1466119cb0a4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk1OTQ2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-rest/src/test/java/org/apereo/cas/support/rest/RestResourceUtilsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzo0MVrOGVNsuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzo0MVrOGVNsuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ResponseEntity<String> response = RestResourceUtils.createResponseEntityForAuthnFailure(\n          \n          \n            \n                    val response = RestResourceUtils.createResponseEntityForAuthnFailure(", "url": "https://github.com/apereo/cas/pull/4840#discussion_r424897723", "createdAt": "2020-05-14T06:27:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-rest/src/test/java/org/apereo/cas/support/rest/RestResourceUtilsTests.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.apereo.cas.support.rest;\n+\n+import lombok.val;\n+import org.apereo.cas.authentication.AuthenticationException;\n+import org.apereo.cas.authentication.adaptive.UnauthorizedAuthenticationException;\n+import org.apereo.cas.support.rest.resources.RestResourceUtils;\n+import org.apereo.cas.util.CollectionUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.http.ResponseEntity;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.HashMap;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * This is {@link RestResourceUtilsTests}.\n+ *\n+ * @author john.j.cool\n+ * @since 6.1.6\n+ */\n+@ExtendWith(MockitoExtension.class)\n+public class RestResourceUtilsTests {\n+\n+    @Mock\n+    private ApplicationContext context;\n+\n+    @BeforeEach\n+    public void before() {\n+        MockitoAnnotations.initMocks(this);\n+        doReturn(\"test\").when(context)\n+                .getMessage(any(), any(), any());\n+    }\n+\n+    @Test\n+    public void verifyNoFrameworkClassSendToClient() {\n+        val request = mock(HttpServletRequest.class);\n+        val msg = \"test\";\n+        val map = CollectionUtils.<String, Throwable>wrap(\n+                UnauthorizedAuthenticationException.class.getSimpleName(),\n+                new UnauthorizedAuthenticationException(msg)\n+        );\n+\n+        ResponseEntity<String> response = RestResourceUtils.createResponseEntityForAuthnFailure(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef736679dddcf791d36da49bae0b1466119cb0a4"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4034, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}