{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTIyNDE2", "number": 5001, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MToxNlrOE_j8qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowODowOVrOE__PZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg0NzEyOnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MToxNlrOH9VPgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjozNzoxNlrOH99yVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzIxNg==", "bodyText": "Remove all. Use libraries.springws instead", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534073216", "createdAt": "2020-12-02T10:51:16Z", "author": {"login": "mmoayyed"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3409,6 +3409,28 @@ ext.libraries = [\n \n                 }\n         ],\n+        springwsclient          : [\n+                dependencies.create(\"org.springframework.boot:spring-boot-starter-web-services:$springBootVersion\") {\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-dom\")\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-common\")\n+                    exclude(group: \"org.jvnet.mimepull\", module: \"mimepull\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-core\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-classic\")\n+                    exclude(group: \"log4j\", module: \"log4j\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-api\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-log4j12\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-web\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-validation\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-actuator\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-logging\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter\")\n+\n+                },\n+                dependencies.create(\"org.springframework.ws:spring-ws-support:$springWsVersion\") {\n+                },\n+                dependencies.create(\"com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion\") {\n+                },\n+        ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5MDg3MA==", "bodyText": "In fact, I tried that but springws is not enough, it's missing the spring-ws-support and the saaj-impl dependencies.\nDo you want me to add them explicitly directly in build.gradle of the module?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534090870", "createdAt": "2020-12-02T11:20:53Z", "author": {"login": "leleuj"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3409,6 +3409,28 @@ ext.libraries = [\n \n                 }\n         ],\n+        springwsclient          : [\n+                dependencies.create(\"org.springframework.boot:spring-boot-starter-web-services:$springBootVersion\") {\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-dom\")\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-common\")\n+                    exclude(group: \"org.jvnet.mimepull\", module: \"mimepull\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-core\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-classic\")\n+                    exclude(group: \"log4j\", module: \"log4j\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-api\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-log4j12\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-web\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-validation\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-actuator\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-logging\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter\")\n+\n+                },\n+                dependencies.create(\"org.springframework.ws:spring-ws-support:$springWsVersion\") {\n+                },\n+                dependencies.create(\"com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion\") {\n+                },\n+        ],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzIxNg=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNzQ5NQ==", "bodyText": "Thanks for the update. Please add the missing dependencies to the springws closure instead. The (Any) module should only reference libraries.springws to bring on support for Spring WS. This will actually become quite handy, as I am also working on another MFA implementation that requires SOAP support and I should be able to reuse your work here.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534737495", "createdAt": "2020-12-03T06:37:16Z", "author": {"login": "mmoayyed"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3409,6 +3409,28 @@ ext.libraries = [\n \n                 }\n         ],\n+        springwsclient          : [\n+                dependencies.create(\"org.springframework.boot:spring-boot-starter-web-services:$springBootVersion\") {\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-dom\")\n+                    exclude(group: \"org.apache.wss4j\", module: \"wss4j-ws-security-common\")\n+                    exclude(group: \"org.jvnet.mimepull\", module: \"mimepull\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-core\")\n+                    exclude(group: \"ch.qos.logback\", module: \"logback-classic\")\n+                    exclude(group: \"log4j\", module: \"log4j\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-api\")\n+                    exclude(group: \"org.slf4j\", module: \"slf4j-log4j12\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-web\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-validation\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-actuator\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter-logging\")\n+                    exclude(group: \"org.springframework.boot\", module: \"spring-boot-starter\")\n+\n+                },\n+                dependencies.create(\"org.springframework.ws:spring-ws-support:$springWsVersion\") {\n+                },\n+                dependencies.create(\"com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion\") {\n+                },\n+        ],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzIxNg=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg0ODQzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MTozOFrOH9VQRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMToyMToxNFrOH9WVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzQxNA==", "bodyText": "Remove in favor of springws", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534073414", "createdAt": "2020-12-02T10:51:38Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = \"Apereo CAS Inwebo MFA Support\"\n+dependencies {\n+    api project(\":api:cas-server-core-api-webflow\")\n+\n+    implementation libraries.springwsclient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5MTA4NA==", "bodyText": "Not sure on this. See my previous comment.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534091084", "createdAt": "2020-12-02T11:21:14Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = \"Apereo CAS Inwebo MFA Support\"\n+dependencies {\n+    api project(\":api:cas-server-core-api-webflow\")\n+\n+    implementation libraries.springwsclient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzQxNA=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg0OTQ3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MTo1NlrOH9VQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTozNDoxNFrOH9WysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzU4MA==", "bodyText": "Also add ...-util-api for tests.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534073580", "createdAt": "2020-12-02T10:51:56Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = \"Apereo CAS Inwebo MFA Support\"\n+dependencies {\n+    api project(\":api:cas-server-core-api-webflow\")\n+\n+    implementation libraries.springwsclient\n+\n+    implementation project(\":api:cas-server-core-api-mfa\")\n+    implementation project(\":core:cas-server-core-authentication-mfa-api\")\n+    implementation project(\":core:cas-server-core-webflow-mfa-api\")\n+    implementation project(\":core:cas-server-core-webflow-api\")\n+    implementation project(\":core:cas-server-core-util-api\")\n+    implementation project(\":core:cas-server-core-authentication-api\")\n+    implementation project(\":core:cas-server-core-web-api\")\n+    implementation project(\":support:cas-server-support-trusted-mfa-core\")\n+\n+    compileOnlyApi project(\":support:cas-server-support-trusted-mfa\")\n+\n+    testImplementation project(path: \":core:cas-server-core-authentication-api\", configuration: \"tests\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5ODYwOQ==", "bodyText": "OK. I just added the dependency.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534098609", "createdAt": "2020-12-02T11:34:14Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = \"Apereo CAS Inwebo MFA Support\"\n+dependencies {\n+    api project(\":api:cas-server-core-api-webflow\")\n+\n+    implementation libraries.springwsclient\n+\n+    implementation project(\":api:cas-server-core-api-mfa\")\n+    implementation project(\":core:cas-server-core-authentication-mfa-api\")\n+    implementation project(\":core:cas-server-core-webflow-mfa-api\")\n+    implementation project(\":core:cas-server-core-webflow-api\")\n+    implementation project(\":core:cas-server-core-util-api\")\n+    implementation project(\":core:cas-server-core-authentication-api\")\n+    implementation project(\":core:cas-server-core-web-api\")\n+    implementation project(\":support:cas-server-support-trusted-mfa-core\")\n+\n+    compileOnlyApi project(\":support:cas-server-support-trusted-mfa\")\n+\n+    testImplementation project(path: \":core:cas-server-core-authentication-api\", configuration: \"tests\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MzU4MA=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg1NDM0OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MzoxNVrOH9VT8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo0NTo1N1rOH9-R_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg==", "bodyText": "This doesn't seem right. You are not actually doing authentication, when the method asks for doAuthentication. The credential needs to be verified somehow. If you're doing that elsewhere, you'd need to move that logic into the handler here.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534074352", "createdAt": "2020-12-02T10:53:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.apereo.cas.support.inwebo.authentication;\n+\n+import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;\n+import org.apereo.cas.authentication.Credential;\n+import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+import org.apereo.cas.services.ServicesManager;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * The Inwebo authentication handler.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n+\n+    public InweboAuthenticationHandler(final ServicesManager servicesManager,\n+                                       final PrincipalFactory principalFactory,\n+                                       final InweboMultifactorProperties inweboProperties) {\n+        super(inweboProperties.getName(),\n+              servicesManager,\n+              principalFactory,\n+              inweboProperties.getOrder());\n+    }\n+\n+    @Override\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n+        val login = credential.getId();\n+        LOGGER.info(\"Creating principal result for: {}\", login);\n+        val pushCredential = (InweboCredential) credential;\n+        val principal = this.principalFactory.createPrincipal(login);\n+        return createHandlerResult(pushCredential, principal);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwMjgzNw==", "bodyText": "I had that in mind. This is done on purpose. Let me explain.\nIn fact, for the push notification, we need to call Inwebo to check if the user has accepted the notification on his mobile/desktop app. The response can be \"yes\" or \"timeout\" if the user has waited too long or \"refused\" if the user has refused. But this can also be \"wait\" if the user has not accepted yet and there remains time. And in that case, we must come back on the \"waiting screen\".\nThis is why I control this behavior in a webflow action: https://github.com/apereo/cas/pull/5001/files#diff-f8b3de0873b2467c5a3d782d751949279eec743827a82a353b33ee9795cdbaacR59\nFor the browser authentication, I reused the same logic to only have one InweboCredential and InweboAuthenticationHandler for both authentication methods (mobile/desktop + browser).\nDoes it make sense?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534102837", "createdAt": "2020-12-02T11:41:56Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.apereo.cas.support.inwebo.authentication;\n+\n+import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;\n+import org.apereo.cas.authentication.Credential;\n+import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+import org.apereo.cas.services.ServicesManager;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * The Inwebo authentication handler.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n+\n+    public InweboAuthenticationHandler(final ServicesManager servicesManager,\n+                                       final PrincipalFactory principalFactory,\n+                                       final InweboMultifactorProperties inweboProperties) {\n+        super(inweboProperties.getName(),\n+              servicesManager,\n+              principalFactory,\n+              inweboProperties.getOrder());\n+    }\n+\n+    @Override\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n+        val login = credential.getId();\n+        LOGGER.info(\"Creating principal result for: {}\", login);\n+        val pushCredential = (InweboCredential) credential;\n+        val principal = this.principalFactory.createPrincipal(login);\n+        return createHandlerResult(pushCredential, principal);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NTU5Nw==", "bodyText": "I don't entirely follow. I guess the real question is, what does it really mean to authenticate with Inwebo? At some point somewhere, you would be receiving a response back from that service that needs validation right? That response needs to be validated by the handler which is the actual act of authentication. What you have here as an authentication handler is not actually handling any sort of authentication. It's stub code, and therefore it's inconsistent with all other handlers we have.\nIf the response is \"wait until the user responds\", you don't need to invoke the authentication handler just yet. You'd wait until the response is something that can be in fact validated, right? The only time you need to invoke the handler is when there is something that can be terminally validated, and for sure, the validation must happen in the handler, and the entire authentication engine machinery that goes along with it. Otherwise, it doesn't make much sense to have a handler in the engine that basically does nothing other than to satisfy some webflow weirdness. That's an implementation nuance that creeping into the authentication handler/manager engine and should be avoided.\nI am happy to lend a hand in this area and propose alternatives, if you think that would be helpful.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534745597", "createdAt": "2020-12-03T06:45:57Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.apereo.cas.support.inwebo.authentication;\n+\n+import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;\n+import org.apereo.cas.authentication.Credential;\n+import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+import org.apereo.cas.services.ServicesManager;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * The Inwebo authentication handler.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n+\n+    public InweboAuthenticationHandler(final ServicesManager servicesManager,\n+                                       final PrincipalFactory principalFactory,\n+                                       final InweboMultifactorProperties inweboProperties) {\n+        super(inweboProperties.getName(),\n+              servicesManager,\n+              principalFactory,\n+              inweboProperties.getOrder());\n+    }\n+\n+    @Override\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n+        val login = credential.getId();\n+        LOGGER.info(\"Creating principal result for: {}\", login);\n+        val pushCredential = (InweboCredential) credential;\n+        val principal = this.principalFactory.createPrincipal(login);\n+        return createHandlerResult(pushCredential, principal);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg=="}, "originalCommit": {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTA5NjE2OnYy", "diffSide": "RIGHT", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjozNTo0N1rOH99szA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoxOTozM1rOH-HX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng==", "bodyText": "Switch type to SpringResource instead", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534736076", "createdAt": "2020-12-03T06:35:47Z", "author": {"login": "mmoayyed"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apereo.cas.configuration.model.support.mfa;\n+\n+import org.apereo.cas.configuration.support.RequiredProperty;\n+import org.apereo.cas.configuration.support.RequiresModule;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * The Inwebo MFA properties.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiresModule(name = \"cas-server-support-inwebo-mfa\")\n+@Getter\n+@Setter\n+@Accessors(chain = true)\n+public class InweboMultifactorProperties extends BaseMultifactorProviderProperties {\n+\n+    /**\n+     * Provider id by default.\n+     */\n+    public static final String DEFAULT_IDENTIFIER = \"mfa-inwebo\";\n+\n+    private static final long serialVersionUID = -942637204816051814L;\n+\n+    /**\n+     * The Inwebo serviceId.\n+     */\n+    @RequiredProperty\n+    private Long serviceId;\n+\n+    /**\n+     * The location of the client certificate (PKCS12 format).\n+     */\n+    @RequiredProperty\n+    private transient Resource clientCertificate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgyMDA4MA==", "bodyText": "I can't find the SpringResource class, in which package/jar is it?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534820080", "createdAt": "2020-12-03T07:36:21Z", "author": {"login": "leleuj"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apereo.cas.configuration.model.support.mfa;\n+\n+import org.apereo.cas.configuration.support.RequiredProperty;\n+import org.apereo.cas.configuration.support.RequiresModule;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * The Inwebo MFA properties.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiresModule(name = \"cas-server-support-inwebo-mfa\")\n+@Getter\n+@Setter\n+@Accessors(chain = true)\n+public class InweboMultifactorProperties extends BaseMultifactorProviderProperties {\n+\n+    /**\n+     * Provider id by default.\n+     */\n+    public static final String DEFAULT_IDENTIFIER = \"mfa-inwebo\";\n+\n+    private static final long serialVersionUID = -942637204816051814L;\n+\n+    /**\n+     * The Inwebo serviceId.\n+     */\n+    @RequiredProperty\n+    private Long serviceId;\n+\n+    /**\n+     * The location of the client certificate (PKCS12 format).\n+     */\n+    @RequiredProperty\n+    private transient Resource clientCertificate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5NDU3NA==", "bodyText": "OK. I changed that to use SpringResourceProperties. I also supplemented the springws dependency and remove the new springwsclient I added.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534894574", "createdAt": "2020-12-03T08:19:33Z", "author": {"login": "leleuj"}, "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apereo.cas.configuration.model.support.mfa;\n+\n+import org.apereo.cas.configuration.support.RequiredProperty;\n+import org.apereo.cas.configuration.support.RequiresModule;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * The Inwebo MFA properties.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiresModule(name = \"cas-server-support-inwebo-mfa\")\n+@Getter\n+@Setter\n+@Accessors(chain = true)\n+public class InweboMultifactorProperties extends BaseMultifactorProviderProperties {\n+\n+    /**\n+     * Provider id by default.\n+     */\n+    public static final String DEFAULT_IDENTIFIER = \"mfa-inwebo\";\n+\n+    private static final long serialVersionUID = -942637204816051814L;\n+\n+    /**\n+     * The Inwebo serviceId.\n+     */\n+    @RequiredProperty\n+    private Long serviceId;\n+\n+    /**\n+     * The location of the client certificate (PKCS12 format).\n+     */\n+    @RequiredProperty\n+    private transient Resource clientCertificate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE1OTI2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo0NzoyMVrOH9-XCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxMjo0MVrOH_MRkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0Njg5MA==", "bodyText": "Please rename the class to carry the MFA provider name, much like other MFA components to be consistent; something like InweboAuthenticationDeviceMetadata... etc", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534746890", "createdAt": "2020-12-03T06:47:21Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlanConfigurer;\n+import org.apereo.cas.authentication.AuthenticationHandler;\n+import org.apereo.cas.authentication.AuthenticationMetaDataPopulator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationFailureModeEvaluator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationProvider;\n+import org.apereo.cas.authentication.bypass.MultifactorAuthenticationProviderBypassEvaluator;\n+import org.apereo.cas.authentication.handler.ByCredentialTypeAuthenticationHandlerResolver;\n+import org.apereo.cas.authentication.metadata.AuthenticationContextAttributeMetaDataPopulator;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.InweboMultifactorAuthenticationProvider;\n+import org.apereo.cas.support.inwebo.authentication.AuthenticationDeviceMetadataPopulator;\n+import org.apereo.cas.support.inwebo.authentication.InweboAuthenticationHandler;\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * The Inwebo MFA authentication configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboAuthenticationConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+public class InweboAuthenticationConfiguration {\n+\n+    @Autowired\n+    @Qualifier(\"inweboBypassEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationProviderBypassEvaluator> inweboBypassEvaluator;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    @Qualifier(\"failureModeEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationFailureModeEvaluator> failureModeEvaluator;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationProvider\")\n+    @RefreshScope\n+    public MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider() {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val p = new InweboMultifactorAuthenticationProvider();\n+        p.setBypassEvaluator(inweboBypassEvaluator.getObject());\n+        p.setFailureMode(inwebo.getFailureMode());\n+        p.setFailureModeEvaluator(failureModeEvaluator.getObject());\n+        p.setOrder(inwebo.getRank());\n+        p.setId(inwebo.getId());\n+        return p;\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboPrincipalFactory\")\n+    @Bean\n+    public PrincipalFactory inweboPrincipalFactory() {\n+        return PrincipalFactoryUtils.newPrincipalFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationHandler\")\n+    @Bean\n+    @RefreshScope\n+    public AuthenticationHandler inweboAuthenticationHandler() {\n+        return new InweboAuthenticationHandler(servicesManager.getObject(), inweboPrincipalFactory(), casProperties.getAuthn().getMfa().getInwebo());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationMetaDataPopulator\")\n+    @RefreshScope\n+    public AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator() {\n+        return new AuthenticationContextAttributeMetaDataPopulator(\n+                casProperties.getAuthn().getMfa().getAuthenticationContextAttribute(),\n+                inweboAuthenticationHandler(),\n+                inweboMultifactorAuthenticationProvider().getId()\n+        );\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n+    public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n+        return new AuthenticationDeviceMetadataPopulator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMzQ0MQ==", "bodyText": "I will rename it.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536023441", "createdAt": "2020-12-04T11:12:41Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlanConfigurer;\n+import org.apereo.cas.authentication.AuthenticationHandler;\n+import org.apereo.cas.authentication.AuthenticationMetaDataPopulator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationFailureModeEvaluator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationProvider;\n+import org.apereo.cas.authentication.bypass.MultifactorAuthenticationProviderBypassEvaluator;\n+import org.apereo.cas.authentication.handler.ByCredentialTypeAuthenticationHandlerResolver;\n+import org.apereo.cas.authentication.metadata.AuthenticationContextAttributeMetaDataPopulator;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.InweboMultifactorAuthenticationProvider;\n+import org.apereo.cas.support.inwebo.authentication.AuthenticationDeviceMetadataPopulator;\n+import org.apereo.cas.support.inwebo.authentication.InweboAuthenticationHandler;\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * The Inwebo MFA authentication configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboAuthenticationConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+public class InweboAuthenticationConfiguration {\n+\n+    @Autowired\n+    @Qualifier(\"inweboBypassEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationProviderBypassEvaluator> inweboBypassEvaluator;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    @Qualifier(\"failureModeEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationFailureModeEvaluator> failureModeEvaluator;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationProvider\")\n+    @RefreshScope\n+    public MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider() {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val p = new InweboMultifactorAuthenticationProvider();\n+        p.setBypassEvaluator(inweboBypassEvaluator.getObject());\n+        p.setFailureMode(inwebo.getFailureMode());\n+        p.setFailureModeEvaluator(failureModeEvaluator.getObject());\n+        p.setOrder(inwebo.getRank());\n+        p.setId(inwebo.getId());\n+        return p;\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboPrincipalFactory\")\n+    @Bean\n+    public PrincipalFactory inweboPrincipalFactory() {\n+        return PrincipalFactoryUtils.newPrincipalFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationHandler\")\n+    @Bean\n+    @RefreshScope\n+    public AuthenticationHandler inweboAuthenticationHandler() {\n+        return new InweboAuthenticationHandler(servicesManager.getObject(), inweboPrincipalFactory(), casProperties.getAuthn().getMfa().getInwebo());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationMetaDataPopulator\")\n+    @RefreshScope\n+    public AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator() {\n+        return new AuthenticationContextAttributeMetaDataPopulator(\n+                casProperties.getAuthn().getMfa().getAuthenticationContextAttribute(),\n+                inweboAuthenticationHandler(),\n+                inweboMultifactorAuthenticationProvider().getId()\n+        );\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n+    public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n+        return new AuthenticationDeviceMetadataPopulator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0Njg5MA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE3NDg2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1MDoxNlrOH9-iKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxMzo1OVrOH_MUUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0OTczNw==", "bodyText": "Does this really need to be a bean? If so, please prefix all bean names to use inwebo. I ask the question because, is it possible for spring-ws auto-configuration to be affected by this bean? Is it going to be pick up every bean that is of type Jaxb2Marshaller? Will this interfere with some other module that wants to have their own Jaxb2Marshaller?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534749737", "createdAt": "2020-12-03T06:50:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyNDE0NA==", "bodyText": "This must be at least renamed as it could conflict yes.\nBut it's certainly better to inline it inside the consoleAdmin() method. Will do that.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536024144", "createdAt": "2020-12-04T11:13:59Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0OTczNw=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE3OTM4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1MDo1OVrOH9-lHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjo1MjozNlrOICFKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA==", "bodyText": "Wouldn't you be able to just merge the 3 beans that exist here to the InweboAuthenticationConfiguration class? Why a separate config?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534750494", "createdAt": "2020-12-03T06:50:59Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyNjA0Mg==", "bodyText": "I'd prefer to keep the Inwebo services dedicated beans in a separate bean configuration.\nThough, I propose to rename it InweboServiceConfiguration to make things clearer.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536026042", "createdAt": "2020-12-04T11:17:27Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MjU4NA==", "bodyText": "I renamed InweboConfiguration into InweboServiceConfiguration.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539052584", "createdAt": "2020-12-09T06:52:36Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE4OTgyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1MjoxNVrOH9-sYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOToxMTo0M1rOICKDhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA==", "bodyText": "You should not preferably spin up an isolated trust-manager; rather you should be using one that is provided by CAS automatically so the behavior of the trust-manager can be controlled via settings. I believe this is done in the util or web module where the http-client is constructed.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534752354", "createdAt": "2020-12-03T06:52:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n+    @RefreshScope\n+    public ConsoleAdmin consoleAdmin() {\n+        val client = new ConsoleAdmin();\n+        client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n+        client.setMarshaller(marshaller());\n+        client.setUnmarshaller(marshaller());\n+\n+        try {\n+            val messageSender = new HttpsUrlConnectionMessageSender();\n+            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+            tmFactory.init((KeyStore) null);\n+            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            client.setMessageSender(messageSender);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MjQxMg==", "bodyText": "Indeed, there is a DefaultCasSslContext which is used in CasCoreHttpConfiguration for the HTTP client.\nThough, the trustManagers of the DefaultCasSslContext, nor the DefaultCasSslContext itself are exposed.\nSo the idea here is to expose them to use this DefaultCasSslContext to get the built trustManagers, right?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536042412", "createdAt": "2020-12-04T11:47:36Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n+    @RefreshScope\n+    public ConsoleAdmin consoleAdmin() {\n+        val client = new ConsoleAdmin();\n+        client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n+        client.setMarshaller(marshaller());\n+        client.setUnmarshaller(marshaller());\n+\n+        try {\n+            val messageSender = new HttpsUrlConnectionMessageSender();\n+            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+            tmFactory.init((KeyStore) null);\n+            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            client.setMessageSender(messageSender);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMjgwNA==", "bodyText": "OK. This is committed. I re-use the casSslContext if it exists to get its trustManagers.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539132804", "createdAt": "2020-12-09T09:11:43Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n+    @RefreshScope\n+    public ConsoleAdmin consoleAdmin() {\n+        val client = new ConsoleAdmin();\n+        client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n+        client.setMarshaller(marshaller());\n+        client.setUnmarshaller(marshaller());\n+\n+        try {\n+            val messageSender = new HttpsUrlConnectionMessageSender();\n+            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+            tmFactory.init((KeyStore) null);\n+            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            client.setMessageSender(messageSender);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE5Nzk4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1MzoxMFrOH9-yRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1MToxNVrOH_NjQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1Mzg2Mg==", "bodyText": "Please prefix all webflow actions to carry the MFA provider name, similar to simple-mfa or Duo.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534753862", "createdAt": "2020-12-03T06:53:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NDM1NQ==", "bodyText": "This makes sense. I will rename all SWF actions.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536044355", "createdAt": "2020-12-04T11:51:15Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1Mzg2Mg=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTIxNjA4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1NToxNlrOH9--xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTo1NTo0MVrOIAemYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NzA2MQ==", "bodyText": "This is unnecessary. Use StaticEventExecutionAction#SUCCESS instead.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534757061", "createdAt": "2020-12-03T06:55:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @RefreshScope\n+    public Action checkUserAction() {\n+        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n+    public Action mustEnrollAction() {\n+        return new MustEnrollAction(messageSource.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @RefreshScope\n+    public Action checkAuthenticationAction() {\n+        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"successAction\")\n+    public Action successAction() {\n+        return new SuccessAction();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3MjI1OQ==", "bodyText": "Will do", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537372259", "createdAt": "2020-12-07T09:55:41Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @RefreshScope\n+    public Action checkUserAction() {\n+        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n+    public Action mustEnrollAction() {\n+        return new MustEnrollAction(messageSource.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @RefreshScope\n+    public Action checkAuthenticationAction() {\n+        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"successAction\")\n+    public Action successAction() {\n+        return new SuccessAction();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NzA2MQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTIyMzU3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1NjoxMFrOH9_DyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTo1NToyMVrOIAelig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODM0NQ==", "bodyText": "It's not clear if this method is overriding something from the parent class? If not, why not mark this as a static method?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534758345", "createdAt": "2020-12-03T06:56:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearch;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResult;\n+\n+import lombok.val;\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+/**\n+ * The Inwebo SOAP client for user management.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class ConsoleAdmin extends WebServiceGatewaySupport {\n+\n+    public LoginSearchResult loginSearch(final String login, final long serviceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3MjA0Mg==", "bodyText": "I can't mark it as static as I use the getWebServiceTemplate() parent method.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537372042", "createdAt": "2020-12-07T09:55:21Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearch;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResult;\n+\n+import lombok.val;\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+/**\n+ * The Inwebo SOAP client for user management.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class ConsoleAdmin extends WebServiceGatewaySupport {\n+\n+    public LoginSearchResult loginSearch(final String login, final long serviceId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODM0NQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTIyODA5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1NjozOVrOH9_HAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDowNjowMFrOIAfBUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1OTE2OA==", "bodyText": "Mark as static, and make sure you're finding/registering jackson modules as other instances of mapper do.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534759168", "createdAt": "2020-12-03T06:56:39Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3OTE1Mw==", "bodyText": "Yes, I will change that.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537379153", "createdAt": "2020-12-07T10:06:00Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1OTE2OA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTIzMjkzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1NzoxMFrOH9_KfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1NDo0N1rOIAhBIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MDA2MQ==", "bodyText": "SSLContext should not be constructed manually, but should be obtained from the runtime; there is one already available for you.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534760061", "createdAt": "2020-12-03T06:57:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMTg3NA==", "bodyText": "This is my specific SSLContext with my specific client certificate for Inwebo. This is why I build it manually.\nI can't re-use the default one nor change the default one.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537411874", "createdAt": "2020-12-07T10:54:47Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MDA2MQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI0MTc2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1ODoxNVrOH9_Qtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowODoyNFrOIAhilA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MTY1NQ==", "bodyText": "Possible to use a URL builder to avoid string-concatenation and encoding params manually?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534761655", "createdAt": "2020-12-03T06:58:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+        this.casProperties = casProperties;\n+        this.consoleAdmin = consoleAdmin;\n+\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        try {\n+            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            this.context = SSLContext.getInstance(\"TLS\");\n+            context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n+        } catch (final Exception e) {\n+            throw new RuntimeException(\"Cannot initialize Inwebo service\", e);\n+        }\n+    }\n+\n+    public LoginSearchResponse loginSearch(final String login) {\n+        val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n+        val err = soap.getErr();\n+        val response = (LoginSearchResponse) buildResponse(new LoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        if (response.isOk()) {\n+            val count = soap.getCount();\n+            response.setCount(count);\n+            if (count == 1) {\n+                response.setUserId(soap.getId().get(0));\n+                response.setUserStatus(soap.getStatus().get(0));\n+                response.setActivationStatus(soap.getActivationStatus().get(0));\n+            }\n+        }\n+        return response;\n+    }\n+\n+    public PushAuthenticateResponse pushAuthenticate(final String login) {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val url = API_URL + \"action=pushAuthenticate\"\n+                + \"&serviceId=\" + URLEncoder.encode(StringUtils.EMPTY + inwebo.getServiceId(), StandardCharsets.UTF_8)\n+                + \"&userId=\" + URLEncoder.encode(login, StandardCharsets.UTF_8)\n+                + \"&format=json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyMDQzNg==", "bodyText": "OK. I will use the Spring UriComponentsBuilder.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537420436", "createdAt": "2020-12-07T11:08:24Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+        this.casProperties = casProperties;\n+        this.consoleAdmin = consoleAdmin;\n+\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        try {\n+            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            this.context = SSLContext.getInstance(\"TLS\");\n+            context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n+        } catch (final Exception e) {\n+            throw new RuntimeException(\"Cannot initialize Inwebo service\", e);\n+        }\n+    }\n+\n+    public LoginSearchResponse loginSearch(final String login) {\n+        val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n+        val err = soap.getErr();\n+        val response = (LoginSearchResponse) buildResponse(new LoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        if (response.isOk()) {\n+            val count = soap.getCount();\n+            response.setCount(count);\n+            if (count == 1) {\n+                response.setUserId(soap.getId().get(0));\n+                response.setUserStatus(soap.getStatus().get(0));\n+                response.setActivationStatus(soap.getActivationStatus().get(0));\n+            }\n+        }\n+        return response;\n+    }\n+\n+    public PushAuthenticateResponse pushAuthenticate(final String login) {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val url = API_URL + \"action=pushAuthenticate\"\n+                + \"&serviceId=\" + URLEncoder.encode(StringUtils.EMPTY + inwebo.getServiceId(), StandardCharsets.UTF_8)\n+                + \"&userId=\" + URLEncoder.encode(login, StandardCharsets.UTF_8)\n+                + \"&format=json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MTY1NQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI1MDUxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1OToyMlrOH9_XDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo0NjozMlrOIAi7xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MzI3OA==", "bodyText": "If this is necessary, it feels like something that can be moved to a Utils class somewhere in the util module.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534763278", "createdAt": "2020-12-03T06:59:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+\n+import lombok.val;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+\n+/**\n+ * An SSL utility class to use a client certificate.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SSLUtil {\n+\n+    public static KeyManagerFactory buildKeystore(final InweboMultifactorProperties properties) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MzI3MA==", "bodyText": "I created a api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/util/ClientCertificateProperties.java and core/cas-server-core-util-api/src/main/java/org/apereo/cas/util/ssl/SSLUtils.java", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537443270", "createdAt": "2020-12-07T11:46:32Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+\n+import lombok.val;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+\n+/**\n+ * An SSL utility class to use a client certificate.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SSLUtil {\n+\n+    public static KeyManagerFactory buildKeystore(final InweboMultifactorProperties properties) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MzI3OA=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI1NzQzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMDowM1rOH9_btQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzoyMToxMVrOIAmcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDQ2OQ==", "bodyText": "Please make sure all model classes in the response or soap packages are prefixed with Inwebo.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534764469", "createdAt": "2020-12-03T07:00:03Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.apereo.cas.support.inwebo.service.response;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * The abstract JSON response.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Getter\n+@Setter\n+public abstract class AbstractResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwMDcxNA==", "bodyText": "Sure. I'd prefer keep the original names for the generated SOAP classes. They are already in a soap package.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537500714", "createdAt": "2020-12-07T13:21:11Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.apereo.cas.support.inwebo.service.response;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * The abstract JSON response.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Getter\n+@Setter\n+public abstract class AbstractResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDQ2OQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI2NzQzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMToxNlrOH9_jBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyMjo0MFrOICNL3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ==", "bodyText": "Can be obtained from the request-context. Shouldn't have to pass it in?", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534766341", "createdAt": "2020-12-03T07:01:16Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwMzk0OQ==", "bodyText": "I don't know how to do that. Can you elaborate? Thx", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537503949", "createdAt": "2020-12-07T13:26:09Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzODg4OA==", "bodyText": "@mmoayyed This is one of the latest point if you can provide me some guidance on this...", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539138888", "createdAt": "2020-12-09T09:20:10Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE0NTMwMQ==", "bodyText": "Sorry I missed this.\nTo deal with the message bundles, you want to use \tRequestContext.getMessageContext which will give you a message-context that you can fetch messages or add messages via keys. This is specially the recommended choice for SWF actions; you shouldn't have to directly deal with the message source itself.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539145301", "createdAt": "2020-12-09T09:28:34Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NDA5Mg==", "bodyText": "OK. Done. I have removed the injected MessageSource to use the requestContext.getMessageContext().", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539184092", "createdAt": "2020-12-09T10:22:40Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI3NDQ5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMjowNVrOH9_oBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozMDowMlrOIAmyiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NzYyMw==", "bodyText": "You shouldn't need to implement a constants interface to use what's in it, unless it actually represents a type. Remove the clause, and use the constants directly with a qualified class name to be easy on the reader.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534767623", "createdAt": "2020-12-03T07:02:05Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNjQ0MA==", "bodyText": "OK. Will do.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537506440", "createdAt": "2020-12-07T13:30:02Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NzYyMw=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI3OTc2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMjo0M1rOH9_rkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozMDoyMlrOIAmzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2ODUzMQ==", "bodyText": "Please make sure all webflow action classes are prefixes with Inwebo, similar to simple-mfa.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534768531", "createdAt": "2020-12-03T07:02:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNjY1NQ==", "bodyText": "I think I already answered this one, but it's done.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537506655", "createdAt": "2020-12-07T13:30:22Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2ODUzMQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI4MzM2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMzowN1rOH9_uIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozMzozNFrOIAm7OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTE4Nw==", "bodyText": "This should be a trace statement. Also please use [{}] for placeholders to be consistent.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534769187", "createdAt": "2020-12-03T07:03:07Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODY2NQ==", "bodyText": "OK. Will change also.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537508665", "createdAt": "2020-12-07T13:33:34Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTE4Nw=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI4NjI1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMzoyNlrOH9_v-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozMzozOVrOIAm7eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY1Nw==", "bodyText": "Should be trace", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534769657", "createdAt": "2020-12-03T07:03:26Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+        val otp = requestContext.getRequestParameters().get(OTP);\n+        val flowScope = requestContext.getFlowScope();\n+        val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n+        if (StringUtils.isNotBlank(otp)) {\n+            val response = service.authenticateExtended(login, otp);\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            }\n+        } else if (StringUtils.isNotBlank(sessionId)) {\n+            val response = service.checkPushResult(login, sessionId);\n+            val result = response.getResult();\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            } else if (result == Result.WAITING) {\n+                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODcyOQ==", "bodyText": "Yes", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537508729", "createdAt": "2020-12-07T13:33:39Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+        val otp = requestContext.getRequestParameters().get(OTP);\n+        val flowScope = requestContext.getFlowScope();\n+        val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n+        if (StringUtils.isNotBlank(otp)) {\n+            val response = service.authenticateExtended(login, otp);\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            }\n+        } else if (StringUtils.isNotBlank(sessionId)) {\n+            val response = service.checkPushResult(login, sessionId);\n+            val result = response.getResult();\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            } else if (result == Result.WAITING) {\n+                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY1Nw=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI5MDMxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMzo1OVrOH9_y5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozNzo1NVrOIAnG7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MDQwNg==", "bodyText": "All error calls to the logger should be using LoggingUtils.error()", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534770406", "createdAt": "2020-12-03T07:03:59Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the user (status).\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckUserAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+\n+        val flowScope = requestContext.getFlowScope();\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        flowScope.put(SITE_ALIAS, inwebo.getSiteAlias());\n+        flowScope.put(SITE_DESCRIPTION, inwebo.getSiteDescription());\n+        flowScope.put(LOGIN, login);\n+\n+        try {\n+            val response = service.loginSearch(login);\n+            val oneUser = response.isOk() && response.getCount() == 1 && response.getUserId() > 0;\n+            if (oneUser) {\n+                val userIsBlocked = response.getUserStatus() == 1;\n+                if (userIsBlocked) {\n+                    LOGGER.error(\"User is blocked: {}\", login);\n+                    return error();\n+                }\n+                val activationStatus = response.getActivationStatus();\n+                if (activationStatus == 0) {\n+                    LOGGER.debug(\"User is not registered: {}\", login);\n+                    flowScope.put(MUST_ENROLL, true);\n+                    flowScope.put(INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n+                } else if (activationStatus == 1) {\n+                    LOGGER.debug(\"User can only handle push notifications: {}\", login);\n+                    return getEventFactorySupport().event(this, PUSH);\n+                } else if (activationStatus == 2) {\n+                    LOGGER.debug(\"User can only handle browser authentication: {}\", login);\n+                    return getEventFactorySupport().event(this, BROWSER);\n+                } else if (activationStatus == 3 || activationStatus == 5) {\n+                    LOGGER.debug(\"User must select the authentication method: {}\", login);\n+                    return getEventFactorySupport().event(this, SELECT);\n+                } else {\n+                    LOGGER.error(\"Unknown activation status: {} for: {}\", activationStatus, login);\n+                }\n+            } else {\n+                LOGGER.error(\"No user found for: {}\", login);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTY2Mg==", "bodyText": "Yes, but only when there is an exception. I will change that.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537511662", "createdAt": "2020-12-07T13:37:55Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the user (status).\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckUserAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+\n+        val flowScope = requestContext.getFlowScope();\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        flowScope.put(SITE_ALIAS, inwebo.getSiteAlias());\n+        flowScope.put(SITE_DESCRIPTION, inwebo.getSiteDescription());\n+        flowScope.put(LOGIN, login);\n+\n+        try {\n+            val response = service.loginSearch(login);\n+            val oneUser = response.isOk() && response.getCount() == 1 && response.getUserId() > 0;\n+            if (oneUser) {\n+                val userIsBlocked = response.getUserStatus() == 1;\n+                if (userIsBlocked) {\n+                    LOGGER.error(\"User is blocked: {}\", login);\n+                    return error();\n+                }\n+                val activationStatus = response.getActivationStatus();\n+                if (activationStatus == 0) {\n+                    LOGGER.debug(\"User is not registered: {}\", login);\n+                    flowScope.put(MUST_ENROLL, true);\n+                    flowScope.put(INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n+                } else if (activationStatus == 1) {\n+                    LOGGER.debug(\"User can only handle push notifications: {}\", login);\n+                    return getEventFactorySupport().event(this, PUSH);\n+                } else if (activationStatus == 2) {\n+                    LOGGER.debug(\"User can only handle browser authentication: {}\", login);\n+                    return getEventFactorySupport().event(this, BROWSER);\n+                } else if (activationStatus == 3 || activationStatus == 5) {\n+                    LOGGER.debug(\"User must select the authentication method: {}\", login);\n+                    return getEventFactorySupport().event(this, SELECT);\n+                } else {\n+                    LOGGER.error(\"Unknown activation status: {} for: {}\", activationStatus, login);\n+                }\n+            } else {\n+                LOGGER.error(\"No user found for: {}\", login);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MDQwNg=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI5NTkwOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowNDozMFrOH9_2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozODoxM1rOIAnHtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTM1NQ==", "bodyText": "Should be unnecessary. Use StaticEventExecutionAction", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534771355", "createdAt": "2020-12-03T07:04:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A simple web action for success.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SuccessAction extends AbstractAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTg2MQ==", "bodyText": "Yes. Done already.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537511861", "createdAt": "2020-12-07T13:38:13Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A simple web action for success.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SuccessAction extends AbstractAction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTM1NQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTMwMDMxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-inwebo-mfa/src/main/resources/webflow/mfa-inwebo/mfa-inwebo-webflow.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowNTo0OFrOH9_5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOToxMzoxNVrOICKH1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MjA2OQ==", "bodyText": "All webflow activity should be constructed dynamically in webflow-configurer classes with no XML whatsoever, except perhaps one end-state. The current webflow module cannot be constructed with an XML configuration file, so we'd include one state in the configuration to allow for the initialization step, and build everything dynamically in the webflow configurer (which you can of course unit test unlike xml)", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534772069", "createdAt": "2020-12-03T07:05:48Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/resources/webflow/mfa-inwebo/mfa-inwebo-webflow.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n+      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n+                          http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n+\n+    <on-start>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMjcxMw==", "bodyText": "Currently, it works with the XML webflow. Or maybe there is a side-effect I didn't side.\nI will change that too for consistency at the end of the rework.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537512713", "createdAt": "2020-12-07T13:39:33Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/resources/webflow/mfa-inwebo/mfa-inwebo-webflow.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n+      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n+                          http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n+\n+    <on-start>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MjA2OQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4MTg3Mg==", "bodyText": "The main driver is that you can test the webflow configurer with unit tests, and its behavior can be configured by an adopter without having to override xml config. In the very near future, the xml-base for all webflow will also be removed so this would be more in line with that as well.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r538581872", "createdAt": "2020-12-08T16:41:23Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-inwebo-mfa/src/main/resources/webflow/mfa-inwebo/mfa-inwebo-webflow.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n+      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n+                          http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n+\n+    <on-start>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MjA2OQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMzkxMA==", "bodyText": "Done", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539133910", "createdAt": "2020-12-09T09:13:15Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-inwebo-mfa/src/main/resources/webflow/mfa-inwebo/mfa-inwebo-webflow.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n+      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n+                          http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n+\n+    <on-start>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MjA2OQ=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTMxODc3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-thymeleaf/src/main/resources/templates/inwebo/casInweboBrowserAuthentView.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowODowOVrOH-AGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzo0NDo0OVrOIAnZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NTQ5Mg==", "bodyText": "HTML pages should be renamed to either fully refer to \"Authntication\", or shortened for \"Authn\". \"Authent\" seems quite odd to me.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534775492", "createdAt": "2020-12-03T07:08:09Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-thymeleaf/src/main/resources/templates/inwebo/casInweboBrowserAuthentView.html", "diffHunk": "@@ -0,0 +1,85 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxNjMxNw==", "bodyText": "Yes, indeed, it sounds odd. Will rename.", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537516317", "createdAt": "2020-12-07T13:44:49Z", "author": {"login": "leleuj"}, "path": "support/cas-server-support-thymeleaf/src/main/resources/templates/inwebo/casInweboBrowserAuthentView.html", "diffHunk": "@@ -0,0 +1,85 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NTQ5Mg=="}, "originalCommit": {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4002, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}