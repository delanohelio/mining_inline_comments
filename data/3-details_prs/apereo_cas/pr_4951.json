{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTc4NjU1", "number": 4951, "title": "restrict SAML service lookups to matching entityIDs", "bodyText": "Following the addition of SamlIdPServicesManagerRegisteredServiceLocator, unidentified service IDs are evaluated as possible SAML entityIDs against known SAML services, in addition to regular service ID matching as performed by DefaultServicesManagerRegisteredServiceLocator. This introduces an interesting failure case.\nFirst, we need a SAML registered service that retrieves its metadata over MDQ, but it has not yet been retrieved, or the cached copy has expired. Now, we fire a request bearing a service ID not related to the SAML service; let's say it's not an entityID at all but a regular CAS service ID. What will happen is that, at some point, a call to locate() on SamlIdPServicesManagerRegisteredServiceLocator will fire in AbstractServicesManager, providing a predicate entry -> entry.matches(serviceId). Before that predicate is evaluated, the candidates will be filtered by the BiPredicate on the extending class, which will dispatch a call to SamlRegisteredServiceServiceProviderMetadataFacade.get. After a series of attempted lookups, this will throw as no metadata is found - performing an MDQ lookup with the provided service ID is useless as it is not a SAML service. This will be logged as a failure to locate metadata for the candidate service, not the service ID being queried.\nThis also extends into misconfigured SAML services - if one uses filesystem metadata, for example, that does not exist, it will fail every service (other than SAML services with higher precedence, I believe), which is not ideal.\nThere are a couple of ways to deal with this. The code I've changed here performs a check with matches() before actually doing any attempt to resolve the metadata. Another option would be to change the filter order on DefaultServicesManagerRegisteredServiceLocator to evaluate the provided Predicate first, but I feel this is making implicit in the usage pattern something that should be explicit: the server ought not to perform a costly metadata lookup if the entityID of the registered service does not even match the provided service ID.\nI believe this could be tested for by using Mockito in SamlIdPServiceManagerRegisteredServiceLocatorTests to ensure that get is not called on the metadataFacade, but haven't gotten that far yet.", "createdAt": "2020-10-02T15:26:28Z", "url": "https://github.com/apereo/cas/pull/4951", "merged": true, "mergeCommit": {"oid": "8a80ef0c2b0de2036c27974eafd961e00a0da3f8"}, "closed": true, "closedAt": "2020-11-22T05:03:51Z", "author": {"login": "hsartoris-bard"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPkFkjAFqTUwMjA3NDc4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTJefpgBqjM4ODczNjgwMjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDc0Nzgy", "url": "https://github.com/apereo/cas/pull/4951#pullrequestreview-502074782", "createdAt": "2020-10-05T13:48:46Z", "commit": {"oid": "888343f028f9a28c0c92b4bd5ba1ede7ae614562"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "888343f028f9a28c0c92b4bd5ba1ede7ae614562", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/888343f028f9a28c0c92b4bd5ba1ede7ae614562", "committedDate": "2020-10-02T15:18:23Z", "message": "restrict SAML service lookups to matching entityIDs"}, "afterCommit": {"oid": "b59f6a5c978a6ac5d14a9bef717f62347f04e511", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/b59f6a5c978a6ac5d14a9bef717f62347f04e511", "committedDate": "2020-10-15T18:50:12Z", "message": "triggering github actions tests since Gradle 6.7 doesn't work with my environment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzcyMDg4", "url": "https://github.com/apereo/cas/pull/4951#pullrequestreview-510372088", "createdAt": "2020-10-16T11:09:16Z", "commit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOToxN1rOHi2Pfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxMDo1MVrOHi2Uhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjMzNA==", "bodyText": "You don't need this. Use mocks, and then do when(myresolver.resolve(...)).thenThrow()...", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506302334", "createdAt": "2020-10-16T11:09:17Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);\n+\n+        val service1 = RegisteredServiceTestUtils.getRegisteredService(\"urn:abc:def.+\");\n+        service1.setEvaluationOrder(9);\n+        val entityID = \"https://sp.testshib.org/shibboleth-sp\";\n+        val service = webApplicationServiceFactory.createService(entityID);\n+\n+        locator.locate(List.of(service1), service, r -> r.matches(entityID));\n+    }\n+\n+    private static class BrokenMetadataResolver implements SamlRegisteredServiceCachingMetadataResolver {\n+        public MetadataResolver resolve(SamlRegisteredService service, CriteriaSet criteriaSet) {\n+            throw new IllegalStateException(\"This method shouldn't have been called\");\n+        }\n+\n+        public void invalidate() {\n+        }\n+\n+        public void invalidate(SamlRegisteredService s, CriteriaSet c) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjY4Mg==", "bodyText": "Remove author tag please, and put it at the top of the class instead.", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506302682", "createdAt": "2020-10-16T11:09:44Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMzUyNQ==", "bodyText": "You must assert the result somehow to actually verify things. The verification might in fact be : \"make sure nothing is thrown\", etc. if that's what you're going for.", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506303525", "createdAt": "2020-10-16T11:10:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);\n+\n+        val service1 = RegisteredServiceTestUtils.getRegisteredService(\"urn:abc:def.+\");\n+        service1.setEvaluationOrder(9);\n+        val entityID = \"https://sp.testshib.org/shibboleth-sp\";\n+        val service = webApplicationServiceFactory.createService(entityID);\n+\n+        locator.locate(List.of(service1), service, r -> r.matches(entityID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMzYyMg==", "bodyText": "Switch to val", "url": "https://github.com/apereo/cas/pull/4951#discussion_r506303622", "createdAt": "2020-10-16T11:10:51Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/services/SamlIdPServicesManagerRegisteredServiceLocatorTests.java", "diffHunk": "@@ -69,4 +74,37 @@ public void verifyReverseOperation() {\n         assertNotNull(result);\n         assertTrue(result instanceof SamlRegisteredService);\n     }\n+\n+    /**\n+     * serviceLocator should not trigger metadata lookups when requested entityID does not match pattern for service in question.\n+     *\n+     * This test verifies that, in the case of one service entry that does not match the requested entityID, no\n+     * metadata lookups are performed.\n+     *\n+     * @author Hayden Sartoris\n+     */\n+    @Test\n+    public void verifyEntityIDFilter() {\n+        SamlRegisteredServiceCachingMetadataResolver resolver = new BrokenMetadataResolver();\n+        SamlIdPServicesManagerRegisteredServiceLocator locator = new SamlIdPServicesManagerRegisteredServiceLocator(resolver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "011f1c1aa7e3f8afd3e917fcb8954564da036726", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/011f1c1aa7e3f8afd3e917fcb8954564da036726", "committedDate": "2020-10-16T17:03:59Z", "message": "restrict SAML service lookups to matching entityIDs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5cc4399d336787285b7587963f2bf2b2406f78", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/9a5cc4399d336787285b7587963f2bf2b2406f78", "committedDate": "2020-10-16T17:03:59Z", "message": "triggering github actions tests since Gradle 6.7 doesn't work with my environment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61a7da6285195919089f6c42d91038df96dfddcd", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/61a7da6285195919089f6c42d91038df96dfddcd", "committedDate": "2020-10-16T17:03:59Z", "message": "fix some issues and a non-mockito test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74b2987848bafd419c2a2d33960b87cbfd6eb388", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/74b2987848bafd419c2a2d33960b87cbfd6eb388", "committedDate": "2020-10-16T17:03:59Z", "message": "moved to mockito staticMock tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6118a5cb6c1f5c519583db8fa029b84a565b95bb", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/6118a5cb6c1f5c519583db8fa029b84a565b95bb", "committedDate": "2020-10-16T11:00:12Z", "message": "fix some issues and a non-mockito test"}, "afterCommit": {"oid": "74b2987848bafd419c2a2d33960b87cbfd6eb388", "author": {"user": {"login": "hsartoris-bard", "name": null}}, "url": "https://github.com/apereo/cas/commit/74b2987848bafd419c2a2d33960b87cbfd6eb388", "committedDate": "2020-10-16T17:03:59Z", "message": "moved to mockito staticMock tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3528, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}