{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjU5OTcy", "number": 4798, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozODoyM1rODt5R7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0Mzo0NlrODvayqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUwOTg5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozODoyM1rOF_lWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozODoyM1rOF_lWJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNjQ4NA==", "bodyText": "Bad javadoc?", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402216484", "createdAt": "2020-04-02T10:38:23Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "diffHunk": "@@ -107,6 +108,8 @@ protected void validateCredentials(final UsernamePasswordCredentials credentials\n      * 1. When the grant type is {@code password}, in which case the authentication will be performed by {@code OAuth20UsernamePasswordAuthenticator}\n      * 2. When request contains OAuth {@code code} which was issued with a {@code code_challenge}, in which case the authentication will be\n      * performed by {{@code OAuth20ProofKeyCodeExchangeAuthenticator}\n+     * 3. When the grant type is {@refresh_token} and the request doesn't have any secret, in which case the authentication will be performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUxNTExOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MDowNlrOF_lZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MTo0MFrOF_4-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzMzOA==", "bodyText": "Please correct the capitalization of the debug statement (i.e. Client), and possibly remove refresh_token authentication.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402217338", "createdAt": "2020-04-02T10:40:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "diffHunk": "@@ -121,6 +124,14 @@ protected boolean canAuthenticate(final WebContext context) {\n             return false;\n         }\n \n+        if (grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.CLIENT_ID).isPresent()\n+            && !context.getRequestParameter(OAuth20Constants.CLIENT_SECRET).isPresent()) {\n+            LOGGER.debug(\"Skipping Client credential authentication to use refresh_token authentication\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzODA5Mg==", "bodyText": "i chose to keep refresh token authentication part. It seems more logical with the previous statement isn't it ?\nLOGGER.debug(\"Skipping Client credential authentication to use password authentication\");", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402538092", "createdAt": "2020-04-02T18:51:40Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "diffHunk": "@@ -121,6 +124,14 @@ protected boolean canAuthenticate(final WebContext context) {\n             return false;\n         }\n \n+        if (grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.CLIENT_ID).isPresent()\n+            && !context.getRequestParameter(OAuth20Constants.CLIENT_SECRET).isPresent()) {\n+            LOGGER.debug(\"Skipping Client credential authentication to use refresh_token authentication\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzMzOA=="}, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUxNjM2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MDoyN1rOF_laMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MDoyN1rOF_laMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzUyMw==", "bodyText": "Bad javadoc. No such thing as RefreshTokenAuthenticator?", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402217523", "createdAt": "2020-04-02T10:40:27Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUxODc4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MToyMVrOF_lb4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MToyMVrOF_lb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzk1NA==", "bodyText": "Javadoc support for @OverRide methods is not strictly necessary. If you do need to explain this, you should do so at the class level.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402217954", "createdAt": "2020-04-02T10:41:21Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUyMDIyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MTo0NlrOF_lctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MTo0NlrOF_lctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODE2Ng==", "bodyText": "Debug/Trace statements here would be very useful.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402218166", "createdAt": "2020-04-02T10:41:46Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUyMjUxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MjozM1rOF_leLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjowMjowMVrOF_n7fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");\n          \n          \n            \n                        LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry, has expired or is not related to the client provided\");", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402218541", "createdAt": "2020-04-02T10:42:33Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateCredentials(final UsernamePasswordCredentials credentials,\n+                                       final OAuthRegisteredService registeredService, final WebContext context) {\n+        val token = credentials.getPassword();\n+        LOGGER.trace(\"Received refresh token [{}] for authentication\", token);\n+\n+        val refreshToken = getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+        if (refreshToken == null || refreshToken.isExpired() || !StringUtils.equals(refreshToken.getClientId(), credentials.getUsername())) {\n+            LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODgzNQ==", "bodyText": "Could we also include the client-id in log statement?", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402218835", "createdAt": "2020-04-02T10:43:05Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateCredentials(final UsernamePasswordCredentials credentials,\n+                                       final OAuthRegisteredService registeredService, final WebContext context) {\n+        val token = credentials.getPassword();\n+        LOGGER.trace(\"Received refresh token [{}] for authentication\", token);\n+\n+        val refreshToken = getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+        if (refreshToken == null || refreshToken.isExpired() || !StringUtils.equals(refreshToken.getClientId(), credentials.getUsername())) {\n+            LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODU0MQ=="}, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1ODgxMw==", "bodyText": "Sure, will add it.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402258813", "createdAt": "2020-04-02T12:02:01Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateCredentials(final UsernamePasswordCredentials credentials,\n+                                       final OAuthRegisteredService registeredService, final WebContext context) {\n+        val token = credentials.getPassword();\n+        LOGGER.trace(\"Received refresh token [{}] for authentication\", token);\n+\n+        val refreshToken = getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+        if (refreshToken == null || refreshToken.isExpired() || !StringUtils.equals(refreshToken.getClientId(), credentials.getUsername())) {\n+            LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODU0MQ=="}, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQ4NDA0OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0MzowMlrOGB1B1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0MzowMlrOGB1B1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDU4Mw==", "bodyText": "Missing @Override.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r404570583", "createdAt": "2020-04-07T06:43:02Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * OAuth20RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    protected boolean canAuthenticate(final WebContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQ4NDUxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0MzoxM1rOGB1CJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0MzoxM1rOGB1CJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDY2MA==", "bodyText": "Should be moved to the class.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r404570660", "createdAt": "2020-04-07T06:43:13Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * OAuth20RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQ4NjE2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuth20Configuration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0Mzo0NlrOGB1DIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1NjowOVrOGCTvpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDkxMw==", "bodyText": "oauthRefreshTokenAuthenticator, and same for the annotation.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r404570913", "createdAt": "2020-04-07T06:43:46Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuth20Configuration.java", "diffHunk": "@@ -356,6 +364,18 @@ public OAuth20CallbackAuthorizeViewResolver callbackAuthorizeViewResolver() {\n             defaultPrincipalResolver.getObject());\n     }\n \n+    @ConditionalOnMissingBean(name = \"oAuthRefreshTokenAuthenticator\")\n+    @Bean\n+    @RefreshScope\n+    public Authenticator<UsernamePasswordCredentials> oAuthRefreshTokenAuthenticator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MzgzMA==", "bodyText": "Are you sure ? All the other authenticators have this syntax:\n\noAuthProofKeyCodeExchangeAuthenticator\noAuthClientAuthenticator\noAuthAccessTokenAuthenticator\netc...", "url": "https://github.com/apereo/cas/pull/4798#discussion_r405073830", "createdAt": "2020-04-07T19:56:09Z", "author": {"login": "julienhuon"}, "path": "support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuth20Configuration.java", "diffHunk": "@@ -356,6 +364,18 @@ public OAuth20CallbackAuthorizeViewResolver callbackAuthorizeViewResolver() {\n             defaultPrincipalResolver.getObject());\n     }\n \n+    @ConditionalOnMissingBean(name = \"oAuthRefreshTokenAuthenticator\")\n+    @Bean\n+    @RefreshScope\n+    public Authenticator<UsernamePasswordCredentials> oAuthRefreshTokenAuthenticator() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDkxMw=="}, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4026, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}