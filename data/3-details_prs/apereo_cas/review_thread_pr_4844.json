{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTY0NzM2", "number": 4844, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NzoxNFrOD7L9_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjozMFrOD8ASuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg4NjcwOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NzoxNFrOGTW8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NzoxNFrOGTW8iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjA3Mw==", "bodyText": "Move out of the configuration class and into its own independent package.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952073", "createdAt": "2020-05-11T10:47:14Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg4NzY2OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NzozM1rOGTW9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NzozM1rOGTW9Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjIyMg==", "bodyText": "Rename bean to be consistent with everything else (there is no get)", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952222", "createdAt": "2020-05-11T10:47:33Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg4ODczOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0Nzo1MVrOGTW9vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0Nzo1MVrOGTW9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjM4Mw==", "bodyText": "@RequiredArgsConstructor; make fields final.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952383", "createdAt": "2020-05-11T10:47:51Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg4OTE4OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0Nzo1OFrOGTW-Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0Nzo1OFrOGTW-Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjQ1MA==", "bodyText": "Remove", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952450", "createdAt": "2020-05-11T10:47:58Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg5MDIzOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0ODoxN1rOGTW-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0ODoxN1rOGTW-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjYxMg==", "bodyText": "Pass the bean factory from the configuration class, and remove.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952612", "createdAt": "2020-05-11T10:48:17Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }\n+        }\n+\n+        private final ArrayList<BeanTuple> prototypeBeans = new ArrayList<>();\n+\n+        private BeanFactory beanFactory;\n+\n+        @Override\n+        public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n+            this.beanFactory = beanFactory;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg5MDYyOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0ODoyMlrOGTW-3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0ODoyMlrOGTW-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjY2OA==", "bodyText": "Make final.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952668", "createdAt": "2020-05-11T10:48:22Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }\n+        }\n+\n+        private final ArrayList<BeanTuple> prototypeBeans = new ArrayList<>();\n+\n+        private BeanFactory beanFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg5MTEzOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0ODozNFrOGTW_NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0ODozNFrOGTW_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Mjc1Ng==", "bodyText": "Left-hand size should always be interface type.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952756", "createdAt": "2020-05-11T10:48:34Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }\n+        }\n+\n+        private final ArrayList<BeanTuple> prototypeBeans = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkwODgxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1MzoxMVrOGTXJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0MDo1MFrOGTYnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTMzNw==", "bodyText": "If this is turned into a proper bean, there is no need to mark it as prototype. Spring application lifecycle will take care of it?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422955337", "createdAt": "2020-05-11T10:53:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(\n+                                                      final Long maxWait,\n+                                                      final PooledConnectionFactory factory,\n+                                                      final ExecutorService executor,\n+                                                      final ConnectionValidator validator) {\n+        return new PooledLdapConnectionFactoryHealthIndicator(maxWait.longValue(), factory, executor, validator);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3OTQyNw==", "bodyText": "The reason why I need a prototype bean is that I need parameterized multiple instances of same bean definitions. This is the intended use case of prototype bean.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422979427", "createdAt": "2020-05-11T11:40:50Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(\n+                                                      final Long maxWait,\n+                                                      final PooledConnectionFactory factory,\n+                                                      final ExecutorService executor,\n+                                                      final ConnectionValidator validator) {\n+        return new PooledLdapConnectionFactoryHealthIndicator(maxWait.longValue(), factory, executor, validator);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTMzNw=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkxMDc4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1Mzo0N1rOGTXKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo1NTo0OVrOGTZDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTY1NQ==", "bodyText": "Never use this.applicationContext.getBean() unless you absolutely have to (and you should not have to). Pass the bean instance or invoke it directly.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422955655", "createdAt": "2020-05-11T10:53:47Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -46,8 +64,11 @@ public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n                 val executor = Beans.newThreadPoolExecutorFactoryBean(ldap.getPool());\n                 executor.afterPropertiesSet();\n                 val connectionFactory = LdapUtils.newLdaptivePooledConnectionFactory(ldap);\n-                val healthIndicator = new PooledLdapConnectionFactoryHealthIndicator(Beans.newDuration(ldap.getMaxWait()).toMillis(),\n-                    connectionFactory, executor.getObject(), new SearchConnectionValidator());\n+                val healthIndicator = (PooledLdapConnectionFactoryHealthIndicator) this.applicationContext.getBean(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDQ3OQ==", "bodyText": "See above. Prototype beans needs to be initialized using this.applicationContext.getBean(). Note ldaps.stream(). We need to get multiple parametrized instances.\nRef: https://stackoverflow.com/questions/22155832/spring-java-config-how-do-you-create-a-prototype-scoped-bean-with-runtime-argu", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422980479", "createdAt": "2020-05-11T11:42:58Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -46,8 +64,11 @@ public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n                 val executor = Beans.newThreadPoolExecutorFactoryBean(ldap.getPool());\n                 executor.afterPropertiesSet();\n                 val connectionFactory = LdapUtils.newLdaptivePooledConnectionFactory(ldap);\n-                val healthIndicator = new PooledLdapConnectionFactoryHealthIndicator(Beans.newDuration(ldap.getMaxWait()).toMillis(),\n-                    connectionFactory, executor.getObject(), new SearchConnectionValidator());\n+                val healthIndicator = (PooledLdapConnectionFactoryHealthIndicator) this.applicationContext.getBean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTY1NQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTk0MA==", "bodyText": "I understand the solution, but this in its current format is not something I would be able to accept. It's inconsistent and/or confusing. It doesn't make sense os isn't maintainable to create a bean, only to mark it as prototype, to register it in the application context as @bean yet call getBean() only to be able to properly close it. Too many hidden jewels.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422981940", "createdAt": "2020-05-11T11:46:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -46,8 +64,11 @@ public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n                 val executor = Beans.newThreadPoolExecutorFactoryBean(ldap.getPool());\n                 executor.afterPropertiesSet();\n                 val connectionFactory = LdapUtils.newLdaptivePooledConnectionFactory(ldap);\n-                val healthIndicator = new PooledLdapConnectionFactoryHealthIndicator(Beans.newDuration(ldap.getMaxWait()).toMillis(),\n-                    connectionFactory, executor.getObject(), new SearchConnectionValidator());\n+                val healthIndicator = (PooledLdapConnectionFactoryHealthIndicator) this.applicationContext.getBean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTY1NQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MzUzNQ==", "bodyText": "Then in this case the only alternative solution would be defining a PooledLdapConnectionFactoryHealthIndicator factory bean to contain the resources that need to be closed and healthIndicator to get a PooledLdapConnectionFactoryHealthIndicator from the factory. A complete rewrite required.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422983535", "createdAt": "2020-05-11T11:49:30Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -46,8 +64,11 @@ public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n                 val executor = Beans.newThreadPoolExecutorFactoryBean(ldap.getPool());\n                 executor.afterPropertiesSet();\n                 val connectionFactory = LdapUtils.newLdaptivePooledConnectionFactory(ldap);\n-                val healthIndicator = new PooledLdapConnectionFactoryHealthIndicator(Beans.newDuration(ldap.getMaxWait()).toMillis(),\n-                    connectionFactory, executor.getObject(), new SearchConnectionValidator());\n+                val healthIndicator = (PooledLdapConnectionFactoryHealthIndicator) this.applicationContext.getBean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTY1NQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NjU5NA==", "bodyText": "(Actually I only realized factory bean may be a more inituitive alternative solution after I wrote this PR...)", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422986594", "createdAt": "2020-05-11T11:55:49Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -46,8 +64,11 @@ public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n                 val executor = Beans.newThreadPoolExecutorFactoryBean(ldap.getPool());\n                 executor.afterPropertiesSet();\n                 val connectionFactory = LdapUtils.newLdaptivePooledConnectionFactory(ldap);\n-                val healthIndicator = new PooledLdapConnectionFactoryHealthIndicator(Beans.newDuration(ldap.getMaxWait()).toMillis(),\n-                    connectionFactory, executor.getObject(), new SearchConnectionValidator());\n+                val healthIndicator = (PooledLdapConnectionFactoryHealthIndicator) this.applicationContext.getBean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTY1NQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkxMjE3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/PooledLdapConnectionFactoryHealthIndicator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NDoxMFrOGTXLWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NDoxMFrOGTXLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTg2NA==", "bodyText": "References to class in javadocs should be annotated with @link", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422955864", "createdAt": "2020-05-11T10:54:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/PooledLdapConnectionFactoryHealthIndicator.java", "diffHunk": "@@ -35,6 +35,16 @@ public PooledLdapConnectionFactoryHealthIndicator(final long maxWait,\n         this.validator = validator;\n     }\n \n+\n+    /**\n+     * Shuts down PooledLdapConnectionFactoryHealthIndicator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkxNDcyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-consent-ldap/src/main/java/org/apereo/cas/consent/LdapConsentRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NDo1NVrOGTXM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NDo1NVrOGTXM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NjI2Nw==", "bodyText": "Sometimes you're specifying javadocs and sometimes you're not. It's best to remove them all, as the javadocs in almost all such cases are redundant. If you do specify them, you need to be consistent everywhere in your patch.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422956267", "createdAt": "2020-05-11T10:54:55Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-consent-ldap/src/main/java/org/apereo/cas/consent/LdapConsentRepository.java", "diffHunk": "@@ -259,4 +260,9 @@ private LdapEntry readConsentEntry(final String principal) {\n         LOGGER.debug(\"Unable to read consent entries from LDAP via filter [{}]\", filter);\n         return new HashSet<>(0);\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkxNzM3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NTo0MVrOGTXOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NTo0MVrOGTXOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NjY4Mw==", "bodyText": "Rewrite the bean and remove parameter passing.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422956683", "createdAt": "2020-05-11T10:55:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(\n+                                                      final Long maxWait,\n+                                                      final PooledConnectionFactory factory,\n+                                                      final ExecutorService executor,\n+                                                      final ConnectionValidator validator) {\n+        return new PooledLdapConnectionFactoryHealthIndicator(maxWait.longValue(), factory, executor, validator);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyMDI3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NjozNVrOGTXQOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDozMzo1NVrOGTfCTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ==", "bodyText": "authenticator.close() should be enough.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957115", "createdAt": "2020-05-11T10:56:35Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MjIyMg==", "bodyText": "No. There are three independent thread pools. as I figured out from LdapUtils.\nTake this as example\nhttps://github.com/apereo/cas/blob/master/support/cas-server-support-ldap-core/src/main/java/org/apereo/cas/util/LdapUtils.java#L607\nand follow the method getAuthenticatedOrAnonSearchAuthenticator(), it indeed creates three newLdaptiveConnectionFactory instances. So three close() is needed.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422972222", "createdAt": "2020-05-11T11:26:24Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTE2Nw==", "bodyText": "In that case, all of this code should be moved over to ldaptive. We should not have to travel down the hierarchy to close everything. This is not maintainable. authenticator.close()  should be enough, and the rest should be handled by ldaptive which would know what needs closing and how and in what order, etc.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422975167", "createdAt": "2020-05-11T11:32:14Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3Njc5NQ==", "bodyText": "Pinging @dfish3r; What do you think?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422976795", "createdAt": "2020-05-11T11:35:36Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzQ0NQ==", "bodyText": "What happens if, let's say, an ldap connection factory is shared between two beans and both try to dispose it on destroy events?\n\nI guess this is intended. As you asked before, it is possible (and completely reasonable) to share same ConnectionFactory to multiple objects, so only application knows when they can be closed.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422977445", "createdAt": "2020-05-11T11:36:56Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1ODgyNQ==", "bodyText": "Pinging @dfish3r; What do you think?\n\nThis is such a common problem that I've added a close implementation in the latest snapshot.\nhttps://github.com/vt-middleware/ldaptive/blob/master/core/src/main/java/org/ldaptive/auth/Authenticator.java#L266\nSince authenticator components could be custom, close isn't a guarantee. However, if you're using supplied implementations it will work as desired. I imagine that's 99% of use cases so it's a method worth having.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423058825", "createdAt": "2020-05-11T13:57:31Z", "author": {"login": "dfish3r"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2NTY3OA==", "bodyText": "So I would need to wait for a new snapshot version update to change these to authenticator.close()", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423065678", "createdAt": "2020-05-11T14:07:37Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4NDYyMA==", "bodyText": "authenticator.close() should be enough.\n\nBTW I actually misread the this comment before. I agree to use authenticator.close() if there is one.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423084620", "createdAt": "2020-05-11T14:33:55Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyMjU3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NzoxMlrOGTXRiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0MzoxOVrOGTYsIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzQ1MQ==", "bodyText": "If proper bean (and not an inner object) Spring should take care of it?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957451", "createdAt": "2020-05-11T10:57:12Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,\n+                                     final PrincipalFactory principalFactory, final Integer order,\n+                                     final Authenticator authenticator,\n+                                     final AuthenticationPasswordPolicyHandlingStrategy strategy) {\n+        return new LdapAuthenticationHandler(name, servicesManager, principalFactory, order,\n+                                             authenticator, strategy);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDY0MA==", "bodyText": "See above", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422980640", "createdAt": "2020-05-11T11:43:19Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,\n+                                     final PrincipalFactory principalFactory, final Integer order,\n+                                     final Authenticator authenticator,\n+                                     final AuthenticationPasswordPolicyHandlingStrategy strategy) {\n+        return new LdapAuthenticationHandler(name, servicesManager, principalFactory, order,\n+                                             authenticator, strategy);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzQ1MQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyMzE4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NzoyMlrOGTXR5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0Mzo1NlrOGTYtVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzU0Mg==", "bodyText": "Remove all parameter passing.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957542", "createdAt": "2020-05-11T10:57:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,\n+                                     final PrincipalFactory principalFactory, final Integer order,\n+                                     final Authenticator authenticator,\n+                                     final AuthenticationPasswordPolicyHandlingStrategy strategy) {\n+        return new LdapAuthenticationHandler(name, servicesManager, principalFactory, order,\n+                                             authenticator, strategy);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDk1MQ==", "bodyText": "This is the intended use of prototype bean - parameterized multiple bean instances", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422980951", "createdAt": "2020-05-11T11:43:56Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,\n+                                     final PrincipalFactory principalFactory, final Integer order,\n+                                     final Authenticator authenticator,\n+                                     final AuthenticationPasswordPolicyHandlingStrategy strategy) {\n+        return new LdapAuthenticationHandler(name, servicesManager, principalFactory, order,\n+                                             authenticator, strategy);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzU0Mg=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyNDAxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1NzozOVrOGTXScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NDo0NlrOGTYuxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzY4MQ==", "bodyText": "Remove getBean references. Should never be used.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957681", "createdAt": "2020-05-11T10:57:39Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -185,8 +196,9 @@ public PrincipalFactory ldapPrincipalFactory() {\n                 val strategy = createLdapPasswordPolicyHandlingStrategy(l);\n \n                 LOGGER.debug(\"Creating LDAP authentication handler for [{}]\", l.getLdapUrl());\n-                val handler = new LdapAuthenticationHandler(l.getName(),\n-                    servicesManager.getObject(), ldapPrincipalFactory(),\n+                val handler = (LdapAuthenticationHandler) applicationContext.getBean(\n+                    \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\",\n+                    l.getName(), servicesManager.getObject(), ldapPrincipalFactory(),\n                     l.getOrder(), authenticator, strategy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTMxNg==", "bodyText": "This is prototype bean.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422981316", "createdAt": "2020-05-11T11:44:46Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -185,8 +196,9 @@ public PrincipalFactory ldapPrincipalFactory() {\n                 val strategy = createLdapPasswordPolicyHandlingStrategy(l);\n \n                 LOGGER.debug(\"Creating LDAP authentication handler for [{}]\", l.getLdapUrl());\n-                val handler = new LdapAuthenticationHandler(l.getName(),\n-                    servicesManager.getObject(), ldapPrincipalFactory(),\n+                val handler = (LdapAuthenticationHandler) applicationContext.getBean(\n+                    \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\",\n+                    l.getName(), servicesManager.getObject(), ldapPrincipalFactory(),\n                     l.getOrder(), authenticator, strategy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzY4MQ=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyNTQzOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODowMVrOGTXTPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODowMVrOGTXTPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Nzg4Ng==", "bodyText": "Bean name should match method name, as it's done everywhere else unless there is good reason not to.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957886", "createdAt": "2020-05-11T10:58:01Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyNTk3OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODoxMVrOGTXTkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODoxMVrOGTXTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Nzk2OA==", "bodyText": "Bean name should match method name, as it's done everywhere else unless there is good reason not to.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957968", "createdAt": "2020-05-11T10:58:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyNjc5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODoyNlrOGTXUEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NToxNVrOGTYvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1ODA5Nw==", "bodyText": "See above.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422958097", "createdAt": "2020-05-11T10:58:26Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,6 +27,16 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean\n+    @Scope(\"prototype\")\n+    public LdapPasswordSynchronizationAuthenticationPostProcessor ldapPasswordSynchronizationAuthenticationPostProcessor(\n+            final AbstractLdapSearchProperties properties) {\n+        return new LdapPasswordSynchronizationAuthenticationPostProcessor(properties);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTU0Mw==", "bodyText": "Prototype bean is needed", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422981543", "createdAt": "2020-05-11T11:45:15Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,6 +27,16 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean\n+    @Scope(\"prototype\")\n+    public LdapPasswordSynchronizationAuthenticationPostProcessor ldapPasswordSynchronizationAuthenticationPostProcessor(\n+            final AbstractLdapSearchProperties properties) {\n+        return new LdapPasswordSynchronizationAuthenticationPostProcessor(properties);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1ODA5Nw=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzkyNzYxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODozNFrOGTXUhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NToxOVrOGTYv0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1ODIxMg==", "bodyText": "See above.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422958212", "createdAt": "2020-05-11T10:58:34Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -32,7 +45,9 @@ public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAut\n             ldap.stream()\n                 .filter(LdapPasswordSynchronizationProperties::isEnabled)\n                 .forEach(instance ->\n-                    plan.registerAuthenticationPostProcessor(new LdapPasswordSynchronizationAuthenticationPostProcessor(instance)));\n+                    plan.registerAuthenticationPostProcessor(\n+                        this.applicationContext.getBean(LdapPasswordSynchronizationAuthenticationPostProcessor.class, instance))\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTU4NQ==", "bodyText": "Prototype bean is needed", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422981585", "createdAt": "2020-05-11T11:45:19Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -32,7 +45,9 @@ public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAut\n             ldap.stream()\n                 .filter(LdapPasswordSynchronizationProperties::isEnabled)\n                 .forEach(instance ->\n-                    plan.registerAuthenticationPostProcessor(new LdapPasswordSynchronizationAuthenticationPostProcessor(instance)));\n+                    plan.registerAuthenticationPostProcessor(\n+                        this.applicationContext.getBean(LdapPasswordSynchronizationAuthenticationPostProcessor.class, instance))\n+                );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1ODIxMg=="}, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTQ5ODk0OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNzowNlrOGUOE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxMTowMVrOGUcGig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTMxNg==", "bodyText": "Does the bean need to be public? If so, please mark it as so. Or more generally, specify the access keyword to be consistent and transparent.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423855316", "createdAt": "2020-05-12T16:07:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +40,33 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTEzMA==", "bodyText": "Bean methods MUST be public, otherwise Spring will be unable to access the method to initialize this. This is an accidental mistake.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424085130", "createdAt": "2020-05-12T23:11:01Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +40,33 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTMxNg=="}, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTUwMDUyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNzozMFrOGUOFyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNzozMFrOGUOFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTU2MQ==", "bodyText": "Specify a qualifier for the injected parameter by its name, to avoid conflicts in the future", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423855561", "createdAt": "2020-05-12T16:07:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +40,33 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean() {\n+        return new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {\n+                    ((ConnectionFactory) connectionFactory).close();\n+                });\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    @SneakyThrows\n+    @Autowired\n     @ConditionalOnEnabledHealthIndicator(\"pooledLdapConnectionFactoryHealthIndicator\")\n-    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n+    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator(\n+            final ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTUwMjAyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNzo1MFrOGUOGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNzo1MFrOGUOGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTgwNQ==", "bodyText": "Same sort of comments as above with access keywords and qualifiers.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423855805", "createdAt": "2020-05-12T16:07:50Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,9 +156,22 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean\n+    SetFactoryBean ldapAuthenticationHandlerFactoryBean() {\n+        return new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(handler -> {\n+                    ((LdapAuthenticationHandler) handler).destroy();\n+                });\n+            }\n+        };\n+    }\n+\n     @Bean\n     @RefreshScope\n-    public Collection<AuthenticationHandler> ldapAuthenticationHandlers() {\n+    public Collection<AuthenticationHandler> ldapAuthenticationHandlers(\n+            final SetFactoryBean ldapAuthenticationHandlerFactoryBean) {\n         val handlers = new HashSet<AuthenticationHandler>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTUwNTkxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowODo0NlrOGUOJJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxMDoxMlrOGUcFdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjQyMg==", "bodyText": "Can the cast here be more generic to use DisposableBean? Casting to a concrete impl might cause issues for extensions.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423856422", "createdAt": "2020-05-12T16:08:46Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,9 +156,22 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean\n+    SetFactoryBean ldapAuthenticationHandlerFactoryBean() {\n+        return new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(handler -> {\n+                    ((LdapAuthenticationHandler) handler).destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NDg1Mg==", "bodyText": "No problem", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424084852", "createdAt": "2020-05-12T23:10:12Z", "author": {"login": "leeyc0"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,9 +156,22 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean\n+    SetFactoryBean ldapAuthenticationHandlerFactoryBean() {\n+        return new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(handler -> {\n+                    ((LdapAuthenticationHandler) handler).destroy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjQyMg=="}, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTUwNzQ2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowOTowNlrOGUOKKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowOTowNlrOGUOKKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjY4Mg==", "bodyText": "Should also be reviewed per earlier comments.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423856682", "createdAt": "2020-05-12T16:09:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,15 +28,35 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Bean\n+    @SneakyThrows\n+    ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean() {\n+        return new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(postProcessor -> {\n+                    ((LdapPasswordSynchronizationAuthenticationPostProcessor) postProcessor).destroy();\n+                });\n+            }\n+        };\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1MjI2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDoxOVrOGUrO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDoxOVrOGUrO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzAyNg==", "bodyText": "Should be:\n @Qualifier(\"pooledLdapConnectionFactoryHealthIndicatorListFactoryBean\")\n final ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean\n\nThe parameter that is injected is qualified; not the bean itself.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333026", "createdAt": "2020-05-13T10:24:19Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +42,36 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    public ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean() {\n+        val list = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {\n+                    ((ConnectionFactory) connectionFactory).close();\n+                });\n+            }\n+        };\n+        list.setSourceList(new ArrayList());\n+        return list;\n+    }\n+\n+    @Bean\n+    @SneakyThrows\n+    @Autowired\n+    @Qualifier(\"pooledLdapConnectionFactoryHealthIndicatorListFactoryBean\")\n     @ConditionalOnEnabledHealthIndicator(\"pooledLdapConnectionFactoryHealthIndicator\")\n-    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n+    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator(\n+            final ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1MzU4OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo0M1rOGUrPzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo0M1rOGUrPzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    list.setSourceList(new ArrayList());\n          \n          \n            \n                    list.setSourceList(new ArrayList<>());", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333260", "createdAt": "2020-05-13T10:24:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +42,36 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    public ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean() {\n+        val list = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {\n+                    ((ConnectionFactory) connectionFactory).close();\n+                });\n+            }\n+        };\n+        list.setSourceList(new ArrayList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1NDMyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo1NlrOGUrQUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo1NlrOGUrQUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzM5Mg==", "bodyText": "Can the {} be removed here? they seem unnecessary.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333392", "createdAt": "2020-05-13T10:24:56Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +42,36 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    public ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean() {\n+        val list = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1NTQ5OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNToxNVrOGUrREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNToxNVrOGUrREg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzU4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    bean.setSourceSet(new HashSet());\n          \n          \n            \n                    bean.setSourceSet(new HashSet<>());", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333586", "createdAt": "2020-05-13T10:25:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -155,8 +160,24 @@ public PrincipalFactory ldapPrincipalFactory() {\n     }\n \n     @Bean\n+    public SetFactoryBean ldapAuthenticationHandlerSetFactoryBean() {\n+        val bean = new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(Unchecked.consumer(handler -> {\n+                    ((DisposableBean) handler).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceSet(new HashSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1NTk2OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNToyNFrOGUrRXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNToyNFrOGUrRXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzY2MA==", "bodyText": "Remove {} ?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333660", "createdAt": "2020-05-13T10:25:24Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -155,8 +160,24 @@ public PrincipalFactory ldapPrincipalFactory() {\n     }\n \n     @Bean\n+    public SetFactoryBean ldapAuthenticationHandlerSetFactoryBean() {\n+        val bean = new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(Unchecked.consumer(handler -> {\n+                    ((DisposableBean) handler).destroy();\n+                }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1NzIyOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNTo0N1rOGUrSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNTo0N1rOGUrSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzg3OA==", "bodyText": "Also should be qualified.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333878", "createdAt": "2020-05-13T10:25:47Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -155,8 +160,24 @@ public PrincipalFactory ldapPrincipalFactory() {\n     }\n \n     @Bean\n+    public SetFactoryBean ldapAuthenticationHandlerSetFactoryBean() {\n+        val bean = new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(Unchecked.consumer(handler -> {\n+                    ((DisposableBean) handler).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceSet(new HashSet());\n+        return bean;\n+    }\n+\n+    @Bean\n+    @SneakyThrows\n     @RefreshScope\n-    public Collection<AuthenticationHandler> ldapAuthenticationHandlers() {\n+    public Collection<AuthenticationHandler> ldapAuthenticationHandlers(\n+            final SetFactoryBean ldapAuthenticationHandlerSetFactoryBean) {\n         val handlers = new HashSet<AuthenticationHandler>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1ODAxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjowM1rOGUrSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjowM1rOGUrSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDAxNg==", "bodyText": "please move the qualifier to the parameter", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424334016", "createdAt": "2020-05-13T10:26:03Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -251,9 +273,12 @@ public PrincipalFactory ldapPrincipalFactory() {\n \n     @ConditionalOnMissingBean(name = \"ldapAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n+    @Autowired\n+    @Qualifier(\"ldapAuthenticationHandlerSetFactoryBean\")\n     @RefreshScope\n-    public AuthenticationEventExecutionPlanConfigurer ldapAuthenticationEventExecutionPlanConfigurer() {\n-        return plan -> ldapAuthenticationHandlers().forEach(handler -> {\n+    public AuthenticationEventExecutionPlanConfigurer ldapAuthenticationEventExecutionPlanConfigurer(\n+            final SetFactoryBean ldapAuthenticationHandlerSetFactoryBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1ODUxOnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjoxNFrOGUrTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjoxNFrOGUrTGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    bean.setSourceList(new ArrayList());\n          \n          \n            \n                    bean.setSourceList(new ArrayList<>());", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424334107", "createdAt": "2020-05-13T10:26:14Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,15 +32,38 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Bean\n+    @SneakyThrows\n+    public ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean() {\n+        val bean = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(Unchecked.consumer(postProcessor -> {\n+                    ((DisposableBean) postProcessor).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceList(new ArrayList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1OTQ1OnYy", "diffSide": "RIGHT", "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjozMFrOGUrTtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjozMFrOGUrTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDI2MA==", "bodyText": "Move qualifier to parameter.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424334260", "createdAt": "2020-05-13T10:26:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,15 +32,38 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Bean\n+    @SneakyThrows\n+    public ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean() {\n+        val bean = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(Unchecked.consumer(postProcessor -> {\n+                    ((DisposableBean) postProcessor).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceList(new ArrayList());\n+        return bean;\n+    }\n+\n     @ConditionalOnMissingBean(name = \"ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n-    public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer() {\n+    @SneakyThrows\n+    @Autowired\n+    @Qualifier(\"ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean\")\n+    public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer(\n+            final ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean) {\n+        val postProcessorList = ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4039, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}