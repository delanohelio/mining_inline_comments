{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTY0NzM2", "number": 4844, "title": "Fix ldap connection pool shut down - phase 1", "bodyText": "Ref: #4804\nNow I split this PR into smaller pieces. This should be the most straightforward one: declaring various beans as DisposableBean, and tracking prototype DisposableBean in DestroyPrototypeBeansPostProcessor for final disposal.\nUnit test added for DestroyPrototypeBeansPostProcessor.", "createdAt": "2020-05-09T11:55:03Z", "url": "https://github.com/apereo/cas/pull/4844", "merged": true, "mergeCommit": {"oid": "4c5f423b9abb566c3b9ac99c81a8248c604b9eaa"}, "closed": true, "closedAt": "2020-05-14T06:07:43Z", "author": {"login": "leeyc0"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcflPorAFqTQwODY0NDI3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg3nsyAFqTQxMDg1MTU0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjQ0Mjcx", "url": "https://github.com/apereo/cas/pull/4844#pullrequestreview-408644271", "createdAt": "2020-05-09T12:01:18Z", "commit": {"oid": "6241a041d262cb8c1f1ab3c6fb85812923752160"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDYxODcz", "url": "https://github.com/apereo/cas/pull/4844#pullrequestreview-409061873", "createdAt": "2020-05-11T10:47:14Z", "commit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NzoxNFrOGTW8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo1ODozNFrOGTXUhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjA3Mw==", "bodyText": "Move out of the configuration class and into its own independent package.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952073", "createdAt": "2020-05-11T10:47:14Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjIyMg==", "bodyText": "Rename bean to be consistent with everything else (there is no get)", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952222", "createdAt": "2020-05-11T10:47:33Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjM4Mw==", "bodyText": "@RequiredArgsConstructor; make fields final.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952383", "createdAt": "2020-05-11T10:47:51Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjQ1MA==", "bodyText": "Remove", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952450", "createdAt": "2020-05-11T10:47:58Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjYxMg==", "bodyText": "Pass the bean factory from the configuration class, and remove.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952612", "createdAt": "2020-05-11T10:48:17Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }\n+        }\n+\n+        private final ArrayList<BeanTuple> prototypeBeans = new ArrayList<>();\n+\n+        private BeanFactory beanFactory;\n+\n+        @Override\n+        public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n+            this.beanFactory = beanFactory;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjY2OA==", "bodyText": "Make final.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952668", "createdAt": "2020-05-11T10:48:22Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }\n+        }\n+\n+        private final ArrayList<BeanTuple> prototypeBeans = new ArrayList<>();\n+\n+        private BeanFactory beanFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Mjc1Ng==", "bodyText": "Left-hand size should always be interface type.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422952756", "createdAt": "2020-05-11T10:48:34Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java", "diffHunk": "@@ -115,6 +125,68 @@ public SmsSender smsSender() {\n         return SmsSender.noOp();\n     }\n \n+    @Bean\n+    public BeanPostProcessor getDestroyPrototypeBeansPostProcessor() {\n+        return new DestroyPrototypeBeansPostProcessor();\n+    }\n+\n+    private static class DestroyPrototypeBeansPostProcessor implements BeanPostProcessor, DisposableBean, BeanFactoryAware {\n+\n+        @Getter\n+        private static class BeanTuple {\n+            private String name;\n+            private DisposableBean bean;\n+\n+            BeanTuple(final String name, final DisposableBean bean) {\n+                this.name = name;\n+                this.bean = bean;\n+            }\n+        }\n+\n+        private final ArrayList<BeanTuple> prototypeBeans = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTMzNw==", "bodyText": "If this is turned into a proper bean, there is no need to mark it as prototype. Spring application lifecycle will take care of it?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422955337", "createdAt": "2020-05-11T10:53:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(\n+                                                      final Long maxWait,\n+                                                      final PooledConnectionFactory factory,\n+                                                      final ExecutorService executor,\n+                                                      final ConnectionValidator validator) {\n+        return new PooledLdapConnectionFactoryHealthIndicator(maxWait.longValue(), factory, executor, validator);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTY1NQ==", "bodyText": "Never use this.applicationContext.getBean() unless you absolutely have to (and you should not have to). Pass the bean instance or invoke it directly.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422955655", "createdAt": "2020-05-11T10:53:47Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -46,8 +64,11 @@ public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n                 val executor = Beans.newThreadPoolExecutorFactoryBean(ldap.getPool());\n                 executor.afterPropertiesSet();\n                 val connectionFactory = LdapUtils.newLdaptivePooledConnectionFactory(ldap);\n-                val healthIndicator = new PooledLdapConnectionFactoryHealthIndicator(Beans.newDuration(ldap.getMaxWait()).toMillis(),\n-                    connectionFactory, executor.getObject(), new SearchConnectionValidator());\n+                val healthIndicator = (PooledLdapConnectionFactoryHealthIndicator) this.applicationContext.getBean(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NTg2NA==", "bodyText": "References to class in javadocs should be annotated with @link", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422955864", "createdAt": "2020-05-11T10:54:10Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/PooledLdapConnectionFactoryHealthIndicator.java", "diffHunk": "@@ -35,6 +35,16 @@ public PooledLdapConnectionFactoryHealthIndicator(final long maxWait,\n         this.validator = validator;\n     }\n \n+\n+    /**\n+     * Shuts down PooledLdapConnectionFactoryHealthIndicator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NjI2Nw==", "bodyText": "Sometimes you're specifying javadocs and sometimes you're not. It's best to remove them all, as the javadocs in almost all such cases are redundant. If you do specify them, you need to be consistent everywhere in your patch.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422956267", "createdAt": "2020-05-11T10:54:55Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-consent-ldap/src/main/java/org/apereo/cas/consent/LdapConsentRepository.java", "diffHunk": "@@ -259,4 +260,9 @@ private LdapEntry readConsentEntry(final String principal) {\n         LOGGER.debug(\"Unable to read consent entries from LDAP via filter [{}]\", filter);\n         return new HashSet<>(0);\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NjY4Mw==", "bodyText": "Rewrite the bean and remove parameter passing.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422956683", "createdAt": "2020-05-11T10:55:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(\n+                                                      final Long maxWait,\n+                                                      final PooledConnectionFactory factory,\n+                                                      final ExecutorService executor,\n+                                                      final ConnectionValidator validator) {\n+        return new PooledLdapConnectionFactoryHealthIndicator(maxWait.longValue(), factory, executor, validator);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzExNQ==", "bodyText": "authenticator.close() should be enough.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957115", "createdAt": "2020-05-11T10:56:35Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java", "diffHunk": "@@ -101,6 +105,18 @@ public LdapAuthenticationHandler(final String name, final ServicesManager servic\n         this.passwordPolicyHandlingStrategy = strategy;\n     }\n \n+    @Override\n+    public void destroy() {\n+        val authenticationHandler = (AbstractAuthenticationHandler) authenticator.getAuthenticationHandler();\n+        val dnResolver = (SearchDnResolver) authenticator.getDnResolver();\n+        val entryResolver = (AbstractSearchEntryResolver) authenticator.getEntryResolver();\n+        authenticationHandler.getConnectionFactory().close();\n+        dnResolver.getConnectionFactory().close();\n+        if (entryResolver != null) {\n+            entryResolver.getConnectionFactory().close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzQ1MQ==", "bodyText": "If proper bean (and not an inner object) Spring should take care of it?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957451", "createdAt": "2020-05-11T10:57:12Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,\n+                                     final PrincipalFactory principalFactory, final Integer order,\n+                                     final Authenticator authenticator,\n+                                     final AuthenticationPasswordPolicyHandlingStrategy strategy) {\n+        return new LdapAuthenticationHandler(name, servicesManager, principalFactory, order,\n+                                             authenticator, strategy);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzU0Mg==", "bodyText": "Remove all parameter passing.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957542", "createdAt": "2020-05-11T10:57:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,\n+                                     final PrincipalFactory principalFactory, final Integer order,\n+                                     final Authenticator authenticator,\n+                                     final AuthenticationPasswordPolicyHandlingStrategy strategy) {\n+        return new LdapAuthenticationHandler(name, servicesManager, principalFactory, order,\n+                                             authenticator, strategy);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1NzY4MQ==", "bodyText": "Remove getBean references. Should never be used.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957681", "createdAt": "2020-05-11T10:57:39Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -185,8 +196,9 @@ public PrincipalFactory ldapPrincipalFactory() {\n                 val strategy = createLdapPasswordPolicyHandlingStrategy(l);\n \n                 LOGGER.debug(\"Creating LDAP authentication handler for [{}]\", l.getLdapUrl());\n-                val handler = new LdapAuthenticationHandler(l.getName(),\n-                    servicesManager.getObject(), ldapPrincipalFactory(),\n+                val handler = (LdapAuthenticationHandler) applicationContext.getBean(\n+                    \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\",\n+                    l.getName(), servicesManager.getObject(), ldapPrincipalFactory(),\n                     l.getOrder(), authenticator, strategy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Nzg4Ng==", "bodyText": "Bean name should match method name, as it's done everywhere else unless there is good reason not to.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957886", "createdAt": "2020-05-11T10:58:01Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,6 +155,16 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean(name = \"ldapAuthenticationConfigurationNewLdapAuthenticationHandler\")\n+    @Scope(\"prototype\")\n+    public LdapAuthenticationHandler newLdapAuthenticationHandler(final String name, final ServicesManager servicesManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Nzk2OA==", "bodyText": "Bean name should match method name, as it's done everywhere else unless there is good reason not to.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422957968", "createdAt": "2020-05-11T10:58:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -35,6 +40,19 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean(name = \"ldapMonitorConfigurationPooledLdapConnectionFactoryHealthIndicator\")\n+    @Scope(\"prototype\")\n+    public PooledLdapConnectionFactoryHealthIndicator pooledLdapConnectionFactoryHealthIndicator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1ODA5Nw==", "bodyText": "See above.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422958097", "createdAt": "2020-05-11T10:58:26Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,6 +27,16 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Bean\n+    @Scope(\"prototype\")\n+    public LdapPasswordSynchronizationAuthenticationPostProcessor ldapPasswordSynchronizationAuthenticationPostProcessor(\n+            final AbstractLdapSearchProperties properties) {\n+        return new LdapPasswordSynchronizationAuthenticationPostProcessor(properties);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1ODIxMg==", "bodyText": "See above.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r422958212", "createdAt": "2020-05-11T10:58:34Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -32,7 +45,9 @@ public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAut\n             ldap.stream()\n                 .filter(LdapPasswordSynchronizationProperties::isEnabled)\n                 .forEach(instance ->\n-                    plan.registerAuthenticationPostProcessor(new LdapPasswordSynchronizationAuthenticationPostProcessor(instance)));\n+                    plan.registerAuthenticationPostProcessor(\n+                        this.applicationContext.getBean(LdapPasswordSynchronizationAuthenticationPostProcessor.class, instance))\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62239aaeb69bbe7331650ba69756f116fb0c62d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTk3NzI4", "url": "https://github.com/apereo/cas/pull/4844#pullrequestreview-410197728", "createdAt": "2020-05-12T16:07:06Z", "commit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNzowNlrOGUOE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowOTowNlrOGUOKKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTMxNg==", "bodyText": "Does the bean need to be public? If so, please mark it as so. Or more generally, specify the access keyword to be consistent and transparent.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423855316", "createdAt": "2020-05-12T16:07:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +40,33 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTU2MQ==", "bodyText": "Specify a qualifier for the injected parameter by its name, to avoid conflicts in the future", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423855561", "createdAt": "2020-05-12T16:07:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +40,33 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean() {\n+        return new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {\n+                    ((ConnectionFactory) connectionFactory).close();\n+                });\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    @SneakyThrows\n+    @Autowired\n     @ConditionalOnEnabledHealthIndicator(\"pooledLdapConnectionFactoryHealthIndicator\")\n-    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n+    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator(\n+            final ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorFactoryBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTgwNQ==", "bodyText": "Same sort of comments as above with access keywords and qualifiers.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423855805", "createdAt": "2020-05-12T16:07:50Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,9 +156,22 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean\n+    SetFactoryBean ldapAuthenticationHandlerFactoryBean() {\n+        return new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(handler -> {\n+                    ((LdapAuthenticationHandler) handler).destroy();\n+                });\n+            }\n+        };\n+    }\n+\n     @Bean\n     @RefreshScope\n-    public Collection<AuthenticationHandler> ldapAuthenticationHandlers() {\n+    public Collection<AuthenticationHandler> ldapAuthenticationHandlers(\n+            final SetFactoryBean ldapAuthenticationHandlerFactoryBean) {\n         val handlers = new HashSet<AuthenticationHandler>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjQyMg==", "bodyText": "Can the cast here be more generic to use DisposableBean? Casting to a concrete impl might cause issues for extensions.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423856422", "createdAt": "2020-05-12T16:08:46Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -154,9 +156,22 @@ public PrincipalFactory ldapPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n+    @Bean\n+    SetFactoryBean ldapAuthenticationHandlerFactoryBean() {\n+        return new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(handler -> {\n+                    ((LdapAuthenticationHandler) handler).destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjY4Mg==", "bodyText": "Should also be reviewed per earlier comments.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r423856682", "createdAt": "2020-05-12T16:09:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,15 +28,35 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Bean\n+    @SneakyThrows\n+    ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean() {\n+        return new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(postProcessor -> {\n+                    ((LdapPasswordSynchronizationAuthenticationPostProcessor) postProcessor).destroy();\n+                });\n+            }\n+        };\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb96f46f64c965d1d5b4cc804b61209cad7b3760"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762b5913f62ed82d810f55ff09b7637b50163671", "author": {"user": {"login": "leeyc0", "name": null}}, "url": "https://github.com/apereo/cas/commit/762b5913f62ed82d810f55ff09b7637b50163671", "committedDate": "2020-05-13T01:15:19Z", "message": "mark these as disposable bean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed632641ca042f4ed86f02361c1b77a66d1b4f6", "author": {"user": {"login": "leeyc0", "name": null}}, "url": "https://github.com/apereo/cas/commit/3ed632641ca042f4ed86f02361c1b77a66d1b4f6", "committedDate": "2020-05-13T05:07:10Z", "message": "add destroy() test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a", "author": {"user": {"login": "leeyc0", "name": null}}, "url": "https://github.com/apereo/cas/commit/7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a", "committedDate": "2020-05-13T09:59:44Z", "message": "using FactoryBean to store objects that need to be disposed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzkwMjg4", "url": "https://github.com/apereo/cas/pull/4844#pullrequestreview-410790288", "createdAt": "2020-05-13T10:24:19Z", "commit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDoxOVrOGUrO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjozMFrOGUrTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzAyNg==", "bodyText": "Should be:\n @Qualifier(\"pooledLdapConnectionFactoryHealthIndicatorListFactoryBean\")\n final ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean\n\nThe parameter that is injected is qualified; not the bean itself.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333026", "createdAt": "2020-05-13T10:24:19Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +42,36 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    public ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean() {\n+        val list = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {\n+                    ((ConnectionFactory) connectionFactory).close();\n+                });\n+            }\n+        };\n+        list.setSourceList(new ArrayList());\n+        return list;\n+    }\n+\n+    @Bean\n+    @SneakyThrows\n+    @Autowired\n+    @Qualifier(\"pooledLdapConnectionFactoryHealthIndicatorListFactoryBean\")\n     @ConditionalOnEnabledHealthIndicator(\"pooledLdapConnectionFactoryHealthIndicator\")\n-    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator() {\n+    public CompositeHealthContributor pooledLdapConnectionFactoryHealthIndicator(\n+            final ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzI2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    list.setSourceList(new ArrayList());\n          \n          \n            \n                    list.setSourceList(new ArrayList<>());", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333260", "createdAt": "2020-05-13T10:24:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +42,36 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    public ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean() {\n+        val list = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {\n+                    ((ConnectionFactory) connectionFactory).close();\n+                });\n+            }\n+        };\n+        list.setSourceList(new ArrayList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzM5Mg==", "bodyText": "Can the {} be removed here? they seem unnecessary.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333392", "createdAt": "2020-05-13T10:24:56Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java", "diffHunk": "@@ -36,16 +42,36 @@\n     private CasConfigurationProperties casProperties;\n \n     @Bean\n+    public ListFactoryBean pooledLdapConnectionFactoryHealthIndicatorListFactoryBean() {\n+        val list = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(connectionFactory -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzU4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    bean.setSourceSet(new HashSet());\n          \n          \n            \n                    bean.setSourceSet(new HashSet<>());", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333586", "createdAt": "2020-05-13T10:25:15Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -155,8 +160,24 @@ public PrincipalFactory ldapPrincipalFactory() {\n     }\n \n     @Bean\n+    public SetFactoryBean ldapAuthenticationHandlerSetFactoryBean() {\n+        val bean = new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(Unchecked.consumer(handler -> {\n+                    ((DisposableBean) handler).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceSet(new HashSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzY2MA==", "bodyText": "Remove {} ?", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333660", "createdAt": "2020-05-13T10:25:24Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -155,8 +160,24 @@ public PrincipalFactory ldapPrincipalFactory() {\n     }\n \n     @Bean\n+    public SetFactoryBean ldapAuthenticationHandlerSetFactoryBean() {\n+        val bean = new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(Unchecked.consumer(handler -> {\n+                    ((DisposableBean) handler).destroy();\n+                }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzg3OA==", "bodyText": "Also should be qualified.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424333878", "createdAt": "2020-05-13T10:25:47Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -155,8 +160,24 @@ public PrincipalFactory ldapPrincipalFactory() {\n     }\n \n     @Bean\n+    public SetFactoryBean ldapAuthenticationHandlerSetFactoryBean() {\n+        val bean = new SetFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final Set set) {\n+                set.forEach(Unchecked.consumer(handler -> {\n+                    ((DisposableBean) handler).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceSet(new HashSet());\n+        return bean;\n+    }\n+\n+    @Bean\n+    @SneakyThrows\n     @RefreshScope\n-    public Collection<AuthenticationHandler> ldapAuthenticationHandlers() {\n+    public Collection<AuthenticationHandler> ldapAuthenticationHandlers(\n+            final SetFactoryBean ldapAuthenticationHandlerSetFactoryBean) {\n         val handlers = new HashSet<AuthenticationHandler>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDAxNg==", "bodyText": "please move the qualifier to the parameter", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424334016", "createdAt": "2020-05-13T10:26:03Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java", "diffHunk": "@@ -251,9 +273,12 @@ public PrincipalFactory ldapPrincipalFactory() {\n \n     @ConditionalOnMissingBean(name = \"ldapAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n+    @Autowired\n+    @Qualifier(\"ldapAuthenticationHandlerSetFactoryBean\")\n     @RefreshScope\n-    public AuthenticationEventExecutionPlanConfigurer ldapAuthenticationEventExecutionPlanConfigurer() {\n-        return plan -> ldapAuthenticationHandlers().forEach(handler -> {\n+    public AuthenticationEventExecutionPlanConfigurer ldapAuthenticationEventExecutionPlanConfigurer(\n+            final SetFactoryBean ldapAuthenticationHandlerSetFactoryBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDEwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    bean.setSourceList(new ArrayList());\n          \n          \n            \n                    bean.setSourceList(new ArrayList<>());", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424334107", "createdAt": "2020-05-13T10:26:14Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,15 +32,38 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Bean\n+    @SneakyThrows\n+    public ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean() {\n+        val bean = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(Unchecked.consumer(postProcessor -> {\n+                    ((DisposableBean) postProcessor).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceList(new ArrayList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDI2MA==", "bodyText": "Move qualifier to parameter.", "url": "https://github.com/apereo/cas/pull/4844#discussion_r424334260", "createdAt": "2020-05-13T10:26:30Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapPasswordSynchronizationConfiguration.java", "diffHunk": "@@ -24,15 +32,38 @@\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Bean\n+    @SneakyThrows\n+    public ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean() {\n+        val bean = new ListFactoryBean() {\n+            @Override\n+            protected void destroyInstance(final List list) {\n+                list.forEach(Unchecked.consumer(postProcessor -> {\n+                    ((DisposableBean) postProcessor).destroy();\n+                }));\n+            }\n+        };\n+        bean.setSourceList(new ArrayList());\n+        return bean;\n+    }\n+\n     @ConditionalOnMissingBean(name = \"ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n-    public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer() {\n+    @SneakyThrows\n+    @Autowired\n+    @Qualifier(\"ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean\")\n+    public AuthenticationEventExecutionPlanConfigurer ldapPasswordSynchronizationAuthenticationEventExecutionPlanConfigurer(\n+            final ListFactoryBean ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean) {\n+        val postProcessorList = ldapPasswordSynchronizationAuthenticationPostProcessorListFactoryBean.getObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec49ebe2ddd36d1079b8e117e1ccaef7693de7a"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37aba84b245ed116ed6810b1ddf620ed32191bb", "author": {"user": {"login": "leeyc0", "name": null}}, "url": "https://github.com/apereo/cas/commit/c37aba84b245ed116ed6810b1ddf620ed32191bb", "committedDate": "2020-05-13T11:44:23Z", "message": "misc code fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwODUxNTQ2", "url": "https://github.com/apereo/cas/pull/4844#pullrequestreview-410851546", "createdAt": "2020-05-13T11:59:48Z", "commit": {"oid": "c37aba84b245ed116ed6810b1ddf620ed32191bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3587, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}