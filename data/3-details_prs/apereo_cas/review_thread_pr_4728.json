{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjI3MDQy", "number": 4728, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1ODo1M1rODjuZUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMzowMVrODjuc1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg2ODk4OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1ODo1M1rOFvsTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1ODo1M1rOFvsTcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MzI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.debug(\"Overriding PGT policy with the specific policy: {}\", servicePgtPolicy);\n          \n          \n            \n                        LOGGER.trace(\"Overriding proxy-granting ticket policy with the specific policy: [{}]\", servicePgtPolicy);", "url": "https://github.com/apereo/cas/pull/4728#discussion_r385553265", "createdAt": "2020-02-28T07:58:53Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "diffHunk": "@@ -75,6 +86,31 @@\n         return (T) result;\n     }\n \n+    /**\n+     * Produce the ticket with the adequate expiration policy.\n+     *\n+     * @param servicePgtPolicy the proxy granting ticket expiration policy\n+     * @param serviceTicket    the service ticket\n+     * @param authentication   the authentication\n+     * @param pgtId            the PGT id\n+     * @return the ticket\n+     */\n+    protected ProxyGrantingTicket produceTicketWithAdequateExpirationPolicy(\n+            final RegisteredServiceProxyGrantingTicketExpirationPolicy servicePgtPolicy,\n+            final ServiceTicket serviceTicket,\n+            final Authentication authentication,\n+            final String pgtId) {\n+        if (servicePgtPolicy != null) {\n+            LOGGER.debug(\"Overriding PGT policy with the specific policy: {}\", servicePgtPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1de408894986b43e40a61d83e4e2d18b069a5c5"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg2OTczOnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1OToxNVrOFvsT6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1OToxNVrOFvsT6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MzM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.debug(\"Using default TGT policy for PGT\");\n          \n          \n            \n                        LOGGER.trace(\"Using default ticket-granting ticket policy for proxy-granting ticket\");", "url": "https://github.com/apereo/cas/pull/4728#discussion_r385553387", "createdAt": "2020-02-28T07:59:15Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "diffHunk": "@@ -75,6 +86,31 @@\n         return (T) result;\n     }\n \n+    /**\n+     * Produce the ticket with the adequate expiration policy.\n+     *\n+     * @param servicePgtPolicy the proxy granting ticket expiration policy\n+     * @param serviceTicket    the service ticket\n+     * @param authentication   the authentication\n+     * @param pgtId            the PGT id\n+     * @return the ticket\n+     */\n+    protected ProxyGrantingTicket produceTicketWithAdequateExpirationPolicy(\n+            final RegisteredServiceProxyGrantingTicketExpirationPolicy servicePgtPolicy,\n+            final ServiceTicket serviceTicket,\n+            final Authentication authentication,\n+            final String pgtId) {\n+        if (servicePgtPolicy != null) {\n+            LOGGER.debug(\"Overriding PGT policy with the specific policy: {}\", servicePgtPolicy);\n+            return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n+                    new HardTimeoutExpirationPolicy(servicePgtPolicy.getMaxTimeToLiveInSeconds()));\n+        } else {\n+            LOGGER.debug(\"Using default TGT policy for PGT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1de408894986b43e40a61d83e4e2d18b069a5c5"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg3MTI5OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMDowMFrOFvsU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMDowMFrOFvsU6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MzY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        LOGGER.trace(\"Using default ticket-granting ticket policy for proxy-granting ticket\");\n          \n          \n            \n                        return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n          \n          \n            \n                                this.ticketGrantingTicketExpirationPolicy.buildTicketExpirationPolicy());\n          \n          \n            \n                    }\n          \n          \n            \n                    } \n          \n          \n            \n                    LOGGER.trace(\"Using default ticket-granting ticket policy for proxy-granting ticket\");\n          \n          \n            \n                    return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n          \n          \n            \n                        this.ticketGrantingTicketExpirationPolicy.buildTicketExpirationPolicy());", "url": "https://github.com/apereo/cas/pull/4728#discussion_r385553643", "createdAt": "2020-02-28T08:00:00Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "diffHunk": "@@ -75,6 +86,31 @@\n         return (T) result;\n     }\n \n+    /**\n+     * Produce the ticket with the adequate expiration policy.\n+     *\n+     * @param servicePgtPolicy the proxy granting ticket expiration policy\n+     * @param serviceTicket    the service ticket\n+     * @param authentication   the authentication\n+     * @param pgtId            the PGT id\n+     * @return the ticket\n+     */\n+    protected ProxyGrantingTicket produceTicketWithAdequateExpirationPolicy(\n+            final RegisteredServiceProxyGrantingTicketExpirationPolicy servicePgtPolicy,\n+            final ServiceTicket serviceTicket,\n+            final Authentication authentication,\n+            final String pgtId) {\n+        if (servicePgtPolicy != null) {\n+            LOGGER.trace(\"Overriding proxy-granting ticket policy with the specific policy: [{}]\", servicePgtPolicy);\n+            return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n+                    new HardTimeoutExpirationPolicy(servicePgtPolicy.getMaxTimeToLiveInSeconds()));\n+        } else {\n+            LOGGER.trace(\"Using default ticket-granting ticket policy for proxy-granting ticket\");\n+            return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n+                    this.ticketGrantingTicketExpirationPolicy.buildTicketExpirationPolicy());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce89a806abdae864e4910971ac913b81f434125"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg3Nzk3OnYy", "diffSide": "RIGHT", "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMzowMVrOFvsYwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDozMDoyNFrOFwItYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDYyNg==", "bodyText": "This looks perfectly fine. Some future refactoring may be in order if we could use a specific builder class and not duplicate the logic here with a hard-coded type of timeout. In theory, because TGT policies can be the same as PGTs by default, we should try to allow for the same type of options when we define policies on a per-service basis as well. (i.e. if a policy can be based on a idle-timeout for TGT per service, it should also be allowed for the same thing when defined for a PGT per service)", "url": "https://github.com/apereo/cas/pull/4728#discussion_r385554626", "createdAt": "2020-02-28T08:03:01Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "diffHunk": "@@ -75,6 +86,31 @@\n         return (T) result;\n     }\n \n+    /**\n+     * Produce the ticket with the adequate expiration policy.\n+     *\n+     * @param servicePgtPolicy the proxy granting ticket expiration policy\n+     * @param serviceTicket    the service ticket\n+     * @param authentication   the authentication\n+     * @param pgtId            the PGT id\n+     * @return the ticket\n+     */\n+    protected ProxyGrantingTicket produceTicketWithAdequateExpirationPolicy(\n+            final RegisteredServiceProxyGrantingTicketExpirationPolicy servicePgtPolicy,\n+            final ServiceTicket serviceTicket,\n+            final Authentication authentication,\n+            final String pgtId) {\n+        if (servicePgtPolicy != null) {\n+            LOGGER.trace(\"Overriding proxy-granting ticket policy with the specific policy: [{}]\", servicePgtPolicy);\n+            return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n+                    new HardTimeoutExpirationPolicy(servicePgtPolicy.getMaxTimeToLiveInSeconds()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28b175014fdf27bd262f2c95f394d84ef9b77b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2MDAwMQ==", "bodyText": "As you say \"future\", I understand that this pull request remains \"as is\" for the merge, right?\nThis is something I thought about, but to be honest I wan't sure about the expected implementation. As the buildTicketExpirationPolicy method does not accept any parameter, I couldn't think of any solution except than creating every time an expiration policy builder from the service PGT policy. Something like:\nif (servicePgtPolicy != null) {\n  LOGGER.trace(\"Overriding proxy-granting ticket policy with the specific policy: [{}]\", servicePgtPolicy);\n  val servicePGTExpirationPolicyBuilder =\nnew RegisteredServicePGTExpirationPolicyBuilder(servicePgtPolicy);\n  return serviceTicket.grantProxyGrantingTicket(pgtId, authentication, \nservicePGTExpirationPolicyBuilder.buildTicketExpirationPolicy());\nIs this what you had in mind?", "url": "https://github.com/apereo/cas/pull/4728#discussion_r385560001", "createdAt": "2020-02-28T08:18:15Z", "author": {"login": "leleuj"}, "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "diffHunk": "@@ -75,6 +86,31 @@\n         return (T) result;\n     }\n \n+    /**\n+     * Produce the ticket with the adequate expiration policy.\n+     *\n+     * @param servicePgtPolicy the proxy granting ticket expiration policy\n+     * @param serviceTicket    the service ticket\n+     * @param authentication   the authentication\n+     * @param pgtId            the PGT id\n+     * @return the ticket\n+     */\n+    protected ProxyGrantingTicket produceTicketWithAdequateExpirationPolicy(\n+            final RegisteredServiceProxyGrantingTicketExpirationPolicy servicePgtPolicy,\n+            final ServiceTicket serviceTicket,\n+            final Authentication authentication,\n+            final String pgtId) {\n+        if (servicePgtPolicy != null) {\n+            LOGGER.trace(\"Overriding proxy-granting ticket policy with the specific policy: [{}]\", servicePgtPolicy);\n+            return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n+                    new HardTimeoutExpirationPolicy(servicePgtPolicy.getMaxTimeToLiveInSeconds()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDYyNg=="}, "originalCommit": {"oid": "6a28b175014fdf27bd262f2c95f394d84ef9b77b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODY1Ng==", "bodyText": "As you say \"future\", I understand that this pull request remains \"as is\" for the merge, right?\n\nExactly, yes. Let's not worry about this right now.\n\nIs this what you had in mind?\n\nYes, but after your explanation it's obvious that might need to clean up the API slightly to allow for dynamic building of expiration policies without having to create the builder every time. Something to do later perhaps once the need pops up, and we can make a note of it internally to revisit perhaps in RC4 or 6.3, etc.\nThanks for your review!", "url": "https://github.com/apereo/cas/pull/4728#discussion_r386018656", "createdAt": "2020-02-29T10:30:24Z", "author": {"login": "mmoayyed"}, "path": "core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/factory/DefaultProxyGrantingTicketFactory.java", "diffHunk": "@@ -75,6 +86,31 @@\n         return (T) result;\n     }\n \n+    /**\n+     * Produce the ticket with the adequate expiration policy.\n+     *\n+     * @param servicePgtPolicy the proxy granting ticket expiration policy\n+     * @param serviceTicket    the service ticket\n+     * @param authentication   the authentication\n+     * @param pgtId            the PGT id\n+     * @return the ticket\n+     */\n+    protected ProxyGrantingTicket produceTicketWithAdequateExpirationPolicy(\n+            final RegisteredServiceProxyGrantingTicketExpirationPolicy servicePgtPolicy,\n+            final ServiceTicket serviceTicket,\n+            final Authentication authentication,\n+            final String pgtId) {\n+        if (servicePgtPolicy != null) {\n+            LOGGER.trace(\"Overriding proxy-granting ticket policy with the specific policy: [{}]\", servicePgtPolicy);\n+            return serviceTicket.grantProxyGrantingTicket(pgtId, authentication,\n+                    new HardTimeoutExpirationPolicy(servicePgtPolicy.getMaxTimeToLiveInSeconds()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDYyNg=="}, "originalCommit": {"oid": "6a28b175014fdf27bd262f2c95f394d84ef9b77b"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4060, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}