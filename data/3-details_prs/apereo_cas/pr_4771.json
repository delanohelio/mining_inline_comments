{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNTgyNTUw", "number": 4771, "title": "OIDC/OAuth Revocation improvements part 2", "bodyText": "Hello Misagh,\nThis the second and last part of my work on the OAuth/OIDC revocation process. I still have to add tests & doc for the new revocation endpoints but I thought it would be easier for you to start reviewing from now.\nHere the changelog:\n\nRevocation is now but supported inside the /oauth2.0 & oidc urls instead of /oidc only\nAdd support for public clients\nFix a bug which allow a client to revoke a token from another client\nRefresh token revocation now revoke all Access Token related to the Refresh Token submitted\n\nTake your time to review and let me know if you need any further information.\nRegards,\nJulien", "createdAt": "2020-03-23T19:13:00Z", "url": "https://github.com/apereo/cas/pull/4771", "merged": true, "mergeCommit": {"oid": "30b4621884243ccc251167d9d162cd7bd646886b"}, "closed": true, "closedAt": "2020-03-31T03:29:27Z", "author": {"login": "julienhuon"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQi7QbAH2gAyMzkyNTgyNTUwOmZjYzgxZTc1ZDBkODFkMzFiNzNhNzQzNGNlNTRhY2NiMzhjYTQ0OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS1c-QAH2gAyMzkyNTgyNTUwOmUyMWU5NDg5MjAzYjJkZmQyMjk4NjIxZjEwNjExMTRiZmYwMDYzYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/fcc81e75d0d81d31b73a7434ce54accb38ca448a", "committedDate": "2020-03-23T18:50:22Z", "message": "OIDC/OAuth Revocation improvements part 2\n\n* Revocation is now supported inside the /oauth2.0 url instead of /oidc \nonly\n\n* add support for public clients\n\n* Fix a bug which allow a client to revoke a token from another client\n\n* Refresh token revocation new revoke all Access Token related to the \nRefresh Token submitted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDY2NzI4", "url": "https://github.com/apereo/cas/pull/4771#pullrequestreview-380066728", "createdAt": "2020-03-24T07:54:40Z", "commit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo1NDo0MFrOF6kZdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowNzo1MlrOF6kx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1ODA2OQ==", "bodyText": "Include the client-id in the log message please", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396958069", "createdAt": "2020-03-24T07:54:40Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/token/OAuth20RevocationRequestValidator.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.apereo.cas.support.oauth.validator.token;\n+\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.springframework.core.Ordered;\n+\n+/**\n+ * This is {@link OAuth20RevocationRequestValidator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+@Getter\n+@Setter\n+public class OAuth20RevocationRequestValidator implements OAuth20TokenRequestValidator {\n+    private final ServicesManager servicesManager;\n+\n+    private int order = Ordered.LOWEST_PRECEDENCE;\n+\n+    @Override\n+    public boolean validate(final JEEContext context) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(this.servicesManager, clientId);\n+\n+        if (registeredService == null) {\n+            LOGGER.warn(\"Provided client id cannot be matched against a service definition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1ODc4OA==", "bodyText": "Missing \"?\".\nAlso, it's best to describe exactly what a \"public\" client is, since the implementation here does not visibly provide a clue API-wise. Something as simple as, a \"public client is one that does not define a secret\", etc.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396958788", "createdAt": "2020-03-24T07:56:18Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -48,6 +54,32 @@ public boolean preHandle(final HttpServletRequest request, final HttpServletResp\n         return !isAuthorizationRequest(request, response) || requiresAuthenticationAuthorizeInterceptor.preHandle(request, response, handler);\n     }\n \n+    /**\n+    * Is the client requesting is a OAuth \"public\" client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1ODg0Nw==", "bodyText": "StringUtils.isNotBlank()", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396958847", "createdAt": "2020-03-24T07:56:26Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -48,6 +54,32 @@ public boolean preHandle(final HttpServletRequest request, final HttpServletResp\n         return !isAuthorizationRequest(request, response) || requiresAuthenticationAuthorizeInterceptor.preHandle(request, response, handler);\n     }\n \n+    /**\n+    * Is the client requesting is a OAuth \"public\" client.\n+    * @param request the request\n+    * @param response the response\n+    * @return the boolean\n+    */\n+    protected boolean clientNeedAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(new JEEContext(request, response)).getLeft();\n+        val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(servicesManager, clientId);\n+        if (clientId.isEmpty() || registeredService == null) {\n+            return true;\n+        }\n+        return !StringUtils.isBlank(registeredService.getClientSecret());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1OTE2MQ==", "bodyText": "Unnecessary else here.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396959161", "createdAt": "2020-03-24T07:57:08Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -84,7 +116,11 @@ protected boolean isDeviceTokenRequest(final HttpServletRequest request, final H\n      */\n     protected boolean requestRequiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n         val accessTokenRequest = isAccessTokenRequest(request, response);\n-        if (!accessTokenRequest) {\n+        val revokeTokenRequest = isRevokeTokenRequest(request, response);\n+\n+        if (revokeTokenRequest) {\n+            return clientNeedAuthentication(request, response);\n+        } else if (!accessTokenRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1OTM5OQ==", "bodyText": "How and what is the session store created with new JEEContext(request, response)?", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396959399", "createdAt": "2020-03-24T07:57:40Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -48,6 +54,32 @@ public boolean preHandle(final HttpServletRequest request, final HttpServletResp\n         return !isAuthorizationRequest(request, response) || requiresAuthenticationAuthorizeInterceptor.preHandle(request, response, handler);\n     }\n \n+    /**\n+    * Is the client requesting is a OAuth \"public\" client.\n+    * @param request the request\n+    * @param response the response\n+    * @return the boolean\n+    */\n+    protected boolean clientNeedAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(new JEEContext(request, response)).getLeft();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1OTY0OA==", "bodyText": "Add ? at the end of all question-like statements.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396959648", "createdAt": "2020-03-24T07:58:08Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -48,6 +54,32 @@ public boolean preHandle(final HttpServletRequest request, final HttpServletResp\n         return !isAuthorizationRequest(request, response) || requiresAuthenticationAuthorizeInterceptor.preHandle(request, response, handler);\n     }\n \n+    /**\n+    * Is the client requesting is a OAuth \"public\" client.\n+    * @param request the request\n+    * @param response the response\n+    * @return the boolean\n+    */\n+    protected boolean clientNeedAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(new JEEContext(request, response)).getLeft();\n+        val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(servicesManager, clientId);\n+        if (clientId.isEmpty() || registeredService == null) {\n+            return true;\n+        }\n+        return !StringUtils.isBlank(registeredService.getClientSecret());\n+    }\n+\n+    /**\n+     * Is revoke token request request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDE1Nw==", "bodyText": "doesServiceNeedAuthentication()", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396960157", "createdAt": "2020-03-24T07:59:11Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDUwMA==", "bodyText": "Not sure what isAsupportedTokenType is?", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396960500", "createdAt": "2020-03-24T07:59:53Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDkzMw==", "bodyText": "Rename to clientId, and mark method as protected.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396960933", "createdAt": "2020-03-24T08:00:48Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MTMzNQ==", "bodyText": "This sort of thing can never pass. Comparing ticket ids by prefixes is generally a malpractice and should be avoided.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396961335", "createdAt": "2020-03-24T08:01:35Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MTg0Nw==", "bodyText": "Switch type to OAuth20Token instead.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396961847", "createdAt": "2020-03-24T08:02:40Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        } else {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20AccessToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        }\n+\n+        val mv = new ModelAndView(new MappingJackson2JsonView());\n+        mv.setStatus(HttpStatus.OK);\n+        return mv;\n+    }\n+\n+    /**\n+     * Revoke the provided Refresh Token and it's related Access Tokens.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20RefreshToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+\n+        token.getAccessTokens().forEach(item-> {\n+            LOGGER.debug(\"Revoking Access Token [{}] related to Refresh Token [{}]\", item, token);\n+            getOAuthConfigurationContext().getTicketRegistry().deleteTicket(item);\n+        });\n+    }\n+\n+    /**\n+     * Revoke the provided Access Token.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20AccessToken token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MTk0Mw==", "bodyText": "Remove log line, Call revokeToken instead in a lambda to avoid duplicate code.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396961943", "createdAt": "2020-03-24T08:02:53Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        } else {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20AccessToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        }\n+\n+        val mv = new ModelAndView(new MappingJackson2JsonView());\n+        mv.setStatus(HttpStatus.OK);\n+        return mv;\n+    }\n+\n+    /**\n+     * Revoke the provided Refresh Token and it's related Access Tokens.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20RefreshToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+\n+        token.getAccessTokens().forEach(item-> {\n+            LOGGER.debug(\"Revoking Access Token [{}] related to Refresh Token [{}]\", item, token);\n+            getOAuthConfigurationContext().getTicketRegistry().deleteTicket(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MjMyNQ==", "bodyText": "All of this is duplicate code. You should simply fetch OAuth20Token from the registry as the type, and then attempt to cast where necessary to the right type.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396962325", "createdAt": "2020-03-24T08:03:41Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        } else {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20AccessToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MjQzMA==", "bodyText": "cast to refresh-token.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396962430", "createdAt": "2020-03-24T08:03:54Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        } else {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20AccessToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        }\n+\n+        val mv = new ModelAndView(new MappingJackson2JsonView());\n+        mv.setStatus(HttpStatus.OK);\n+        return mv;\n+    }\n+\n+    /**\n+     * Revoke the provided Refresh Token and it's related Access Tokens.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20RefreshToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+\n+        token.getAccessTokens().forEach(item-> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MjczNQ==", "bodyText": "Also not a good idea. See above. Metadata about what a ticket can or cannot do or support should be attached to the ticket definition itself, if necessary. (Don't think it is, in this case).", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396962735", "createdAt": "2020-03-24T08:04:36Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        } else {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20AccessToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        }\n+\n+        val mv = new ModelAndView(new MappingJackson2JsonView());\n+        mv.setStatus(HttpStatus.OK);\n+        return mv;\n+    }\n+\n+    /**\n+     * Revoke the provided Refresh Token and it's related Access Tokens.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20RefreshToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+\n+        token.getAccessTokens().forEach(item-> {\n+            LOGGER.debug(\"Revoking Access Token [{}] related to Refresh Token [{}]\", item, token);\n+            getOAuthConfigurationContext().getTicketRegistry().deleteTicket(item);\n+        });\n+    }\n+\n+    /**\n+     * Revoke the provided Access Token.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20AccessToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+    }\n+\n+    /**\n+     * Verify if the request related token type is supported.\n+     *\n+     * @param token the token\n+     * @return whether the token type is supported\n+     */\n+    private boolean isAsupportedTokenType(final String token) {\n+        return token.startsWith(OAuth20RefreshToken.PREFIX) || token.startsWith(OAuth20AccessToken.PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MzM2OA==", "bodyText": "Duplicate code? Move to OAuthUtils, etc. And switch to isNotBlank", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396963368", "createdAt": "2020-03-24T08:05:49Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (isServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        if (isAsupportedTokenType(token)) {\n+            return generateRevocationResponse(token, clientId, response);\n+        }\n+        return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param client the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    private ModelAndView generateRevocationResponse(final String token,\n+                                                    final String client,\n+                                                    final HttpServletResponse response) {\n+\n+        if (token.startsWith(OAuth20RefreshToken.PREFIX)) {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        } else {\n+            val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20AccessToken.class);\n+\n+            if (registryToken == null) {\n+                LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+            } else {\n+                if (!StringUtils.equals(client, registryToken.getClientId())) {\n+                    LOGGER.error(\"Provided token [{}] is not related with the service [{}]\", token, client);\n+                    return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+                }\n+                revokeToken(registryToken);\n+            }\n+        }\n+\n+        val mv = new ModelAndView(new MappingJackson2JsonView());\n+        mv.setStatus(HttpStatus.OK);\n+        return mv;\n+    }\n+\n+    /**\n+     * Revoke the provided Refresh Token and it's related Access Tokens.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20RefreshToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+\n+        token.getAccessTokens().forEach(item-> {\n+            LOGGER.debug(\"Revoking Access Token [{}] related to Refresh Token [{}]\", item, token);\n+            getOAuthConfigurationContext().getTicketRegistry().deleteTicket(item);\n+        });\n+    }\n+\n+    /**\n+     * Revoke the provided Access Token.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20AccessToken token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+    }\n+\n+    /**\n+     * Verify if the request related token type is supported.\n+     *\n+     * @param token the token\n+     * @return whether the token type is supported\n+     */\n+    private boolean isAsupportedTokenType(final String token) {\n+        return token.startsWith(OAuth20RefreshToken.PREFIX) || token.startsWith(OAuth20AccessToken.PREFIX);\n+    }\n+\n+    /**\n+     * Gets registered service by client id.\n+     *\n+     * @param clientId the client id\n+     * @return the registered service by client id\n+     */\n+    private OAuthRegisteredService getRegisteredServiceByClientId(final String clientId) {\n+        return OAuth20Utils.getRegisteredOAuthServiceByClientId(getOAuthConfigurationContext().getServicesManager(), clientId);\n+    }\n+\n+    /**\n+     * Verify if the request related service must be authenticated.\n+     *\n+     * @param registeredService the registered service\n+     * @return whether the service need authentication\n+     */\n+    private boolean isServiceNeedAuthentication(final OAuthRegisteredService registeredService) {\n+        return !StringUtils.isBlank(registeredService.getClientSecret());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MzY1NQ==", "bodyText": "oauthRevocationController.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396963655", "createdAt": "2020-03-24T08:06:24Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuth20Configuration.java", "diffHunk": "@@ -529,6 +531,15 @@ public OAuth20UserProfileEndpointController profileController() {\n         return new OAuth20UserProfileEndpointController(context);\n     }\n \n+    @ConditionalOnMissingBean(name = \"revocationController\")\n+    @Bean\n+    public OAuth20RevocationEndpointController revocationController() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2NDMzOQ==", "bodyText": "I dont see any of these changes in the OAuth20 variant?", "url": "https://github.com/apereo/cas/pull/4771#discussion_r396964339", "createdAt": "2020-03-24T08:07:52Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/web/controllers/token/OidcRevocationEndpointController.java", "diffHunk": "@@ -24,52 +18,17 @@\n  * @author Misagh Moayyed\n  * @since 5.2.0\n  */\n-@Slf4j\n-public class OidcRevocationEndpointController extends BaseOAuth20Controller {\n-    public OidcRevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n-        super(oAuthConfigurationContext);\n-    }\n-\n-    /**\n-     * Handle request for revocation.\n-     *\n-     * @param request  the request\n-     * @param response the response\n-     * @return the jwk set\n-     */\n-    @PostMapping(value = '/' + OidcConstants.BASE_OIDC_URL + '/' + OidcConstants.REVOCATION_URL)\n-    public ResponseEntity<String> handleRequestInternal(final HttpServletRequest request,\n-                                                        final HttpServletResponse response) {\n-        try {\n-            val authExtractor = new BasicAuthExtractor();\n-            val credentialsResult = authExtractor.extract(new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore()));\n-            if (credentialsResult.isEmpty()) {\n-                throw new IllegalArgumentException(\"No credentials are provided to verify revocation of the token\");\n-            }\n+public class OidcRevocationEndpointController extends OAuth20RevocationEndpointController {\n \n-            val credentials = credentialsResult.get();\n-            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(\n-                getOAuthConfigurationContext().getServicesManager(),\n-                credentials.getUsername());\n-            val service = getOAuthConfigurationContext().getWebApplicationServiceServiceFactory().createService(registeredService.getServiceId());\n-\n-            val audit = AuditableContext.builder()\n-                .service(service)\n-                .registeredService(registeredService)\n-                .build();\n-            val accessResult = getOAuthConfigurationContext().getRegisteredServiceAccessStrategyEnforcer().execute(audit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc81e75d0d81d31b73a7434ce54accb38ca448a"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3bf9682f632b0bef692771ee38d29158e2593ea", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/a3bf9682f632b0bef692771ee38d29158e2593ea", "committedDate": "2020-03-24T21:20:23Z", "message": "add clientId in the log message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72e0db37f3bf872a31b83102e9611213ff25eb3", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/b72e0db37f3bf872a31b83102e9611213ff25eb3", "committedDate": "2020-03-24T23:31:36Z", "message": "Style, avoiding duplication & improvements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0718dd4808e30990fbb27bc53837b3a3389cdea0", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/0718dd4808e30990fbb27bc53837b3a3389cdea0", "committedDate": "2020-03-24T23:54:58Z", "message": "removed unnecessary parenthesis."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edeade91c20314858a81ba51763ddd6d6cebcba3", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/edeade91c20314858a81ba51763ddd6d6cebcba3", "committedDate": "2020-03-25T06:50:28Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6a83761ee10e7a9fced4b17a21e111c9434c4c", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/cc6a83761ee10e7a9fced4b17a21e111c9434c4c", "committedDate": "2020-03-28T17:06:18Z", "message": "Add revocation endpoint unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f84320a751e86d571fff5e3decc98c1ee1055f", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/82f84320a751e86d571fff5e3decc98c1ee1055f", "committedDate": "2020-03-28T21:27:23Z", "message": "Add revocation endpoint in OAuth Doc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bebf1e022129a50fb565046be04bc81c65e08b54", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/bebf1e022129a50fb565046be04bc81c65e08b54", "committedDate": "2020-03-29T14:19:24Z", "message": "Add audit for passwordless clients."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5640a15dcfc11eff62a3ae8983e0797aa3e635d5", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/5640a15dcfc11eff62a3ae8983e0797aa3e635d5", "committedDate": "2020-03-29T15:32:45Z", "message": "Use oAuthSessionStore in HandlerInterceptor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/dd24ba6f6c313099f34a770aa3416c7e3c951606", "committedDate": "2020-03-29T18:23:18Z", "message": "fix style OIDC Handler Interceptor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjExNzYz", "url": "https://github.com/apereo/cas/pull/4771#pullrequestreview-383611763", "createdAt": "2020-03-30T07:59:36Z", "commit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo1OTozNlrOF9dy5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNzoxN1rOF9ea3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5NTYyMg==", "bodyText": "This does not belong here. The page is for OAUTH support.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r399995622", "createdAt": "2020-03-30T07:59:36Z", "author": {"login": "mmoayyed"}, "path": "docs/cas-server-documentation/installation/OAuth-OpenId-Authentication.md", "diffHunk": "@@ -45,10 +45,11 @@ After enabling OAuth support, the following endpoints will be available:\n | `/oauth2.0/profile`       | Get the authenticated user profile in JSON via `access_token` parameter.    | `GET`\n | `/oauth2.0/introspect`    | Query CAS to detect the status of a given access token via [introspection](https://tools.ietf.org/html/rfc7662).  | `POST`\n | `/oauth2.0/device`        | Approve device user codes via the [device flow protocol](https://tools.ietf.org/html/draft-denniss-oauth-device-flow). | `POST`\n+| `/oidc/revoke`            | [Revoke](https://tools.ietf.org/html/rfc7009) access or refresh tokens.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5NzcxMA==", "bodyText": "Move the constant next to all other URLs; Keep a consistent order as much as possible, and help the next reader.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r399997710", "createdAt": "2020-03-30T08:03:25Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/OAuth20Constants.java", "diffHunk": "@@ -345,4 +345,8 @@\n      */\n     String UNAUTHORIZED_CLIENT = \"unauthorized_client\";\n \n+    /**\n+     * The revocation url.\n+     */\n+    String REVOCATION_URL = \"revoke\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5ODI1Ng==", "bodyText": "If the token is blank you don't need to check/fetch the client-id. Return false immediately, and marginally help with performance.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r399998256", "createdAt": "2020-03-30T08:04:25Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/token/OAuth20RevocationRequestValidator.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.apereo.cas.support.oauth.validator.token;\n+\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.springframework.core.Ordered;\n+\n+/**\n+ * This is {@link OAuth20RevocationRequestValidator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+@Getter\n+@Setter\n+public class OAuth20RevocationRequestValidator implements OAuth20TokenRequestValidator {\n+    private final ServicesManager servicesManager;\n+\n+    private int order = Ordered.LOWEST_PRECEDENCE;\n+\n+    @Override\n+    public boolean validate(final JEEContext context) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(this.servicesManager, clientId);\n+\n+        if (registeredService == null) {\n+            LOGGER.warn(\"Provided client id [{}] cannot be matched against a service definition\", clientId);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean supports(final JEEContext context) {\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5ODgxOA==", "bodyText": "If client-id is undefined, return immediately and do not look up the service in registry.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r399998818", "createdAt": "2020-03-30T08:05:26Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -48,6 +56,34 @@ public boolean preHandle(final HttpServletRequest request, final HttpServletResp\n         return !isAuthorizationRequest(request, response) || requiresAuthenticationAuthorizeInterceptor.preHandle(request, response, handler);\n     }\n \n+    /**\n+    * Is the client requesting is a OAuth \"public\" client?\n+    * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+    *\n+    * @param request the request\n+    * @param response the response\n+    * @return the boolean\n+    */\n+    protected boolean clientNeedAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(new JEEContext(request, response, sessionStore)).getLeft();\n+        val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(servicesManager, clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5OTYwOQ==", "bodyText": "This likely should be a warn.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r399999609", "createdAt": "2020-03-30T08:06:52Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.audit.AuditableContext;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.OAuth20Token;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMDEwOQ==", "bodyText": "Audit checks should always execute. Don't think you need to put these lines in an else clause.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400000109", "createdAt": "2020-03-30T08:07:43Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.audit.AuditableContext;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.OAuth20Token;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        } else {\n+            val service = getOAuthConfigurationContext().getWebApplicationServiceServiceFactory().createService(registeredService.getServiceId());\n+\n+            val audit = AuditableContext.builder()\n+                .service(service)\n+                .registeredService(registeredService)\n+                .build();\n+\n+            val accessResult = getOAuthConfigurationContext().getRegisteredServiceAccessStrategyEnforcer().execute(audit);\n+            if (accessResult.isExecutionFailure()) {\n+                return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMDU1Ng==", "bodyText": "Replace all with HttpUtils#createBasicAuthHeaders", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400000556", "createdAt": "2020-03-30T08:08:27Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/validator/token/OAuth20RevocationRequestValidatorTests.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.apereo.cas.support.oauth.validator.token;\n+\n+import org.apereo.cas.services.RegisteredServiceTestUtils;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.CollectionUtils;\n+import org.apereo.cas.util.EncodingUtils;\n+\n+import lombok.val;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.pac4j.core.context.JEEContext;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This is {@link OAuth20RevocationRequestValidatorTests}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Tag(\"OAuth\")\n+public class OAuth20RevocationRequestValidatorTests {\n+    private static final String SUPPORTING_SERVICE_TICKET = \"RT-SUPPORTING\";\n+\n+    private TicketRegistry ticketRegistry;\n+    private OAuth20TokenRequestValidator validator;\n+\n+    private void registerTicket(final String name) {\n+        val oauthCode = mock(OAuth20RefreshToken.class);\n+        when(oauthCode.getId()).thenReturn(name);\n+        when(oauthCode.isExpired()).thenReturn(false);\n+        when(oauthCode.getAuthentication()).thenReturn(RegisteredServiceTestUtils.getAuthentication());\n+        when(ticketRegistry.getTicket(eq(name))).thenReturn(oauthCode);\n+    }\n+\n+    @BeforeEach\n+    public void before() {\n+        val servicesManager = mock(ServicesManager.class);\n+\n+        val supportingService = RequestValidatorTestUtils.getService(\n+            RegisteredServiceTestUtils.CONST_TEST_URL,\n+            RequestValidatorTestUtils.SUPPORTING_CLIENT_ID,\n+            RequestValidatorTestUtils.SUPPORTING_CLIENT_ID,\n+            RequestValidatorTestUtils.SHARED_SECRET,\n+            CollectionUtils.wrapSet(OAuth20GrantTypes.REFRESH_TOKEN));\n+        when(servicesManager.getAllServices()).thenReturn(CollectionUtils.wrapList(supportingService));\n+\n+        this.ticketRegistry = mock(TicketRegistry.class);\n+\n+        registerTicket(SUPPORTING_SERVICE_TICKET);\n+\n+        this.validator = new OAuth20RevocationRequestValidator(servicesManager);\n+    }\n+\n+    @Test\n+    public void verifyOperationClientSecretPost() {\n+        val request = new MockHttpServletRequest();\n+        val response = new MockHttpServletResponse();\n+\n+        request.setParameter(OAuth20Constants.CLIENT_ID, RequestValidatorTestUtils.SUPPORTING_CLIENT_ID);\n+        request.setParameter(OAuth20Constants.CLIENT_SECRET, RequestValidatorTestUtils.SHARED_SECRET);\n+        request.setParameter(OAuth20Constants.TOKEN, SUPPORTING_SERVICE_TICKET);\n+\n+        assertTrue(this.validator.validate(new JEEContext(request, response)));\n+\n+        request.removeAllParameters();\n+        request.setParameter(OAuth20Constants.CLIENT_ID, RequestValidatorTestUtils.SUPPORTING_CLIENT_ID);\n+        request.setParameter(OAuth20Constants.CLIENT_SECRET, RequestValidatorTestUtils.SHARED_SECRET);\n+        assertFalse(this.validator.supports(new JEEContext(request, response)));\n+\n+        request.removeAllParameters();\n+        request.setParameter(OAuth20Constants.CLIENT_ID, RequestValidatorTestUtils.NON_SUPPORTING_CLIENT_ID);\n+        request.setParameter(OAuth20Constants.CLIENT_SECRET, RequestValidatorTestUtils.SHARED_SECRET);\n+        request.setParameter(OAuth20Constants.TOKEN, SUPPORTING_SERVICE_TICKET);\n+        assertFalse(this.validator.validate(new JEEContext(request, response)));\n+    }\n+\n+    @Test\n+    public void verifyOperationClientSecretBasic() {\n+        val request = new MockHttpServletRequest();\n+        val response = new MockHttpServletResponse();\n+\n+        request.addHeader(\"Authorization\",\n+                          \"Basic \" + EncodingUtils.encodeBase64(RequestValidatorTestUtils.SUPPORTING_CLIENT_ID + \":\" + RequestValidatorTestUtils.SHARED_SECRET));\n+        request.setParameter(OAuth20Constants.TOKEN, SUPPORTING_SERVICE_TICKET);\n+        assertTrue(this.validator.validate(new JEEContext(request, response)));\n+\n+\n+        request.removeHeader(\"Authorization\");\n+        request.removeAllParameters();\n+        request.addHeader(\"Authorization\",\n+                          \"Basic \" + EncodingUtils.encodeBase64(RequestValidatorTestUtils.SUPPORTING_CLIENT_ID + \":\" + RequestValidatorTestUtils.SHARED_SECRET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMTI1NA==", "bodyText": "Fix typo.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400001254", "createdAt": "2020-03-30T08:09:29Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -48,6 +56,34 @@ public boolean preHandle(final HttpServletRequest request, final HttpServletResp\n         return !isAuthorizationRequest(request, response) || requiresAuthenticationAuthorizeInterceptor.preHandle(request, response, handler);\n     }\n \n+    /**\n+    * Is the client requesting is a OAuth \"public\" client?\n+    * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+    *\n+    * @param request the request\n+    * @param response the response\n+    * @return the boolean\n+    */\n+    protected boolean clientNeedAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(new JEEContext(request, response, sessionStore)).getLeft();\n+        val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(servicesManager, clientId);\n+        if (clientId.isEmpty() || registeredService == null) {\n+            return true;\n+        }\n+        return OAuth20Utils.doesServiceNeedAuthentication(registeredService);\n+    }\n+\n+    /**\n+     * Is revoke token request request?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMTY3MQ==", "bodyText": "Move this call down to around like 128.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400001671", "createdAt": "2020-03-30T08:10:08Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java", "diffHunk": "@@ -84,6 +120,12 @@ protected boolean isDeviceTokenRequest(final HttpServletRequest request, final H\n      */\n     protected boolean requestRequiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) {\n         val accessTokenRequest = isAccessTokenRequest(request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMTg1NA==", "bodyText": "This likely should be a warn.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400001854", "createdAt": "2020-03-30T08:10:29Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.audit.AuditableContext;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.OAuth20Token;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjE3MA==", "bodyText": "This likely should be a warn.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400002170", "createdAt": "2020-03-30T08:11:02Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.audit.AuditableContext;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.OAuth20Token;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        } else {\n+            val service = getOAuthConfigurationContext().getWebApplicationServiceServiceFactory().createService(registeredService.getServiceId());\n+\n+            val audit = AuditableContext.builder()\n+                .service(service)\n+                .registeredService(registeredService)\n+                .build();\n+\n+            val accessResult = getOAuthConfigurationContext().getRegisteredServiceAccessStrategyEnforcer().execute(audit);\n+            if (accessResult.isExecutionFailure()) {\n+                return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        return generateRevocationResponse(token, clientId, response);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param clientId the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    protected ModelAndView generateRevocationResponse(final String token,\n+                                                      final String clientId,\n+                                                      final HttpServletResponse response) {\n+\n+        val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20Token.class);\n+\n+        if (registryToken == null) {\n+            LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+        } else if (isRefreshToken(registryToken) || isAccessToken(registryToken)) {\n+            if (!StringUtils.equals(clientId, registryToken.getClientId())) {\n+                LOGGER.error(\"Provided token [{}] has not been issued for the service [{}]\", token, clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMzIxMA==", "bodyText": "I think doing calls directly specially with the JPA ticket registry fails with a transaction-required error. Do you think you might be able to verify this?", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400003210", "createdAt": "2020-03-30T08:12:50Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointController.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.audit.AuditableContext;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.OAuth20Token;\n+import org.apereo.cas.ticket.accesstoken.OAuth20AccessToken;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+import org.pac4j.core.profile.CommonProfile;\n+import org.pac4j.core.profile.ProfileManager;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.view.json.MappingJackson2JsonView;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This is {@link OAuth20RevocationEndpointController}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RevocationEndpointController extends BaseOAuth20Controller {\n+    public OAuth20RevocationEndpointController(final OAuth20ConfigurationContext oAuthConfigurationContext) {\n+        super(oAuthConfigurationContext);\n+    }\n+\n+    /**\n+     * Handle request for revocation.\n+     *\n+     * @param request  the request\n+     * @param response the response\n+     * @return the response entity\n+     */\n+    @PostMapping(path = '/' + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.REVOCATION_URL,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    public ModelAndView handleRequest(final HttpServletRequest request,\n+                                      final HttpServletResponse response) {\n+        val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n+\n+        if (!verifyRevocationRequest(context)) {\n+            LOGGER.error(\"Revocation request verification failed. Request is missing required parameters\");\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n+        val clientId = OAuth20Utils.getClientIdAndClientSecret(context).getLeft();\n+        val registeredService = getRegisteredServiceByClientId(clientId);\n+\n+        if (OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+            if (manager.get(true).isEmpty()) {\n+                LOGGER.error(\"Service [{}] requests authentication\", clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.ACCESS_DENIED);\n+            }\n+        } else {\n+            val service = getOAuthConfigurationContext().getWebApplicationServiceServiceFactory().createService(registeredService.getServiceId());\n+\n+            val audit = AuditableContext.builder()\n+                .service(service)\n+                .registeredService(registeredService)\n+                .build();\n+\n+            val accessResult = getOAuthConfigurationContext().getRegisteredServiceAccessStrategyEnforcer().execute(audit);\n+            if (accessResult.isExecutionFailure()) {\n+                return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+            }\n+        }\n+        val token = context.getRequestParameter(OAuth20Constants.TOKEN)\n+            .map(String::valueOf).orElse(StringUtils.EMPTY);\n+\n+        return generateRevocationResponse(token, clientId, response);\n+    }\n+\n+    /**\n+     * Generate revocation token response.\n+     *\n+     * @param token the token to revoke\n+     * @param clientId the client who requests the revocation\n+     * @param response the response\n+     * @return the model and view\n+     */\n+    protected ModelAndView generateRevocationResponse(final String token,\n+                                                      final String clientId,\n+                                                      final HttpServletResponse response) {\n+\n+        val registryToken = getOAuthConfigurationContext().getTicketRegistry().getTicket(token, OAuth20Token.class);\n+\n+        if (registryToken == null) {\n+            LOGGER.error(\"Provided token [{}] has not been found in the ticket registry\", token);\n+        } else if (isRefreshToken(registryToken) || isAccessToken(registryToken)) {\n+            if (!StringUtils.equals(clientId, registryToken.getClientId())) {\n+                LOGGER.error(\"Provided token [{}] has not been issued for the service [{}]\", token, clientId);\n+                return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+            }\n+\n+            if (isRefreshToken(registryToken)) {\n+                revokeToken((OAuth20RefreshToken) registryToken);\n+            } else {\n+                revokeToken(registryToken.getId());\n+            }\n+        } else {\n+            LOGGER.error(\"Provided token [{}] is either not a refresh token or not an access token\", token);\n+            return OAuth20Utils.writeError(response, OAuth20Constants.INVALID_REQUEST);\n+        }\n+\n+        val mv = new ModelAndView(new MappingJackson2JsonView());\n+        mv.setStatus(HttpStatus.OK);\n+        return mv;\n+    }\n+\n+    /**\n+     * Revoke the provided Refresh Token and it's related Access Tokens.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final OAuth20RefreshToken token) {\n+        revokeToken(token.getId());\n+\n+        token.getAccessTokens().forEach(item-> {\n+            revokeToken(item);\n+        });\n+    }\n+\n+    /**\n+     * Revoke the provided OAuth Token.\n+     *\n+     * @param token the token\n+     * @return the model and view\n+     */\n+    private void revokeToken(final String token) {\n+        LOGGER.debug(\"Revoking token [{}]\", token);\n+        getOAuthConfigurationContext().getTicketRegistry().deleteTicket(token);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNTM1Mw==", "bodyText": "Clean up protected static OAuthRegisteredService getRegisteredService(final String serviceId,                                                                 final String secret, final Set<OAuth20GrantTypes> grantTypes) {} to avoid duplicate code.", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400005353", "createdAt": "2020-03-30T08:16:22Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/AbstractOAuth20Tests.java", "diffHunk": "@@ -321,6 +321,21 @@ protected static OAuthRegisteredService getRegisteredService(final String servic\n         return registeredServiceImpl;\n     }\n \n+    protected static OAuthRegisteredService getRegisteredService(final String serviceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNTg1Mw==", "bodyText": "Make private?", "url": "https://github.com/apereo/cas/pull/4771#discussion_r400005853", "createdAt": "2020-03-30T08:17:17Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20RevocationEndpointControllerTests.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package org.apereo.cas.support.oauth.web.endpoints;\n+\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.web.AbstractOAuth20Tests;\n+\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.HashSet;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests the {@link OAuth20RevocationEndpointController} class.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Tag(\"OAuth\")\n+public class OAuth20RevocationEndpointControllerTests extends AbstractOAuth20Tests {\n+\n+    public static final String PUBLIC_CLIENT_ID = \"clientWithoutSecret\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd24ba6f6c313099f34a770aa3416c7e3c951606"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9cf10fe83866d6e06eefea930cf2ed94e2c4c38", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/b9cf10fe83866d6e06eefea930cf2ed94e2c4c38", "committedDate": "2020-03-30T17:48:44Z", "message": "Improvements, optimisations and fix."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTg1OTc5", "url": "https://github.com/apereo/cas/pull/4771#pullrequestreview-384185979", "createdAt": "2020-03-30T20:01:17Z", "commit": {"oid": "b9cf10fe83866d6e06eefea930cf2ed94e2c4c38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e21e9489203b2dfd2298621f1061114bff0063c7", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/e21e9489203b2dfd2298621f1061114bff0063c7", "committedDate": "2020-03-30T21:33:20Z", "message": "Merge branch 'master' into revokep2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3649, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}