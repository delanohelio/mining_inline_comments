{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjU5OTcy", "number": 4798, "title": "Refresh token support for OAuth/OIDC public clients", "bodyText": "Hello Misagh,\nThird and last part of my work on the improvement of the OAuth2.0/OIDC support for public clients in CAS.\nThis PR adds support for refresh token for this kind of clients. Here the changelog:\n\n\nAdd OAuth20RefreshToken Authenticator for OAuth/OIDC public clients\nonly.\n\n\nRemoved public clients support in the OAuth20ClientIDClientSecret\nAuthenticator (worked with client_secret=\"\" which is not specified in OAuth2.0/OIDC).\n\n\nAdd tests for the new OAuth20RefreshToken Authenticator.\n\n\nAdd test for the existing OAuth20ClientIdClientSecret Authenticator.\n\n\nWith this last PR public clients will be fully supported (PKCE, refresh token & revocation).\nPlease let me know if you need any further information.\nRegards,\nJulien", "createdAt": "2020-04-01T22:18:59Z", "url": "https://github.com/apereo/cas/pull/4798", "merged": true, "mergeCommit": {"oid": "b54aef340fbad95551d2dece7347e80e3206deeb"}, "closed": true, "closedAt": "2020-04-08T09:57:12Z", "author": {"login": "julienhuon"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTfIsoAH2gAyMzk3MjU5OTcyOjY4Mjk4ZjQwNDJmNzg1MjYwZGY5YmE0M2ZmYzIwODI2MTlkMGJlYjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVjKQHAH2gAyMzk3MjU5OTcyOmMyOTU5ZTNkMTc0YjE4OWQxN2VlODhlNDgzMTM2MTI2NmJkYTg0NWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "68298f4042f785260df9ba43ffc2082619d0beb6", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/68298f4042f785260df9ba43ffc2082619d0beb6", "committedDate": "2020-04-01T22:07:12Z", "message": "Refresh token support for OAuth/OIDC public clients.\n\n* Add OAuth20RefreshToken Authenticator for OAuth/OIDC public clients \nonly.\n\n* Removed public clients support in the OAuth20ClientIDClientSecret \nAuthenticator.\n\n* Add tests for the new OAuth20RefreshToken Authenticator.\n\n* Add test for the existing OAuth20ClientIdClientSecret Authenticator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49826de145c18a88631d5fc692249596f709f569", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/49826de145c18a88631d5fc692249596f709f569", "committedDate": "2020-04-02T01:43:21Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea3a18f07df42f6132f7d62d513e0ce7d9da48b", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/dea3a18f07df42f6132f7d62d513e0ce7d9da48b", "committedDate": "2020-04-02T04:43:28Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/bacc596dcb4f96667ea19b599e39c26000113044", "committedDate": "2020-04-02T09:13:30Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzA0MDYz", "url": "https://github.com/apereo/cas/pull/4798#pullrequestreview-386304063", "createdAt": "2020-04-02T10:38:23Z", "commit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozODoyM1rOF_lWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0MzowNVrOF_lfUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNjQ4NA==", "bodyText": "Bad javadoc?", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402216484", "createdAt": "2020-04-02T10:38:23Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "diffHunk": "@@ -107,6 +108,8 @@ protected void validateCredentials(final UsernamePasswordCredentials credentials\n      * 1. When the grant type is {@code password}, in which case the authentication will be performed by {@code OAuth20UsernamePasswordAuthenticator}\n      * 2. When request contains OAuth {@code code} which was issued with a {@code code_challenge}, in which case the authentication will be\n      * performed by {{@code OAuth20ProofKeyCodeExchangeAuthenticator}\n+     * 3. When the grant type is {@refresh_token} and the request doesn't have any secret, in which case the authentication will be performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzMzOA==", "bodyText": "Please correct the capitalization of the debug statement (i.e. Client), and possibly remove refresh_token authentication.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402217338", "createdAt": "2020-04-02T10:40:06Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientIdClientSecretAuthenticator.java", "diffHunk": "@@ -121,6 +124,14 @@ protected boolean canAuthenticate(final WebContext context) {\n             return false;\n         }\n \n+        if (grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.CLIENT_ID).isPresent()\n+            && !context.getRequestParameter(OAuth20Constants.CLIENT_SECRET).isPresent()) {\n+            LOGGER.debug(\"Skipping Client credential authentication to use refresh_token authentication\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzUyMw==", "bodyText": "Bad javadoc. No such thing as RefreshTokenAuthenticator?", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402217523", "createdAt": "2020-04-02T10:40:27Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzk1NA==", "bodyText": "Javadoc support for @OverRide methods is not strictly necessary. If you do need to explain this, you should do so at the class level.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402217954", "createdAt": "2020-04-02T10:41:21Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODE2Ng==", "bodyText": "Debug/Trace statements here would be very useful.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402218166", "createdAt": "2020-04-02T10:41:46Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODU0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");\n          \n          \n            \n                        LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry, has expired or is not related to the client provided\");", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402218541", "createdAt": "2020-04-02T10:42:33Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateCredentials(final UsernamePasswordCredentials credentials,\n+                                       final OAuthRegisteredService registeredService, final WebContext context) {\n+        val token = credentials.getPassword();\n+        LOGGER.trace(\"Received refresh token [{}] for authentication\", token);\n+\n+        val refreshToken = getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+        if (refreshToken == null || refreshToken.isExpired() || !StringUtils.equals(refreshToken.getClientId(), credentials.getUsername())) {\n+            LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODgzNQ==", "bodyText": "Could we also include the client-id in log statement?", "url": "https://github.com/apereo/cas/pull/4798#discussion_r402218835", "createdAt": "2020-04-02T10:43:05Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    @Override\n+    protected boolean canAuthenticate(final WebContext context) {\n+        val grantType = context.getRequestParameter(OAuth20Constants.GRANT_TYPE);\n+        val clientId = context.getRequestParameter(OAuth20Constants.CLIENT_ID);\n+\n+        if (clientId.isPresent() && grantType.isPresent()\n+            && OAuth20Utils.isGrantType(grantType.get(), OAuth20GrantTypes.REFRESH_TOKEN)\n+            && context.getRequestParameter(OAuth20Constants.REFRESH_TOKEN).isPresent()) {\n+            val registeredService = OAuth20Utils.getRegisteredOAuthServiceByClientId(getServicesManager(), clientId.get());\n+\n+            if (registeredService != null && !OAuth20Utils.doesServiceNeedAuthentication(registeredService)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateCredentials(final UsernamePasswordCredentials credentials,\n+                                       final OAuthRegisteredService registeredService, final WebContext context) {\n+        val token = credentials.getPassword();\n+        LOGGER.trace(\"Received refresh token [{}] for authentication\", token);\n+\n+        val refreshToken = getTicketRegistry().getTicket(token, OAuth20RefreshToken.class);\n+        if (refreshToken == null || refreshToken.isExpired() || !StringUtils.equals(refreshToken.getClientId(), credentials.getUsername())) {\n+            LOGGER.error(\"Provided refresh token [{}] is either not found in the ticket registry or has expired or not related with the client provided\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxODU0MQ=="}, "originalCommit": {"oid": "bacc596dcb4f96667ea19b599e39c26000113044"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de0b4e7915285fbf604a3848338d577f99b39c7", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/0de0b4e7915285fbf604a3848338d577f99b39c7", "committedDate": "2020-04-02T18:54:34Z", "message": "Fix javadoc, log messages & removed @override."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63062614be1eff31c89c2e47351d492cd5f6bcdc", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/63062614be1eff31c89c2e47351d492cd5f6bcdc", "committedDate": "2020-04-04T10:58:04Z", "message": "Fix javadoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cc5d6125d471b25f769f9862774b4cc833006b5", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/2cc5d6125d471b25f769f9862774b4cc833006b5", "committedDate": "2020-04-04T11:29:52Z", "message": "Add tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73a97782724e65ea150ce14016ed4ba9619eb86b", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/73a97782724e65ea150ce14016ed4ba9619eb86b", "committedDate": "2020-04-04T12:45:01Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b82388985bd931bb82d3b9de9558aae536ea19", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/09b82388985bd931bb82d3b9de9558aae536ea19", "committedDate": "2020-04-04T14:15:01Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3be58d360d1e184ef2c1e1097351b4c2e174daa", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/d3be58d360d1e184ef2c1e1097351b4c2e174daa", "committedDate": "2020-04-04T15:45:01Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db6f49c34cc8c2f4d661723951d393712114212", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/0db6f49c34cc8c2f4d661723951d393712114212", "committedDate": "2020-04-04T17:15:06Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b14214412d06278f131df25fd4666fed7edc99", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/f6b14214412d06278f131df25fd4666fed7edc99", "committedDate": "2020-04-04T18:45:01Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b7509467382a7786ac53998b1f0262d8ccc5b6e", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/6b7509467382a7786ac53998b1f0262d8ccc5b6e", "committedDate": "2020-04-04T20:15:05Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71bb1f625011981cd51b267b4a7f9c662d7971ea", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/71bb1f625011981cd51b267b4a7f9c662d7971ea", "committedDate": "2020-04-04T21:45:04Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d6d1b8ec388be07fba7739b3e3457dde6191b22", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/4d6d1b8ec388be07fba7739b3e3457dde6191b22", "committedDate": "2020-04-04T23:15:04Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5971f85d1dbc320c16b6bf43a7c94246f3150dc3", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/5971f85d1dbc320c16b6bf43a7c94246f3150dc3", "committedDate": "2020-04-05T00:45:03Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3e35b393cc8050d1740ddbc16325b691498db5a", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/b3e35b393cc8050d1740ddbc16325b691498db5a", "committedDate": "2020-04-06T13:34:24Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3c089d55652249193f39f29fd4c1d12a46fd64", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/2b3c089d55652249193f39f29fd4c1d12a46fd64", "committedDate": "2020-04-06T15:04:24Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a4ddbc587e6b31f5397aa6e63f4f8424c35dab3", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/7a4ddbc587e6b31f5397aa6e63f4f8424c35dab3", "committedDate": "2020-04-06T18:04:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c4bfdd03226eaf4060dcab09a9a8c5ac2b08db", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/e8c4bfdd03226eaf4060dcab09a9a8c5ac2b08db", "committedDate": "2020-04-06T19:34:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efe3d5e254fb00ff0610f7a7502fdfdb757a1b8a", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/efe3d5e254fb00ff0610f7a7502fdfdb757a1b8a", "committedDate": "2020-04-06T21:04:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67aa6fd2120e032b73c15d452da316540abf0e24", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/67aa6fd2120e032b73c15d452da316540abf0e24", "committedDate": "2020-04-06T22:34:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e57fb95c929547dd2037c6db69df772dee63647", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/6e57fb95c929547dd2037c6db69df772dee63647", "committedDate": "2020-04-07T00:04:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b7f42a69340f558f7a20fddda69d633c748b246", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/1b7f42a69340f558f7a20fddda69d633c748b246", "committedDate": "2020-04-07T01:34:22Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a0bb610384c61b385e05530fdf9cdaf138d1a4", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/e2a0bb610384c61b385e05530fdf9cdaf138d1a4", "committedDate": "2020-04-07T03:04:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29c6134acf09cda2aa73d4e45f1ce7966df722d9", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/29c6134acf09cda2aa73d4e45f1ce7966df722d9", "committedDate": "2020-04-07T04:34:24Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/be0fc9d4bec46a845552a2887367f466a70bc035", "committedDate": "2020-04-07T06:04:23Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODI0MjA2", "url": "https://github.com/apereo/cas/pull/4798#pullrequestreview-388824206", "createdAt": "2020-04-07T06:43:02Z", "commit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0MzowMlrOGB1B1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0Mzo0NlrOGB1DIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDU4Mw==", "bodyText": "Missing @Override.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r404570583", "createdAt": "2020-04-07T06:43:02Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * OAuth20RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *\n+     * @param context the context\n+     * @return true if authenticator can validate credentials.\n+     */\n+    protected boolean canAuthenticate(final WebContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDY2MA==", "bodyText": "Should be moved to the class.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r404570660", "createdAt": "2020-04-07T06:43:13Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20RefreshTokenAuthenticator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.oauth.authenticator;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.PrincipalResolver;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20GrantTypes;\n+import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+import org.apereo.cas.ticket.refreshtoken.OAuth20RefreshToken;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.credentials.UsernamePasswordCredentials;\n+import org.pac4j.core.exception.CredentialsException;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This is {@link OAuth20RefreshTokenAuthenticator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OAuth20RefreshTokenAuthenticator extends OAuth20ClientIdClientSecretAuthenticator {\n+\n+    public OAuth20RefreshTokenAuthenticator(final ServicesManager servicesManager,\n+                                            final ServiceFactory webApplicationServiceFactory,\n+                                            final AuditableExecution registeredServiceAccessStrategyEnforcer,\n+                                            final TicketRegistry ticketRegistry,\n+                                            final CipherExecutor<Serializable, String> registeredServiceCipherExecutor,\n+                                            final PrincipalResolver principalResolver) {\n+        super(servicesManager, webApplicationServiceFactory, registeredServiceAccessStrategyEnforcer,\n+            registeredServiceCipherExecutor, ticketRegistry, principalResolver);\n+    }\n+\n+    /**\n+     * OAuth20RefreshTokenAuthenticator can only be used for a refresh token request of a \"public\" client.\n+     * An OAuth \"public\" client is one that does not define a secret like a mobile application.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MDkxMw==", "bodyText": "oauthRefreshTokenAuthenticator, and same for the annotation.", "url": "https://github.com/apereo/cas/pull/4798#discussion_r404570913", "createdAt": "2020-04-07T06:43:46Z", "author": {"login": "mmoayyed"}, "path": "support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuth20Configuration.java", "diffHunk": "@@ -356,6 +364,18 @@ public OAuth20CallbackAuthorizeViewResolver callbackAuthorizeViewResolver() {\n             defaultPrincipalResolver.getObject());\n     }\n \n+    @ConditionalOnMissingBean(name = \"oAuthRefreshTokenAuthenticator\")\n+    @Bean\n+    @RefreshScope\n+    public Authenticator<UsernamePasswordCredentials> oAuthRefreshTokenAuthenticator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be0fc9d4bec46a845552a2887367f466a70bc035"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e46b49883fc5b20315c8514b5fc3f63f2d037c", "author": {"user": {"login": "julienhuon", "name": "Julien Huon"}}, "url": "https://github.com/apereo/cas/commit/d1e46b49883fc5b20315c8514b5fc3f63f2d037c", "committedDate": "2020-04-07T19:56:47Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e459b497cf3a7c9c05d7a469fc8a8b39fec69e2", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/9e459b497cf3a7c9c05d7a469fc8a8b39fec69e2", "committedDate": "2020-04-08T01:56:18Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec7eae9a7ba512b795fa9d849b29b1a9dfb1c8e", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/fec7eae9a7ba512b795fa9d849b29b1a9dfb1c8e", "committedDate": "2020-04-08T03:26:20Z", "message": "Merge branch 'master' into renewpublic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2959e3d174b189d17ee88e4831361266bda845f", "author": {"user": {"login": "apereocas-bot", "name": null}}, "url": "https://github.com/apereo/cas/commit/c2959e3d174b189d17ee88e4831361266bda845f", "committedDate": "2020-04-08T07:56:22Z", "message": "Merge branch 'master' into renewpublic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3576, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}