{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1ODMyMDMy", "number": 2079, "title": "Management of installed maps", "bodyText": "Closes #2026\nCloses #1102", "createdAt": "2020-12-27T16:56:42Z", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079", "merged": true, "mergeCommit": {"oid": "22b0a81ac94e3442125c29ab233e74584c7c5e7f"}, "closed": true, "closedAt": "2021-02-21T15:26:22Z", "author": {"login": "ivan-gryzunov"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqUpEkgFqTU1ODk0Mzg3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd8UyqoAFqTU5NDg1MjAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTQzODc4", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-558943878", "createdAt": "2020-12-27T17:05:01Z", "commit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNzowNTowMVrOILsrDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNzowNTowMVrOILsrDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzE2NQ==", "bodyText": "I think this would be best placed in the map vault. There is a button used to manage mods in the mod vault which is hidden in the map vault", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r549137165", "createdAt": "2020-12-27T17:05:01Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/game/CustomGamesController.java", "diffHunk": "@@ -259,4 +264,24 @@ public void onHide() {\n     // Hide all games to free up memory\n     filteredItems.setPredicate(game -> false);\n   }\n+\n+  public void onMapsManagementButtonClicked() {\n+\n+    // TODO: Move button to another space in future", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTQzOTgx", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-558943981", "createdAt": "2020-12-27T17:06:52Z", "commit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNzowNjo1MlrOILssCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNzowNjo1MlrOILssCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzQxNw==", "bodyText": "I would make this a stack pane in the maps vault rather than a new window i think", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r549137417", "createdAt": "2020-12-27T17:06:52Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/game/CustomGamesController.java", "diffHunk": "@@ -259,4 +264,24 @@ public void onHide() {\n     // Hide all games to free up memory\n     filteredItems.setPredicate(game -> false);\n   }\n+\n+  public void onMapsManagementButtonClicked() {\n+\n+    // TODO: Move button to another space in future\n+    ManageMapsController controller = uiService.loadFxml(\"theme/maps/manage_maps.fxml\");\n+    FxStage fxStage = FxStage.create(controller.getRoot())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTQ0MTg5", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-558944189", "createdAt": "2020-12-27T17:10:34Z", "commit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNzoxMDozNFrOILstVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNzoxMDozNFrOILstVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzc0OA==", "bodyText": "Why create a new service rather than use the current mapService?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r549137748", "createdAt": "2020-12-27T17:10:34Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementService.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.remote.FafService;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class MapsManagementService implements InitializingBean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4bbf538f056754e00caec2dce6b364430f1771f", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f4bbf538f056754e00caec2dce6b364430f1771f", "committedDate": "2020-12-27T16:34:02Z", "message": "Implement management of installed maps (check, update, delete)"}, "afterCommit": {"oid": "bede7405249a386efe7ec8aec5e52407b49af2eb", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/bede7405249a386efe7ec8aec5e52407b49af2eb", "committedDate": "2021-01-15T23:59:28Z", "message": "implement management of installed maps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMTk2NDg0", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-571196484", "createdAt": "2021-01-19T12:30:04Z", "commit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjozMDowNFrOIWMYAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMjo1MzoyOFrOIWNLjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0MjMzNg==", "bodyText": "You don't need create a clonedList here since you are using it to create streams. Also if you use the InstalledMaps Observable List itself the filteredList should update if the map list changes", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560142336", "createdAt": "2021-01-19T12:30:04Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0NjMwOQ==", "bodyText": "If it is going to be displayed to the user it should be a message and use i18n rather than String.format", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560146309", "createdAt": "2021-01-19T12:37:09Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0NzIyOQ==", "bodyText": "Use selectedMaps.forEach rather than an explicit iterator", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560147229", "createdAt": "2021-01-19T12:38:36Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0ODY3Mw==", "bodyText": "Rather than using whenComplete since you are only checking for an exception you can use .exceptionally", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560148673", "createdAt": "2021-01-19T12:41:10Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0ODgxMA==", "bodyText": "Log the error", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560148810", "createdAt": "2021-01-19T12:41:21Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MDIzOQ==", "bodyText": "We don't really want to make this a blocking process as that defeats the purpose of using the CompletableFuture. It looks like you want to make sure all of these tasks finish so that you can update the table. This can be done either by using a completeableFuture.allOf on the list of removal futures. Additionally if the installedMaps list backs the filtered maps list itself as mentioned above it should update automatically", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560150239", "createdAt": "2021-01-19T12:43:59Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }\n+        }).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MTUzNQ==", "bodyText": "Use .thenAccept and .exceptionally", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560151535", "createdAt": "2021-01-19T12:46:21Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }\n+        }).join();\n+      }\n+    }).whenComplete((unused, throwable) -> {\n+      if (throwable != null) {\n+        notificationService.addImmediateErrorNotification(throwable, \"management.maps.uninstall.error\");\n+      }\n+      updateTableContent();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MTY3MA==", "bodyText": "Log the error", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560151670", "createdAt": "2021-01-19T12:46:39Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.fx.StringCell;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.map.MapService.PreviewSize;\n+import com.faforever.client.map.UninstallMapException;\n+import com.faforever.client.map.management.table.factory.CheckBoxCell;\n+import com.faforever.client.map.management.table.factory.MapBeanRow;\n+import com.faforever.client.map.management.table.factory.PreviewMapCell;\n+import com.faforever.client.notification.NotificationService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public Button removeButton;\n+  public Button closeButton;\n+  public TableView<MapBean> tableView;\n+  public TableColumn<MapBean, Image> previewMapColumn;\n+  public TableColumn<MapBean, MapBean> mapNameColumn;\n+  public TableColumn<MapBean, MapBean> checkboxColumn;\n+\n+  private final MapService mapService;\n+  private final I18n i18n;\n+  private final NotificationService notificationService;\n+\n+  private final ObservableList<MapBean> selectedMaps = FXCollections.observableArrayList();\n+\n+  private FilteredList<MapBean> maps = new FilteredList<>(FXCollections.emptyObservableList());\n+  private List<String> duplicatedMapNames; // duplicated map names but with different versions\n+  private Runnable closeButtonAction;\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingTableView();\n+    JavaFxUtil.bind(removeButton.disableProperty(), new SimpleListProperty<>(selectedMaps).emptyProperty());\n+    updateTableContent();\n+  }\n+\n+  private void updateTableContent() {\n+    List<MapBean> clonedList = new ArrayList<>(mapService.getInstalledMaps());\n+    List<String> mapNames = clonedList.stream().map(MapBean::getDisplayName).collect(Collectors.toList());\n+    this.maps = new FilteredList<>(FXCollections.observableArrayList(clonedList).sorted(), getPredicateByCurrentFilter());\n+    this.duplicatedMapNames = clonedList.stream()\n+        .filter(map -> map.getVersion() != null && Collections.frequency(mapNames, map.getDisplayName()) > 1)\n+        .map(MapBean::getDisplayName).distinct().collect(Collectors.toList());\n+    tableView.setItems(this.maps);\n+  }\n+\n+  private void settingChoiceBox() {\n+    filterMapsChoiceBox.setConverter(new StringConverter<>() {\n+      @Override\n+      public String toString(MapFilter object) {\n+        return i18n.get(object.getI18n());\n+      }\n+\n+      @Override\n+      public MapFilter fromString(String string) {\n+        throw new UnsupportedOperationException(); // not required\n+      }\n+    });\n+    filterMapsChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldFilter, newFilter) -> {\n+      selectedMaps.clear();\n+      maps.setPredicate(getPredicateBy(newFilter));\n+      tableView.scrollTo(0);\n+    });\n+    filterMapsChoiceBox.setItems(FXCollections.observableArrayList(MapFilter.values()));\n+    filterMapsChoiceBox.setValue(MapFilter.CUSTOM_MAPS);\n+  }\n+\n+  private Predicate<MapBean> getPredicateByCurrentFilter() {\n+    return getPredicateBy(filterMapsChoiceBox.getValue());\n+  }\n+\n+  private Predicate<MapBean> getPredicateBy(MapFilter filter) {\n+    return switch (filter) {\n+      case OFFICIAL_MAPS -> mapService::isOfficialMap;\n+      case CUSTOM_MAPS -> mapService::isCustomMap;\n+      case ALL_MAPS -> null;\n+    };\n+  }\n+\n+  private void settingTableView() {\n+    tableView.setSelectionModel(null);\n+    tableView.setRowFactory(param -> new MapBeanRow());\n+\n+    previewMapColumn.setCellFactory(param -> new PreviewMapCell());\n+    previewMapColumn.setCellValueFactory(param -> new SimpleObjectProperty<>\n+        (mapService.loadPreview(param.getValue().getFolderName(), PreviewSize.SMALL)));\n+\n+    mapNameColumn.setCellFactory(param -> new StringCell<>(item -> {\n+      String name = item.getDisplayName();\n+      ComparableVersion v = item.getVersion();\n+      return v != null && duplicatedMapNames.contains(name)\n+          ? String.format(\"%s | %s %s\", name, i18n.get(\"map.version\"), v.toString())\n+          : name;\n+    }));\n+    mapNameColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+\n+    checkboxColumn.setCellFactory(param -> new CheckBoxCell(selectedMaps, mapService));\n+    checkboxColumn.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue()));\n+  }\n+\n+  public void onRemoveButtonClicked() {\n+    CompletableFuture.runAsync( () -> {\n+      Iterator<MapBean> iterator = selectedMaps.iterator();\n+      while (iterator.hasNext()) {\n+        MapBean map = iterator.next();\n+        mapService.uninstallMap(map).whenComplete((unused, throwable) -> {\n+          if (throwable == null) {\n+            iterator.remove();\n+          } else {\n+            throw new UninstallMapException(String.format(\"error when uninstall map '%s'\", map), throwable);\n+          }\n+        }).join();\n+      }\n+    }).whenComplete((unused, throwable) -> {\n+      if (throwable != null) {\n+        notificationService.addImmediateErrorNotification(throwable, \"management.maps.uninstall.error\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1MjExMg==", "bodyText": "If this is only for Maps I would reflect that in the name", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560152112", "createdAt": "2021-01-19T12:47:25Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/table/factory/CheckBoxCell.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.faforever.client.map.management.table.factory;\n+\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.TableCell;\n+\n+import java.util.List;\n+\n+public class CheckBoxCell extends TableCell<MapBean, MapBean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1NDY0MQ==", "bodyText": "Rather than adding a new management button to the abstract class make one of them abstract and set the actions and text in the subclass. Similar to the upload button. I like the placement you have for the maps one.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560154641", "createdAt": "2021-01-19T12:51:47Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/vault/VaultEntityController.java", "diffHunk": "@@ -69,6 +69,7 @@\n   public Pagination pagination;\n   public Button lastPageButton;\n   public Button manageModsButton;\n+  public Button mapsManagementButton;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1NDc3Mw==", "bodyText": "Capitalize", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560154773", "createdAt": "2021-01-19T12:51:59Z", "author": {"login": "Sheikah45"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -920,3 +920,12 @@ review.save.error=This review could not be saved\n label.copy=copy\n gameUpdate.error.gameNotWritableAllowMultiOn=The game could not be patched to the required version for this game launch. You are trying to watch a replay or open a game of a conflicting version to the one you have already opened.\n map.updater.search=Search for a new version of the map\n+management.maps.openButton.label=Manage installed maps\n+management.maps.closeButton.label=Close\n+management.maps.allMaps=all maps\n+management.maps.customMaps=custom maps\n+management.maps.officialMaps=official maps", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1NTMyMQ==", "bodyText": "Why make it not resizable? This could make it hard for some users with different screen sizes.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560155321", "createdAt": "2021-01-19T12:53:06Z", "author": {"login": "Sheikah45"}, "path": "src/main/resources/theme/vault/map/maps_management.fxml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import java.lang.String?>\n+<?import javafx.geometry.Insets?>\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.ChoiceBox?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.TableColumn?>\n+<?import javafx.scene.control.TableView?>\n+<?import javafx.scene.layout.ColumnConstraints?>\n+<?import javafx.scene.layout.GridPane?>\n+<?import javafx.scene.layout.HBox?>\n+<?import javafx.scene.layout.Region?>\n+<?import javafx.scene.layout.RowConstraints?>\n+\n+<GridPane fx:id=\"root\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\"\n+          prefHeight=\"500.0\" prefWidth=\"500.0\" xmlns=\"http://javafx.com/javafx/11.0.1\"\n+          xmlns:fx=\"http://javafx.com/fxml/1\"\n+          fx:controller=\"com.faforever.client.map.management.MapsManagementController\">\n+    <columnConstraints>\n+        <ColumnConstraints hgrow=\"ALWAYS\" minWidth=\"10.0\" prefWidth=\"100.0\"/>\n+    </columnConstraints>\n+    <rowConstraints>\n+        <RowConstraints minHeight=\"30.0\" prefHeight=\"40.0\"/>\n+        <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"ALWAYS\"/>\n+        <RowConstraints valignment=\"TOP\" vgrow=\"NEVER\"/>\n+        <RowConstraints fillHeight=\"false\" minHeight=\"10.0\" prefHeight=\"30.0\"/>\n+    </rowConstraints>\n+    <children>\n+        <GridPane>\n+            <columnConstraints>\n+                <ColumnConstraints minWidth=\"10.0\"/>\n+                <ColumnConstraints halignment=\"RIGHT\" hgrow=\"ALWAYS\"/>\n+            </columnConstraints>\n+            <rowConstraints>\n+                <RowConstraints minHeight=\"10.0\"/>\n+            </rowConstraints>\n+            <children>\n+                <ChoiceBox fx:id=\"filterMapsChoiceBox\" maxWidth=\"170.0\" minWidth=\"170.0\">\n+                    <GridPane.margin>\n+                        <Insets/>\n+                    </GridPane.margin>\n+                </ChoiceBox>\n+                <HBox alignment=\"CENTER_RIGHT\" nodeOrientation=\"LEFT_TO_RIGHT\" prefHeight=\"100.0\" prefWidth=\"200.0\"\n+                      GridPane.columnIndex=\"1\">\n+                    <children>\n+                        <Button fx:id=\"removeButton\" disable=\"true\" mnemonicParsing=\"false\"\n+                                onAction=\"#onRemoveButtonClicked\" style=\"-fx-background-color: darkred;\">\n+                            <graphic>\n+                                <Region>\n+                                    <styleClass>\n+                                        <String fx:value=\"icon\"/>\n+                                        <String fx:value=\"uninstall-icon\"/>\n+                                    </styleClass>\n+                                </Region>\n+                            </graphic>\n+                        </Button>\n+                        <Label text=\"%management.maps.remove\">\n+                            <HBox.margin>\n+                                <Insets left=\"10.0\"/>\n+                            </HBox.margin>\n+                        </Label>\n+                    </children>\n+                    <GridPane.margin>\n+                        <Insets right=\"5.0\"/>\n+                    </GridPane.margin>\n+                </HBox>\n+            </children>\n+        </GridPane>\n+        <Button fx:id=\"closeButton\" mnemonicParsing=\"false\" onAction=\"#onCloseButtonClicked\"\n+                text=\"%management.maps.closeButton.label\" GridPane.halignment=\"RIGHT\" GridPane.rowIndex=\"3\"\n+                GridPane.valignment=\"CENTER\">\n+            <GridPane.margin>\n+                <Insets top=\"30.0\"/>\n+            </GridPane.margin>\n+        </Button>\n+        <TableView fx:id=\"tableView\" style=\"-fx-border-color: #2F2F2F   ; -fx-border-width: 5;\" GridPane.rowIndex=\"1\">\n+            <placeholder>\n+                <Label/>\n+            </placeholder>\n+            <columns>\n+                <TableColumn fx:id=\"checkboxColumn\" editable=\"false\" maxWidth=\"50.0\" minWidth=\"50.0\" prefWidth=\"50.0\"\n+                             resizable=\"false\" sortable=\"false\"/>\n+                <TableColumn fx:id=\"previewMapColumn\" editable=\"false\" maxWidth=\"60.0\" minWidth=\"60.0\" prefWidth=\"60.0\"\n+                             resizable=\"false\" sortable=\"false\" text=\"%management.maps.map\"/>\n+                <TableColumn fx:id=\"mapNameColumn\" editable=\"false\" minWidth=\"233.0\" prefWidth=\"339.0\" sortable=\"false\"\n+                             text=\"%management.maps.name\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1NTUzMw==", "bodyText": "Same comment on generalizing the management button", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r560155533", "createdAt": "2021-01-19T12:53:28Z", "author": {"login": "Sheikah45"}, "path": "src/main/resources/theme/vault/vault_entity.fxml", "diffHunk": "@@ -46,6 +47,8 @@\n                                 <Region styleClass=\"icon,upload-icon\"/>\n                             </graphic>\n                         </Button>\n+                        <Button fx:id=\"mapsManagementButton\" mnemonicParsing=\"false\" text=\"%management.maps.openButton.label\"\n+                                visible=\"false\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/60a1d4bab36c8f7045f7951b247ce61ed1ad5b38", "committedDate": "2021-01-19T10:29:37Z", "message": "fix codacy issues"}, "afterCommit": {"oid": "0c4847ed0ee0d584aedc01aeb08672b06e030c99", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/0c4847ed0ee0d584aedc01aeb08672b06e030c99", "committedDate": "2021-02-18T21:39:12Z", "message": "implement management of installed maps (only uninstall)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjYxMTY4", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-594661168", "createdAt": "2021-02-20T00:10:18Z", "commit": {"oid": "8f7eb5765252f63dcc5ac5768d416b3bbc074720"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQwMDoxMDoxOFrOIosx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQwMDoxMDoyOVrOIosyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU0NzYyOA==", "bodyText": "I would use initializeListView over settingListView", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r579547628", "createdAt": "2021-02-20T00:10:18Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.function.Predicate;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public ListView<MapBean> listView;\n+  public Button closeButton;\n+\n+  private final MapService mapService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  private final FilteredList<MapBean> maps;\n+  private Runnable closeButtonAction;\n+\n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingListView();\n+  }\n+\n+  private void settingListView() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7eb5765252f63dcc5ac5768d416b3bbc074720"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU0NzY2MQ==", "bodyText": "initialize over setting", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#discussion_r579547661", "createdAt": "2021-02-20T00:10:29Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/map/management/MapsManagementController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.faforever.client.map.management;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.MapService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.list.NoSelectionModel;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.util.StringConverter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.function.Predicate;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class MapsManagementController implements Controller<Node> {\n+\n+  public GridPane root;\n+  public ChoiceBox<MapFilter> filterMapsChoiceBox;\n+  public ListView<MapBean> listView;\n+  public Button closeButton;\n+\n+  private final MapService mapService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  private final FilteredList<MapBean> maps;\n+  private Runnable closeButtonAction;\n+\n+  public MapsManagementController(UiService uiService, MapService mapService, I18n i18n) {\n+    this.uiService = uiService;\n+    this.mapService = mapService;\n+    this.i18n = i18n;\n+    maps = new FilteredList<>(mapService.getInstalledMaps());\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    settingChoiceBox();\n+    settingListView();\n+  }\n+\n+  private void settingListView() {\n+    listView.setCellFactory(param -> uiService.<RemovableMapCellController>loadFxml(\"theme/vault/map/removable_map_cell.fxml\"));\n+    listView.setSelectionModel(new NoSelectionModel<>());\n+    listView.setItems(maps);\n+  }\n+\n+  private void settingChoiceBox() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7eb5765252f63dcc5ac5768d416b3bbc074720"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzQ0NzQ5", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-594744749", "createdAt": "2021-02-20T11:47:01Z", "commit": {"oid": "125b131f814e629fdb3b38da7cf755fe16d49b5a"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4936e2094a9dd1ed39bf8ae0f11e4677d042c60", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f4936e2094a9dd1ed39bf8ae0f11e4677d042c60", "committedDate": "2021-02-21T15:14:50Z", "message": "implement management of installed maps (only uninstall)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77d7eafbabceed927f0527a1558db5973215a078", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/77d7eafbabceed927f0527a1558db5973215a078", "committedDate": "2021-02-21T15:14:52Z", "message": "remove unused imports from MapsManagementControllerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf1ff281971e086bbbb841162b08dd1594facb7", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/9bf1ff281971e086bbbb841162b08dd1594facb7", "committedDate": "2021-02-21T15:14:52Z", "message": "remove unused methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f99f3729f29754df501077e0e7461151a53baa7", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/3f99f3729f29754df501077e0e7461151a53baa7", "committedDate": "2021-02-21T15:14:53Z", "message": "make manage vault button as general and implement it in subclasses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da71b6dfd40661fb366748f590d1537a54393d19", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/da71b6dfd40661fb366748f590d1537a54393d19", "committedDate": "2021-02-21T15:14:54Z", "message": "improve method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd30d50d1d013666477452f40c387c5bba9ee83b", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/cd30d50d1d013666477452f40c387c5bba9ee83b", "committedDate": "2021-02-21T15:14:54Z", "message": "add a log when error of uninstall a map"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "125b131f814e629fdb3b38da7cf755fe16d49b5a", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/125b131f814e629fdb3b38da7cf755fe16d49b5a", "committedDate": "2021-02-20T10:43:36Z", "message": "add a log when error of uninstall a map"}, "afterCommit": {"oid": "cd30d50d1d013666477452f40c387c5bba9ee83b", "author": {"user": {"login": "IvanPavilionG7", "name": "Ivan"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/cd30d50d1d013666477452f40c387c5bba9ee83b", "committedDate": "2021-02-21T15:14:54Z", "message": "add a log when error of uninstall a map"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0ODUyMDMy", "url": "https://github.com/FAForever/downlords-faf-client/pull/2079#pullrequestreview-594852032", "createdAt": "2021-02-21T15:26:08Z", "commit": {"oid": "cd30d50d1d013666477452f40c387c5bba9ee83b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}