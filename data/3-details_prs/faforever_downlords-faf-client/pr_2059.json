{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNTU3Mjk1", "number": 2059, "title": "Team Matchmaker Integration", "bodyText": "Don't really know what to write here. You know what it is...", "createdAt": "2020-12-04T14:08:37Z", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059", "merged": true, "mergeCommit": {"oid": "a4893b100c644ff3887cee20464bdcead44550c3"}, "closed": true, "closedAt": "2020-12-31T13:57:58Z", "author": {"login": "BlackYps"}, "timelineItems": {"totalCount": 140, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi96vnAFqTU0NTA3NzQyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrYGVQgFqTU2MDIzMDU3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDc3NDI4", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-545077428", "createdAt": "2020-12-04T15:50:38Z", "commit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MDozOFrOH_WzzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozODowNFrOH_hLDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ==", "bodyText": "just Map.of()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536196045", "createdAt": "2020-12-04T15:50:38Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjQxOA==", "bodyText": "just Map.of()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536196418", "createdAt": "2020-12-04T15:51:08Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n+        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n+            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n+            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n+            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n+            \"mapPool.mapVersion.map.versions.reviews.player\",\n+        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  }\n+\n+  @Override\n+  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzA4Mw==", "bodyText": "just List.of()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536197083", "createdAt": "2020-12-04T15:51:58Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/MockFafApiAccessor.java", "diffHunk": "@@ -284,8 +285,13 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Nzc5MQ==", "bodyText": "Why not @Data or @Value?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536197791", "createdAt": "2020-12-04T15:52:54Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5ODE2NQ==", "bodyText": "Why not @DaTa or @value?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536198165", "createdAt": "2020-12-04T15:53:27Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/MapPool.java", "diffHunk": "@@ -7,13 +7,19 @@\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n @Getter\n @Setter\n @EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMTA4OQ==", "bodyText": ".endsWith(\"'sParty\") has an implicit semantical meaning and therefore should be put into a dedicated method.\nI'd guess something like boolean isOwnPartiesChannel(String name)\nBut just comparing the end of the name sounds really... odd?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536201089", "createdAt": "2020-12-04T15:57:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -178,6 +178,8 @@ private void onConnectionStateChange(ConnectionState newValue) {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n+      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjA0Mg==", "bodyText": "Why is this public now? Could be a code smell. Not sure.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202042", "createdAt": "2020-12-04T15:58:53Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatChannelUser.java", "diffHunk": "@@ -45,7 +45,7 @@\n     this(username, color, moderator, null);\n   }\n \n-  ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n+  public ChatChannelUser(String username, Color color, boolean moderator, Player player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjI0NQ==", "bodyText": "same here", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202245", "createdAt": "2020-12-04T15:59:12Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Relationship;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjM2Mw==", "bodyText": "same here", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202363", "createdAt": "2020-12-04T15:59:21Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Relationship;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw==", "bodyText": "Why does this method even exist if there is getRoot()? I know it was there before, but maybe you can explain.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204143", "createdAt": "2020-12-04T16:02:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java", "diffHunk": "@@ -145,7 +145,7 @@ public void initialize() {\n         });\n   }\n \n-  ContextMenu getContextMenu() {\n+  public ContextMenu getContextMenu() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDcxMQ==", "bodyText": "Remove. @Inject isn't needed.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204711", "createdAt": "2020-12-04T16:02:49Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA==", "bodyText": "Is there a TODO or not? If yes, please fix, if no please remove.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204948", "createdAt": "2020-12-04T16:03:15Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODk0MA==", "bodyText": "duplicate code, please put into dedicated method", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536208940", "createdAt": "2020-12-04T16:09:17Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -331,9 +339,17 @@ public ReadOnlyBooleanProperty gameRunningProperty() {\n       return gameDirectoryFuture.thenCompose(path -> joinGame(game, password));\n     }\n \n-    log.info(\"Joining game: '{}' ({})\", game.getTitle(), game.getId());\n+    if (inMatchmakerQueue.get()) {\n+      notificationService.addNotification(new ImmediateNotification(\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n+          Severity.WARN,\n+          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n+      ));\n+      return completedFuture(null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMDE2MQ==", "bodyText": "I suggest debug logging of both cases", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536210161", "createdAt": "2020-12-04T16:11:05Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +546,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode\n             }))\n         .exceptionally(throwable -> {\n-          if (throwable instanceof CancellationException) {\n-            log.info(\"Ranked1v1 search has been cancelled\");\n+          if (throwable.getCause() instanceof CancellationException) {\n+            log.info(\"Matchmaking search has been cancelled\");\n           } else {\n-            log.warn(\"Ranked1v1 could not be started\", throwable);\n+            log.warn(\"Matchmade game could not be started\", throwable);\n           }\n           return null;\n         });\n   }\n \n-  public void stopSearchLadder1v1() {\n-    if (searching1v1.get()) {\n-      fafService.stopSearchingRanked();\n-      searching1v1.set(false);\n+  public void onMatchmakerSearchStopped() {\n+    if (inMatchmakerQueue.get()) {\n+      fafService.stopSearchMatchmaker();\n+      inMatchmakerQueue.set(false);\n     }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNTAyNg==", "bodyText": "Use Lombok @Data instead?\nGet rid of all the getter and setter below.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536215026", "createdAt": "2020-12-04T16:18:06Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -9,32 +9,38 @@\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  private String action; // TODO: doesn't exist anymore\n+\n   public static class MatchmakerQueue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNzk3OA==", "bodyText": "Please resolve the todo", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536217978", "createdAt": "2020-12-04T16:22:38Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -96,16 +96,17 @@\n     return fafServerAccessor.requestJoinGame(gameId, password);\n   }\n \n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    return fafServerAccessor.startSearchLadder1v1(faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    return fafServerAccessor.startSearchMatchmaker();\n   }\n \n-  public void requestMatchmakerInfo() {\n-    fafServerAccessor.requestMatchmakerInfo();\n+  public void stopSearchMatchmaker() {\n+    fafServerAccessor.stopSearchMatchmaker();\n   }\n \n-  public void stopSearchingRanked() {\n-    fafServerAccessor.stopSearchingRanked();\n+  //TODO: use for TMM or remove", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ==", "bodyText": "I know it was there before, but now it looks even more like a code smell \ud83e\udd14", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536219889", "createdAt": "2020-12-04T16:25:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMDg1Nw==", "bodyText": "Underscores in variables and methods names are a no-go.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536220857", "createdAt": "2020-12-04T16:26:48Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class AcceptPartyInviteMessage extends ClientMessage {\n+\n+  private Integer sender_id;\n+\n+  public AcceptPartyInviteMessage(Integer sender_id) {\n+    super(ClientMessageType.ACCEPT_PARTY_INVITE);\n+    this.sender_id = sender_id;\n+  }\n+\n+  public Integer getSender_id() {\n+    return sender_id;\n+  }\n+\n+  public void setSender_id(Integer sender_id) {\n+    this.sender_id = sender_id;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTYwNA==", "bodyText": "Underscores in variables are a no-go.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221604", "createdAt": "2020-12-04T16:27:32Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.faforever.client.remote.domain;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class GameMatchmakingMessage extends ClientMessage {\n+\n+  private final String queue_name;\n+  private final MatchmakingState state;\n+\n+  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n+    super(ClientMessageType.GAME_MATCHMAKING);\n+    this.queue_name = queue_name;\n+    this.state = state;\n+  }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTc2Nw==", "bodyText": "stop it", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221767", "createdAt": "2020-12-04T16:27:43Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class InviteToPartyMessage extends ClientMessage {\n+\n+  private Integer recipient_id;\n+\n+  public InviteToPartyMessage(Integer recipient_id) {\n+    super(ClientMessageType.INVITE_TO_PARTY);\n+    this.recipient_id = recipient_id;\n+  }\n+\n+  public Integer getRecipient_id() {\n+    return recipient_id;\n+  }\n+\n+  public void setRecipient_id(Integer recipient_id) {\n+    this.recipient_id = recipient_id;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTk1NQ==", "bodyText": "my eyes!! \ud83d\udc40", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221955", "createdAt": "2020-12-04T16:27:59Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class KickPlayerFromPartyMessage extends ClientMessage {\n+\n+  private Integer kicked_player_id;\n+\n+  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n+    super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+\n+  public Integer getKicked_player_id() {\n+    return kicked_player_id;\n+  }\n+\n+  public void setKicked_player_id(Integer kicked_player_id) {\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMjY1MA==", "bodyText": "Please put line breaks after each stream operation", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536222650", "createdAt": "2020-12-04T16:29:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/MatchmakingState.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.faforever.client.remote.domain;\n+\n+import java.util.Arrays;\n+\n+public enum MatchmakingState {\n+  START(\"start\"), STOP(\"stop\");\n+\n+  private String string;\n+\n+  MatchmakingState(String string) {\n+    this.string = string;\n+  }\n+\n+  public static MatchmakingState fromString(String string) {\n+    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMzM5Ng==", "bodyText": "Use lombok instead", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536223396", "createdAt": "2020-12-04T16:30:08Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.remote.domain;\n+\n+public class PartyInviteMessage extends FafServerMessage {\n+\n+  private Integer sender;\n+\n+  public PartyInviteMessage() {\n+    super(FafServerMessageType.PARTY_INVITE);\n+  }\n+\n+  public Integer getSender() {\n+    return sender;\n+  }\n+\n+  public void setSender(Integer sender) {\n+    this.sender = sender;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMzY0NQ==", "bodyText": "Use lombok instead", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536223645", "createdAt": "2020-12-04T16:30:31Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.faforever.client.remote.domain;\n+\n+import com.faforever.client.game.Faction;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class SetPartyFactionsMessage extends ClientMessage {\n+\n+  private List<String> factions;\n+\n+  public SetPartyFactionsMessage(List<Faction> factions) {\n+    super(ClientMessageType.SET_PARTY_FACTIONS);\n+    this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n+  }\n+\n+  public List<String> getFactions() {\n+    return factions;\n+  }\n+\n+  public void setFactions(List<String> factions) {\n+    this.factions = factions;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw==", "bodyText": "Wait what? An object isn't allowed to change itself outside of the main thread?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536225097", "createdAt": "2020-12-04T16:32:43Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTMzNQ==", "bodyText": "use List.of(message.getOwner())", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536225335", "createdAt": "2020-12-04T16:33:06Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNjQzOQ==", "bodyText": "This is a heavy violation of separation of concerns. This method is NOT allowed in a dto. Put it into the playerservice or wherever you need it.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536226439", "createdAt": "2020-12-04T16:34:47Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNzAxMg==", "bodyText": "The nested complexitiy of these lines is too damn high. Outsource it in functions or at least improve formatting with proper linebreaking on each stream.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536227012", "createdAt": "2020-12-04T16:35:37Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyODgzMw==", "bodyText": "Revert revert! :D", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536228833", "createdAt": "2020-12-04T16:38:18Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java", "diffHunk": "@@ -233,6 +234,7 @@ public void testOnChatMessageAction() {\n   }\n \n   @Test\n+  @Ignore // TODO: REVERT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTA2OA==", "bodyText": "I guess this block can be removed now.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536229068", "createdAt": "2020-12-04T16:38:39Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -484,80 +479,83 @@ public void testOnGameInfoRemove() {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  @Test\n-  public void testStartSearchLadder1v1() throws Exception {\n-    int uid = 123;\n-    String map = \"scmp_037\";\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-        .expectedPlayers(2)\n-        .faction(CYBRAN)\n-        .initMode(LobbyMode.AUTO_LOBBY)\n-        .mapPosition(4)\n-        .team(1)\n-        .get();\n-\n-    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-\n-    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-    when(mapService.isInstalled(map)).thenReturn(false);\n-    when(mapService.download(map)).thenReturn(completedFuture(null));\n-    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-\n-    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-\n-    verify(fafService).startSearchLadder1v1(CYBRAN);\n-    verify(mapService).download(map);\n-    verify(replayService).start(eq(uid), any());\n-    verify(forgedAllianceService).startGame(\n-        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-    Process process = mock(Process.class);\n-    when(process.isAlive()).thenReturn(true);\n-\n-    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-\n-    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-\n-    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        gameRunningLatch.countDown();\n-      }\n-    });\n-\n-    instance.hostGame(newGameInfo);\n-    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-\n-    instance.startSearchLadder1v1(AEON);\n-\n-    assertThat(instance.searching1v1Property().get(), is(false));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg==", "bodyText": "Can be removed now as well?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536229192", "createdAt": "2020-12-04T16:38:52Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -629,12 +627,13 @@ public void runWithLiveReplayIfNoGameSet() {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchLadder1v1IfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchLadder1v1(null);\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMDE5Mw==", "bodyText": "I see a lot of empty tests there.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536230193", "createdAt": "2020-12-04T16:40:26Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.google.common.eventbus.EventBus;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.notification.Severity.INFO;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjg3Nw==", "bodyText": "playerTextField.getText().isBlank()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536352877", "createdAt": "2020-12-04T20:11:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng==", "bodyText": "Is this todo still relevant?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536352996", "createdAt": "2020-12-04T20:11:36Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzI0Ng==", "bodyText": "Line breaks in the stream operations improves readability", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536353246", "createdAt": "2020-12-04T20:12:04Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          } else {\n+            return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n+          }\n+        }, playerTextField.textProperty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzMwMA==", "bodyText": "Remove?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536353300", "createdAt": "2020-12-04T20:12:10Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          } else {\n+            return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n+          }\n+        }, playerTextField.textProperty()\n+    ));\n+\n+    //TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NTEzMg==", "bodyText": "Isn't the toUpperCase something that should be configurable in the control via css or something?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536355132", "createdAt": "2020-12-04T20:16:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<Node> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public Node queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+\n+  private Timeline queuePopTimeUpdater;\n+\n+  private MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ==", "bodyText": "Don't tell me it's hacky without telling what and why. I assume the WeakReference is meant here, but it I don't know for sure.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536356181", "createdAt": "2020-12-04T20:18:01Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw==", "bodyText": "StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()\nIf the string is empty it's empty? Thanks captain.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536361567", "createdAt": "2020-12-04T20:28:48Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MzA3Ng==", "bodyText": "Use @RequiredArgsConstructor", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536363076", "createdAt": "2020-12-04T20:32:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MzM3Mw==", "bodyText": "Again here StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry() seems  useless.\nAnd duplicate code", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536363373", "createdAt": "2020-12-04T20:32:39Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA==", "bodyText": "Can this not be done via css? Then it would be completely redundant (handled in FXML)", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536364184", "createdAt": "2020-12-04T20:34:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDg1Mg==", "bodyText": "As stated earlier, this should be outsourced into a dedicated function", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536364852", "createdAt": "2020-12-04T20:35:50Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+    }, teamMatchmakingService.getParty().ownerProperty()));\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    Dialog dialog = uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.setPartyFactions(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    JavaFxUtil.assertApplicationThread();\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    chatTabPane.getTabs().clear();\n+    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTAzMA==", "bodyText": "If not needed remove Initializing bean or use @RequiredArgsConstructor and do all the current constructor logic here.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365030", "createdAt": "2020-12-04T20:36:12Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTM5MQ==", "bodyText": "line breaks after the stream operators", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365391", "createdAt": "2020-12-04T20:36:56Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n+  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+    this.fafServerAccessor = fafServerAccessor;\n+    this.playerService = playerService;\n+    this.notificationService = notificationService;\n+    this.preferencesService = preferencesService;\n+    this.fafService = fafService;\n+    this.eventBus = eventBus;\n+    this.i18n = i18n;\n+    this.taskScheduler = taskScheduler;\n+    this.gameService = gameService;\n+\n+    fafService.addOnMessageListener(PartyInviteMessage.class, this::onPartyInvite);\n+    fafService.addOnMessageListener(PartyKickedMessage.class, this::onPartyKicked);\n+    fafService.addOnMessageListener(PartyInfoMessage.class, this::onPartyInfo);\n+    fafService.addOnMessageListener(SearchInfoMessage.class, this::onSearchInfoMessage);\n+    fafService.addOnMessageListener(MatchFoundMessage.class, this::onMatchFoundMessage);\n+    fafService.addOnMessageListener(MatchCancelledMessage.class, this::onMatchCancelledMessage);\n+    fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n+    fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == ConnectionState.DISCONNECTED) {\n+        Platform.runLater(() -> initParty(playerService.getCurrentPlayer().get()));\n+      }\n+    });\n+\n+    fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n+\n+    party = new Party();\n+\n+    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n+        Platform.runLater(() -> initParty(player));\n+      }\n+    });\n+\n+    playerService.getCurrentPlayer().ifPresent(this::initParty);\n+  }\n+\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+    List<CompletableFuture<?>> futures = new ArrayList<>();\n+    message.getQueues().forEach(remoteQueue -> {\n+      MatchmakingQueue localQueue = matchmakingQueues.stream()\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTgzNw==", "bodyText": "linebreaks after each stream operator", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365837", "createdAt": "2020-12-04T20:38:04Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n+  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+    this.fafServerAccessor = fafServerAccessor;\n+    this.playerService = playerService;\n+    this.notificationService = notificationService;\n+    this.preferencesService = preferencesService;\n+    this.fafService = fafService;\n+    this.eventBus = eventBus;\n+    this.i18n = i18n;\n+    this.taskScheduler = taskScheduler;\n+    this.gameService = gameService;\n+\n+    fafService.addOnMessageListener(PartyInviteMessage.class, this::onPartyInvite);\n+    fafService.addOnMessageListener(PartyKickedMessage.class, this::onPartyKicked);\n+    fafService.addOnMessageListener(PartyInfoMessage.class, this::onPartyInfo);\n+    fafService.addOnMessageListener(SearchInfoMessage.class, this::onSearchInfoMessage);\n+    fafService.addOnMessageListener(MatchFoundMessage.class, this::onMatchFoundMessage);\n+    fafService.addOnMessageListener(MatchCancelledMessage.class, this::onMatchCancelledMessage);\n+    fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n+    fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == ConnectionState.DISCONNECTED) {\n+        Platform.runLater(() -> initParty(playerService.getCurrentPlayer().get()));\n+      }\n+    });\n+\n+    fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n+\n+    party = new Party();\n+\n+    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n+        Platform.runLater(() -> initParty(player));\n+      }\n+    });\n+\n+    playerService.getCurrentPlayer().ifPresent(this::initParty);\n+  }\n+\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+    List<CompletableFuture<?>> futures = new ArrayList<>();\n+    message.getQueues().forEach(remoteQueue -> {\n+      MatchmakingQueue localQueue = matchmakingQueues.stream()\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n+      if (localQueue == null) {\n+        queuesAdded = true;\n+        CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n+        futures.add(future);\n+        future.thenAccept(result -> result.ifPresent(\n+            matchmakingQueue -> {\n+              matchmakingQueues.add(matchmakingQueue);\n+              matchmakingQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n+              matchmakingQueue.setTeamSize(remoteQueue.getTeamSize());\n+              matchmakingQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n+              Platform.runLater(() -> matchmakingQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n+            }));\n+      } else {\n+        localQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n+        localQueue.setTeamSize(remoteQueue.getTeamSize());\n+        localQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n+        Platform.runLater(() -> localQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n+      }\n+    });\n+\n+    CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])).thenRun(() -> {\n+      if (queuesAdded) {\n+        eventBus.post(new QueuesAddedEvent());\n+        queuesAdded = false;\n+      }\n+    });\n+  }\n+\n+  protected void onSearchInfoMessage(SearchInfoMessage message) {\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueueName())).forEach(q -> {\n+          Platform.runLater(() -> {\n+            q.setJoined(message.getState() == MatchmakingState.START);\n+            leaveQueueTimeouts.forEach(f -> f.cancel(false));\n+          });\n+\n+          //TODO: check current state / other queues\n+          if (message.getState() == MatchmakingState.START) {\n+            gameService.startSearchMatchmaker();\n+\n+            // Send own factions to server upon joining a queue\n+            Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n+                .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n+                .findFirst();\n+            ownPartyMember.ifPresent(m -> setPartyFactions(m.getFactions()));\n+          }\n+        }\n+    );\n+\n+    if (matchmakingQueues.stream().noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n+        && message.getState() != MatchmakingState.START // catches same race condition\n+        && !matchFoundAndWaitingForGameLaunch) {\n+      gameService.onMatchmakerSearchStopped();\n+    }\n+  }\n+\n+  private void onMatchFoundMessage(MatchFoundMessage message) {\n+    matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n+\n+    notificationService.addNotification(new TransientNotification(\n+        i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n+        i18n.get(\"teammatchmaking.notification.matchFound.message\")\n+    ));\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueue())).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler);\n+    });\n+\n+    matchmakingQueues.forEach(q -> q.setJoined(false));\n+  }\n+\n+  private void onMatchCancelledMessage(MatchCancelledMessage message) {\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler);\n+    });\n+\n+    matchFoundAndWaitingForGameLaunch = false;\n+    gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n+  }\n+\n+  private void onGameLaunchMessage(GameLaunchMessage message) {\n+    if (message.getInitMode() != LobbyMode.AUTO_LOBBY) {\n+      return;\n+    }\n+\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTkwMjE3", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-545590217", "createdAt": "2020-12-05T14:12:54Z", "commit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxMjo1NFrOH_6lhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDo0ODoyM1rOH_7sMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MjIxMg==", "bodyText": "I think the thing to do here would be to cut the unnecessary dependencies.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536782212", "createdAt": "2020-12-05T14:12:54Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzA4OQ==", "bodyText": "Can this TODO be resolved?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536783089", "createdAt": "2020-12-05T14:14:44Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -505,27 +518,23 @@ public Game getByUid(int uid) {\n     return game;\n   }\n \n-  public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage> listener) {\n-    fafService.addOnMessageListener(MatchmakerInfoMessage.class, listener);\n-  }\n-\n-  public CompletableFuture<Void> startSearchLadder1v1(Faction faction) {\n+  public CompletableFuture<Void> startSearchMatchmaker() {\n     if (isRunning()) {\n-      log.debug(\"Game is running, ignoring 1v1 search request\");\n+      log.debug(\"Game is running, ignoring matchmaking search request\");\n       notificationService.addImmediateErrorNotification(new UnsupportedOperationException(\"Forged Alliances is already running\"), \"game.gameRunning\");\n       return completedFuture(null);\n     }\n \n     if (!preferencesService.isGamePathValid()) {\n       CompletableFuture<Path> gameDirectoryFuture = postGameDirectoryChooseEvent();\n-      return gameDirectoryFuture.thenCompose(path -> startSearchLadder1v1(faction));\n+      return gameDirectoryFuture.thenCompose(path -> startSearchMatchmaker());\n     }\n \n-    searching1v1.set(true);\n+    inMatchmakerQueue.set(true);\n \n-    return modService.getFeaturedMod(LADDER_1V1.getTechnicalName())\n+    return modService.getFeaturedMod(FAF.getTechnicalName())//TODO: use matchmaking featured mod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzI3NA==", "bodyText": "This one seems needed as well unless I am missing something", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536783274", "createdAt": "2020-12-05T14:15:14Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +543,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NTYxMg==", "bodyText": "I believe these can be removed with the @DaTa at top", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536785612", "createdAt": "2020-12-05T14:20:13Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -4,86 +4,47 @@\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  @Data\n   public static class MatchmakerQueue {\n \n-    private QueueName queueName;\n+    private String queueName;\n     private String queuePopTime;\n+    @SerializedName(\"team_size\")\n+    private int teamSize;\n+    @SerializedName(\"num_players\")\n+    private int numPlayers;\n+\n+    // The boundaries indicate the ranges applicable for other searching players,\n+    // boundarys.size() therefore indicates the players currently in queue\n     @SerializedName(\"boundary_75s\")\n     private List<RatingRange> boundary75s;\n     @SerializedName(\"boundary_80s\")\n     private List<RatingRange> boundary80s;\n \n-    public static enum QueueName {\n-      @SerializedName(\"ladder1v1\")\n-      LADDER_1V1\n-    }\n-\n-    public MatchmakerQueue(QueueName queueName, String queuePopTime, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n+    public MatchmakerQueue(String queueName, String queuePopTime, int teamSize, int numPlayers, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n       this.queueName = queueName;\n       this.queuePopTime = queuePopTime;\n+      this.teamSize = teamSize;\n+      this.numPlayers = numPlayers;\n       this.boundary75s = boundary75s;\n       this.boundary80s = boundary80s;\n     }\n \n-    public QueueName getQueueName() {\n-      return queueName;\n-    }\n-\n-    public void setQueueName(QueueName queueName) {\n-      this.queueName = queueName;\n-    }\n-\n-    public String getQueuePopTime() {\n-      return queuePopTime;\n-    }\n-\n-    public void setQueuePopTime(String queuePopTime) {\n-      this.queuePopTime = queuePopTime;\n-    }\n-\n-    public List<RatingRange> getBoundary75s() {\n-      return boundary75s;\n-    }\n-\n-    public void setBoundary75s(List<RatingRange> boundary75s) {\n-      this.boundary75s = boundary75s;\n-    }\n-\n-    public List<RatingRange> getBoundary80s() {\n-      return boundary80s;\n-    }\n-\n-    public void setBoundary80s(List<RatingRange> boundary80s) {\n-      this.boundary80s = boundary80s;\n-    }\n   }\n-\n-  private String action;\n+  @Getter\n+  @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NzE3Nw==", "bodyText": "So the TODO should be removed then", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536787177", "createdAt": "2020-12-05T14:23:40Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4ODA2Ng==", "bodyText": "JavaFxUtil.bindManagedToVisible", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536788066", "createdAt": "2020-12-05T14:25:44Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<Node> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public Node queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+\n+  private Timeline queuePopTimeUpdater;\n+\n+  private MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n+        queue.playersInQueueProperty()));\n+\n+    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n+    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n+    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4OTU2NA==", "bodyText": "This seems fishy it should be able to run outside the main thread unless it is bound to some graphic somewhere", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536789564", "createdAt": "2020-12-05T14:29:03Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MDIyMw==", "bodyText": "The contextmenu is separable from the chatUser which might be the thing to do here as I don't understand why the chatUser is necessary if all we want is a context menu", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536790223", "createdAt": "2020-12-05T14:30:33Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MjIzOQ==", "bodyText": "We need to make sure this listener is removed if a player leaves the party", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536792239", "createdAt": "2020-12-05T14:34:37Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private ChatChannelUser chatUser;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.hasText(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+    gameCountLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n+        player.numberOfGamesProperty()));\n+\n+    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n+    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n+    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n+    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == PlayerStatus.IDLE) {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(false);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        });\n+      } else {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(true);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        });\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MzE2Ng==", "bodyText": "This also seems like it would be a different context menu", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536793166", "createdAt": "2020-12-05T14:36:38Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgwMDMwNA==", "bodyText": "I think it needs to be reimplemented otherwise there is no test for this I think", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536800304", "createdAt": "2020-12-05T14:48:23Z", "author": {"login": "Sheikah45"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -629,12 +627,13 @@ public void runWithLiveReplayIfNoGameSet() {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchLadder1v1IfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchLadder1v1(null);\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 196}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8ef6064d086b00fcf2cd92c3e371f374f4ee432", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f8ef6064d086b00fcf2cd92c3e371f374f4ee432", "committedDate": "2020-12-05T21:14:21Z", "message": "Add more tests"}, "afterCommit": {"oid": "b4385daf18b21429cd163c5d239caa74f40d9845", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b4385daf18b21429cd163c5d239caa74f40d9845", "committedDate": "2020-12-07T10:58:29Z", "message": "Refactor partychat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTY5MDY4", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-550969068", "createdAt": "2020-12-13T22:39:55Z", "commit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjozOTo1NlrOIE6aWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0NDozNVrOIE6dmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjIzNQ==", "bodyText": "Should not be part of this PR", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022235", "createdAt": "2020-12-13T22:39:56Z", "author": {"login": "1-alex98"}, "path": ".github/workflows/checks.yml", "diffHunk": "@@ -0,0 +1,40 @@\n+# This workflow will build a Java project with Gradle\n+# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle\n+\n+name: Checks\n+\n+on:\n+  push:\n+    branches: [ develop ]\n+  pull_request:\n+    branches: [ develop ]\n+\n+jobs:\n+  checks:\n+\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+\n+      - name: Set up JDK 15.0.1\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 15.0.1\n+          java-package: jdk+fx\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjM3Mg==", "bodyText": "TODO what also refer to an issue if you make a TODO", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022372", "createdAt": "2020-12-13T22:40:51Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/remote/MockFafServerAccessor.java", "diffHunk": "@@ -245,17 +234,17 @@ public void requestMatchmakerInfo() {\n   }\n \n   @Override\n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    logger.debug(\"Searching 1v1 match with faction: {}\", faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    logger.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n+    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName()); // TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjc1NQ==", "bodyText": "Extract into method", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022755", "createdAt": "2020-12-13T22:42:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.VBox;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<VBox> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public VBox queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+  @VisibleForTesting\n+  protected MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n+        queue.playersInQueueProperty()));\n+\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+    queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n+      disableMatchStatus();\n+      if (newValue == null) {\n+        return;\n+      }\n+      switch (newValue) {\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+      }\n+    });\n+\n+    joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+    ));\n+    queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n+    queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n+\n+    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+\n+    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+      if (queue.getQueuePopTime() != null) {\n+        Instant now = Instant.now();\n+        Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n+        if (!timeUntilPopQueue.isNegative()) {\n+          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n+              timeUntilPopQueue.toMinutes(),\n+              timeUntilPopQueue.toSecondsPart()).toUpperCase());\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjgzMw==", "bodyText": "the method is a little long", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022833", "createdAt": "2020-12-13T22:43:35Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.VBox;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<VBox> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public VBox queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+  @VisibleForTesting\n+  protected MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMzA2Ng==", "bodyText": "extract method", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542023066", "createdAt": "2020-12-13T22:44:35Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1) {\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        } else {\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7936a63a30c4691a77194e00c838a537184cfccb", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7936a63a30c4691a77194e00c838a537184cfccb", "committedDate": "2020-12-19T23:02:29Z", "message": "Fix merge errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f554c321468bac2c60105d0e9b003eba46b29d7", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/8f554c321468bac2c60105d0e9b003eba46b29d7", "committedDate": "2020-12-19T23:03:23Z", "message": "Refactoring\n\nUse Map instead of ImmutableMap\nUse List.of instead of Collections.emptyList\nClean imports\nExtract method in GameService\nUse line breaks in stream operations\nController refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "411da96ef94f8c911fe64ba887f5e30260e4d642", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/411da96ef94f8c911fe64ba887f5e30260e4d642", "committedDate": "2020-12-20T00:12:02Z", "message": "Improve invite dialog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "committedDate": "2020-12-20T00:12:02Z", "message": "Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e5cc4582645fa056588eb4a4cab463a72c9d682", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/5e5cc4582645fa056588eb4a4cab463a72c9d682", "committedDate": "2020-12-20T00:13:52Z", "message": "Add logging when matchmaker search stopped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7a51a60428a593bdd217aa5939c84fb6d54b25", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6a7a51a60428a593bdd217aa5939c84fb6d54b25", "committedDate": "2020-12-20T00:13:52Z", "message": "Fix missing info on partymember cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "committedDate": "2020-12-20T00:13:52Z", "message": "Refactoring\n\nMove method from Party.java to TeamMatchmakingService\nRefactor partychat logic\nCleanup todos\nReposition kick button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ba8394fa4afa1ef7473e847c41a0339fb85ad3", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/95ba8394fa4afa1ef7473e847c41a0339fb85ad3", "committedDate": "2020-12-20T13:45:20Z", "message": "Add github actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc2d3117782a2b139a02e51508741fb581197491", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/dc2d3117782a2b139a02e51508741fb581197491", "committedDate": "2020-12-20T13:45:20Z", "message": "Disable queue buttons when someone is in a game"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e0e68d82855851a4ab0aca69a06418550486f29", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/3e0e68d82855851a4ab0aca69a06418550486f29", "committedDate": "2020-12-20T13:45:20Z", "message": "Change queue heading message when you are in queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392770c1e55a656b1770d1a6a6bf16f038a9cdf1", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/392770c1e55a656b1770d1a6a6bf16f038a9cdf1", "committedDate": "2020-12-20T13:45:20Z", "message": "Remember factions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc898e1955c41f87f97b267761c12eba21bf319", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6bc898e1955c41f87f97b267761c12eba21bf319", "committedDate": "2020-12-20T13:45:21Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2824223ed76fb452d6886470f5380f599cec4b93", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/2824223ed76fb452d6886470f5380f599cec4b93", "committedDate": "2020-12-20T13:45:21Z", "message": "Cache api call and fix queue display bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901c2727e7b4f0b304ae370161c8e76128b4fe5a", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/901c2727e7b4f0b304ae370161c8e76128b4fe5a", "committedDate": "2020-12-20T13:45:21Z", "message": "Create new context menu for party members"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8fe02f6752b97d8f20ee0010fd9905eee528d97", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e8fe02f6752b97d8f20ee0010fd9905eee528d97", "committedDate": "2020-12-20T14:29:39Z", "message": "merge branch 'develop' into feature/team-matchmaking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "287e166748e396bd9c20e03264fe17cdc000fc38", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/287e166748e396bd9c20e03264fe17cdc000fc38", "committedDate": "2020-12-19T00:30:38Z", "message": "Implement proper queue name text overflow"}, "afterCommit": {"oid": "e8fe02f6752b97d8f20ee0010fd9905eee528d97", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e8fe02f6752b97d8f20ee0010fd9905eee528d97", "committedDate": "2020-12-20T14:29:39Z", "message": "merge branch 'develop' into feature/team-matchmaking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "857d045ad3caf57e21c8ec74f32171049a96cef9", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/857d045ad3caf57e21c8ec74f32171049a96cef9", "committedDate": "2020-12-20T14:54:01Z", "message": "code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDI0NDU2", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-556424456", "createdAt": "2020-12-21T14:37:29Z", "commit": {"oid": "857d045ad3caf57e21c8ec74f32171049a96cef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDozNzoyOVrOIJaaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDozNzoyOVrOIJaaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MDgyNw==", "bodyText": "empty test", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546740827", "createdAt": "2020-12-21T14:37:29Z", "author": {"login": "Sheikah45"}, "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage.MatchmakerQueue;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.google.common.eventbus.EventBus;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.faforever.client.notification.Severity.INFO;\n+import static com.faforever.client.notification.Severity.WARN;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private FafServerAccessor fafServerAccessor;\n+  @Mock\n+  private PlayerService playerService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private FafService fafService;\n+  @Mock\n+  private EventBus eventBus;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private TaskScheduler taskScheduler;\n+  @Mock\n+  private GameService gameService;\n+  @Mock\n+  private Player player;\n+  @Mock\n+  private Player otherPlayer;\n+\n+  private TeamMatchmakingService instance;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    List<Player> playerList = new ArrayList<>();\n+    playerList.add(player);\n+    when(player.getStatus()).thenReturn(PlayerStatus.IDLE);\n+    when(playerService.getPlayersByIds(Collections.singletonList(1))).thenReturn(CompletableFuture.completedFuture(playerList));\n+    ReadOnlyObjectProperty<ConnectionState> state = new SimpleObjectProperty<>();\n+    when(fafService.connectionStateProperty()).thenReturn(state);\n+    ReadOnlyObjectProperty<Player> playerProperty = new SimpleObjectProperty<>();\n+    when(playerService.currentPlayerProperty()).thenReturn(playerProperty);\n+    instance = new TeamMatchmakingService(fafServerAccessor, playerService, notificationService, preferencesService,\n+        fafService, eventBus, i18n, taskScheduler, gameService);\n+\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(playerService.getCurrentPlayer()).thenReturn(Optional.of(player));\n+  }\n+\n+  private void setPartyMembers() {\n+    ObservableList<PartyMember> testMembers = FXCollections.observableArrayList();\n+    testMembers.add(new PartyMember(new Player(\"member1\")));\n+    testMembers.add(new PartyMember(new Player(\"member2\")));\n+    testMembers.add(new PartyMember(new Player(\"member3\")));\n+    testMembers.add(new PartyMember(player));\n+    instance.getParty().setMembers(testMembers);\n+    instance.getParty().setOwner(player);\n+  }\n+\n+  private void setOwnerByName(String owner) {\n+    instance.getParty().getMembers().stream()\n+        .filter(member -> member.getPlayer().getUsername().equals(owner))\n+        .findFirst()\n+        .ifPresent(partyMember1 -> instance.getParty().setOwner(partyMember1.getPlayer()));\n+  }\n+\n+  @Test\n+  public void testOnInviteMessage() {\n+    when(player.getUsername()).thenReturn(\"dummy\");\n+    PartyInviteMessage message = new PartyInviteMessage();\n+    message.setSender(1);\n+\n+    instance.onPartyInvite(message);\n+\n+    ArgumentCaptor<TransientNotification> captorTransient = ArgumentCaptor.forClass(TransientNotification.class);\n+    verify(notificationService).addNotification(captorTransient.capture());\n+    ArgumentCaptor<PersistentNotification> captorPersistent = ArgumentCaptor.forClass(PersistentNotification.class);\n+    verify(notificationService).addNotification(captorPersistent.capture());\n+    PersistentNotification persistentNotification = captorPersistent.getValue();\n+    assertThat(persistentNotification.getSeverity(), is(INFO));\n+    verify(i18n, times(2)).get(\"teammatchmaking.notification.invite.message\", \"dummy\");\n+  }\n+\n+  @Test\n+  public void testOnKickedFromPartyMessage() {\n+    setPartyMembers();\n+    setOwnerByName(\"member2\");\n+\n+    instance.onPartyKicked(new PartyKickedMessage());\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+    assertThat(instance.getPlayersInGame().isEmpty(), is(true));\n+  }\n+\n+  @Test\n+  public void testOnKickedFromPartyMessageWhenInGame() {\n+    setPartyMembers();\n+    setOwnerByName(\"member2\");\n+    when(player.getStatus()).thenReturn(PlayerStatus.PLAYING);\n+\n+    instance.onPartyKicked(new PartyKickedMessage());\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+    assertThat(instance.getPlayersInGame().size(), is(1));\n+    assertThat(instance.getPlayersInGame().contains(player), is(true));\n+  }\n+\n+  @Test\n+  public void testOnPartyInfoMessagePlayerNotInParty() {\n+    when(playerService.getCurrentPlayer()).thenReturn(Optional.of(player));\n+    List<PartyInfoMessage.PartyMember> testMembers = FXCollections.observableArrayList();\n+    PartyInfoMessage.PartyMember member = new PartyInfoMessage.PartyMember();\n+    member.setPlayer(2);\n+    testMembers.add(member);\n+    PartyInfoMessage message = new PartyInfoMessage();\n+    message.setMembers(testMembers);\n+\n+    instance.onPartyInfo(message);\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+  }\n+\n+  @Test\n+  public void testOnPartyInfoMessage() {\n+\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857d045ad3caf57e21c8ec74f32171049a96cef9"}, "originalPosition": 191}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b40ddf6c8f67bac4c08cb8e2ac82c4c9099340", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/54b40ddf6c8f67bac4c08cb8e2ac82c4c9099340", "committedDate": "2020-12-21T21:39:38Z", "message": "Add invite item to chat context menu"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df5ab784ec12b238cef8f7aecc98359bb31eabf", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/1df5ab784ec12b238cef8f7aecc98359bb31eabf", "committedDate": "2020-12-24T00:21:44Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/41d3283903944aac66f95760c3be06e378dc8aa5", "committedDate": "2020-12-26T17:30:38Z", "message": "Fix queues not displayed bug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc0de2c36805c484a8a9f9f0dda55d324547362f", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/dc0de2c36805c484a8a9f9f0dda55d324547362f", "committedDate": "2020-12-26T16:21:43Z", "message": "Fix queues not displayed bug"}, "afterCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/41d3283903944aac66f95760c3be06e378dc8aa5", "committedDate": "2020-12-26T17:30:38Z", "message": "Fix queues not displayed bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODk0MTMx", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-558894131", "createdAt": "2020-12-26T22:29:00Z", "commit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQyMjoyOTowMFrOILmnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQyMjoyOTowMFrOILmnVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzNzkxMQ==", "bodyText": "Needs to be a constant", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549037911", "createdAt": "2020-12-26T22:29:00Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -135,10 +136,10 @@ public void initialize() {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved()) {\n+      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTEyNzI5", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-559112729", "createdAt": "2020-12-28T11:49:32Z", "commit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo0OTozMlrOIL31CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo1MTo1OVrOIL33dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxOTk0NA==", "bodyText": "Should this be cached as well?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549319944", "createdAt": "2020-12-28T11:49:32Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -427,28 +427,41 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDE5OQ==", "bodyText": "We just changed this in the API to be properly camel case again", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549320199", "createdAt": "2020-12-28T11:50:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.Data;\n+import java.time.OffsetDateTime;\n+\n+@Data\n+@Type(\"leaderboard\")\n+public class Leaderboard {\n+  @Id\n+  private String id;\n+  private OffsetDateTime createTime;\n+  private OffsetDateTime updateTime;\n+  private String description_key;\n+  private String name_key;\n+  private String technical_name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDU2Nw==", "bodyText": "Overload isMatchmakerPartyMessage to take a String as well. Then use the dedicated function", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549320567", "createdAt": "2020-12-28T11:51:59Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -135,10 +136,10 @@ public void initialize() {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved()) {\n+      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzNzkxMQ=="}, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a3de636218a11c2076e50bf59953d9e3be826b", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b7a3de636218a11c2076e50bf59953d9e3be826b", "committedDate": "2020-12-29T11:44:01Z", "message": "Code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde9eea83c469241a9ec5f504210f58df2cca22a", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/bde9eea83c469241a9ec5f504210f58df2cca22a", "committedDate": "2020-12-29T11:44:01Z", "message": "Cache map pools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37a25b4ff66049a8ee011ea417d18393171a886", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c37a25b4ff66049a8ee011ea417d18393171a886", "committedDate": "2020-12-29T12:06:17Z", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/api/FafApiAccessorImpl.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "committedDate": "2020-12-29T12:06:51Z", "message": "leaderboard to camelCase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTQyNzA0", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-559542704", "createdAt": "2020-12-29T13:55:59Z", "commit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMzo1NTo1OVrOIMP3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoyOTo1N1rOIMQjSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcxMzY2Nw==", "bodyText": "I would include the leaderboard of the queue, although if the api did not change back to camelcase this may break it at the moment", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549713667", "createdAt": "2020-12-29T13:55:59Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -446,28 +446,42 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, ImmutableMap.of(INCLUDE, REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        INCLUDE, \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  }\n+\n+  @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n+  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMTI2NA==", "bodyText": "This should be a constant as well ideally related to the one used for checking the channel name", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549721264", "createdAt": "2020-12-29T14:18:47Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,324 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMTk3OA==", "bodyText": "constant", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549721978", "createdAt": "2020-12-29T14:20:55Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,324 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTAwMg==", "bodyText": "Would be good to have this as a constant to make referencing easier", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549725002", "createdAt": "2020-12-29T14:29:57Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -186,6 +189,14 @@ public void onChatMessage(ChatMessageEvent event) {\n     });\n   }\n \n+  private boolean isMatchmakerPartyMessage(ChatMessage message) {\n+    return message.getSource() != null && isMatchmakerPartyMessage(message.getSource());\n+  }\n+\n+  private boolean isMatchmakerPartyMessage(String channelName) {\n+    return channelName.endsWith(\"'sParty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13248e0b78ebc057e5672d703678134e1fa9e2f5", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/13248e0b78ebc057e5672d703678134e1fa9e2f5", "committedDate": "2020-12-29T15:31:23Z", "message": "Use constant for party channels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "committedDate": "2020-12-29T15:41:07Z", "message": "Include leaderboard in queue api call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NjAyMzc4", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-559602378", "createdAt": "2020-12-29T16:15:55Z", "commit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxNTo1NVrOIMS33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyMDoyOVrOIMS-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MzAzNg==", "bodyText": "why would that be synchronized? I mean it just executes in site PlatformRun.later ... That make is synchronized because there is only one UI Thread !!!", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763036", "createdAt": "2020-12-29T16:15:55Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);\n+      }\n+    });\n+  }\n+\n+  private synchronized void renderQueues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2Mzc2Mg==", "bodyText": "Since there might be a lot of messages received here. Only execute this very line on the UI  Thread no need to switch to the UI thread to check if the message is releavnt => 99% less execution on the UI thread for this action", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763762", "createdAt": "2020-12-29T16:17:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2Mzk5NA==", "bodyText": "remove new line", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763994", "createdAt": "2020-12-29T16:18:28Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDY4OA==", "bodyText": "Create an issue and reference it", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549764688", "createdAt": "2020-12-29T16:20:29Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.beans.value.WeakChangeListener;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n+\n+    selectFactionsBasedOnParty();\n+  }\n+\n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44cbd2c344ab20ed407c72e43b129e48a828f368", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/44cbd2c344ab20ed407c72e43b129e48a828f368", "committedDate": "2020-12-30T13:43:13Z", "message": "Code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTk3NDIy", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-560197422", "createdAt": "2020-12-30T20:53:55Z", "commit": {"oid": "44cbd2c344ab20ed407c72e43b129e48a828f368"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aeaeaa018276a4cc0ab98a66b932007c4f62de1", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/2aeaeaa018276a4cc0ab98a66b932007c4f62de1", "committedDate": "2020-12-30T21:53:42Z", "message": "Delete leftover message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjMwNTc0", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#pullrequestreview-560230574", "createdAt": "2020-12-30T23:40:37Z", "commit": {"oid": "2aeaeaa018276a4cc0ab98a66b932007c4f62de1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61867f41510a108db36f7e449ef960aaa6cabf18", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/61867f41510a108db36f7e449ef960aaa6cabf18", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48e14ac3dcdf670bb65381adf252885adacc2c7", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c48e14ac3dcdf670bb65381adf252885adacc2c7", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17357f52afc7dc315d84eea536ee8c8433f88b61", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/17357f52afc7dc315d84eea536ee8c8433f88b61", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d29568cbd60339c4c1277362b9ceaf067d01c9", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e7d29568cbd60339c4c1277362b9ceaf067d01c9", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66cc15ed79e9e22ba47a30369dbad120c369837f", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/66cc15ed79e9e22ba47a30369dbad120c369837f", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52f5f1e95f06d5e98894d6b4fccc2b9d1810161c", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/52f5f1e95f06d5e98894d6b4fccc2b9d1810161c", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "907e22c5aeb515dc1a6bd7d640b847d1f79c2b7a", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/907e22c5aeb515dc1a6bd7d640b847d1f79c2b7a", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b28e0df51e74afc6af10801e1ade9a2b7e8fb49", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7b28e0df51e74afc6af10801e1ade9a2b7e8fb49", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd85819a3377dbff56b2236d8de875948dd9a61", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/0fd85819a3377dbff56b2236d8de875948dd9a61", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58a5dd717b6339c54ae831ca17e8d34d3c03726", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f58a5dd717b6339c54ae831ca17e8d34d3c03726", "committedDate": "2020-06-03T21:19:30Z", "message": "team matchmaking WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e964573811f1b05a013b9aa956eb4764bdbe7cd3", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e964573811f1b05a013b9aa956eb4764bdbe7cd3", "committedDate": "2020-06-03T21:19:30Z", "message": "party ready system"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6818fb4069f850c9834442938b59b0a72d1d26fd", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6818fb4069f850c9834442938b59b0a72d1d26fd", "committedDate": "2020-06-03T21:19:30Z", "message": "party structure rework, factions WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7081bde3cc70d046f1da292df70dd09de570a646", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7081bde3cc70d046f1da292df70dd09de570a646", "committedDate": "2020-06-03T21:19:30Z", "message": "party factions UI, UI restructure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0da93f46dd019d56aed12354a61764c58c6eca9a", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/0da93f46dd019d56aed12354a61764c58c6eca9a", "committedDate": "2020-06-03T21:19:30Z", "message": "party system WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470a5653f8471fe245601c29709007761b2d52e9", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/470a5653f8471fe245601c29709007761b2d52e9", "committedDate": "2020-06-03T21:19:30Z", "message": "party system FACTIONS WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ec75df643767fe5bb71afc3faacceb4e1bf27e8", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/4ec75df643767fe5bb71afc3faacceb4e1bf27e8", "committedDate": "2020-06-03T21:19:30Z", "message": "party system factions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f772b8c5308c7b2ab7252445315b86d45d918869", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f772b8c5308c7b2ab7252445315b86d45d918869", "committedDate": "2020-06-03T21:19:30Z", "message": "do not show faction buttons on disable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7f4f7325ddf05a0ec1d6cc90f9799a8df5ed2ae", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/d7f4f7325ddf05a0ec1d6cc90f9799a8df5ed2ae", "committedDate": "2020-06-03T21:19:30Z", "message": "Clean up and Exception fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f88f4c60c32dad14bc773b7fab48857d22b9a22", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/2f88f4c60c32dad14bc773b7fab48857d22b9a22", "committedDate": "2020-06-03T21:19:30Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a214cbdfa20c6d2399a436ec5f36978f07b5ff19", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/a214cbdfa20c6d2399a436ec5f36978f07b5ff19", "committedDate": "2020-06-03T21:19:30Z", "message": "add context menu to party"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37bddf609453806fbefadb89e16da22a50054628", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/37bddf609453806fbefadb89e16da22a50054628", "committedDate": "2020-06-03T21:19:30Z", "message": "player card ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f067be152e3392a2efeb03de60d4ffc9b3e34a01", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f067be152e3392a2efeb03de60d4ffc9b3e34a01", "committedDate": "2020-06-03T21:19:30Z", "message": "restructure TMM ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806d815f06c5999b5dcfa6e1995021a3ce95a308", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/806d815f06c5999b5dcfa6e1995021a3ce95a308", "committedDate": "2020-06-03T22:48:34Z", "message": "TMM queue list display"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e096352968ee65d47e15784be4ed9a6a5c39ca", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/d9e096352968ee65d47e15784be4ed9a6a5c39ca", "committedDate": "2020-06-04T11:29:39Z", "message": "tmm queue UI, timer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94359c2841f2678fd9b29d53db43fe12d11a8d35", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/94359c2841f2678fd9b29d53db43fe12d11a8d35", "committedDate": "2020-06-27T22:46:43Z", "message": "tmm queue - business logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da1c07992e59f1c0acbbbb0494dfad0fc989b116", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/da1c07992e59f1c0acbbbb0494dfad0fc989b116", "committedDate": "2020-07-20T11:34:40Z", "message": "ensure game path is valid before sending invite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdba3592ec773cb221790054300840178393434e", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/fdba3592ec773cb221790054300840178393434e", "committedDate": "2020-08-11T11:26:21Z", "message": "Integrate new matchmaker ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c960de0fe4306d51341352b30caec9b497f0ad8", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/4c960de0fe4306d51341352b30caec9b497f0ad8", "committedDate": "2020-08-11T21:01:56Z", "message": "Use i18n instead of hardcoded text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515fb3db9c76635fc77c8f9490252c59695f67fd", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/515fb3db9c76635fc77c8f9490252c59695f67fd", "committedDate": "2020-08-11T21:30:57Z", "message": "Filter player out of party"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f269f7f7b622580b1980d71f5c5a5cd61557f0ce", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f269f7f7b622580b1980d71f5c5a5cd61557f0ce", "committedDate": "2020-08-20T07:51:08Z", "message": "Refactor country flag loading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b568e3639873e84a3d088fc7ea458e22422af40", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/2b568e3639873e84a3d088fc7ea458e22422af40", "committedDate": "2020-08-20T19:38:17Z", "message": "Change ready button to play button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07d08bcdc1c23f1142a1891ea9c1178976424e29", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/07d08bcdc1c23f1142a1891ea9c1178976424e29", "committedDate": "2020-08-23T16:49:26Z", "message": "hide ready button, disable join queue buttons based on party size and ownership, hide invite player button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e62e2a898e4023192672b8f6f3f492d1b03b4b5", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/8e62e2a898e4023192672b8f6f3f492d1b03b4b5", "committedDate": "2020-08-23T16:56:55Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7241dd3335c42d0ce8b4b4b066533a85b939419a", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7241dd3335c42d0ce8b4b4b066533a85b939419a", "committedDate": "2020-08-23T17:07:53Z", "message": "TESTS DISABLED, REVERT!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99c4d1d0f563d7f67840d1ffcebbb10a6ccacecf", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/99c4d1d0f563d7f67840d1ffcebbb10a6ccacecf", "committedDate": "2020-08-24T10:00:17Z", "message": "WIP remove faction from matchmaker queue join, faction order fix, temporary ugly GameLaunchMessage parsing fix, temporary matchmaker game launch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f51d1c358b3c36f8f733aee6974d0b69f125a5", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/57f51d1c358b3c36f8f733aee6974d0b69f125a5", "committedDate": "2020-08-24T11:01:28Z", "message": "switch faction buttons, fix flag on faction select, force faction selection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "debad00bc0e54c28c848129257ba2965f0721dba", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/debad00bc0e54c28c848129257ba2965f0721dba", "committedDate": "2020-08-24T12:20:36Z", "message": "tmm - display matching status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efb81171aa7f80372ac61749074e3b4a9ccc7995", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/efb81171aa7f80372ac61749074e3b4a9ccc7995", "committedDate": "2020-09-06T10:37:25Z", "message": "i18n queue name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b9c92012f764196275200b7c6b803ae2875e48", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/39b9c92012f764196275200b7c6b803ae2875e48", "committedDate": "2020-09-06T11:03:31Z", "message": "matchmaking - use faction ids instead of boolean array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff6a29c95ac2c03f2d494920e8d2be73d162b36", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/5ff6a29c95ac2c03f2d494920e8d2be73d162b36", "committedDate": "2020-09-06T11:21:01Z", "message": "notify and block party invite / join when in queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17296248dd8b6f3a8db144ad21e5bc4cefede375", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/17296248dd8b6f3a8db144ad21e5bc4cefede375", "committedDate": "2020-09-06T11:48:45Z", "message": "sanity checks, game launch cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2ef7991287a5ea8bc3af6f4c008ad106a47877", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/aa2ef7991287a5ea8bc3af6f4c008ad106a47877", "committedDate": "2020-09-14T20:52:05Z", "message": "Uppercase now controlled by styleclass to enable override by themes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "025c079e23af590c6cc5bc2efa861ce1d9bed5e6", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/025c079e23af590c6cc5bc2efa861ce1d9bed5e6", "committedDate": "2020-09-14T21:09:49Z", "message": "Delete obsolete play button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bafdd3ad1297c83496c7ca0abf75517aa8e8858", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/5bafdd3ad1297c83496c7ca0abf75517aa8e8858", "committedDate": "2020-09-14T21:27:10Z", "message": "Enable resizing of the UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9095afa78644b12a7d4b6944d9cbeed51dc142a3", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/9095afa78644b12a7d4b6944d9cbeed51dc142a3", "committedDate": "2020-09-14T21:37:13Z", "message": "Add new heading for queue area"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16f097866d6212844750291dbd0ce8bd62e9aa7d", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/16f097866d6212844750291dbd0ce8bd62e9aa7d", "committedDate": "2020-09-15T08:41:13Z", "message": "Fix some bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46a7d81f8186b86bdc8c441b1df95b39def2be4", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/d46a7d81f8186b86bdc8c441b1df95b39def2be4", "committedDate": "2020-09-16T11:41:42Z", "message": "Restyle queue cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3358fc5f331eac0f611754a97985e3d4cd9300b", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b3358fc5f331eac0f611754a97985e3d4cd9300b", "committedDate": "2020-09-16T19:33:55Z", "message": "Implement queue name lookup and shortening"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdcda34f4138e621619798380583f670d4b6c977", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/bdcda34f4138e621619798380583f670d4b6c977", "committedDate": "2020-09-22T11:11:58Z", "message": "Replace rating labels with league icon + label"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c86a3515238234eeee8a925122692310336ff8f", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6c86a3515238234eeee8a925122692310336ff8f", "committedDate": "2020-10-01T17:28:09Z", "message": "Layout changes and playercard grows properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "202c6e6bbb2d65f844bab8d76b71bf6a368763c8", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/202c6e6bbb2d65f844bab8d76b71bf6a368763c8", "committedDate": "2020-10-01T22:20:03Z", "message": "Use proper string formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79ddae4528000a3bc2940be5c78cc2481b3010b", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b79ddae4528000a3bc2940be5c78cc2481b3010b", "committedDate": "2020-10-01T22:38:27Z", "message": "Add matching status labels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "157b65757c99f782f8258e3abbded272e2731c3e", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/157b65757c99f782f8258e3abbded272e2731c3e", "committedDate": "2020-10-01T23:20:57Z", "message": "Merge branch 'feature/team-matchmaking' into feature/new-tmm-ui\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n#\tsrc/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n#\tsrc/main/resources/i18n/messages.properties\n#\tsrc/main/resources/theme/play/team_matchmaking.fxml\n#\tsrc/main/resources/theme/play/teammatchmaking/matchmaking_member_card.fxml\n#\tsrc/main/resources/theme/play/teammatchmaking/matchmaking_queue_card.fxml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b6b81e6e648bc55c083eb158e5d0dd4720f72e", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/65b6b81e6e648bc55c083eb158e5d0dd4720f72e", "committedDate": "2020-10-02T15:02:06Z", "message": "Fix merge errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cffc66e6cba2f2b8a89c7a0773451a5d88d432f0", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/cffc66e6cba2f2b8a89c7a0773451a5d88d432f0", "committedDate": "2020-10-04T11:31:07Z", "message": "tmm: parse factions as string, fix status indicators for own faction selection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c99d1e32ac5b0913dc1741de7813b357de8030f5", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c99d1e32ac5b0913dc1741de7813b357de8030f5", "committedDate": "2020-10-04T11:52:43Z", "message": "fix queue join race condition, set queue joined button state based on server state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea96bb8e2b33731f7bd73bcf2fa439017665911", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/9ea96bb8e2b33731f7bd73bcf2fa439017665911", "committedDate": "2020-10-04T12:19:28Z", "message": "fix faction parsing for game launch message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6935b4f8981e1f193ccd2da0d9a446a397633555", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6935b4f8981e1f193ccd2da0d9a446a397633555", "committedDate": "2020-10-04T15:12:17Z", "message": "fix install4j github release url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d6558bd115c5560fa808587d8030c1ad590c1d", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/03d6558bd115c5560fa808587d8030c1ad590c1d", "committedDate": "2020-10-04T15:17:34Z", "message": "remove / disable ladder1v1 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5719cae773864a15b9b16419b4528d37fe953e42", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/5719cae773864a15b9b16419b4528d37fe953e42", "committedDate": "2020-10-04T16:02:28Z", "message": "bump install4j version WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54792c6e301c042d8ba184962b29e2537fa1b362", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/54792c6e301c042d8ba184962b29e2537fa1b362", "committedDate": "2020-10-04T17:03:27Z", "message": "unbump install4j version (to 7, use different key)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c09d8e3dfea2d6cc8a795f681af16484d7677fb", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/9c09d8e3dfea2d6cc8a795f681af16484d7677fb", "committedDate": "2020-10-04T19:23:40Z", "message": "send own factions to server upon entering queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec2f619e39d36454b9102e07e9490f15a92680a7", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ec2f619e39d36454b9102e07e9490f15a92680a7", "committedDate": "2020-10-04T19:31:35Z", "message": "select all factions in an empty party"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40b5351b8812af56bf4443337de013675a289019", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/40b5351b8812af56bf4443337de013675a289019", "committedDate": "2020-10-04T21:18:40Z", "message": "Fix empty slot in party member pane"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdfbc454eae43c391df3b9144f4a8e737fa46467", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/bdfbc454eae43c391df3b9144f4a8e737fa46467", "committedDate": "2020-10-04T23:28:06Z", "message": "Highlight party owner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e30329c55de3a3fb84cdeb00364a21b4e85bf7f", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7e30329c55de3a3fb84cdeb00364a21b4e85bf7f", "committedDate": "2020-10-05T11:09:56Z", "message": "Align kick button to the right"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85d51945a2d42b04a3ff4e7d9717e5cebd28021f", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/85d51945a2d42b04a3ff4e7d9717e5cebd28021f", "committedDate": "2020-10-05T13:20:02Z", "message": "Change queues heading text when player is not the party owner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8617d2d562b805fc4d0aa3a91efb05587e1d78d", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b8617d2d562b805fc4d0aa3a91efb05587e1d78d", "committedDate": "2020-10-05T13:20:02Z", "message": "Show invited players in invite dialog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f32bb9a23af9727452912ff93926c10bfde75c77", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f32bb9a23af9727452912ff93926c10bfde75c77", "committedDate": "2020-10-05T20:50:57Z", "message": "Add scrollpane to matchmaker ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfde76af4c7874e0438d09c133124769321792d1", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/bfde76af4c7874e0438d09c133124769321792d1", "committedDate": "2020-10-11T18:48:05Z", "message": "fix disabled queue on startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120dfcb35c01812ff2d64eb5c159fce9183f40e5", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/120dfcb35c01812ff2d64eb5c159fce9183f40e5", "committedDate": "2020-10-11T19:40:25Z", "message": "catch game cancel during launch when multiqueueing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a219424334ad7cd81480e4230f0a4abf1644932", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6a219424334ad7cd81480e4230f0a4abf1644932", "committedDate": "2020-10-11T20:23:41Z", "message": "fix already in queue when starting a custom game"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420fa805ec969632d186923559ce6a588b765124", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/420fa805ec969632d186923559ce6a588b765124", "committedDate": "2020-10-11T20:35:54Z", "message": "uncheck queue button when launch failed due to being in game"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17f47ef825d1948588b11e57b91a0e5091d2202", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c17f47ef825d1948588b11e57b91a0e5091d2202", "committedDate": "2020-10-13T09:30:38Z", "message": "Add leader highlight for own player"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d690ff8ba0f685e1c57d3ec8709ff6b82e4caf13", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/d690ff8ba0f685e1c57d3ec8709ff6b82e4caf13", "committedDate": "2020-10-13T09:30:38Z", "message": "Move splitPane divider to 0.7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60226c6db603c66a365feeb068406c4dabf7e490", "author": {"user": {"login": "micheljung", "name": "Michel Jung"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/60226c6db603c66a365feeb068406c4dabf7e490", "committedDate": "2020-10-13T09:49:30Z", "message": "Add VCS config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "827ee919f6d889335bea269e0555500d0453cdb5", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/827ee919f6d889335bea269e0555500d0453cdb5", "committedDate": "2020-10-13T10:12:27Z", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tci/github-release.sh\n#\tsrc/main/java/com/faforever/client/game/GameService.java\n#\tsrc/main/java/com/faforever/client/play/PlayController.java\n#\tsrc/main/java/com/faforever/client/remote/domain/GameInfoMessage.java\n#\tsrc/main/resources/font/dfc-icons.ttf\n#\tsrc/main/resources/i18n/messages.properties\n#\tsrc/main/resources/theme/style.css\n#\tsrc/test/java/com/faforever/client/game/GameInfoMessageBuilder.java\n#\tsrc/test/java/com/faforever/client/rankedmatch/Ladder1V1ControllerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41a984f28535e817ddea4f133d1a8d4b64b81d6", "author": {"user": {"login": "Geosearchef", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/d41a984f28535e817ddea4f133d1a8d4b64b81d6", "committedDate": "2020-10-13T10:49:06Z", "message": "tmm merge fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9bf624d74092ef1dfc732570d665186471a5d7", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/9a9bf624d74092ef1dfc732570d665186471a5d7", "committedDate": "2020-10-14T12:14:24Z", "message": "Adapt icons to new workflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb27ee02c112a1c64bc9e4ad7a4aa6787ce2210", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/3fb27ee02c112a1c64bc9e4ad7a4aa6787ce2210", "committedDate": "2020-10-30T23:02:40Z", "message": "Load division icon instead of avatar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8426a794910522b840e06b09c0a6832e24e1fcb", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/a8426a794910522b840e06b09c0a6832e24e1fcb", "committedDate": "2020-10-31T17:47:54Z", "message": "Add chat functionality WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e126af2e8eff3c030fd9da3b164c1d48d5c3b9b5", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e126af2e8eff3c030fd9da3b164c1d48d5c3b9b5", "committedDate": "2020-10-31T19:58:00Z", "message": "Spawn new chat tabs only when necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52529ec5b71cbf68d48c39a393502542ba739964", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/52529ec5b71cbf68d48c39a393502542ba739964", "committedDate": "2020-11-01T11:42:17Z", "message": "Add chat functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477a29086c477db8e22c6327b0647037baaa50db", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/477a29086c477db8e22c6327b0647037baaa50db", "committedDate": "2020-11-05T16:23:57Z", "message": "Make code cleaner by removing checks for uppercase style class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d7838d2ef6ee9c08b2b9dd32b21631f081d4b4", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f1d7838d2ef6ee9c08b2b9dd32b21631f081d4b4", "committedDate": "2020-11-11T17:30:18Z", "message": "Fix bug in PartyMemberItemController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ff32a6b73497839be0c1ebea2884a90ed2d98d6", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7ff32a6b73497839be0c1ebea2884a90ed2d98d6", "committedDate": "2020-11-15T13:25:03Z", "message": "Code cleanup (mostly deleting of redundant code)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82825c944858f5cd0bc7c59f41c26538f1738157", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/82825c944858f5cd0bc7c59f41c26538f1738157", "committedDate": "2020-11-15T13:25:03Z", "message": "Remove ladder tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec177f1c0ff0c9f540d4e8f9d7244b2b19214144", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ec177f1c0ff0c9f540d4e8f9d7244b2b19214144", "committedDate": "2020-11-15T13:25:03Z", "message": "Remove logic for ladder searches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b164c69f193943e26f575f4afa5759fd61a1df9", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/7b164c69f193943e26f575f4afa5759fd61a1df9", "committedDate": "2020-11-15T13:25:03Z", "message": "Remove notification for match available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce4670c2686e69536fdfffe6390ad3756e0cfcd", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/5ce4670c2686e69536fdfffe6390ad3756e0cfcd", "committedDate": "2020-11-15T17:05:22Z", "message": "Disable chat tab highlight on party message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b617b812cfad2c4314622bbc5bddb2d6271a3cb", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/4b617b812cfad2c4314622bbc5bddb2d6271a3cb", "committedDate": "2020-11-15T18:02:21Z", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/game/GameService.java\n#\tsrc/main/java/com/faforever/client/rankedmatch/Ladder1v1Controller.java\n#\tsrc/main/resources/theme/settings/settings.fxml\n#\tsrc/test/java/com/faforever/client/game/GameServiceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e68bf9dd00d48958735c8baf31b24be7ff2be03", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/9e68bf9dd00d48958735c8baf31b24be7ff2be03", "committedDate": "2020-11-17T18:17:32Z", "message": "Make chat position dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acbf51b7ee29a25f2eef7a3021af72f18c164b8c", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/acbf51b7ee29a25f2eef7a3021af72f18c164b8c", "committedDate": "2020-11-19T10:58:22Z", "message": "Show team matchmaker map pools (#2032)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a13fadd4378d28dab39c092adc37f64218fb4a2", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/3a13fadd4378d28dab39c092adc37f64218fb4a2", "committedDate": "2020-11-20T22:32:18Z", "message": "UI adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eba597c886bcbcf6c70a2b5d054d36994001dda6", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/eba597c886bcbcf6c70a2b5d054d36994001dda6", "committedDate": "2020-11-21T15:51:25Z", "message": "Fix failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7c9e8a13c93492013a9646539c7248c75ffb883", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/d7c9e8a13c93492013a9646539c7248c75ffb883", "committedDate": "2020-11-23T16:54:11Z", "message": "Only highlight tab on new messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df717712e60a6e9d3d6d8b939141acd7df664a94", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/df717712e60a6e9d3d6d8b939141acd7df664a94", "committedDate": "2020-11-23T16:54:43Z", "message": "Fix error in log on queue deselect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f363aab283a057be1bc69b5d9cb67374ff06f4e6", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f363aab283a057be1bc69b5d9cb67374ff06f4e6", "committedDate": "2020-12-04T12:26:20Z", "message": "Add indication when partyMember is in a game"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa67c37c1bd548879850f6abda2ebdda964adb27", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/aa67c37c1bd548879850f6abda2ebdda964adb27", "committedDate": "2020-12-04T12:48:48Z", "message": "Add tests for TeamMatchmakingService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337361dcca0b4598577e8db9761cf76d3eb7c6af", "author": {"user": {"login": "BlackYps", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/337361dcca0b4598577e8db9761cf76d3eb7c6af", "committedDate": "2020-12-04T13:28:22Z", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n#\tsrc/main/java/com/faforever/client/main/MainController.java\n#\tsrc/main/resources/theme/play/ranked_1v1.fxml"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3165, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}