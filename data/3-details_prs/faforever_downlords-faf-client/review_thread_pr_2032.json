{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjkxOTgy", "number": 2032, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzowNTo1OFrOE3crlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDozMToxNFrOE4MAgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTc3MDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzowNTo1OFrOHwzGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzowNTo1OFrOHwzGhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMDk1MA==", "bodyText": "@DaTa maybe", "url": "https://github.com/FAForever/downlords-faf-client/pull/2032#discussion_r520930950", "createdAt": "2020-11-10T23:05:58Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d789a50506023792a6173bd2240ce5168f823766"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzUyNDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/FafService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDozMToxNFrOHx9bkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDoyNDoxMFrOHyM36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0ODc1Mg==", "bodyText": "If you want to keep this structure and implement the pagination you would need to do it here with some .skip and .limit functions", "url": "https://github.com/FAForever/downlords-faf-client/pull/2032#discussion_r522148752", "createdAt": "2020-11-12T14:31:14Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -466,11 +466,15 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    // fixme This uses the count for the number of map pools instead of the number of maps\n+    Tuple<List<MatchmakerQueueMapPool>, java.util.Map<String, ?>> tuple = fafApiAccessor.getMatchMakerPoolsWithMeta(matchmakerQueueId, count, page);\n     return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n         .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b407cc4be4f87ed22cc21313c37e237be1f28fb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU3Nw==", "bodyText": "I made it work! Is there a more elegant way to find out the size of the stream than what I did? It feels a bit clunky.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2032#discussion_r522349577", "createdAt": "2020-11-12T19:09:41Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -466,11 +466,15 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    // fixme This uses the count for the number of map pools instead of the number of maps\n+    Tuple<List<MatchmakerQueueMapPool>, java.util.Map<String, ?>> tuple = fafApiAccessor.getMatchMakerPoolsWithMeta(matchmakerQueueId, count, page);\n     return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n         .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0ODc1Mg=="}, "originalCommit": {"oid": "1b407cc4be4f87ed22cc21313c37e237be1f28fb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwMTc2OQ==", "bodyText": "Unfortunately not that I am aware of as .count() is a terminal operation on a stream. Also your total pages might be off by 1 it might be good to get the ceiling of that value.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2032#discussion_r522401769", "createdAt": "2020-11-12T20:24:10Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -466,11 +466,15 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    // fixme This uses the count for the number of map pools instead of the number of maps\n+    Tuple<List<MatchmakerQueueMapPool>, java.util.Map<String, ?>> tuple = fafApiAccessor.getMatchMakerPoolsWithMeta(matchmakerQueueId, count, page);\n     return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n         .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0ODc1Mg=="}, "originalCommit": {"oid": "1b407cc4be4f87ed22cc21313c37e237be1f28fb"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1982, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}