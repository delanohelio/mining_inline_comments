{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Njc0NjA1", "number": 1739, "title": "Download proxy", "bodyText": "Fixes #1734", "createdAt": "2020-05-31T21:42:38Z", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739", "merged": true, "mergeCommit": {"oid": "0bf5ae99b84c63b12cf07b8831d197521f03e000"}, "closed": true, "closedAt": "2020-10-17T18:17:15Z", "author": {"login": "norraxx"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmzTH3gBqjMzOTEwMjgyMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTfHF6AFqTUxMTAwNTI5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56ef9e2bb17cbecf74e3be367417e48def31304c", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/56ef9e2bb17cbecf74e3be367417e48def31304c", "committedDate": "2020-05-31T22:20:20Z", "message": "wip"}, "afterCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/12c02a3be69a3399bdf7891b956d2b4861881745", "committedDate": "2020-05-31T22:21:02Z", "message": "Download proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjk5Mzkw", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-422699390", "createdAt": "2020-06-02T13:53:51Z", "commit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo1Mzo1MVrOGdyuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo1OTo0NlrOGdy_qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5Mjg5NA==", "bodyText": "This should not be hard coded", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433892894", "createdAt": "2020-06-02T13:53:51Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzEyOA==", "bodyText": "take all flders in there", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433893128", "createdAt": "2020-06-02T13:54:09Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5Mjg5NA=="}, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzYwMA==", "bodyText": "There are dedicated methods to make that transition", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433893600", "createdAt": "2020-06-02T13:54:45Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NDQzOA==", "bodyText": "We normally use more modern classes like OffsetDateTime or Instant", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433894438", "createdAt": "2020-06-02T13:55:43Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NTA5OQ==", "bodyText": "aquie disk lock maybe", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433895099", "createdAt": "2020-06-02T13:56:37Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private void deleteCachedFileIfNeeded(Path filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NTgwMA==", "bodyText": "we do never call printStackTrace that is like System.out.println and we use a logger @slf4j above the class give u an instance logger", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433895800", "createdAt": "2020-06-02T13:57:38Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjA2OA==", "bodyText": "done by @slf4j", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433896068", "createdAt": "2020-06-02T13:57:58Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjMyMg==", "bodyText": "1 Euro for every System.out.println pls", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433896322", "createdAt": "2020-06-02T13:58:18Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    try {\n+      if (Files.isDirectory(filePath)) {\n+        return;\n+      }\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < calendar.getTimeInMillis()) {\n+        System.out.println(\"deleting: \" + filePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NjQwNQ==", "bodyText": "nope", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433896405", "createdAt": "2020-06-02T13:58:25Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Calendar;\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+  private Calendar calendar;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTime() * 1000 * 3600 * 24;\n+    this.calendar = Calendar.getInstance();\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      logger.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    Path[] directoryPaths = new Path[] {\n+        this.cacheDirectory.resolve(\"bin\"),\n+        this.cacheDirectory.resolve(\"gamedata\")\n+    };\n+\n+    try {\n+      for (Path directoryPath : directoryPaths) {\n+        Files.createDirectories(directoryPath);\n+        Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    try {\n+      if (Files.isDirectory(filePath)) {\n+        return;\n+      }\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < calendar.getTimeInMillis()) {\n+        System.out.println(\"deleting: \" + filePath.toString());\n+        Files.deleteIfExists(filePath);\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NzM4NQ==", "bodyText": "Maybe reflect unit in name", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r433897385", "createdAt": "2020-06-02T13:59:46Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/preferences/Preferences.java", "diffHunk": "@@ -81,6 +84,7 @@ public Preferences() {\n     showGameDetailsSidePane = new SimpleBooleanProperty(false);\n     advancedIceLogEnabled = new SimpleBooleanProperty(false);\n     prereleaseCheckEnabled = new SimpleBooleanProperty(false);\n+    cacheLifeTime = new SimpleIntegerProperty(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzM2NDYw", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-425736460", "createdAt": "2020-06-06T12:20:01Z", "commit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjoyMDowMVrOGgDd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjoyMDowMVrOGgDd_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ0Ng==", "bodyText": "logger.info(\"Downloading {}\", cacheFilePath)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436264446", "createdAt": "2020-06-06T12:20:01Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +68,50 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+\n+        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzM2NDg1", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-425736485", "createdAt": "2020-06-06T12:20:12Z", "commit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjoyMDoxMlrOGgDeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjoyMDoxMlrOGgDeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDQ3Nw==", "bodyText": "logger.info(\"Downloading {}\", targetPath)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436264477", "createdAt": "2020-06-06T12:20:12Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +68,50 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+\n+        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n+        }\n       } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+        logger.info(String.format(\"downloading: %s\", targetPath.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzM2NTMy", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-425736532", "createdAt": "2020-06-06T12:20:54Z", "commit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjoyMDo1NFrOGgDeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjoyMDo1NFrOGgDeTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NDUyNg==", "bodyText": "logger.info(\"Copying featured mod file '{}' to '{}'\", cacheFilePath, targetPath);", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436264526", "createdAt": "2020-06-06T12:20:54Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +68,50 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n+\n+        if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+          logger.info(String.format(\"downloading: %s\", cacheFilePath.toString()));\n+          downloadFeaturedModFile(featuredModFile, cacheFilePath);\n+        }\n       } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+        logger.info(String.format(\"downloading: %s\", targetPath.toString()));\n+        downloadFeaturedModFile(featuredModFile, targetPath);\n+        knownTargetHashes.put(targetPath.toString(), featuredModFile.getMd5());\n       }\n \n-\n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n         initFile = targetPath;\n       }\n     }\n \n+    for (FeaturedModFile featuredModFile : featuredModFiles) {\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+      String existingTargetFileHash = knownTargetHashes.get(targetPath.toString());\n+\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        logger.info(String.format(\"copying featured mod file: %s to %s\", cacheFilePath.toString(), targetPath.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745"}, "originalPosition": 113}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12c02a3be69a3399bdf7891b956d2b4861881745", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/12c02a3be69a3399bdf7891b956d2b4861881745", "committedDate": "2020-05-31T22:21:02Z", "message": "Download proxy"}, "afterCommit": {"oid": "431896fadb2b9d685ee2c599e8e75091b17f6235", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/431896fadb2b9d685ee2c599e8e75091b17f6235", "committedDate": "2020-06-06T13:35:36Z", "message": "Fixing logging, removing all files in directory, 1 euro fixes, to be continued"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e8ac613c01c1c730e36756063f47810adc3e00f", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/8e8ac613c01c1c730e36756063f47810adc3e00f", "committedDate": "2020-06-06T13:40:53Z", "message": "Logger fixing"}, "afterCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/21270effe3102b5be809ad110ac9e52323ae73dc", "committedDate": "2020-06-06T18:57:33Z", "message": "Logger fixing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzcyMzA4", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-425772308", "createdAt": "2020-06-06T22:12:46Z", "commit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjoxMjo0NlrOGgF7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjo0Njo0NVrOGgGCjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDY3MA==", "bodyText": "There are metods to make this calculation. Instant or OffsetDateTime", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304670", "createdAt": "2020-06-06T22:12:46Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDk1MA==", "bodyText": "throw new RuntimeException(e)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304950", "createdAt": "2020-06-06T22:16:13Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDk2Mg==", "bodyText": "@SneakyThrows", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304962", "createdAt": "2020-06-06T22:16:27Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDk4NA==", "bodyText": "just purge that", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436304984", "createdAt": "2020-06-06T22:17:01Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTAxMg==", "bodyText": "warn", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305012", "createdAt": "2020-06-06T22:17:24Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTE3OA==", "bodyText": "debug", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305178", "createdAt": "2020-06-06T22:20:36Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);\n+    }\n+  }\n+\n+  private void walkDirectoriesAndDeleteCachedFiles(Path directoryPath) {\n+    try {\n+      Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files per directory\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    if (Files.isDirectory(filePath)) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTIyNA==", "bodyText": "Instant", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305224", "createdAt": "2020-06-06T22:21:19Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);\n+    }\n+  }\n+\n+  private void walkDirectoriesAndDeleteCachedFiles(Path directoryPath) {\n+    try {\n+      Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files per directory\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    if (Files.isDirectory(filePath)) {\n+      return;\n+    }\n+\n+    try {\n+      ResourceLocks.acquireDiskLock();\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < System.currentTimeMillis()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTI0Mg==", "bodyText": "Also {}", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305242", "createdAt": "2020-06-06T22:21:48Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private int cacheLifeTime;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTime = preferencesService.getPreferences().getCacheLifeTimeInDays() * 1000 * 3600 * 24;\n+  }\n+\n+  private String getCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory.resolve(featuredModFile.getGroup()).resolve(getCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) throws java.io.IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } catch (Exception e) {\n+      log.error(e.toString());\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    try {\n+      Files.walk(this.cacheDirectory).forEach(this::walkDirectoriesAndDeleteCachedFiles);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files\", e);\n+    }\n+  }\n+\n+  private void walkDirectoriesAndDeleteCachedFiles(Path directoryPath) {\n+    try {\n+      Files.walk(directoryPath).forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Exception during gathering files per directory\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    if (Files.isDirectory(filePath)) {\n+      return;\n+    }\n+\n+    try {\n+      ResourceLocks.acquireDiskLock();\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      if (lastAccessTime.toMillis() + cacheLifeTime < System.currentTimeMillis()) {\n+        log.info(\"deleting: \" + filePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTM2Mw==", "bodyText": "maybe static import", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305363", "createdAt": "2020-06-06T22:24:00Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +61,46 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n-      } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTk4OQ==", "bodyText": "check if in cache first", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436305989", "createdAt": "2020-06-06T22:35:55Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +61,46 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n-      } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n       }\n \n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        log.info(\"Downloading: {}\", cacheFilePath);\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjEzOA==", "bodyText": "copyMissingFilesFromCache", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436306138", "createdAt": "2020-06-06T22:38:52Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/patch/SimpleHttpFeaturedModUpdaterTask.java", "diffHunk": "@@ -54,32 +61,46 @@ protected PatchResult call() throws Exception {\n     updateMessage(i18n.get(\"updater.readingFileList\"));\n \n     List<FeaturedModFile> featuredModFiles = fafService.getFeaturedModFiles(featuredMod, version).get();\n+    Path fafDataDirectory = preferencesService.getFafDataDirectory();\n \n     Path initFile = null;\n+    Path cacheFilePath;\n+    Path targetPath;\n+\n+    Map<String, String> knownTargetHashes = new HashMap<>();\n+\n+    // Download to cache if file exists in target place, otherwise, download to direct place.\n     for (FeaturedModFile featuredModFile : featuredModFiles) {\n-      Path fafDataDirectory = preferencesService.getFafDataDirectory();\n-      Path targetPath = fafDataDirectory\n-          .resolve(featuredModFile.getGroup())\n-          .resolve(featuredModFile.getName());\n-\n-      if (Files.exists(targetPath)\n-          && featuredModFile.getMd5().equals(com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString())) {\n-        logger.debug(\"Already up to date: {}\", targetPath);\n-      } else {\n-        Files.createDirectories(targetPath.getParent());\n-        updateMessage(i18n.get(\"updater.downloadingFile\", targetPath.getFileName()));\n-\n-        String url = featuredModFile.getUrl();\n-        downloadService.downloadFile(new URL(url), targetPath, this::updateProgress);\n-        UpdaterUtil.extractMoviesIfPresent(targetPath, fafDataDirectory);\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+\n+      String existingTargetFileHash = null;\n+      if (Files.exists(targetPath)) {\n+        existingTargetFileHash = com.google.common.io.Files.hash(targetPath.toFile(), Hashing.md5()).toString();\n+        knownTargetHashes.put(targetPath.toString(), existingTargetFileHash);\n       }\n \n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        log.info(\"Downloading: {}\", cacheFilePath);\n+        downloadFeaturedModFile(featuredModFile, cacheFilePath);\n+      }\n \n       if (\"bin\".equals(featuredModFile.getGroup()) && initFileName.equalsIgnoreCase(featuredModFile.getName())) {\n         initFile = targetPath;\n       }\n     }\n \n+    for (FeaturedModFile featuredModFile : featuredModFiles) {\n+      targetPath = fafDataDirectory.resolve(featuredModFile.getGroup()).resolve(featuredModFile.getName());\n+      cacheFilePath = featuredModFileCacheService.getCachedFilePath(featuredModFile);\n+      String existingTargetFileHash = knownTargetHashes.get(targetPath.toString());\n+\n+      if (!featuredModFile.getMd5().equals(existingTargetFileHash)) {\n+        log.info(\"copying featured mod file: {} to {}\", cacheFilePath, targetPath);\n+        featuredModFileCacheService.copyFeaturedModFileFromCache(cacheFilePath, targetPath);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjUwMg==", "bodyText": "Apply TextFormatter setTextFormatter", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436306502", "createdAt": "2020-06-06T22:45:40Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/preferences/ui/SettingsController.java", "diffHunk": "@@ -142,6 +142,7 @@\n   private ChangeListener<Theme> selectedThemeChangeListener;\n   private ChangeListener<Theme> currentThemeChangeListener;\n   public ComboBox<NavigationItem> startTabChoiceBox;\n+  public TextField cacheLifeTimeTextField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjU3Mw==", "bodyText": "Files cached for(in days):", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r436306573", "createdAt": "2020-06-06T22:46:45Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -677,6 +677,7 @@ gamePath.select.fafDataSelected=The specified location is the Forged Alliance Fo\n gamePath.select.error=Something went wrong selecting game path\n userInfo.statistics.errorLoading=Could not load statistics\n settings.general.unitDatabase=Unit database\n+settings.general.cacheLifeTime=Cache downloaded files for (in days)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21270effe3102b5be809ad110ac9e52323ae73dc", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/21270effe3102b5be809ad110ac9e52323ae73dc", "committedDate": "2020-06-06T18:57:33Z", "message": "Logger fixing"}, "afterCommit": {"oid": "ae6095b1556167638a3b500fcd2e22240e13fd88", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ae6095b1556167638a3b500fcd2e22240e13fd88", "committedDate": "2020-09-17T23:01:45Z", "message": "Logger fixing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjYwODk4", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-501660898", "createdAt": "2020-10-04T21:27:19Z", "commit": {"oid": "6204b096441fe3b03a595c65ed3c7bc9354bf658"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "196687d0dfcf30ddbd09ca24067088d1ace00018", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/196687d0dfcf30ddbd09ca24067088d1ace00018", "committedDate": "2020-10-16T21:10:19Z", "message": "Download proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f15230c3916bbf4e008fb2158e31c91945bbb1d7", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f15230c3916bbf4e008fb2158e31c91945bbb1d7", "committedDate": "2020-10-16T21:10:19Z", "message": "Fixing logging, removing all files in directory, 1 euro fixes, to be continued"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64b3d7d1500b6cc449908a956f616ebe33c6bd3f", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/64b3d7d1500b6cc449908a956f616ebe33c6bd3f", "committedDate": "2020-10-16T21:10:19Z", "message": "Logger fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3a7f13099cb36b135f726ac7b2bca2f1121fc9", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ce3a7f13099cb36b135f726ac7b2bca2f1121fc9", "committedDate": "2020-10-16T21:10:19Z", "message": "hate windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984720373f275bc19110d63695dfe70d43918387", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/984720373f275bc19110d63695dfe70d43918387", "committedDate": "2020-10-16T21:10:19Z", "message": "hate windows 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "113b7450d597c4250bda6e0cdec3559e2cbad902", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/113b7450d597c4250bda6e0cdec3559e2cbad902", "committedDate": "2020-10-16T21:10:19Z", "message": "Usage of OffsetDateTime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24176e9cce1da616e16a3b5ab836a60e73f04b5e", "author": {"user": {"login": "norraxx", "name": "Kalinovsky Konstantin"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/24176e9cce1da616e16a3b5ab836a60e73f04b5e", "committedDate": "2020-10-16T21:10:19Z", "message": "#! WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200", "author": {"user": {"login": "Brutus5000", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c58ea8d686a070313ee124338eff1fe66e1c8200", "committedDate": "2020-10-16T21:10:19Z", "message": "Refactor FeatureMod downloading with cache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c2645aaf52bf81367b0974fd14fe822b438f3a5", "author": {"user": {"login": "Brutus5000", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/3c2645aaf52bf81367b0974fd14fe822b438f3a5", "committedDate": "2020-10-16T20:03:32Z", "message": "Refactor FeatureMod downloading with cache"}, "afterCommit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200", "author": {"user": {"login": "Brutus5000", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c58ea8d686a070313ee124338eff1fe66e1c8200", "committedDate": "2020-10-16T21:10:19Z", "message": "Refactor FeatureMod downloading with cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTc1MTg0", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-510975184", "createdAt": "2020-10-17T10:18:12Z", "commit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDoxODoxMlrOHjcZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDoyMDoyNlrOHjcalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzU4OQ==", "bodyText": ". seems to be a dangrous delimiter. Could there not be mod files that have a . in the name \ud83e\udd14", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506927589", "createdAt": "2020-10-17T10:18:12Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();\n+  }\n+\n+  public boolean isCached(FeaturedModFile featuredModFile) {\n+    return Files.exists(getCachedFilePath(featuredModFile));\n+  }\n+\n+  private String readHashFromFile(Path filePath) {\n+    // see buildCachedFileName\n+    return filePath.getFileName().toString().split(\"\\\\.\")[3];\n+  }\n+\n+  private String buildCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNzc2NA==", "bodyText": "If they are cached here changes to this variables are later not reflected. While this does not matter for cacheLifeTime it might be for the cache driectory(even that is also unlikely)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506927764", "createdAt": "2020-10-17T10:20:26Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTc2ODY0", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-510976864", "createdAt": "2020-10-17T10:51:36Z", "commit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDo1MTozNlrOHjcj-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDo1MTozNlrOHjcj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDE3MA==", "bodyText": "should be debug cause that gets really verbose", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930170", "createdAt": "2020-10-17T10:51:36Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();\n+  }\n+\n+  public boolean isCached(FeaturedModFile featuredModFile) {\n+    return Files.exists(getCachedFilePath(featuredModFile));\n+  }\n+\n+  private String readHashFromFile(Path filePath) {\n+    // see buildCachedFileName\n+    return filePath.getFileName().toString().split(\"\\\\.\")[3];\n+  }\n+\n+  private String buildCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory\n+        .resolve(featuredModFile.getGroup())\n+        .resolve(buildCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(FeaturedModFile featuredModFile, Path targetPath) throws IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(getCachedFilePath(featuredModFile), targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  @SneakyThrows\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    cleanUnusedFilesFromCache();\n+  }\n+\n+  private void cleanUnusedFilesFromCache() {\n+    try (Stream<Path> pathElements = Files.walk(this.cacheDirectory)) {\n+      pathElements\n+          .filter(Files::isRegularFile)\n+          .forEach(this::deleteCachedFileIfNeeded);\n+    } catch (IOException e) {\n+      log.error(\"Cleaning featured mod files cache failed\", e);\n+    }\n+  }\n+\n+  /**\n+   * Per directory cleanup old files.\n+   */\n+  private void deleteCachedFileIfNeeded(Path filePath) {\n+    try {\n+      ResourceLocks.acquireDiskLock();\n+\n+      FileTime lastAccessTime = Files.readAttributes(filePath, BasicFileAttributes.class).lastAccessTime();\n+      OffsetDateTime comparableLastAccessTime = OffsetDateTime.ofInstant(lastAccessTime.toInstant(), ZoneId.systemDefault());\n+      if (comparableLastAccessTime.plusDays(this.cacheLifeTimeInDays).isBefore(OffsetDateTime.now())) {\n+        log.info(\"Deleting cached file ''{}'' (last access:\", filePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTc2OTk2", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-510976996", "createdAt": "2020-10-17T10:54:25Z", "commit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDo1NDoyNVrOHjckyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDo1NDoyNVrOHjckyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDM3OQ==", "bodyText": "this is obsolete", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930379", "createdAt": "2020-10-17T10:54:25Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/io/FeaturedModFileCacheService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.faforever.client.io;\n+\n+import com.faforever.client.api.dto.FeaturedModFile;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.task.ResourceLocks;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.stream.Stream;\n+\n+\n+@Service\n+@Slf4j\n+public class FeaturedModFileCacheService implements InitializingBean {\n+  private final Path cacheDirectory;\n+  private final int cacheLifeTimeInDays;\n+\n+  public FeaturedModFileCacheService(PreferencesService preferencesService) {\n+    this.cacheDirectory = preferencesService.getCacheDirectory();\n+    this.cacheLifeTimeInDays = preferencesService.getPreferences().getCacheLifeTimeInDays();\n+  }\n+\n+  public boolean isCached(FeaturedModFile featuredModFile) {\n+    return Files.exists(getCachedFilePath(featuredModFile));\n+  }\n+\n+  private String readHashFromFile(Path filePath) {\n+    // see buildCachedFileName\n+    return filePath.getFileName().toString().split(\"\\\\.\")[3];\n+  }\n+\n+  private String buildCachedFileName(FeaturedModFile featuredModFile) {\n+    return String.format(\n+        \"%s.%s.%s.%s\",\n+        featuredModFile.getId(),\n+        featuredModFile.getVersion(),\n+        featuredModFile.getMd5(),\n+        featuredModFile.getName()\n+    );\n+  }\n+\n+  public Path getCachedFilePath(FeaturedModFile featuredModFile) {\n+    return cacheDirectory\n+        .resolve(featuredModFile.getGroup())\n+        .resolve(buildCachedFileName(featuredModFile));\n+  }\n+\n+  public void copyFeaturedModFileFromCache(FeaturedModFile featuredModFile, Path targetPath) throws IOException {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(getCachedFilePath(featuredModFile), targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  @SneakyThrows\n+  public void copyFeaturedModFileFromCache(Path cacheFilePath, Path targetPath) {\n+    Files.createDirectories(targetPath.getParent());\n+    ResourceLocks.acquireDiskLock();\n+\n+    try {\n+      Files.copy(cacheFilePath, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    } finally {\n+      ResourceLocks.freeDiskLock();\n+    }\n+  }\n+\n+  /**\n+   * Cleanup method, on service start, we'll get rid of old files.\n+   */\n+  @Override\n+  public void afterPropertiesSet() {\n+    cleanUnusedFilesFromCache();\n+  }\n+\n+  private void cleanUnusedFilesFromCache() {\n+    try (Stream<Path> pathElements = Files.walk(this.cacheDirectory)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTc3Mjcy", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-510977272", "createdAt": "2020-10-17T10:59:49Z", "commit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDo1OTo0OVrOHjcmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMDo1OTo0OVrOHjcmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMDgyNg==", "bodyText": "should be used by cache service but is not", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#discussion_r506930826", "createdAt": "2020-10-17T10:59:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/preferences/PreferencesService.java", "diffHunk": "@@ -344,6 +347,10 @@ public Path getCacheDirectory() {\n     return CACHE_DIRECTORY;\n   }\n \n+  public Path getFeaturedModCachePath() {\n+    return FEATURED_MOD_CACHE_PATH;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58ea8d686a070313ee124338eff1fe66e1c8200"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94193129c65dc6b878c96188b24cb6973bf7b8f5", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/94193129c65dc6b878c96188b24cb6973bf7b8f5", "committedDate": "2020-10-17T11:05:34Z", "message": "Alex version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1a3b20364029548cd660b4763bb6688a2514764", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/a1a3b20364029548cd660b4763bb6688a2514764", "committedDate": "2020-10-17T15:37:35Z", "message": "Tests and settings"}, "afterCommit": {"oid": "a12588363eb03e8db57ff22ff9ca3f4899f1b406", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/a12588363eb03e8db57ff22ff9ca3f4899f1b406", "committedDate": "2020-10-17T15:41:44Z", "message": "Tests and settings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTk0NTcy", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-510994572", "createdAt": "2020-10-17T15:44:40Z", "commit": {"oid": "a12588363eb03e8db57ff22ff9ca3f4899f1b406"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a12588363eb03e8db57ff22ff9ca3f4899f1b406", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/a12588363eb03e8db57ff22ff9ca3f4899f1b406", "committedDate": "2020-10-17T15:41:44Z", "message": "Tests and settings"}, "afterCommit": {"oid": "2c45eeffc3885ed37646f453461e11dea20a9e80", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/2c45eeffc3885ed37646f453461e11dea20a9e80", "committedDate": "2020-10-17T17:34:21Z", "message": "Tests and settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "committedDate": "2020-10-17T17:55:58Z", "message": "Tests and settings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c45eeffc3885ed37646f453461e11dea20a9e80", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/2c45eeffc3885ed37646f453461e11dea20a9e80", "committedDate": "2020-10-17T17:34:21Z", "message": "Tests and settings"}, "afterCommit": {"oid": "476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "author": {"user": {"login": "1-alex98", "name": "Alexander von Trostorff"}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/476c9b4bf9b035b7e86802fe81a9e3fa4dee5533", "committedDate": "2020-10-17T17:55:58Z", "message": "Tests and settings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDA1MTg5", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-511005189", "createdAt": "2020-10-17T18:14:45Z", "commit": {"oid": "476c9b4bf9b035b7e86802fe81a9e3fa4dee5533"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDA1Mjkx", "url": "https://github.com/FAForever/downlords-faf-client/pull/1739#pullrequestreview-511005291", "createdAt": "2020-10-17T18:16:36Z", "commit": {"oid": "2c45eeffc3885ed37646f453461e11dea20a9e80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3184, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}