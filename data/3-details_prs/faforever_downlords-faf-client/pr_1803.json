{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMzQxOTQy", "number": 1803, "title": "Feature/#1781 map gen options ui", "bodyText": "Connected to FAForever/Neroxis-Map-Generator#37. Fixes #1781, #1782, #1694. This pull request creates an interface and backend for map generation with options. A new dialog window is created when the generate map button is pressed for inputing either a map name to recreate or options to generate a new map with.\nOn the back end generated map names are generated as neroxis_map_generator_(version)(seed)(options) and passed to the generator jar file. seed and options are base64 encoded strings and encoding is done in the client prior to sending. It should be noted that these map names will not be parsable by older java clients.\nThe map generator service map name validation was changed to recognize both the old generated names as well as new and hopefully has enough flexibility to absorb future changes.", "createdAt": "2020-06-26T02:04:44Z", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803", "merged": true, "mergeCommit": {"oid": "f47737eccb45180c54d5d346f156d23421d63851"}, "closed": true, "closedAt": "2020-07-19T15:43:05Z", "author": {"login": "Sheikah45"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvH2OOgFqTQzODUxMTcyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2PuxDgH2gAyNDQwMzQxOTQyOmIwYjMxYTcyZTQ5YTdlMDk3MGY2MzkwMDFiYzcyOGYzNzgyZmY2NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTExNzI1", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-438511725", "createdAt": "2020-06-26T18:32:40Z", "commit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozMjo0MFrOGpqzhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo0ODo1N1rOGprP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ==", "bodyText": "I would remove \"minSupportedMajorVersion\" (we have to have basic support all old versions forever to keep replays playable and even if we did we could build that in later) and all the corresponding checks.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446346119", "createdAt": "2020-06-26T18:32:40Z", "author": {"login": "Katharsas"}, "path": "src/main/java/com/faforever/client/config/ClientProperties.java", "diffHunk": "@@ -150,6 +150,9 @@\n     private String downloadUrlFormat;\n     private String repoAndOwnerName;\n     private String queryLatestVersionUrl;\n+    private String queryVersionsUrl;\n+    private int maxSupportedMajorVersion;\n+    private int minSupportedMajorVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0ODM3MQ==", "bodyText": "Doesnt this imply that this code needs to be adjusted whenever the major version changes? Why not check for 0 and then do the old way, so we dont need to adjust this on version 2,3 etc. ?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446348371", "createdAt": "2020-06-26T18:37:39Z", "author": {"login": "Katharsas"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n+      if (majorVersion.equals(\"1\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDc0MA==", "bodyText": "Are you sure this check is not already made by the game and replay services? It should be imo. Have you tried removing this and removing the installation setting and the trying to play?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446350740", "createdAt": "2020-06-26T18:43:04Z", "author": {"login": "Katharsas"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n+      preferenceUpdateListener = preferences -> {\n+        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDkwNQ==", "bodyText": "private", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446350905", "createdAt": "2020-06-26T18:43:29Z", "author": {"login": "Katharsas"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n+      preferenceUpdateListener = preferences -> {\n+        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n+          initialized = true;\n+\n+          Platform.runLater(this::init);\n+        }\n+      };\n+      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n+    } else {\n+      init();\n+    }\n+  }\n+\n+  public void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzM2MQ==", "bodyText": "space around \">\", same below", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446353361", "createdAt": "2020-06-26T18:48:57Z", "author": {"login": "Katharsas"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -127,17 +144,53 @@ protected String queryNewestVersion() {\n     return mainObject.get(\"tag_name\").getAsString();\n   }\n \n+  @VisibleForTesting\n+  public String queryMaxSupportedVersion() {\n+    String version = queryNewestVersion();\n+    String majorVersion = version.split(\"\\\\.\")[0];\n+    if (Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMaxSupportedMajorVersion() ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njg0MjY5", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-438684269", "createdAt": "2020-06-27T08:59:02Z", "commit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwODo1OTowM1rOGp0aeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwOTowNjozOVrOGp0cwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzU0NA==", "bodyText": "Well I think some time in the future old replays will break. I personally thnk that is ok even if it should be avoided", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503544", "createdAt": "2020-06-27T08:59:03Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/config/ClientProperties.java", "diffHunk": "@@ -150,6 +150,9 @@\n     private String downloadUrlFormat;\n     private String repoAndOwnerName;\n     private String queryLatestVersionUrl;\n+    private String queryVersionsUrl;\n+    private int maxSupportedMajorVersion;\n+    private int minSupportedMajorVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ=="}, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzcxOQ==", "bodyText": "I think we have a class that can parse semantic versions... If we do, which I think use that", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503719", "createdAt": "2020-06-27T09:00:48Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzgwOA==", "bodyText": "We are trying to get away from JFX since a few weeks. Can u use the notification and a Immediate notification with custom UI. @micheljung what should he do?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503808", "createdAt": "2020-06-27T09:02:21Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n+      if (majorVersion.equals(\"1\")) {\n+        GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n+\n+        Pane root = generateMapController.getRoot();\n+        generateMapController.setCreateGameController(this);\n+        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng==", "bodyText": "Use @slf4j annotation instead", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503846", "createdAt": "2020-06-27T09:02:55Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg4NA==", "bodyText": "Use Button and TextField. At least in the Controller", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503884", "createdAt": "2020-06-27T09:03:20Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwNDEyOQ==", "bodyText": "Never change other language files", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446504129", "createdAt": "2020-06-27T09:06:39Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages_cs.properties", "diffHunk": "@@ -632,7 +632,7 @@ view.showSidePane=V\u00edce detail\u016f\n view.hideSidePane=M\u00e9n\u011b detail\u016f\n menu.revealReplayFolder=Otev\u0159\u00edt slo\u017eku se z\u00e1znamy\n menu.revealGamePrefsFile=Otev\u0159\u00edt slo\u017eku s game.prefs souborem\n-game.create.generatedMap=Vytvo\u0159it mapu\n+game.generate=Vytvo\u0159it mapu", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4496f5f026ff3e89126867a698063d29a581f856"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a4b8aa3621c1464a8ac6d01922bcde7c2b66205", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/8a4b8aa3621c1464a8ac6d01922bcde7c2b66205", "committedDate": "2020-06-27T16:40:48Z", "message": "Removed initialized check in MapController"}, "afterCommit": {"oid": "3944e033d992d0f59cf00fcf0d25162457230414", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/3944e033d992d0f59cf00fcf0d25162457230414", "committedDate": "2020-06-27T16:45:38Z", "message": "Add promptText in map Name field"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e45a5a8fde3392459507d8f5a5a18f7363067eb1", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e45a5a8fde3392459507d8f5a5a18f7363067eb1", "committedDate": "2020-06-27T22:58:58Z", "message": "Change seed to String in MapGeneratorServiceTest"}, "afterCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/73693dce16a21a72c922930d6928c0cae6087a5c", "committedDate": "2020-06-28T12:47:54Z", "message": "Remove unused default values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Nzc5NDgx", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-438779481", "createdAt": "2020-06-28T13:14:07Z", "commit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMzoxNDowN1rOGp9VIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMzoyMTozOVrOGp9YTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ==", "bodyText": "unused, try turning on the option when commiting that removes unused imports", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446649635", "createdAt": "2020-06-28T13:14:07Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -26,6 +26,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXDialog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTk1MA==", "bodyText": "remove", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446649950", "createdAt": "2020-06-28T13:16:45Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDExOQ==", "bodyText": "ident", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650119", "createdAt": "2020-06-28T13:18:25Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDE1NQ==", "bodyText": "Byte.MAX_VALUE that exists right?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650155", "createdAt": "2020-06-28T13:18:50Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw==", "bodyText": "indent", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650237", "createdAt": "2020-06-28T13:19:30Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n+        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDI0Nw==", "bodyText": "ctrl+alt+L", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650247", "createdAt": "2020-06-28T13:19:45Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n+        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw=="}, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDM4MA==", "bodyText": "Make them call each other and avoid code duplication", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650380", "createdAt": "2020-06-28T13:20:54Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,13 +119,40 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion,seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDQ0NQ==", "bodyText": "Make sue this is only ever called via a Spring Proxy", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650445", "createdAt": "2020-06-28T13:21:39Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,13 +119,40 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion,seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODA3MDc1", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-438807075", "createdAt": "2020-06-28T19:31:03Z", "commit": {"oid": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMTowM1rOGp_uXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTo0MDoxN1rOGp_x7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg2MQ==", "bodyText": "The hardcoded \"1\" needs at least a comment what is happening here.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446688861", "createdAt": "2020-06-28T19:31:03Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,39 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg4Mg==", "bodyText": "linebreak after .findAny()", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446688882", "createdAt": "2020-06-28T19:31:20Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,39 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTI5NQ==", "bodyText": "This is never used?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689295", "createdAt": "2020-06-28T19:35:33Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,257 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.application.Platform;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ==", "bodyText": "Is there a reason not to use jackson? You can configure a pojo to ignore unknown fields.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689659", "createdAt": "2020-06-28T19:39:16Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -124,26 +152,62 @@ protected String queryNewestVersion() {\n     JsonElement jsonElement = new JsonParser().parse(response.getBody());\n     JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+  }\n+\n+  @VisibleForTesting\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n+    headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n+    HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+\n+    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n+    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n+    for (JsonElement element : jsonElement.getAsJsonArray()) {\n+      JsonObject mainObject = element.getAsJsonObject();\n+      version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTc3NQ==", "bodyText": "I'm not entirely sure what happens if you use the cache twice for the same type as the method has no arguments?!", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689775", "createdAt": "2020-06-28T19:40:17Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -124,26 +152,62 @@ protected String queryNewestVersion() {\n     JsonElement jsonElement = new JsonParser().parse(response.getBody());\n     JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+  }\n+\n+  @VisibleForTesting\n+  @Cacheable(CacheNames.MAP_GENERATOR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjk1MjI0", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-442695224", "createdAt": "2020-07-05T17:50:20Z", "commit": {"oid": "ca413c506cf54beac9dc92a45c68aa5a199200e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNzo1MDoyMFrOGtD2gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNzo1MDoyMFrOGtD2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA==", "bodyText": "Could have used Bindings here :D", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902208", "createdAt": "2020-07-05T17:50:20Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterRandomProperty(newValue);\n+      waterBox.setVisible(!newValue);\n+    }));\n+    waterBox.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauBox.setVisible(!newValue);\n+    }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca413c506cf54beac9dc92a45c68aa5a199200e3"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjk1Mzc1", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-442695375", "createdAt": "2020-07-05T17:52:51Z", "commit": {"oid": "ca413c506cf54beac9dc92a45c68aa5a199200e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNzo1Mjo1MVrOGtD3iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNzo1Mjo1MVrOGtD3iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg==", "bodyText": "I doubt that is is ever called. You probably need to do this in .excpetionally() on the Completable Future. https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/completion-stages-exception-handling.html", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902472", "createdAt": "2020-07-05T17:52:51Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterRandomProperty(newValue);\n+      waterBox.setVisible(!newValue);\n+    }));\n+    waterBox.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauBox.setVisible(!newValue);\n+    }));\n+    plateauBox.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainBox.setVisible(!newValue);\n+    }));\n+    mountainBox.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setRampRandomProperty(newValue);\n+      rampBox.setVisible(!newValue);\n+    }));\n+    rampBox.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> Platform.runLater(() -> {\n+          createGameController.initMapSelection();\n+          createGameController.mapListView.getItems().stream()\n+              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+              .findAny().ifPresent(mapBean -> {\n+            createGameController.mapListView.getSelectionModel().select(mapBean);\n+            createGameController.mapListView.scrollTo(mapBean);\n+            createGameController.setSelectedMap(mapBean);\n+          });\n+        }));\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> Platform.runLater(() -> {\n+          createGameController.initMapSelection();\n+          createGameController.mapListView.getItems().stream()\n+              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+              .findAny().ifPresent(mapBean -> {\n+            createGameController.mapListView.getSelectionModel().select(mapBean);\n+            createGameController.mapListView.scrollTo(mapBean);\n+            createGameController.setSelectedMap(mapBean);\n+          });\n+        }));\n+      }\n+    } catch (IllegalArgumentException e) {\n+      String msg = e.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooNewVersion\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+      if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooOldVersion\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+    } catch (Exception e) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.error(\"Map generation failed\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca413c506cf54beac9dc92a45c68aa5a199200e3"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODUyNzky", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-442852792", "createdAt": "2020-07-06T07:58:58Z", "commit": {"oid": "50bc6d15cabc20ac6a502d664221efe7e72b2f84"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1ODo1OFrOGtMwVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODowMTozMFrOGtM1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw==", "bodyText": "If this return null then there is gonna be a nullpointer Exception following in the thenAccept part right XD Also createGameController.initMapSelection(); is called", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048087", "createdAt": "2020-07-06T07:58:58Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bc6d15cabc20ac6a502d664221efe7e72b2f84"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODMwMg==", "bodyText": "Maybe not just maybe see how it behaves.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048302", "createdAt": "2020-07-06T07:59:25Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}, "originalCommit": {"oid": "50bc6d15cabc20ac6a502d664221efe7e72b2f84"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ==", "bodyText": "Should they not all be warn", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048675", "createdAt": "2020-07-06T08:00:08Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            })\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }));\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            })\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }));\n+      }\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof IllegalArgumentException) {\n+      String msg = cause.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+        log.error(\"Map generation failed\", cause);\n+      } else if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+        log.error(\"Map generation failed\", cause);\n+      } else {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.error(\"Map generation failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bc6d15cabc20ac6a502d664221efe7e72b2f84"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTQzNA==", "bodyText": "I think there is a static Method on the CompletableFuture class that does exactly that", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450049434", "createdAt": "2020-07-06T08:01:30Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,43 +115,87 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<List<GithubGeneratorRelease>>(){});\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.supplyAsync(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bc6d15cabc20ac6a502d664221efe7e72b2f84"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTI4NTU4", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-443928558", "createdAt": "2020-07-07T14:09:37Z", "commit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjY3MjI0", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-446267224", "createdAt": "2020-07-10T09:42:24Z", "commit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo0MjoyNFrOGvw_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMToyOVrOGvxl4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczODk5Mw==", "bodyText": "This code doesn't seem properly formatted; please use/enable IntelliJ's auto formatting", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452738993", "createdAt": "2020-07-10T09:42:24Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,41 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+              mapListView.getSelectionModel().select(mapBean);\n+              mapListView.scrollTo(mapBean);\n+              setSelectedMap(mapBean);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczOTczNQ==", "bodyText": "This is redundant; inline init()", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452739735", "createdAt": "2020-07-10T09:43:51Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDI1OQ==", "bodyText": "Use I18n and message keys.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452740259", "createdAt": "2020-07-10T09:44:52Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDY2Mg==", "bodyText": "Conversion from String to a number is most likely never used; just throw an UnsupportedOperationException", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452740662", "createdAt": "2020-07-10T09:45:36Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mjg5NA==", "bodyText": "Reduce code duplication", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452742894", "createdAt": "2020-07-10T09:49:49Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk0Nw==", "bodyText": "Relying on the exception message is quite fragile; it's not part of an API and may change at any time, staying unnoticed. Instead, the map generator should either throw concrete exceptions or its exception should contain some sort of reason code.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452743947", "createdAt": "2020-07-10T09:51:51Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      }\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof IllegalArgumentException) {\n+      String msg = cause.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+        log.warn(\"Map generation failed\", cause);\n+      } else if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+        log.warn(\"Map generation failed\", cause);\n+      } else {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+        log.warn(\"Map generation failed\", e);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDQyMA==", "bodyText": "Don't break the Java naming convention\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String tag_name;\n          \n          \n            \n              @JsonProperty(\"tag_name\")\n          \n          \n            \n              private String tagName;", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452744420", "createdAt": "2020-07-10T09:52:55Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.faforever.client.map.generator;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.Data;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@Data\n+public class GithubGeneratorRelease {\n+  private String tag_name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NTIxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new RuntimeException(\"No Valid Generator Version Found\");\n          \n          \n            \n                throw new RuntimeException(\"No valid generator version found\");", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452745218", "createdAt": "2020-07-10T09:54:32Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                  errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n          \n          \n            \n                  return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"Map name is not a generated map\"));", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746252", "createdAt": "2020-07-10T09:56:32Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjUzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                  errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n          \n          \n            \n                  return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"New version not supported\"));", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746533", "createdAt": "2020-07-10T09:57:10Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjcxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                   errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n          \n          \n            \n                   return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"Old Version not supported\"));", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746718", "createdAt": "2020-07-10T09:57:31Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzE4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                    errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n          \n          \n            \n                    return errorFuture;\n          \n          \n            \n                    return CompletableFuture.failedFuture(new RuntimeException(\"Unsupported generator version: \" + version));", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747189", "createdAt": "2020-07-10T09:58:28Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzQxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                catch (NumberFormatException nfe) {\n          \n          \n            \n                } catch (NumberFormatException nfe) {", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747410", "createdAt": "2020-07-10T09:59:00Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n       downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n     }\n \n-    String mapFilename = String.format(GENERATED_MAP_NAME, version, seed);\n+    String[] seedParts = seedAndOptions.split(\"_\");\n+    String seedString = seedParts[0];\n+\n+    String mapFilename;\n+    String seed;\n+\n+    try {\n+      seed = Long.toString(Long.parseLong(seedString));\n+    }\n+    catch (NumberFormatException nfe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                else {\n          \n          \n            \n                } else {\n          \n      \n    \n    \n  \n\nPlease make sure that auto-formatting is enabled", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747666", "createdAt": "2020-07-10T09:59:29Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n       downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n     }\n \n-    String mapFilename = String.format(GENERATED_MAP_NAME, version, seed);\n+    String[] seedParts = seedAndOptions.split(\"_\");\n+    String seedString = seedParts[0];\n+\n+    String mapFilename;\n+    String seed;\n+\n+    try {\n+      seed = Long.toString(Long.parseLong(seedString));\n+    }\n+    catch (NumberFormatException nfe) {\n+      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n+      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n+      seed = Long.toString(seedWrapper.getLong());\n+    }\n+\n+    // Check if major version 0 which requires numeric seed\n+    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/','^');\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODc2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            mapGenerator.tooNewVersion=This client does not support this version of map generator. Please update client to use this version.\n          \n          \n            \n            mapGenerator.tooNewVersion=This client does not support this version of the map generator. Please update the client to use this version.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452748768", "createdAt": "2020-07-10T10:01:29Z", "author": {"login": "micheljung"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -733,6 +744,8 @@ replay.couldNotOpen=Replay with id ''{0}'' , could not be opened.\n error.game.notTerminatedCorrectly=The game did not terminate correctly and has still certain files open. Some files from the installed game could not be copied over to FAF but unless you recently modified game files in the installed version you probably do not care. We are still starting the game for you.\n map.id=#{0}\n mapGenerator.generationFailed=There was an error during map generation\n+mapGenerator.tooNewVersion=This client does not support this version of map generator. Please update client to use this version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ad111030f097fefa0c5b5f827bbb86eb42660c52", "committedDate": "2020-07-07T11:04:37Z", "message": "Use static method completeExceptionally for generator errors."}, "afterCommit": {"oid": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "committedDate": "2020-07-10T11:43:06Z", "message": "Add explicit error types for map generator service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "committedDate": "2020-07-10T11:43:06Z", "message": "Add explicit error types for map generator service"}, "afterCommit": {"oid": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "committedDate": "2020-07-10T11:49:53Z", "message": "Update existing unit tests with new generator parsing\n\nAdd additional Unit Tests for Map Gen Service\n\nAdd Unit Tests for GenerateMapController\n\nAdd Unit Tests for GenerateMapController\n\nCorrect formatting\n\nRemove unused variables and format issues\n\nRemove unused queryNewestVersion Function\n\nAdd line break\n\nAdd comments on Major Version check\n\nFix capitalization in comment\n\nUse fixed template to return releases list\n\nAdd unit tests for generateMap methods\n\nAdd comment on major version check\n\nRemove redundant character in Generated Map Pattern\n\nStrengthen Map Generator Unit Tests\n\nChange Map Generation UI Layout\n\nAdd filename safe B64 character replacement\n\nUpdate Generator UI Unit Tests\n\nAdd File Safe Base64 Character Change\n\nChange exception handling to use .exceptionally on Future\n\nUse bind for Map Generator UI properties\n\nUse log.warn over log.error\n\nUse static method completeExceptionally for generator errors.\n\nChange code formatting\n\nAdd explicit error types for map generator service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Nzg3ODYx", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-446787861", "createdAt": "2020-07-11T08:21:00Z", "commit": {"oid": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODoyMTowMFrOGwLY5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODoyMTowMFrOGwLY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTQzMQ==", "bodyText": "If you do this to be able to test this. Make it package private instead and annotate with @VisibleForTesting", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r453171431", "createdAt": "2020-07-11T08:21:00Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -259,7 +260,7 @@ private void initMapSelection() {\n     mapListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> Platform.runLater(() -> setSelectedMap(newValue)));\n   }\n \n-  private void setSelectedMap(MapBean newValue) {\n+  protected void setSelectedMap(MapBean newValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Nzg3OTk2", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-446787996", "createdAt": "2020-07-11T08:23:53Z", "commit": {"oid": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a781932bd1b8476fe20045bf67cf5e4d9393bed", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/1a781932bd1b8476fe20045bf67cf5e4d9393bed", "committedDate": "2020-07-15T01:38:06Z", "message": "Add map size spinner"}, "afterCommit": {"oid": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/42ed82984dd0325d3839bf7dfa9126e55b7c172c", "committedDate": "2020-07-15T02:59:02Z", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/42ed82984dd0325d3839bf7dfa9126e55b7c172c", "committedDate": "2020-07-15T02:59:02Z", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options"}, "afterCommit": {"oid": "5e3e526df2481369493481e684879926b9c96fb2", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/5e3e526df2481369493481e684879926b9c96fb2", "committedDate": "2020-07-16T04:45:12Z", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nMake Spinners uniform size\n\nRemove Map Size limits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTU2MTY5", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#pullrequestreview-450956169", "createdAt": "2020-07-17T21:03:26Z", "commit": {"oid": "270674cc7bddeedb0beef6ab68fe51669cdf1680"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "committedDate": "2020-07-17T23:03:15Z", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nDisable options when map name given"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f92da99f79dc95e0b13feeef540d70251e103708", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f92da99f79dc95e0b13feeef540d70251e103708", "committedDate": "2020-07-17T22:53:26Z", "message": "Disable options when map name given"}, "afterCommit": {"oid": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "committedDate": "2020-07-17T23:03:15Z", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nDisable options when map name given"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b31a72e49a7e0970f639001bc728f3782ff648", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b0b31a72e49a7e0970f639001bc728f3782ff648", "committedDate": "2020-07-18T21:57:39Z", "message": "Merge branch 'develop' into feature/#1781-map-gen-options-UI"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}