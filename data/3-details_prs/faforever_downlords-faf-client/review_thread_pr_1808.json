{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDI1MTYy", "number": 1808, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyOTo1OVrOEK1u1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo1NjoyMlrOENXOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAxNTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyOTo1OVrOGsHDnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyOTo1OVrOGsHDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNjE0MQ==", "bodyText": "Either it needs a platform run later in both lines or it needs none", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r448906141", "createdAt": "2020-07-02T10:29:59Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "diffHunk": "@@ -226,12 +235,39 @@ private void enterResultState() {\n     searchResultGroup.setVisible(false);\n     loadingPane.setVisible(false);\n     backButton.setVisible(false);\n-    moreButton.setVisible(false);\n+    pagination.setVisible(false);\n   }\n \n   private void onSearch(SearchConfig searchConfig) {\n+    replaySearchType = ReplaySearchType.SEARCH;\n+    //FIXME pagination setcount geh\u00f6rt hier nicht hin\n+    Platform.runLater(() -> pagination.setPageCount(0));\n+    if (pagination.getCurrentPageIndex() != 0) {\n+      pagination.setCurrentPageIndex(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1aa8d5507ada37f2afa3c261975429e5a422d16"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAyMjk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMjoyMlrOGsHILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMjoyMlrOGsHILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNzMwOQ==", "bodyText": "Code duplication", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r448907309", "createdAt": "2020-07-02T10:32:22Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "diffHunk": "@@ -264,13 +300,21 @@ private void loadPreselectedReplays() {\n   }\n \n   public void onMoreNewestButtonClicked() {\n-    enterSearchingState();\n-    displayReplaysFromSupplier(() -> replayService.getNewestReplays(TOP_MORE_ELEMENT_COUNT, currentPage++));\n+    replaySearchType = ReplaySearchType.NEWEST;\n+    if (pagination.getCurrentPageIndex() != 0) {\n+      pagination.setCurrentPageIndex(0);\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1aa8d5507ada37f2afa3c261975429e5a422d16"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAyNjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/vault/search/SearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMzoxNlrOGsHJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMzoxNlrOGsHJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNzc1NA==", "bodyText": "final and END_TIME_QUERY", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r448907754", "createdAt": "2020-07-02T10:33:16Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/vault/search/SearchController.java", "diffHunk": "@@ -66,6 +70,8 @@\n    * Type of the searchable entity.\n    */\n   private Class<?> rootType;\n+  private static String endTimeQueryStart = \"endTime=ge=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1aa8d5507ada37f2afa3c261975429e5a422d16"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAzNDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/vault/search/SearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNTo0OVrOGsHPJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNTo0OVrOGsHPJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTA5NA==", "bodyText": "String.format", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r448909094", "createdAt": "2020-07-02T10:35:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/vault/search/SearchController.java", "diffHunk": "@@ -223,7 +243,16 @@ private String buildQuery(SpecificationController initialSpecification, List<Log\n       }\n       condition = currentCondition;\n     }\n-    return (String) condition.get().query(new RSQLVisitor());\n+    String queryWithoutLastYear = (String) condition.get().query(new RSQLVisitor());\n+    return queryWithoutLastYear + \";\" + lastYearQuery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1aa8d5507ada37f2afa3c261975429e5a422d16"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAzNzU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/vault/search/SearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNjo0OFrOGsHRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNjo0OFrOGsHRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTU4MA==", "bodyText": "OffsetDatetime LcoalDtaeTinme Instant", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r448909580", "createdAt": "2020-07-02T10:36:48Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/vault/search/SearchController.java", "diffHunk": "@@ -223,7 +243,16 @@ private String buildQuery(SpecificationController initialSpecification, List<Log\n       }\n       condition = currentCondition;\n     }\n-    return (String) condition.get().query(new RSQLVisitor());\n+    String queryWithoutLastYear = (String) condition.get().query(new RSQLVisitor());\n+    return queryWithoutLastYear + \";\" + lastYearQuery;\n+  }\n+\n+  private String generateOnlyLastYearQuery() {\n+    Calendar calendar = Calendar.getInstance();\n+    calendar.add(Calendar.YEAR, -1);\n+    Date date = calendar.getTime();\n+    SimpleDateFormat dateFormater = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1aa8d5507ada37f2afa3c261975429e5a422d16"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc5NTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/JsonApiMessageConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0OTozNFrOGty9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0OTozNFrOGty9tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDEwMg==", "bodyText": "did i not push this to develop... in that case you should merge develop in or rebase", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r450674102", "createdAt": "2020-07-07T07:49:34Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/api/JsonApiMessageConverter.java", "diffHunk": "@@ -28,17 +28,19 @@ public JsonApiMessageConverter(ResourceConverter resourceConverter) {\n   @Override\n   protected boolean supports(Class<?> clazz) {\n     return Collection.class.isAssignableFrom(clazz)\n-        || ReflectionUtils.getTypeName(clazz) != null;\n+        || ReflectionUtils.getTypeName(clazz) != null\n+        || clazz.equals(JSONAPIDocument.class);\n   }\n \n   @Override\n   @SneakyThrows\n-  @SuppressWarnings(\"unchecked\")\n   protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage) {\n     try (InputStream inputStream = inputMessage.getBody()) {\n       JSONAPIDocument<?> document;\n       if (Iterable.class.isAssignableFrom(clazz)) {\n         document = resourceConverter.readDocumentCollection(inputStream, Object.class);\n+      } else if (clazz.equals(JSONAPIDocument.class)) {\n+        return resourceConverter.readDocumentCollection(inputStream, Object.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927222a7c1379d885cdc77b44ecf17e8066d791a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjY1MzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODozMDo1NFrOGvutfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODozMDo1NFrOGvutfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwMTU2Nw==", "bodyText": "WithMetadata", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r452701567", "createdAt": "2020-07-10T08:30:54Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -311,33 +308,37 @@ public ModVersion getModVersion(String uid) {\n   }\n \n   @Override\n-  public List<Game> getNewestReplays(int count, int page) {\n-    return getPage(\"/data/game\", count, page, ImmutableMap.of(\n+  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplays(int count, int page) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c3cb71bc8da70bee234c834cfdb1dc8c85fac3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjY1MzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODozMTowNFrOGvut0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODozMTowNFrOGvut0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwMTY0OA==", "bodyText": "WithMetadata", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r452701648", "createdAt": "2020-07-10T08:31:04Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -311,33 +308,37 @@ public ModVersion getModVersion(String uid) {\n   }\n \n   @Override\n-  public List<Game> getNewestReplays(int count, int page) {\n-    return getPage(\"/data/game\", count, page, ImmutableMap.of(\n+  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplays(int count, int page) {\n+    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(\"/data/game\", count, page, ImmutableMap.of(\n         \"sort\", \"-endTime\",\n         \"include\", REPLAY_INCLUDES,\n         \"filter\", \"endTime=isnull=false\"\n     ));\n+    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public List<Game> getHighestRatedReplays(int count, int page) {\n-    return this.<GameReviewsSummary>getPage(\"/data/gameReviewsSummary\", count, page, ImmutableMap.of(\n+  public Tuple<List<Game>, java.util.Map<String, ?>> getHighestRatedReplays(int count, int page) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c3cb71bc8da70bee234c834cfdb1dc8c85fac3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjY4MjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo0MDowMlrOGvu_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo0MDowMlrOGvu_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcwNjE2Nw==", "bodyText": "These changes dont belong here", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r452706167", "createdAt": "2020-07-10T08:40:02Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -231,6 +237,10 @@ static Integer parseSupComVersion(byte[] rawReplayBytes) {\n   static String parseMapName(byte[] rawReplayBytes) {\n     int mapDelimiterIndex = Bytes.indexOf(rawReplayBytes, new byte[]{0x00, 0x0D, 0x0A, 0x1A});\n     String mapPath = new String(rawReplayBytes, MAP_NAME_OFFSET, mapDelimiterIndex - MAP_NAME_OFFSET, US_ASCII);\n+    Matcher matcher = invalidCharacters.matcher(mapPath);\n+    if (matcher.find()) {\n+      throw new IllegalArgumentException(\"Map Name Contains Invalid Characters\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c3cb71bc8da70bee234c834cfdb1dc8c85fac3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ2MzYyOnYy", "diffSide": "LEFT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo1MzowMFrOGwAPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNjowNzoyOVrOGwVWGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4ODcxNQ==", "bodyText": "Is that really not needed? Are u sure? Is is to suppress warning about missing type safety.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r452988715", "createdAt": "2020-07-10T17:53:00Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -192,7 +189,6 @@ public AchievementDefinition getAchievementDefinition(String achievementId) {\n   @Override\n   @Cacheable(CacheNames.LADDER_1V1_LEADERBOARD)\n   @SneakyThrows\n-  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e929ba01355c1bb6c2af3d321a9c3418f83ddd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzNDU1NA==", "bodyText": "It is marked as redundant by IntelliJ", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r453334554", "createdAt": "2020-07-12T16:07:29Z", "author": {"login": "IAmAlife"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -192,7 +189,6 @@ public AchievementDefinition getAchievementDefinition(String achievementId) {\n   @Override\n   @Cacheable(CacheNames.LADDER_1V1_LEADERBOARD)\n   @SneakyThrows\n-  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4ODcxNQ=="}, "originalCommit": {"oid": "26e929ba01355c1bb6c2af3d321a9c3418f83ddd"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ3MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo1NTozMlrOGwAUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyNjowNFrOGzgNlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4OTk5MA==", "bodyText": "How about u get the total page count in the replay service already u dont need the complete metadata anyway right?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r452989990", "createdAt": "2020-07-10T17:55:32Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "diffHunk": "@@ -226,36 +244,66 @@ private void enterResultState() {\n     searchResultGroup.setVisible(false);\n     loadingPane.setVisible(false);\n     backButton.setVisible(false);\n-    moreButton.setVisible(false);\n+    pagination.setVisible(false);\n+    firstPageButton.setVisible(false);\n+    lastPageButton.setVisible(false);\n   }\n \n   private void onSearch(SearchConfig searchConfig) {\n+    replaySearchType = ReplaySearchType.SEARCH;\n+    onFirstPageOpened(searchConfig);\n+  }\n+\n+  private void onPageChange(SearchConfig searchConfig, int page, boolean firstLoad) {\n     enterSearchingState();\n-    displayReplaysFromSupplier(() -> replayService.findByQuery(searchConfig.getSearchQuery(), MAX_SEARCH_RESULTS, currentPage++, searchConfig.getSortConfig()));\n+    switch (replaySearchType) {\n+      case SEARCH:\n+        displayReplaysFromSupplier(() -> replayService.findByQueryWithMeta(searchConfig.getSearchQuery(), PAGE_SIZE, page, searchConfig.getSortConfig()), firstLoad);\n+        break;\n+      case OWN:\n+        displayReplaysFromSupplier(() -> replayService.getOwnReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case NEWEST:\n+        displayReplaysFromSupplier(() -> replayService.getNewestReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case HIGHEST_RATED:\n+        displayReplaysFromSupplier(() -> replayService.getHighestRatedReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case PLAYER:\n+        displayReplaysFromSupplier(() -> replayService.getReplaysForPlayerWithMeta(playerId, PAGE_SIZE, page, new SortConfig(\"startTime\", SortOrder.DESC)), firstLoad);\n+        break;\n+    }\n+  }\n+\n+  private void onFirstPageOpened(SearchConfig searchConfig) {\n+    onPageChange(searchConfig, 1, true);\n+    if (pagination.getCurrentPageIndex() != 0) {\n+      pagination.setCurrentPageIndex(0);\n+    }\n   }\n \n   private void displaySearchResult(List<Replay> replays) {\n     displaySearchResult(replays, false);\n   }\n \n   public void onBackButtonClicked() {\n-    if (newestReplaysLoaded) {\n-      enterResultState();\n-    } else {\n-      loadPreselectedReplays();\n-    }\n+    loadPreselectedReplays();\n   }\n \n   public void onRefreshButtonClicked() {\n-    loadPreselectedReplays();\n+    if (pagination.isVisible()) {\n+      onPageChange(searchController.getLastSearchConfig(), pagination.currentPageIndexProperty().getValue() + 1, false);\n+    } else {\n+      loadPreselectedReplays();\n+    }\n   }\n \n   private void loadPreselectedReplays() {\n     enterSearchingState();\n-    replayService.getNewestReplays(TOP_ELEMENT_COUNT, 1)\n-        .thenAccept(replays -> populateReplays(replays, newestPane))\n-        .thenCompose(aVoid -> replayService.getHighestRatedReplays(TOP_ELEMENT_COUNT, 1).thenAccept(highestRatedReplays -> populateReplays(highestRatedReplays, highestRatedPane)))\n-        .thenCompose(aVoid -> replayService.getOwnReplays(TOP_ELEMENT_COUNT, 1).thenAccept(highestRatedReplays -> populateReplays(highestRatedReplays, ownReplaysPane)))\n+    replayService.getNewestReplaysWithMeta(TOP_ELEMENT_COUNT, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e929ba01355c1bb6c2af3d321a9c3418f83ddd"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzNjEyNg==", "bodyText": "We decided against that, as we would still need to carry a tuple as far as we are doing since the pagination gets set in the controller.\nThis also opens up the possibility to use more of the metadata than just the page amount", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r453336126", "createdAt": "2020-07-12T16:23:17Z", "author": {"login": "Tarmandan"}, "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "diffHunk": "@@ -226,36 +244,66 @@ private void enterResultState() {\n     searchResultGroup.setVisible(false);\n     loadingPane.setVisible(false);\n     backButton.setVisible(false);\n-    moreButton.setVisible(false);\n+    pagination.setVisible(false);\n+    firstPageButton.setVisible(false);\n+    lastPageButton.setVisible(false);\n   }\n \n   private void onSearch(SearchConfig searchConfig) {\n+    replaySearchType = ReplaySearchType.SEARCH;\n+    onFirstPageOpened(searchConfig);\n+  }\n+\n+  private void onPageChange(SearchConfig searchConfig, int page, boolean firstLoad) {\n     enterSearchingState();\n-    displayReplaysFromSupplier(() -> replayService.findByQuery(searchConfig.getSearchQuery(), MAX_SEARCH_RESULTS, currentPage++, searchConfig.getSortConfig()));\n+    switch (replaySearchType) {\n+      case SEARCH:\n+        displayReplaysFromSupplier(() -> replayService.findByQueryWithMeta(searchConfig.getSearchQuery(), PAGE_SIZE, page, searchConfig.getSortConfig()), firstLoad);\n+        break;\n+      case OWN:\n+        displayReplaysFromSupplier(() -> replayService.getOwnReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case NEWEST:\n+        displayReplaysFromSupplier(() -> replayService.getNewestReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case HIGHEST_RATED:\n+        displayReplaysFromSupplier(() -> replayService.getHighestRatedReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case PLAYER:\n+        displayReplaysFromSupplier(() -> replayService.getReplaysForPlayerWithMeta(playerId, PAGE_SIZE, page, new SortConfig(\"startTime\", SortOrder.DESC)), firstLoad);\n+        break;\n+    }\n+  }\n+\n+  private void onFirstPageOpened(SearchConfig searchConfig) {\n+    onPageChange(searchConfig, 1, true);\n+    if (pagination.getCurrentPageIndex() != 0) {\n+      pagination.setCurrentPageIndex(0);\n+    }\n   }\n \n   private void displaySearchResult(List<Replay> replays) {\n     displaySearchResult(replays, false);\n   }\n \n   public void onBackButtonClicked() {\n-    if (newestReplaysLoaded) {\n-      enterResultState();\n-    } else {\n-      loadPreselectedReplays();\n-    }\n+    loadPreselectedReplays();\n   }\n \n   public void onRefreshButtonClicked() {\n-    loadPreselectedReplays();\n+    if (pagination.isVisible()) {\n+      onPageChange(searchController.getLastSearchConfig(), pagination.currentPageIndexProperty().getValue() + 1, false);\n+    } else {\n+      loadPreselectedReplays();\n+    }\n   }\n \n   private void loadPreselectedReplays() {\n     enterSearchingState();\n-    replayService.getNewestReplays(TOP_ELEMENT_COUNT, 1)\n-        .thenAccept(replays -> populateReplays(replays, newestPane))\n-        .thenCompose(aVoid -> replayService.getHighestRatedReplays(TOP_ELEMENT_COUNT, 1).thenAccept(highestRatedReplays -> populateReplays(highestRatedReplays, highestRatedPane)))\n-        .thenCompose(aVoid -> replayService.getOwnReplays(TOP_ELEMENT_COUNT, 1).thenAccept(highestRatedReplays -> populateReplays(highestRatedReplays, ownReplaysPane)))\n+    replayService.getNewestReplaysWithMeta(TOP_ELEMENT_COUNT, 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4OTk5MA=="}, "originalCommit": {"oid": "26e929ba01355c1bb6c2af3d321a9c3418f83ddd"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1ODMyNQ==", "bodyText": "There is never gonna be any other metadata than page counts", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r456658325", "createdAt": "2020-07-17T20:26:04Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/OnlineReplayVaultController.java", "diffHunk": "@@ -226,36 +244,66 @@ private void enterResultState() {\n     searchResultGroup.setVisible(false);\n     loadingPane.setVisible(false);\n     backButton.setVisible(false);\n-    moreButton.setVisible(false);\n+    pagination.setVisible(false);\n+    firstPageButton.setVisible(false);\n+    lastPageButton.setVisible(false);\n   }\n \n   private void onSearch(SearchConfig searchConfig) {\n+    replaySearchType = ReplaySearchType.SEARCH;\n+    onFirstPageOpened(searchConfig);\n+  }\n+\n+  private void onPageChange(SearchConfig searchConfig, int page, boolean firstLoad) {\n     enterSearchingState();\n-    displayReplaysFromSupplier(() -> replayService.findByQuery(searchConfig.getSearchQuery(), MAX_SEARCH_RESULTS, currentPage++, searchConfig.getSortConfig()));\n+    switch (replaySearchType) {\n+      case SEARCH:\n+        displayReplaysFromSupplier(() -> replayService.findByQueryWithMeta(searchConfig.getSearchQuery(), PAGE_SIZE, page, searchConfig.getSortConfig()), firstLoad);\n+        break;\n+      case OWN:\n+        displayReplaysFromSupplier(() -> replayService.getOwnReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case NEWEST:\n+        displayReplaysFromSupplier(() -> replayService.getNewestReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case HIGHEST_RATED:\n+        displayReplaysFromSupplier(() -> replayService.getHighestRatedReplaysWithMeta(PAGE_SIZE, page), firstLoad);\n+        break;\n+      case PLAYER:\n+        displayReplaysFromSupplier(() -> replayService.getReplaysForPlayerWithMeta(playerId, PAGE_SIZE, page, new SortConfig(\"startTime\", SortOrder.DESC)), firstLoad);\n+        break;\n+    }\n+  }\n+\n+  private void onFirstPageOpened(SearchConfig searchConfig) {\n+    onPageChange(searchConfig, 1, true);\n+    if (pagination.getCurrentPageIndex() != 0) {\n+      pagination.setCurrentPageIndex(0);\n+    }\n   }\n \n   private void displaySearchResult(List<Replay> replays) {\n     displaySearchResult(replays, false);\n   }\n \n   public void onBackButtonClicked() {\n-    if (newestReplaysLoaded) {\n-      enterResultState();\n-    } else {\n-      loadPreselectedReplays();\n-    }\n+    loadPreselectedReplays();\n   }\n \n   public void onRefreshButtonClicked() {\n-    loadPreselectedReplays();\n+    if (pagination.isVisible()) {\n+      onPageChange(searchController.getLastSearchConfig(), pagination.currentPageIndexProperty().getValue() + 1, false);\n+    } else {\n+      loadPreselectedReplays();\n+    }\n   }\n \n   private void loadPreselectedReplays() {\n     enterSearchingState();\n-    replayService.getNewestReplays(TOP_ELEMENT_COUNT, 1)\n-        .thenAccept(replays -> populateReplays(replays, newestPane))\n-        .thenCompose(aVoid -> replayService.getHighestRatedReplays(TOP_ELEMENT_COUNT, 1).thenAccept(highestRatedReplays -> populateReplays(highestRatedReplays, highestRatedPane)))\n-        .thenCompose(aVoid -> replayService.getOwnReplays(TOP_ELEMENT_COUNT, 1).thenAccept(highestRatedReplays -> populateReplays(highestRatedReplays, ownReplaysPane)))\n+    replayService.getNewestReplaysWithMeta(TOP_ELEMENT_COUNT, 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4OTk5MA=="}, "originalCommit": {"oid": "26e929ba01355c1bb6c2af3d321a9c3418f83ddd"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ3Mzk3OnYy", "diffSide": "LEFT", "path": "src/main/resources/i18n/messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo1NjoyMlrOGwAVnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo1NjoyMlrOGwAVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5MDM2Nw==", "bodyText": "Please don't delete these new lines they are logical seperators", "url": "https://github.com/FAForever/downlords-faf-client/pull/1808#discussion_r452990367", "createdAt": "2020-07-10T17:56:22Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -19,15 +19,12 @@ port=Port\n loading=Loading\u2026\n unknown=unknown\n dateWithTime={0} at {1}\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e929ba01355c1bb6c2af3d321a9c3418f83ddd"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2044, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}