{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Njk2MDYz", "number": 1845, "title": "Create Abstract Vault Controller", "bodyText": "Create an abstract class for Map, Mod, and Online Replay Vaults to use in display for more uniformity", "createdAt": "2020-07-26T03:33:37Z", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845", "merged": true, "mergeCommit": {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e"}, "closed": true, "closedAt": "2020-08-18T21:20:05Z", "author": {"login": "Sheikah45"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4sFa1gBqjM1ODcwMjA5NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdANkf4ABqjM2NjgxMjc1NzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8567b2ce8ab10b3402e7bd2b8a00a4f91b88d8aa", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/8567b2ce8ab10b3402e7bd2b8a00a4f91b88d8aa", "committedDate": "2020-07-26T07:07:05Z", "message": "Made Map Vault use Uniform Controller"}, "afterCommit": {"oid": "c1c94e675b44ee0f45890263cb03e2faeded01ed", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/c1c94e675b44ee0f45890263cb03e2faeded01ed", "committedDate": "2020-07-26T12:07:25Z", "message": "Made Map Vault use Uniform Controller\n\nUpdate Map Search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzM3NzEz", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-455337713", "createdAt": "2020-07-26T06:58:07Z", "commit": {"oid": "2565e2249f167b29c10379ef58fcb7721af1f081"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjo1ODowN1rOG3J_0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjo1ODowN1rOG3J_0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODY1OA==", "bodyText": "Dont think u need thatand should not do that. Since u already use setController()", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460488658", "createdAt": "2020-07-26T06:58:07Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/theme/UiService.java", "diffHunk": "@@ -413,6 +413,16 @@ public void loadThemes() {\n     return loader.getController();\n   }\n \n+  public <T extends Controller<?>> T loadFxml(String relativePath, Class<?> controllerClass) {\n+    FXMLLoader loader = new FXMLLoader();\n+    loader.setControllerFactory(applicationContext::getBean);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2565e2249f167b29c10379ef58fcb7721af1f081"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjgwMzI2", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-455680326", "createdAt": "2020-07-27T10:59:43Z", "commit": {"oid": "4ba45177a6a1bac3f545f1d3ebce8fca1201a739"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1OTo0M1rOG3drBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1OTo0M1rOG3drBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxMTAxMg==", "bodyText": "Replaye with @slf4j", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460811012", "createdAt": "2020-07-27T10:59:43Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/map/MapVaultController.java", "diffHunk": "@@ -46,95 +32,43 @@\n import java.io.File;\n import java.lang.invoke.MethodHandles;\n import java.nio.file.Path;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n // TODO I'd like to avoid the additional \"getMost*\" methods and always use the map query function instead, however,\n // this is currently not viable since Elide can't yet sort by relationship attributes. Once it supports that\n // (see https://github.com/yahoo/elide/issues/353), this can be refactored.\n-public class MapVaultController extends AbstractViewController<Node> {\n+public class MapVaultController extends VaultEntityController<MapBean> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-  @VisibleForTesting\n   static final int TOP_ELEMENT_COUNT = 7;\n-  @VisibleForTesting\n-  static final int LOAD_PER_PAGE = 50;\n-  /**\n-   * How many mod cards should be badged into one UI thread runnable.\n-   */\n-  private static final int BATCH_SIZE = 10;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba45177a6a1bac3f545f1d3ebce8fca1201a739"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDUxMTk1", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-456451195", "createdAt": "2020-07-28T09:15:27Z", "commit": {"oid": "85ad38ada4a836c963496ae4414bae5b004b460a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOToxNToyN1rOG4D_eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOToxNToyN1rOG4D_eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzODg0MA==", "bodyText": "Avoid defining UI Elements in java code", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r461438840", "createdAt": "2020-07-28T09:15:27Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/mod/ModVaultController.java", "diffHunk": "@@ -42,167 +31,136 @@\n import java.io.File;\n import java.lang.invoke.MethodHandles;\n import java.nio.file.Path;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @Slf4j\n-public class ModVaultController extends AbstractViewController<Node> {\n+public class ModVaultController extends VaultEntityController<ModVersion> {\n \n   private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private static final int TOP_ELEMENT_COUNT = 7;\n-  private static final int LOAD_MORE_COUNT = 100;\n-  private static final int MAX_SEARCH_RESULTS = 100;\n-  /**\n-   * How many mod cards should be badged into one UI thread runnable.\n-   */\n-  private static final int BATCH_SIZE = 10;\n+  private static final int PAGE_SIZE = 25;\n \n   private final ModService modService;\n-  private final NotificationService notificationService;\n-  private final I18n i18n;\n   private final EventBus eventBus;\n-  private final PreferencesService preferencesService;\n-  private final UiService uiService;\n-  private final ReportingService reportingService;\n \n-  public Pane searchResultGroup;\n-  public Pane searchResultPane;\n-  public Pane showroomGroup;\n-  public Node loadingLabel;\n-  public Pane highestRatedUiPane;\n-  public Pane newestPane;\n-  public Pane highestRatedPane;\n-  public JFXButton moreHighestRatedUiButton;\n-  public JFXButton moreNewestButton;\n-  public JFXButton moreHighestRatedButton;\n-  public StackPane modVaultRoot;\n-  public ScrollPane scrollPane;\n-  public Button backButton;\n-  public SearchController searchController;\n-  public Button moreButton;\n-\n-  private boolean initialized;\n+  private ModShowRoomController modShowRoomController;\n   private ModDetailController modDetailController;\n-  private final ObjectProperty<ModVaultController.State> state;\n-  private int currentPage;\n-  private Supplier<CompletableFuture<List<ModVersion>>> currentSupplier;\n+  private Button manageModButton;\n \n   public ModVaultController(ModService modService, I18n i18n, EventBus eventBus, PreferencesService preferencesService,\n-                            UiService uiService, NotificationService notificationService, ReportingService reportingService) {\n-    this.modService = modService;\n-    this.i18n = i18n;\n+                               UiService uiService, NotificationService notificationService, ReportingService reportingService) {\n+    super(uiService, notificationService, i18n, preferencesService, reportingService);\n     this.eventBus = eventBus;\n-    this.preferencesService = preferencesService;\n-    this.uiService = uiService;\n-    this.notificationService = notificationService;\n-    this.reportingService = reportingService;\n-    state = new SimpleObjectProperty<>(State.LOADING);\n+    this.modService = modService;\n   }\n \n   @Override\n   public void initialize() {\n     super.initialize();\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n \n-    loadingLabel.managedProperty().bind(loadingLabel.visibleProperty());\n-    showroomGroup.managedProperty().bind(showroomGroup.visibleProperty());\n-    searchResultGroup.managedProperty().bind(searchResultGroup.visibleProperty());\n-    backButton.managedProperty().bind(backButton.visibleProperty());\n-    moreButton.managedProperty().bind(moreButton.visibleProperty());\n-\n     modDetailController = uiService.loadFxml(\"theme/vault/mod/mod_detail.fxml\");\n     Node modDetailRoot = modDetailController.getRoot();\n-    modVaultRoot.getChildren().add(modDetailRoot);\n+    vaultRoot.getChildren().add(modDetailRoot);\n     AnchorPane.setTopAnchor(modDetailRoot, 0d);\n     AnchorPane.setRightAnchor(modDetailRoot, 0d);\n     AnchorPane.setBottomAnchor(modDetailRoot, 0d);\n     AnchorPane.setLeftAnchor(modDetailRoot, 0d);\n     modDetailRoot.setVisible(false);\n \n+    manageModButton = new Button(i18n.get(\"modVault.manageMods\"));\n+    manageModButton.getStyleClass().add(\"button-raised\");\n+    manageModButton.setOnAction((event -> manageMods()));\n+    searchBox.getChildren().add(manageModButton);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ad38ada4a836c963496ae4414bae5b004b460a"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzEzNjAx", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-457313601", "createdAt": "2020-07-29T08:40:54Z", "commit": {"oid": "61e5947b5a353965b383d4a28fcc24c7f99e300d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzEyOTAx", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-457712901", "createdAt": "2020-07-29T16:56:35Z", "commit": {"oid": "e688514bed79f30457e63ca050a8ad63b842eeec"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "504dac9b81c9e9d91e2ad995905ddb250e16c333", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/504dac9b81c9e9d91e2ad995905ddb250e16c333", "committedDate": "2020-08-01T02:39:33Z", "message": "Add Unit Tests"}, "afterCommit": {"oid": "e4d5674e5389aafc634e3e820cf82cbbe362429f", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/e4d5674e5389aafc634e3e820cf82cbbe362429f", "committedDate": "2020-08-01T11:49:01Z", "message": "Add Unit Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTg0MTI3", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-459584127", "createdAt": "2020-08-01T15:11:17Z", "commit": {"oid": "b15dc247c88650fe8c7e27b3d441c3d93d687255"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNToxMToxN1rOG6eh-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNToxMzozOVrOG6ei7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDgwOQ==", "bodyText": "no commented out code", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463970809", "createdAt": "2020-08-01T15:11:17Z", "author": {"login": "1-alex98"}, "path": "src/test/java/com/faforever/client/vault/VaultEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+package com.faforever.client.vault;\n+\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.NavigateEvent;\n+import com.faforever.client.main.event.NavigationItem;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.query.LogicalNodeController;\n+import com.faforever.client.query.SpecificationController;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.Tuple;\n+import com.faforever.client.vault.search.SearchController;\n+import com.faforever.client.vault.search.SearchController.SearchConfig;\n+import javafx.application.Platform;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.AnchorPane;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.vault.VaultEntityController.TOP_ELEMENT_COUNT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+public class VaultEntityControllerTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private UiService uiService;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private ReportingService reportingService;\n+  @Mock\n+  private SearchController searchController;\n+  @Mock\n+  private LogicalNodeController logicalNodeController;\n+  @Mock\n+  private SpecificationController specificationController;\n+  @Mock\n+  private VaultEntityShowRoomController vaultEntityShowRoomController;\n+\n+  private VaultEntityController<Integer> instance;\n+  private List<Integer> items;\n+  private VBox showRoomRoot;\n+  private Label showRoomLabel;\n+  private Button moreButton;\n+  private FlowPane showRoomPane;\n+\n+\n+  private List<Integer> createMockElements(int numberOfElements) {\n+    List<Integer> elements = new ArrayList<>(numberOfElements);\n+    for (int i = 0; i < numberOfElements; i++) {\n+      elements.add(i);\n+    }\n+    return elements;\n+  }\n+\n+  private List<Integer> getMockPageElements(List<Integer> elements, int pageSize, int page) {\n+    return elements.subList(Math.min((page) * pageSize, elements.size()),\n+        Math.min((page + 1) * pageSize, elements.size()));\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> asFuture(Tuple<List<Integer>, Integer> page) {\n+    return CompletableFuture.completedFuture(page);\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> mocksAsFuture(List<Integer> elements, int pageSize, int page) {\n+    return CompletableFuture.completedFuture(new Tuple<>(getMockPageElements(elements, pageSize, page),\n+        (int) Math.ceil((double) elements.size() / pageSize)));\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    showRoomRoot = new VBox();\n+    showRoomLabel = new Label();\n+    showRoomPane = new FlowPane();\n+    moreButton = new Button();\n+    showRoomPane.setUserData(moreButton);\n+\n+    when(i18n.get(\"mock\")).thenReturn(\"mock\");\n+//    when(preferencesService.getPreferences()).thenReturn(new Preferences());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15dc247c88650fe8c7e27b3d441c3d93d687255"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg0OQ==", "bodyText": "No commented out code", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463970849", "createdAt": "2020-08-01T15:11:42Z", "author": {"login": "1-alex98"}, "path": "src/test/java/com/faforever/client/vault/VaultEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+package com.faforever.client.vault;\n+\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.NavigateEvent;\n+import com.faforever.client.main.event.NavigationItem;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.query.LogicalNodeController;\n+import com.faforever.client.query.SpecificationController;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.Tuple;\n+import com.faforever.client.vault.search.SearchController;\n+import com.faforever.client.vault.search.SearchController.SearchConfig;\n+import javafx.application.Platform;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.AnchorPane;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.vault.VaultEntityController.TOP_ELEMENT_COUNT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+public class VaultEntityControllerTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private UiService uiService;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private ReportingService reportingService;\n+  @Mock\n+  private SearchController searchController;\n+  @Mock\n+  private LogicalNodeController logicalNodeController;\n+  @Mock\n+  private SpecificationController specificationController;\n+  @Mock\n+  private VaultEntityShowRoomController vaultEntityShowRoomController;\n+\n+  private VaultEntityController<Integer> instance;\n+  private List<Integer> items;\n+  private VBox showRoomRoot;\n+  private Label showRoomLabel;\n+  private Button moreButton;\n+  private FlowPane showRoomPane;\n+\n+\n+  private List<Integer> createMockElements(int numberOfElements) {\n+    List<Integer> elements = new ArrayList<>(numberOfElements);\n+    for (int i = 0; i < numberOfElements; i++) {\n+      elements.add(i);\n+    }\n+    return elements;\n+  }\n+\n+  private List<Integer> getMockPageElements(List<Integer> elements, int pageSize, int page) {\n+    return elements.subList(Math.min((page) * pageSize, elements.size()),\n+        Math.min((page + 1) * pageSize, elements.size()));\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> asFuture(Tuple<List<Integer>, Integer> page) {\n+    return CompletableFuture.completedFuture(page);\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> mocksAsFuture(List<Integer> elements, int pageSize, int page) {\n+    return CompletableFuture.completedFuture(new Tuple<>(getMockPageElements(elements, pageSize, page),\n+        (int) Math.ceil((double) elements.size() / pageSize)));\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    showRoomRoot = new VBox();\n+    showRoomLabel = new Label();\n+    showRoomPane = new FlowPane();\n+    moreButton = new Button();\n+    showRoomPane.setUserData(moreButton);\n+\n+    when(i18n.get(\"mock\")).thenReturn(\"mock\");\n+//    when(preferencesService.getPreferences()).thenReturn(new Preferences());\n+    when(uiService.loadFxml(\"theme/vault/vault_entity_show_room.fxml\")).thenReturn(vaultEntityShowRoomController);\n+    when(vaultEntityShowRoomController.getRoot()).thenReturn(showRoomRoot);\n+    when(vaultEntityShowRoomController.getLabel()).thenReturn(showRoomLabel);\n+    when(vaultEntityShowRoomController.getMoreButton()).thenReturn(moreButton);\n+    when(vaultEntityShowRoomController.getPane()).thenReturn(showRoomPane);\n+\n+    items = createMockElements(50);\n+    instance = new VaultEntityController<>(uiService, notificationService, i18n, preferencesService, reportingService) {\n+      @Override\n+      protected Node getEntityCard(Integer integer) {\n+        GridPane card = new GridPane();\n+        card.setUserData(integer);\n+        return card;\n+      }\n+\n+      @Override\n+      protected List<ShowRoomCategory> getShowRoomCategories() {\n+        List<ShowRoomCategory> categories = new ArrayList<>();\n+        categories.add(new ShowRoomCategory(() -> mocksAsFuture(items, TOP_ELEMENT_COUNT, 0), SearchType.NEWEST, \"mock\"));\n+        return categories;\n+      }\n+\n+      @Override\n+      protected void setSupplier(SearchConfig searchConfig) {\n+        currentSupplier = mocksAsFuture(items, pageSize, pagination.getCurrentPageIndex());\n+      }\n+\n+      @Override\n+      protected void onUploadButtonClicked() {\n+      }\n+\n+      @Override\n+      protected Node getDetailView() {\n+        return new AnchorPane();\n+      }\n+\n+      @Override\n+      protected void onDisplayDetails(Integer integer) {\n+      }\n+\n+      @Override\n+      protected Class<? extends NavigateEvent> getDefaultNavigateEvent() {\n+        return NavigateEvent.class;\n+      }\n+\n+      @Override\n+      protected void handleSpecialNavigateEvent(NavigateEvent navigateEvent) {\n+      }\n+    };\n+\n+    loadFxml(\"theme/vault/vault_entity.fxml\", clazz -> {\n+      if (clazz == SearchController.class) {\n+        return searchController;\n+      }\n+      if (clazz == LogicalNodeController.class) {\n+        return logicalNodeController;\n+      }\n+      if (clazz == SpecificationController.class) {\n+        return specificationController;\n+      }\n+      return instance;\n+    }, instance);\n+  }\n+\n+  @Test\n+  public void testGetRoot() throws Exception {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    assertEquals(instance.root, instance.getRoot());\n+    assertNull(instance.getRoot().getParent());\n+  }\n+\n+  @Test\n+  public void testOnDisplay() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+    assertEquals(1, instance.showRoomGroup.getChildren().size());\n+    assertEquals(TOP_ELEMENT_COUNT + 1, showRoomPane.getChildren().size());\n+  }\n+\n+  @Test\n+  public void testEmptyShowRoom() {\n+    items = createMockElements(0);\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(showRoomRoot.isVisible());\n+    assertEquals(1, instance.showRoomGroup.getChildren().size());\n+  }\n+\n+  @Test\n+  public void testPagination() {\n+    List<Integer> elePage1 = getMockPageElements(items, instance.pageSize, 0);\n+    List<Integer> elePage3 = getMockPageElements(items, instance.pageSize, 2);\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    // first page / search results\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < elePage1.size(); i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+\n+    // third page\n+    instance.pagination.setCurrentPageIndex(2);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(10, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < 10; i++) {\n+      assertEquals(elePage3.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testLastPageButton() {\n+    List<Integer> elePage3 = getMockPageElements(items, instance.pageSize, 2);\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    instance.lastPageButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(10, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < 10; i++) {\n+      assertEquals(elePage3.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testFirstPageButton() {\n+    List<Integer> elePage1 = getMockPageElements(items, instance.pageSize, 0);\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    instance.firstPageButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < 10; i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testPageSize() {\n+    int newPageSize = 30;\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    instance.perPageComboBox.setValue(newPageSize);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    List<Integer> elePage1 = getMockPageElements(items, newPageSize, 0);\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < instance.pageSize; i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testPageSizeChange() {\n+    int newPageSize = 30;\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    List<Integer> elePage1 = getMockPageElements(items, instance.pageSize, 0);\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < elePage1.size(); i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+\n+    instance.perPageComboBox.setValue(newPageSize);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    instance.changePerPageCount();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    elePage1 = getMockPageElements(items, newPageSize, 0);\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+    assertEquals(newPageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < newPageSize; i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testOnFirstPageChange() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+\n+    instance.pagination.setCurrentPageIndex(1);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(1, instance.pagination.getCurrentPageIndex());\n+\n+    instance.onFirstPageOpened(null);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+  }\n+\n+  @Test\n+  public void testOnBackButton() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.backButton.fire());\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+  }\n+\n+  @Test\n+  public void testOnSearch() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.onSearch(null));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+  }\n+\n+  @Test\n+  public void testRefreshShowRoom() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.refreshButton.fire());\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+  }\n+\n+  @Test\n+  public void testRefreshSearch() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.onSearch(null));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.refreshButton.fire());\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+  }\n+\n+//\n+//  @Test\n+//  public void testPageRefresh() {\n+//    // first we have certain number of maps\n+//    when(mapService.getMostPlayedMaps(anyInt(), eq(1))).thenReturn(mocksAsFuture(2));\n+//    instance.display(new OpenMapVaultEvent());\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    // size is one more, because a button is also in there\n+//    assertThat(instance.mostPlayedPane.getChildren().size(), is(3));\n+//\n+//    // more maps were added, refresh should update\n+//    when(mapService.getMostPlayedMaps(anyInt(), eq(1))).thenReturn(mocksAsFuture(4));\n+//    instance.onRefreshButtonClicked();\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    // size is one more, because a button is also in there\n+//    assertThat(instance.mostPlayedPane.getChildren().size(), is(5));\n+//  }\n+//\n+//  @Test\n+//  public void testOwnedMapsHiddenWhenUserOwnsNoMaps() {\n+//    when(mapService.getOwnedMaps(anyInt(), anyInt(), anyInt()))\n+//        .thenReturn(CompletableFuture.completedFuture(Collections.emptyList()));\n+//    instance.display(new OpenMapVaultEvent());\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    assertFalse(instance.ownedPane.isVisible()\n+//        || instance.moreOwnedButton.isVisible()\n+//        || instance.ownedMoreLabel.isVisible());\n+//  }\n+//\n+//  @Test\n+//  public void testOwnedMapsShownWhenUserOwnsMaps() {\n+//    when(mapService.getOwnedMaps(anyInt(), anyInt(), anyInt()))\n+//        .thenReturn(CompletableFuture.completedFuture(createMockElements(5)));\n+//    instance.display(new OpenMapVaultEvent());\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    assertTrue(instance.ownedPane.isVisible()\n+//        && instance.moreOwnedButton.isVisible()\n+//        && instance.ownedMoreLabel.isVisible());\n+//  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15dc247c88650fe8c7e27b3d441c3d93d687255"}, "originalPosition": 423}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTA1NQ==", "bodyText": "Could we not unify this with the other loadFXMl there is not realy too much of a difference", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463971055", "createdAt": "2020-08-01T15:13:39Z", "author": {"login": "1-alex98"}, "path": "src/test/java/com/faforever/client/test/AbstractPlainJavaFxTest.java", "diffHunk": "@@ -106,6 +107,37 @@ protected void loadFxml(String fileName, Callback<Class<?>, Object> controllerFa\n     }\n   }\n \n+  protected void loadFxml(String fileName, Callback<Class<?>, Object> controllerFactory, VaultEntityController<?> controller) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15dc247c88650fe8c7e27b3d441c3d93d687255"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b15dc247c88650fe8c7e27b3d441c3d93d687255", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/b15dc247c88650fe8c7e27b3d441c3d93d687255", "committedDate": "2020-08-01T11:56:33Z", "message": "Update pagination style"}, "afterCommit": {"oid": "be668f6e04a2f705ca18c1ba5dcf1fdb75acfc93", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/be668f6e04a2f705ca18c1ba5dcf1fdb75acfc93", "committedDate": "2020-08-01T16:01:18Z", "message": "Update pagination style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be668f6e04a2f705ca18c1ba5dcf1fdb75acfc93", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/be668f6e04a2f705ca18c1ba5dcf1fdb75acfc93", "committedDate": "2020-08-01T16:01:18Z", "message": "Update pagination style"}, "afterCommit": {"oid": "f5fe2c3b13400042e457f81e92e164298cfbc44b", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f5fe2c3b13400042e457f81e92e164298cfbc44b", "committedDate": "2020-08-01T16:38:37Z", "message": "Update pagination style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTM5MjYy", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-459939262", "createdAt": "2020-08-03T11:04:36Z", "commit": {"oid": "f5fe2c3b13400042e457f81e92e164298cfbc44b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5fe2c3b13400042e457f81e92e164298cfbc44b", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/f5fe2c3b13400042e457f81e92e164298cfbc44b", "committedDate": "2020-08-01T16:38:37Z", "message": "Update pagination style"}, "afterCommit": {"oid": "91061ab2b249e0d6bd8d44da7c55f146fb17cdf5", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/91061ab2b249e0d6bd8d44da7c55f146fb17cdf5", "committedDate": "2020-08-03T14:01:43Z", "message": "Update pagination style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjcwOTUz", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#pullrequestreview-460270953", "createdAt": "2020-08-03T19:03:50Z", "commit": {"oid": "91061ab2b249e0d6bd8d44da7c55f146fb17cdf5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffb243434ac0639285949a1f361f6d1a50372760", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/ffb243434ac0639285949a1f361f6d1a50372760", "committedDate": "2020-08-18T21:04:05Z", "message": "Create Vault Entity Controller as abstract class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e61a45cc01aa0777152b6d48c1cddab4d9967c2", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/1e61a45cc01aa0777152b6d48c1cddab4d9967c2", "committedDate": "2020-08-18T21:04:05Z", "message": "Add Unit Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "committedDate": "2020-08-18T21:04:05Z", "message": "Update pagination style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91061ab2b249e0d6bd8d44da7c55f146fb17cdf5", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/91061ab2b249e0d6bd8d44da7c55f146fb17cdf5", "committedDate": "2020-08-03T14:01:43Z", "message": "Update pagination style"}, "afterCommit": {"oid": "fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "author": {"user": {"login": "Sheikah45", "name": null}}, "url": "https://github.com/FAForever/downlords-faf-client/commit/fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "committedDate": "2020-08-18T21:04:05Z", "message": "Update pagination style"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3262, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}