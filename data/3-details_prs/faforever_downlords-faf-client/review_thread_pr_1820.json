{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzAyNTE3", "number": 1820, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0MTowOVrOENW8oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMTowNFrOERcivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQyOTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0MTowOVrOGv_5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0MTowOVrOGv_5IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4MzA3Mw==", "bodyText": "Passing an UI Elements to a service should never happen!", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r452983073", "createdAt": "2020-07-10T17:41:09Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -139,19 +142,27 @@\n   private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n   private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n-  public void startLoadingAndWatchingLocalReplays() {\n+  public void startLoadingAndWatchingLocalReplays(Pagination pagination) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6612d1d9906114382b1c41941e6508ff94ab90e2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQzMjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0MjoxOFrOGv_7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo1MTowOVrOGwALnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4MzU4Ng==", "bodyText": "Publish page count here maybe...", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r452983586", "createdAt": "2020-07-10T17:42:18Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -139,19 +142,27 @@\n   private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n   private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n-  public void startLoadingAndWatchingLocalReplays() {\n+  public void startLoadingAndWatchingLocalReplays(Pagination pagination) {\n     Path replaysDirectory = preferencesService.getReplaysDirectory();\n     if (Files.notExists(replaysDirectory)) {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n+    String replayFileGlob = clientProperties.getReplay().getReplayFileGlob();\n+    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {\n+      final int pageCount = (int) Math.ceil((StreamSupport.stream(directoryStream.spliterator(), false).count() / (double) REPLAYS_PER_PAGE));\n+      Platform.runLater(() -> pagination.setPageCount(pageCount));\n+    } catch (IOException e) {\n+      logger.error(\"Failed loading total amount of replays\", e);\n+    }\n+\n     LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept( replays -> {\n+    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept(replays -> {\n       localReplays.clear();\n       localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n+      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6612d1d9906114382b1c41941e6508ff94ab90e2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NzgwNw==", "bodyText": "I am surprised this works with an event publisher. Probably the Controller a singleton and that's why it works. Whatever let's leave it like this.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r452987807", "createdAt": "2020-07-10T17:51:09Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -139,19 +142,27 @@\n   private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n   private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n-  public void startLoadingAndWatchingLocalReplays() {\n+  public void startLoadingAndWatchingLocalReplays(Pagination pagination) {\n     Path replaysDirectory = preferencesService.getReplaysDirectory();\n     if (Files.notExists(replaysDirectory)) {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n+    String replayFileGlob = clientProperties.getReplay().getReplayFileGlob();\n+    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {\n+      final int pageCount = (int) Math.ceil((StreamSupport.stream(directoryStream.spliterator(), false).count() / (double) REPLAYS_PER_PAGE));\n+      Platform.runLater(() -> pagination.setPageCount(pageCount));\n+    } catch (IOException e) {\n+      logger.error(\"Failed loading total amount of replays\", e);\n+    }\n+\n     LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept( replays -> {\n+    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept(replays -> {\n       localReplays.clear();\n       localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n+      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4MzU4Ng=="}, "originalCommit": {"oid": "6612d1d9906114382b1c41941e6508ff94ab90e2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQzNDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0Mjo1OFrOGv_8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0Mjo1OFrOGv_8Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4Mzg5NQ==", "bodyText": "This is not an error, rather warning I say", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r452983895", "createdAt": "2020-07-10T17:42:58Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -139,19 +142,27 @@\n   private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n   private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n-  public void startLoadingAndWatchingLocalReplays() {\n+  public void startLoadingAndWatchingLocalReplays(Pagination pagination) {\n     Path replaysDirectory = preferencesService.getReplaysDirectory();\n     if (Files.notExists(replaysDirectory)) {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n+    String replayFileGlob = clientProperties.getReplay().getReplayFileGlob();\n+    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {\n+      final int pageCount = (int) Math.ceil((StreamSupport.stream(directoryStream.spliterator(), false).count() / (double) REPLAYS_PER_PAGE));\n+      Platform.runLater(() -> pagination.setPageCount(pageCount));\n+    } catch (IOException e) {\n+      logger.error(\"Failed loading total amount of replays\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6612d1d9906114382b1c41941e6508ff94ab90e2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ0MDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0NToyMVrOGwAAnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0NjozNVrOGwACzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NDk4OA==", "bodyText": "Have u thought about what happens if a user drops a new replay into his replay folder... that is what happens here.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r452984988", "createdAt": "2020-07-10T17:45:21Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -186,8 +207,8 @@ protected Thread startDirectoryWatcher(Path replaysDirectory) throws IOException\n \n   @VisibleForTesting\n   protected void onLocalReplaysWatchEvent(WatchKey key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6612d1d9906114382b1c41941e6508ff94ab90e2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NTU1MA==", "bodyText": "Maybe u can simplify this method by just going back to the first page \ud83e\udd14", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r452985550", "createdAt": "2020-07-10T17:46:35Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -186,8 +207,8 @@ protected Thread startDirectoryWatcher(Path replaysDirectory) throws IOException\n \n   @VisibleForTesting\n   protected void onLocalReplaysWatchEvent(WatchKey key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NDk4OA=="}, "originalCommit": {"oid": "6612d1d9906114382b1c41941e6508ff94ab90e2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzg3OTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0Mzo1MlrOGyzddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0Mzo1MlrOGyzddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNTEwOQ==", "bodyText": "whys that a double", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r455925109", "createdAt": "2020-07-16T16:43:52Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -139,19 +140,29 @@\n   private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n   private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();\n+  private double localReplaysItemsSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a024304acc0cfd3fb1916b63db6ba69c3dd7a8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzI4OTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzozODo1N1rOGzTYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzozODo1N1rOGzTYVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0ODA4NQ==", "bodyText": "Written to but never read, right? If so remove", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r456448085", "createdAt": "2020-07-17T13:38:57Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -134,36 +134,47 @@\n   private final FafService fafService;\n   private final ModService modService;\n   private final MapService mapService;\n-  private final ApplicationEventPublisher publisher;\n+  private final EventBus eventBus;\n   private final MapGeneratorService mapGeneratorService;\n-  private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n-  private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26cb7a73ab4bb7dc851efd6eedc57bb8c5dc2324"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzI4ODkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMTowNFrOG2KMnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMTowNFrOG2KMnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MzM1OQ==", "bodyText": "Files.list", "url": "https://github.com/FAForever/downlords-faf-client/pull/1820#discussion_r459443359", "createdAt": "2020-07-23T13:21:04Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -134,36 +134,47 @@\n   private final FafService fafService;\n   private final ModService modService;\n   private final MapService mapService;\n-  private final ApplicationEventPublisher publisher;\n+  private final EventBus eventBus;\n   private final MapGeneratorService mapGeneratorService;\n-  private final ExecutorService executorService;\n   private Thread directoryWatcherThread;\n-  private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n+  protected List<Replay> localReplays = new ArrayList<>();\n+  private double localReplaysItemsSize;\n+  private int pageCountLocalReplays;\n \n   public void startLoadingAndWatchingLocalReplays() {\n     Path replaysDirectory = preferencesService.getReplaysDirectory();\n     if (Files.notExists(replaysDirectory)) {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n-    LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept( replays -> {\n-      localReplays.clear();\n-      localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n-    });\n-\n     try {\n       Optional.ofNullable(directoryWatcherThread).ifPresent(Thread::interrupt);\n       directoryWatcherThread = startDirectoryWatcher(replaysDirectory);\n     } catch (IOException e) {\n       logger.warn(\"Failed to start watching the local replays directory\");\n     }\n+\n+    reloadLocalReplays();\n   }\n \n-  public Collection<Replay> getLocalReplays() {\n-    return localReplays;\n+  private void reloadLocalReplays() {\n+    Path replaysDirectory = preferencesService.getReplaysDirectory();\n+    pageCountLocalReplays = 1;\n+    String replayFileGlob = clientProperties.getReplay().getReplayFileGlob();\n+    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26cb7a73ab4bb7dc851efd6eedc57bb8c5dc2324"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2058, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}