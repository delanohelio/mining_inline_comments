{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNTU3Mjk1", "number": 2059, "reviewThreads": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MDozOFrOFA3JxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyMDoyOVrOFJz_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ3OTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MDozOFrOH_WzzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNjoyNVrOH_j8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ==", "bodyText": "just Map.of()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536196045", "createdAt": "2020-12-04T15:50:38Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4MzczMw==", "bodyText": "All other functions in that class also use ImmutableMap, should those be changed too?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536383733", "createdAt": "2020-12-04T21:15:26Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDYwMw==", "bodyText": "Yes. Map.of is also immutable and is java standard, so we should use this.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536410603", "createdAt": "2020-12-04T22:04:38Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTM0Mw==", "bodyText": "It came after Java 8 into the JDK that's why you find guava ImmutableMap/List/... everywhere in old code.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536411343", "createdAt": "2020-12-04T22:06:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ4MTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MTowOFrOH_W1Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MTowOFrOH_W1Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjQxOA==", "bodyText": "just Map.of()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536196418", "createdAt": "2020-12-04T15:51:08Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n+        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n+            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n+            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n+            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n+            \"mapPool.mapVersion.map.versions.reviews.player\",\n+        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  }\n+\n+  @Override\n+  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ4NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/MockFafApiAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MTo1OFrOH_W32w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MTo1OFrOH_W32w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzA4Mw==", "bodyText": "just List.of()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536197083", "createdAt": "2020-12-04T15:51:58Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/MockFafApiAccessor.java", "diffHunk": "@@ -284,8 +285,13 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ5MDY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1Mjo1NFrOH_W6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMToyMToyMFrOH_ib4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Nzc5MQ==", "bodyText": "Why not @Data or @Value?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536197791", "createdAt": "2020-12-04T15:52:54Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4NjUyOA==", "bodyText": "I think I copied that from another dto class. No real reason to not use @Data", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536386528", "createdAt": "2020-12-04T21:21:20Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Nzc5MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ5MjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/dto/MapPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MzoyN1rOH_W8FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MzoyN1rOH_W8FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5ODE2NQ==", "bodyText": "Why not @DaTa or @value?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536198165", "createdAt": "2020-12-04T15:53:27Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/MapPool.java", "diffHunk": "@@ -7,13 +7,19 @@\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n @Getter\n @Setter\n @EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUxMjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/ChatController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1NzoyNVrOH_XHgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1NzoyNVrOH_XHgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMTA4OQ==", "bodyText": ".endsWith(\"'sParty\") has an implicit semantical meaning and therefore should be put into a dedicated method.\nI'd guess something like boolean isOwnPartiesChannel(String name)\nBut just comparing the end of the name sounds really... odd?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536201089", "createdAt": "2020-12-04T15:57:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -178,6 +178,8 @@ private void onConnectionStateChange(ConnectionState newValue) {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n+      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUxODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/ChatChannelUser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1ODo1M1rOH_XLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMDoyODo1OVrOH_zIdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjA0Mg==", "bodyText": "Why is this public now? Could be a code smell. Not sure.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202042", "createdAt": "2020-12-04T15:58:53Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatChannelUser.java", "diffHunk": "@@ -45,7 +45,7 @@\n     this(username, color, moderator, null);\n   }\n \n-  ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n+  public ChatChannelUser(String username, Color color, boolean moderator, Player player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MDA4NA==", "bodyText": "This and related changes were done in a214cbd by Geosearchef. This is where he implemented the hacky way to display the contextmenu. I can't say for sure, but this looks like a candidate for refactoring to make the whole thing cleaner", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536660084", "createdAt": "2020-12-05T10:28:59Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/chat/ChatChannelUser.java", "diffHunk": "@@ -45,7 +45,7 @@\n     this(username, color, moderator, null);\n   }\n \n-  ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n+  public ChatChannelUser(String username, Color color, boolean moderator, Player player) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjA0Mg=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUyMDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1OToxMlrOH_XMBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1OToxMlrOH_XMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjI0NQ==", "bodyText": "same here", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202245", "createdAt": "2020-12-04T15:59:12Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Relationship;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUyMTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1OToyMVrOH_XMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1OToyMVrOH_XMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjM2Mw==", "bodyText": "same here", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202363", "createdAt": "2020-12-04T15:59:21Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Relationship;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUzMjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowMjowMFrOH_XTbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMTo0NTo1OVrOII-s6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw==", "bodyText": "Why does this method even exist if there is getRoot()? I know it was there before, but maybe you can explain.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204143", "createdAt": "2020-12-04T16:02:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java", "diffHunk": "@@ -145,7 +145,7 @@ public void initialize() {\n         });\n   }\n \n-  ContextMenu getContextMenu() {\n+  public ContextMenu getContextMenu() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY1ODg5Mg==", "bodyText": "No idea...", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536658892", "createdAt": "2020-12-05T10:26:56Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java", "diffHunk": "@@ -145,7 +145,7 @@ public void initialize() {\n         });\n   }\n \n-  ContextMenu getContextMenu() {\n+  public ContextMenu getContextMenu() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NjgyNQ==", "bodyText": "This was for the hacky implementation in the partyMemberItemController", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546286825", "createdAt": "2020-12-19T21:45:59Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java", "diffHunk": "@@ -145,7 +145,7 @@ public void initialize() {\n         });\n   }\n \n-  ContextMenu getContextMenu() {\n+  public ContextMenu getContextMenu() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUzNjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowMjo0OVrOH_XVpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowMjo0OVrOH_XVpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDcxMQ==", "bodyText": "Remove. @Inject isn't needed.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204711", "createdAt": "2020-12-04T16:02:49Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDUzODUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowMzoxNVrOH_XWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMTo0NToxOVrOII-skQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA==", "bodyText": "Is there a TODO or not? If yes, please fix, if no please remove.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204948", "createdAt": "2020-12-04T16:03:15Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4ODIyNA==", "bodyText": "I don't know. The other two classes that extend from AbstractChatTabController also have it and I wanted to stay consistent.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536388224", "createdAt": "2020-12-04T21:24:53Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MjIxMg==", "bodyText": "I think the thing to do here would be to cut the unnecessary dependencies.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536782212", "createdAt": "2020-12-05T14:12:54Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NjczNw==", "bodyText": "This is a separate issue. This todo also exists in the other chatcontrollers. I put it here for consistency", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546286737", "createdAt": "2020-12-19T21:45:19Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDU2Mzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/game/GameService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowOToxN1rOH_XmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowOToxN1rOH_XmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODk0MA==", "bodyText": "duplicate code, please put into dedicated method", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536208940", "createdAt": "2020-12-04T16:09:17Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -331,9 +339,17 @@ public ReadOnlyBooleanProperty gameRunningProperty() {\n       return gameDirectoryFuture.thenCompose(path -> joinGame(game, password));\n     }\n \n-    log.info(\"Joining game: '{}' ({})\", game.getTitle(), game.getId());\n+    if (inMatchmakerQueue.get()) {\n+      notificationService.addNotification(new ImmediateNotification(\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n+          Severity.WARN,\n+          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n+      ));\n+      return completedFuture(null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDU3MTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/game/GameService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxMTowNVrOH_Xq8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMDoxNjoyMVrOIAO5Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMDE2MQ==", "bodyText": "I suggest debug logging of both cases", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536210161", "createdAt": "2020-12-04T16:11:05Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +546,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode\n             }))\n         .exceptionally(throwable -> {\n-          if (throwable instanceof CancellationException) {\n-            log.info(\"Ranked1v1 search has been cancelled\");\n+          if (throwable.getCause() instanceof CancellationException) {\n+            log.info(\"Matchmaking search has been cancelled\");\n           } else {\n-            log.warn(\"Ranked1v1 could not be started\", throwable);\n+            log.warn(\"Matchmade game could not be started\", throwable);\n           }\n           return null;\n         });\n   }\n \n-  public void stopSearchLadder1v1() {\n-    if (searching1v1.get()) {\n-      fafService.stopSearchingRanked();\n-      searching1v1.set(false);\n+  public void onMatchmakerSearchStopped() {\n+    if (inMatchmakerQueue.get()) {\n+      fafService.stopSearchMatchmaker();\n+      inMatchmakerQueue.set(false);\n     }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzExNDkxNQ==", "bodyText": "The other case is that inMatchmakerQueue is already false?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r537114915", "createdAt": "2020-12-06T20:16:21Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +546,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode\n             }))\n         .exceptionally(throwable -> {\n-          if (throwable instanceof CancellationException) {\n-            log.info(\"Ranked1v1 search has been cancelled\");\n+          if (throwable.getCause() instanceof CancellationException) {\n+            log.info(\"Matchmaking search has been cancelled\");\n           } else {\n-            log.warn(\"Ranked1v1 could not be started\", throwable);\n+            log.warn(\"Matchmade game could not be started\", throwable);\n           }\n           return null;\n         });\n   }\n \n-  public void stopSearchLadder1v1() {\n-    if (searching1v1.get()) {\n-      fafService.stopSearchingRanked();\n-      searching1v1.set(false);\n+  public void onMatchmakerSearchStopped() {\n+    if (inMatchmakerQueue.get()) {\n+      fafService.stopSearchMatchmaker();\n+      inMatchmakerQueue.set(false);\n     }\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMDE2MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDYwMjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxODowNlrOH_X98g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxODowNlrOH_X98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNTAyNg==", "bodyText": "Use Lombok @Data instead?\nGet rid of all the getter and setter below.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536215026", "createdAt": "2020-12-04T16:18:06Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -9,32 +9,38 @@\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  private String action; // TODO: doesn't exist anymore\n+\n   public static class MatchmakerQueue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDYyMjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/FafService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyMjozOFrOH_YJeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyMjozOFrOH_YJeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNzk3OA==", "bodyText": "Please resolve the todo", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536217978", "createdAt": "2020-12-04T16:22:38Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -96,16 +96,17 @@\n     return fafServerAccessor.requestJoinGame(gameId, password);\n   }\n \n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    return fafServerAccessor.startSearchLadder1v1(faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    return fafServerAccessor.startSearchMatchmaker();\n   }\n \n-  public void requestMatchmakerInfo() {\n-    fafServerAccessor.requestMatchmakerInfo();\n+  public void stopSearchMatchmaker() {\n+    fafServerAccessor.stopSearchMatchmaker();\n   }\n \n-  public void stopSearchingRanked() {\n-    fafServerAccessor.stopSearchingRanked();\n+  //TODO: use for TMM or remove", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDYzNTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/FafService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNToyNVrOH_YQ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo0Mjo1MFrOIABp2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ==", "bodyText": "I know it was there before, but now it looks even more like a code smell \ud83e\udd14", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536219889", "createdAt": "2020-12-04T16:25:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MDYyNQ==", "bodyText": "What exactly? Or the whole thing?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536660625", "createdAt": "2020-12-05T10:29:55Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NTIxMA==", "bodyText": "The integer that is returned as well. Calculating page sizes / page numbers is not a problem tied to map beans, it applies to every collection and it could go into some util function.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536895210", "createdAt": "2020-12-05T21:24:19Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5Njg0OA==", "bodyText": "Just as a note for all other api calls the api gives us the total page number. However it doesnt do that for the mapPool maps currently which is why it needs to be calculated here.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536896848", "createdAt": "2020-12-05T21:35:01Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5ODAxMA==", "bodyText": "I agree, but all the other api calls use pagination to limit the api call itself. This one is the only one (yet) that has to limit the returning result. What would an appropriate place for the helper function be?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536898010", "createdAt": "2020-12-05T21:42:50Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY0MTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNjo0OFrOH_YUuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNjo0OFrOH_YUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMDg1Nw==", "bodyText": "Underscores in variables and methods names are a no-go.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536220857", "createdAt": "2020-12-04T16:26:48Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class AcceptPartyInviteMessage extends ClientMessage {\n+\n+  private Integer sender_id;\n+\n+  public AcceptPartyInviteMessage(Integer sender_id) {\n+    super(ClientMessageType.ACCEPT_PARTY_INVITE);\n+    this.sender_id = sender_id;\n+  }\n+\n+  public Integer getSender_id() {\n+    return sender_id;\n+  }\n+\n+  public void setSender_id(Integer sender_id) {\n+    this.sender_id = sender_id;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY0NjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzozMlrOH_YXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzozMlrOH_YXpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTYwNA==", "bodyText": "Underscores in variables are a no-go.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221604", "createdAt": "2020-12-04T16:27:32Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.faforever.client.remote.domain;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class GameMatchmakingMessage extends ClientMessage {\n+\n+  private final String queue_name;\n+  private final MatchmakingState state;\n+\n+  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n+    super(ClientMessageType.GAME_MATCHMAKING);\n+    this.queue_name = queue_name;\n+    this.state = state;\n+  }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY0NzkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzo0M1rOH_YYRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzo0M1rOH_YYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTc2Nw==", "bodyText": "stop it", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221767", "createdAt": "2020-12-04T16:27:43Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class InviteToPartyMessage extends ClientMessage {\n+\n+  private Integer recipient_id;\n+\n+  public InviteToPartyMessage(Integer recipient_id) {\n+    super(ClientMessageType.INVITE_TO_PARTY);\n+    this.recipient_id = recipient_id;\n+  }\n+\n+  public Integer getRecipient_id() {\n+    return recipient_id;\n+  }\n+\n+  public void setRecipient_id(Integer recipient_id) {\n+    this.recipient_id = recipient_id;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY0OTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzo1OVrOH_YZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzo1OVrOH_YZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTk1NQ==", "bodyText": "my eyes!! \ud83d\udc40", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221955", "createdAt": "2020-12-04T16:27:59Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class KickPlayerFromPartyMessage extends ClientMessage {\n+\n+  private Integer kicked_player_id;\n+\n+  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n+    super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+\n+  public Integer getKicked_player_id() {\n+    return kicked_player_id;\n+  }\n+\n+  public void setKicked_player_id(Integer kicked_player_id) {\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY1Mzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/MatchmakingState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyOTowMFrOH_Ybug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyOTowMFrOH_Ybug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMjY1MA==", "bodyText": "Please put line breaks after each stream operation", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536222650", "createdAt": "2020-12-04T16:29:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/MatchmakingState.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.faforever.client.remote.domain;\n+\n+import java.util.Arrays;\n+\n+public enum MatchmakingState {\n+  START(\"start\"), STOP(\"stop\");\n+\n+  private String string;\n+\n+  MatchmakingState(String string) {\n+    this.string = string;\n+  }\n+\n+  public static MatchmakingState fromString(String string) {\n+    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY1ODc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMDowOFrOH_YepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMDowOFrOH_YepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMzM5Ng==", "bodyText": "Use lombok instead", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536223396", "createdAt": "2020-12-04T16:30:08Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.remote.domain;\n+\n+public class PartyInviteMessage extends FafServerMessage {\n+\n+  private Integer sender;\n+\n+  public PartyInviteMessage() {\n+    super(FafServerMessageType.PARTY_INVITE);\n+  }\n+\n+  public Integer getSender() {\n+    return sender;\n+  }\n+\n+  public void setSender(Integer sender) {\n+    this.sender = sender;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY2MDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMDozMVrOH_YfnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMDozMVrOH_YfnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMzY0NQ==", "bodyText": "Use lombok instead", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536223645", "createdAt": "2020-12-04T16:30:31Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.faforever.client.remote.domain;\n+\n+import com.faforever.client.game.Faction;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class SetPartyFactionsMessage extends ClientMessage {\n+\n+  private List<String> factions;\n+\n+  public SetPartyFactionsMessage(List<Faction> factions) {\n+    super(ClientMessageType.SET_PARTY_FACTIONS);\n+    this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n+  }\n+\n+  public List<String> getFactions() {\n+    return factions;\n+  }\n+\n+  public void setFactions(List<String> factions) {\n+    this.factions = factions;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY3MDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMjo0M1rOH_YlSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDoyMTowN1rOIARk3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw==", "bodyText": "Wait what? An object isn't allowed to change itself outside of the main thread?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536225097", "createdAt": "2020-12-04T16:32:43Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4OTU2NA==", "bodyText": "This seems fishy it should be able to run outside the main thread unless it is bound to some graphic somewhere", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536789564", "createdAt": "2020-12-05T14:29:03Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1ODg3Ng==", "bodyText": "There are a lot of graphical bindings to this, so it is necessary", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r537158876", "createdAt": "2020-12-07T00:21:07Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY3MTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMzowNlrOH_YmNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMzowNlrOH_YmNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTMzNQ==", "bodyText": "use List.of(message.getOwner())", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536225335", "createdAt": "2020-12-04T16:33:06Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY3OTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozNDo0N1rOH_Yqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozNDo0N1rOH_Yqhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNjQzOQ==", "bodyText": "This is a heavy violation of separation of concerns. This method is NOT allowed in a dto. Put it into the playerservice or wherever you need it.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536226439", "createdAt": "2020-12-04T16:34:47Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY4MjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozNTozN1rOH_YsxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozNTozN1rOH_YsxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNzAxMg==", "bodyText": "The nested complexitiy of these lines is too damn high. Outsource it in functions or at least improve formatting with proper linebreaking on each stream.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536227012", "createdAt": "2020-12-04T16:35:37Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY5NDkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozODoxOFrOH_Yz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozODoxOFrOH_Yz4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyODgzMw==", "bodyText": "Revert revert! :D", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536228833", "createdAt": "2020-12-04T16:38:18Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java", "diffHunk": "@@ -233,6 +234,7 @@ public void testOnChatMessageAction() {\n   }\n \n   @Test\n+  @Ignore // TODO: REVERT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY5NjU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozODozOVrOH_Y0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMToxOTo1MlrOIABcgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTA2OA==", "bodyText": "I guess this block can be removed now.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536229068", "createdAt": "2020-12-04T16:38:39Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -484,80 +479,83 @@ public void testOnGameInfoRemove() {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  @Test\n-  public void testStartSearchLadder1v1() throws Exception {\n-    int uid = 123;\n-    String map = \"scmp_037\";\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-        .expectedPlayers(2)\n-        .faction(CYBRAN)\n-        .initMode(LobbyMode.AUTO_LOBBY)\n-        .mapPosition(4)\n-        .team(1)\n-        .get();\n-\n-    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-\n-    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-    when(mapService.isInstalled(map)).thenReturn(false);\n-    when(mapService.download(map)).thenReturn(completedFuture(null));\n-    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-\n-    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-\n-    verify(fafService).startSearchLadder1v1(CYBRAN);\n-    verify(mapService).download(map);\n-    verify(replayService).start(eq(uid), any());\n-    verify(forgedAllianceService).startGame(\n-        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-    Process process = mock(Process.class);\n-    when(process.isAlive()).thenReturn(true);\n-\n-    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-\n-    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-\n-    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        gameRunningLatch.countDown();\n-      }\n-    });\n-\n-    instance.hostGame(newGameInfo);\n-    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-\n-    instance.startSearchLadder1v1(AEON);\n-\n-    assertThat(instance.searching1v1Property().get(), is(false));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NDU5Mw==", "bodyText": "same here", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536894593", "createdAt": "2020-12-05T21:19:52Z", "author": {"login": "BlackYps"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -484,80 +479,83 @@ public void testOnGameInfoRemove() {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  @Test\n-  public void testStartSearchLadder1v1() throws Exception {\n-    int uid = 123;\n-    String map = \"scmp_037\";\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-        .expectedPlayers(2)\n-        .faction(CYBRAN)\n-        .initMode(LobbyMode.AUTO_LOBBY)\n-        .mapPosition(4)\n-        .team(1)\n-        .get();\n-\n-    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-\n-    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-    when(mapService.isInstalled(map)).thenReturn(false);\n-    when(mapService.download(map)).thenReturn(completedFuture(null));\n-    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-\n-    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-\n-    verify(fafService).startSearchLadder1v1(CYBRAN);\n-    verify(mapService).download(map);\n-    verify(replayService).start(eq(uid), any());\n-    verify(forgedAllianceService).startGame(\n-        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-    Process process = mock(Process.class);\n-    when(process.isAlive()).thenReturn(true);\n-\n-    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-\n-    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-\n-    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        gameRunningLatch.countDown();\n-      }\n-    });\n-\n-    instance.hostGame(newGameInfo);\n-    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-\n-    instance.startSearchLadder1v1(AEON);\n-\n-    assertThat(instance.searching1v1Property().get(), is(false));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTA2OA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY5NzM4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozODo1MlrOH_Y1SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMToxOToyMVrOIABcOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg==", "bodyText": "Can be removed now as well?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536229192", "createdAt": "2020-12-04T16:38:52Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -629,12 +627,13 @@ public void runWithLiveReplayIfNoGameSet() {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchLadder1v1IfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchLadder1v1(null);\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgwMDMwNA==", "bodyText": "I think it needs to be reimplemented otherwise there is no test for this I think", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536800304", "createdAt": "2020-12-05T14:48:23Z", "author": {"login": "Sheikah45"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -629,12 +627,13 @@ public void runWithLiveReplayIfNoGameSet() {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchLadder1v1IfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchLadder1v1(null);\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NDUyMQ==", "bodyText": "Reimplementing this was surprisingly easy", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536894521", "createdAt": "2020-12-05T21:19:21Z", "author": {"login": "BlackYps"}, "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -629,12 +627,13 @@ public void runWithLiveReplayIfNoGameSet() {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchLadder1v1IfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchLadder1v1(null);\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDcwNDE0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0MDoyNlrOH_Y5MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0MDoyNlrOH_Y5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMDE5Mw==", "bodyText": "I see a lot of empty tests there.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536230193", "createdAt": "2020-12-04T16:40:26Z", "author": {"login": "Brutus5000"}, "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.google.common.eventbus.EventBus;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.notification.Severity.INFO;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUyNDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMToyNVrOH_gYbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMToyNVrOH_gYbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjg3Nw==", "bodyText": "playerTextField.getText().isBlank()", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536352877", "createdAt": "2020-12-04T20:11:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUyNTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMTozNlrOH_gY5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoyMzo0MFrOH_646Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng==", "bodyText": "Is this todo still relevant?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536352996", "createdAt": "2020-12-04T20:11:36Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcxMjcxNQ==", "bodyText": "seems to be already implemented", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536712715", "createdAt": "2020-12-05T12:03:46Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NzE3Nw==", "bodyText": "So the TODO should be removed then", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536787177", "createdAt": "2020-12-05T14:23:40Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUyNjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMjowNFrOH_gZ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMjowNFrOH_gZ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzI0Ng==", "bodyText": "Line breaks in the stream operations improves readability", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536353246", "createdAt": "2020-12-04T20:12:04Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          } else {\n+            return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n+          }\n+        }, playerTextField.textProperty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUyNzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMjoxMFrOH_gaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMjoxMFrOH_gaFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzMwMA==", "bodyText": "Remove?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536353300", "createdAt": "2020-12-04T20:12:10Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          } else {\n+            return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n+          }\n+        }, playerTextField.textProperty()\n+    ));\n+\n+    //TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUzOTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxNjowMFrOH_ghPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxNjowMFrOH_ghPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NTEzMg==", "bodyText": "Isn't the toUpperCase something that should be configurable in the control via css or something?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536355132", "createdAt": "2020-12-04T20:16:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<Node> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public Node queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+\n+  private Timeline queuePopTimeUpdater;\n+\n+  private MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU0NzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxODowMVrOH_glVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDozNjozOFrOH_7QTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ==", "bodyText": "Don't tell me it's hacky without telling what and why. I assume the WeakReference is meant here, but it I don't know for sure.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536356181", "createdAt": "2020-12-04T20:18:01Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyODcwNw==", "bodyText": "I don't know either. That comment is from Geosearchef.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536428707", "createdAt": "2020-12-04T22:47:00Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MjA0Mg==", "bodyText": "a214cbd", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536662042", "createdAt": "2020-12-05T10:32:10Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MDIyMw==", "bodyText": "The contextmenu is separable from the chatUser which might be the thing to do here as I don't understand why the chatUser is necessary if all we want is a context menu", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536790223", "createdAt": "2020-12-05T14:30:33Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MzE2Ng==", "bodyText": "This also seems like it would be a different context menu", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536793166", "createdAt": "2020-12-05T14:36:38Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU4NDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoyODo0OFrOH_g6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMToyNjo1OFrOIABgaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw==", "bodyText": "StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()\nIf the string is empty it's empty? Thanks captain.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536361567", "createdAt": "2020-12-04T20:28:48Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMDM1Mg==", "bodyText": "This seems to be a nullcheck, no?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536430352", "createdAt": "2020-12-04T22:51:21Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NTU5NQ==", "bodyText": "Yes, but the CountryFlagService.loadCountryFlag has null handling builtin ^^", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536895595", "createdAt": "2020-12-05T21:26:58Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU5NDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMjowMFrOH_hARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMjowMFrOH_hARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MzA3Ng==", "bodyText": "Use @RequiredArgsConstructor", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536363076", "createdAt": "2020-12-04T20:32:00Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU5Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMjozOVrOH_hBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMjozOVrOH_hBbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MzM3Mw==", "bodyText": "Again here StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry() seems  useless.\nAnd duplicate code", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536363373", "createdAt": "2020-12-04T20:32:39Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYwMjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNDoyNVrOH_hEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTowOToxM1rOH_iFXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA==", "bodyText": "Can this not be done via css? Then it would be completely redundant (handled in FXML)", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536364184", "createdAt": "2020-12-04T20:34:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3NDUyMg==", "bodyText": "I wish! CSS can do that, but the \"special\" css for javafx cannot :(", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536374522", "createdAt": "2020-12-04T20:56:00Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4MDc2Nw==", "bodyText": "Shame", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536380767", "createdAt": "2020-12-04T21:09:13Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA=="}, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYwNjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNTo1MFrOH_hHNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNTo1MFrOH_hHNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDg1Mg==", "bodyText": "As stated earlier, this should be outsourced into a dedicated function", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536364852", "createdAt": "2020-12-04T20:35:50Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+    }, teamMatchmakingService.getParty().ownerProperty()));\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    Dialog dialog = uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.setPartyFactions(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    JavaFxUtil.assertApplicationThread();\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    chatTabPane.getTabs().clear();\n+    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYwNzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNjoxMlrOH_hH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNjoxMlrOH_hH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTAzMA==", "bodyText": "If not needed remove Initializing bean or use @RequiredArgsConstructor and do all the current constructor logic here.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365030", "createdAt": "2020-12-04T20:36:12Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYxMDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNjo1NlrOH_hJTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozNjo1NlrOH_hJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTM5MQ==", "bodyText": "line breaks after the stream operators", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365391", "createdAt": "2020-12-04T20:36:56Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n+  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+    this.fafServerAccessor = fafServerAccessor;\n+    this.playerService = playerService;\n+    this.notificationService = notificationService;\n+    this.preferencesService = preferencesService;\n+    this.fafService = fafService;\n+    this.eventBus = eventBus;\n+    this.i18n = i18n;\n+    this.taskScheduler = taskScheduler;\n+    this.gameService = gameService;\n+\n+    fafService.addOnMessageListener(PartyInviteMessage.class, this::onPartyInvite);\n+    fafService.addOnMessageListener(PartyKickedMessage.class, this::onPartyKicked);\n+    fafService.addOnMessageListener(PartyInfoMessage.class, this::onPartyInfo);\n+    fafService.addOnMessageListener(SearchInfoMessage.class, this::onSearchInfoMessage);\n+    fafService.addOnMessageListener(MatchFoundMessage.class, this::onMatchFoundMessage);\n+    fafService.addOnMessageListener(MatchCancelledMessage.class, this::onMatchCancelledMessage);\n+    fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n+    fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == ConnectionState.DISCONNECTED) {\n+        Platform.runLater(() -> initParty(playerService.getCurrentPlayer().get()));\n+      }\n+    });\n+\n+    fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n+\n+    party = new Party();\n+\n+    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n+        Platform.runLater(() -> initParty(player));\n+      }\n+    });\n+\n+    playerService.getCurrentPlayer().ifPresent(this::initParty);\n+  }\n+\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+    List<CompletableFuture<?>> futures = new ArrayList<>();\n+    message.getQueues().forEach(remoteQueue -> {\n+      MatchmakingQueue localQueue = matchmakingQueues.stream()\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYxMzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozODowNFrOH_hLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozODowNFrOH_hLDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTgzNw==", "bodyText": "linebreaks after each stream operator", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365837", "createdAt": "2020-12-04T20:38:04Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n+  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+    this.fafServerAccessor = fafServerAccessor;\n+    this.playerService = playerService;\n+    this.notificationService = notificationService;\n+    this.preferencesService = preferencesService;\n+    this.fafService = fafService;\n+    this.eventBus = eventBus;\n+    this.i18n = i18n;\n+    this.taskScheduler = taskScheduler;\n+    this.gameService = gameService;\n+\n+    fafService.addOnMessageListener(PartyInviteMessage.class, this::onPartyInvite);\n+    fafService.addOnMessageListener(PartyKickedMessage.class, this::onPartyKicked);\n+    fafService.addOnMessageListener(PartyInfoMessage.class, this::onPartyInfo);\n+    fafService.addOnMessageListener(SearchInfoMessage.class, this::onSearchInfoMessage);\n+    fafService.addOnMessageListener(MatchFoundMessage.class, this::onMatchFoundMessage);\n+    fafService.addOnMessageListener(MatchCancelledMessage.class, this::onMatchCancelledMessage);\n+    fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n+    fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == ConnectionState.DISCONNECTED) {\n+        Platform.runLater(() -> initParty(playerService.getCurrentPlayer().get()));\n+      }\n+    });\n+\n+    fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n+\n+    party = new Party();\n+\n+    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n+        Platform.runLater(() -> initParty(player));\n+      }\n+    });\n+\n+    playerService.getCurrentPlayer().ifPresent(this::initParty);\n+  }\n+\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+    List<CompletableFuture<?>> futures = new ArrayList<>();\n+    message.getQueues().forEach(remoteQueue -> {\n+      MatchmakingQueue localQueue = matchmakingQueues.stream()\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n+      if (localQueue == null) {\n+        queuesAdded = true;\n+        CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n+        futures.add(future);\n+        future.thenAccept(result -> result.ifPresent(\n+            matchmakingQueue -> {\n+              matchmakingQueues.add(matchmakingQueue);\n+              matchmakingQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n+              matchmakingQueue.setTeamSize(remoteQueue.getTeamSize());\n+              matchmakingQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n+              Platform.runLater(() -> matchmakingQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n+            }));\n+      } else {\n+        localQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n+        localQueue.setTeamSize(remoteQueue.getTeamSize());\n+        localQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n+        Platform.runLater(() -> localQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n+      }\n+    });\n+\n+    CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])).thenRun(() -> {\n+      if (queuesAdded) {\n+        eventBus.post(new QueuesAddedEvent());\n+        queuesAdded = false;\n+      }\n+    });\n+  }\n+\n+  protected void onSearchInfoMessage(SearchInfoMessage message) {\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueueName())).forEach(q -> {\n+          Platform.runLater(() -> {\n+            q.setJoined(message.getState() == MatchmakingState.START);\n+            leaveQueueTimeouts.forEach(f -> f.cancel(false));\n+          });\n+\n+          //TODO: check current state / other queues\n+          if (message.getState() == MatchmakingState.START) {\n+            gameService.startSearchMatchmaker();\n+\n+            // Send own factions to server upon joining a queue\n+            Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n+                .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n+                .findFirst();\n+            ownPartyMember.ifPresent(m -> setPartyFactions(m.getFactions()));\n+          }\n+        }\n+    );\n+\n+    if (matchmakingQueues.stream().noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n+        && message.getState() != MatchmakingState.START // catches same race condition\n+        && !matchFoundAndWaitingForGameLaunch) {\n+      gameService.onMatchmakerSearchStopped();\n+    }\n+  }\n+\n+  private void onMatchFoundMessage(MatchFoundMessage message) {\n+    matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n+\n+    notificationService.addNotification(new TransientNotification(\n+        i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n+        i18n.get(\"teammatchmaking.notification.matchFound.message\")\n+    ));\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueue())).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler);\n+    });\n+\n+    matchmakingQueues.forEach(q -> q.setJoined(false));\n+  }\n+\n+  private void onMatchCancelledMessage(MatchCancelledMessage message) {\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler);\n+    });\n+\n+    matchFoundAndWaitingForGameLaunch = false;\n+    gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n+  }\n+\n+  private void onGameLaunchMessage(GameLaunchMessage message) {\n+    if (message.getInitMode() != LobbyMode.AUTO_LOBBY) {\n+      return;\n+    }\n+\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eb981194e2bb5d6af3ea25e6276720252355e"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODQ2NDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/game/GameService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxNDo0NFrOH_6o8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMTowOTozMVrOIE5bhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzA4OQ==", "bodyText": "Can this TODO be resolved?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536783089", "createdAt": "2020-12-05T14:14:44Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -505,27 +518,23 @@ public Game getByUid(int uid) {\n     return game;\n   }\n \n-  public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage> listener) {\n-    fafService.addOnMessageListener(MatchmakerInfoMessage.class, listener);\n-  }\n-\n-  public CompletableFuture<Void> startSearchLadder1v1(Faction faction) {\n+  public CompletableFuture<Void> startSearchMatchmaker() {\n     if (isRunning()) {\n-      log.debug(\"Game is running, ignoring 1v1 search request\");\n+      log.debug(\"Game is running, ignoring matchmaking search request\");\n       notificationService.addImmediateErrorNotification(new UnsupportedOperationException(\"Forged Alliances is already running\"), \"game.gameRunning\");\n       return completedFuture(null);\n     }\n \n     if (!preferencesService.isGamePathValid()) {\n       CompletableFuture<Path> gameDirectoryFuture = postGameDirectoryChooseEvent();\n-      return gameDirectoryFuture.thenCompose(path -> startSearchLadder1v1(faction));\n+      return gameDirectoryFuture.thenCompose(path -> startSearchMatchmaker());\n     }\n \n-    searching1v1.set(true);\n+    inMatchmakerQueue.set(true);\n \n-    return modService.getFeaturedMod(LADDER_1V1.getTechnicalName())\n+    return modService.getFeaturedMod(FAF.getTechnicalName())//TODO: use matchmaking featured mod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjE0OA==", "bodyText": "FAF is the right featured mod for the matchmaker. I will delete the todo", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542006148", "createdAt": "2020-12-13T21:09:31Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -505,27 +518,23 @@ public Game getByUid(int uid) {\n     return game;\n   }\n \n-  public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage> listener) {\n-    fafService.addOnMessageListener(MatchmakerInfoMessage.class, listener);\n-  }\n-\n-  public CompletableFuture<Void> startSearchLadder1v1(Faction faction) {\n+  public CompletableFuture<Void> startSearchMatchmaker() {\n     if (isRunning()) {\n-      log.debug(\"Game is running, ignoring 1v1 search request\");\n+      log.debug(\"Game is running, ignoring matchmaking search request\");\n       notificationService.addImmediateErrorNotification(new UnsupportedOperationException(\"Forged Alliances is already running\"), \"game.gameRunning\");\n       return completedFuture(null);\n     }\n \n     if (!preferencesService.isGamePathValid()) {\n       CompletableFuture<Path> gameDirectoryFuture = postGameDirectoryChooseEvent();\n-      return gameDirectoryFuture.thenCompose(path -> startSearchLadder1v1(faction));\n+      return gameDirectoryFuture.thenCompose(path -> startSearchMatchmaker());\n     }\n \n-    searching1v1.set(true);\n+    inMatchmakerQueue.set(true);\n \n-    return modService.getFeaturedMod(LADDER_1V1.getTechnicalName())\n+    return modService.getFeaturedMod(FAF.getTechnicalName())//TODO: use matchmaking featured mod", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzA4OQ=="}, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODQ2NTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/game/GameService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxNToxNFrOH_6pqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMToyMzowNlrOIE5ksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzI3NA==", "bodyText": "This one seems needed as well unless I am missing something", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536783274", "createdAt": "2020-12-05T14:15:14Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +543,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwODQ5OA==", "bodyText": "This is for displaying the right rating in the game. We should grab the appropriate leaderboard from the queue information once #1791 is implemented.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542008498", "createdAt": "2020-12-13T21:23:06Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +543,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzI3NA=="}, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODQ4MDE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoyMDoxM1rOH_6yzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzoyMToxNVrOH_9RQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NTYxMg==", "bodyText": "I believe these can be removed with the @DaTa at top", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536785612", "createdAt": "2020-12-05T14:20:13Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -4,86 +4,47 @@\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  @Data\n   public static class MatchmakerQueue {\n \n-    private QueueName queueName;\n+    private String queueName;\n     private String queuePopTime;\n+    @SerializedName(\"team_size\")\n+    private int teamSize;\n+    @SerializedName(\"num_players\")\n+    private int numPlayers;\n+\n+    // The boundaries indicate the ranges applicable for other searching players,\n+    // boundarys.size() therefore indicates the players currently in queue\n     @SerializedName(\"boundary_75s\")\n     private List<RatingRange> boundary75s;\n     @SerializedName(\"boundary_80s\")\n     private List<RatingRange> boundary80s;\n \n-    public static enum QueueName {\n-      @SerializedName(\"ladder1v1\")\n-      LADDER_1V1\n-    }\n-\n-    public MatchmakerQueue(QueueName queueName, String queuePopTime, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n+    public MatchmakerQueue(String queueName, String queuePopTime, int teamSize, int numPlayers, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n       this.queueName = queueName;\n       this.queuePopTime = queuePopTime;\n+      this.teamSize = teamSize;\n+      this.numPlayers = numPlayers;\n       this.boundary75s = boundary75s;\n       this.boundary80s = boundary80s;\n     }\n \n-    public QueueName getQueueName() {\n-      return queueName;\n-    }\n-\n-    public void setQueueName(QueueName queueName) {\n-      this.queueName = queueName;\n-    }\n-\n-    public String getQueuePopTime() {\n-      return queuePopTime;\n-    }\n-\n-    public void setQueuePopTime(String queuePopTime) {\n-      this.queuePopTime = queuePopTime;\n-    }\n-\n-    public List<RatingRange> getBoundary75s() {\n-      return boundary75s;\n-    }\n-\n-    public void setBoundary75s(List<RatingRange> boundary75s) {\n-      this.boundary75s = boundary75s;\n-    }\n-\n-    public List<RatingRange> getBoundary80s() {\n-      return boundary80s;\n-    }\n-\n-    public void setBoundary80s(List<RatingRange> boundary80s) {\n-      this.boundary80s = boundary80s;\n-    }\n   }\n-\n-  private String action;\n+  @Getter\n+  @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNjE3OA==", "bodyText": "The @DaTa annotation is only for the nested class", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536826178", "createdAt": "2020-12-05T17:21:15Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -4,86 +4,47 @@\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  @Data\n   public static class MatchmakerQueue {\n \n-    private QueueName queueName;\n+    private String queueName;\n     private String queuePopTime;\n+    @SerializedName(\"team_size\")\n+    private int teamSize;\n+    @SerializedName(\"num_players\")\n+    private int numPlayers;\n+\n+    // The boundaries indicate the ranges applicable for other searching players,\n+    // boundarys.size() therefore indicates the players currently in queue\n     @SerializedName(\"boundary_75s\")\n     private List<RatingRange> boundary75s;\n     @SerializedName(\"boundary_80s\")\n     private List<RatingRange> boundary80s;\n \n-    public static enum QueueName {\n-      @SerializedName(\"ladder1v1\")\n-      LADDER_1V1\n-    }\n-\n-    public MatchmakerQueue(QueueName queueName, String queuePopTime, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n+    public MatchmakerQueue(String queueName, String queuePopTime, int teamSize, int numPlayers, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n       this.queueName = queueName;\n       this.queuePopTime = queuePopTime;\n+      this.teamSize = teamSize;\n+      this.numPlayers = numPlayers;\n       this.boundary75s = boundary75s;\n       this.boundary80s = boundary80s;\n     }\n \n-    public QueueName getQueueName() {\n-      return queueName;\n-    }\n-\n-    public void setQueueName(QueueName queueName) {\n-      this.queueName = queueName;\n-    }\n-\n-    public String getQueuePopTime() {\n-      return queuePopTime;\n-    }\n-\n-    public void setQueuePopTime(String queuePopTime) {\n-      this.queuePopTime = queuePopTime;\n-    }\n-\n-    public List<RatingRange> getBoundary75s() {\n-      return boundary75s;\n-    }\n-\n-    public void setBoundary75s(List<RatingRange> boundary75s) {\n-      this.boundary75s = boundary75s;\n-    }\n-\n-    public List<RatingRange> getBoundary80s() {\n-      return boundary80s;\n-    }\n-\n-    public void setBoundary80s(List<RatingRange> boundary80s) {\n-      this.boundary80s = boundary80s;\n-    }\n   }\n-\n-  private String action;\n+  @Getter\n+  @Setter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NTYxMg=="}, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODQ5NTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoyNTo0NFrOH_68Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoyNTo0NFrOH_68Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4ODA2Ng==", "bodyText": "JavaFxUtil.bindManagedToVisible", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536788066", "createdAt": "2020-12-05T14:25:44Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<Node> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public Node queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+\n+  private Timeline queuePopTimeUpdater;\n+\n+  private MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n+        queue.playersInQueueProperty()));\n+\n+    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n+    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n+    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODUyMTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDozNDozN1rOH_7Mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozMTozM1rOIFb5ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MjIzOQ==", "bodyText": "We need to make sure this listener is removed if a player leaves the party", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536792239", "createdAt": "2020-12-05T14:34:37Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private ChatChannelUser chatUser;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.hasText(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+    gameCountLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n+        player.numberOfGamesProperty()));\n+\n+    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n+    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n+    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n+    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == PlayerStatus.IDLE) {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(false);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        });\n+      } else {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(true);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        });\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MDkxNQ==", "bodyText": "Everytime a partymember leaves or joines the player cards get rerendered, that means it clears all children from the pane and instantiates new controllers. I am not sure, if this also cleans up the controllers, or if we need to do some form of garbage collection", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542570915", "createdAt": "2020-12-14T17:31:33Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private ChatChannelUser chatUser;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.hasText(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+    gameCountLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n+        player.numberOfGamesProperty()));\n+\n+    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n+    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n+    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n+    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == PlayerStatus.IDLE) {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(false);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        });\n+      } else {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(true);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        });\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MjIzOQ=="}, "originalCommit": {"oid": "506f696bf0fb72c82a1dd6569b1d24c461397b05"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTA4NzI2OnYy", "diffSide": "RIGHT", "path": ".github/workflows/checks.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjozOTo1NlrOIE6aWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjo0Mjo1OFrOIE9mOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjIzNQ==", "bodyText": "Should not be part of this PR", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022235", "createdAt": "2020-12-13T22:39:56Z", "author": {"login": "1-alex98"}, "path": ".github/workflows/checks.yml", "diffHunk": "@@ -0,0 +1,40 @@\n+# This workflow will build a Java project with Gradle\n+# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle\n+\n+name: Checks\n+\n+on:\n+  push:\n+    branches: [ develop ]\n+  pull_request:\n+    branches: [ develop ]\n+\n+jobs:\n+  checks:\n+\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+\n+      - name: Set up JDK 15.0.1\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 15.0.1\n+          java-package: jdk+fx\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NDQyNA==", "bodyText": "as a note this was just added to allow for releasing via github actions for the test today and should disappear once the branch is rebased on develop", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542074424", "createdAt": "2020-12-14T02:42:58Z", "author": {"login": "Sheikah45"}, "path": ".github/workflows/checks.yml", "diffHunk": "@@ -0,0 +1,40 @@\n+# This workflow will build a Java project with Gradle\n+# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle\n+\n+name: Checks\n+\n+on:\n+  push:\n+    branches: [ develop ]\n+  pull_request:\n+    branches: [ develop ]\n+\n+jobs:\n+  checks:\n+\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+\n+      - name: Set up JDK 15.0.1\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 15.0.1\n+          java-package: jdk+fx\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjIzNQ=="}, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTA4ODQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/remote/MockFafServerAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0MDo1MVrOIE6a5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozMjo1OFrOIFWNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjM3Mg==", "bodyText": "TODO what also refer to an issue if you make a TODO", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022372", "createdAt": "2020-12-13T22:40:51Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/remote/MockFafServerAccessor.java", "diffHunk": "@@ -245,17 +234,17 @@ public void requestMatchmakerInfo() {\n   }\n \n   @Override\n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    logger.debug(\"Searching 1v1 match with faction: {}\", faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    logger.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n+    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName()); // TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzU3OQ==", "bodyText": "I am not sure, I guess it refers to changing the gamemode to a matchmaking mode. However we use FAF gamemode, so I guess this todo is obsolete.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542477579", "createdAt": "2020-12-14T15:32:58Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/remote/MockFafServerAccessor.java", "diffHunk": "@@ -245,17 +234,17 @@ public void requestMatchmakerInfo() {\n   }\n \n   @Override\n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    logger.debug(\"Searching 1v1 match with faction: {}\", faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    logger.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n+    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName()); // TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjM3Mg=="}, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTA5MTg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0Mjo0OVrOIE6cYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0Mjo0OVrOIE6cYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjc1NQ==", "bodyText": "Extract into method", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022755", "createdAt": "2020-12-13T22:42:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.VBox;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<VBox> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public VBox queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+  @VisibleForTesting\n+  protected MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n+        queue.playersInQueueProperty()));\n+\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+    queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n+      disableMatchStatus();\n+      if (newValue == null) {\n+        return;\n+      }\n+      switch (newValue) {\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+      }\n+    });\n+\n+    joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+    ));\n+    queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n+    queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n+\n+    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+\n+    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+      if (queue.getQueuePopTime() != null) {\n+        Instant now = Instant.now();\n+        Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n+        if (!timeUntilPopQueue.isNegative()) {\n+          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n+              timeUntilPopQueue.toMinutes(),\n+              timeUntilPopQueue.toSecondsPart()).toUpperCase());\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTA5MjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0MzozNVrOIE6csQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0MzozNVrOIE6csQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjgzMw==", "bodyText": "the method is a little long", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022833", "createdAt": "2020-12-13T22:43:35Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.VBox;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<VBox> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public VBox queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+  @VisibleForTesting\n+  protected MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTA5NDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0NDozNVrOIE6dmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMjo0NDozNVrOIE6dmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMzA2Ng==", "bodyText": "extract method", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542023066", "createdAt": "2020-12-13T22:44:35Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1) {\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        } else {\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba436113c98b78d863a04b0dcec8154039b5c14f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzM3OTcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDozNzoyOVrOIJaaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDozNzoyOVrOIJaaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MDgyNw==", "bodyText": "empty test", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546740827", "createdAt": "2020-12-21T14:37:29Z", "author": {"login": "Sheikah45"}, "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage.MatchmakerQueue;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.google.common.eventbus.EventBus;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.faforever.client.notification.Severity.INFO;\n+import static com.faforever.client.notification.Severity.WARN;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private FafServerAccessor fafServerAccessor;\n+  @Mock\n+  private PlayerService playerService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private FafService fafService;\n+  @Mock\n+  private EventBus eventBus;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private TaskScheduler taskScheduler;\n+  @Mock\n+  private GameService gameService;\n+  @Mock\n+  private Player player;\n+  @Mock\n+  private Player otherPlayer;\n+\n+  private TeamMatchmakingService instance;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    List<Player> playerList = new ArrayList<>();\n+    playerList.add(player);\n+    when(player.getStatus()).thenReturn(PlayerStatus.IDLE);\n+    when(playerService.getPlayersByIds(Collections.singletonList(1))).thenReturn(CompletableFuture.completedFuture(playerList));\n+    ReadOnlyObjectProperty<ConnectionState> state = new SimpleObjectProperty<>();\n+    when(fafService.connectionStateProperty()).thenReturn(state);\n+    ReadOnlyObjectProperty<Player> playerProperty = new SimpleObjectProperty<>();\n+    when(playerService.currentPlayerProperty()).thenReturn(playerProperty);\n+    instance = new TeamMatchmakingService(fafServerAccessor, playerService, notificationService, preferencesService,\n+        fafService, eventBus, i18n, taskScheduler, gameService);\n+\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(playerService.getCurrentPlayer()).thenReturn(Optional.of(player));\n+  }\n+\n+  private void setPartyMembers() {\n+    ObservableList<PartyMember> testMembers = FXCollections.observableArrayList();\n+    testMembers.add(new PartyMember(new Player(\"member1\")));\n+    testMembers.add(new PartyMember(new Player(\"member2\")));\n+    testMembers.add(new PartyMember(new Player(\"member3\")));\n+    testMembers.add(new PartyMember(player));\n+    instance.getParty().setMembers(testMembers);\n+    instance.getParty().setOwner(player);\n+  }\n+\n+  private void setOwnerByName(String owner) {\n+    instance.getParty().getMembers().stream()\n+        .filter(member -> member.getPlayer().getUsername().equals(owner))\n+        .findFirst()\n+        .ifPresent(partyMember1 -> instance.getParty().setOwner(partyMember1.getPlayer()));\n+  }\n+\n+  @Test\n+  public void testOnInviteMessage() {\n+    when(player.getUsername()).thenReturn(\"dummy\");\n+    PartyInviteMessage message = new PartyInviteMessage();\n+    message.setSender(1);\n+\n+    instance.onPartyInvite(message);\n+\n+    ArgumentCaptor<TransientNotification> captorTransient = ArgumentCaptor.forClass(TransientNotification.class);\n+    verify(notificationService).addNotification(captorTransient.capture());\n+    ArgumentCaptor<PersistentNotification> captorPersistent = ArgumentCaptor.forClass(PersistentNotification.class);\n+    verify(notificationService).addNotification(captorPersistent.capture());\n+    PersistentNotification persistentNotification = captorPersistent.getValue();\n+    assertThat(persistentNotification.getSeverity(), is(INFO));\n+    verify(i18n, times(2)).get(\"teammatchmaking.notification.invite.message\", \"dummy\");\n+  }\n+\n+  @Test\n+  public void testOnKickedFromPartyMessage() {\n+    setPartyMembers();\n+    setOwnerByName(\"member2\");\n+\n+    instance.onPartyKicked(new PartyKickedMessage());\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+    assertThat(instance.getPlayersInGame().isEmpty(), is(true));\n+  }\n+\n+  @Test\n+  public void testOnKickedFromPartyMessageWhenInGame() {\n+    setPartyMembers();\n+    setOwnerByName(\"member2\");\n+    when(player.getStatus()).thenReturn(PlayerStatus.PLAYING);\n+\n+    instance.onPartyKicked(new PartyKickedMessage());\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+    assertThat(instance.getPlayersInGame().size(), is(1));\n+    assertThat(instance.getPlayersInGame().contains(player), is(true));\n+  }\n+\n+  @Test\n+  public void testOnPartyInfoMessagePlayerNotInParty() {\n+    when(playerService.getCurrentPlayer()).thenReturn(Optional.of(player));\n+    List<PartyInfoMessage.PartyMember> testMembers = FXCollections.observableArrayList();\n+    PartyInfoMessage.PartyMember member = new PartyInfoMessage.PartyMember();\n+    member.setPlayer(2);\n+    testMembers.add(member);\n+    PartyInfoMessage message = new PartyInfoMessage();\n+    message.setMembers(testMembers);\n+\n+    instance.onPartyInfo(message);\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+  }\n+\n+  @Test\n+  public void testOnPartyInfoMessage() {\n+\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857d045ad3caf57e21c8ec74f32171049a96cef9"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mjg4NDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/ChatController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQyMjoyOTowMFrOILmnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo1MTo1OVrOIL33dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzNzkxMQ==", "bodyText": "Needs to be a constant", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549037911", "createdAt": "2020-12-26T22:29:00Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -135,10 +136,10 @@ public void initialize() {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved()) {\n+      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDU2Nw==", "bodyText": "Overload isMatchmakerPartyMessage to take a String as well. Then use the dedicated function", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549320567", "createdAt": "2020-12-28T11:51:59Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -135,10 +136,10 @@ public void initialize() {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved()) {\n+      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzNzkxMQ=="}, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTE0NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo0OTozMlrOIL31CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMToxNjozMlrOIMNAjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxOTk0NA==", "bodyText": "Should this be cached as well?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549319944", "createdAt": "2020-12-28T11:49:32Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -427,28 +427,41 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2Njk1Nw==", "bodyText": "probably a good idea", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549666957", "createdAt": "2020-12-29T11:16:32Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -427,28 +427,41 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxOTk0NA=="}, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTE0NjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo1MDoyNVrOIL32Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzozMjozN1rOIL5nsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDE5OQ==", "bodyText": "We just changed this in the API to be properly camel case again", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549320199", "createdAt": "2020-12-28T11:50:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.Data;\n+import java.time.OffsetDateTime;\n+\n+@Data\n+@Type(\"leaderboard\")\n+public class Leaderboard {\n+  @Id\n+  private String id;\n+  private OffsetDateTime createTime;\n+  private OffsetDateTime updateTime;\n+  private String description_key;\n+  private String name_key;\n+  private String technical_name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0OTI5Ng==", "bodyText": "Brutus did this get changed to being camelCase after you reverted?", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549349296", "createdAt": "2020-12-28T13:32:37Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.Data;\n+import java.time.OffsetDateTime;\n+\n+@Data\n+@Type(\"leaderboard\")\n+public class Leaderboard {\n+  @Id\n+  private String id;\n+  private OffsetDateTime createTime;\n+  private OffsetDateTime updateTime;\n+  private String description_key;\n+  private String name_key;\n+  private String technical_name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDE5OQ=="}, "originalCommit": {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Nzk4MDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMzo1NTo1OVrOIMP3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMzo1NTo1OVrOIMP3Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcxMzY2Nw==", "bodyText": "I would include the leaderboard of the queue, although if the api did not change back to camelcase this may break it at the moment", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549713667", "createdAt": "2020-12-29T13:55:59Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -446,28 +446,42 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, ImmutableMap.of(INCLUDE, REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        INCLUDE, \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  }\n+\n+  @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n+  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODAzMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoxODo0N1rOIMQUsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoxODo0N1rOIMQUsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMTI2NA==", "bodyText": "This should be a constant as well ideally related to the one used for checking the channel name", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549721264", "createdAt": "2020-12-29T14:18:47Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,324 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODAzODMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoyMDo1NVrOIMQXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoyMDo1NVrOIMQXeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMTk3OA==", "bodyText": "constant", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549721978", "createdAt": "2020-12-29T14:20:55Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,324 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODA1OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/chat/ChatController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoyOTo1N1rOIMQjSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoyOTo1N1rOIMQjSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTAwMg==", "bodyText": "Would be good to have this as a constant to make referencing easier", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549725002", "createdAt": "2020-12-29T14:29:57Z", "author": {"login": "Sheikah45"}, "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -186,6 +189,14 @@ public void onChatMessage(ChatMessageEvent event) {\n     });\n   }\n \n+  private boolean isMatchmakerPartyMessage(ChatMessage message) {\n+    return message.getSource() != null && isMatchmakerPartyMessage(message.getSource());\n+  }\n+\n+  private boolean isMatchmakerPartyMessage(String channelName) {\n+    return channelName.endsWith(\"'sParty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMyMTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxNTo1NVrOIMS33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzo0MzowN1rOIMUm5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MzAzNg==", "bodyText": "why would that be synchronized? I mean it just executes in site PlatformRun.later ... That make is synchronized because there is only one UI Thread !!!", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763036", "createdAt": "2020-12-29T16:15:55Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);\n+      }\n+    });\n+  }\n+\n+  private synchronized void renderQueues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MTQ2MQ==", "bodyText": "That is leftover from my attempts to fix a bug with concurrent access to the queue list. Using the synchronized list should fix it. I'll delete it", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549791461", "createdAt": "2020-12-29T17:43:07Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);\n+      }\n+    });\n+  }\n+\n+  private synchronized void renderQueues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MzAzNg=="}, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMyNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxNzo0OVrOIMS6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxNzo0OVrOIMS6sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2Mzc2Mg==", "bodyText": "Since there might be a lot of messages received here. Only execute this very line on the UI  Thread no need to switch to the UI thread to check if the message is releavnt => 99% less execution on the UI thread for this action", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763762", "createdAt": "2020-12-29T16:17:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMyODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxODoyOFrOIMS7mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxODoyOFrOIMS7mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2Mzk5NA==", "bodyText": "remove new line", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763994", "createdAt": "2020-12-29T16:18:28Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMzMzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoyMDoyOVrOIMS-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzo1Nzo0MVrOIMU3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDY4OA==", "bodyText": "Create an issue and reference it", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549764688", "createdAt": "2020-12-29T16:20:29Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.beans.value.WeakChangeListener;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n+\n+    selectFactionsBasedOnParty();\n+  }\n+\n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5NTgzNg==", "bodyText": "The leagueservice has already been merged into faf stack. I think it is just a matter of time for deployment now. Or maybe there needs to be extra work done to create the api endpoints. I am not sure.", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549795836", "createdAt": "2020-12-29T17:57:41Z", "author": {"login": "BlackYps"}, "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.beans.value.WeakChangeListener;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n+\n+    selectFactionsBasedOnParty();\n+  }\n+\n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDY4OA=="}, "originalCommit": {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1998, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}