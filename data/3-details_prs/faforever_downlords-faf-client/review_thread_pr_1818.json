{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTQzODA3", "number": 1818, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NTozNlrOEMze3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxNTo0NlrOENXkLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODYxODU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/FafClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NTozNlrOGvIAHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjozNjo0NFrOGvkEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzM1Nw==", "bodyText": "This seems like 2 calls  the UI service could do as well (or at least the setFxStage). What do you think?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452067357", "createdAt": "2020-07-09T08:55:36Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/FafClientApplication.java", "diffHunk": "@@ -115,8 +117,12 @@ public PlatformService platformService() {\n     return new PlatformService(getHostServices());\n   }\n \n-  private void showMainWindow() {\n-    MainController controller = applicationContext.getBean(UiService.class).loadFxml(\"theme/main.fxml\");\n+  private void showMainWindow(FxStage fxWindow) {\n+    UiService uiService = applicationContext.getBean(UiService.class);\n+\n+    MainController controller = uiService.loadFxml(\"theme/main.fxml\");\n+\n+    controller.setFxStage(fxWindow);\n     controller.display();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzI4OQ==", "bodyText": "How would that look like?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452527289", "createdAt": "2020-07-09T22:36:44Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/FafClientApplication.java", "diffHunk": "@@ -115,8 +117,12 @@ public PlatformService platformService() {\n     return new PlatformService(getHostServices());\n   }\n \n-  private void showMainWindow() {\n-    MainController controller = applicationContext.getBean(UiService.class).loadFxml(\"theme/main.fxml\");\n+  private void showMainWindow(FxStage fxWindow) {\n+    UiService uiService = applicationContext.getBean(UiService.class);\n+\n+    MainController controller = uiService.loadFxml(\"theme/main.fxml\");\n+\n+    controller.setFxStage(fxWindow);\n     controller.display();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzM1Nw=="}, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODYyNTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/FafClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NzoyOFrOGvIEiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo0MDowM1rOGvkI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODQ5MQ==", "bodyText": "Unrelated question: Why is there no return here? Or at least a log statement to catch potential user problems?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452068491", "createdAt": "2020-07-09T08:57:28Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/FafClientApplication.java", "diffHunk": "@@ -127,7 +133,7 @@ public void stop() throws Exception {\n \n     Thread timeoutThread = new Thread(() -> {\n       try {\n-        Thread.sleep(Duration.ofSeconds(30).toMillis());\n+        Thread.sleep(Duration.ofSeconds(10).toMillis());\n       } catch (InterruptedException e) {\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyODM0Nw==", "bodyText": "This code runs when the application is shutting down. Geosearchef added it to help finding which non-daemon threads keep the client alive. There isn't much to be handled", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452528347", "createdAt": "2020-07-09T22:40:03Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/FafClientApplication.java", "diffHunk": "@@ -127,7 +133,7 @@ public void stop() throws Exception {\n \n     Thread timeoutThread = new Thread(() -> {\n       try {\n-        Thread.sleep(Duration.ofSeconds(30).toMillis());\n+        Thread.sleep(Duration.ofSeconds(10).toMillis());\n       } catch (InterruptedException e) {\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODQ5MQ=="}, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODYzNDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/fx/IconCell.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1OTo0NlrOGvIKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo0MDo1OFrOGvkKBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTg5Mw==", "bodyText": "Could be replaced by Lomboks AllArgConstructor", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452069893", "createdAt": "2020-07-09T08:59:46Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/fx/IconCell.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.faforever.client.fx;\n+\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.layout.Region;\n+\n+import java.util.function.Function;\n+\n+public class IconCell<S, T> extends TableCell<S, T> {\n+\n+  private Function<T, String> iconCssClassFunction;\n+  private Pos alignment;\n+  private String[] containerCssClasses;\n+\n+  public IconCell(Function<T, String> iconCssClassFunction) {\n+    this(iconCssClassFunction, Pos.CENTER_LEFT);\n+  }\n+\n+  public IconCell(Function<T, String> iconCssClassFunction, Pos alignment, String... containerCssClasses) {\n+    this.iconCssClassFunction = iconCssClassFunction;\n+    this.alignment = alignment;\n+    this.containerCssClasses = containerCssClasses;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyODY0Nw==", "bodyText": "Unfortunately not, because of the varargs parameter", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452528647", "createdAt": "2020-07-09T22:40:58Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/fx/IconCell.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.faforever.client.fx;\n+\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.layout.Region;\n+\n+import java.util.function.Function;\n+\n+public class IconCell<S, T> extends TableCell<S, T> {\n+\n+  private Function<T, String> iconCssClassFunction;\n+  private Pos alignment;\n+  private String[] containerCssClasses;\n+\n+  public IconCell(Function<T, String> iconCssClassFunction) {\n+    this(iconCssClassFunction, Pos.CENTER_LEFT);\n+  }\n+\n+  public IconCell(Function<T, String> iconCssClassFunction, Pos alignment, String... containerCssClasses) {\n+    this.iconCssClassFunction = iconCssClassFunction;\n+    this.alignment = alignment;\n+    this.containerCssClasses = containerCssClasses;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTg5Mw=="}, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODY4MDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/main/MainController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxMjoyNVrOGvImog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzoxMDowM1rOGvsVYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NzIxOA==", "bodyText": "Instead of collection and addAll you could do a foreach and add\nMaybe extract the stream into a tiny method", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452077218", "createdAt": "2020-07-09T09:12:25Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/main/MainController.java", "diffHunk": "@@ -201,16 +205,33 @@ public void initialize() {\n     // Always load chat immediately so messages or joined channels don't need to be cached until we display them.\n     getView(NavigationItem.CHAT);\n \n-    listenOnMinimizedToSetExtraDragBar();\n     vaultFileSystemLocationChecker.checkVaultFileSystemLocation();\n-  }\n-\n-  private void listenOnMinimizedToSetExtraDragBar() {\n-    WindowPrefs windowPrefs = preferencesService.getPreferences()\n-        .getMainWindow();\n-    InvalidationListener invalidationListener = observable -> mainHeaderPane.pseudoClassStateChanged(MAIN_WINDOW_RESTORED, !windowPrefs.getMaximized());\n-    JavaFxUtil.addListener(windowPrefs.maximizedProperty(), invalidationListener);\n-    invalidationListener.invalidated(windowPrefs.maximizedProperty());\n+    notificationButton.managedProperty().bind(notificationButton.visibleProperty());\n+\n+    List<MenuItem> menuItems = leftMenuPane.getChildrenUnmodifiable().stream()\n+        .filter(menuItem -> menuItem.getUserData() instanceof NavigationItem)\n+        .map(menuButton -> {\n+          MenuItem menuItem = new MenuItem(((Labeled) menuButton).getText());\n+          menuItem.setOnAction(event -> eventBus.post(new NavigateEvent((NavigationItem) menuButton.getUserData())));\n+          return menuItem;\n+        })\n+        .collect(Collectors.toList());\n+    navigationDropdown.getItems().setAll(menuItems);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyOTQ3Nw==", "bodyText": "ObservableList.setAll() triggers one change event, repeatedly calling add() triggers multiple change events.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452529477", "createdAt": "2020-07-09T22:43:41Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/main/MainController.java", "diffHunk": "@@ -201,16 +205,33 @@ public void initialize() {\n     // Always load chat immediately so messages or joined channels don't need to be cached until we display them.\n     getView(NavigationItem.CHAT);\n \n-    listenOnMinimizedToSetExtraDragBar();\n     vaultFileSystemLocationChecker.checkVaultFileSystemLocation();\n-  }\n-\n-  private void listenOnMinimizedToSetExtraDragBar() {\n-    WindowPrefs windowPrefs = preferencesService.getPreferences()\n-        .getMainWindow();\n-    InvalidationListener invalidationListener = observable -> mainHeaderPane.pseudoClassStateChanged(MAIN_WINDOW_RESTORED, !windowPrefs.getMaximized());\n-    JavaFxUtil.addListener(windowPrefs.maximizedProperty(), invalidationListener);\n-    invalidationListener.invalidated(windowPrefs.maximizedProperty());\n+    notificationButton.managedProperty().bind(notificationButton.visibleProperty());\n+\n+    List<MenuItem> menuItems = leftMenuPane.getChildrenUnmodifiable().stream()\n+        .filter(menuItem -> menuItem.getUserData() instanceof NavigationItem)\n+        .map(menuButton -> {\n+          MenuItem menuItem = new MenuItem(((Labeled) menuButton).getText());\n+          menuItem.setOnAction(event -> eventBus.post(new NavigateEvent((NavigationItem) menuButton.getUserData())));\n+          return menuItem;\n+        })\n+        .collect(Collectors.toList());\n+    navigationDropdown.getItems().setAll(menuItems);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NzIxOA=="}, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjYyNg==", "bodyText": "Good to know", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452662626", "createdAt": "2020-07-10T07:10:03Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/main/MainController.java", "diffHunk": "@@ -201,16 +205,33 @@ public void initialize() {\n     // Always load chat immediately so messages or joined channels don't need to be cached until we display them.\n     getView(NavigationItem.CHAT);\n \n-    listenOnMinimizedToSetExtraDragBar();\n     vaultFileSystemLocationChecker.checkVaultFileSystemLocation();\n-  }\n-\n-  private void listenOnMinimizedToSetExtraDragBar() {\n-    WindowPrefs windowPrefs = preferencesService.getPreferences()\n-        .getMainWindow();\n-    InvalidationListener invalidationListener = observable -> mainHeaderPane.pseudoClassStateChanged(MAIN_WINDOW_RESTORED, !windowPrefs.getMaximized());\n-    JavaFxUtil.addListener(windowPrefs.maximizedProperty(), invalidationListener);\n-    invalidationListener.invalidated(windowPrefs.maximizedProperty());\n+    notificationButton.managedProperty().bind(notificationButton.visibleProperty());\n+\n+    List<MenuItem> menuItems = leftMenuPane.getChildrenUnmodifiable().stream()\n+        .filter(menuItem -> menuItem.getUserData() instanceof NavigationItem)\n+        .map(menuButton -> {\n+          MenuItem menuItem = new MenuItem(((Labeled) menuButton).getText());\n+          menuItem.setOnAction(event -> eventBus.post(new NavigateEvent((NavigationItem) menuButton.getUserData())));\n+          return menuItem;\n+        })\n+        .collect(Collectors.toList());\n+    navigationDropdown.getItems().setAll(menuItems);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NzIxOA=="}, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODc4NTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTo0MDoxMFrOGvJm6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo1NzowNlrOGvkepg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MzY3NQ==", "bodyText": "The complexity of this class is very high and self-explanatory code is not given here anymore imho.\nEither a Javadoc or some other kind of restructuring is necessary:\n\nThe parent is implicitly expected to be a list cell - but you only see this from the cast in line 23.\nThere is a onRemoveButtonClicked method, but nowhere is stated that this controller is supposed to contain a button. So the name is misleading here.\nAlso the purpose of the label remains unclear. What is \"channel\" supposed to be?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452093675", "createdAt": "2020-07-09T09:40:10Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.faforever.client.preferences.ui;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.NodeListCell;\n+import javafx.scene.Parent;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.Pane;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class RemovableListCellController implements Controller<Pane> {\n+\n+  public Pane removableCellRoot;\n+  public Label label;\n+\n+  public void onRemoveButtonClicked() {\n+    Parent parent = removableCellRoot.getParent();\n+    NodeListCell<?> cell = (NodeListCell<?>) parent;\n+    ListView<?> listView = cell.getListView();\n+    listView.getItems().remove(cell.getItem());\n+  }\n+\n+  @Override\n+  public Pane getRoot() {\n+    return removableCellRoot;\n+  }\n+\n+  public void setChannel(String channel) {\n+    label.setText(channel);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzkyNg==", "bodyText": "I was able to simplify this; it's now a ListCell that's a controller at the same time. Code is simpler and JavaDoc added.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452533926", "createdAt": "2020-07-09T22:57:06Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/preferences/ui/RemovableListCellController.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.faforever.client.preferences.ui;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.NodeListCell;\n+import javafx.scene.Parent;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.layout.Pane;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class RemovableListCellController implements Controller<Pane> {\n+\n+  public Pane removableCellRoot;\n+  public Label label;\n+\n+  public void onRemoveButtonClicked() {\n+    Parent parent = removableCellRoot.getParent();\n+    NodeListCell<?> cell = (NodeListCell<?>) parent;\n+    ListView<?> listView = cell.getListView();\n+    listView.getItems().remove(cell.getItem());\n+  }\n+\n+  @Override\n+  public Pane getRoot() {\n+    return removableCellRoot;\n+  }\n+\n+  public void setChannel(String channel) {\n+    label.setText(channel);\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MzY3NQ=="}, "originalCommit": {"oid": "97d45972d13f3ee217db822cef3deef0cca4a429"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ1NTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzowMToxNVrOGvQDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowMjowMVrOGvkkqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTM3NA==", "bodyText": "What is this value referring to? A translation code?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452199374", "createdAt": "2020-07-09T13:01:15Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "diffHunk": "@@ -0,0 +1,540 @@\n+package com.faforever.client.ui.dialog;\n+\n+import com.faforever.client.ui.converter.DialogTransitionConverter;\n+import com.faforever.client.ui.effects.DepthManager;\n+import com.faforever.client.ui.transitions.CachedTransition;\n+import javafx.animation.Interpolator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.css.CssMetaData;\n+import javafx.css.SimpleStyleableObjectProperty;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n+import javafx.geometry.Pos;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.effect.BoxBlur;\n+import javafx.scene.effect.Effect;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.util.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@DefaultProperty(value = \"content\")\n+public class Dialog extends StackPane {\n+\n+  private static final String DEFAULT_STYLE_CLASS = \"dialog\";\n+\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogClosedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.CLOSED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onClosed\";\n+    }\n+  };\n+  /** Whether the dialog will close when clicking on the overlay. */\n+  private final BooleanProperty overlayClose = new SimpleBooleanProperty(true);\n+  /**\n+   * If {@code true}, the content of dialog container will be cached and replaced with an image when displaying the\n+   * dialog (better performance). This is recommended if the content behind the dialog will not change during the\n+   * showing period\n+   */\n+  private final BooleanProperty cacheContainer = new SimpleBooleanProperty(false);\n+  private final StyleableObjectProperty<DialogTransition> transitionType = new SimpleStyleableObjectProperty<>(\n+      StyleableProperties.DIALOG_TRANSITION,\n+      Dialog.this,\n+      \"dialogTransition\",\n+      DialogTransition.CENTER);\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogOpenedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.OPENED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onOpened\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTQ2Nw==", "bodyText": "ReadOnlyProperty.getName():\n\nReturns the name of this property. If the property does not have a name, this method returns an empty String.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452535467", "createdAt": "2020-07-09T23:02:01Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "diffHunk": "@@ -0,0 +1,540 @@\n+package com.faforever.client.ui.dialog;\n+\n+import com.faforever.client.ui.converter.DialogTransitionConverter;\n+import com.faforever.client.ui.effects.DepthManager;\n+import com.faforever.client.ui.transitions.CachedTransition;\n+import javafx.animation.Interpolator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.css.CssMetaData;\n+import javafx.css.SimpleStyleableObjectProperty;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n+import javafx.geometry.Pos;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.effect.BoxBlur;\n+import javafx.scene.effect.Effect;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.util.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@DefaultProperty(value = \"content\")\n+public class Dialog extends StackPane {\n+\n+  private static final String DEFAULT_STYLE_CLASS = \"dialog\";\n+\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogClosedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.CLOSED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onClosed\";\n+    }\n+  };\n+  /** Whether the dialog will close when clicking on the overlay. */\n+  private final BooleanProperty overlayClose = new SimpleBooleanProperty(true);\n+  /**\n+   * If {@code true}, the content of dialog container will be cached and replaced with an image when displaying the\n+   * dialog (better performance). This is recommended if the content behind the dialog will not change during the\n+   * showing period\n+   */\n+  private final BooleanProperty cacheContainer = new SimpleBooleanProperty(false);\n+  private final StyleableObjectProperty<DialogTransition> transitionType = new SimpleStyleableObjectProperty<>(\n+      StyleableProperties.DIALOG_TRANSITION,\n+      Dialog.this,\n+      \"dialogTransition\",\n+      DialogTransition.CENTER);\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogOpenedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.OPENED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onOpened\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTM3NA=="}, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ1ODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzowMjowMVrOGvQFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowMzowMVrOGvkmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTgxOQ==", "bodyText": "Thanks captain! Comment can be removed", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452199819", "createdAt": "2020-07-09T13:02:01Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "diffHunk": "@@ -0,0 +1,540 @@\n+package com.faforever.client.ui.dialog;\n+\n+import com.faforever.client.ui.converter.DialogTransitionConverter;\n+import com.faforever.client.ui.effects.DepthManager;\n+import com.faforever.client.ui.transitions.CachedTransition;\n+import javafx.animation.Interpolator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.css.CssMetaData;\n+import javafx.css.SimpleStyleableObjectProperty;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n+import javafx.geometry.Pos;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.effect.BoxBlur;\n+import javafx.scene.effect.Effect;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.util.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@DefaultProperty(value = \"content\")\n+public class Dialog extends StackPane {\n+\n+  private static final String DEFAULT_STYLE_CLASS = \"dialog\";\n+\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogClosedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.CLOSED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onClosed\";\n+    }\n+  };\n+  /** Whether the dialog will close when clicking on the overlay. */\n+  private final BooleanProperty overlayClose = new SimpleBooleanProperty(true);\n+  /**\n+   * If {@code true}, the content of dialog container will be cached and replaced with an image when displaying the\n+   * dialog (better performance). This is recommended if the content behind the dialog will not change during the\n+   * showing period\n+   */\n+  private final BooleanProperty cacheContainer = new SimpleBooleanProperty(false);\n+  private final StyleableObjectProperty<DialogTransition> transitionType = new SimpleStyleableObjectProperty<>(\n+      StyleableProperties.DIALOG_TRANSITION,\n+      Dialog.this,\n+      \"dialogTransition\",\n+      DialogTransition.CENTER);\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogOpenedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.OPENED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onOpened\";\n+    }\n+  };\n+  private StackPane contentHolder;\n+  private double offsetX;\n+  private double offsetY;\n+  private StackPane dialogContainer;\n+  private Region content;\n+  private Transition animation;\n+  private ArrayList<Node> tempContent;\n+  EventHandler<? super MouseEvent> closeHandler = e -> close();\n+\n+  /** Creates an empty Dialog with CENTER animation type. */\n+  public Dialog() {\n+    this(null, null, DialogTransition.CENTER);\n+  }\n+\n+  public Dialog(StackPane dialogContainer, Region content, DialogTransition transitionType) {\n+    initialize();\n+    setContent(content);\n+    setDialogContainer(dialogContainer);\n+    this.transitionType.set(transitionType);\n+    initChangeListeners();\n+  }\n+\n+  public Dialog(StackPane dialogContainer, Region content, DialogTransition transitionType, boolean overlayClose) {\n+    setOverlayClose(overlayClose);\n+    initialize();\n+    setContent(content);\n+    setDialogContainer(dialogContainer);\n+    this.transitionType.set(transitionType);\n+    // init change listeners", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTgxNA==", "bodyText": "Dialog and Alert are ported from JFoenix. I cleaned up the code but didn't catch it all :-)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452535814", "createdAt": "2020-07-09T23:03:01Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/ui/dialog/Dialog.java", "diffHunk": "@@ -0,0 +1,540 @@\n+package com.faforever.client.ui.dialog;\n+\n+import com.faforever.client.ui.converter.DialogTransitionConverter;\n+import com.faforever.client.ui.effects.DepthManager;\n+import com.faforever.client.ui.transitions.CachedTransition;\n+import javafx.animation.Interpolator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.css.CssMetaData;\n+import javafx.css.SimpleStyleableObjectProperty;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n+import javafx.geometry.Pos;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.effect.BoxBlur;\n+import javafx.scene.effect.Effect;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.util.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@DefaultProperty(value = \"content\")\n+public class Dialog extends StackPane {\n+\n+  private static final String DEFAULT_STYLE_CLASS = \"dialog\";\n+\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogClosedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.CLOSED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onClosed\";\n+    }\n+  };\n+  /** Whether the dialog will close when clicking on the overlay. */\n+  private final BooleanProperty overlayClose = new SimpleBooleanProperty(true);\n+  /**\n+   * If {@code true}, the content of dialog container will be cached and replaced with an image when displaying the\n+   * dialog (better performance). This is recommended if the content behind the dialog will not change during the\n+   * showing period\n+   */\n+  private final BooleanProperty cacheContainer = new SimpleBooleanProperty(false);\n+  private final StyleableObjectProperty<DialogTransition> transitionType = new SimpleStyleableObjectProperty<>(\n+      StyleableProperties.DIALOG_TRANSITION,\n+      Dialog.this,\n+      \"dialogTransition\",\n+      DialogTransition.CENTER);\n+  private final ObjectProperty<EventHandler<? super DialogEvent>> onDialogOpenedProperty = new ObjectPropertyBase<>() {\n+    @Override\n+    protected void invalidated() {\n+      setEventHandler(DialogEvent.OPENED, get());\n+    }\n+\n+    @Override\n+    public Object getBean() {\n+      return Dialog.this;\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return \"onOpened\";\n+    }\n+  };\n+  private StackPane contentHolder;\n+  private double offsetX;\n+  private double offsetY;\n+  private StackPane dialogContainer;\n+  private Region content;\n+  private Transition animation;\n+  private ArrayList<Node> tempContent;\n+  EventHandler<? super MouseEvent> closeHandler = e -> close();\n+\n+  /** Creates an empty Dialog with CENTER animation type. */\n+  public Dialog() {\n+    this(null, null, DialogTransition.CENTER);\n+  }\n+\n+  public Dialog(StackPane dialogContainer, Region content, DialogTransition transitionType) {\n+    initialize();\n+    setContent(content);\n+    setDialogContainer(dialogContainer);\n+    this.transitionType.set(transitionType);\n+    initChangeListeners();\n+  }\n+\n+  public Dialog(StackPane dialogContainer, Region content, DialogTransition transitionType, boolean overlayClose) {\n+    setOverlayClose(overlayClose);\n+    initialize();\n+    setContent(content);\n+    setDialogContainer(dialogContainer);\n+    this.transitionType.set(transitionType);\n+    // init change listeners", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5OTgxOQ=="}, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ3MzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/dialog/DialogLayout.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzowNTo1NVrOGvQOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNDoxMVrOGvknPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMjE3MQ==", "bodyText": "A JavaDoc would be helpful here:\nHow is this different from a VBox?\nWhen should this be used?\nHow to use this from SceneBuilder or fxml?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452202171", "createdAt": "2020-07-09T13:05:55Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/dialog/DialogLayout.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.faforever.client.ui.dialog;\n+\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+\n+import java.util.List;\n+\n+public class DialogLayout extends VBox {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjEyNg==", "bodyText": "Ported from JFoenix. A DialogLayout has a header, a body and action buttons and is the content of a Dialog. Eventually, we might get rid of it but for now, we're transitioning away from JFoenix so we kept this class.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452536126", "createdAt": "2020-07-09T23:04:11Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/ui/dialog/DialogLayout.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.faforever.client.ui.dialog;\n+\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+\n+import java.util.List;\n+\n+public class DialogLayout extends VBox {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMjE3MQ=="}, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ4NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzowODo1MVrOGvQVtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzowODo1MVrOGvQVtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwMzk1Nw==", "bodyText": "If only one case is covered I'd prefer if/else", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452203957", "createdAt": "2020-07-09T13:08:51Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ5MzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMTowM1rOGvQa7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMTowM1rOGvQa7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTI5Mg==", "bodyText": "From what I see mementos can never be null.\nAlso I'd suggest Arrays.stream(mementos).foreach(CacheMemento::cache)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452205292", "createdAt": "2020-07-09T13:11:03Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];\n+    if (node != null) {\n+      mementos[0] = new CacheMemento(node);\n+    }\n+    System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  protected void starting() {\n+    if (mementos != null) {\n+      for (CacheMemento memento : mementos) {\n+        memento.cache();\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ5NDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMToxNFrOGvQbaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMToxNFrOGvQbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTQxNg==", "bodyText": "From what I see mementos can never be null.\nAlso I'd suggest Arrays.stream(mementos).foreach(CacheMemento::restore)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452205416", "createdAt": "2020-07-09T13:11:14Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];\n+    if (node != null) {\n+      mementos[0] = new CacheMemento(node);\n+    }\n+    System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  protected void starting() {\n+    if (mementos != null) {\n+      for (CacheMemento memento : mementos) {\n+        memento.cache();\n+      }\n+    }\n+  }\n+\n+  protected void stopping() {\n+    if (mementos != null) {\n+      for (CacheMemento memento : mementos) {\n+        memento.restore();\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQ5NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMTozOFrOGvQcXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoxMTozOFrOGvQcXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTY2MA==", "bodyText": "same here", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452205660", "createdAt": "2020-07-09T13:11:38Z", "author": {"login": "Brutus5000"}, "path": "src/main/java/com/faforever/client/ui/transitions/CachedTransition.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.faforever.client.ui.transitions;\n+\n+import com.jfoenix.transitions.CacheMemento;\n+import javafx.animation.Timeline;\n+import javafx.animation.Transition;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+public class CachedTransition extends Transition {\n+  protected final Node node;\n+  protected ObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\n+  private CacheMemento[] mementos = new CacheMemento[0];\n+\n+  public CachedTransition(final Node node, final Timeline timeline) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = node == null ? mementos : new CacheMemento[]{new CacheMemento(node)};\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }\n+    });\n+  }\n+\n+  public CachedTransition(final Node node, final Timeline timeline, CacheMemento... cacheMomentos) {\n+    this.node = node;\n+    this.timeline.set(timeline);\n+    mementos = new CacheMemento[(node == null ? 0 : 1) + cacheMomentos.length];\n+    if (node != null) {\n+      mementos[0] = new CacheMemento(node);\n+    }\n+    System.arraycopy(cacheMomentos, 0, mementos, node == null ? 0 : 1, cacheMomentos.length);\n+    statusProperty().addListener(observable -> {\n+      switch (getStatus()) {\n+        case RUNNING:\n+          starting();\n+          break;\n+        default:\n+          stopping();\n+          break;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d36fdfb6cdc64cc25fa8e8316cfb873ed98b9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjk0Mzg1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1ODo1NVrOGvxgdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTowOToyM1rOGwFtag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzM4Mg==", "bodyText": "Might to move to JUnit 5 which has full JUnit 4 backwards compatibility with junit-jupiter-vintage.\nSee API: https://github.com/FAForever/faf-java-api/blob/develop/build.gradle#L269\nWe should add an issue for that I guess.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452747382", "createdAt": "2020-07-10T09:58:55Z", "author": {"login": "Brutus5000"}, "path": "build.gradle", "diffHunk": "@@ -300,7 +300,7 @@ dependencies {\n \n   provided(\"com.install4j:install4j-runtime:${install4jRuntimeVersion}\")\n \n-  testCompile 'junit:junit:4.11'\n+  testCompile 'junit:junit:4.13'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3ODM3OA==", "bodyText": "Already there #305", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453078378", "createdAt": "2020-07-10T21:09:23Z", "author": {"login": "micheljung"}, "path": "build.gradle", "diffHunk": "@@ -300,7 +300,7 @@ dependencies {\n \n   provided(\"com.install4j:install4j-runtime:${install4jRuntimeVersion}\")\n \n-  testCompile 'junit:junit:4.11'\n+  testCompile 'junit:junit:4.13'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzM4Mg=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ5OTMxOnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODowNDo1N1rOGwAlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNzo1NzowMlrOGwLRsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NDQzNA==", "bodyText": "How is changing to java 14 related to this.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452994434", "createdAt": "2020-07-10T18:04:57Z", "author": {"login": "1-alex98"}, "path": ".travis.yml", "diffHunk": "@@ -12,11 +12,11 @@ env:\n     - secure: \"UVIbeoJpx9n0KSWHbpdWZuR4zeZfXw3JQBq2Zb1h0/j4uREfXWiGFuNVQBPjsdtYi2+LkecjJ/MgKWo+SS0SjsvTa/ZPkOXt4408H1qYgwVnvWoeL/g1QQ6T8ADNysl/4ZtJLnSp0WXYEBkfHYZJD++vgDwkpVhnCLVzSFVAHls=\"\n \n before_install:\n-  - export JDK=\"openjdk11\"\n+  - export JDK=\"openjdk14\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTQ1NQ==", "bodyText": "Because I had various issues and tried if JavaFX 14 solves those. They didn't, but it seemed pointless to me to go back to 11 just to go forward to 14 later.\nPlus, they fixed Win: UNDECORATED windows are not minimized with the taskbar button in 13 so I was able to remove our workaround (See #31).", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453081455", "createdAt": "2020-07-10T21:17:58Z", "author": {"login": "micheljung"}, "path": ".travis.yml", "diffHunk": "@@ -12,11 +12,11 @@ env:\n     - secure: \"UVIbeoJpx9n0KSWHbpdWZuR4zeZfXw3JQBq2Zb1h0/j4uREfXWiGFuNVQBPjsdtYi2+LkecjJ/MgKWo+SS0SjsvTa/ZPkOXt4408H1qYgwVnvWoeL/g1QQ6T8ADNysl/4ZtJLnSp0WXYEBkfHYZJD++vgDwkpVhnCLVzSFVAHls=\"\n \n before_install:\n-  - export JDK=\"openjdk11\"\n+  - export JDK=\"openjdk14\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NDQzNA=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTU4Nw==", "bodyText": "Actually I could not find any issue so I think it is fine.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453169587", "createdAt": "2020-07-11T07:57:02Z", "author": {"login": "1-alex98"}, "path": ".travis.yml", "diffHunk": "@@ -12,11 +12,11 @@ env:\n     - secure: \"UVIbeoJpx9n0KSWHbpdWZuR4zeZfXw3JQBq2Zb1h0/j4uREfXWiGFuNVQBPjsdtYi2+LkecjJ/MgKWo+SS0SjsvTa/ZPkOXt4408H1qYgwVnvWoeL/g1QQ6T8ADNysl/4ZtJLnSp0WXYEBkfHYZJD++vgDwkpVhnCLVzSFVAHls=\"\n \n before_install:\n-  - export JDK=\"openjdk11\"\n+  - export JDK=\"openjdk14\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NDQzNA=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDUxOTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/faforever/client/replay/ReplayCardController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxMTo0OVrOGwAyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNzo1NjowMlrOGwLRUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NzY5NQ==", "bodyText": "Not sure what u mean here. But I guess u need to find out what icon corresponds to this unicode. I guess if u dont, then leave the old code and add the fix me", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452997695", "createdAt": "2020-07-10T18:11:49Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayCardController.java", "diffHunk": "@@ -101,7 +101,9 @@ public void setReplay(Replay replay) {\n     Integer replayTicks = replay.getReplayTicks();\n     if (replayTicks != null) {\n       durationLabel.setText(timeService.shortDuration(Duration.ofMillis(replayTicks * 100)));\n-      ((Label) durationLabel.getGraphic()).setText(\"\ue953\");\n+      // FIXME which icon was added in https://github.com/FAForever/downlords-faf-client/commit/58357c603eafead218ef7cceb8907e86c5d864b6#r40460680\n+//      durationLabel.getGraphic().getStyleClass().remove(\"duration-icon\");\n+//      durationLabel.getGraphic().getStyleClass().remove(\"time-icon\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5Mjk2Mw==", "bodyText": "Did you look at the discussion 58357c6#r40460680? An icon was added, but it was done by directly modifying the font rather than adding it via icomoon. This icon is lost in current client version and I wasn't even able to look it up using the font from his commit. So whether or not I leave the old code, there is no icon.", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453092963", "createdAt": "2020-07-10T21:51:18Z", "author": {"login": "micheljung"}, "path": "src/main/java/com/faforever/client/replay/ReplayCardController.java", "diffHunk": "@@ -101,7 +101,9 @@ public void setReplay(Replay replay) {\n     Integer replayTicks = replay.getReplayTicks();\n     if (replayTicks != null) {\n       durationLabel.setText(timeService.shortDuration(Duration.ofMillis(replayTicks * 100)));\n-      ((Label) durationLabel.getGraphic()).setText(\"\ue953\");\n+      // FIXME which icon was added in https://github.com/FAForever/downlords-faf-client/commit/58357c603eafead218ef7cceb8907e86c5d864b6#r40460680\n+//      durationLabel.getGraphic().getStyleClass().remove(\"duration-icon\");\n+//      durationLabel.getGraphic().getStyleClass().remove(\"time-icon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NzY5NQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTQ5MA==", "bodyText": "ok", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453169490", "createdAt": "2020-07-11T07:56:02Z", "author": {"login": "1-alex98"}, "path": "src/main/java/com/faforever/client/replay/ReplayCardController.java", "diffHunk": "@@ -101,7 +101,9 @@ public void setReplay(Replay replay) {\n     Integer replayTicks = replay.getReplayTicks();\n     if (replayTicks != null) {\n       durationLabel.setText(timeService.shortDuration(Duration.ofMillis(replayTicks * 100)));\n-      ((Label) durationLabel.getGraphic()).setText(\"\ue953\");\n+      // FIXME which icon was added in https://github.com/FAForever/downlords-faf-client/commit/58357c603eafead218ef7cceb8907e86c5d864b6#r40460680\n+//      durationLabel.getGraphic().getStyleClass().remove(\"duration-icon\");\n+//      durationLabel.getGraphic().getStyleClass().remove(\"time-icon\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NzY5NQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDUyNTA4OnYy", "diffSide": "LEFT", "path": "src/main/resources/i18n/messages.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxMzo1M1rOGwA14Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0ODowMlrOGzTtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODYyNQ==", "bodyText": "Why delete?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452998625", "createdAt": "2020-07-10T18:13:53Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -36,22 +31,18 @@ menu.revealLogFolder=Show log folder\n menu.revealModFolder=Show mod folder\n menu.revealReplayFolder=Show replay folder\n menu.revealGamePrefsFile=Show game.prefs file\n-\n main.news=News\n main.chat=Chat\n main.play=Play\n main.vault=Vault\n main.units=Units\n main.leaderboards=Leaderboards\n main.tournaments=Tournaments\n-\n leaderboard.ranked1v1=1v1 Rating\n leaderboard.global=Global Rating\n-\n play.custom=Custom games\n play.ranked1v1=1v1 ranked match\n play.coop=Co-Op\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwNzk5Mw==", "bodyText": "This was done by auto-formatting", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453107993", "createdAt": "2020-07-10T22:40:19Z", "author": {"login": "micheljung"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -36,22 +31,18 @@ menu.revealLogFolder=Show log folder\n menu.revealModFolder=Show mod folder\n menu.revealReplayFolder=Show replay folder\n menu.revealGamePrefsFile=Show game.prefs file\n-\n main.news=News\n main.chat=Chat\n main.play=Play\n main.vault=Vault\n main.units=Units\n main.leaderboards=Leaderboards\n main.tournaments=Tournaments\n-\n leaderboard.ranked1v1=1v1 Rating\n leaderboard.global=Global Rating\n-\n play.custom=Custom games\n play.ranked1v1=1v1 ranked match\n play.coop=Co-Op\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODYyNQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MzU2Mg==", "bodyText": "Well so we leave it?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r456453562", "createdAt": "2020-07-17T13:48:02Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -36,22 +31,18 @@ menu.revealLogFolder=Show log folder\n menu.revealModFolder=Show mod folder\n menu.revealReplayFolder=Show replay folder\n menu.revealGamePrefsFile=Show game.prefs file\n-\n main.news=News\n main.chat=Chat\n main.play=Play\n main.vault=Vault\n main.units=Units\n main.leaderboards=Leaderboards\n main.tournaments=Tournaments\n-\n leaderboard.ranked1v1=1v1 Rating\n leaderboard.global=Global Rating\n-\n play.custom=Custom games\n play.ranked1v1=1v1 ranked match\n play.coop=Co-Op\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODYyNQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDUyNjQ2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/i18n/messages_es.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxNDoyNVrOGwA2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0ODozMFrOGzTutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODg1OA==", "bodyText": "Will be overwritten rename in poeeditor", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452998858", "createdAt": "2020-07-10T18:14:25Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages_es.properties", "diffHunk": "@@ -649,12 +649,12 @@ map.couldNotUnrank = No se pudo desrankear el mapa.\n # Fuzzy\n modVersion.ranked = Clasificatorio\n game.missionName = Misi\u00f3n\n-settings.appearance.backgoundImage = Imagen de fondo\n+settings.appearance.backgroundImage = Imagen de fondo\n settings.appearance.useDefaultImage = Usar imagen por defecto\n settings.appearance.chooseImage = Elige una imagen\n settings.general.theme.useNoImage = Sin imagen\n query.notContains = no contiene\n coop.unknownMission = Misi\u00f3n desconocida\n game.couldNotJoin = No se pudo unir a la partida con el ID ''{0}''.\n-discord.disallowJoins = No permitir a jugadores unirse a trav\u00e9s de Discord\n+settings.general.disallowDiscordJoins = No permitir a jugadores unirse a trav\u00e9s de Discord", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODQ0Ng==", "bodyText": "Yes, unfortunately PoEditor won't detect the renames and the messages will have to be re-translated.\nBut it bothered me more that the naming convention wasn't followed ;-)", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453108446", "createdAt": "2020-07-10T22:42:08Z", "author": {"login": "micheljung"}, "path": "src/main/resources/i18n/messages_es.properties", "diffHunk": "@@ -649,12 +649,12 @@ map.couldNotUnrank = No se pudo desrankear el mapa.\n # Fuzzy\n modVersion.ranked = Clasificatorio\n game.missionName = Misi\u00f3n\n-settings.appearance.backgoundImage = Imagen de fondo\n+settings.appearance.backgroundImage = Imagen de fondo\n settings.appearance.useDefaultImage = Usar imagen por defecto\n settings.appearance.chooseImage = Elige una imagen\n settings.general.theme.useNoImage = Sin imagen\n query.notContains = no contiene\n coop.unknownMission = Misi\u00f3n desconocida\n game.couldNotJoin = No se pudo unir a la partida con el ID ''{0}''.\n-discord.disallowJoins = No permitir a jugadores unirse a trav\u00e9s de Discord\n+settings.general.disallowDiscordJoins = No permitir a jugadores unirse a trav\u00e9s de Discord", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODg1OA=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODY3OA==", "bodyText": "Or, mabye we can rename the message key in PoEditor before importing the the message.properties?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453108678", "createdAt": "2020-07-10T22:42:58Z", "author": {"login": "micheljung"}, "path": "src/main/resources/i18n/messages_es.properties", "diffHunk": "@@ -649,12 +649,12 @@ map.couldNotUnrank = No se pudo desrankear el mapa.\n # Fuzzy\n modVersion.ranked = Clasificatorio\n game.missionName = Misi\u00f3n\n-settings.appearance.backgoundImage = Imagen de fondo\n+settings.appearance.backgroundImage = Imagen de fondo\n settings.appearance.useDefaultImage = Usar imagen por defecto\n settings.appearance.chooseImage = Elige una imagen\n settings.general.theme.useNoImage = Sin imagen\n query.notContains = no contiene\n coop.unknownMission = Misi\u00f3n desconocida\n game.couldNotJoin = No se pudo unir a la partida con el ID ''{0}''.\n-discord.disallowJoins = No permitir a jugadores unirse a trav\u00e9s de Discord\n+settings.general.disallowDiscordJoins = No permitir a jugadores unirse a trav\u00e9s de Discord", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODg1OA=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MzgxMg==", "bodyText": "Whatever will sort itself", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r456453812", "createdAt": "2020-07-17T13:48:30Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/i18n/messages_es.properties", "diffHunk": "@@ -649,12 +649,12 @@ map.couldNotUnrank = No se pudo desrankear el mapa.\n # Fuzzy\n modVersion.ranked = Clasificatorio\n game.missionName = Misi\u00f3n\n-settings.appearance.backgoundImage = Imagen de fondo\n+settings.appearance.backgroundImage = Imagen de fondo\n settings.appearance.useDefaultImage = Usar imagen por defecto\n settings.appearance.chooseImage = Elige una imagen\n settings.general.theme.useNoImage = Sin imagen\n query.notContains = no contiene\n coop.unknownMission = Misi\u00f3n desconocida\n game.couldNotJoin = No se pudo unir a la partida con el ID ''{0}''.\n-discord.disallowJoins = No permitir a jugadores unirse a trav\u00e9s de Discord\n+settings.general.disallowDiscordJoins = No permitir a jugadores unirse a trav\u00e9s de Discord", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODg1OA=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDUzMDM2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/theme/icons.css", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxNTo0NlrOGwA5KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODowNzoxM1rOGwLUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5OTQ2NQ==", "bodyText": "Can u explain me how this works? How do I add anew icon?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r452999465", "createdAt": "2020-07-10T18:15:46Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/theme/icons.css", "diffHunk": "@@ -0,0 +1,208 @@\n+@import \"style.css\";\n+\n+.icon {\n+  /* Same color as text painted on the same -fx-background. */\n+  -fx-background-color: -fx-text-background-color;\n+  /* 16x16px. Non-square icons will have to adjust the padding. */\n+  -fx-padding: 0.666667em;\n+\n+  /* Prevents images from stretching (e.g. in a table cell); but the padding will still give them their space. */\n+  -fx-max-height: 0;\n+  -fx-max-width: 0;\n+}\n+\n+.window-button .icon {\n+  -fx-padding: 0;\n+}\n+\n+.login-logo,\n+.icon-faf {\n+  -fx-shape: \"M16 32c-8.837 0-16-7.163-16-16s7.163-16 16-16 16 7.163 16 16-7.163 16-16 16zM16 2.147c-7.651 0-13.853 6.202-13.853 13.853s6.202 13.853 13.853 13.853 13.853-6.202 13.853-13.853-6.202-13.853-13.853-13.853zM24.026 16.058l3.538 6.127h-2.256l-4.642-8.077h7.122l1.125 1.949h-4.886zM18.256 9.917h7.111l1.24 2.147h-7.117zM20.911 22.185l-1.684-2.917h-6.415l-1.684 2.917h-2.173l7.083-12.268h0.057l7.052 12.268h-2.235zM16.020 13.743l-1.78 3.083h3.56zM5.388 12.064l1.24-2.147h7.243l-1.24 2.147h-7.243zM6.787 22.185h-2.357l3.538-6.127h-4.886l1.125-1.949h7.243z\";\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMjQwNw==", "bodyText": "You can get the SVGPath string from icomoon:\n\nOr from the source code of SVGs. https://raw.githubusercontent.com/FAForever/Art-Assets/master/FAF-Logo.svg\nOr build it yourself: https://yqnn.github.io/svg-path-editor/\n-fx-shape will apply the shape to whatever component you choose. If it's a button, the button will have the SVG shape. We apply it to Regions like <Region styleClass=\"icon,map-size-icon\" /> and use this region as the graphic for the button.\nThe annoying thing about it is that either you set -fx-scale-shape: false, resulting in the \"original\" size being used (as specified in the SVGPath), which is rarely what you want. Or you set -fx-scale-shape: true resulting in the shape being adjusted to the region's size - without keeping the aspect ratio. So for each icon the dimensions must be specified.\nHowever, the advantages are:\n\nNo need to generate a font\nNo need to keep the font and .json file in sync\nNo dependency to icomoon\nThemes can easily replace individual icons. Right now, I don't even know how themes can set their own icons. The probably need to provide their own where the icons use the same unicode character, and set this font via CSS only for those nodes whose icon should be changed.\nIt's a standard JavaFX mechanism", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453112407", "createdAt": "2020-07-10T22:58:23Z", "author": {"login": "micheljung"}, "path": "src/main/resources/theme/icons.css", "diffHunk": "@@ -0,0 +1,208 @@\n+@import \"style.css\";\n+\n+.icon {\n+  /* Same color as text painted on the same -fx-background. */\n+  -fx-background-color: -fx-text-background-color;\n+  /* 16x16px. Non-square icons will have to adjust the padding. */\n+  -fx-padding: 0.666667em;\n+\n+  /* Prevents images from stretching (e.g. in a table cell); but the padding will still give them their space. */\n+  -fx-max-height: 0;\n+  -fx-max-width: 0;\n+}\n+\n+.window-button .icon {\n+  -fx-padding: 0;\n+}\n+\n+.login-logo,\n+.icon-faf {\n+  -fx-shape: \"M16 32c-8.837 0-16-7.163-16-16s7.163-16 16-16 16 7.163 16 16-7.163 16-16 16zM16 2.147c-7.651 0-13.853 6.202-13.853 13.853s6.202 13.853 13.853 13.853 13.853-6.202 13.853-13.853-6.202-13.853-13.853-13.853zM24.026 16.058l3.538 6.127h-2.256l-4.642-8.077h7.122l1.125 1.949h-4.886zM18.256 9.917h7.111l1.24 2.147h-7.117zM20.911 22.185l-1.684-2.917h-6.415l-1.684 2.917h-2.173l7.083-12.268h0.057l7.052 12.268h-2.235zM16.020 13.743l-1.78 3.083h3.56zM5.388 12.064l1.24-2.147h7.243l-1.24 2.147h-7.243zM6.787 22.185h-2.357l3.538-6.127h-4.886l1.125-1.949h7.243z\";\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5OTQ2NQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTQ0Mg==", "bodyText": "Maybe we should turn this into a wiki page... ?", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453169442", "createdAt": "2020-07-11T07:55:17Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/theme/icons.css", "diffHunk": "@@ -0,0 +1,208 @@\n+@import \"style.css\";\n+\n+.icon {\n+  /* Same color as text painted on the same -fx-background. */\n+  -fx-background-color: -fx-text-background-color;\n+  /* 16x16px. Non-square icons will have to adjust the padding. */\n+  -fx-padding: 0.666667em;\n+\n+  /* Prevents images from stretching (e.g. in a table cell); but the padding will still give them their space. */\n+  -fx-max-height: 0;\n+  -fx-max-width: 0;\n+}\n+\n+.window-button .icon {\n+  -fx-padding: 0;\n+}\n+\n+.login-logo,\n+.icon-faf {\n+  -fx-shape: \"M16 32c-8.837 0-16-7.163-16-16s7.163-16 16-16 16 7.163 16 16-7.163 16-16 16zM16 2.147c-7.651 0-13.853 6.202-13.853 13.853s6.202 13.853 13.853 13.853 13.853-6.202 13.853-13.853-6.202-13.853-13.853-13.853zM24.026 16.058l3.538 6.127h-2.256l-4.642-8.077h7.122l1.125 1.949h-4.886zM18.256 9.917h7.111l1.24 2.147h-7.117zM20.911 22.185l-1.684-2.917h-6.415l-1.684 2.917h-2.173l7.083-12.268h0.057l7.052 12.268h-2.235zM16.020 13.743l-1.78 3.083h3.56zM5.388 12.064l1.24-2.147h7.243l-1.24 2.147h-7.243zM6.787 22.185h-2.357l3.538-6.127h-4.886l1.125-1.949h7.243z\";\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5OTQ2NQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MDM0MQ==", "bodyText": "https://github.com/FAForever/downlords-faf-client/wiki/Adding-Icons", "url": "https://github.com/FAForever/downlords-faf-client/pull/1818#discussion_r453170341", "createdAt": "2020-07-11T08:07:13Z", "author": {"login": "1-alex98"}, "path": "src/main/resources/theme/icons.css", "diffHunk": "@@ -0,0 +1,208 @@\n+@import \"style.css\";\n+\n+.icon {\n+  /* Same color as text painted on the same -fx-background. */\n+  -fx-background-color: -fx-text-background-color;\n+  /* 16x16px. Non-square icons will have to adjust the padding. */\n+  -fx-padding: 0.666667em;\n+\n+  /* Prevents images from stretching (e.g. in a table cell); but the padding will still give them their space. */\n+  -fx-max-height: 0;\n+  -fx-max-width: 0;\n+}\n+\n+.window-button .icon {\n+  -fx-padding: 0;\n+}\n+\n+.login-logo,\n+.icon-faf {\n+  -fx-shape: \"M16 32c-8.837 0-16-7.163-16-16s7.163-16 16-16 16 7.163 16 16-7.163 16-16 16zM16 2.147c-7.651 0-13.853 6.202-13.853 13.853s6.202 13.853 13.853 13.853 13.853-6.202 13.853-13.853-6.202-13.853-13.853-13.853zM24.026 16.058l3.538 6.127h-2.256l-4.642-8.077h7.122l1.125 1.949h-4.886zM18.256 9.917h7.111l1.24 2.147h-7.117zM20.911 22.185l-1.684-2.917h-6.415l-1.684 2.917h-2.173l7.083-12.268h0.057l7.052 12.268h-2.235zM16.020 13.743l-1.78 3.083h3.56zM5.388 12.064l1.24-2.147h7.243l-1.24 2.147h-7.243zM6.787 22.185h-2.357l3.538-6.127h-4.886l1.125-1.949h7.243z\";\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5OTQ2NQ=="}, "originalCommit": {"oid": "f5ff9bfc6165f479d9f0eab6fe61307976dcc1cb"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2052, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}