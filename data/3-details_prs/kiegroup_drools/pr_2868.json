{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDExNTc3", "number": 2868, "title": "[DROOLS-5270] Refactored AST factories to avoid duplication ", "bodyText": "@danielezonca @jiripetrlik\nsee https://issues.redhat.com/browse/DROOLS-5270\nMain AST predicate factories are used to transform PMML predicates to rules.\nBoth Tree model and Scorecard model uses predicates, but the overall logic is different, so they have to be managed in slightly different way.\nIdea behind this refactoring is to \"hide\" the different implementation behind generic \"factories\" which, in turns, will call the correct implementation based on the received parameters.", "createdAt": "2020-04-23T15:49:31Z", "url": "https://github.com/kiegroup/drools/pull/2868", "merged": true, "mergeCommit": {"oid": "27d2005113ec7c970d663af48cd036f6b2fde258"}, "closed": true, "closedAt": "2020-04-24T12:51:32Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcae3ORgH2gAyNDA4MDExNTc3OmUzOGNkYTA0YTIxMWQ3YWRkZGRlZWFiOTEzZGY5OGQxMTllY2MyMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaw-HOAFqTM5OTkxNjg5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e38cda04a211d7addddeeab913df98d119ecc230", "committedDate": "2020-04-23T15:45:35Z", "message": "[DROOLS-5270] Refactored AST factories to avoid duplication between tree model and scorecard model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Mjc5MDE2", "url": "https://github.com/kiegroup/drools/pull/2868#pullrequestreview-399279016", "createdAt": "2020-04-23T16:36:34Z", "commit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozNjozNVrOGKxhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo1Mzo1OVrOGKyRPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDM3Nw==", "bodyText": "Can you please double check these changes? Accumulator is an AtomicReference so it is a reference and I don't know how useful could be to compare/hash it.\nDo you compare different KiePMMLStatusHolder instances? When do you expect them to be the same?", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413950377", "createdAt": "2020-04-23T16:36:35Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/KiePMMLStatusHolder.java", "diffHunk": "@@ -48,11 +62,12 @@ public boolean equals(Object o) {\n             return false;\n         }\n         KiePMMLStatusHolder that = (KiePMMLStatusHolder) o;\n-        return Objects.equals(status, that.status);\n+        return Objects.equals(status, that.status) &&\n+                Objects.equals(accumulator, that.accumulator);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(status);\n+        return Objects.hash(status, accumulator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDkyOA==", "bodyText": "When this can happen? Is it an expected condition?", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413950928", "createdAt": "2020-04-23T16:37:23Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/utils/KiePMMLDroolsModelUtils.java", "diffHunk": "@@ -43,6 +43,9 @@ public static String getSanitizedClassName(String input) {\n      * @return\n      */\n     public static Object getCorrectlyFormattedResult(Object rawValue, DATA_TYPE targetType) {\n+        if (rawValue == null) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NDgxOQ==", "bodyText": "If you want prevent external classes to alter the map you should create a new instance here like you are doing in the getter", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413954819", "createdAt": "2020-04-23T16:42:53Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/PredicateASTFactoryData.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dmg.pmml.Predicate;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Data class to contain objects required by <b>Predicate</b>s concrete ASTFactories\n+ */\n+public class PredicateASTFactoryData {\n+\n+    private final Predicate predicate;\n+    private final List<KiePMMLOutputField> outputFields;\n+    private final List<KiePMMLDroolsRule> rules;\n+    private final String parentPath;\n+    private final String currentRule;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    public PredicateASTFactoryData(Predicate predicate,\n+                                   List<KiePMMLOutputField> outputFields,\n+                                   List<KiePMMLDroolsRule> rules,\n+                                   String parentPath,\n+                                   String currentRule,\n+                                   Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        this.predicate = predicate;\n+        this.outputFields = outputFields;\n+        this.rules = rules;\n+        this.parentPath = parentPath;\n+        this.currentRule = currentRule;\n+        this.fieldTypeMap = fieldTypeMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NTE4MA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413955180", "createdAt": "2020-04-23T16:43:23Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -62,31 +66,42 @@ public void declareRhs(final KiePMMLDroolsRule rule) {\n     protected void declareDefaultThen(final KiePMMLDroolsRule rule) {\n         StringJoiner joiner = new StringJoiner(\"\");\n         if (rule.getStatusToSet() != null) {\n-            joiner.add(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+            joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+        }\n+        if (rule.getStatusToSet() != null || rule.getToAccumulate() != null) {\n+            joiner.add(UPDATE_STATUS_HOLDER);\n         }\n         commonDeclareThen(rule, joiner);\n         builder.rhs(joiner.toString());\n     }\n \n     protected void declareIfThen(final KiePMMLDroolsRule rule) {\n-        builder.rhs(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+        builder.rhs(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+//        builder.rhs(UPDATE_STATUS_HOLDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NTI3NA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413955274", "createdAt": "2020-04-23T16:43:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -62,31 +66,42 @@ public void declareRhs(final KiePMMLDroolsRule rule) {\n     protected void declareDefaultThen(final KiePMMLDroolsRule rule) {\n         StringJoiner joiner = new StringJoiner(\"\");\n         if (rule.getStatusToSet() != null) {\n-            joiner.add(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+            joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+        }\n+        if (rule.getStatusToSet() != null || rule.getToAccumulate() != null) {\n+            joiner.add(UPDATE_STATUS_HOLDER);\n         }\n         commonDeclareThen(rule, joiner);\n         builder.rhs(joiner.toString());\n     }\n \n     protected void declareIfThen(final KiePMMLDroolsRule rule) {\n-        builder.rhs(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+        builder.rhs(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+//        builder.rhs(UPDATE_STATUS_HOLDER);\n         StringJoiner joiner = new StringJoiner(\"\");\n-        joiner.add(String.format(UPDATE_STATUS_HOLDER, DONE));\n+        joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, DONE));\n         commonDeclareThen(rule, joiner);\n+//        joiner.add(UPDATE_STATUS_HOLDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODgzNw==", "bodyText": "Are you sure of this condition? If I understand it correct the code, this get(null) will always throw a NPE [1].\n[1] https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#get-java.lang.Object- [..]If the specified obj argument is null, the method throws a NullPointerException.[..]", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413958837", "createdAt": "2020-04-23T16:48:41Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -111,6 +111,16 @@ public Object getActualValue(Object rawValue) {\n                 throw new KieDataFieldException(\"Fail to convert \" + rawValue + \"[\" + rawValue.getClass().getName() + \"] to expected class \" + mappedClass.getName(), e);\n             }\n         }\n+        if (!rawValue.getClass().isPrimitive()) {\n+            try {\n+                if (mappedClass.equals(rawValue.getClass().getField(\"TYPE\").get(null))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MjU1OQ==", "bodyText": "If you create a common Builder interface with at least withAccumulationResult, withResult and withResultCode you can probably create a couple of static methods and get rid of:\n\nKiePMMLSimpleSetPredicateWithAccumulationASTFactory\nKiePMMLSimpleSetPredicateWithResultASTFactory\nKiePMMLTruePredicateWithAccumulationASTFactory\nKiePMMLTruePredicateWithResultASTFactory\npart of KiePMMLCompoundPredicateWithAccumulationASTFactory\npart of KiePMMLSimplePredicateWithResultASTFactory\npart of KiePMMLSimplePredicateWithAccumulationASTFactory\npart of KiePMMLCompoundPredicateWithResultASTFactory\n\nWdyt?\nIt could be done with another ticket too of course.", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413962559", "createdAt": "2020-04-23T16:53:59Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateWithAccumulationASTFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDroolsRule</code> out of a <code>SimpleSetPredicate</code>\n+ */\n+public class KiePMMLSimpleSetPredicateWithAccumulationASTFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e0eda6781e8250d2b4dd02489067002999f7c7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/50e0eda6781e8250d2b4dd02489067002999f7c7", "committedDate": "2020-04-24T08:27:12Z", "message": "[DROOLS-5270] Fixed as per PR suggestin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODM1NjQ5", "url": "https://github.com/kiegroup/drools/pull/2868#pullrequestreview-399835649", "createdAt": "2020-04-24T10:41:58Z", "commit": {"oid": "50e0eda6781e8250d2b4dd02489067002999f7c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210111fc8df698162adb241c958385a280c69e3f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/210111fc8df698162adb241c958385a280c69e3f", "committedDate": "2020-04-24T11:01:12Z", "message": "[DROOLS-5270] Fixed as per PR suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTE2ODkw", "url": "https://github.com/kiegroup/drools/pull/2868#pullrequestreview-399916890", "createdAt": "2020-04-24T12:51:24Z", "commit": {"oid": "210111fc8df698162adb241c958385a280c69e3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1500, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}