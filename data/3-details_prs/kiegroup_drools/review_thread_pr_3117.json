{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzYwNzc5", "number": 3117, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODozNToxOFrOEl-s4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1OToyNFrOEpdoNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjYwMDY1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODozNToxOFrOHVvsqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo1ODo0MFrOHVyxZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU2MzYyNQ==", "bodyText": "One question. It seems that \"kie-pmml-models-tests\" is an util module for all other tests. Does it make sense to put its abstract classes to \"test\" folder? I think it would be much easier to put these utils into main folder. We can avoid of usage of classifiers etc. I expect there will be no functionality for users in this module.", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r492563625", "createdAt": "2020-09-22T08:35:18Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/pom.xml", "diffHunk": "@@ -30,6 +30,13 @@\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>\n     </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-models-tests</artifactId>\n+      <classifier>tests</classifier>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfcb74568f1062f7495785a63e2448f4cbe47db"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYxMzk4OA==", "bodyText": "@jiripetrlik\nFine for me, going to refactor", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r492613988", "createdAt": "2020-09-22T09:58:40Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/pom.xml", "diffHunk": "@@ -30,6 +30,13 @@\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>\n     </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-models-tests</artifactId>\n+      <classifier>tests</classifier>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU2MzYyNQ=="}, "originalCommit": {"oid": "1dfcb74568f1062f7495785a63e2448f4cbe47db"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzM2MTQ4OnYy", "diffSide": "RIGHT", "path": "drools-compiler/src/main/java/org/drools/compiler/lang/descr/PackageDescr.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo1Mzo1OFrOHXW16Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo1Mzo1OFrOHXW16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1MzU0NQ==", "bodyText": "Make the new field serializable adding it to readExternal/writeExternal methods.", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r494253545", "createdAt": "2020-09-24T11:53:58Z", "author": {"login": "mariofusco"}, "path": "drools-compiler/src/main/java/org/drools/compiler/lang/descr/PackageDescr.java", "diffHunk": "@@ -52,6 +53,7 @@\n     private Set<EntryPointDeclarationDescr> entryPointDeclarations = Collections.emptySet();\n     private Set<WindowDeclarationDescr>     windowDeclarations     = Collections.emptySet();\n     private List<EnumDeclarationDescr>      enumDeclarations       = Collections.emptyList();\n+    private String preferredPkgUUID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f787e7d5f2b968afe09082d39f552aa906c83747"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDQxNzI5OnYy", "diffSide": "RIGHT", "path": "drools-compiler/src/test/java/org/drools/compiler/lang/descr/CompositePackageDescrTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjowNDo0NlrOHZ1hDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo0Njo0OVrOHbl2Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1MzI2Mw==", "bodyText": "Can you please add an assertion?", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r496853263", "createdAt": "2020-09-29T16:04:46Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/test/java/org/drools/compiler/lang/descr/CompositePackageDescrTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.compiler.lang.descr;\n+\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.drools.core.util.StringUtils.generateUUID;\n+\n+public class CompositePackageDescrTest {\n+\n+    private static final String NAMESPACE = \"namespace\";\n+    private  CompositePackageDescr compositePackageDescr;\n+\n+    @Before\n+    public void setup() {\n+        compositePackageDescr = new CompositePackageDescr(new ByteArrayResource(), new PackageDescr(NAMESPACE));\n+    }\n+\n+    @Test\n+    public void addPackageDescrSamePkgUUID() {\n+        String pkgUUID = generateUUID();\n+        PackageDescr toAdd = new PackageDescr(NAMESPACE);\n+        toAdd.setPreferredPkgUUID(pkgUUID);\n+        compositePackageDescr.addPackageDescr(new ByteArrayResource(), toAdd);\n+        toAdd = new PackageDescr(NAMESPACE);\n+        toAdd.setPreferredPkgUUID(pkgUUID);\n+        compositePackageDescr.addPackageDescr(new ByteArrayResource(), toAdd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76609c97e116dac8ab25594a8d778ee69d54084"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5MzY2Mg==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r498693662", "createdAt": "2020-10-02T08:46:49Z", "author": {"login": "gitgabrio"}, "path": "drools-compiler/src/test/java/org/drools/compiler/lang/descr/CompositePackageDescrTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.compiler.lang.descr;\n+\n+import org.drools.core.io.impl.ByteArrayResource;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.drools.core.util.StringUtils.generateUUID;\n+\n+public class CompositePackageDescrTest {\n+\n+    private static final String NAMESPACE = \"namespace\";\n+    private  CompositePackageDescr compositePackageDescr;\n+\n+    @Before\n+    public void setup() {\n+        compositePackageDescr = new CompositePackageDescr(new ByteArrayResource(), new PackageDescr(NAMESPACE));\n+    }\n+\n+    @Test\n+    public void addPackageDescrSamePkgUUID() {\n+        String pkgUUID = generateUUID();\n+        PackageDescr toAdd = new PackageDescr(NAMESPACE);\n+        toAdd.setPreferredPkgUUID(pkgUUID);\n+        compositePackageDescr.addPackageDescr(new ByteArrayResource(), toAdd);\n+        toAdd = new PackageDescr(NAMESPACE);\n+        toAdd.setPreferredPkgUUID(pkgUUID);\n+        compositePackageDescr.addPackageDescr(new ByteArrayResource(), toAdd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1MzI2Mw=="}, "originalCommit": {"oid": "e76609c97e116dac8ab25594a8d778ee69d54084"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDY0NDM2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NjoyMVrOHZ3rlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NjoyMVrOHZ3rlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4ODcyNA==", "bodyText": "There are 2 <!-- EXTERNAL --> and btw what about add scope test to all the dependencies of this module?", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r496888724", "createdAt": "2020-09-29T16:46:21Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/pom.xml", "diffHunk": "@@ -66,6 +71,10 @@\n       <scope>test</scope>\n     </dependency>\n     <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76609c97e116dac8ab25594a8d778ee69d54084"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODkzNTIwOnYy", "diffSide": "RIGHT", "path": "drools-core/src/test/java/org/drools/core/util/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoxMDoyOVrOHbHX9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo0OTozOVrOHbl7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5NDQyMw==", "bodyText": "What about a private static class instead of this method? Just to avoid to create an anonymous inner class for every test", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r498194423", "createdAt": "2020-10-01T12:10:29Z", "author": {"login": "danielezonca"}, "path": "drools-core/src/test/java/org/drools/core/util/StringUtilsTest.java", "diffHunk": "@@ -247,4 +251,71 @@ public void test_indexOfOutOfQuotes() {\n         assertEquals(8, indexOfOutOfQuotes(\"bla\\\"bla\\\"bla\", \"bla\", 1));\n         assertEquals(-1, indexOfOutOfQuotes(\"bla\\\"bla\\\"bla\", \"bla\", 9));\n     }\n+\n+    @Test\n+    public void getPkgUUIDFromReleaseIdNotNullNotSnapshot() {\n+        ReleaseId releaseId = getReleaseId(false);\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(releaseId, packageName);\n+        String expected = md5Hash(releaseId.toString()+packageName);\n+        assertEquals(expected, retrieved);\n+    }\n+\n+    @Test\n+    public void getPkgUUIDFromReleaseIdNotNullSnapshot() {\n+        ReleaseId releaseId = getReleaseId(true);\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(releaseId, packageName);\n+        String unexpected = md5Hash(releaseId.toString()+packageName);\n+        assertNotEquals(unexpected, retrieved);\n+    }\n+\n+    @Test\n+    public void getPkgUUIDFromReleaseIdNull() {\n+        ReleaseId releaseId = null;\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(releaseId, packageName);\n+        assertNotNull(retrieved);\n+    }\n+\n+    @Test\n+    public void getPkgUUIDFromGAV() {\n+        String gav = \"group:artifact:version\";\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(gav, packageName);\n+        String expected = md5Hash(gav+packageName);\n+        assertEquals(expected, retrieved);\n+    }\n+\n+\n+    private ReleaseId getReleaseId(boolean isSnapshot) {\n+        return new ReleaseId() {\n+            final boolean snapshot = isSnapshot;\n+\n+            @Override\n+            public String getGroupId() {\n+                return \"group\";\n+            }\n+\n+            @Override\n+            public String getArtifactId() {\n+                return \"artifact\";\n+            }\n+\n+            @Override\n+            public String getVersion() {\n+                return \"version\";\n+            }\n+\n+            @Override\n+            public String toExternalForm() {\n+                return \"externalForm\";\n+            }\n+\n+            @Override\n+            public boolean isSnapshot() {\n+                return snapshot;\n+            }\n+        };\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1088e84b0e85db98b2fa44f99b18d9868dbdacb"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5NTA5Ng==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r498695096", "createdAt": "2020-10-02T08:49:39Z", "author": {"login": "gitgabrio"}, "path": "drools-core/src/test/java/org/drools/core/util/StringUtilsTest.java", "diffHunk": "@@ -247,4 +251,71 @@ public void test_indexOfOutOfQuotes() {\n         assertEquals(8, indexOfOutOfQuotes(\"bla\\\"bla\\\"bla\", \"bla\", 1));\n         assertEquals(-1, indexOfOutOfQuotes(\"bla\\\"bla\\\"bla\", \"bla\", 9));\n     }\n+\n+    @Test\n+    public void getPkgUUIDFromReleaseIdNotNullNotSnapshot() {\n+        ReleaseId releaseId = getReleaseId(false);\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(releaseId, packageName);\n+        String expected = md5Hash(releaseId.toString()+packageName);\n+        assertEquals(expected, retrieved);\n+    }\n+\n+    @Test\n+    public void getPkgUUIDFromReleaseIdNotNullSnapshot() {\n+        ReleaseId releaseId = getReleaseId(true);\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(releaseId, packageName);\n+        String unexpected = md5Hash(releaseId.toString()+packageName);\n+        assertNotEquals(unexpected, retrieved);\n+    }\n+\n+    @Test\n+    public void getPkgUUIDFromReleaseIdNull() {\n+        ReleaseId releaseId = null;\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(releaseId, packageName);\n+        assertNotNull(retrieved);\n+    }\n+\n+    @Test\n+    public void getPkgUUIDFromGAV() {\n+        String gav = \"group:artifact:version\";\n+        String packageName = \"apackage\";\n+        String retrieved = getPkgUUID(gav, packageName);\n+        String expected = md5Hash(gav+packageName);\n+        assertEquals(expected, retrieved);\n+    }\n+\n+\n+    private ReleaseId getReleaseId(boolean isSnapshot) {\n+        return new ReleaseId() {\n+            final boolean snapshot = isSnapshot;\n+\n+            @Override\n+            public String getGroupId() {\n+                return \"group\";\n+            }\n+\n+            @Override\n+            public String getArtifactId() {\n+                return \"artifact\";\n+            }\n+\n+            @Override\n+            public String getVersion() {\n+                return \"version\";\n+            }\n+\n+            @Override\n+            public String toExternalForm() {\n+                return \"externalForm\";\n+            }\n+\n+            @Override\n+            public boolean isSnapshot() {\n+                return snapshot;\n+            }\n+        };\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5NDQyMw=="}, "originalCommit": {"oid": "d1088e84b0e85db98b2fa44f99b18d9868dbdacb"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTEyNTAzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1OToyNFrOHbJMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo0NjoyNlrOHbl1Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNDI1OA==", "bodyText": "This class should be moved to a more \"public\" module like some -api module. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r498224258", "createdAt": "2020-10-01T12:59:24Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.assembler.factories;\n+\n+import java.io.File;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.core.RuleBaseConfiguration;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.KieBase;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <b>Factory</b> class to hide implementation details to end user\n+ */\n+public class PMMLRuntimeFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1088e84b0e85db98b2fa44f99b18d9868dbdacb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5MzQ1MQ==", "bodyText": "@danielezonca\nThis would require moving other classes to API. I agree, but I would prefer to do that in the \"clean up api\" ticket https://issues.redhat.com/browse/DROOLS-5688", "url": "https://github.com/kiegroup/drools/pull/3117#discussion_r498693451", "createdAt": "2020-10-02T08:46:26Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.assembler.factories;\n+\n+import java.io.File;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.core.RuleBaseConfiguration;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.kie.api.KieBase;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <b>Factory</b> class to hide implementation details to end user\n+ */\n+public class PMMLRuntimeFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNDI1OA=="}, "originalCommit": {"oid": "d1088e84b0e85db98b2fa44f99b18d9868dbdacb"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2323, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}