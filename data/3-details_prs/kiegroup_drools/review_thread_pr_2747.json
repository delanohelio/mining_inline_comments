{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjU5NzQy", "number": 2747, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNzoyMFrODd8m_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNzoyMFrODd8m_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI4MzE3OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/model/DTAnalysis.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNzoyMFrOFm1qpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozNzoyMFrOFm1qpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2OTQ3OQ==", "bodyText": "it could be more readable if the function's name starts with \"get\"", "url": "https://github.com/kiegroup/drools/pull/2747#discussion_r376269479", "createdAt": "2020-02-07T08:37:20Z", "author": {"login": "hellowdan"}, "path": "kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/model/DTAnalysis.java", "diffHunk": "@@ -692,4 +694,51 @@ public boolean is2ndNFViolation() {\n         return Collections.unmodifiableCollection(contractionsViolating2ndNF);\n     }\n \n+    public void computeHitPolicyRecommender() {\n+        if (!gaps.isEmpty() || !isHitPolicySingle(sourceDT.getHitPolicy())) {\n+            return;\n+        }\n+        if (overlaps.isEmpty() && sourceDT.getHitPolicy() != HitPolicy.UNIQUE) {\n+            passThruMessages.add(new DMNDTAnalysisMessage(this,\n+                                                          Severity.WARN,\n+                                                          MsgUtil.createMessage(Msg.DTANALYSIS_HITPOLICY_RECOMMENDER_UNIQUE,\n+                                                                                nameOrIDOfTable()),\n+                                                          Msg.DTANALYSIS_HITPOLICY_RECOMMENDER_UNIQUE.getType()));\n+        } else if (!overlaps.isEmpty()) {\n+            boolean overlapsShareSameOutput = true;\n+            for (Overlap ol : overlaps) {\n+                List<Integer> rules = ol.getRules();\n+                Set<List<Comparable<?>>> outputsForOverlap = new HashSet<>();\n+                for (Integer ruleID : rules) {\n+                    outputsForOverlap.add(ddtaTable.getRule().get(ruleID - 1).getOutputEntry());\n+                }\n+                overlapsShareSameOutput &= outputsForOverlap.size() == 1;\n+            }\n+            if (overlapsShareSameOutput && sourceDT.getHitPolicy() != HitPolicy.ANY) {\n+                passThruMessages.add(new DMNDTAnalysisMessage(this,\n+                                                              sourceDT.getHitPolicy() == HitPolicy.UNIQUE ? Severity.ERROR : Severity.WARN,\n+                                                              MsgUtil.createMessage(Msg.DTANALYSIS_HITPOLICY_RECOMMENDER_ANY,\n+                                                                                    nameOrIDOfTable()),\n+                                                              Msg.DTANALYSIS_HITPOLICY_RECOMMENDER_ANY.getType()));\n+            } else if (!overlapsShareSameOutput && sourceDT.getHitPolicy() != HitPolicy.PRIORITY) {\n+                passThruMessages.add(new DMNDTAnalysisMessage(this,\n+                                                              Severity.ERROR,\n+                                                              MsgUtil.createMessage(Msg.DTANALYSIS_HITPOLICY_RECOMMENDER_PRIORITY,\n+                                                                                    nameOrIDOfTable()),\n+                                                              Msg.DTANALYSIS_HITPOLICY_RECOMMENDER_PRIORITY.getType()));\n+            }\n+        }\n+    }\n+\n+    public boolean isHitPolicySingle(HitPolicy hp) {\n+        return hp == HitPolicy.UNIQUE || hp == HitPolicy.ANY || hp == HitPolicy.PRIORITY || hp == HitPolicy.FIRST;\n+    }\n+\n+    private String nameOrIDOfTable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ea2789f80df1d98515772d50bad5691073788"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2568, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}