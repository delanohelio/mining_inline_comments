{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDk4MjA4", "number": 2857, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNjo1MTozNVrODyXLOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNjo1MTozNVrODyXLOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTM1MDk3OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNjo1MTozNVrOGGW9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNjo1MTozNVrOGGW9ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMDg0Mg==", "bodyText": "Similar to standard-drl, we want to evaluate only direct statements.\nFor example, assuming you have\n{\n    System.out.println(\"name.length = \" + $p.getName().length());\n    modify($p) { setAge(41) };\n}\n\nin RHS. findModifiedProperties() takes various MethodCallExpr as methodCallExprs.\n\nSystem.out.println(\"name.length = \" + $p.getName().length())\n$p.getName().length()\n$p.getName()\n($p).setAge(41)\n\nHowever, what we want to parse are, only direct statements.\n\nSystem.out.println(\"name.length = \" + $p.getName().length())\n($p).setAge(41)\n\nThen, System.out.println(\"name.length = \" + $p.getName().length()) is not accepted because scope is not $p.\nThen, only \"age\" is parsed as modified property.", "url": "https://github.com/kiegroup/drools/pull/2857#discussion_r409320842", "createdAt": "2020-04-16T06:51:35Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "diffHunk": "@@ -425,6 +428,10 @@ private AssignExpr createBitMaskField(String updatedVar, MethodCallExpr bitMaskC\n         return modifiedProps;\n     }\n \n+    private boolean isDirectExpression(MethodCallExpr methodCall) {\n+        return methodCall.getParentNode().map(parent -> parent instanceof ExpressionStmt).orElse(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7baecdcd0aabc2c6554fdee65a9321692c19f62"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2483, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}