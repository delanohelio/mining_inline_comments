{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NTQ5MzM2", "number": 2870, "title": "Drools 4589 - Refactor of Scorecards", "bodyText": "@danielezonca @jiripetrlik\nScorecard have been implemented as drools rules.\nThe overall design is pretty similar to Tree model.\nRemarkable differences are\n\nScorecard Characteristics are treated like Tree Node\nI had to implement an \"accumulator\" because the final result is the algebraic sum of all the matched characteristic(s)", "createdAt": "2020-04-24T13:24:26Z", "url": "https://github.com/kiegroup/drools/pull/2870", "merged": true, "mergeCommit": {"oid": "b529f37fa4051adedbe8fabc1b6bdfd4bea7c6a9"}, "closed": true, "closedAt": "2020-05-07T10:36:17Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX4W5ZAH2gAyNDA4NTQ5MzM2OjgzNTYxNmJkZTY5ODZmN2RjMGUwNzAzNDI5ZDA1MjNmMWYwOGJlNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce53zWgFqTQwNzMwMjI0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "835616bde6986f7dc0e0703429d0523f1f08be6d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/835616bde6986f7dc0e0703429d0523f1f08be6d", "committedDate": "2020-04-15T13:46:02Z", "message": "[DROOLS-4859] Fixing generic models archetype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c128e3cd0eac7ea391897c48e847b42b327d521", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5c128e3cd0eac7ea391897c48e847b42b327d521", "committedDate": "2020-04-15T15:07:36Z", "message": "[DROOLS-4859] Implemented model-drools archetype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225e4f8641a2e25fb4ce84f3b60bc7e998bb4321", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/225e4f8641a2e25fb4ce84f3b60bc7e998bb4321", "committedDate": "2020-04-15T15:47:45Z", "message": "[DROOLS-4859] Created scorecard stub module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042d3f7de3662423667e6c792a3c626a6b0d2e74", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/042d3f7de3662423667e6c792a3c626a6b0d2e74", "committedDate": "2020-04-21T08:25:33Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models-drools-archetype/Readme.md\n#\tkie-pmml-new/kie-pmml-models-drools-archetype/pom.xml\n#\tkie-pmml-new/kie-pmml-models-drools-archetype/src/main/resources/archetype-resources/__rootArtifactId__-compiler/src/test/java/__packageModelName__/drools/compiler/executor/__modelName__ModelImplementationProviderTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7adcdd3c8c096cac30016fe10da0986a2c7a3d7a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7adcdd3c8c096cac30016fe10da0986a2c7a3d7a", "committedDate": "2020-04-21T12:15:41Z", "message": "[DROOLS-5261] Move shared code/classes to common modules/packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14941f4e8c434c9699a7bef09805833d1eaec50a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/14941f4e8c434c9699a7bef09805833d1eaec50a", "committedDate": "2020-04-21T12:20:26Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5261' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abbd37ab37e5855a71f3b68147167dca141c6004", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/abbd37ab37e5855a71f3b68147167dca141c6004", "committedDate": "2020-04-21T14:15:39Z", "message": "[DROOLS-4589] Begin implementation of AST factories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f265105d4db3db0056b647b89960839ac7f2585d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f265105d4db3db0056b647b89960839ac7f2585d", "committedDate": "2020-04-21T14:15:46Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350dbfe5cff1d04f47a6c53511997eaae99386aa", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/350dbfe5cff1d04f47a6c53511997eaae99386aa", "committedDate": "2020-04-22T12:40:48Z", "message": "[DROOLS-4589] Basic working status. No expression implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e38cda04a211d7addddeeab913df98d119ecc230", "committedDate": "2020-04-23T15:45:35Z", "message": "[DROOLS-5270] Refactored AST factories to avoid duplication between tree model and scorecard model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ed543945ff67a0593ce26b9c6d53187b329ede", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b2ed543945ff67a0593ce26b9c6d53187b329ede", "committedDate": "2020-04-23T15:53:04Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5270' into DROOLS-4589\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLPredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLTruePredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLTruePredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e0eda6781e8250d2b4dd02489067002999f7c7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/50e0eda6781e8250d2b4dd02489067002999f7c7", "committedDate": "2020-04-24T08:27:12Z", "message": "[DROOLS-5270] Fixed as per PR suggestin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597483906ae6b2e85308a58c4c6bb5a83839fd70", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/597483906ae6b2e85308a58c4c6bb5a83839fd70", "committedDate": "2020-04-24T09:57:19Z", "message": "[DROOLS-4589] Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe7fe670ea4170be22ac983b475d3c768e44455", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4fe7fe670ea4170be22ac983b475d3c768e44455", "committedDate": "2020-04-24T09:58:01Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5270' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76aacecf92180069ad7d5654abf452d63bad102b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/76aacecf92180069ad7d5654abf452d63bad102b", "committedDate": "2020-04-24T13:10:23Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/KiePMMLStatusHolder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f28a145b338ec0a37ff309d0801ea4a5c17e182a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f28a145b338ec0a37ff309d0801ea4a5c17e182a", "committedDate": "2020-04-24T13:16:42Z", "message": "[DROOLS-4589] Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0", "committedDate": "2020-04-24T13:20:13Z", "message": "[DROOLS-4589] Add Release status"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTQ0NTg5", "url": "https://github.com/kiegroup/drools/pull/2870#pullrequestreview-399944589", "createdAt": "2020-04-24T13:27:07Z", "commit": {"oid": "1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNzowN1rOGLXpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyOTo0NVrOGLXwZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NDk0NA==", "bodyText": "I think this test comes from the archetype. We should remove or implement it :)", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r414574944", "createdAt": "2020-04-24T13:27:07Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/drools/compiler/executor/ScorecardModelImplementationProviderTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.scorecard.compiler.executor;\n+\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class ScorecardModelImplementationProviderTest {\n+\n+    private static final ScorecardModelImplementationProvider PROVIDER= new ScorecardModelImplementationProvider();\n+\n+    @Test\n+    public void getPMMLModelType(){\n+        assertEquals(PMML_MODEL.SCORECARD_MODEL,PROVIDER.getPMMLModelType());\n+    }\n+\n+    @Test\n+    public void getKiePMMLModel() throws Exception {\n+        // TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NjMxMQ==", "bodyText": "Just general consideration, we should think about a way to \"automatically\" refresh these type of files that contain the output of the generation.\nWdyt?\nOf course it is not something to be done in this ticket :)", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r414576311", "createdAt": "2020-04-24T13:29:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-evaluator/src/test/resources/ScorecardSample.drl", "diffHunk": "@@ -0,0 +1,213 @@\n+package sample_score", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3Njc0MA==", "bodyText": "?\nI think we should implement this method :)", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r414576740", "createdAt": "2020-04-24T13:29:45Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-model/src/main/java/org/kie/pmml/models/drools/scorecard/model/KiePMMLScorecardModel.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package  org.kie.pmml.models.drools.scorecard.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModel;\n+\n+public class KiePMMLScorecardModel extends KiePMMLDroolsModel {\n+\n+    public static final PMML_MODEL PMML_MODEL_TYPE = PMML_MODEL.SCORECARD_MODEL;\n+\n+\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions, MINING_FUNCTION miningFunction) {\n+        return new Builder(name, extensions, miningFunction);\n+    }\n+\n+    public static PMML_MODEL getPmmlModelType() {\n+        return PMML_MODEL_TYPE;\n+    }\n+\n+    private KiePMMLScorecardModel(String modelName, List<KiePMMLExtension> extensions) {\n+        super(modelName, extensions);\n+    }\n+\n+    @Override\n+    public Object evaluate(Map<String, Object> requestData) {\n+        // TODO\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a17602bdf89f87c839634bd7728d3799bfd76341", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a17602bdf89f87c839634bd7728d3799bfd76341", "committedDate": "2020-04-28T09:34:12Z", "message": "[DROOLS-4589] Refactored DATA_TYPE to avoid reflection. Implemented PrimitiveBoxedUtils as support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69fb7fc99d63af83ffa98f9c56d2432a7addca74", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/69fb7fc99d63af83ffa98f9c56d2432a7addca74", "committedDate": "2020-04-28T10:21:03Z", "message": "[DROOLS-4589] Implemented KiePMMLScorecardModelCharacteristicASTFactoryTest. Implemented missing tests. Refactoring some common classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzMxMjg3", "url": "https://github.com/kiegroup/drools/pull/2870#pullrequestreview-401731287", "createdAt": "2020-04-28T11:10:14Z", "commit": {"oid": "69fb7fc99d63af83ffa98f9c56d2432a7addca74"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMToxMDoxNFrOGNO2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMToxNDowOFrOGNO_ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyODA3MA==", "bodyText": "Just a \"codestyle\" comment. You can use TYPE field in boxed classes to get primitive class of it (i.e. Boolean.TYPE instead of boolean.class)", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r416528070", "createdAt": "2020-04-28T11:10:14Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/PrimitiveBoxedUtils.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to map a <b>primitive</b> with its <b>boxed</b> equivalent.\n+ * Needed to avoid reflection at runtime.\n+ */\n+public class PrimitiveBoxedUtils {\n+\n+    private static final Set<PrimitiveBoxed> KIE_PMML_PRIMITIVE_BOXEDS = new HashSet<>(\n+            Arrays.asList(new PrimitiveBoxed(boolean.class, Boolean.class),\n+                          new PrimitiveBoxed(byte.class, Byte.class),\n+                          new PrimitiveBoxed(char.class, Character.class),\n+                          new PrimitiveBoxed(float.class, Float.class),\n+                          new PrimitiveBoxed(int.class, Integer.class),\n+                          new PrimitiveBoxed(long.class, Long.class),\n+                          new PrimitiveBoxed(short.class, Short.class),\n+                          new PrimitiveBoxed(double.class, Double.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fb7fc99d63af83ffa98f9c56d2432a7addca74"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUzMDI3Ng==", "bodyText": "Can you fix this TODO?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r416530276", "createdAt": "2020-04-28T11:14:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/pom.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie</groupId>\n+    <artifactId>kie-pmml-models-drools-scorecard</artifactId>\n+    <version>7.37.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-models-drools-scorecard-compiler</artifactId>\n+\n+  <name>KIE :: PMML :: Models :: Drools :: Scorecard :: Compiler</name>\n+  <description>PMML Scorecard Compiler</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-commons</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-models-drools-scorecard-model</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-api</artifactId>\n+      <classifier>tests</classifier>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-commons</artifactId>\n+      <classifier>tests</classifier>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-models-drools-common</artifactId>\n+      <classifier>tests</classifier>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <!-- TODO MOVE TO kie-pmml-new/pom.xml -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fb7fc99d63af83ffa98f9c56d2432a7addca74"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddd196f0f3fd084dcd2fb2ec5ebdcbe3a1986a6", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4ddd196f0f3fd084dcd2fb2ec5ebdcbe3a1986a6", "committedDate": "2020-04-28T12:29:48Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e548de06921b59f16e783c08620481789c8769b2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e548de06921b59f16e783c08620481789c8769b2", "committedDate": "2020-04-28T12:30:09Z", "message": "[DROOLS-4589] Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef39f0f83350d5162c4f4463ef35e7ecc8600cc2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ef39f0f83350d5162c4f4463ef35e7ecc8600cc2", "committedDate": "2020-04-28T12:56:30Z", "message": "[DROOLS-4589] Fixed as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e299560a793700f8f1ee7ad1e1ff54458f83c0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/47e299560a793700f8f1ee7ad1e1ff54458f83c0", "committedDate": "2020-04-29T09:17:17Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d17682b77f8e09459d1cdb98cda929838b9e4e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/43d17682b77f8e09459d1cdb98cda929838b9e4e", "committedDate": "2020-04-29T10:02:17Z", "message": "[DROOLS-4589] Move drools evaluation inside model itself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344f7f1a9d140a15b51ce72356c591f609148e9b", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/344f7f1a9d140a15b51ce72356c591f609148e9b", "committedDate": "2020-04-29T11:33:52Z", "message": "[DROOLS-5239] Simple scorecard test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe93748cd419cc33de30a12ddf337fd979bc157", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/dfe93748cd419cc33de30a12ddf337fd979bc157", "committedDate": "2020-04-29T12:59:08Z", "message": "[DROOLS-4589] Fixing usage of Attribute partialScore inside generated rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb212d7cf826ca0085dc17237a43e6b2806c59a0", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/fb212d7cf826ca0085dc17237a43e6b2806c59a0", "committedDate": "2020-04-29T13:42:07Z", "message": "[DROOLS-5239] Fix simple scorecard test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0febba16cacc586c2fdceb8387b33246f2a1cb28", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0febba16cacc586c2fdceb8387b33246f2a1cb28", "committedDate": "2020-04-29T14:24:02Z", "message": "[DROOLS-4589] Fixing OutputField (only for predictedValue feature)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abef3d79fad32dd64c479f0393d95d898c06ac91", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/abef3d79fad32dd64c479f0393d95d898c06ac91", "committedDate": "2020-04-29T14:24:13Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-4589' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc39fbbce1400666793c381fa446a1a15c05b0b", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/2dc39fbbce1400666793c381fa446a1a15c05b0b", "committedDate": "2020-04-29T14:30:44Z", "message": "[DROOLS-5239] Use target fields for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f3812514aae8413e176ae16faf642156cc7c54", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/41f3812514aae8413e176ae16faf642156cc7c54", "committedDate": "2020-04-29T14:49:13Z", "message": "[DROOLS-5239] Add test for simple scorecard with categorical variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09da97b521f826a43048cfb275c804f3261f67a3", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/09da97b521f826a43048cfb275c804f3261f67a3", "committedDate": "2020-04-30T10:53:57Z", "message": "[DROOLS-5239] Add simple scorecard test with mixed variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b6d1a7ccc13b1003e485ff684469b08df9c960", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/d7b6d1a7ccc13b1003e485ff684469b08df9c960", "committedDate": "2020-04-30T14:25:32Z", "message": "[DROOLS-5239] Add test for compound predicates in scorecards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8092604c1eef46bac24646928947ff740acd42f2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8092604c1eef46bac24646928947ff740acd42f2", "committedDate": "2020-04-30T15:07:27Z", "message": "[DROOLS-4589] Implemented reason code evaluation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f5cf123d76671bfddc74b0785dbc20d7a131a9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/57f5cf123d76671bfddc74b0785dbc20d7a131a9", "committedDate": "2020-04-30T15:08:43Z", "message": "Merge branch 'DROOLS-4589' of github.com:gitgabrio/drools into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0724040e0e801922ea448d37e3befc42ef3f1f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0f0724040e0e801922ea448d37e3befc42ef3f1f", "committedDate": "2020-04-30T15:50:42Z", "message": "[DROOLS-4589] Fixed evaluation with compound predicates. Fixed reasoncode population"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2041554a4fa2fc319df1d1554695f1523b89961d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2041554a4fa2fc319df1d1554695f1523b89961d", "committedDate": "2020-04-30T15:51:11Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f775a7b65079ef27726f58d5d1727d09efb062", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/88f775a7b65079ef27726f58d5d1727d09efb062", "committedDate": "2020-05-04T13:28:55Z", "message": "[DROOLS-5239] Add tests for nested compound predicates in scorecards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7f52a16dd8125390428a23dc9cda673c88a6aa", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/2d7f52a16dd8125390428a23dc9cda673c88a6aa", "committedDate": "2020-05-04T14:47:43Z", "message": "[DROOLS-5239] Add basic test for evaluation of partial score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f0688720a922cb10d2877eebcc0a7316e976085", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6f0688720a922cb10d2877eebcc0a7316e976085", "committedDate": "2020-05-05T07:38:13Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "447f49ab863a2f68d6940fcd6386d492d03ab093", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/447f49ab863a2f68d6940fcd6386d492d03ab093", "committedDate": "2020-05-05T13:18:51Z", "message": "[DROOLS-4589] Fixed CompoundNestedPredicate. Update version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c5db7371489d16e3f2872bca7226a76e566213", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/68c5db7371489d16e3f2872bca7226a76e566213", "committedDate": "2020-05-05T13:37:00Z", "message": "[DROOLS-4589] Ignoring BasicComplexPartialScoreTest since it is using ComplexPartialScore -> Expression (not implemented in this iteration)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/d83c7b702e7c955bcb89ad260d03ba680b0706a7", "committedDate": "2020-05-05T14:04:21Z", "message": "[DROOLS-5239] Add test for nested complex partial score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "630733ca1504761fdc3896f0fba8af7c09dfda9a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/630733ca1504761fdc3896f0fba8af7c09dfda9a", "committedDate": "2020-05-06T14:21:47Z", "message": "[DROOLS-4589] Minor refactoring. Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46051d7a62218a4f1bf1a493622fc804de1de6a9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/46051d7a62218a4f1bf1a493622fc804de1de6a9", "committedDate": "2020-05-06T14:22:20Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjQ5NTk3", "url": "https://github.com/kiegroup/drools/pull/2870#pullrequestreview-406649597", "createdAt": "2020-05-06T14:08:03Z", "commit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowODowNFrOGRU1rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoyODozMVrOGRVzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMDM5Ng==", "bodyText": "Would it be possible to add some warning to this switch? Something which warns about unexpected value. Or can we remove this default?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420820396", "createdAt": "2020-05-06T14:08:04Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -109,6 +120,7 @@ protected void commonDeclareOutputFields(final List<KiePMMLOutputField> outputFi\n             switch (kiePMMLOutputField.getResultFeature()) {\n                 case PREDICTED_VALUE:\n                     joiner.add(String.format(ADD_PMML4_OUTPUT_FIELD, kiePMMLOutputField.getName(), result));\n+                    break;\n                 default:\n                     // Not managed, yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTg1NA==", "bodyText": "I would suggest to use \"KiePMMLDroolsModel.class\" without getName. I think that it wills add also package name to log output.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420821854", "createdAt": "2020-05-06T14:09:56Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModel.java", "diffHunk": "@@ -18,21 +18,38 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.StringJoiner;\n import java.util.function.Supplier;\n \n import org.drools.compiler.lang.descr.PackageDescr;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.commons.enums.ResultCode;\n import org.kie.pmml.commons.model.KiePMMLExtension;\n import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.drools.utils.KiePMMLSessionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.drools.utils.KiePMMLAgendaListenerUtils.getAgendaEventListener;\n \n /**\n  * KIE representation of PMML model that use <b>drool</b> for implementation\n  */\n public abstract class KiePMMLDroolsModel extends KiePMMLModel {\n \n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDroolsModel.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMjQ1NA==", "bodyText": "Can you please split this line earlier. It still creates long lines which decrease readability.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420832454", "createdAt": "2020-05-06T14:23:54Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java", "diffHunk": "@@ -88,7 +92,11 @@ public void declareRuleFromCompoundPredicateAndOrXorFinalLeaf() {\n     @Test\n     public void declareRuleFromCompoundPredicateAndOrXorNotFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        List<SimplePredicate> predicates = IntStream.range(0, 2).mapToObj(index -> getSimplePredicate(\"SIMPLEPREDICATE-\" + index, DataType.STRING, \"VALUE-\" + index, fieldTypeMap)).collect(Collectors.toList());\n+        List<SimplePredicate> predicates = IntStream.range(0, 2).mapToObj(index -> getSimplePredicate(\"SIMPLEPREDICATE-\" + index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMjczNg==", "bodyText": "Can you please split this line earlier. It still creates long lines which decrease readability.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420832736", "createdAt": "2020-05-06T14:24:13Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java", "diffHunk": "@@ -127,7 +135,11 @@ public void declareRuleFromCompoundPredicateAndOrXorNotFinalLeaf() {\n     @Test\n     public void declareRuleFromCompoundPredicateSurrogateFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        List<SimplePredicate> predicates = IntStream.range(0, 2).mapToObj(index -> getSimplePredicate(\"SIMPLEPREDICATE-\" + index, DataType.STRING, \"VALUE-\" + index, fieldTypeMap)).collect(Collectors.toList());\n+        List<SimplePredicate> predicates = IntStream.range(0, 2).mapToObj(index -> getSimplePredicate(\"SIMPLEPREDICATE-\" + index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMjgyNQ==", "bodyText": "Can you please split this line earlier. It still creates long lines which decrease readability.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420832825", "createdAt": "2020-05-06T14:24:20Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java", "diffHunk": "@@ -184,7 +196,11 @@ public void declareRuleFromCompoundPredicateSurrogateFinalLeaf() {\n     @Test\n     public void declareRuleFromCompoundPredicateSurrogateNotFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        List<SimplePredicate> predicates = IntStream.range(0, 2).mapToObj(index -> getSimplePredicate(\"SIMPLEPREDICATE-\" + index, DataType.STRING, \"VALUE-\" + index, fieldTypeMap)).collect(Collectors.toList());\n+        List<SimplePredicate> predicates = IntStream.range(0, 2).mapToObj(index -> getSimplePredicate(\"SIMPLEPREDICATE-\" + index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMzIyOQ==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420833229", "createdAt": "2020-05-06T14:24:50Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java", "diffHunk": "@@ -42,7 +42,7 @@\n     @Test\n     public void declareRuleFromSimplePredicateSurrogateFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", fieldTypeMap);\n+        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", SimplePredicate.Operator.LESS_THAN, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMzMwOA==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420833308", "createdAt": "2020-05-06T14:24:55Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java", "diffHunk": "@@ -99,7 +99,7 @@ public void declareRuleFromSimplePredicateSurrogateFinalLeaf() {\n     @Test\n     public void declareRuleFromSimplePredicateSurrogateNotFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", fieldTypeMap);\n+        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", SimplePredicate.Operator.LESS_THAN, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMzQyNg==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420833426", "createdAt": "2020-05-06T14:25:05Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java", "diffHunk": "@@ -155,7 +155,7 @@ public void declareRuleFromSimplePredicateSurrogateNotFinalLeaf() {\n     @Test\n     public void declareRuleFromSimplePredicateFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", fieldTypeMap);\n+        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", SimplePredicate.Operator.LESS_THAN, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMzUxNw==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420833517", "createdAt": "2020-05-06T14:25:12Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java", "diffHunk": "@@ -184,7 +184,7 @@ public void declareRuleFromSimplePredicateFinalLeaf() {\n     @Test\n     public void declareIntermediateRuleFromSimplePredicateNotFinalLeaf() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", fieldTypeMap);\n+        SimplePredicate simplePredicate = getSimplePredicate(\"outlook\", DataType.STRING, \"VALUE\", SimplePredicate.Operator.LESS_THAN, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMzcwMQ==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420833701", "createdAt": "2020-05-06T14:25:28Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java", "diffHunk": "@@ -38,7 +38,7 @@ public void getConstraintEntryFromSimplePredicates() {\n         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n         String fieldName = \"FIELD_NAME\";\n         List<SimplePredicate> simplePredicates = IntStream.range(0, 2)\n-                .mapToObj(index -> KiePMMLASTTestUtils.getSimplePredicate(fieldName, DataType.STRING, \"VALUE-\" + index, fieldTypeMap)).collect(Collectors.toList());\n+                .mapToObj(index -> KiePMMLASTTestUtils.getSimplePredicate(fieldName, DataType.STRING, \"VALUE-\" + index, SimplePredicate.Operator.LESS_THAN, fieldTypeMap)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMzgwNA==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420833804", "createdAt": "2020-05-06T14:25:34Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java", "diffHunk": "@@ -64,12 +64,12 @@ public static DataField getDottedTypeDataField() {\n         return toReturn;\n     }\n \n-    public static SimplePredicate getSimplePredicate(String predicateName, DataType dataType, String value, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+    public static SimplePredicate getSimplePredicate(String predicateName, DataType dataType, Object value, final SimplePredicate.Operator operator, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzNDI3OQ==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420834279", "createdAt": "2020-05-06T14:26:11Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelASTFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.scorecard.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.scorecard.Scorecard;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.enums.REASONCODE_ALGORITHM;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsAST;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsType;\n+import org.kie.pmml.models.drools.ast.factories.KiePMMLAbstractModelASTFactory;\n+import org.kie.pmml.models.drools.ast.factories.KiePMMLDataDictionaryASTFactory;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLOutputFieldFactory.getOutputFields;\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetFieldType;\n+\n+/**\n+ * Class used to generate a <code>KiePMMLDroolsAST</code> out of a <code>DataDictionary</code> and a <code>Scorecard</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzNDM1Nw==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420834357", "createdAt": "2020-05-06T14:26:17Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelASTFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.scorecard.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.scorecard.Scorecard;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.enums.REASONCODE_ALGORITHM;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsAST;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsType;\n+import org.kie.pmml.models.drools.ast.factories.KiePMMLAbstractModelASTFactory;\n+import org.kie.pmml.models.drools.ast.factories.KiePMMLDataDictionaryASTFactory;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLOutputFieldFactory.getOutputFields;\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetFieldType;\n+\n+/**\n+ * Class used to generate a <code>KiePMMLDroolsAST</code> out of a <code>DataDictionary</code> and a <code>Scorecard</code>\n+ */\n+public class KiePMMLScorecardModelASTFactory extends KiePMMLAbstractModelASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelASTFactory.class.getName());\n+\n+    private KiePMMLScorecardModelASTFactory() {\n+        // Avoid instantiation\n+    }\n+\n+    /**\n+     * Returns the <code>KiePMMLDroolsAST</code> built out of the given parameters.\n+     * It also <b>populate</b> the <b>fieldNameTypeNameMap</b> with mapping between original field' name and <b>original type/generated type</b> tupla", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzNjE0NA==", "bodyText": "Can we use some kind of dependency management here instead of property values?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420836144", "createdAt": "2020-05-06T14:28:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/pom.xml", "diffHunk": "@@ -121,6 +121,22 @@\n         <artifactId>kie-pmml-models-drools-tree-evaluator</artifactId>\n         <version>${version.org.kie}</version>\n       </dependency>\n+      <!-- Scorecard -->\n+      <dependency>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-pmml-models-drools-scorecard-model</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTE5NTgx", "url": "https://github.com/kiegroup/drools/pull/2870#pullrequestreview-404919581", "createdAt": "2020-05-04T11:56:47Z", "commit": {"oid": "2041554a4fa2fc319df1d1554695f1523b89961d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTo1Njo0N1rOGP9Frw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTozMDowNFrOGRYvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MjcwMw==", "bodyText": "Are you sure this is common and not specific for scorecards?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r419382703", "createdAt": "2020-05-04T11:56:47Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/BASELINE_METHOD.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/Scorecard.html#baselinemethod>baselinemethod</a>\n+ */\n+public enum BASELINE_METHOD {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2041554a4fa2fc319df1d1554695f1523b89961d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4Mjg1MA==", "bodyText": "Are you sure this is common and not specific for scorecards?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r419382850", "createdAt": "2020-05-04T11:57:03Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/REASONCODE_ALGORITHM.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/Scorecard.html#reasoncodealgorithm>reasonCodeAlgorithm</a>\n+ */\n+public enum REASONCODE_ALGORITHM {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2041554a4fa2fc319df1d1554695f1523b89961d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0NjAzNQ==", "bodyText": "What about an enum instead of a string for operator? Is it possible to have custom operators?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420846035", "createdAt": "2020-05-06T14:41:18Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -86,24 +86,22 @@ public void declareLhs(final KiePMMLDroolsRule rule) {\n         }\n     }\n \n-    protected void declareConstraintsAnd(final List<KiePMMLFieldOperatorValue> andConstraints, final CEDescrBuilder<?, AndDescr> andBuilder) {\n-        andConstraints.forEach(kiePMMLOperatorValue -> {\n-            if (kiePMMLOperatorValue.getName() != null) {\n-                commonDeclarePatternWithConstraint(andBuilder, kiePMMLOperatorValue.getName(), kiePMMLOperatorValue.getConstraintsAsString());\n-            }\n-            if (kiePMMLOperatorValue.getNestedKiePMMLFieldOperatorValues() != null) {\n-                declareConstraintsAnd(kiePMMLOperatorValue.getNestedKiePMMLFieldOperatorValues(), andBuilder.and());\n-            }\n-        });\n-    }\n-\n-    protected void declareConstraintsOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, OrDescr> orBuilder) {\n+    protected void declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder) {\n         for (KiePMMLFieldOperatorValue kiePMMLOperatorValue : orConstraints) {\n             if (kiePMMLOperatorValue.getName() != null) {\n-                commonDeclarePatternWithConstraint(orBuilder, kiePMMLOperatorValue.getName(), kiePMMLOperatorValue.getConstraintsAsString());\n+                commonDeclarePatternWithConstraint(andOrBuilder, kiePMMLOperatorValue.getName(), kiePMMLOperatorValue.getConstraintsAsString());\n             }\n             if (kiePMMLOperatorValue.getNestedKiePMMLFieldOperatorValues() != null) {\n-                declareConstraintsOr(kiePMMLOperatorValue.getNestedKiePMMLFieldOperatorValues(), orBuilder.or());\n+                switch (kiePMMLOperatorValue.getOperator()) {\n+                    case \"||\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46051d7a62218a4f1bf1a493622fc804de1de6a9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0NzgwNQ==", "bodyText": "Please rename as droolsModel or droolsPMMLModel for consistency", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420847805", "createdAt": "2020-05-06T14:43:29Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/DroolsModelExecutor.java", "diffHunk": "@@ -29,57 +18,14 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(DroolsModelExecutor.class.getName());\n \n-    private static final AgendaEventListener agendaEventListener = new AgendaEventListener() {\n-        public void matchCancelled(MatchCancelledEvent event) {/*Not used */}\n-\n-        public void matchCreated(MatchCreatedEvent event) {/*Not used */}\n-\n-        public void afterMatchFired(AfterMatchFiredEvent event) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(event.toString());\n-            }\n-        }\n-\n-        public void agendaGroupPopped(AgendaGroupPoppedEvent event) {/*Not used */}\n-\n-        public void agendaGroupPushed(AgendaGroupPushedEvent event) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(event.toString());\n-            }\n-        }\n-\n-        public void beforeMatchFired(BeforeMatchFiredEvent event) {/*Not used */}\n-\n-        public void beforeRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {/*Not used */}\n-\n-        public void afterRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {/*Not used */}\n-\n-        public void beforeRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {/*Not used */}\n-\n-        public void afterRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {/*Not used */}\n-    };\n-\n     @Override\n     public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n         if (!(model instanceof KiePMMLDroolsModel)) {\n             throw new KiePMMLModelException(\"Expected a KiePMMLDroolsModel, received a \" + model.getClass().getName());\n         }\n         final KiePMMLDroolsModel drooledModel = (KiePMMLDroolsModel) model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46051d7a62218a4f1bf1a493622fc804de1de6a9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTM2NQ==", "bodyText": "Can you split this signature in multiple lines for readability?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420849365", "createdAt": "2020-05-06T14:45:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -140,4 +120,53 @@ public static Object getCorrectlyFormattedObject(final SimplePredicate simplePre\n         DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField().getValue()).getOriginalType());\n         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);\n     }\n+\n+    /**\n+     * Populate the given <code>List&lt;KiePMMLFieldOperatorValue&gt;</code> with <code>KiePMMLFieldOperatorValue</code>s generated from the given <b>predicatesByField</b>\n+     * @param toPopulate\n+     * @param booleanOperator\n+     * @param predicatesByField\n+     * @param fieldTypeMap\n+     */\n+    static void populateKiePMMLFieldOperatorValueListWithSimplePredicates(final List<KiePMMLFieldOperatorValue> toPopulate, final CompoundPredicate.BooleanOperator booleanOperator, final Map<String, List<SimplePredicate>> predicatesByField, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46051d7a62218a4f1bf1a493622fc804de1de6a9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NDMyNA==", "bodyText": "Can you please wrap this call with an if statement and add it only if the log level is debug?", "url": "https://github.com/kiegroup/drools/pull/2870#discussion_r420884324", "createdAt": "2020-05-06T15:30:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModel.java", "diffHunk": "@@ -50,17 +67,41 @@ public PackageDescr getPackageDescr() {\n         return fieldTypeMap;\n     }\n \n+    @Override\n+    public Object evaluate(Map<String, Object> requestData) {\n+        final PMML4Result toReturn = getPMML4Result(targetField);\n+        final KiePMMLSessionUtils kiePMMLSessionUtils = KiePMMLSessionUtils.builder(packageDescr, toReturn)\n+                .withAgendaEventListener(agendaEventListener)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46051d7a62218a4f1bf1a493622fc804de1de6a9"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8352a8d4fa60112b292ffb6e9c62d51626bf10", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3d8352a8d4fa60112b292ffb6e9c62d51626bf10", "committedDate": "2020-05-07T07:56:49Z", "message": "[DROOLS-4589] Fixing as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c151a0e4fc06492a095c5a99bde9ea0f965da8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/16c151a0e4fc06492a095c5a99bde9ea0f965da8", "committedDate": "2020-05-07T09:05:58Z", "message": "[DROOLS-4589] Replaced String with OPERATOR inside KiePMMLOperatorValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93f63c903945f2341ec38ec0ac3f65be8721a2b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d93f63c903945f2341ec38ec0ac3f65be8721a2b", "committedDate": "2020-05-07T09:05:58Z", "message": "[DROOLS-4589] Replaced String with BOOLEAN_OPERATOR inside KiePMMLFieldOperatorValue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Mjk1NzQz", "url": "https://github.com/kiegroup/drools/pull/2870#pullrequestreview-407295743", "createdAt": "2020-05-07T09:20:45Z", "commit": {"oid": "d93f63c903945f2341ec38ec0ac3f65be8721a2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzAyMjQ3", "url": "https://github.com/kiegroup/drools/pull/2870#pullrequestreview-407302247", "createdAt": "2020-05-07T09:29:21Z", "commit": {"oid": "d93f63c903945f2341ec38ec0ac3f65be8721a2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1505, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}