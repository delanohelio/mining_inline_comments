{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MTQ0Mjc5", "number": 2730, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzozNTowMlrODaC8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzozNjoxNVrODaC8pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjM3NzY1OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzozNTowMlrOFgyCig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDoxMzoyMFrOFg483w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODYwMg==", "bodyText": "This creates a standard construct (as I see in case of simple StaticJavaParser.parseResource()) of \"D\" and \"execute\" so we will see only \"execute\" afterwards.", "url": "https://github.com/kiegroup/drools/pull/2730#discussion_r369918602", "createdAt": "2020-01-23T03:35:02Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "diffHunk": "@@ -248,7 +248,7 @@ private MethodCallExpr executeCall(BlockStmt ruleVariablesBlock, BlockStmt ruleC\n \n \n         boolean requireDrools = rewriteRHS(ruleVariablesBlock, ruleConsequence);\n-        MethodCallExpr executeCall = new MethodCallExpr(onCall, onCall == null ? \"D.\" + EXECUTE_CALL : EXECUTE_CALL);\n+        MethodCallExpr executeCall = new MethodCallExpr(onCall != null ? onCall : new NameExpr(\"D\"), EXECUTE_CALL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5847221c2f8619473d52c53a9fd53d14445ca1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzMTgzOQ==", "bodyText": "Perfect thank you @tkobayas", "url": "https://github.com/kiegroup/drools/pull/2730#discussion_r370031839", "createdAt": "2020-01-23T10:13:20Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "diffHunk": "@@ -248,7 +248,7 @@ private MethodCallExpr executeCall(BlockStmt ruleVariablesBlock, BlockStmt ruleC\n \n \n         boolean requireDrools = rewriteRHS(ruleVariablesBlock, ruleConsequence);\n-        MethodCallExpr executeCall = new MethodCallExpr(onCall, onCall == null ? \"D.\" + EXECUTE_CALL : EXECUTE_CALL);\n+        MethodCallExpr executeCall = new MethodCallExpr(onCall != null ? onCall : new NameExpr(\"D\"), EXECUTE_CALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODYwMg=="}, "originalCommit": {"oid": "ef5847221c2f8619473d52c53a9fd53d14445ca1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjM3ODYxOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzozNjoxNVrOFgyDJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzozNjoxNVrOFgyDJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODc1OA==", "bodyText": "This change is required to pass AmbiguousExceptionTest in drools-test-coverage/test-suite/.", "url": "https://github.com/kiegroup/drools/pull/2730#discussion_r369918758", "createdAt": "2020-01-23T03:36:15Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequence.java", "diffHunk": "@@ -49,7 +49,7 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         }\n \n         MethodDeclaration methodDeclaration = classDeclaration.addMethod(\"execute\", Modifier.Keyword.PUBLIC);\n-        methodDeclaration.setThrownExceptions(NodeList.nodeList(parseClassOrInterfaceType(\"Exception\")));\n+        methodDeclaration.setThrownExceptions(NodeList.nodeList(parseClassOrInterfaceType(\"java.lang.Exception\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5847221c2f8619473d52c53a9fd53d14445ca1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2633, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}