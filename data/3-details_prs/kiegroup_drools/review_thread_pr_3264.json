{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjE1MjI3", "number": 3264, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyODoyMFrOE9jHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoxNjo0OVrOE9smtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTczOTM0OnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyODoyMFrOH6SxwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzowNTo1N1rOH6i-QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NzEwNA==", "bodyText": "can be replaced with method reference\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        notifyAllListeners(event, (l, e) -> l.onSignal(e));\n          \n          \n            \n                        notifyAllListeners(event, ProcessEventListener::onSignal);", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r530887104", "createdAt": "2020-11-26T09:28:20Z", "author": {"login": "afalhambra"}, "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "diffHunk": "@@ -143,6 +145,29 @@ public void fireAfterSLAViolated(final ProcessInstance instance, NodeInstance no\n         }\n     }\n \n+    public void fireOnSignal(final ProcessInstance instance,\n+                             NodeInstance nodeInstance,\n+                             KieRuntime kruntime,\n+                             String signalName,\n+                             Object signalObject) {\n+        if (hasListeners()) {\n+            final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n+            notifyAllListeners(event, (l, e) -> l.onSignal(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MjQ0OQ==", "bodyText": "good point", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531152449", "createdAt": "2020-11-26T17:05:57Z", "author": {"login": "fjtirado"}, "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "diffHunk": "@@ -143,6 +145,29 @@ public void fireAfterSLAViolated(final ProcessInstance instance, NodeInstance no\n         }\n     }\n \n+    public void fireOnSignal(final ProcessInstance instance,\n+                             NodeInstance nodeInstance,\n+                             KieRuntime kruntime,\n+                             String signalName,\n+                             Object signalObject) {\n+        if (hasListeners()) {\n+            final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n+            notifyAllListeners(event, (l, e) -> l.onSignal(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NzEwNA=="}, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTc0MTcwOnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyODo0OVrOH6SzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyODo0OVrOH6SzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NzQ3Mw==", "bodyText": "same as above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        notifyAllListeners(event, (l, e) -> l.onMessage(e));\n          \n          \n            \n                        notifyAllListeners(event, ProcessEventListener::onMessage);", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r530887473", "createdAt": "2020-11-26T09:28:49Z", "author": {"login": "afalhambra"}, "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "diffHunk": "@@ -143,6 +145,29 @@ public void fireAfterSLAViolated(final ProcessInstance instance, NodeInstance no\n         }\n     }\n \n+    public void fireOnSignal(final ProcessInstance instance,\n+                             NodeInstance nodeInstance,\n+                             KieRuntime kruntime,\n+                             String signalName,\n+                             Object signalObject) {\n+        if (hasListeners()) {\n+            final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n+            notifyAllListeners(event, (l, e) -> l.onSignal(e));\n+        }\n+    }\n+\n+    public void fireOnMessage(final ProcessInstance instance,\n+                              NodeInstance nodeInstance,\n+                              KieRuntime kruntime,\n+                              String messageName,\n+                              Object messageObject) {\n+        if (hasListeners()) {\n+            final MessageEvent event = new MessageEventImpl(instance, kruntime, nodeInstance, messageName,\n+                    messageObject);\n+            notifyAllListeners(event, (l, e) -> l.onMessage(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTI5MjA4OnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoxNjoxNlrOH6hgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzowODoxOFrOH6jB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODQ4MQ==", "bodyText": "toString() method may be implemented to be similar to other classes that extend from ProcessEvent, wdyt?", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531128481", "createdAt": "2020-11-26T16:16:16Z", "author": {"login": "gmunozfe"}, "path": "drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.core.event;\n+\n+import org.kie.api.event.process.MessageEvent;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class MessageEventImpl extends ProcessEvent implements MessageEvent {\n+\n+    private static final long serialVersionUID = 1L;\n+    private NodeInstance nodeInstance;\n+    private String messageName;\n+    private Object messageObject;\n+\n+    public MessageEventImpl(ProcessInstance instance, KieRuntime kruntime, NodeInstance nodeInstance,\n+                            String messageName, Object messageObject) {\n+        super(instance, kruntime);\n+        this.nodeInstance = nodeInstance;\n+        this.messageName = messageName;\n+        this.messageObject = messageObject;\n+    }\n+\n+    @Override\n+    public NodeInstance getNodeInstance() {\n+        return nodeInstance;\n+    }\n+\n+    @Override\n+    public String getMessageName() {\n+        return messageName;\n+    }\n+\n+    @Override\n+    public Object getMessage() {\n+        return messageObject;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MzM5NA==", "bodyText": "done", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531153394", "createdAt": "2020-11-26T17:08:18Z", "author": {"login": "fjtirado"}, "path": "drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.core.event;\n+\n+import org.kie.api.event.process.MessageEvent;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class MessageEventImpl extends ProcessEvent implements MessageEvent {\n+\n+    private static final long serialVersionUID = 1L;\n+    private NodeInstance nodeInstance;\n+    private String messageName;\n+    private Object messageObject;\n+\n+    public MessageEventImpl(ProcessInstance instance, KieRuntime kruntime, NodeInstance nodeInstance,\n+                            String messageName, Object messageObject) {\n+        super(instance, kruntime);\n+        this.nodeInstance = nodeInstance;\n+        this.messageName = messageName;\n+        this.messageObject = messageObject;\n+    }\n+\n+    @Override\n+    public NodeInstance getNodeInstance() {\n+        return nodeInstance;\n+    }\n+\n+    @Override\n+    public String getMessageName() {\n+        return messageName;\n+    }\n+\n+    @Override\n+    public Object getMessage() {\n+        return messageObject;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODQ4MQ=="}, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTI5Mzk2OnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoxNjo0OVrOH6hhuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzowODoyNlrOH6jCKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODc2Mw==", "bodyText": "Same here, implement toString()", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531128763", "createdAt": "2020-11-26T16:16:49Z", "author": {"login": "gmunozfe"}, "path": "drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.core.event;\n+\n+import org.kie.api.event.process.SignalEvent;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class SignalEventImpl extends ProcessEvent implements SignalEvent {\n+\n+    private static final long serialVersionUID = 1L;\n+    private NodeInstance nodeInstance;\n+    private String signalName;\n+    private Object signalObject;\n+\n+    public SignalEventImpl(ProcessInstance instance, KieRuntime kruntime, NodeInstance nodeInstance,\n+                            String signalName, Object signalObject) {\n+        super(instance, kruntime);\n+        this.nodeInstance = nodeInstance;\n+        this.signalName = signalName;\n+        this.signalObject = signalObject;\n+    }\n+\n+    @Override\n+    public NodeInstance getNodeInstance() {\n+        return nodeInstance;\n+    }\n+\n+    @Override\n+    public String getSignalName() {\n+        return signalName;\n+    }\n+\n+    @Override\n+    public Object getSignal() {\n+        return signalObject;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MzQ0OQ==", "bodyText": "done", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531153449", "createdAt": "2020-11-26T17:08:26Z", "author": {"login": "fjtirado"}, "path": "drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.core.event;\n+\n+import org.kie.api.event.process.SignalEvent;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class SignalEventImpl extends ProcessEvent implements SignalEvent {\n+\n+    private static final long serialVersionUID = 1L;\n+    private NodeInstance nodeInstance;\n+    private String signalName;\n+    private Object signalObject;\n+\n+    public SignalEventImpl(ProcessInstance instance, KieRuntime kruntime, NodeInstance nodeInstance,\n+                            String signalName, Object signalObject) {\n+        super(instance, kruntime);\n+        this.nodeInstance = nodeInstance;\n+        this.signalName = signalName;\n+        this.signalObject = signalObject;\n+    }\n+\n+    @Override\n+    public NodeInstance getNodeInstance() {\n+        return nodeInstance;\n+    }\n+\n+    @Override\n+    public String getSignalName() {\n+        return signalName;\n+    }\n+\n+    @Override\n+    public Object getSignal() {\n+        return signalObject;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODc2Mw=="}, "originalCommit": {"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2299, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}