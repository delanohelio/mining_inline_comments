{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1OTA2OTY2", "number": 2926, "title": "[DROOLS-5324] refactor building of non-native resources from the exec\u2026", "bodyText": "\u2026utable model", "createdAt": "2020-06-01T11:00:14Z", "url": "https://github.com/kiegroup/drools/pull/2926", "merged": true, "mergeCommit": {"oid": "491455413a67da6b90ae4916bd4979dd73c4d757"}, "closed": true, "closedAt": "2020-06-03T15:53:11Z", "author": {"login": "mariofusco"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcm-IrkAH2gAyNDI1OTA2OTY2OjE5MDUxNDQ4MGNhOTg4N2FjZWY3ZTZhNDc1NDFjMDBiMTdhOGIxMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnlL12gFqTQyMzMzMDQxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "190514480ca9887acef7e6a47541c00b17a8b118", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/190514480ca9887acef7e6a47541c00b17a8b118", "committedDate": "2020-06-01T10:58:48Z", "message": "[DROOLS-5324] refactor building of non-native resources from the executable model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzc2NDAy", "url": "https://github.com/kiegroup/drools/pull/2926#pullrequestreview-421776402", "createdAt": "2020-06-01T11:34:31Z", "commit": {"oid": "190514480ca9887acef7e6a47541c00b17a8b118"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTozNDozMVrOGdHcug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTo0MDo1MVrOGdHl3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4MzkzMA==", "bodyText": "Is it possible to remove this workaround too hardcoded on ResourceType.PMML and use the generic new isNative condition?", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r433183930", "createdAt": "2020-06-01T11:34:31Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -205,30 +213,26 @@ public InternalKnowledgeBase createKieBase(KieBaseModelImpl kBaseModel, KieProje\n         checkStreamMode(kBaseModel, conf, kpkgs.getKiePackages());\n         InternalKnowledgeBase kieBase = new KieBaseBuilder(kBaseModel, kBaseConf).createKieBase(kpkgs);\n \n-        if (hasNonModelResources(kBaseModel, kieProject)) {\n-            KnowledgePackagesBuildResult knowledgePackagesBuildResult = ((AbstractKieModule) internalKieModule).buildKnowledgePackages(kBaseModel, kieProject, messages);\n-            if (knowledgePackagesBuildResult.hasErrors()) {\n-                return null;\n-            }\n-            Collection<KiePackage> pkgs = knowledgePackagesBuildResult.getPkgs();\n-            for (KiePackage pk : pkgs) {\n+        buildNonNativeResources( kBaseModel, kieProject, messages, kieBase );\n+        return kieBase;\n+    }\n+\n+    private void buildNonNativeResources( KieBaseModelImpl kBaseModel, KieProject kieProject, ResultsImpl messages, InternalKnowledgeBase kieBase ) {\n+        (( AbstractKieProject ) kieProject).setBuildFilter( BUILD_NON_NATIVE );\n+        KnowledgeBuilder kbuilder = kieProject.buildKnowledgePackages(kBaseModel, messages);\n+        if ( !kbuilder.hasErrors() ) {\n+            for (KiePackage pk : kbuilder.getKnowledgePackages()) {\n                 // Workaround to \"mark\" already compiled packages (as found inside the kjar and retrieved by createKiePackages(kieProject, kBaseModel, messages, kBaseConf))\n                 // as \"PMML\" packages\n                 boolean isInternalKnowldgePackage = pk instanceof InternalKnowledgePackage;\n-                final InternalKnowledgePackage originalPackage = kieBase.getPackage(pk.getName());\n-                if (originalPackage != null && isInternalKnowldgePackage && ((InternalKnowledgePackage) pk).getResourceTypePackages().get(ResourceType.PMML) != null) {\n-                    originalPackage.getResourceTypePackages().put(ResourceType.PMML, ((InternalKnowledgePackage) pk).getResourceTypePackages().get(ResourceType.PMML));\n-                } else if (originalPackage == null) {\n-                    kieBase.addPackages(pkgs);\n+                final InternalKnowledgePackage originalPackage = kieBase.getPackage( pk.getName() );\n+                if ( originalPackage != null && isInternalKnowldgePackage && (( InternalKnowledgePackage ) pk).getResourceTypePackages().get( ResourceType.PMML ) != null ) {\n+                    originalPackage.getResourceTypePackages().put( ResourceType.PMML, (( InternalKnowledgePackage ) pk).getResourceTypePackages().get( ResourceType.PMML ) );\n+                } else if ( originalPackage == null ) {\n+                    kieBase.addPackage( pk );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190514480ca9887acef7e6a47541c00b17a8b118"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NjI2OQ==", "bodyText": "After this change this additional build will be always invoked even if there are no DMN/PMML resources to build.\nInternally it will become a no-op build in this case but I guess if we are adding visible overhead or not.", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r433186269", "createdAt": "2020-06-01T11:40:51Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -205,30 +213,26 @@ public InternalKnowledgeBase createKieBase(KieBaseModelImpl kBaseModel, KieProje\n         checkStreamMode(kBaseModel, conf, kpkgs.getKiePackages());\n         InternalKnowledgeBase kieBase = new KieBaseBuilder(kBaseModel, kBaseConf).createKieBase(kpkgs);\n \n-        if (hasNonModelResources(kBaseModel, kieProject)) {\n-            KnowledgePackagesBuildResult knowledgePackagesBuildResult = ((AbstractKieModule) internalKieModule).buildKnowledgePackages(kBaseModel, kieProject, messages);\n-            if (knowledgePackagesBuildResult.hasErrors()) {\n-                return null;\n-            }\n-            Collection<KiePackage> pkgs = knowledgePackagesBuildResult.getPkgs();\n-            for (KiePackage pk : pkgs) {\n+        buildNonNativeResources( kBaseModel, kieProject, messages, kieBase );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190514480ca9887acef7e6a47541c00b17a8b118"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/8019174def549d5966dbe18072b42d7b4d7a18c1", "committedDate": "2020-06-01T14:20:04Z", "message": "[DROOLS-5324] refactor building of non-native resources from the executable model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjg0ODAx", "url": "https://github.com/kiegroup/drools/pull/2926#pullrequestreview-423284801", "createdAt": "2020-06-03T07:26:30Z", "commit": {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNjozMFrOGePVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyOTowNVrOGePbBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTY1NA==", "bodyText": "Why this is required only when we are in BUILD_ALL execution?", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434361654", "createdAt": "2020-06-03T07:26:30Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java", "diffHunk": "@@ -234,30 +240,35 @@ public KnowledgeBuilder buildKnowledgePackages( KieBaseModelImpl kBaseModel,\n                 continue;\n             }\n             if (compileIncludedKieBases()) {\n-                addFiles( assets, getKieBaseModel( include ), includeModule, useFolders );\n+                addFiles( buildFilter, assets, getKieBaseModel( include ), includeModule, useFolders );\n             }\n         }\n \n         if (!allIncludesAreValid) {\n             return null;\n         }\n \n-        addFiles( assets, kBaseModel, kModule, useFolders );\n+        addFiles( buildFilter, assets, kBaseModel, kModule, useFolders );\n \n         CompositeKnowledgeBuilder ckbuilder = kbuilder.batch();\n \n+        // cache KnowledgeBuilder and results\n+        if (buildFilter == BUILD_ALL) {\n+            kModule.cacheKnowledgeBuilderForKieBase( kBaseModel.getName(), kbuilder );\n+            kModule.cacheResultsForKieBase( kBaseModel.getName(), messages );\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzE0MA==", "bodyText": "I think BUILD_ALL is misleading as name because if I have understood correctly, this means build all (only) canonical model related resources. Am I right?", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434363140", "createdAt": "2020-06-03T07:29:05Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java", "diffHunk": "@@ -58,6 +59,8 @@\n \n     private final Map<String, KieSessionModel>   kSessionModels             = new HashMap<>();\n \n+    private static final Predicate<String> BUILD_ALL = s -> true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzMwNDEz", "url": "https://github.com/kiegroup/drools/pull/2926#pullrequestreview-423330413", "createdAt": "2020-06-03T08:28:33Z", "commit": {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoyODozM1rOGeRe7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoyODozM1rOGeRe7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NjkwOQ==", "bodyText": "@mariofusco\nWould not be easier to just list PMML and DMN here ?", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434396909", "createdAt": "2020-06-03T08:28:33Z", "author": {"login": "gitgabrio"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -93,7 +93,14 @@\n     public static final String MODEL_FILE_DIRECTORY = \"META-INF/kie/\";\n     public static final String MODEL_FILE_NAME = \"drools-model\";\n     public static final String MODEL_VERSION = \"Drools-Model-Version:\";\n+\n     private static final String PROJECT_MODEL_RESOURCE_CLASS = PROJECT_MODEL_CLASS.replace('.', '/') + \".class\";\n+\n+    private static final Predicate<String> NON_MODEL_RESOURCES = res -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1561, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}