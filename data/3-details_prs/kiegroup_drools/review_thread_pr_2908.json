{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjMzMjk3", "number": 2908, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowMToyM1rOD-htMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1OToyMFrOD-7NeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkwNTQ1OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowMToyM1rOGYrj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowMTo1NVrOGdFLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjczNQ==", "bodyText": "@lucamolteni This check (if patternClass is Object.class, don't use it. So the type of \"_this\" will be UnknownType) comes from your commit. Do you remember why this check is required? I tested without the check but unit tests seemed to work.\n0ac6d1d#diff-d29bcd88c3edecef8fa6351facea3f55R473", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r428532735", "createdAt": "2020-05-21T09:01:23Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "diffHunk": "@@ -477,26 +477,64 @@ public static Expression generateLambdaWithoutParameters(Collection<String> used\n                                                              Expression expr,\n                                                              boolean skipFirstParamAsThis,\n                                                              Optional<Class<?>> patternClass) {\n+        return generateLambdaWithoutParameters(usedDeclarations, expr, skipFirstParamAsThis, patternClass, null);\n+    }\n+    public static Expression generateLambdaWithoutParameters(Collection<String> usedDeclarations,\n+                                                             Expression expr,\n+                                                             boolean skipFirstParamAsThis,\n+                                                             Optional<Class<?>> patternClass,\n+                                                             RuleContext ruleContext) {\n         DrlxParseUtil.transformDrlNameExprToNameExpr(expr);\n         if (skipFirstParamAsThis && usedDeclarations.isEmpty()) {\n             return expr;\n         }\n         LambdaExpr lambdaExpr = new LambdaExpr();\n-        lambdaExpr.setEnclosingParameters( true );\n+        lambdaExpr.setEnclosingParameters(true);\n+\n+        // Only when we can resolve all parameter types, do it\n+        boolean canResolve = canResolveAllParameterTypes(usedDeclarations, skipFirstParamAsThis, patternClass, ruleContext);\n         if (!skipFirstParamAsThis) {\n             Type type;\n-            if(patternClass.isPresent() && usedDeclarations.isEmpty() && patternClass.filter(c -> !Object.class.equals(c)).isPresent()) {\n+            if (canResolve) {\n                 type = StaticJavaParser.parseClassOrInterfaceType(patternClass.get().getCanonicalName());\n             } else {\n                 type = new UnknownType();\n             }\n             lambdaExpr.addParameter(new Parameter(type, THIS_PLACEHOLDER));\n         }\n-        usedDeclarations.stream().map( s -> new Parameter( new UnknownType(), s ) ).forEach( lambdaExpr::addParameter );\n-        lambdaExpr.setBody( new ExpressionStmt(expr) );\n+        usedDeclarations.stream()\n+                        .map(s -> {\n+                            if (canResolve) {\n+                                return new Parameter(getDelarationType(ruleContext, s), s);\n+                            } else {\n+                                return new Parameter(new UnknownType(), s);\n+                            }\n+                        })\n+                        .forEach(lambdaExpr::addParameter);\n+\n+        lambdaExpr.setBody(new ExpressionStmt(expr));\n         return lambdaExpr;\n     }\n \n+    private static boolean canResolveAllParameterTypes(Collection<String> usedDeclarations, boolean skipFirstParamAsThis, Optional<Class<?>> patternClass, RuleContext ruleContext) {\n+        if (!skipFirstParamAsThis && (!patternClass.isPresent() || patternClass.get().equals(Object.class))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDc2OA==", "bodyText": "It's probably unused code then, you can remove it thanks!", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r432284768", "createdAt": "2020-05-29T06:42:04Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "diffHunk": "@@ -477,26 +477,64 @@ public static Expression generateLambdaWithoutParameters(Collection<String> used\n                                                              Expression expr,\n                                                              boolean skipFirstParamAsThis,\n                                                              Optional<Class<?>> patternClass) {\n+        return generateLambdaWithoutParameters(usedDeclarations, expr, skipFirstParamAsThis, patternClass, null);\n+    }\n+    public static Expression generateLambdaWithoutParameters(Collection<String> usedDeclarations,\n+                                                             Expression expr,\n+                                                             boolean skipFirstParamAsThis,\n+                                                             Optional<Class<?>> patternClass,\n+                                                             RuleContext ruleContext) {\n         DrlxParseUtil.transformDrlNameExprToNameExpr(expr);\n         if (skipFirstParamAsThis && usedDeclarations.isEmpty()) {\n             return expr;\n         }\n         LambdaExpr lambdaExpr = new LambdaExpr();\n-        lambdaExpr.setEnclosingParameters( true );\n+        lambdaExpr.setEnclosingParameters(true);\n+\n+        // Only when we can resolve all parameter types, do it\n+        boolean canResolve = canResolveAllParameterTypes(usedDeclarations, skipFirstParamAsThis, patternClass, ruleContext);\n         if (!skipFirstParamAsThis) {\n             Type type;\n-            if(patternClass.isPresent() && usedDeclarations.isEmpty() && patternClass.filter(c -> !Object.class.equals(c)).isPresent()) {\n+            if (canResolve) {\n                 type = StaticJavaParser.parseClassOrInterfaceType(patternClass.get().getCanonicalName());\n             } else {\n                 type = new UnknownType();\n             }\n             lambdaExpr.addParameter(new Parameter(type, THIS_PLACEHOLDER));\n         }\n-        usedDeclarations.stream().map( s -> new Parameter( new UnknownType(), s ) ).forEach( lambdaExpr::addParameter );\n-        lambdaExpr.setBody( new ExpressionStmt(expr) );\n+        usedDeclarations.stream()\n+                        .map(s -> {\n+                            if (canResolve) {\n+                                return new Parameter(getDelarationType(ruleContext, s), s);\n+                            } else {\n+                                return new Parameter(new UnknownType(), s);\n+                            }\n+                        })\n+                        .forEach(lambdaExpr::addParameter);\n+\n+        lambdaExpr.setBody(new ExpressionStmt(expr));\n         return lambdaExpr;\n     }\n \n+    private static boolean canResolveAllParameterTypes(Collection<String> usedDeclarations, boolean skipFirstParamAsThis, Optional<Class<?>> patternClass, RuleContext ruleContext) {\n+        if (!skipFirstParamAsThis && (!patternClass.isPresent() || patternClass.get().equals(Object.class))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjczNQ=="}, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NjY3NA==", "bodyText": "Thanks, removed.", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r433146674", "createdAt": "2020-06-01T10:01:55Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "diffHunk": "@@ -477,26 +477,64 @@ public static Expression generateLambdaWithoutParameters(Collection<String> used\n                                                              Expression expr,\n                                                              boolean skipFirstParamAsThis,\n                                                              Optional<Class<?>> patternClass) {\n+        return generateLambdaWithoutParameters(usedDeclarations, expr, skipFirstParamAsThis, patternClass, null);\n+    }\n+    public static Expression generateLambdaWithoutParameters(Collection<String> usedDeclarations,\n+                                                             Expression expr,\n+                                                             boolean skipFirstParamAsThis,\n+                                                             Optional<Class<?>> patternClass,\n+                                                             RuleContext ruleContext) {\n         DrlxParseUtil.transformDrlNameExprToNameExpr(expr);\n         if (skipFirstParamAsThis && usedDeclarations.isEmpty()) {\n             return expr;\n         }\n         LambdaExpr lambdaExpr = new LambdaExpr();\n-        lambdaExpr.setEnclosingParameters( true );\n+        lambdaExpr.setEnclosingParameters(true);\n+\n+        // Only when we can resolve all parameter types, do it\n+        boolean canResolve = canResolveAllParameterTypes(usedDeclarations, skipFirstParamAsThis, patternClass, ruleContext);\n         if (!skipFirstParamAsThis) {\n             Type type;\n-            if(patternClass.isPresent() && usedDeclarations.isEmpty() && patternClass.filter(c -> !Object.class.equals(c)).isPresent()) {\n+            if (canResolve) {\n                 type = StaticJavaParser.parseClassOrInterfaceType(patternClass.get().getCanonicalName());\n             } else {\n                 type = new UnknownType();\n             }\n             lambdaExpr.addParameter(new Parameter(type, THIS_PLACEHOLDER));\n         }\n-        usedDeclarations.stream().map( s -> new Parameter( new UnknownType(), s ) ).forEach( lambdaExpr::addParameter );\n-        lambdaExpr.setBody( new ExpressionStmt(expr) );\n+        usedDeclarations.stream()\n+                        .map(s -> {\n+                            if (canResolve) {\n+                                return new Parameter(getDelarationType(ruleContext, s), s);\n+                            } else {\n+                                return new Parameter(new UnknownType(), s);\n+                            }\n+                        })\n+                        .forEach(lambdaExpr::addParameter);\n+\n+        lambdaExpr.setBody(new ExpressionStmt(expr));\n         return lambdaExpr;\n     }\n \n+    private static boolean canResolveAllParameterTypes(Collection<String> usedDeclarations, boolean skipFirstParamAsThis, Optional<Class<?>> patternClass, RuleContext ruleContext) {\n+        if (!skipFirstParamAsThis && (!patternClass.isPresent() || patternClass.get().equals(Object.class))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjczNQ=="}, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkyNjA2OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowODozMFrOGYrxKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowODozMFrOGYrxKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNjEwNw==", "bodyText": "@mariofusco I added this code because AccumulateTest.testAccumulateOnStaticMethod failed with my PR. Without this code, SingleDrlxParseSuccess.patternType is \"java.time.Duration\" in the test. My PR expects \"patternType\" to be a Type of \"_this\" (Or this expectation is wrong?). So in the test, the type should be \"org.drools.modelcompiler.AccumulateTest$Interval\". I'm not very sure if this is the right way to fix. Please share your thought on this.", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r428536107", "createdAt": "2020-05-21T09:08:30Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -271,6 +271,13 @@ private void methodCallExprParameter(AccumulateDescr.AccumulateFunctionCallDescr\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n+        if (!decl.isPresent() && input instanceof PatternDescr) {\n+            Optional<DeclarationSpec> accumulateClassDeclOpt = context.getDeclarationById(((PatternDescr)input).getIdentifier());\n+            if (accumulateClassDeclOpt.isPresent()) {\n+                clazz = accumulateClassDeclOpt.get().getDeclarationClass();\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA4NDA5OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1OToyMFrOGZUmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo1NTo1OVrOGaU6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE2OA==", "bodyText": "Sorry, but I don't understand why you needed to do this. Can you please clarify a bit? Also maybe adding a comment in the code could be helpful so we won't forget in future..", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r429205168", "createdAt": "2020-05-22T11:59:20Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -271,6 +271,13 @@ private void methodCallExprParameter(AccumulateDescr.AccumulateFunctionCallDescr\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n+        if (!decl.isPresent() && input instanceof PatternDescr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMzgzMA==", "bodyText": "!decl.isPresent() means rootNodeName was not resolved to a declaration. It means that rootNodeName is not a variable but a class with its static method. I apply this logic (= change clazz) only for the static method case.\nBecause, for example, in AccumulateTest#testAccumulateWithMax(), rootNodeName \"$time\" is Date. It's not the pattern type StockTick. So we shouldn't change clazz. (In this case, the \"_this\" is eventually converted to StockTick by AccumulateVisitorFlowDSL.composeTwoBindings)", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r429813830", "createdAt": "2020-05-25T08:49:18Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -271,6 +271,13 @@ private void methodCallExprParameter(AccumulateDescr.AccumulateFunctionCallDescr\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n+        if (!decl.isPresent() && input instanceof PatternDescr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE2OA=="}, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1ODc5MA==", "bodyText": "@mariofusco If you have any doubt, feel free to let me know. I'm not fully sure about the ramification of changing clazz (= patternType for drlxParse()). But in this case (= class with static method), the method is properly resolved even if I change the clazz from Duration to AccumulateTest$Interval", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r430258790", "createdAt": "2020-05-26T08:55:59Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -271,6 +271,13 @@ private void methodCallExprParameter(AccumulateDescr.AccumulateFunctionCallDescr\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n+        if (!decl.isPresent() && input instanceof PatternDescr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE2OA=="}, "originalCommit": {"oid": "1f6447cfc6459658e4e234d7f450411773af6331"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2528, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}