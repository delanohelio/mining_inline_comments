{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjgxNjY4", "number": 2757, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMTo0NFrODe0E4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzo1M1rODgn0_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjM3MDg5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMTo0NFrOFoKA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1MDowMlrOFop9BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTQ0MQ==", "bodyText": "I would suggest to not use word refactoring in GAV. I know this module is not part of KIE build yet. But if it is merged and added into Drools parent pom as module these GAVs will be exported to Maven central etc. I would suggest to choose something which can be published from the start.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377651441", "createdAt": "2020-02-11T14:01:44Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2011 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kie-pmml-refactoring</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4NjU3OQ==", "bodyText": "@jiripetrlik\nHi! @danielezonca asked me to name it that way. Anyway, I would prefer not to spend too much time in such kind of details right now. If the new and old modules will have to live together (that I would prefer not) we will address this. In the meantime, I did not add kie-pmml-refactoring to parent pom exactly for this reason.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378086579", "createdAt": "2020-02-12T07:54:57Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2011 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kie-pmml-refactoring</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTQ0MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NDM0Mw==", "bodyText": "I'm ok with it. I have no strong opinion about it. We only need to make sure that we do not publish the artifacts on Maven central etc., because it may confuse users in the future.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378094343", "createdAt": "2020-02-12T08:15:54Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2011 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kie-pmml-refactoring</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTQ0MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NDcyNQ==", "bodyText": "@jiripetrlik\nagreed with @danielezonca and @mariofusco to call it \"kie-pmml-new\"", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378174725", "createdAt": "2020-02-12T10:50:02Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2011 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kie-pmml-refactoring</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTQ0MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjQzNzQwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoxOToxMlrOFoKo3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTozNjoxNFrOForVZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA==", "bodyText": "Do we need this class to be serializable. Is there some use case which requires serialization. There is already different serialization implemented in KIE.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377661660", "createdAt": "2020-02-11T14:19:12Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NTU1Mw==", "bodyText": "This class is contained in models that - in turns - will be serialized during kjar compilation (not implemented yet). At the same time, this module (kie-pmml-new) should not depend in anyway from something more \"drools/kie\" specific - that's why I've used java standard \"Serializable\" interface", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378175553", "createdAt": "2020-02-12T10:51:36Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NzM0OQ==", "bodyText": "Thank you for explanation!", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378197349", "createdAt": "2020-02-12T11:36:14Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjQ0NjczOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyMTo0MlrOFoKuqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTozNToxOFrOForTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw==", "bodyText": "Do we expect to compare objects of this class somewhere?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377663147", "createdAt": "2020-02-11T14:21:42Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4ODg2MA==", "bodyText": "@jiripetrlik\nHi! All \"equals\" method of child classes have this snippet\n  if (!super.equals(o)) { return false; }\n\nso implementing \"equals\" on abstract/parent classes allow \"equals\" on children to also considering inherited fields.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378088860", "createdAt": "2020-02-12T08:00:58Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5Mzc0MQ==", "bodyText": "Ok, but the question is why you need to compare children of this class? What is the example or use case for it?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378093741", "createdAt": "2020-02-12T08:14:20Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3MjQ3NQ==", "bodyText": "@jiripetrlik\nThis is part of models that will be put in set/map/list - so having the equals/hashmap will avoid clashing of instances.\nBeside that, IIRC it was suggested by Sonar. Last, I think it is a good practice to add such methods to DTOs because it add predictable behavior.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378172475", "createdAt": "2020-02-12T10:45:44Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTMwMQ==", "bodyText": "@jiripetrlik\nAll these models/pojos are defined to represent XML content and should be not changed. Implementing equals/hashCode give you the possibility to manage them as \"values\" easier (for example compare or add them to a Set).\nI don't think there is a specific use case for now because this PR is just a \"stub\" of the design that will be extended later with multiple model implementations so it is safer to already implement a meaningful equals.\nDoes this answer to your question?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378181301", "createdAt": "2020-02-12T11:02:30Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NjkwMg==", "bodyText": "I'm probably fine with that. I still don't see your point why to define it without use case. But we can keep it there just for safety. Do you plan to use it as keys in HashMaps? Or why to store XMLs in sets? But I'm ok with it to keep it as it is.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378196902", "createdAt": "2020-02-12T11:35:18Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjQ1NDcyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyMzo1MVrOFoKzpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyMzo1MVrOFoKzpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NDQyMA==", "bodyText": "Please remove unnecessary new lines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377664420", "createdAt": "2020-02-11T14:23:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+public abstract class KiePMMLTerm extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+\n+    public KiePMMLTerm(String name) {\n+        super(name);\n+    }\n+\n+    public abstract Number getCoefficient();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjQ3MzkxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyODoxOVrOFoK-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMToxMjo0MlrOFoqqEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA==", "bodyText": "I would suggest to do not add any test utils to API.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377667298", "createdAt": "2020-02-11T14:28:19Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTk3MQ==", "bodyText": "I think this module is more intended to be a -common more than API so I would suggest to rename it to -common.\n@gitgabrio wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378181971", "createdAt": "2020-02-12T11:03:47Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NjI1OQ==", "bodyText": "@danielezonca @jiripetrlik\nRenamed to kie-pmml-commons -as it is actually used for", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378186259", "createdAt": "2020-02-12T11:12:42Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjQ3NTU1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyODo0NVrOFoK_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjowNjoyOFrOFosJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzU3NA==", "bodyText": "If this is used only by Drools implementation it should be in a implementation module and not here in the common API. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377667574", "createdAt": "2020-02-11T14:28:45Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+/**\n+ * Class used inside drools. Rules are fired based on the value of status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMDcxOQ==", "bodyText": "@danielezonca\nMoved to \"drooled\" module", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378210719", "createdAt": "2020-02-12T12:06:28Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+/**\n+ * Class used inside drools. Rules are fired based on the value of status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzU3NA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjUxNTU0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-integration-tests/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozODozMFrOFoLYFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODozMjowNlrOFpu2xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3Mzc1MQ==", "bodyText": "I think we do not need any integration tests in architecture which you proposed. I expect there will be unit tests for models in kie-pmml-models module. Integration tests maybe for example on the level of kie-server. I would suggest to stay with only unit tests in new PMML implementation.\nIt is also much easier to measure test coverage when there are only unit tests located in proper modules with implementation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377673751", "createdAt": "2020-02-11T14:38:30Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-integration-tests/pom.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMzYyMw==", "bodyText": "@jiripetrlik\nTBH I think such tests are needed, beside unit tests.\nOne of the main reason is that actual implementations are not hardcoded, but dinamically retrieved at runtime. So, only firing up the whole environment it is possible to verify that all components are found in proper place when needed. Does this make sense?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379303623", "createdAt": "2020-02-14T08:32:06Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-integration-tests/pom.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3Mzc1MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjUyNzQyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/ToDo.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo0MToxMFrOFoLfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMToyODowNVrOForFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NTU4MQ==", "bodyText": "I think it should be better to track TODOs with a Jira epic or similar instead of a MD file here. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377675581", "createdAt": "2020-02-11T14:41:10Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/ToDo.md", "diffHunk": "@@ -0,0 +1,8 @@\n+TO-DOs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MzM0OA==", "bodyText": "@danielezonca\nRemoved", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378193348", "createdAt": "2020-02-12T11:28:05Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/ToDo.md", "diffHunk": "@@ -0,0 +1,8 @@\n+TO-DOs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NTU4MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjUzMDc3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo0MTo1OFrOFoLhUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo0Mjo0NFrOFqhkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjExMw==", "bodyText": "Manage version of this artifact in the parent or even better in kie-parent.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377676113", "createdAt": "2020-02-11T14:41:58Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNDE3MA==", "bodyText": "@jiripetrlik\nAll those dependency management definitions are only transitory, since as soon as the module will be merged they will be defined in kie-parent", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379304170", "createdAt": "2020-02-14T08:33:32Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjExMw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NzM5NQ==", "bodyText": "@jiripetrlik\n... anyway, for the moment being I've put all of them (the management only) inside parent pom", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379377395", "createdAt": "2020-02-14T11:14:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjExMw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNDQ5OA==", "bodyText": "@gitgabrio\nYes agree. It is probably the best place for dependency management during refactoring.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380134498", "createdAt": "2020-02-17T11:42:44Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjExMw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjUzNTQ0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo0Mjo1OFrOFoLkCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToxNDoxMVrOFpzV6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjgxMA==", "bodyText": "Isn't the version of kie-test-util managed in kie-parent. If not I think we should add it there.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377676810", "createdAt": "2020-02-11T14:42:58Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+      <!-- EXTERNAL -->\n+      <!-- TEST -->\n+      <dependency>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-test-util</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NzEyOQ==", "bodyText": "@jiripetrlik\nIt seems needed. See answer to above question", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379377129", "createdAt": "2020-02-14T11:14:11Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+      <!-- EXTERNAL -->\n+      <!-- TEST -->\n+      <dependency>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-test-util</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjgxMA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjU0Mjc5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo0NDo0OFrOFoLoiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo0NDo0OFrOFoLoiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3Nzk2Mw==", "bodyText": "Please remove unnecessary new lines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377677963", "createdAt": "2020-02-11T14:44:48Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.library.testutils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import javax.xml.bind.JAXBException;\n+\n+import org.dmg.pmml.PMML;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.xml.sax.SAXException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc3MjY3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozODowOVrOFoN3Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMToxMzoxMlrOFoqrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ==", "bodyText": "I think it is not a proper place to add definition of functional interfaces here. API should serve for methods like loadModel, verifyModel, evaluateModel etc. and not for extending Java 8 implementation. If we really need these utils and interfaces we should move it to some \"common\" module.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377714471", "createdAt": "2020-02-11T15:38:09Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDQ4Nw==", "bodyText": "@jiripetrlik\nHi! I may rename the \"api\" module to \"common\" - anyway I would like to avoid proliferation of unneeded modules: if I follow your logic, in that top-level module I should create a \"common\" package for shared methods/utils, a \"model\" package\" for models, and an api module for interfaces that has to be implemented - and all of them should always -anyway - be declared as dependency together.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378090487", "createdAt": "2020-02-12T08:05:30Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDQwMQ==", "bodyText": "I think API usually contains only interfaces which are supposed to be used by user. It is usually very stable and there should be no breaking changes with new versions. In PMML evaluator I would expect only methods or classes related directly to evalution of PMML in API. Such as loadPMML, evaluatePMML etc.\nIt is not good to use API to share the \"implementation\" with other modules. Users may start using these shared utils methods and it is not possible to change them in the future because of breaking contract. Utils classes etc. which are not supposed to be used directly by users are usually placed in commons modules. But maybe we can find some decomposition where these \"common\" modules will not be necessary.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378100401", "createdAt": "2020-02-12T08:29:27Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NjUwNQ==", "bodyText": "@danielezonca @jiripetrlik\nRenamed to kie-pmml-commons -as it is actually used for", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378186505", "createdAt": "2020-02-12T11:13:12Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgwNTE0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NTozOVrOFoOLSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozMzoxOVrOFozSEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ==", "bodyText": "Do we need a separate API for library. Can't we merge it with kie-pmml-api. It would be much easier for user to have only one API. Many API modules are usually source of mistakes and confusion.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377719625", "createdAt": "2020-02-11T15:45:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5Mjc4Mw==", "bodyText": "@jiripetrlik\nHi! Let's consider for main group of modules\n\nkie-pmml-refactoring\nkie-pmml-library\nkie-pmml-runtime\nkie-pmml-models-(model_name)\n\nEach of this need an api/common/whatever shared package to allow decoupling of implementations - e.g. kie-pmml-models-regression-api will define some \"model\" that must to be visible to both kie-pmml-models-regression-library and kie-pmml-models-regression-runtime, without having one the them to depend on the other. Recursively, same logic apply to all other group of modules. Does this make sense?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378092783", "createdAt": "2020-02-12T08:11:44Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NTI3Nw==", "bodyText": "I'm not sure whether this is not too complex for what we want to achieve. Which is basically PMML evaluator. It sounds like we will end up with for example 40 or more modules. Which is quite much I think.\n\nPMML itself defines about 20 models. If we want implementation and interface for each module it is about 40 modules.\nOther modules such as library, runtime etc. It will probably be at lease 5 modules.\nIf you want more implementations for modules than it will be even more modules. It will be probably impossible or very hard to maintain. Especially it might be very hard for user to get oriented in it.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378185277", "createdAt": "2020-02-12T11:10:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MjAwMQ==", "bodyText": "@jiripetrlik\nEach model may have a different optimal way to be implemented - e.g. I'm implementing Regression in pure java, while Tree will be done with drools. As such, each model has a different dependency requirement.\nAt the same time, we want to avoid to create a can of worms where one model depends to a lot of unneeded others only for transitive dependencies.\nThat lead to a design that is easy to understand, even if complex:\n\nlibrary  (we have to rename it) is responsible to translation of original PMML to \"internal\" model;\nruntime is responsible to actual evaluation.\n\nEvery model will have its own implementation of both, with its own internal model definition.\nEncapsulating every model in specific module, from my point of view, allow and enforce the developer to focus only in the implementation is currently doing regardless the \"abstraction\" layer - that as you see is pretty thin.\nPMML is an \"aggregator\" of different models, and the complexity of implementation reflect that. It is -more or less - like put all other models (scorecard, guideddecisions, whatever) under the same roof.\nThe biggest mistake -in my opinion - of the previous implementation was exactly to have (tried to) managed all of them in one single way.\nLast note: I've already implemented an archetype (not yet commit) exactly to help developer start create a new model implementation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378192001", "createdAt": "2020-02-12T11:25:09Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwODAxNg==", "bodyText": "@gitgabrio\nI see your point. However consider the number of modules (40 or more) which need to be managed. Each module effectively means one artifact to publish etc. And it will be quite hard for user to figure out which artifact add to his dependencies when.\nOf course we can and probably will have to do some \"aggregating\" module which will transitively collect all modules as dependencies, but it will effectively end up to adding all modules implementation and their transitive dependencies (for example Drools) to one classloader anyway. So we will effectively gain nothing from separate modules. Also consider that PMML need to work also as part of kie server and user will not tune jars which are present in WEB-INF/lib himself. Again we will probably end up with adding everything to classpath.\nMaybe we can find some compromise between complexity and having separate modules. @gitgabrio @danielezonca @mariofusco Do you see any compromise or less complex approach?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378208016", "createdAt": "2020-02-12T12:00:06Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI5MDYzNA==", "bodyText": "@jiripetrlik @danielezonca @mariofusco\nIt may well be that in future we'll see a lot of unneeded complexity.\nIf - for ex, all modules will be implemented only in two ways, probably it will make sense to simplify collapsing them. But, IMO, all this is \"optimization\", that I would like to postpone. For the moment being, this \"complexity\" enforce some clear boundaries and avoid mixing up things - it is easy to remove such separations in future, but it is extremely hard to do the other way around", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378290634", "createdAt": "2020-02-12T14:38:17Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNzU2OQ==", "bodyText": "@gitgabrio\nAgree. It is probably preliminary optimization. Let's continue with more modules for now and optimize in the future.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378327569", "createdAt": "2020-02-12T15:33:19Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgxMTU0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NzowN1rOFoOPWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NzowN1rOFoOPWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMDY2Ng==", "bodyText": "Remove new lines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377720666", "createdAt": "2020-02-11T15:47:07Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/pom.xml", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-compiler</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Compiler</name>\n+  <description>PMML Compiler</description>\n+\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-commons</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>\n+      <classifier>tests</classifier>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-library-commons</artifactId>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+      <!-- EXTERNAL -->\n+      <!-- TEST -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-library-api</artifactId>\n+        <classifier>tests</classifier>\n+        <scope>test</scope>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgxODUyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0ODo0N1rOFoOTnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0ODo0N1rOFoOTnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMTc1Nw==", "bodyText": "Please remove newlines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377721757", "createdAt": "2020-02-11T15:48:47Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.runtime.core.utils;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.kie.api.pmml.ParameterInfo;\n+\n+/**\n+ * Class used to convert data to/from different formats\n+ */\n+public class Converter {\n+\n+    /**\n+     * <b>Extract</b> the objects from the <code>ParameterInfo</code> values of the given map.\n+     *\n+     * @param parameterMap\n+     * @return\n+     */\n+    public static Map<String, Object> getUnwrappedParametersMap(Map<String, ParameterInfo> parameterMap) {\n+        return parameterMap.entrySet()\n+                .stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                                          e -> e.getValue().getValue()));\n+\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgyMTU0OnYy", "diffSide": "RIGHT", "path": "kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0OTozMFrOFoOViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0OTozMFrOFoOViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMjI0OA==", "bodyText": "Please remove newlines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377722248", "createdAt": "2020-02-11T15:49:30Z", "author": {"login": "jiripetrlik"}, "path": "kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.test.util.filesystem;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+import static org.kie.test.util.filesystem.ResourceHelper.getResourcesByExtension;\n+import static org.kie.test.util.filesystem.ResourceHelper.getResourcesFromDirectory;\n+\n+public class ResourceHelperTest {\n+\n+    private static final String TEST_FILE = \"TestFile.txt\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTM2MjYzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOToxNDoxM1rOFomvtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjowNjo0MFrOFosKAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMjE2NA==", "bodyText": "Can you please remove it? It is not used", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378122164", "createdAt": "2020-02-12T09:14:13Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.annotations;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+/**\n+ * Denotes that a parameter, field or method return value can be null.\n+ * <p>\n+ * When decorating a method call parameter, this denotes that the parameter can\n+ * legitimately be null and the method will gracefully deal with it. Typically\n+ * used on optional parameters.\n+ * <p>\n+ * When decorating a method, this denotes the method might legitimately return\n+ * null.\n+ * <p>\n+ * This is a marker annotation and it has no specific attributes.\n+ *\n+ * @paramDoc This value may be {@code null}.\n+ * @returnDoc This value may be {@code null}.\n+ * @hide\n+ */\n+@Retention(SOURCE)\n+@Target({METHOD, PARAMETER, FIELD})\n+public @interface Nullable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMDgxNw==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378210817", "createdAt": "2020-02-12T12:06:40Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.annotations;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+/**\n+ * Denotes that a parameter, field or method return value can be null.\n+ * <p>\n+ * When decorating a method call parameter, this denotes that the parameter can\n+ * legitimately be null and the method will gracefully deal with it. Typically\n+ * used on optional parameters.\n+ * <p>\n+ * When decorating a method, this denotes the method might legitimately return\n+ * null.\n+ * <p>\n+ * This is a marker annotation and it has no specific attributes.\n+ *\n+ * @paramDoc This value may be {@code null}.\n+ * @returnDoc This value may be {@code null}.\n+ * @hide\n+ */\n+@Retention(SOURCE)\n+@Target({METHOD, PARAMETER, FIELD})\n+public @interface Nullable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMjE2NA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTcxNTcyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NTo0NFrOFoqI9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo1MDowMFrOFqhvnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg==", "bodyText": "Why Exception instead of RuntimeException? This change has as consequence a sort of \"duplication\" of many Java 8 interfaces (Stream and Function as first).\nIf your goal is to enforce user to manage the errors I would suggest to use one/more RuntimeException internally and then do a try/catch at public method level and generate the checked exception only there. In this way you should be able to avoid interface duplication. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378177782", "createdAt": "2020-02-12T10:55:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.exceptions;\n+\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4MTMwNQ==", "bodyText": "@danielezonca\nI'm not convinced of that. I understand your point, but at the same time it is not clear where such boundaries should be drawn. Putting them too \"deep\" would not change that much, but putting them too \"high\" would vanify the scope of the checked exception", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379381305", "createdAt": "2020-02-14T11:24:59Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.exceptions;\n+\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTg1OA==", "bodyText": "I would say that the boundary should be public (= end-user) API. My proposal is to limit this checked exception at PMMLRuntime level. It should be enough to try/catch runtime exceptions in PMMLRuntimeImpl and wrap them in the checked exception. Wdyt?\nEDIT: let me add that I'm not a fan of checked exception so I would like to remove them completely but I'm trying to preserve them without add too much overhead (= interface duplication)", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379411858", "createdAt": "2020-02-14T12:44:52Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.exceptions;\n+\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNzM3Mg==", "bodyText": "@gitgabrio @danielezonca\nI have no strong opinion here. But I would also vote for avoiding of checked exceptions, because I also don't like them.\nFor example if I recall correctly it was also not recommended in Clean Code book, because:\nUsing checked exceptions comes with a cost - it breaks the open-closed principle: You have to declare the checked exception (in throws clause) in signatures of all methods between the throwing and catching the exception.\nBut I'm not sure. As I've said I have no strong opinion here.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380137372", "createdAt": "2020-02-17T11:50:00Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.exceptions;\n+\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTc1MjIzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/src/test/resources/LinearRegressionSample.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTowNjo1MFrOFoqfAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjowODowM1rOFosMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MzQyNA==", "bodyText": "Isn't it a copy of this ?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378183424", "createdAt": "2020-02-12T11:06:50Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/src/test/resources/LinearRegressionSample.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<PMML xmlns=\"http://www.dmg.org/PMML-4_2\" version=\"4.2\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMTM3MQ==", "bodyText": "@danielezonca\nYes", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378211371", "createdAt": "2020-02-12T12:08:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/src/test/resources/LinearRegressionSample.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<PMML xmlns=\"http://www.dmg.org/PMML-4_2\" version=\"4.2\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MzQyNA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTc2MDA3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTowOToxN1rOFoqjrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxMzozM1rOFosVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NDYyMw==", "bodyText": "I don't like the name runtime to refer to a sort of \"kie-integration\" module. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378184623", "createdAt": "2020-02-12T11:09:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-runtime</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-runtime-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMzc2NQ==", "bodyText": "@danielezonca @jiripetrlik @mariofusco\nWe have broadly two main functionalities/components:\n\ntranslation from original PMML to internal model (to be used for actual evaluation)\nactual execution of the evaluation inside the kie container (i.e. submit user input to retrieve predicted value).\n\nCurrently the first one is called \"library\", but I think \"compiler\" would be more appropriate; for the latter, beside \"runtime\", I do not have any special idea.\nAnyway, let's just decide all together those names once and for all, because I have three branch to keep in sync and such renaming are pretty disruptive.\nWhat's your suggestion for them?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378213765", "createdAt": "2020-02-12T12:13:33Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-runtime</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-runtime-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NDYyMw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjY4MDkyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxNTowM1rOFqiZbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTowMjo1NlrOFq6FlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ==", "bodyText": "Can we change also this to RuntimeException?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380148079", "createdAt": "2020-02-17T12:15:03Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n+ */\n+public class ExternalException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NDY5NQ==", "bodyText": "@jiripetrlik\nHi. Nope. This is meant exactly to be a checked exception.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380194695", "createdAt": "2020-02-17T13:54:41Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n+ */\n+public class ExternalException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzNjIxMg==", "bodyText": "@gitgabrio Checked exception are an outdated concept, no JVM language other than Java support them and since Java 8 they're practically deprecated also in Java since they play horribly with lambdas. Checked exception are useless verbosity in the best case and plain evil in the worst one. Please remove ALL checked exception from this pull request. Thanks.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380536212", "createdAt": "2020-02-18T09:02:56Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n+ */\n+public class ExternalException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjY4NDQyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxNjowOFrOFqibew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzo1NDo1NlrOFqlQFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODYwMw==", "bodyText": "Can we change also this to RuntimeException?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380148603", "createdAt": "2020-02-17T12:16:08Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions to be wrapping to <b>unchecked</b> ones at <i>customer</i> API boundaries\n+ */\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NDgzOA==", "bodyText": "@jiripetrlik\nHi. Nope. This is meant exactly to be a checked exception.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380194838", "createdAt": "2020-02-17T13:54:56Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions to be wrapping to <b>unchecked</b> ones at <i>customer</i> API boundaries\n+ */\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODYwMw=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjcxMDE3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoyNTowNlrOFqiq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0Njo1OFrOFqm7yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg==", "bodyText": "I'm not sure about adding these functional utils into code. Can't we use some library instead?\n@mariofusco\nWhat do you think? Can you help us to find some library with these functional utils?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380152532", "createdAt": "2020-02-17T12:25:06Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMTIxMg==", "bodyText": "@jiripetrlik @mariofusco @danielezonca\nFine for me if there is already such functionality in the classpath.\nAnyway, a couple of things to keep in mind\n\nit must not add dependency on any other drools module\nit is a bad practice to put new libraries inside projects only to use one single feature of such libraries - duplicated code is not bad by itself, if it avoid creating/increasing coupling between otherwise unrelated code\nWatch carefully about \"functional monolith masked behind modular layout\"", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380211212", "createdAt": "2020-02-17T14:26:08Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjQwOQ==", "bodyText": "As I wrote. I'm not sure whether something like that exists. I've added it mostly as possible point for discussion.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380222409", "createdAt": "2020-02-17T14:46:58Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc1NTU0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MToyNVrOFqjGQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyNzoxNFrOFrCPGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380159552", "createdAt": "2020-02-17T12:41:25Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwNTM2OQ==", "bodyText": "@jiripetrlik\nHi Jiri. What would you like to test? Those are five basic java calls in chain:\n\nENUM.values\nArrays.stream\nStream.filter\nStream.findFirst\nOptional.orElseThrow", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380205369", "createdAt": "2020-02-17T14:15:05Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDQxMA==", "bodyText": "@gitgabrio\nWe can add some simple test whether it works as expected.\n\npositive example - if filter finds something\nnegative - if filter does not and exception is thrown", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380210410", "createdAt": "2020-02-17T14:24:41Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNzgzMw==", "bodyText": "@jiripetrlik\nHi Jiri. I understand you point, but I'm not fully convinced.\nBasically, behind all the \"wrapping\", the test you are proposing would just verify that String.equals(String) behave as expected. It is true that there are a series of method chained together, but each of them is a standard java invocation - the result of which is the argument for the next one.\nIMO, it is the client code that has to be tested in this situation - I mean if a \"compiler\" call this one, we should verify the \"caller\" is not invoking it with wrong value: wdyt ?\nAs a side note, what I'm gonna do is to replace that name.equals with Objects.equals", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380227833", "createdAt": "2020-02-17T14:56:32Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NjUyOA==", "bodyText": "Agree with you. We will probably test this on different level.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380256528", "createdAt": "2020-02-17T15:49:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2OTcyMg==", "bodyText": "It is recommended that code has sufficient unit test coverage. What Jiri proposes is exactly that. \"Hi Jiri. What would you like to test? Those are five basic java calls in chain\" - exactly those 5 basic Java calls in a chain should be tested. In future, someone might change this so that it doesn't work correctly. Then we will miss the test. The code should have as big unit test coverage as possible. I know that it is sometimes a pain to write them, but they are useful, although they may not look like that.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380669722", "createdAt": "2020-02-18T13:27:14Z", "author": {"login": "baldimir"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc1ODkxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Mjo0MVrOFqjIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Mjo0MVrOFqjIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDA4MQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160081", "createdAt": "2020-02-17T12:42:41Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_FIELD-USAGE-TYPE>FIELD-USAGE-TYPE</a>\n+ */\n+public enum FIELD_USAGE_TYPE {\n+\n+    ACTIVE(\"active\"),\n+    PREDICTED(\"predicted\"),\n+    TARGET(\"target\"),\n+    SUPPLEMENTARY(\"supplementary\"),\n+    GROUP(\"group\"),\n+    ORDER(\"order\"),\n+    FREQUENCY_WEIGHT(\"frequencyWeight\"),\n+    ANALYSIS_WEIGHT(\"analysisWeight\");\n+\n+    private String name;\n+\n+    FIELD_USAGE_TYPE(String name) {\n+        this.name = name;\n+    }\n+\n+    public static FIELD_USAGE_TYPE byName(String name) throws KieEnumException {\n+        return Arrays.stream(FIELD_USAGE_TYPE.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find FIELD_USAGE_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc1OTI4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Mjo0OFrOFqjIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Mjo0OFrOFqjIhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDEzMg==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160132", "createdAt": "2020-02-17T12:42:48Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdType_MINING-FUNCTION>MINING-FUNCTION</a>\n+ */\n+public enum MINING_FUNCTION {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    MINING_FUNCTION(String name) {\n+        this.name = name;\n+    }\n+\n+    public static MINING_FUNCTION byName(String name) throws KieEnumException {\n+        return Arrays.stream(MINING_FUNCTION.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc1OTYxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Mjo1NFrOFqjIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Mjo1NFrOFqjIsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDE3Nw==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160177", "createdAt": "2020-02-17T12:42:54Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD>MISSING-VALUE_TREATMENT-METHOD</a>\n+ */\n+public enum MISSING_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    MISSING_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static MISSING_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(MISSING_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc1OTkwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzowMFrOFqjI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzowMFrOFqjI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDIxOQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160219", "createdAt": "2020-02-17T12:43:00Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-2-1/DataDictionary.html#xsdType_OPTYPE>OPTYPE</a>\n+ */\n+public enum OP_TYPE {\n+\n+    CATEGORICAL(\"categorical\"),\n+    ORDINAL(\"ordinal\"),\n+    CONTINUOUS(\"continuous\");\n+\n+    private String name;\n+\n+    OP_TYPE(String name) {\n+        this.name = name;\n+    }\n+\n+    public static OP_TYPE byName(String name) throws KieEnumException {\n+        return Arrays.stream(OP_TYPE.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2MDQ2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzoxNFrOFqjJOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzoxNFrOFqjJOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDMxMw==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160313", "createdAt": "2020-02-17T12:43:14Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_OUTLIER-TREATMENT-METHOD>OUTLIER-TREATMENT-METHOD</a>\n+ */\n+public enum OUTLIER_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    OUTLIER_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static OUTLIER_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(OUTLIER_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2MDY3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzoxOVrOFqjJXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzoxOVrOFqjJXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDM0OA==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160348", "createdAt": "2020-02-17T12:43:19Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * PMML models\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdGroup_MODEL-ELEMENT>MODEL-ELEMENT</a>\n+ */\n+public enum PMML_MODEL {\n+\n+    ANOMALY_DETECTION_MODEL(\"AnomalyDetectionModel\"),\n+    ASSOCIATION_MODEL(\"AssociationModel\"),\n+    BAYESIAN_NETWORK_MODEL(\"BayesianNetworkModel\"),\n+    BASELINE_MODEL(\"BaselineModel\"),\n+    CLUSTERING_MODEL(\"ClusteringModel\"),\n+    GAUSSIAN_PROCESS_MODEL(\"GaussianProcessModel\"),\n+    GENERAL_REGRESSION_MODEL(\"GeneralRegressionModel\"),\n+    MINING_MODEL(\"MiningModel\"),\n+    NAIVEBAYES_MODEL(\"NaiveBayesModel\"),\n+    NEARESTNEIGHBOR_MODEL(\"NearestNeighborModel\"),\n+    NEURALNETWORK_MODEL(\"NeuralNetworkModel\"),\n+    REGRESSION_MODEL(\"RegressionModel\"),\n+    RULESET_MODEL(\"RulesetModel\"),\n+    SEQUENCE_MODEL(\"SequenceModel\"),\n+    SCORECARD_MODEL(\"ScorecardModel\"),\n+    SUPPORT_VECTOR_MACHINE_MODEL(\"SupportVectorMachineModel\"),\n+    TEXT_MODEL(\"TextModel\"),\n+    TIME_SERIES_MODEL(\"TimeSeriesModel\"),\n+    TREE_MODEL(\"TreeModel\");\n+\n+    private String name;\n+\n+    PMML_MODEL(String name) {\n+        this.name = name;\n+    }\n+\n+    public static PMML_MODEL byName(String name) throws KieEnumException {\n+        return Arrays.stream(PMML_MODEL.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find PMMLModelType with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2MTMwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzozMVrOFqjJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MzozMVrOFqjJtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDQzOQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160439", "createdAt": "2020-02-17T12:43:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/DataDictionary.html#xsdElement_Value>Value</a>\n+ */\n+public enum VALUE_PROPERTY {\n+\n+    VALID(\"valid\"),\n+    INVALID(\"invalid\"),\n+    MISSING(\"missing\");\n+\n+    private String name;\n+\n+    VALUE_PROPERTY(String name) {\n+        this.name = name;\n+    }\n+\n+    public static VALUE_PROPERTY byName(String name) throws KieEnumException {\n+        return Arrays.stream(VALUE_PROPERTY.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find VALUE_PROPERTY with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2MzY2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLExtensionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0NDoyNFrOFqjLHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0NDoyNFrOFqjLHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDc5OQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160799", "createdAt": "2020-02-17T12:44:24Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLExtensionFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.Extension;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+\n+public class KiePMMLExtensionFactory {\n+\n+    private KiePMMLExtensionFactory() {\n+    }\n+\n+    public static List<KiePMMLExtension> getKiePMMLExtensions(List<Extension> extensions) {\n+        return extensions.stream().map(KiePMMLExtensionFactory::getKiePMMLExtension).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2NDcwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0NDo0OFrOFqjLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyMTo0MlrOFqmGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDk3MQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160971", "createdAt": "2020-02-17T12:44:48Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.interfaces.FunctionalWrapperFactory.throwingFunctionWrapper;\n+\n+public class KiePMMLModelRetriever {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLModelRetriever.class.getName());\n+    private static final ModelImplementationProviderFinder modelImplementationProviderFinder = new ModelImplementationProviderFinderImpl();\n+\n+    /**\n+     * Read the given <code>DataDictionary</code> and <code>Model</code>> to returns a <code>Optional&lt;KiePMMLModel&gt;</code>\n+     * @param dataDictionary\n+     * @param model\n+     * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n+     * @return\n+     * @throws KiePMMLInternalException\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<KiePMMLModel> getFromDataDictionaryAndModel(DataDictionary dataDictionary, Model model, Object kBuilder) throws KiePMMLException {\n+        logger.info(\"getFromModel {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwODgzNg==", "bodyText": "This would be an \"integration\" test. Without any real implementation, hard to see what/how to test.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380208836", "createdAt": "2020-02-17T14:21:42Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.interfaces.FunctionalWrapperFactory.throwingFunctionWrapper;\n+\n+public class KiePMMLModelRetriever {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLModelRetriever.class.getName());\n+    private static final ModelImplementationProviderFinder modelImplementationProviderFinder = new ModelImplementationProviderFinderImpl();\n+\n+    /**\n+     * Read the given <code>DataDictionary</code> and <code>Model</code>> to returns a <code>Optional&lt;KiePMMLModel&gt;</code>\n+     * @param dataDictionary\n+     * @param model\n+     * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n+     * @return\n+     * @throws KiePMMLInternalException\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<KiePMMLModel> getFromDataDictionaryAndModel(DataDictionary dataDictionary, Model model, Object kBuilder) throws KiePMMLException {\n+        logger.info(\"getFromModel {}\", model);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDk3MQ=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2NTQzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0NTowM1rOFqjMQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyMDoxNVrOFqmDzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTA4OA==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380161088", "createdAt": "2020-02-17T12:45:03Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.info(\"getImplementations {}\", refresh);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwODA3Nw==", "bodyText": "@jiripetrlik\nThis would be an \"integration\" test to ServiceLoader.reload () and ServiceLoader.iterator(). I think it is already covered inside integration test module", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380208077", "createdAt": "2020-02-17T14:20:15Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.info(\"getImplementations {}\", refresh);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTA4OA=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc2NTg3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0NToxM1rOFqjMgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo1OTo1MFrOFqrIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380161153", "createdAt": "2020-02-17T12:45:13Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.MiningField;\n+import org.dmg.pmml.Model;\n+\n+/**\n+ * Class to provide common methods to interact with <code>Model</code>\n+ */\n+public class ModelUtils {\n+\n+    /**\n+     * Return an <code>Optional</code> with the name of the field whose <b>usageType</b> is <code>TARGET</code> or <code>PREDICTED</code>\n+     * <p>\n+     * While the xsd schema does not strictly enforce this, it seems that <b>by convention</b> majority of models has only one target.\n+     * <p>\n+     * (see https://github.com/jpmml/jpmml-evaluator/issues/64 discussion)\n+     * @param model\n+     * @return\n+     */\n+    public static Optional<String> getTargetField(Model model) {\n+        return model.getMiningSchema().getMiningFields().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwODE2Mg==", "bodyText": "Will do", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380208162", "createdAt": "2020-02-17T14:20:25Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.MiningField;\n+import org.dmg.pmml.Model;\n+\n+/**\n+ * Class to provide common methods to interact with <code>Model</code>\n+ */\n+public class ModelUtils {\n+\n+    /**\n+     * Return an <code>Optional</code> with the name of the field whose <b>usageType</b> is <code>TARGET</code> or <code>PREDICTED</code>\n+     * <p>\n+     * While the xsd schema does not strictly enforce this, it seems that <b>by convention</b> majority of models has only one target.\n+     * <p>\n+     * (see https://github.com/jpmml/jpmml-evaluator/issues/64 discussion)\n+     * @param model\n+     * @return\n+     */\n+    public static Optional<String> getTargetField(Model model) {\n+        return model.getMiningSchema().getMiningFields().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MTE2NQ==", "bodyText": "@jiripetrlik\nHi! Just pushed tests for that class.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380291165", "createdAt": "2020-02-17T16:59:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.MiningField;\n+import org.dmg.pmml.Model;\n+\n+/**\n+ * Class to provide common methods to interact with <code>Model</code>\n+ */\n+public class ModelUtils {\n+\n+    /**\n+     * Return an <code>Optional</code> with the name of the field whose <b>usageType</b> is <code>TARGET</code> or <code>PREDICTED</code>\n+     * <p>\n+     * While the xsd schema does not strictly enforce this, it seems that <b>by convention</b> majority of models has only one target.\n+     * <p>\n+     * (see https://github.com/jpmml/jpmml-evaluator/issues/64 discussion)\n+     * @param model\n+     * @return\n+     */\n+    public static Optional<String> getTargetField(Model model) {\n+        return model.getMiningSchema().getMiningFields().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw=="}, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTI1MjczOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMToxNVrOFq6WgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMToxNVrOFq6WgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDU0NQ==", "bodyText": "Is this useful? Even if it is please change the implementation: you're implicitly creating a subclass of HashMap at each invocation in this way.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380540545", "createdAt": "2020-02-18T09:11:15Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {\n+\n+    /**\n+     * Returns an <code>HashMap</code> with the given key/value pairs\n+     * @param k1\n+     * @param v1\n+     * @return\n+     */\n+    public static <K, V> Map<K, V> mapOf(K k1, V v1) {\n+        return new HashMap<K, V>() {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTI1NDgzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMTo1MVrOFq6X4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMTo1MVrOFq6X4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDg5OA==", "bodyText": "Demonstration that checked exceptions are bogus.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380540898", "createdAt": "2020-02-18T09:11:51Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.interfaces;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.DoubleConsumer;\n+import java.util.function.Function;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Factory for <b>wrappers</b> around custom <b>exception-throwing</b> functional interfaces\n+ */\n+public class FunctionalWrapperFactory {\n+\n+    /**\n+     * <code>Function</code> <code>wrapper</code> for exception-throwing <code>Function</code>\n+     * @param throwingFunction\n+     * @param <T>\n+     * @param <R>\n+     * @param <E>\n+     * @return\n+     * @throws E\n+     */\n+    public static <T, R, E extends Exception> Function<T, R> throwingFunctionWrapper(ThrowingFunction<T, R, E> throwingFunction) throws E {\n+        return t -> {\n+            try {\n+                return throwingFunction.apply(t);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTI1NzM0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMjozM1rOFq6ZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMjozM1rOFq6ZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MTI3OA==", "bodyText": "At this point I want to die.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380541278", "createdAt": "2020-02-18T09:12:33Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.interfaces;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Exception-throwing <code>BiConsumer</code>\n+ */\n+@FunctionalInterface\n+public interface ThrowingBiConsumer<T, U, E extends Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTI2MjUzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxNDowNFrOFq6cpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMDoyM1rOFq7CBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MjExOQ==", "bodyText": "Should this be Serializable? If so you need an empty constructor. If not make all these fields final.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380542119", "createdAt": "2020-02-18T09:14:04Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {\n+\n+    private static final long serialVersionUID = -5895956619311871049L;\n+    private String extender;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MTY4Nw==", "bodyText": "@mariofusco\nFixed with last commit", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380551687", "createdAt": "2020-02-18T09:30:23Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {\n+\n+    private static final long serialVersionUID = -5895956619311871049L;\n+    private String extender;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MjExOQ=="}, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTMzMjc2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzowMlrOFq7ICQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDozMToyMVrOFq9KPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzIyNQ==", "bodyText": "This generic doesn't seem to be useful since you cannot use it on the call site and then obliges you to add those [at]SuppressWarning annotation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380553225", "createdAt": "2020-02-18T09:33:02Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.api.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+/**\n+ * API for actual PMML model implementations\n+ */\n+public interface ModelImplementationProvider<T extends Model, E extends KiePMMLModel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NjU1OA==", "bodyText": "@mariofusco\nReason for the generic at interface signature is to allow inside actual implementations  (e.g.):\npublic KiePMMLRegressionModel getKiePMMLModel(DataDictionary dataDictionary, RegressionModel model, Object kBuilder) (concrete types as returns and parameters)\nI could not find a proper/clean way to achieve that putting generic definition to the method itself. Could you please suggest one, if it is doable ? Thx.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380586558", "createdAt": "2020-02-18T10:31:21Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.api.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+/**\n+ * API for actual PMML model implementations\n+ */\n+public interface ModelImplementationProvider<T extends Model, E extends KiePMMLModel> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzIyNQ=="}, "originalCommit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTMzNTY0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzo1M1rOFq7J2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzo1M1rOFq7J2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzY4OQ==", "bodyText": "If you remove the generic on the ModelImplementationProvider as I suggested above you can get rid of this annotation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380553689", "createdAt": "2020-02-18T09:33:53Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.debug(\"getImplementations {}\", refresh);\n+        List<ModelImplementationProvider> toReturn = new ArrayList<>();\n+        Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n+        providers.forEachRemaining(toReturn::add);\n+        logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n+        toReturn.forEach(provider -> logger.debug(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        return toReturn;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}