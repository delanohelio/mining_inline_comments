{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzIwMjU0", "number": 2970, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxMDoyM1rOEKxeMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxMDoyM1rOEKxeMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzMxNzYyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/OOPathExprGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxMDoyM1rOGsAK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxMDoyM1rOGsAK1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MzMwMg==", "bodyText": "Similar to \"from\" clause, we need to store the return type so that ExecModelLambdaPostProcessor can use it later.", "url": "https://github.com/kiegroup/drools/pull/2970#discussion_r448793302", "createdAt": "2020-07-02T07:10:23Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/OOPathExprGenerator.java", "diffHunk": "@@ -97,7 +99,10 @@ public void visit(Class<?> originalClass, String originalBind, DrlxParseSuccess\n                 bindingId = context.getOOPathId(fieldType, chunkKey);\n             }\n             final Expression accessorLambda = generateLambdaWithoutParameters(Collections.emptySortedSet(),\n-                                                                              prepend(new NameExpr(THIS_PLACEHOLDER), callExpr.getExpression()));\n+                                                                              prepend(new NameExpr(THIS_PLACEHOLDER), callExpr.getExpression()), false, Optional.ofNullable(previousClass), context);\n+            if (accessorLambda instanceof LambdaExpr) {\n+                context.getPackageModel().getLambdaReturnTypes().put((LambdaExpr)accessorLambda, callExpr.getType());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ad18d4e44c5e4594a42a51bd95d35fff5e3e10"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2367, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}