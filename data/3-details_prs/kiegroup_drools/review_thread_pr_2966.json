{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTA5ODA4", "number": 2966, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyMzo1MVrOEKbyfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1Mzo0NFrOEKhT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc2NTA5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyMzo1MVrOGreEaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNDozOFrOGreGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNDYwMA==", "bodyText": "#2962 (comment)", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448234600", "createdAt": "2020-07-01T09:23:51Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter\n+\n+    private DerivedFieldFunctionUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    static Map<String, MethodDeclaration> getDerivedFieldsMethodMap(final List<DerivedField> derivedFields, final AtomicInteger arityCounter) {\n+        Map<String, MethodDeclaration> toReturn = new HashMap<>();\n+        derivedFields.forEach(derivedField ->\n+                                      toReturn.put(derivedField.getName().getValue(),\n+                                                   getDerivedFieldMethodDeclaration(derivedField, arityCounter)));\n+        return toReturn;\n+    }\n+\n+    static MethodDeclaration getDerivedFieldMethodDeclaration(final DerivedField derivedField, final AtomicInteger arityCounter) {\n+        final Expression expression = derivedField.getExpression();\n+        if (expression != null) {\n+            return getExpressionMethodDeclaration(expression, arityCounter);\n+        } else {\n+            // TODO {gcardosi}\n+            return new MethodDeclaration();\n+        }\n+    }\n+\n+    static MethodDeclaration getExpressionMethodDeclaration(final Expression expression, final AtomicInteger arityCounter) {\n+        int methodArity = arityCounter.addAndGet(1);\n+        if (expression instanceof Aggregate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNTA0Mg==", "bodyText": "@danielezonca\nI'm expecting not - those are the \"default\" Expressions. Extensions will be managed in future", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448235042", "createdAt": "2020-07-01T09:24:38Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter\n+\n+    private DerivedFieldFunctionUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    static Map<String, MethodDeclaration> getDerivedFieldsMethodMap(final List<DerivedField> derivedFields, final AtomicInteger arityCounter) {\n+        Map<String, MethodDeclaration> toReturn = new HashMap<>();\n+        derivedFields.forEach(derivedField ->\n+                                      toReturn.put(derivedField.getName().getValue(),\n+                                                   getDerivedFieldMethodDeclaration(derivedField, arityCounter)));\n+        return toReturn;\n+    }\n+\n+    static MethodDeclaration getDerivedFieldMethodDeclaration(final DerivedField derivedField, final AtomicInteger arityCounter) {\n+        final Expression expression = derivedField.getExpression();\n+        if (expression != null) {\n+            return getExpressionMethodDeclaration(expression, arityCounter);\n+        } else {\n+            // TODO {gcardosi}\n+            return new MethodDeclaration();\n+        }\n+    }\n+\n+    static MethodDeclaration getExpressionMethodDeclaration(final Expression expression, final AtomicInteger arityCounter) {\n+        int methodArity = arityCounter.addAndGet(1);\n+        if (expression instanceof Aggregate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNDYwMA=="}, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc3NTU3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelASTFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNjo0N1rOGreK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNjo0N1rOGreK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNjI3Mg==", "bodyText": "see #2962 (comment)", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448236272", "createdAt": "2020-07-01T09:26:47Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelASTFactory.java", "diffHunk": "@@ -48,15 +49,26 @@ private KiePMMLTreeModelASTFactory() {\n     /**\n      * Returns the <code>KiePMMLDroolsAST</code> built out of the given parameters.\n      * It also <b>populate</b> the <b>fieldNameTypeNameMap</b> with mapping between original field' name and <b>original type/generated type</b> tupla\n+     *\n      * @param dataDictionary\n      * @param model\n      * @param fieldTypeMap\n+     * @param types\n      * @return\n      */\n-    public static KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+    public static KiePMMLDroolsAST getKiePMMLDroolsAST(final DataDictionary dataDictionary,\n+                                                       final TreeModel model,\n+                                                       final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap,\n+                                                       final List<KiePMMLDroolsType> types) {\n         logger.trace(\"getKiePMMLDroolsAST {} {}\", dataDictionary, model);\n         DATA_TYPE targetType = getTargetFieldType(dataDictionary, model);\n-        List<KiePMMLDroolsType> types = KiePMMLDataDictionaryASTFactory.factory(fieldTypeMap).declareTypes(dataDictionary);\n+//        List<KiePMMLDroolsType> types = fieldTypeMap.values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc4Nzk0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LinearRegressionSampleWithTransformationsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMDoyNVrOGreS6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMDoyNVrOGreS6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzODMxNQ==", "bodyText": "see #2962 (comment)\nThose are additional assertions - IMHO it does not make much sense to move them on a different test to only have the same computation made twice but verified with different assertions. BTW it is the way we have managed such situations until now", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448238315", "createdAt": "2020-07-01T09:30:25Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LinearRegressionSampleWithTransformationsTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.regression.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.data.Percentage;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class LinearRegressionSampleWithTransformationsTest extends AbstractPMMLRegressionTest {\n+\n+    private static final String MODEL_NAME = \"LinearRegressionSampleWithTransformations\";\n+    private static final String TARGET_FIELD = \"number_of_claims\";\n+    private static final String OUT_DER_AGE = \"out_der_age\";\n+    private static final String OUT_DER_SALARY = \"out_der_salary\";\n+    private static final String OUT_DER_CAR_LOCATION = \"out_der_car_location\";\n+    private static final String OUT_DER_CONSTANT = \"out_der_constant\";\n+    private static final String CONSTANT = \"constant\";\n+\n+\n+    private static final Percentage TOLERANCE_PERCENTAGE = Percentage.withPercentage(0.001);\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private double age;\n+    private double salary;\n+    private String car_location;\n+    private double expectedResult;\n+\n+    public LinearRegressionSampleWithTransformationsTest(double age,\n+                                                         double salary,\n+                                                         String car_location,\n+                                                         double expectedResult) {\n+        this.age = age;\n+        this.salary = salary;\n+        this.car_location = car_location;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {27, 34000, \"street\", 989.1},\n+                {49, 78000, \"carpark\", 1301.37},\n+                {57, 72000, \"street\", 1582.1},\n+                {61, 123000, \"carpark\", 1836.5699999999997},\n+                {18, 26000, \"street\", 845.1999999999999},\n+        });\n+    }\n+\n+    @Test\n+    public void testLogisticRegressionIrisData() {\n+        final Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(\"age\", age);\n+        inputData.put(\"salary\", salary);\n+        inputData.put(\"car_location\", car_location);\n+        PMML4Result pmml4Result = evaluate(pmmlRuntime, inputData, MODEL_NAME);\n+\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isNotNull();\n+        Assertions.assertThat((double) pmml4Result.getResultVariables().get(TARGET_FIELD)).isCloseTo(expectedResult, TOLERANCE_PERCENTAGE);\n+\n+        // TODO {gcardosi} TO BE FIXED WITH DROOLS-5453", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc5MjU4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LogisticRegressionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMTo0OFrOGreWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMTo0OFrOGreWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzOTEyNA==", "bodyText": "see #2962 (comment)\nSee previous answer", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448239124", "createdAt": "2020-07-01T09:31:48Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LogisticRegressionTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.regression.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.data.Percentage;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class LogisticRegressionTest extends AbstractPMMLRegressionTest {\n+\n+    private static final String MODEL_NAME = \"LogisticRegression\";\n+    private static final String TARGET_FIELD = \"class\";\n+    private static final String PROBABILITY_AUTHENTIC = \"probability(Authentic)\";\n+    private static final String PROBABILITY_COUNTERFEIT = \"probability(Counterfeit)\";\n+\n+    private static final Percentage TOLERANCE_PERCENTAGE = Percentage.withPercentage(0.001);\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private double variance;\n+    private double skewness;\n+    private double curtosis;\n+    private double entropy;\n+    private String expectedResult;\n+    private double expectedProbAuthentic;\n+    private double expectedProbCounterfeit;\n+\n+    public LogisticRegressionTest(double variance, double skewness, double curtosis,\n+                                  double petalWidth, String expectedResult,\n+                                  double expectedProbAuthentic,\n+                                  double expectedProbCounterfeit) {\n+        this.variance = variance;\n+        this.skewness = skewness;\n+        this.curtosis = curtosis;\n+        this.entropy = petalWidth;\n+        this.expectedResult = expectedResult;\n+        this.expectedProbAuthentic = expectedProbAuthentic;\n+        this.expectedProbCounterfeit = expectedProbCounterfeit;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {2.3, 6.9, 3.1, 5.1, \"Authentic\", 0.9999999999999969, 3.1271452352700172E-15},\n+                {1.2, 5.8, 2.6, 4.0, \"Authentic\", 0.9999999999977859, 2.214170674606705E-12},\n+                {1.2, 5.7, 3.0, 4.2, \"Authentic\", 0.9999999999990105, 9.89558801361823E-13},\n+                {0.2, 5.0, 3.3, 1.4, \"Authentic\", 0.9999999980426516, 1.9573484459863236E-9},\n+                {0.4, 5.4, 3.9, 1.3, \"Authentic\", 0.9999999997410439, 2.589560996869738E-10}\n+        });\n+    }\n+\n+    @Test\n+    public void testLogisticRegressionIrisData() {\n+        final Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(\"variance\", variance);\n+        inputData.put(\"skewness\", skewness);\n+        inputData.put(\"curtosis\", curtosis);\n+        inputData.put(\"entropy\", entropy);\n+        PMML4Result pmml4Result = evaluate(pmmlRuntime, inputData, MODEL_NAME);\n+\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isNotNull();\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isEqualTo(expectedResult);\n+\n+        // TODO {gcardosi} TO BE FIXED WITH DROOLS-5453", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc5NTcyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/src/test/java/org/kie/pmml/models/drools/tree/tests/SampleMineTreeModelWithTransformationsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMjo1M1rOGreYGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMjo1M1rOGreYGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzOTY0Mw==", "bodyText": "see #2962 (comment)\nSee above answer", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448239643", "createdAt": "2020-07-01T09:32:53Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/src/test/java/org/kie/pmml/models/drools/tree/tests/SampleMineTreeModelWithTransformationsTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.drools.tree.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class SampleMineTreeModelWithTransformationsTest extends AbstractPMMLTreeTest {\n+\n+    private static final String MODEL_NAME = \"SampleMineTreeModelWithTransformations\";\n+    private static final String TARGET_FIELD = \"decision\";\n+    private static final String OUT_DER_TEMPERATURE = \"out_der_temperature\";\n+    private static final String OUT_DER_HUMIDITY = \"out_der_humidity\";\n+    private static final String OUT_DER_CONSTANT = \"out_der_constant\";\n+    private static final String CONSTANT = \"constant\";\n+\n+\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private double temperature;\n+    private double humidity;\n+    private String expectedResult;\n+\n+    public SampleMineTreeModelWithTransformationsTest(double temperature, double humidity, String expectedResult) {\n+        this.temperature = temperature;\n+        this.humidity = humidity;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {30.0, 10.0, \"sunglasses\"},\n+                {5.0, 70.0, \"umbrella\"},\n+                {10.0, 15.0, \"nothing\"}\n+        });\n+    }\n+\n+    @Test\n+    public void testSetPredicateTree() {\n+        final Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(\"temperature\", temperature);\n+        inputData.put(\"humidity\", humidity);\n+        PMML4Result pmml4Result = evaluate(pmmlRuntime, inputData, MODEL_NAME);\n+\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isNotNull();\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isEqualTo(expectedResult);\n+        // // TODO {gcardosi} TO BE FIXED WITH DROOLS-5453", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzgwNjkyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozNjoxOFrOGrefTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo0NTo1NFrOGrml0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MTQ4NQ==", "bodyText": "see #2962 (comment)\nIn general, this map is populated in different methods. For this specific case, the map has to be returned by that method", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448241485", "createdAt": "2020-07-01T09:36:18Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java", "diffHunk": "@@ -48,6 +54,19 @@ public static PredicateASTFactoryData getPredicateASTFactoryData(Predicate predi\n         return new PredicateASTFactoryData(predicate, outputFields, rules, parentPath, currentRule, fieldTypeMap);\n     }\n \n+    public static Map<String, KiePMMLOriginalTypeGeneratedType> getFieldTypeMap(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> toReturn = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjIyNg==", "bodyText": "I'm still not sure, I do not expect a factory method just to populated one of the input. What about rename factory as populate / init / fill?", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448346226", "createdAt": "2020-07-01T13:01:07Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java", "diffHunk": "@@ -48,6 +54,19 @@ public static PredicateASTFactoryData getPredicateASTFactoryData(Predicate predi\n         return new PredicateASTFactoryData(predicate, outputFields, rules, parentPath, currentRule, fieldTypeMap);\n     }\n \n+    public static Map<String, KiePMMLOriginalTypeGeneratedType> getFieldTypeMap(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> toReturn = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MTQ4NQ=="}, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3NDIyNQ==", "bodyText": "Addressed (part of) in https://issues.redhat.com/browse/DROOLS-5272", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448374225", "createdAt": "2020-07-01T13:45:54Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java", "diffHunk": "@@ -48,6 +54,19 @@ public static PredicateASTFactoryData getPredicateASTFactoryData(Predicate predi\n         return new PredicateASTFactoryData(predicate, outputFields, rules, parentPath, currentRule, fieldTypeMap);\n     }\n \n+    public static Map<String, KiePMMLOriginalTypeGeneratedType> getFieldTypeMap(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> toReturn = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MTQ4NQ=="}, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzgyNTkwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MTozN1rOGrerWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MTozN1rOGrerWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDU2OQ==", "bodyText": "see #2962 (comment)\nIn the generated code there is a reference to that parameter. That reference must always be \"param1\".", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448244569", "createdAt": "2020-07-01T09:41:37Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzgzMjA1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MzozM1rOGreveQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MzozM1rOGreveQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTYyNQ==", "bodyText": "see #2962 (comment)", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448245625", "createdAt": "2020-07-01T09:43:33Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter\n+\n+    private DerivedFieldFunctionUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    static Map<String, MethodDeclaration> getDerivedFieldsMethodMap(final List<DerivedField> derivedFields, final AtomicInteger arityCounter) {\n+        Map<String, MethodDeclaration> toReturn = new HashMap<>();\n+        derivedFields.forEach(derivedField ->\n+                                      toReturn.put(derivedField.getName().getValue(),\n+                                                   getDerivedFieldMethodDeclaration(derivedField, arityCounter)));\n+        return toReturn;\n+    }\n+\n+    static MethodDeclaration getDerivedFieldMethodDeclaration(final DerivedField derivedField, final AtomicInteger arityCounter) {\n+        final Expression expression = derivedField.getExpression();\n+        if (expression != null) {\n+            return getExpressionMethodDeclaration(expression, arityCounter);\n+        } else {\n+            // TODO {gcardosi}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDY2OTY5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1Mzo0NFrOGrm5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDowMDozM1rOGrnLeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3OTIzNQ==", "bodyText": "These are extensions, I think we can remove them. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448379235", "createdAt": "2020-07-01T13:53:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -44,11 +44,19 @@\n     DATE_DAYS_SINCE_1960(\"dateDaysSince[1960]\", Long.class),\n     DATE_DAYS_SINCE_1970(\"dateDaysSince[1970]\", Long.class),\n     DATE_DAYS_SINCE_1980(\"dateDaysSince[1980]\", Long.class),\n+    DATE_DAYS_SINCE_1990(\"x-dateDaysSince[1990]\", Long.class),\n+    DATE_DAYS_SINCE_2000(\"x-dateDaysSince[2000]\", Long.class),\n+    DATE_DAYS_SINCE_2010(\"x-dateDaysSince[2010]\", Long.class),\n+    DATE_DAYS_SINCE_2020(\"x-dateDaysSince[2020]\", Long.class),\n     TIME_SECONDS(\"timeSeconds\", Long.class),\n     DATE_TIME_SECONDS_SINCE_0(\"dateTimeSecondsSince[0]\", Long.class),\n     DATE_TIME_SECONDS_SINCE_1960(\"dateTimeSecondsSince[1960]\", Long.class),\n     DATE_TIME_SECONDS_SINCE_1970(\"dateTimeSecondsSince[1970]\", Long.class),\n-    DATE_TIME_SECONDS_SINCE_1980(\"dateTimeSecondsSince[1980]\", Long.class);\n+    DATE_TIME_SECONDS_SINCE_1980(\"dateTimeSecondsSince[1980]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_1990(\"x-dateTimeSecondsSince[1990]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2000(\"x-dateTimeSecondsSince[2000]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2010(\"x-dateTimeSecondsSince[2010]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2020(\"x-dateTimeSecondsSince[2020]\", Long.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM4Mzg2NA==", "bodyText": "@danielezonca\nJust done with last commit. This also solve the Sonar code smell", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448383864", "createdAt": "2020-07-01T14:00:33Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -44,11 +44,19 @@\n     DATE_DAYS_SINCE_1960(\"dateDaysSince[1960]\", Long.class),\n     DATE_DAYS_SINCE_1970(\"dateDaysSince[1970]\", Long.class),\n     DATE_DAYS_SINCE_1980(\"dateDaysSince[1980]\", Long.class),\n+    DATE_DAYS_SINCE_1990(\"x-dateDaysSince[1990]\", Long.class),\n+    DATE_DAYS_SINCE_2000(\"x-dateDaysSince[2000]\", Long.class),\n+    DATE_DAYS_SINCE_2010(\"x-dateDaysSince[2010]\", Long.class),\n+    DATE_DAYS_SINCE_2020(\"x-dateDaysSince[2020]\", Long.class),\n     TIME_SECONDS(\"timeSeconds\", Long.class),\n     DATE_TIME_SECONDS_SINCE_0(\"dateTimeSecondsSince[0]\", Long.class),\n     DATE_TIME_SECONDS_SINCE_1960(\"dateTimeSecondsSince[1960]\", Long.class),\n     DATE_TIME_SECONDS_SINCE_1970(\"dateTimeSecondsSince[1970]\", Long.class),\n-    DATE_TIME_SECONDS_SINCE_1980(\"dateTimeSecondsSince[1980]\", Long.class);\n+    DATE_TIME_SECONDS_SINCE_1980(\"dateTimeSecondsSince[1980]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_1990(\"x-dateTimeSecondsSince[1990]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2000(\"x-dateTimeSecondsSince[2000]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2010(\"x-dateTimeSecondsSince[2010]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2020(\"x-dateTimeSecondsSince[2020]\", Long.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3OTIzNQ=="}, "originalCommit": {"oid": "bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2456, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}