{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5OTEzMDk0", "number": 2706, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNTowN1rODWR9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODoyOTowOFrODWd7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njg5NDkzOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNTowN1rOFa8qfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODozMDo1NFrOFbPnBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTIxNA==", "bodyText": "Let's not use JP types as input for the model compiler, only for output.\nThis is because in the future we'd like to emit JP code at the very end, therefore during the processing we should only use types owned by us.", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r363801214", "createdAt": "2020-01-07T15:25:07Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -114,12 +120,21 @@ private Expression lambdaInstance(ClassOrInterfaceType type) {\n     }\n \n     private void extractLambdaFromMethodCall(MethodCallExpr methodCallExpr, Supplier<MaterializedLambda> lambdaExtractor) {\n+        List<VariableDeclarator> bitMaskVariables = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTYyMQ==", "bodyText": "Fix applied. thanks!", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364111621", "createdAt": "2020-01-08T08:30:54Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -114,12 +120,21 @@ private Expression lambdaInstance(ClassOrInterfaceType type) {\n     }\n \n     private void extractLambdaFromMethodCall(MethodCallExpr methodCallExpr, Supplier<MaterializedLambda> lambdaExtractor) {\n+        List<VariableDeclarator> bitMaskVariables = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTIxNA=="}, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njg5NjQyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNTozMlrOFa8rbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODozMToyMFrOFbPnyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTQ1NA==", "bodyText": "I moved this parsing outside in the patch to avoid the instanceof", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r363801454", "createdAt": "2020-01-07T15:25:32Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -114,12 +120,21 @@ private Expression lambdaInstance(ClassOrInterfaceType type) {\n     }\n \n     private void extractLambdaFromMethodCall(MethodCallExpr methodCallExpr, Supplier<MaterializedLambda> lambdaExtractor) {\n+        List<VariableDeclarator> bitMaskVariables = new ArrayList<>();\n+        if (lambdaExtractor.get() instanceof MaterializedLambdaConsequence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTgxOA==", "bodyText": "Fix applied. thanks!", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364111818", "createdAt": "2020-01-08T08:31:20Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -114,12 +120,21 @@ private Expression lambdaInstance(ClassOrInterfaceType type) {\n     }\n \n     private void extractLambdaFromMethodCall(MethodCallExpr methodCallExpr, Supplier<MaterializedLambda> lambdaExtractor) {\n+        List<VariableDeclarator> bitMaskVariables = new ArrayList<>();\n+        if (lambdaExtractor.get() instanceof MaterializedLambdaConsequence) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTQ1NA=="}, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njg5NzY2OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNTo1N1rOFa8sSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODozMToyOVrOFbPn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTY3Mg==", "bodyText": "Superclass shouldn't be aware of implementation details of Consequences", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r363801672", "createdAt": "2020-01-07T15:25:57Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "diffHunk": "@@ -38,6 +39,7 @@\n abstract class MaterializedLambda {\n \n     final List<LambdaParameter> lambdaParameters = new ArrayList<>();\n+    final List<VariableDeclarator> bitMaskVariables = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTg2Ng==", "bodyText": "Fix applied. thanks!", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364111866", "createdAt": "2020-01-08T08:31:29Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "diffHunk": "@@ -38,6 +39,7 @@\n abstract class MaterializedLambda {\n \n     final List<LambdaParameter> lambdaParameters = new ArrayList<>();\n+    final List<VariableDeclarator> bitMaskVariables = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTY3Mg=="}, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjkwMDYxOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequence.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNjo0NVrOFa8uCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODozMjowMlrOFbPoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjEyMQ==", "bodyText": "In the refactor patch I changed a logic reconstructing the original initialization method here, to avoid depending on JP data on input.", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r363802121", "createdAt": "2020-01-07T15:26:45Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequence.java", "diffHunk": "@@ -65,6 +65,23 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         }\n     }\n \n+    @Override\n+    protected EnumDeclaration create(CompilationUnit compilationUnit) {\n+        EnumDeclaration lambdaClass = super.create(compilationUnit);\n+\n+        boolean hasDroolsParameter = lambdaParameters.stream().anyMatch(this::isDroolsParameter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMjA3MQ==", "bodyText": "Fix applied. thanks!", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364112071", "createdAt": "2020-01-08T08:32:02Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequence.java", "diffHunk": "@@ -65,6 +65,23 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         }\n     }\n \n+    @Override\n+    protected EnumDeclaration create(CompilationUnit compilationUnit) {\n+        EnumDeclaration lambdaClass = super.create(compilationUnit);\n+\n+        boolean hasDroolsParameter = lambdaParameters.stream().anyMatch(this::isDroolsParameter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjEyMQ=="}, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjkwMzQxOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNzo0MVrOFa8v6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODozMTozOVrOFbPoMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjYwMA==", "bodyText": "This test has too much Java code in text to be readable.\nIn the patch I modified the signature of the create method so that it can be tested in an easier way. Please take a look at it", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r363802600", "createdAt": "2020-01-07T15:27:41Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequenceTest.java", "diffHunk": "@@ -32,4 +38,188 @@ public void createConsequence() {\n         assertThat(aClass.getCompilationUnitAsString(), equalToIgnoringWhiteSpace(expectedResult));\n \n     }\n+\n+    @Test\n+    public void createConsequenceWithDrools() {\n+        String originalJavaSource = \"package defaultpkg;\\n\" +\n+                \"\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTkyMw==", "bodyText": "Fix applied. thanks!", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364111923", "createdAt": "2020-01-08T08:31:39Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequenceTest.java", "diffHunk": "@@ -32,4 +38,188 @@ public void createConsequence() {\n         assertThat(aClass.getCompilationUnitAsString(), equalToIgnoringWhiteSpace(expectedResult));\n \n     }\n+\n+    @Test\n+    public void createConsequenceWithDrools() {\n+        String originalJavaSource = \"package defaultpkg;\\n\" +\n+                \"\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjYwMA=="}, "originalCommit": {"oid": "ef99c4aa364699c1c17ffa5468ee9f57ab241177"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODg0NTY3OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODoyNDoxM1rOFbPdzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODoyNDoxM1rOFbPdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEwOTI2MA==", "bodyText": "Originally, it picks only one field but BitMask may take multiple fields so I changed it to a List.", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364109260", "createdAt": "2020-01-08T08:24:13Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -113,6 +124,40 @@ private Expression lambdaInstance(ClassOrInterfaceType type) {\n         return new FieldAccessExpr(new NameExpr(type.asString()), \"INSTANCE\");\n     }\n \n+    private List<MaterializedLambda.BitMaskVariable> findBitMaskFields(MethodCallExpr methodCallExpr) {\n+        List<MaterializedLambda.BitMaskVariable> bitMaskVariables = new ArrayList<>();\n+        methodCallExpr.findAncestor(MethodDeclaration.class).ifPresent(node -> {\n+\n+            List<MaterializedLambda.BitMaskVariable> collect =\n+                    node.findAll(VariableDeclarator.class)\n+                            .stream()\n+                            .filter(vd -> vd.getType().asString().equals(BitMask.class.getCanonicalName()))\n+                            .flatMap(vd -> {\n+                                ArrayList<AssignExpr> result = new ArrayList<>();\n+                                vd.findAncestor(AssignExpr.class)\n+                                        .ifPresent(result::add);\n+                                return result.stream();\n+                            })\n+                            .map(ae -> {\n+                                String maskName = ae.getTarget().asVariableDeclarationExpr().getVariables().iterator().next().getNameAsString();\n+                                MethodCallExpr maskInit = ae.getValue().asMethodCallExpr();\n+                                if(maskInit.getArguments().isEmpty()) {\n+                                    return new MaterializedLambda.AllSetButLastBitMask(maskName);\n+                                } else {\n+                                    NodeList<Expression> arguments = maskInit.getArguments();\n+                                    String domainClassMetadata = arguments.get(0).toString();\n+                                    List<String> fields = arguments.subList(1, arguments.size()).stream().map(Expression::toString).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "740f3fb479195c984023013cca022e88946c2a42"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODg1Njg3OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODoyOTowOFrOFbPknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTozNzo1NVrOFbRSGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTAwNw==", "bodyText": "Originally, the argument NodeWithMembers was not parameterized so i see compiler warns. It's fine to have <EnumDeclaration> here?", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364111007", "createdAt": "2020-01-08T08:29:08Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "diffHunk": "@@ -146,4 +154,53 @@ private EnumDeclaration create(CompilationUnit compilationUnit) {\n             this.type = type;\n         }\n     }\n+\n+    interface BitMaskVariable {\n+\n+        void generateBitMaskField(NodeWithMembers<EnumDeclaration> clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "740f3fb479195c984023013cca022e88946c2a42"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExOTMwOQ==", "bodyText": "I also think it's better to remove the generic type argument", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364119309", "createdAt": "2020-01-08T08:51:25Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "diffHunk": "@@ -146,4 +154,53 @@ private EnumDeclaration create(CompilationUnit compilationUnit) {\n             this.type = type;\n         }\n     }\n+\n+    interface BitMaskVariable {\n+\n+        void generateBitMaskField(NodeWithMembers<EnumDeclaration> clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTAwNw=="}, "originalCommit": {"oid": "740f3fb479195c984023013cca022e88946c2a42"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEzOTAzNA==", "bodyText": "Talked with Luca and confirmed that NodeWithMembers<EnumDeclaration> is better.", "url": "https://github.com/kiegroup/drools/pull/2706#discussion_r364139034", "createdAt": "2020-01-08T09:37:55Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambda.java", "diffHunk": "@@ -146,4 +154,53 @@ private EnumDeclaration create(CompilationUnit compilationUnit) {\n             this.type = type;\n         }\n     }\n+\n+    interface BitMaskVariable {\n+\n+        void generateBitMaskField(NodeWithMembers<EnumDeclaration> clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExMTAwNw=="}, "originalCommit": {"oid": "740f3fb479195c984023013cca022e88946c2a42"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2609, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}