{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MzMxMTI3", "number": 3261, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTowODo0MlrOE9IQGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTowODo0MlrOE9IQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTMzNzg0OnYy", "diffSide": "RIGHT", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/DeclarationsHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTowODo0MlrOH5piIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTowODo0M1rOH6SAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxMTM2MA==", "bodyText": "I thought one of the optimisation of the ANC was to unwrap the alpha node and use the constraint directly, effectively inlining the call. Can you please double check?", "url": "https://github.com/kiegroup/drools/pull/3261#discussion_r530211360", "createdAt": "2020-11-25T09:08:42Z", "author": {"login": "lucamolteni"}, "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/DeclarationsHandler.java", "diffHunk": "@@ -140,4 +148,33 @@ public void startHashedAlphaNodes(IndexableConstraint indexableConstraint) {\n     public void startHashedAlphaNode(AlphaNode hashedAlpha, Object hashedValue) {\n         currentHashedAlpha.add(hashedValue, String.valueOf(hashedAlpha.getId()));\n     }\n+\n+    @Override\n+    public void startRangeIndex(AlphaRangeIndex alphaRangeIndex) {\n+        builder.append(createRangeIndexDeclaration(alphaRangeIndex)).append(NEWLINE);\n+    }\n+\n+    private String createRangeIndexDeclaration(AlphaRangeIndex alphaRangeIndex) {\n+        int minId = getMinIdFromRangeIndex(alphaRangeIndex);\n+        AlphaNode firstNode = alphaRangeIndex.getAllValues().stream().filter(alpha -> alpha.getId() == minId).findFirst().orElseThrow(NoSuchElementException::new);\n+        String comment = firstNode.toString();\n+        String variableName = getRangeIndexVariableName(alphaRangeIndex, minId);\n+        rangeIndexDeclarationMap.put(variableName, alphaRangeIndex);\n+        return PRIVATE_MODIFIER + \" \" + AlphaRangeIndex.class.getName() + \" \" + variableName + \"; // including \" + comment + \" etc.\";\n+    }\n+\n+    public Map<String, AlphaRangeIndex> getRangeIndexDeclarationMap() {\n+        return rangeIndexDeclarationMap;\n+    }\n+\n+    @Override\n+    public void startRangeIndexedAlphaNode(AlphaNode alphaNode) {\n+        builder.append(getAlphaNodeVariableDeclaration(alphaNode)).append(NEWLINE); // range index uses AlphaNode rather than MVELConstraint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293080963937bebc2f8dd58fcda9767f3a79f4b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg3NDQ5Nw==", "bodyText": "Yeah, I noticed that I don't need these AlphaNode variables! Actually I don't even need the internal constraints because we can get matching alphaNode's id from the range index and go to the next sink. I removed useless codes so now it's much simplified. Thanks!", "url": "https://github.com/kiegroup/drools/pull/3261#discussion_r530874497", "createdAt": "2020-11-26T09:08:43Z", "author": {"login": "tkobayas"}, "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/DeclarationsHandler.java", "diffHunk": "@@ -140,4 +148,33 @@ public void startHashedAlphaNodes(IndexableConstraint indexableConstraint) {\n     public void startHashedAlphaNode(AlphaNode hashedAlpha, Object hashedValue) {\n         currentHashedAlpha.add(hashedValue, String.valueOf(hashedAlpha.getId()));\n     }\n+\n+    @Override\n+    public void startRangeIndex(AlphaRangeIndex alphaRangeIndex) {\n+        builder.append(createRangeIndexDeclaration(alphaRangeIndex)).append(NEWLINE);\n+    }\n+\n+    private String createRangeIndexDeclaration(AlphaRangeIndex alphaRangeIndex) {\n+        int minId = getMinIdFromRangeIndex(alphaRangeIndex);\n+        AlphaNode firstNode = alphaRangeIndex.getAllValues().stream().filter(alpha -> alpha.getId() == minId).findFirst().orElseThrow(NoSuchElementException::new);\n+        String comment = firstNode.toString();\n+        String variableName = getRangeIndexVariableName(alphaRangeIndex, minId);\n+        rangeIndexDeclarationMap.put(variableName, alphaRangeIndex);\n+        return PRIVATE_MODIFIER + \" \" + AlphaRangeIndex.class.getName() + \" \" + variableName + \"; // including \" + comment + \" etc.\";\n+    }\n+\n+    public Map<String, AlphaRangeIndex> getRangeIndexDeclarationMap() {\n+        return rangeIndexDeclarationMap;\n+    }\n+\n+    @Override\n+    public void startRangeIndexedAlphaNode(AlphaNode alphaNode) {\n+        builder.append(getAlphaNodeVariableDeclaration(alphaNode)).append(NEWLINE); // range index uses AlphaNode rather than MVELConstraint", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxMTM2MA=="}, "originalCommit": {"oid": "7293080963937bebc2f8dd58fcda9767f3a79f4b"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2292, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}