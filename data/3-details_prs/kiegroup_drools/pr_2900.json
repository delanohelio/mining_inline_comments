{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4Mzk3MzIx", "number": 2900, "title": "[BAPL-1259] Add logging for rule performance analysis", "bodyText": "WIP. Only implemented for PhreakJoinNode.", "createdAt": "2020-05-15T06:13:49Z", "url": "https://github.com/kiegroup/drools/pull/2900", "merged": true, "mergeCommit": {"oid": "3260c1033b9ee2dab60900d0a82f9de28916d155"}, "closed": true, "closedAt": "2020-07-21T17:30:59Z", "author": {"login": "tkobayas"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmBiyBAFqTQyMDg5NzA1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXKXhPAFqTUxOTMyMzA4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODk3MDU1", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-420897055", "createdAt": "2020-05-29T12:16:11Z", "commit": {"oid": "064e986a5f5c87a9fae8570ce5344e8e31b69ac9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjoxNjoxMVrOGcaPYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjoyMzowMlrOGcadgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MzIzNA==", "bodyText": "Instead of 4 different ThreadLocals would be better (for perf reasons too) to encapsulate the statistics collected per BaseNode into a BaseNodeStats class that could be used into a single ThreadLocal", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r432443234", "createdAt": "2020-05-29T12:16:11Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.util;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.drools.core.common.BaseNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PerfLogUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PerfLogUtils.class);\n+\n+    public static final String PERF_LOGGER_ENABLED = \"drools.performance.logger.enabled\";\n+    private static boolean enabled = Boolean.parseBoolean(System.getProperty(PERF_LOGGER_ENABLED, \"false\"));\n+\n+    public static final String PERF_LOGGER_THRESHOLD = \"drools.performance.logger.threshold\";\n+    private static int threshold = Integer.parseInt(System.getProperty(PERF_LOGGER_THRESHOLD, \"500\")); // microseconds\n+\n+    private static final ThreadLocal<Boolean> started = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064e986a5f5c87a9fae8570ce5344e8e31b69ac9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MzcyNQ==", "bodyText": "There is no need to use an AtomicInteger here, but a single int (or long?) field into the BaseNodeStats (see prev comment) would be enough, given that is being used in a single threaded fashion", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r432443725", "createdAt": "2020-05-29T12:17:14Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.util;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.drools.core.common.BaseNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PerfLogUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PerfLogUtils.class);\n+\n+    public static final String PERF_LOGGER_ENABLED = \"drools.performance.logger.enabled\";\n+    private static boolean enabled = Boolean.parseBoolean(System.getProperty(PERF_LOGGER_ENABLED, \"false\"));\n+\n+    public static final String PERF_LOGGER_THRESHOLD = \"drools.performance.logger.threshold\";\n+    private static int threshold = Integer.parseInt(System.getProperty(PERF_LOGGER_THRESHOLD, \"500\")); // microseconds\n+\n+    private static final ThreadLocal<Boolean> started = new ThreadLocal<>();\n+    private static final ThreadLocal<AtomicInteger> evalCount = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064e986a5f5c87a9fae8570ce5344e8e31b69ac9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0NDQ2MQ==", "bodyText": "There is no need to use a boxed type here, but just a single long field into BaseNodeStats (see previous comments) is enough: it would save both pointer chasing and garbage produced", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r432444461", "createdAt": "2020-05-29T12:18:40Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.util;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.drools.core.common.BaseNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PerfLogUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PerfLogUtils.class);\n+\n+    public static final String PERF_LOGGER_ENABLED = \"drools.performance.logger.enabled\";\n+    private static boolean enabled = Boolean.parseBoolean(System.getProperty(PERF_LOGGER_ENABLED, \"false\"));\n+\n+    public static final String PERF_LOGGER_THRESHOLD = \"drools.performance.logger.threshold\";\n+    private static int threshold = Integer.parseInt(System.getProperty(PERF_LOGGER_THRESHOLD, \"500\")); // microseconds\n+\n+    private static final ThreadLocal<Boolean> started = new ThreadLocal<>();\n+    private static final ThreadLocal<AtomicInteger> evalCount = new ThreadLocal<>();\n+    private static final ThreadLocal<Long> startTime = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064e986a5f5c87a9fae8570ce5344e8e31b69ac9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0Njg0OA==", "bodyText": "Ditto as before: could be part of a single thread local instance (ie BaseNodeStats), but it worries me that I cannot see any code path that set it to null..it risks to became an actual memory leak: I suggest to rethink if it worths to make this a weak reference field instead...", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r432446848", "createdAt": "2020-05-29T12:23:02Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.util;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.drools.core.common.BaseNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PerfLogUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PerfLogUtils.class);\n+\n+    public static final String PERF_LOGGER_ENABLED = \"drools.performance.logger.enabled\";\n+    private static boolean enabled = Boolean.parseBoolean(System.getProperty(PERF_LOGGER_ENABLED, \"false\"));\n+\n+    public static final String PERF_LOGGER_THRESHOLD = \"drools.performance.logger.threshold\";\n+    private static int threshold = Integer.parseInt(System.getProperty(PERF_LOGGER_THRESHOLD, \"500\")); // microseconds\n+\n+    private static final ThreadLocal<Boolean> started = new ThreadLocal<>();\n+    private static final ThreadLocal<AtomicInteger> evalCount = new ThreadLocal<>();\n+    private static final ThreadLocal<Long> startTime = new ThreadLocal<>();\n+    private static final ThreadLocal<BaseNode> node = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064e986a5f5c87a9fae8570ce5344e8e31b69ac9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjU2OTEw", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-421656910", "createdAt": "2020-06-01T07:53:51Z", "commit": {"oid": "c09049ac9b83c905e70ff4bd1a51d1daaa991182"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1Mzo1MVrOGdB2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1Mzo1MVrOGdB2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MjE0Mw==", "bodyText": "I would save this expensive computation ie  elapsedTime / 1000 to perform it just once and I would handle the case of stats == null with a log or something similar: at this point this is not supposed to be null right?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r433092143", "createdAt": "2020-06-01T07:53:51Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -55,33 +50,29 @@ public static void setEnabled(boolean enabled) {\n \n     public static void startMetrics(BaseNode baseNode) {\n         if (enabled) {\n-            started.set(true);\n-            node.set(baseNode);\n-            evalCount.set(new AtomicInteger(0));\n-            startTime.set(System.nanoTime());\n-        }\n-    }\n-\n-    public static void endMetrics() {\n-        if (enabled) {\n-            started.set(false);\n+            nodeStats.set(new NodeStats(baseNode));\n         }\n     }\n \n     public static void incrementEvalCount() {\n-        if (enabled && started.get().booleanValue()) {\n-            evalCount.get().getAndIncrement();\n+        if (enabled) {\n+            NodeStats stats = nodeStats.get();\n+            if (stats != null && stats.isStarted()) {\n+                stats.incrementEvalCount();\n+            }\n         }\n     }\n \n     public static void logAndEndMetrics() {\n-        if (enabled && started.get().booleanValue()) {\n-            long elapsedTime = (System.nanoTime() - startTime.get());\n-            int count = evalCount.get().intValue();\n-            if (count > 0 && (elapsedTime / 1000) > threshold) {\n-                logger.trace(\"{}, evalCount:{}, elapsed:{}\", node.get(), count, elapsedTime / 1000); // microseconds\n+        if (enabled) {\n+            NodeStats stats = nodeStats.get();\n+            if (stats != null && stats.isStarted()) {\n+                long elapsedTime = (System.nanoTime() - stats.getStartTime());\n+                if (stats.getEvalCount() > 0 && (elapsedTime / 1000) > threshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09049ac9b83c905e70ff4bd1a51d1daaa991182"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ed53deaaf76002f6f800ab6d8bbab20903d0ade", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/0ed53deaaf76002f6f800ab6d8bbab20903d0ade", "committedDate": "2020-06-02T02:29:55Z", "message": "- warn log. better calc"}, "afterCommit": {"oid": "8adf0839793929a354155ce2d95661f2253505ca", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/8adf0839793929a354155ce2d95661f2253505ca", "committedDate": "2020-06-22T00:17:05Z", "message": "- applied to PhrealEvalNode\n- try/finally"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzY0ODky", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-434764892", "createdAt": "2020-06-22T09:42:44Z", "commit": {"oid": "8adf0839793929a354155ce2d95661f2253505ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTo0Mjo0NFrOGm5Ysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTo0Mjo0NFrOGm5Ysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzOTI4Mg==", "bodyText": "Given that's globally visible...maybe it should use a volatile here: you expect this to change while the application is running?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r443439282", "createdAt": "2020-06-22T09:42:44Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.util;\n+\n+import org.drools.core.common.BaseNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PerfLogUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PerfLogUtils.class);\n+\n+    public static final String PERF_LOGGER_ENABLED = \"drools.performance.logger.enabled\";\n+    private static boolean enabled = Boolean.parseBoolean(System.getProperty(PERF_LOGGER_ENABLED, \"false\"));\n+\n+    public static final String PERF_LOGGER_THRESHOLD = \"drools.performance.logger.threshold\";\n+    private static int threshold = Integer.parseInt(System.getProperty(PERF_LOGGER_THRESHOLD, \"500\")); // microseconds\n+\n+    private static final ThreadLocal<NodeStats> nodeStats = new ThreadLocal<>();\n+\n+    public static int getThreshold() {\n+        return threshold;\n+    }\n+\n+    public static void setThreshold(int threshold) {\n+        PerfLogUtils.threshold = threshold;\n+    }\n+\n+    public static boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public static void setEnabled(boolean enabled) {\n+        PerfLogUtils.enabled = enabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adf0839793929a354155ce2d95661f2253505ca"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzMyNzMw", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-438332730", "createdAt": "2020-06-26T14:16:05Z", "commit": {"oid": "5ab1c5c01383b51ee05c108b52cb153e41c1a080"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTMxMjI4", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-438931228", "createdAt": "2020-06-29T06:58:34Z", "commit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjo1ODozNFrOGqHKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoxMjo0OFrOGqHjEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMDgyNA==", "bodyText": "I think that this constructor is called by default. Any reason for explicitly adding it here?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446810824", "createdAt": "2020-06-29T06:58:34Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/DefaultBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common.metric;\n+\n+import org.drools.core.RuleBaseConfiguration;\n+import org.drools.core.common.DefaultBetaConstraints;\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.rule.ContextEntry;\n+import org.drools.core.rule.MutableTypeConstraint;\n+import org.drools.core.spi.BetaNodeFieldConstraint;\n+import org.drools.core.spi.Tuple;\n+import org.drools.core.util.PerfLogUtils;\n+\n+public class DefaultBetaConstraintsMetric extends DefaultBetaConstraints {\n+\n+    private static final long serialVersionUID = 510l;\n+\n+    public DefaultBetaConstraintsMetric() {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMTU1Nw==", "bodyText": "I know it is a detail. But maybe please update 2005 to 2020.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446811557", "createdAt": "2020-06-29T07:00:16Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/DefaultBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMTYxMA==", "bodyText": "I know it is a detail. But maybe please update 2005 to 2020.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446811610", "createdAt": "2020-06-29T07:00:23Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/DoubleBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMTc5Mg==", "bodyText": "I know it is a detail. But maybe please update 2005 to 2020.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446811792", "createdAt": "2020-06-29T07:00:46Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/QuadroupleBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjA4OQ==", "bodyText": "Isn't this called by default?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446812089", "createdAt": "2020-06-29T07:01:28Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/DefaultBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common.metric;\n+\n+import org.drools.core.RuleBaseConfiguration;\n+import org.drools.core.common.DefaultBetaConstraints;\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.rule.ContextEntry;\n+import org.drools.core.rule.MutableTypeConstraint;\n+import org.drools.core.spi.BetaNodeFieldConstraint;\n+import org.drools.core.spi.Tuple;\n+import org.drools.core.util.PerfLogUtils;\n+\n+public class DefaultBetaConstraintsMetric extends DefaultBetaConstraints {\n+\n+    private static final long serialVersionUID = 510l;\n+\n+    public DefaultBetaConstraintsMetric() {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjE1MA==", "bodyText": "Is this indent intentional?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446812150", "createdAt": "2020-06-29T07:01:38Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/QuadroupleBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common.metric;\n+\n+import org.drools.core.RuleBaseConfiguration;\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.common.QuadroupleBetaConstraints;\n+import org.drools.core.rule.ContextEntry;\n+import org.drools.core.rule.MutableTypeConstraint;\n+import org.drools.core.spi.BetaNodeFieldConstraint;\n+import org.drools.core.spi.Tuple;\n+import org.drools.core.util.PerfLogUtils;\n+import org.kie.internal.conf.IndexPrecedenceOption;\n+\n+public class QuadroupleBetaConstraintsMetric extends QuadroupleBetaConstraints {\n+\n+    private static final long             serialVersionUID = 510l;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjM0Mg==", "bodyText": "Please update date.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446812342", "createdAt": "2020-06-29T07:02:05Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/SingleBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjYyMA==", "bodyText": "Please fix date.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446812620", "createdAt": "2020-06-29T07:02:50Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/common/metric/TripleBetaConstraintsMetric.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2005 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMjcxMA==", "bodyText": "Missing license header.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446812710", "createdAt": "2020-06-29T07:03:04Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/phreak/PhreakNetworkNodeFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.drools.core.phreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMzgwNw==", "bodyText": "Is missing access modifier intentional? Shouldn't we rather use public?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446813807", "createdAt": "2020-06-29T07:05:33Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/phreak/PhreakNetworkNodeFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.drools.core.phreak;\n+\n+import org.drools.core.phreak.metric.PhreakAccumulateNodeMetric;\n+import org.drools.core.phreak.metric.PhreakAsyncReceiveNodeMetric;\n+import org.drools.core.phreak.metric.PhreakAsyncSendNodeMetric;\n+import org.drools.core.phreak.metric.PhreakBranchNodeMetric;\n+import org.drools.core.phreak.metric.PhreakEvalNodeMetric;\n+import org.drools.core.phreak.metric.PhreakExistsNodeMetric;\n+import org.drools.core.phreak.metric.PhreakFromNodeMetric;\n+import org.drools.core.phreak.metric.PhreakJoinNodeMetric;\n+import org.drools.core.phreak.metric.PhreakNotNodeMetric;\n+import org.drools.core.phreak.metric.PhreakQueryNodeMetric;\n+import org.drools.core.phreak.metric.PhreakQueryTerminalNodeMetric;\n+import org.drools.core.phreak.metric.PhreakReactiveFromNodeMetric;\n+import org.drools.core.phreak.metric.PhreakTimerNodeMetric;\n+import org.drools.core.util.PerfLogUtils;\n+\n+public class PhreakNetworkNodeFactory {\n+\n+    private static final PhreakNetworkNodeFactory INSTANCE = new PhreakNetworkNodeFactory();\n+\n+    public static PhreakNetworkNodeFactory getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private PhreakNetworkNodeFactory() {}\n+\n+    PhreakJoinNode createPhreakJoinNode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMzk2MA==", "bodyText": "Please fix date.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446813960", "createdAt": "2020-06-29T07:05:52Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/phreak/metric/PhreakAccumulateNodeMetric.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNTc0Mg==", "bodyText": "Is it ok to do nothing for all these exception types? For example Security or Illegal argument exceptions? Maybe it would be good to at least log something at debug or trace level. What do you think?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446815742", "createdAt": "2020-06-29T07:09:56Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/reteoo/ReteDumper.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.drools.core.reteoo;\n+\n+import java.io.PrintWriter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.KieBase;\n+import org.kie.api.definition.rule.Rule;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.KieSession;\n+\n+/**\n+ * \n+ * Utility class to view Rete models\n+ *\n+ */\n+public class ReteDumper {\n+\n+    private PrintWriter writer;\n+    private StringBuilder sb;\n+    private Predicate<BaseNode> nodesFilter;\n+\n+    private boolean nodeInfoOnly = false;\n+\n+    public ReteDumper() {\n+        this(node -> true);\n+    }\n+\n+    public ReteDumper(Predicate<BaseNode> nodesFilter) {\n+        this.nodesFilter = nodesFilter;\n+    }\n+\n+    public ReteDumper(String ruleName) {\n+        this( node -> Stream.of( node.getAssociatedRules() ).anyMatch( rule -> rule.getName().equals( ruleName ) ) );\n+    }\n+\n+    public PrintWriter getWriter() {\n+        return writer;\n+    }\n+\n+    /**\n+     * Set a writer to which ReteDumper prints results. By default, results will be printed to STDOUT\n+     * @param writer\n+     */\n+    public void setWriter(PrintWriter writer) {\n+        this.writer = writer;\n+    }\n+\n+    public boolean isNodeInfoOnly() {\n+        return nodeInfoOnly;\n+    }\n+\n+    /**\n+     * If true, dump without partition/mask information. Default value is false\n+     * @param nodeInfoOnly\n+     */\n+    public void setNodeInfoOnly(boolean nodeInfoOnly) {\n+        this.nodeInfoOnly = nodeInfoOnly;\n+    }\n+\n+    public static void dumpRete(KieBase kbase ) {\n+        new ReteDumper().dump((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public static void dumpRete(KieRuntime session ) {\n+        new ReteDumper().dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static void dumpRete(KieSession session) {\n+        new ReteDumper().dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static void dumpRete(InternalKnowledgeBase kBase) {\n+        new ReteDumper().dump(kBase.getRete());\n+    }\n+\n+    public static void dumpRete(Rete rete) {\n+        new ReteDumper().dump(rete);\n+    }\n+\n+    public void dump(KieBase kbase ) {\n+        dump((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public void dump(KieRuntime session ) {\n+        dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public void dump(KieSession session) {\n+        dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public void dump(InternalKnowledgeBase kBase) {\n+        dump(kBase.getRete());\n+    }\n+\n+    public void dump(Rete rete) {\n+        // Other dump/dumpRete methods eventually call this method\n+        sb = new StringBuilder();\n+        traverseRete(rete, this::dumpNode);\n+        printResults();\n+    }\n+\n+    private void printResults() {\n+        if (writer == null) {\n+            System.out.print(sb.toString());\n+        } else {\n+            // if a writer is given by a caller, the caller is responsible for closing\n+            writer.print(sb.toString());\n+        }\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieBase kbase ) {\n+        return new ReteDumper().collect((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieRuntime session ) {\n+        return new ReteDumper().collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieSession session) {\n+        return new ReteDumper().collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static Set<BaseNode> collectRete(InternalKnowledgeBase kBase) {\n+        return new ReteDumper().collect(kBase.getRete());\n+    }\n+\n+    public static Set<BaseNode> collectRete(Rete rete) {\n+        return new ReteDumper().collect(rete);\n+    }\n+\n+    public Set<BaseNode> collect(KieBase kbase ) {\n+        return collect((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public Set<BaseNode> collect(KieRuntime session ) {\n+        return collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public Set<BaseNode> collect(KieSession session) {\n+        return collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public Set<BaseNode> collect(InternalKnowledgeBase kBase) {\n+        return collect(kBase.getRete());\n+    }\n+\n+    public Set<BaseNode> collect(Rete rete) {\n+        Set<BaseNode> nodes = createIdentitySet();\n+        traverseRete(rete, (node, s) -> nodes.add(node));\n+        return nodes;\n+    }\n+\n+    public void traverseRete(Rete rete, BiConsumer<BaseNode, String> consumer) {\n+        for (EntryPointNode entryPointNode : rete.getEntryPointNodes().values()) {\n+            dumpNode( entryPointNode, \"\", createIdentitySet(), consumer);\n+        }\n+    }\n+\n+    private <T> Set<T> createIdentitySet() {\n+        return Collections.newSetFromMap(new IdentityHashMap<>());\n+    }\n+\n+    private void dumpNode( BaseNode node, String ident, Set<BaseNode> visitedNodes, BiConsumer<BaseNode, String> consumer ) {\n+        consumer.accept( node, ident );\n+        if (!visitedNodes.add( node )) {\n+            return;\n+        }\n+        Sink[] sinks = node.getSinks();\n+        if (sinks != null) {\n+            for (Sink sink : sinks) {\n+                if (sink instanceof BaseNode) {\n+                    BaseNode sinkNode = ( BaseNode ) sink;\n+                    if ( nodesFilter.test( sinkNode ) ) {\n+                        dumpNode( sinkNode, ident + \"  \", visitedNodes, consumer );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void dumpNode( BaseNode node, String ident ) {\n+        sb.append(ident + formatNode(node));\n+        if (!nodeInfoOnly) {\n+            sb.append(\" on \" + node.getPartitionId());\n+            try {\n+                Object declaredMask = node.getClass().getMethod(\"getDeclaredMask\").invoke(node);\n+                Object inferreddMask = node.getClass().getMethod(\"getInferredMask\").invoke(node);\n+                sb.append(\" d \"+declaredMask + \" i \" + inferreddMask);\n+            } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+                // do nothing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNTkxNw==", "bodyText": "Same as for previous try catch block.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446815917", "createdAt": "2020-06-29T07:10:17Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/reteoo/ReteDumper.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.drools.core.reteoo;\n+\n+import java.io.PrintWriter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.KieBase;\n+import org.kie.api.definition.rule.Rule;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.KieSession;\n+\n+/**\n+ * \n+ * Utility class to view Rete models\n+ *\n+ */\n+public class ReteDumper {\n+\n+    private PrintWriter writer;\n+    private StringBuilder sb;\n+    private Predicate<BaseNode> nodesFilter;\n+\n+    private boolean nodeInfoOnly = false;\n+\n+    public ReteDumper() {\n+        this(node -> true);\n+    }\n+\n+    public ReteDumper(Predicate<BaseNode> nodesFilter) {\n+        this.nodesFilter = nodesFilter;\n+    }\n+\n+    public ReteDumper(String ruleName) {\n+        this( node -> Stream.of( node.getAssociatedRules() ).anyMatch( rule -> rule.getName().equals( ruleName ) ) );\n+    }\n+\n+    public PrintWriter getWriter() {\n+        return writer;\n+    }\n+\n+    /**\n+     * Set a writer to which ReteDumper prints results. By default, results will be printed to STDOUT\n+     * @param writer\n+     */\n+    public void setWriter(PrintWriter writer) {\n+        this.writer = writer;\n+    }\n+\n+    public boolean isNodeInfoOnly() {\n+        return nodeInfoOnly;\n+    }\n+\n+    /**\n+     * If true, dump without partition/mask information. Default value is false\n+     * @param nodeInfoOnly\n+     */\n+    public void setNodeInfoOnly(boolean nodeInfoOnly) {\n+        this.nodeInfoOnly = nodeInfoOnly;\n+    }\n+\n+    public static void dumpRete(KieBase kbase ) {\n+        new ReteDumper().dump((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public static void dumpRete(KieRuntime session ) {\n+        new ReteDumper().dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static void dumpRete(KieSession session) {\n+        new ReteDumper().dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static void dumpRete(InternalKnowledgeBase kBase) {\n+        new ReteDumper().dump(kBase.getRete());\n+    }\n+\n+    public static void dumpRete(Rete rete) {\n+        new ReteDumper().dump(rete);\n+    }\n+\n+    public void dump(KieBase kbase ) {\n+        dump((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public void dump(KieRuntime session ) {\n+        dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public void dump(KieSession session) {\n+        dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public void dump(InternalKnowledgeBase kBase) {\n+        dump(kBase.getRete());\n+    }\n+\n+    public void dump(Rete rete) {\n+        // Other dump/dumpRete methods eventually call this method\n+        sb = new StringBuilder();\n+        traverseRete(rete, this::dumpNode);\n+        printResults();\n+    }\n+\n+    private void printResults() {\n+        if (writer == null) {\n+            System.out.print(sb.toString());\n+        } else {\n+            // if a writer is given by a caller, the caller is responsible for closing\n+            writer.print(sb.toString());\n+        }\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieBase kbase ) {\n+        return new ReteDumper().collect((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieRuntime session ) {\n+        return new ReteDumper().collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieSession session) {\n+        return new ReteDumper().collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static Set<BaseNode> collectRete(InternalKnowledgeBase kBase) {\n+        return new ReteDumper().collect(kBase.getRete());\n+    }\n+\n+    public static Set<BaseNode> collectRete(Rete rete) {\n+        return new ReteDumper().collect(rete);\n+    }\n+\n+    public Set<BaseNode> collect(KieBase kbase ) {\n+        return collect((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public Set<BaseNode> collect(KieRuntime session ) {\n+        return collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public Set<BaseNode> collect(KieSession session) {\n+        return collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public Set<BaseNode> collect(InternalKnowledgeBase kBase) {\n+        return collect(kBase.getRete());\n+    }\n+\n+    public Set<BaseNode> collect(Rete rete) {\n+        Set<BaseNode> nodes = createIdentitySet();\n+        traverseRete(rete, (node, s) -> nodes.add(node));\n+        return nodes;\n+    }\n+\n+    public void traverseRete(Rete rete, BiConsumer<BaseNode, String> consumer) {\n+        for (EntryPointNode entryPointNode : rete.getEntryPointNodes().values()) {\n+            dumpNode( entryPointNode, \"\", createIdentitySet(), consumer);\n+        }\n+    }\n+\n+    private <T> Set<T> createIdentitySet() {\n+        return Collections.newSetFromMap(new IdentityHashMap<>());\n+    }\n+\n+    private void dumpNode( BaseNode node, String ident, Set<BaseNode> visitedNodes, BiConsumer<BaseNode, String> consumer ) {\n+        consumer.accept( node, ident );\n+        if (!visitedNodes.add( node )) {\n+            return;\n+        }\n+        Sink[] sinks = node.getSinks();\n+        if (sinks != null) {\n+            for (Sink sink : sinks) {\n+                if (sink instanceof BaseNode) {\n+                    BaseNode sinkNode = ( BaseNode ) sink;\n+                    if ( nodesFilter.test( sinkNode ) ) {\n+                        dumpNode( sinkNode, ident + \"  \", visitedNodes, consumer );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void dumpNode( BaseNode node, String ident ) {\n+        sb.append(ident + formatNode(node));\n+        if (!nodeInfoOnly) {\n+            sb.append(\" on \" + node.getPartitionId());\n+            try {\n+                Object declaredMask = node.getClass().getMethod(\"getDeclaredMask\").invoke(node);\n+                Object inferreddMask = node.getClass().getMethod(\"getInferredMask\").invoke(node);\n+                sb.append(\" d \"+declaredMask + \" i \" + inferreddMask);\n+            } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+                // do nothing.\n+            }\n+            try {\n+                Object declaredMask = node.getClass().getMethod(\"getLeftDeclaredMask\").invoke(node);\n+                Object inferreddMask = node.getClass().getMethod(\"getLeftInferredMask\").invoke(node);\n+                sb.append(\" Ld \"+declaredMask + \" Li \" + inferreddMask);\n+            } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+                // do nothing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNjI5NA==", "bodyText": "Missing license header.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446816294", "createdAt": "2020-06-29T07:11:06Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/reteoo/builder/BetaNodeConstraintFactory.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.drools.core.reteoo.builder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNjc5NQ==", "bodyText": "Only for curiosity. Is there any reason for this change? It seems both do the same.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446816795", "createdAt": "2020-06-29T07:12:14Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/rule/EvalCondition.java", "diffHunk": "@@ -153,7 +153,7 @@ public boolean equals(final Object object) {\n             return true;\n         }\n \n-        if ( object == null || object.getClass() != EvalCondition.class ) {\n+        if ( object == null || object.getClass() != this.getClass() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNjg5NQ==", "bodyText": "Missing license header.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446816895", "createdAt": "2020-06-29T07:12:29Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/rule/EvalConditionFactory.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.drools.core.rule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNzA0MA==", "bodyText": "Any reason for calling super here?", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r446817040", "createdAt": "2020-06-29T07:12:48Z", "author": {"login": "jiripetrlik"}, "path": "drools-core/src/main/java/org/drools/core/rule/metric/EvalConditionMetric.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.drools.core.rule.metric;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import org.drools.core.WorkingMemory;\n+import org.drools.core.rule.Declaration;\n+import org.drools.core.rule.EvalCondition;\n+import org.drools.core.spi.EvalExpression;\n+import org.drools.core.spi.Tuple;\n+import org.drools.core.util.PerfLogUtils;\n+\n+public class EvalConditionMetric extends EvalCondition {\n+\n+    public EvalConditionMetric() {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c28376da268412a558190d0263896e8152505b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjAzNDY4", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-443603468", "createdAt": "2020-07-07T06:45:10Z", "commit": {"oid": "8ecf6a08302c2a59c8003dd34438626cf74fa211"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjA5MTMz", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-443609133", "createdAt": "2020-07-07T06:55:39Z", "commit": {"oid": "8ecf6a08302c2a59c8003dd34438626cf74fa211"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo1NTo0MFrOGtxYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo1NTo0MFrOGtxYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0ODIwNw==", "bodyText": "I believe that having a ThreadLocal here is only necessary if the engine is running in parallel evaluation mode (which is not the default). Probably you could have a single plain NodeStats if parallel evaluation is not enabled.", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r450648207", "createdAt": "2020-07-07T06:55:40Z", "author": {"login": "mariofusco"}, "path": "drools-core/src/main/java/org/drools/core/util/PerfLogUtils.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.util;\n+\n+import org.drools.core.common.BaseNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PerfLogUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PerfLogUtils.class);\n+\n+    public static final String PERF_LOGGER_ENABLED = \"drools.performance.logger.enabled\";\n+    private boolean enabled = Boolean.parseBoolean(System.getProperty(PERF_LOGGER_ENABLED, \"false\"));\n+\n+    public static final String PERF_LOGGER_THRESHOLD = \"drools.performance.logger.threshold\";\n+    private int threshold = Integer.parseInt(System.getProperty(PERF_LOGGER_THRESHOLD, \"500\")); // microseconds\n+\n+    private final ThreadLocal<NodeStats> nodeStats = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecf6a08302c2a59c8003dd34438626cf74fa211"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTAwMDE3", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-444900017", "createdAt": "2020-07-08T15:48:47Z", "commit": {"oid": "8ecf6a08302c2a59c8003dd34438626cf74fa211"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01eddfc9e8034c0fb6b255bc356092071da55a4", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/b01eddfc9e8034c0fb6b255bc356092071da55a4", "committedDate": "2020-07-09T03:09:32Z", "message": "[BAPL-1259] Add logging for rule performance analysis\n- wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8ebd7238423977f098ec41f4e0db3e50a6da7b", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/3d8ebd7238423977f098ec41f4e0db3e50a6da7b", "committedDate": "2020-07-09T03:09:32Z", "message": "- Encapsulate data in NodeStats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ef0e4cc6eed8cf4e9aab961beedd962c1f1008", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/a2ef0e4cc6eed8cf4e9aab961beedd962c1f1008", "committedDate": "2020-07-09T03:09:32Z", "message": "- License"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985d0d3e24363938f6757565fac2f6cc85a2672d", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/985d0d3e24363938f6757565fac2f6cc85a2672d", "committedDate": "2020-07-09T03:09:32Z", "message": "- warn log. better calc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b515ceb5e6e862927f050f77a323429c3c7d2e", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/77b515ceb5e6e862927f050f77a323429c3c7d2e", "committedDate": "2020-07-09T03:09:32Z", "message": "- applied to phreak nodes\n- moved ReteDumper to src"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a95c02c40a69663bfefa1b1b2b489ad0210d117", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/3a95c02c40a69663bfefa1b1b2b489ad0210d117", "committedDate": "2020-07-09T03:09:32Z", "message": "- applied to PhrealEvalNode\n- try/finally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb3615ca655c02736ec4b86fa2fca6c71e9c20e", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/cdb3615ca655c02736ec4b86fa2fca6c71e9c20e", "committedDate": "2020-07-09T03:09:32Z", "message": "- Introduced Factory to keep original PhreakNode and Constraints clean. Mertic classes are implemented as sub class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219553a7a632dfcb7ac39b79f1d8159be2c78d4a", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/219553a7a632dfcb7ac39b79f1d8159be2c78d4a", "committedDate": "2020-07-09T03:09:32Z", "message": "- fix equals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cedbab8213bb31643acb7b37c82d53f611289cbd", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/cedbab8213bb31643acb7b37c82d53f611289cbd", "committedDate": "2020-07-09T03:09:32Z", "message": "- revert pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee0206f0390d79849ba8095e2a670879f53dc18", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/6ee0206f0390d79849ba8095e2a670879f53dc18", "committedDate": "2020-07-09T03:09:32Z", "message": "- remove setEnabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4970a98b3d5c378d4474daf1139426fa85e4a016", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/4970a98b3d5c378d4474daf1139426fa85e4a016", "committedDate": "2020-07-09T03:09:33Z", "message": "- fixed code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02926f0a1fe101ffa7f90b757873e7a3ea8bfc1b", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/02926f0a1fe101ffa7f90b757873e7a3ea8bfc1b", "committedDate": "2020-07-09T03:09:33Z", "message": "- fixed code smells. Keep \"cloned\" private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0a70c1129313c8af65e7101dc6831e3faf2012", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/9c0a70c1129313c8af65e7101dc6831e3faf2012", "committedDate": "2020-07-09T03:09:33Z", "message": "- Fix/Add license\n- Removed unnecessary super()\n- Fixed access modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4202f96fbed76826d078744dc6d392ee0020d4de", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/4202f96fbed76826d078744dc6d392ee0020d4de", "committedDate": "2020-07-09T03:09:33Z", "message": "- Add log to ReteDumper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7af973cddd7ffb37a5d1d190de806f7e882dea6b", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/7af973cddd7ffb37a5d1d190de806f7e882dea6b", "committedDate": "2020-07-09T03:09:33Z", "message": "- fixed license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d", "committedDate": "2020-07-09T09:27:51Z", "message": "- moved to drools-metric"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ecf6a08302c2a59c8003dd34438626cf74fa211", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/8ecf6a08302c2a59c8003dd34438626cf74fa211", "committedDate": "2020-06-29T12:41:46Z", "message": "- fixed license"}, "afterCommit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d", "committedDate": "2020-07-09T09:27:51Z", "message": "- moved to drools-metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDY5NDU4", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-445469458", "createdAt": "2020-07-09T10:01:15Z", "commit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMToxNVrOGvKXRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMjo0N1rOGvKabw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNjA1Mw==", "bodyText": "kie.conf has 3 entries to switch Factory classes. Should I encapsulate them into another new top layer Factory in order to reduce the number of entries in kie.conf? Or I wondered if I should let KieComponentFactory have these factories but KieComponentFactory is not singleton so doesn't seem to fit (I think it's technically possible though).", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r452106053", "createdAt": "2020-07-09T10:01:15Z", "author": {"login": "tkobayas"}, "path": "drools-metric/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -0,0 +1,3 @@\n+org.drools.core.phreak.PhreakNetworkNodeFactory=org.drools.metric.phreak.MetricPhreakNetworkNodeFactoryImpl\n+org.drools.core.reteoo.builder.BetaNodeConstraintFactory=org.drools.metric.reteoo.builder.MetricBetaNodeConstraintFactoryImpl\n+org.drools.core.rule.EvalConditionFactory=org.drools.metric.rule.MetricEvalConditionFactoryImpl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNjg2Mw==", "bodyText": "I'm not confident if I wrote maven-bundle-plugin here correctly (This is the first time I wrote this).", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r452106863", "createdAt": "2020-07-09T10:02:47Z", "author": {"login": "tkobayas"}, "path": "drools-metric/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.41.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>drools-metric</artifactId>\n+  <packaging>bundle</packaging>\n+\n+  <name>Drools :: Metric Analysis</name>\n+\n+  <properties>\n+    <java.module.name>org.drools.metric</java.module.name>\n+  </properties>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-compiler</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-compiler</artifactId>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <!-- Logging -->\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+    <dependency><!-- For unit test logging: configure in src/test/resources/logback-test.xml -->\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-classic</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <configuration>\n+          <instructions>\n+            <Export-Package>\n+              org.drools.metric.*\n+            </Export-Package>\n+            <Import-Package>\n+              *\n+            </Import-Package>\n+            <Bundle-Activator>org.drools.ruleunit.osgi.Activator</Bundle-Activator>\n+            <_removeheaders>Private-Package</_removeheaders>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+    </plugins>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzcxMTUx", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-449771151", "createdAt": "2020-07-16T11:48:10Z", "commit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0ODoxMFrOGynYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0ODoxMFrOGynYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNzExOA==", "bodyText": "FYI I didn't implement OSGi for drools-traits as @mariofusco told me we're actually kind of deprecating it", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r455727118", "createdAt": "2020-07-16T11:48:10Z", "author": {"login": "lucamolteni"}, "path": "drools-metric/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.41.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>drools-metric</artifactId>\n+  <packaging>bundle</packaging>\n+\n+  <name>Drools :: Metric Analysis</name>\n+\n+  <properties>\n+    <java.module.name>org.drools.metric</java.module.name>\n+  </properties>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-compiler</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-compiler</artifactId>\n+      <type>test-jar</type>\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <!-- Logging -->\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+    <dependency><!-- For unit test logging: configure in src/test/resources/logback-test.xml -->\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-classic</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <configuration>\n+          <instructions>\n+            <Export-Package>\n+              org.drools.metric.*\n+            </Export-Package>\n+            <Import-Package>\n+              *\n+            </Import-Package>\n+            <Bundle-Activator>org.drools.ruleunit.osgi.Activator</Bundle-Activator>\n+            <_removeheaders>Private-Package</_removeheaders>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+    </plugins>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNjg2Mw=="}, "originalCommit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzgzOTI3", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-449783927", "createdAt": "2020-07-16T12:08:11Z", "commit": {"oid": "c6cbb56515f09c0a7d76dabb3d2a7786f18dca1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1bceab3b02781876e84acabadc9b4970ea2020d", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/f1bceab3b02781876e84acabadc9b4970ea2020d", "committedDate": "2020-07-17T02:23:05Z", "message": "- osgi bundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149b69bf34a48bf19f6c7b39f507052a295c4291", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/149b69bf34a48bf19f6c7b39f507052a295c4291", "committedDate": "2020-07-17T02:57:58Z", "message": "- fixed code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6660fd9a667bf0bc5cb67a505a094cab0664c3", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/8c6660fd9a667bf0bc5cb67a505a094cab0664c3", "committedDate": "2020-07-21T01:31:55Z", "message": "- Removed OSGi bundle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzIzMDgz", "url": "https://github.com/kiegroup/drools/pull/2900#pullrequestreview-519323083", "createdAt": "2020-10-29T04:22:13Z", "commit": {"oid": "8c6660fd9a667bf0bc5cb67a505a094cab0664c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDoyMjoxM1rOHqJPAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDoyMjoxM1rOHqJPAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1MzUzOA==", "bodyText": "@lucamolteni I strongly suggest to look into MethodHandle::invokeExact that disturb much less the security manager while producing less garbage too", "url": "https://github.com/kiegroup/drools/pull/2900#discussion_r513953538", "createdAt": "2020-10-29T04:22:13Z", "author": {"login": "franz1981"}, "path": "drools-core/src/main/java/org/drools/core/reteoo/ReteDumper.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.drools.core.reteoo;\n+\n+import java.io.PrintWriter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.KieBase;\n+import org.kie.api.definition.rule.Rule;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.KieSession;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * \n+ * Utility class to view Rete models\n+ *\n+ */\n+public class ReteDumper {\n+\n+    private static Logger logger = LoggerFactory.getLogger(ReteDumper.class);\n+\n+    private PrintWriter writer;\n+    private StringBuilder sb;\n+    private Predicate<BaseNode> nodesFilter;\n+\n+    private boolean nodeInfoOnly = false;\n+\n+    public ReteDumper() {\n+        this(node -> true);\n+    }\n+\n+    public ReteDumper(Predicate<BaseNode> nodesFilter) {\n+        this.nodesFilter = nodesFilter;\n+    }\n+\n+    public ReteDumper(String ruleName) {\n+        this( node -> Stream.of( node.getAssociatedRules() ).anyMatch( rule -> rule.getName().equals( ruleName ) ) );\n+    }\n+\n+    public PrintWriter getWriter() {\n+        return writer;\n+    }\n+\n+    /**\n+     * Set a writer to which ReteDumper prints results. By default, results will be printed to STDOUT\n+     * @param writer\n+     */\n+    public void setWriter(PrintWriter writer) {\n+        this.writer = writer;\n+    }\n+\n+    public boolean isNodeInfoOnly() {\n+        return nodeInfoOnly;\n+    }\n+\n+    /**\n+     * If true, dump without partition/mask information. Default value is false\n+     * @param nodeInfoOnly\n+     */\n+    public void setNodeInfoOnly(boolean nodeInfoOnly) {\n+        this.nodeInfoOnly = nodeInfoOnly;\n+    }\n+\n+    public static void dumpRete(KieBase kbase ) {\n+        new ReteDumper().dump((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public static void dumpRete(KieRuntime session ) {\n+        new ReteDumper().dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static void dumpRete(KieSession session) {\n+        new ReteDumper().dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static void dumpRete(InternalKnowledgeBase kBase) {\n+        new ReteDumper().dump(kBase.getRete());\n+    }\n+\n+    public static void dumpRete(Rete rete) {\n+        new ReteDumper().dump(rete);\n+    }\n+\n+    public void dump(KieBase kbase ) {\n+        dump((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public void dump(KieRuntime session ) {\n+        dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public void dump(KieSession session) {\n+        dump((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public void dump(InternalKnowledgeBase kBase) {\n+        dump(kBase.getRete());\n+    }\n+\n+    public void dump(Rete rete) {\n+        // Other dump/dumpRete methods eventually call this method\n+        sb = new StringBuilder();\n+        traverseRete(rete, this::dumpNode);\n+        printResults();\n+    }\n+\n+    private void printResults() {\n+        if (writer == null) {\n+            System.out.print(sb.toString());\n+        } else {\n+            // if a writer is given by a caller, the caller is responsible for closing\n+            writer.print(sb.toString());\n+        }\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieBase kbase ) {\n+        return new ReteDumper().collect((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieRuntime session ) {\n+        return new ReteDumper().collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static Set<BaseNode> collectRete(KieSession session) {\n+        return new ReteDumper().collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public static Set<BaseNode> collectRete(InternalKnowledgeBase kBase) {\n+        return new ReteDumper().collect(kBase.getRete());\n+    }\n+\n+    public static Set<BaseNode> collectRete(Rete rete) {\n+        return new ReteDumper().collect(rete);\n+    }\n+\n+    public Set<BaseNode> collect(KieBase kbase ) {\n+        return collect((InternalKnowledgeBase) kbase);\n+    }\n+\n+    public Set<BaseNode> collect(KieRuntime session ) {\n+        return collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public Set<BaseNode> collect(KieSession session) {\n+        return collect((InternalKnowledgeBase)session.getKieBase());\n+    }\n+\n+    public Set<BaseNode> collect(InternalKnowledgeBase kBase) {\n+        return collect(kBase.getRete());\n+    }\n+\n+    public Set<BaseNode> collect(Rete rete) {\n+        Set<BaseNode> nodes = createIdentitySet();\n+        traverseRete(rete, (node, s) -> nodes.add(node));\n+        return nodes;\n+    }\n+\n+    public void traverseRete(Rete rete, BiConsumer<BaseNode, String> consumer) {\n+        for (EntryPointNode entryPointNode : rete.getEntryPointNodes().values()) {\n+            dumpNode( entryPointNode, \"\", createIdentitySet(), consumer);\n+        }\n+    }\n+\n+    private <T> Set<T> createIdentitySet() {\n+        return Collections.newSetFromMap(new IdentityHashMap<>());\n+    }\n+\n+    private void dumpNode( BaseNode node, String ident, Set<BaseNode> visitedNodes, BiConsumer<BaseNode, String> consumer ) {\n+        consumer.accept( node, ident );\n+        if (!visitedNodes.add( node )) {\n+            return;\n+        }\n+        Sink[] sinks = node.getSinks();\n+        if (sinks != null) {\n+            for (Sink sink : sinks) {\n+                if (sink instanceof BaseNode) {\n+                    BaseNode sinkNode = ( BaseNode ) sink;\n+                    if ( nodesFilter.test( sinkNode ) ) {\n+                        dumpNode( sinkNode, ident + \"  \", visitedNodes, consumer );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void dumpNode( BaseNode node, String ident ) {\n+        sb.append(ident + formatNode(node));\n+        if (!nodeInfoOnly) {\n+            sb.append(\" on \" + node.getPartitionId());\n+            try {\n+                Object declaredMask = node.getClass().getMethod(\"getDeclaredMask\").invoke(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c6660fd9a667bf0bc5cb67a505a094cab0664c3"}, "originalPosition": 216}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1535, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}