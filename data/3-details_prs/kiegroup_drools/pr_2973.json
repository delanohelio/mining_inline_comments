{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzOTg3NzMx", "number": 2973, "title": "Drools 5473 - Implement DefineFunction scheleton", "bodyText": "@danielezonca @mariofusco @jiripetrlik\nsee https://issues.redhat.com/browse/DROOLS-5473\nOverall:\n\nActual method creation is delegated to ExpressionFunctionUtils\nmethod creation is composed of three step:\n2.1 Body creation (variable declaration and population)\n2.2 Return creation\n2.3 Method definition\nDerivedFields method names are autogenerated, and methods are referenced insde \"transformations\" map\nDefineFunctions method names are the ones declared in the DefineFunction itself\nthe Apply expression is responsible to invoke DefineFunctions methods\nCurrently supported expressions (partially) are Apply, Constant and FieldRef\nThis PR is still a partial implementation - actual behavior on final integration tests is not verified", "createdAt": "2020-07-03T10:38:51Z", "url": "https://github.com/kiegroup/drools/pull/2973", "merged": true, "mergeCommit": {"oid": "31fb5ca279406cdadad0c926f0962e6ccd6ef4e0"}, "closed": true, "closedAt": "2020-07-03T14:06:03Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 76, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZbS8XgH2gAyNDQzOTg3NzMxOmU2NGVmNjFhODU2MWY1Y2QzNDI0OGU5OGRmM2IyZTFkNDgzNDUwZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxTGUQAFqTQ0MjM5Nzc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e64ef61a8561f5cd34248e98df3b2e1d483450dc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e64ef61a8561f5cd34248e98df3b2e1d483450dc", "committedDate": "2020-04-20T09:02:19Z", "message": "[DROOLS-5247] Implemented/propagate Transformation Map (to be populated)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2213dbb4caeb745e377cb7baa813a911ed0aae92", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2213dbb4caeb745e377cb7baa813a911ed0aae92", "committedDate": "2020-04-20T09:03:33Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0310b667ce6c8f6cc92720c750d9d61558494338", "committedDate": "2020-06-04T10:24:17Z", "message": "[Drools-5373] Refactored PMMLAssembler - implemented two delegates PMMLCompilerService and PMMLLoaderService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3ac318ed0ac6edce90a020807c85146675c5cf", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6d3ac318ed0ac6edce90a020807c85146675c5cf", "committedDate": "2020-06-05T10:06:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2badfe14a34ed998f036b866cf8a94b3ad2efe42", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2badfe14a34ed998f036b866cf8a94b3ad2efe42", "committedDate": "2020-06-05T11:42:15Z", "message": "[DROOLS-5372] Implement dynamic ResourceType switch inside PMMLAssemblerService(s)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eab522b04d70abe69e173f9acf834ea13d24cdd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7eab522b04d70abe69e173f9acf834ea13d24cdd", "committedDate": "2020-06-05T11:43:25Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3f2e54864708e535bcd3f317323acca93c14b9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0d3f2e54864708e535bcd3f317323acca93c14b9", "committedDate": "2020-06-05T13:08:37Z", "message": "[DROOLS-5372] Using PMMLConstants for system property retrieval/setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea3d3c2399c6eb18b9f914d63cc0ec48a2974a0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7ea3d3c2399c6eb18b9f914d63cc0ec48a2974a0", "committedDate": "2020-06-08T08:54:50Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5676276eeaa963be72a67a71d7a1911469a9899", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a5676276eeaa963be72a67a71d7a1911469a9899", "committedDate": "2020-06-08T11:07:36Z", "message": "[DROOLS-5372] Implementing  AbstractDMNKiePMMLInvocationEvaluator and DMNKiePMMLNewInvocationEvaluator. Refactored DMNKiePMMLInvocationEvaluator. Implement switch between them inside AbstractPMMLInvocationEvaluator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74915ee8ccdb0ae9b5f17fa488b8234e60c12d3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a74915ee8ccdb0ae9b5f17fa488b8234e60c12d3", "committedDate": "2020-06-08T16:07:11Z", "message": "[DROOLS-5372] Fixing bug with nested node containing only a True predicate. Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0beb8528e5f0ae06c26e3cc9ed8cdf79435918", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9a0beb8528e5f0ae06c26e3cc9ed8cdf79435918", "committedDate": "2020-06-09T14:55:58Z", "message": "[DROOLS-5372] Working on DMN-PMML implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14623a16993cf0f3b887a976faebbcfe7791c67", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f14623a16993cf0f3b887a976faebbcfe7791c67", "committedDate": "2020-06-10T10:19:42Z", "message": "[DROOLS-5423] Declaring glassfish jaxb-runtime dependency for JDK >= 11 to maintain compiler functionality in such environments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848624b1a9ba09597b50c2002df702c507421bde", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/848624b1a9ba09597b50c2002df702c507421bde", "committedDate": "2020-06-11T07:27:14Z", "message": "[DROOLS-5372] Add specific message for missing PMML result. Working on tests (currently broken when run together)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb07adcb468e27eff2c087ed61e8d657360772a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/aeb07adcb468e27eff2c087ed61e8d657360772a", "committedDate": "2020-06-11T07:32:38Z", "message": "Merge branch 'master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628aee3515caf031794523f89222ebef64c9bc0a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/628aee3515caf031794523f89222ebef64c9bc0a", "committedDate": "2020-06-11T15:38:13Z", "message": "[DROOLS-5258] Working with tests. Currently broken if DMNTreePMMLTest and DMNTreePMMLNewImplTest run concurrently.\nLOT of System.out.println to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6240cf6317fdee876a085f5eb17fbfe347abe2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4f6240cf6317fdee876a085f5eb17fbfe347abe2", "committedDate": "2020-06-11T15:38:59Z", "message": "[DROOLS-5372] Working with tests. Currently broken if DMNTreePMMLTest and DMNTreePMMLNewImplTest run concurrently.\nLOT of System.out.println to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4e925f944f3b3485ad71e8e21c66f53c1e8fed", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9d4e925f944f3b3485ad71e8e21c66f53c1e8fed", "committedDate": "2020-06-11T15:39:38Z", "message": "Merge branch 'DROOLS-5372' of github.com:gitgabrio/drools into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02673158812e720c1e1862d4379c2e9980cc1f81", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/02673158812e720c1e1862d4379c2e9980cc1f81", "committedDate": "2020-06-15T15:03:36Z", "message": "[DROOLS-5372] Implemented reset workaround"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623f03f6b59d4baae90e927b207cae9f982beceb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/623f03f6b59d4baae90e927b207cae9f982beceb", "committedDate": "2020-06-15T15:43:00Z", "message": "[DROOLS-5372] Fixed DMN-PMML tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df529ffbbdfd8a55f8b4ad5e8774067752529808", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/df529ffbbdfd8a55f8b4ad5e8774067752529808", "committedDate": "2020-06-16T08:04:34Z", "message": "[DROOLS-5372] Replaced ContextClassLoader.loadClass(...) with Class.forName(...)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78156d8aaf79d5949db204458805b64351bb2eca", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/78156d8aaf79d5949db204458805b64351bb2eca", "committedDate": "2020-06-16T08:56:01Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4062f6999a4a4553bfa4fc7b3cc32fd292ad03f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d4062f6999a4a4553bfa4fc7b3cc32fd292ad03f", "committedDate": "2020-06-16T08:59:24Z", "message": "Merge branch 'DROOLS-5372' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/PMMLTreeModelEvaluatorTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/src/test/java/org/kie/pmml/models/drools/tree/tests/AbstractPMMLTreeTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/AbstractPMMLRegressionTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LogisticRegressionNoneNormalizationTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/NormalizationMethodsRegressionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4acfbcf1ce39ac844f46e13bbc6588c4b973bea", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b4acfbcf1ce39ac844f46e13bbc6588c4b973bea", "committedDate": "2020-06-19T10:12:03Z", "message": "[DROOLS-5247] Begin modifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd4bb69b24c178eeddcc994fe95a1c4463a41ac4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/dd4bb69b24c178eeddcc994fe95a1c4463a41ac4", "committedDate": "2020-06-22T15:28:55Z", "message": "Merge branch 'master' into DROOLS-5247\n\n# Conflicts:\n#\tkie-dmn/kie-dmn-core/pom.xml\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractDMNKiePMMLInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractPMMLInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLNewInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/util/KieHelper.java\n#\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/pmml/DMNTreePMMLNewImplTest.java\n#\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/util/DMNRuntimeUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d010ecdd96e80846fd5fb00d07f7e14936809e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/50d010ecdd96e80846fd5fb00d07f7e14936809e", "committedDate": "2020-06-22T15:30:19Z", "message": "[DROOLS-5247] Removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a162ead002405e8762b88ef681eb2f58a98b5d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/85a162ead002405e8762b88ef681eb2f58a98b5d", "committedDate": "2020-06-23T16:43:11Z", "message": "[DROOLS-5448] Add TransformationDictionary to \"compiler\" stack methods. Implemented transformations flow inside Runtime."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945486ac4696ad6a05bcced78e98fd86b3ab9149", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/945486ac4696ad6a05bcced78e98fd86b3ab9149", "committedDate": "2020-06-23T16:51:09Z", "message": "[DROOLS-5247] Begin implementation of actual Transformation management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64bae84f6727c1d258a9ee9208bb4b087a1652be", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/64bae84f6727c1d258a9ee9208bb4b087a1652be", "committedDate": "2020-06-23T16:53:07Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5448' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetrieverTest.java\n#\tkie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/mocks/TestingModelImplementationProvider.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "committedDate": "2020-06-24T08:19:50Z", "message": "[DROOLS-5448] Make all parameters \"final\" in modified classes. Fixed local transformations logic inside PMMLRuntimeImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf24e7ad6d2f45ebcf43b83c6bd068a58d8099c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2cf24e7ad6d2f45ebcf43b83c6bd068a58d8099c", "committedDate": "2020-06-24T08:27:49Z", "message": "[DROOLS-5448] Return unmodifiable maps from PMMLContextImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1f362154ad35a3f6993680a85e594bcf41b7b2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8c1f362154ad35a3f6993680a85e594bcf41b7b2", "committedDate": "2020-06-24T08:33:03Z", "message": "[DROOLS-5247] Invoking populateTransformationsInConstructor from models factories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eafe68b0bbf3bc77e7b128e41382169e5aee0367", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/eafe68b0bbf3bc77e7b128e41382169e5aee0367", "committedDate": "2020-06-24T08:33:42Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5448' into DROOLS-5247"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1bf2a4eea08f137b4c2bae70348f9fdea6067f8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b1bf2a4eea08f137b4c2bae70348f9fdea6067f8", "committedDate": "2020-06-24T15:28:27Z", "message": "[DROOLS-5247] Renamed for consistence with current module name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5491ef81ef3e0a94f246686557132d61aacf92eb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5491ef81ef3e0a94f246686557132d61aacf92eb", "committedDate": "2020-06-25T13:08:25Z", "message": "[DROOLS-5247] Begin implementation of codegen for specific Expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33fb044a708c737e128467796b98301edd5d1626", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/33fb044a708c737e128467796b98301edd5d1626", "committedDate": "2020-06-25T13:16:09Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e0a6f50654af942f9cee19d060032422c8e21b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/43e0a6f50654af942f9cee19d060032422c8e21b", "committedDate": "2020-06-25T16:08:49Z", "message": "[DROOLS-5247] Add Javadocs to illustrate generated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df336f9512ace14c7445cc58a0a0d9dcd4729047", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/df336f9512ace14c7445cc58a0a0d9dcd4729047", "committedDate": "2020-06-29T08:24:40Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db9fcb41ffe0a1b9ce5dfe0a6e684546e9773912", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/db9fcb41ffe0a1b9ce5dfe0a6e684546e9773912", "committedDate": "2020-06-29T14:10:28Z", "message": "[DROOLS-5247] Add method to CommonCodegenUtils. Update relevant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daf5cfe8741f0d347fc382ae233b3f6cb7ae5078", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/daf5cfe8741f0d347fc382ae233b3f6cb7ae5078", "committedDate": "2020-06-29T14:35:43Z", "message": "[DROOLS-5247] Add method to DerivedFieldFunctionUtils. Update relevant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6cbc84b58b6d669e81966f48af0bf1cb4b1dcc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cb6cbc84b58b6d669e81966f48af0bf1cb4b1dcc", "committedDate": "2020-06-29T15:02:00Z", "message": "[DROOLS-5247] Add new values to DATA_TYPE to match new DataType definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f4afc4e49ce42760d1ccb9583b507d177b4ad64", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2f4afc4e49ce42760d1ccb9583b507d177b4ad64", "committedDate": "2020-06-29T15:02:51Z", "message": "[DROOLS-5247] Implemented KiePMMLDerivedFieldASTFactory. Implemented KiePMMLDerivedFieldASTFactoryTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7299312e90bbc25498bda63af6e8fdaae43e295", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c7299312e90bbc25498bda63af6e8fdaae43e295", "committedDate": "2020-06-30T10:21:57Z", "message": "[DROOLS-5247] Add common methods to DroolsModelProvider. Implemented DroolsModelProviderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19783255705a993bf815c547fd7a89f639dbdbcc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/19783255705a993bf815c547fd7a89f639dbdbcc", "committedDate": "2020-06-30T12:11:31Z", "message": "[DROOLS-5247] Regression tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54be3a058d3a304cf4fed6d4919ab18a34de7e3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f54be3a058d3a304cf4fed6d4919ab18a34de7e3", "committedDate": "2020-06-30T12:20:41Z", "message": "[DROOLS-5247] Minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee5021c110dd393bb9834708e169b645858a8289", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ee5021c110dd393bb9834708e169b645858a8289", "committedDate": "2020-06-30T12:22:42Z", "message": "[DROOLS-5247] Add common methods to DroolsModelProvider. Implemented DroolsModelProviderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f27514d486344f839c79b820f185dadceddbb12b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f27514d486344f839c79b820f185dadceddbb12b", "committedDate": "2020-06-30T12:23:33Z", "message": "[DROOLS-5247] Add Scorecard/TreeModel integration tests with transformations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f681ceaa00a69afc3cf4391a6dd8fc544b253d1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2f681ceaa00a69afc3cf4391a6dd8fc544b253d1", "committedDate": "2020-06-30T12:28:29Z", "message": "[DROOLS-5247] Add MISSING_BODY_TEMPLATE constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e4d6eabded4830f1019b66931090db074e757f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/39e4d6eabded4830f1019b66931090db074e757f", "committedDate": "2020-06-30T13:38:13Z", "message": "[DROOLS-5247] Add Transformations management inside KiePMMLModelFactoryUtils. Implemented tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82113d325d5886c1b178b9062440310995c6cd00", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/82113d325d5886c1b178b9062440310995c6cd00", "committedDate": "2020-06-30T13:46:06Z", "message": "[DROOLS-5247] Add TransformationDictionary parameter inside KiePMMLModelRetriever methods. Implemented/updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4278c2c652071b0b3e52139f520162508a2ac22", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b4278c2c652071b0b3e52139f520162508a2ac22", "committedDate": "2020-06-30T14:25:07Z", "message": "[DROOLS-5247] Updated KiePMMLRegressionModelFactory. Implemented/updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ebc23060548efc3fe26a36a94dbbcc77345c48", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/11ebc23060548efc3fe26a36a94dbbcc77345c48", "committedDate": "2020-06-30T14:30:22Z", "message": "[DROOLS-5247] Avoid NPE inside KiePMMLRegressionTableClassificationFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a512c1ec61afbb42d68cbdabb5dae491be66ec8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7a512c1ec61afbb42d68cbdabb5dae491be66ec8", "committedDate": "2020-06-30T14:31:21Z", "message": "[DROOLS-5247] Removing MISSING_BODY_TEMPLATE and importing from Constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bab1cc472b1f05eba51e78cff569e0f8302e33", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/89bab1cc472b1f05eba51e78cff569e0f8302e33", "committedDate": "2020-06-30T14:52:05Z", "message": "[DROOLS-5247] Moved List<KiePMMLDroolsType> types population in DroolsModelProvider.getKiePMMLDroolsASTCommon. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7877fe90da73c6e9228d86fc635d3e14a3accfe", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a7877fe90da73c6e9228d86fc635d3e14a3accfe", "committedDate": "2020-06-30T14:52:38Z", "message": "[DROOLS-5247] Renaming/clean up tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb87da6de23f9dc9f440f1aec60744278e42af23", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cb87da6de23f9dc9f440f1aec60744278e42af23", "committedDate": "2020-06-30T15:15:58Z", "message": "[DROOLS-5247] Add transformations management inside KiePMMLScorecardModelFactory generated sources. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dac2c626760e2d20b1e2a2a99520d3725e42bce", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1dac2c626760e2d20b1e2a2a99520d3725e42bce", "committedDate": "2020-06-30T15:22:16Z", "message": "[DROOLS-5247] Add transformations management inside KiePMMLTreeModelFactory generated sources. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c5ceb3a8161218545c36f9aa1a40f466f53b356e", "committedDate": "2020-07-01T07:44:01Z", "message": "[DROOLS-5461] Fixing build/test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "781b3d9d8d9ec7fae304efc9f63ddc1d331e7405", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/781b3d9d8d9ec7fae304efc9f63ddc1d331e7405", "committedDate": "2020-07-01T09:45:17Z", "message": "[DROOLS-5461] Fixing as per PR review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7288ba2b02404cf695a5b68dfb9dd067587dcb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9d7288ba2b02404cf695a5b68dfb9dd067587dcb", "committedDate": "2020-07-01T11:55:51Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5461\n\n# Conflicts:\n#\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/pmml/DMNTreePMMLTrustyImplTest.java\n#\tkie-dmn/kie-dmn-pmml-tests-parent/kie-dmn-pmml-tests/src/test/java/org/kie/dmn/pmml/DMNTreePMMLTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca", "committedDate": "2020-07-01T13:43:42Z", "message": "[DROOLS-5461] Fixing merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d6416dbcd54db05512e9db0f775ad203f92baf", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/03d6416dbcd54db05512e9db0f775ad203f92baf", "committedDate": "2020-07-01T13:54:36Z", "message": "[DROOLS-5461] Removing extensions data types from DATA_TYPE. Fixed test that used them"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d77284655722c3ccdb37f6bad5bc5da0cb8fdd8b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d77284655722c3ccdb37f6bad5bc5da0cb8fdd8b", "committedDate": "2020-07-02T07:13:49Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtilsTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c881d4c0afe2cf369a5998e897ed76f394d435", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a2c881d4c0afe2cf369a5998e897ed76f394d435", "committedDate": "2020-07-02T08:38:10Z", "message": "[DROOLS-5472] Implemented ExpressionFunctionUtils. Removed \"method arity\" management from CommonCodeGenUtils. Implemented/updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f23e255089f5e06c7b97b76e19b4bd924165677", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6f23e255089f5e06c7b97b76e19b4bd924165677", "committedDate": "2020-07-02T12:10:07Z", "message": "[DROOLS-5473] Begin implementation of DefineFunctionUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f66e5db1f8500182963b7603923d921f9ab8c454", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f66e5db1f8500182963b7603923d921f9ab8c454", "committedDate": "2020-07-02T12:10:38Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5473"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd687ec9a033be754f454ed246f70371584dff6", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1bd687ec9a033be754f454ed246f70371584dff6", "committedDate": "2020-07-02T13:13:36Z", "message": "[DROOLS-5473] Refactored tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653541bd12d7e97d75d3adbac4b977b3741da59a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/653541bd12d7e97d75d3adbac4b977b3741da59a", "committedDate": "2020-07-02T14:00:26Z", "message": "[DROOLS-5473] Implemented CommonCodegenUtils.getReturnStmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55d9a6bbe9867783f629c2610b695d563465039", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e55d9a6bbe9867783f629c2610b695d563465039", "committedDate": "2020-07-02T16:08:53Z", "message": "[DROOLS-5473] Split ExpressionFunctionUtils MethodDeclaration getters in sub methods. Moving code to common classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37ead0c37dd64faa7503cab1f69d0f32c5c09e2e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/37ead0c37dd64faa7503cab1f69d0f32c5c09e2e", "committedDate": "2020-07-03T07:42:39Z", "message": "[DROOLS-5473] Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c554b50419258f38f3a869b41f95cfe6a9e128", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/88c554b50419258f38f3a869b41f95cfe6a9e128", "committedDate": "2020-07-03T09:53:12Z", "message": "[DROOLS-5473] Implementing Apply expression. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/37d5fb3d62a91ae32fa0205a3240dc0827b0538d", "committedDate": "2020-07-03T10:30:12Z", "message": "[DROOLS-5473] Fixing function method invocation. Updated tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzI0NzMw", "url": "https://github.com/kiegroup/drools/pull/2973#pullrequestreview-442324730", "createdAt": "2020-07-03T10:42:38Z", "commit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDo0MjozOFrOGssRLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTowMjoxN1rOGssxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxNTgyMA==", "bodyText": "Can you please remove this print or replace it with an assertion?", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449515820", "createdAt": "2020-07-03T10:42:38Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtilsTest.java", "diffHunk": "@@ -86,6 +86,7 @@ public void addTransformationsInClassOrInterfaceDeclaration() {\n         model.getLocalTransformations().getDerivedFields().forEach(derivedField -> commonVerifyDerivedFieldTransformation(derivedField, null, \"localTransformationsMap\"));\n         commonVerifyConstructorClass(\"commonTransformationsMap\");\n         commonVerifyConstructorClass(\"localTransformationsMap\");\n+        System.out.println(classOrInterfaceDeclaration.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxNjcxNA==", "bodyText": "What about rename it as getBoxedClassName? I think it is enough to explicit that in case of primitive type, it will be replaced with boxed class", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449516714", "createdAt": "2020-07-03T10:44:42Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -150,4 +154,23 @@ public static DATA_TYPE getDataType(DataDictionary dataDictionary, String target\n                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()));\n         return toReturn.orElseThrow(() -> new KiePMMLInternalException(String.format(\"Failed to find DataType for field %s\", targetFieldName)));\n     }\n+\n+    /**\n+     * Retrieve the <b>mapped</b> class name of the given <code>ParameterField</code>, <b>eventually</b> boxed (for primitive ones)\n+     * @param parameterField\n+     * @return\n+     */\n+    public static String getEventuallyBoxedClassName(ParameterField parameterField) {\n+        return  parameterField.getDataType() == null ? Object.class.getName() : getEventuallyBoxedClassName(parameterField.getDataType());\n+    }\n+\n+    /**\n+     * Retrieve the <b>mapped</b> class name of the given <code>DataType</code>, <b>eventually</b> boxed (for primitive ones)\n+     * @param dataType\n+     * @return\n+     */\n+    public static String getEventuallyBoxedClassName(DataType dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxODEzMw==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449518133", "createdAt": "2020-07-03T10:47:51Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtils.java", "diffHunk": "@@ -162,95 +393,112 @@ static MethodDeclaration getFieldRefExpressionMethodDeclaration(final String met\n         // kiePMMLNameValue.map(KiePMMLNameValue::getValue).orElse( (fieldRef.getMapMissingTo() )\n         MethodCallExpr expression = new MethodCallExpr(\"orElse\");\n         expression.setScope(expressionScope);\n-        com.github.javaparser.ast.expr.Expression orElseExpression =  fieldRef.getMapMissingTo() != null ? new StringLiteralExpr(fieldRef.getMapMissingTo()) : new NullLiteralExpr();\n+        com.github.javaparser.ast.expr.Expression orElseExpression = fieldRef.getMapMissingTo() != null ? new StringLiteralExpr(fieldRef.getMapMissingTo()) : new NullLiteralExpr();\n         expression.setArguments(NodeList.nodeList(orElseExpression));\n \n-        // return kiePMMLNameValue.map(KiePMMLNameValue::getValue).orElse( (fieldRef.getMapMissingTo() )\n-        ReturnStmt returnStmt = new ReturnStmt();\n-        returnStmt.setExpression(expression);\n-        body.addStatement(returnStmt);\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n+        // Object variableName = kiePMMLNameValue.map(KiePMMLNameValue::getValue).orElse( (fieldRef.getMapMissingTo() )\n+        VariableDeclarator variableDeclarator = new VariableDeclarator();\n         ClassOrInterfaceType classOrInterfaceType = parseClassOrInterfaceType(Object.class.getName());\n-        toReturn.setType(classOrInterfaceType);\n-        toReturn.setBody(body);\n+        variableDeclarator.setType(classOrInterfaceType);\n+        variableDeclarator.setName(variableName);\n+        variableDeclarator.setInitializer(expression);\n+        VariableDeclarationExpr variableDeclarationExpr = new VariableDeclarationExpr();\n+        variableDeclarationExpr.setVariables(NodeList.nodeList(variableDeclarator));\n+        toReturn.addStatement(variableDeclarationExpr);\n+\n         return toReturn;\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param lag\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getLagExpressionMethodDeclaration(final String methodName, final Lag lag, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getLagExpressionBlockStmt(final String variableName, final Lag lag,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"Lag not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param mapValues\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getMapValuesExpressionMethodDeclaration(final String methodName, final MapValues mapValues, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getMapValuesExpressionBlockStmt(final String variableName, final MapValues mapValues,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"MapValues not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param normContinuous\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getNormContinuousExpressionMethodDeclaration(final String methodName, final NormContinuous normContinuous, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getNormContinuousExpressionBlockStmt(final String variableName, final NormContinuous normContinuous,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"NormContinuous not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     *\n+     * @param variableName\n      * @param normDiscrete\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getNormDiscreteExpressionMethodDeclaration(final String methodName, final NormDiscrete normDiscrete, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getNormDiscreteExpressionBlockStmt(final String variableName, final NormDiscrete normDiscrete, final ClassOrInterfaceType returnedType,  final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"NormDiscrete not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param textIndex\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getTextIndexExpressionMethodDeclaration(final String methodName, final TextIndex textIndex, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getTextIndexExpressionBlockStmt(final String variableName, final TextIndex textIndex,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"TextIndex not managed, yet\");\n     }\n \n-\n     /**\n      * Return\n      * <pre>\n-     *     empty  methodName(List<KiePMMLNameValue> param1) {\n+     *     (<i>returnedType</i>)  (<i>methodName</i>)(List<KiePMMLNameValue> param1) {\n+     *              <i>body</i>\n+     *              return <i>variableName</i>;\n      *     }\n      * </pre>\n-     * \n      * @param methodName\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getExpressionMethodDeclaration(final String methodName, final List<ClassOrInterfaceType> parameterTypes) {\n-        return getMethodDeclaration(methodName, parameterTypes);\n-    }\n-\n+    /**\n+     *\n+     * @param methodName\n+     * @param variableName\n+     * @param body\n+     * @param returnedType\n+     * @param parameterTypes\n+     * @return\n+     */\n+    static MethodDeclaration getExpressionMethodDeclaration(final String methodName, final String variableName, final BlockStmt body, final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+//        return getMethodDeclaration(methodName, parameterTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "originalPosition": 541}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMzc3Mg==", "bodyText": "I think it is more readable just to catch KiePMMLException with an empty block. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449523772", "createdAt": "2020-07-03T11:01:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/DefineFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.DefineFunction;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.ParameterField;\n+import org.dmg.pmml.TextIndex;\n+import org.dmg.pmml.Visitor;\n+import org.dmg.pmml.VisitorAction;\n+import org.junit.Test;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.pmml.compiler.commons.testutils.PMMLModelTestUtils.getParameterFields;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.applySupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.constantSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.fieldRefSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.supportedExpressionSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.unsupportedExpressionSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getEventuallyBoxedClassName;\n+\n+public class DefineFunctionUtilsTest {\n+\n+    private static final Function<Supplier<Expression>, DefineFunction> defineFunctionCreator = supplier -> {\n+        Expression expression = supplier.get();\n+        DefineFunction defineFunction = new DefineFunction();\n+        defineFunction.setName(\"DEFINE_FUNCTION_\" + expression.getClass().getSimpleName());\n+        defineFunction.setExpression(expression);\n+        return defineFunction;\n+    };\n+\n+    @Test(expected = KiePMMLException.class)\n+    public void getDefineFunctionsMethodMapUnsupportedExpression() {\n+        List<DefineFunction> defineFunctions = unsupportedExpressionSupplier.stream().map(defineFunctionCreator).collect(Collectors.toList());\n+        DefineFunctionUtils.getDefineFunctionsMethodMap(defineFunctions);\n+    }\n+\n+    @Test\n+    public void getDefineFunctionsMethodMapSupportedExpression() {\n+        List<DefineFunction> defineFunctions = supportedExpressionSupplier.stream().map(defineFunctionCreator).collect(Collectors.toList());\n+        Map<String, MethodDeclaration> retrieved = DefineFunctionUtils.getDefineFunctionsMethodMap(defineFunctions);\n+        assertEquals(defineFunctions.size(), retrieved.size());\n+    }\n+\n+    @Test\n+    public void getDefineFunctionMethodDeclarationUnsupportedExpression() {\n+        for (Supplier<Expression> supplier : unsupportedExpressionSupplier) {\n+            DefineFunction defineFunction = defineFunctionCreator.apply(supplier);\n+            try {\n+                DefineFunctionUtils.getDefineFunctionMethodDeclaration(defineFunction);\n+                fail(String.format(\"Expecting KiePMMLException for %s\", defineFunction));\n+            } catch (Exception e) {\n+                assertTrue(e instanceof KiePMMLException);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNDAxNA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449524014", "createdAt": "2020-07-03T11:02:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/DefineFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.DefineFunction;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.ParameterField;\n+import org.dmg.pmml.TextIndex;\n+import org.dmg.pmml.Visitor;\n+import org.dmg.pmml.VisitorAction;\n+import org.junit.Test;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.pmml.compiler.commons.testutils.PMMLModelTestUtils.getParameterFields;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.applySupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.constantSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.fieldRefSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.supportedExpressionSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.unsupportedExpressionSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getEventuallyBoxedClassName;\n+\n+public class DefineFunctionUtilsTest {\n+\n+    private static final Function<Supplier<Expression>, DefineFunction> defineFunctionCreator = supplier -> {\n+        Expression expression = supplier.get();\n+        DefineFunction defineFunction = new DefineFunction();\n+        defineFunction.setName(\"DEFINE_FUNCTION_\" + expression.getClass().getSimpleName());\n+        defineFunction.setExpression(expression);\n+        return defineFunction;\n+    };\n+\n+    @Test(expected = KiePMMLException.class)\n+    public void getDefineFunctionsMethodMapUnsupportedExpression() {\n+        List<DefineFunction> defineFunctions = unsupportedExpressionSupplier.stream().map(defineFunctionCreator).collect(Collectors.toList());\n+        DefineFunctionUtils.getDefineFunctionsMethodMap(defineFunctions);\n+    }\n+\n+    @Test\n+    public void getDefineFunctionsMethodMapSupportedExpression() {\n+        List<DefineFunction> defineFunctions = supportedExpressionSupplier.stream().map(defineFunctionCreator).collect(Collectors.toList());\n+        Map<String, MethodDeclaration> retrieved = DefineFunctionUtils.getDefineFunctionsMethodMap(defineFunctions);\n+        assertEquals(defineFunctions.size(), retrieved.size());\n+    }\n+\n+    @Test\n+    public void getDefineFunctionMethodDeclarationUnsupportedExpression() {\n+        for (Supplier<Expression> supplier : unsupportedExpressionSupplier) {\n+            DefineFunction defineFunction = defineFunctionCreator.apply(supplier);\n+            try {\n+                DefineFunctionUtils.getDefineFunctionMethodDeclaration(defineFunction);\n+                fail(String.format(\"Expecting KiePMMLException for %s\", defineFunction));\n+            } catch (Exception e) {\n+                assertTrue(e instanceof KiePMMLException);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getDefineFunctionMethodDeclarationSupportedExpression() {\n+        for (Supplier<Expression> supplier : supportedExpressionSupplier) {\n+            DefineFunction defineFunction = defineFunctionCreator.apply(supplier);\n+            try {\n+                DefineFunctionUtils.getDefineFunctionMethodDeclaration(defineFunction);\n+            } catch (Exception e) {\n+                fail(String.format(\"Unexpected %s for %s\", e, defineFunction.getExpression().getClass()));\n+            }\n+        }\n+    }\n+\n+    @Test(expected = KiePMMLException.class)\n+    public void getDefineFunctionMethodDeclarationWithoutExpression() {\n+        DefineFunctionUtils.getDefineFunctionMethodDeclaration(new DefineFunction());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getExpressionMethodDeclarationUnknownExpression() {\n+        Expression expression = new Expression() {\n+            @Override\n+            public VisitorAction accept(Visitor visitor) {\n+                return null;\n+            }\n+        };\n+        DefineFunctionUtils.getExpressionMethodDeclaration(\"\", expression, Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void getExpressionMethodDeclarationUnsupportedExpression() {\n+        for (Supplier<Expression> supplier : unsupportedExpressionSupplier) {\n+            Expression expression = supplier.get();\n+            try {\n+                DefineFunctionUtils.getExpressionMethodDeclaration(\"\", expression, Collections.emptyList());\n+                fail(String.format(\"Expecting KiePMMLException for %s\", expression.getClass()));\n+            } catch (Exception e) {\n+                assertTrue(e instanceof KiePMMLException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNDA1OA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449524058", "createdAt": "2020-07-03T11:02:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/DefineFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.DefineFunction;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.ParameterField;\n+import org.dmg.pmml.TextIndex;\n+import org.dmg.pmml.Visitor;\n+import org.dmg.pmml.VisitorAction;\n+import org.junit.Test;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.pmml.compiler.commons.testutils.PMMLModelTestUtils.getParameterFields;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.applySupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.constantSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.fieldRefSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.supportedExpressionSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtilsTest.unsupportedExpressionSupplier;\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getEventuallyBoxedClassName;\n+\n+public class DefineFunctionUtilsTest {\n+\n+    private static final Function<Supplier<Expression>, DefineFunction> defineFunctionCreator = supplier -> {\n+        Expression expression = supplier.get();\n+        DefineFunction defineFunction = new DefineFunction();\n+        defineFunction.setName(\"DEFINE_FUNCTION_\" + expression.getClass().getSimpleName());\n+        defineFunction.setExpression(expression);\n+        return defineFunction;\n+    };\n+\n+    @Test(expected = KiePMMLException.class)\n+    public void getDefineFunctionsMethodMapUnsupportedExpression() {\n+        List<DefineFunction> defineFunctions = unsupportedExpressionSupplier.stream().map(defineFunctionCreator).collect(Collectors.toList());\n+        DefineFunctionUtils.getDefineFunctionsMethodMap(defineFunctions);\n+    }\n+\n+    @Test\n+    public void getDefineFunctionsMethodMapSupportedExpression() {\n+        List<DefineFunction> defineFunctions = supportedExpressionSupplier.stream().map(defineFunctionCreator).collect(Collectors.toList());\n+        Map<String, MethodDeclaration> retrieved = DefineFunctionUtils.getDefineFunctionsMethodMap(defineFunctions);\n+        assertEquals(defineFunctions.size(), retrieved.size());\n+    }\n+\n+    @Test\n+    public void getDefineFunctionMethodDeclarationUnsupportedExpression() {\n+        for (Supplier<Expression> supplier : unsupportedExpressionSupplier) {\n+            DefineFunction defineFunction = defineFunctionCreator.apply(supplier);\n+            try {\n+                DefineFunctionUtils.getDefineFunctionMethodDeclaration(defineFunction);\n+                fail(String.format(\"Expecting KiePMMLException for %s\", defineFunction));\n+            } catch (Exception e) {\n+                assertTrue(e instanceof KiePMMLException);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getDefineFunctionMethodDeclarationSupportedExpression() {\n+        for (Supplier<Expression> supplier : supportedExpressionSupplier) {\n+            DefineFunction defineFunction = defineFunctionCreator.apply(supplier);\n+            try {\n+                DefineFunctionUtils.getDefineFunctionMethodDeclaration(defineFunction);\n+            } catch (Exception e) {\n+                fail(String.format(\"Unexpected %s for %s\", e, defineFunction.getExpression().getClass()));\n+            }\n+        }\n+    }\n+\n+    @Test(expected = KiePMMLException.class)\n+    public void getDefineFunctionMethodDeclarationWithoutExpression() {\n+        DefineFunctionUtils.getDefineFunctionMethodDeclaration(new DefineFunction());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getExpressionMethodDeclarationUnknownExpression() {\n+        Expression expression = new Expression() {\n+            @Override\n+            public VisitorAction accept(Visitor visitor) {\n+                return null;\n+            }\n+        };\n+        DefineFunctionUtils.getExpressionMethodDeclaration(\"\", expression, Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void getExpressionMethodDeclarationUnsupportedExpression() {\n+        for (Supplier<Expression> supplier : unsupportedExpressionSupplier) {\n+            Expression expression = supplier.get();\n+            try {\n+                DefineFunctionUtils.getExpressionMethodDeclaration(\"\", expression, Collections.emptyList());\n+                fail(String.format(\"Expecting KiePMMLException for %s\", expression.getClass()));\n+            } catch (Exception e) {\n+                assertTrue(e instanceof KiePMMLException);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getExpressionMethodDeclarationSupportedExpression() {\n+        for (Supplier<Expression> supplier : supportedExpressionSupplier) {\n+            Expression expression = supplier.get();\n+            try {\n+                DefineFunctionUtils.getExpressionMethodDeclaration(\"METHOD_NAME\", expression, Collections.emptyList());\n+            } catch (Exception e) {\n+                fail(String.format(\"Unexpected %s for %s\", e, expression.getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d5fb3d62a91ae32fa0205a3240dc0827b0538d"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aac7cd11fcb6d381227539f725cae48509533526", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/aac7cd11fcb6d381227539f725cae48509533526", "committedDate": "2020-07-03T11:51:09Z", "message": "[DROOLS-5473] Fixed as per PR review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa6b069153c5cf498fe4452215f0a75af662988", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0aa6b069153c5cf498fe4452215f0a75af662988", "committedDate": "2020-07-03T12:29:35Z", "message": "[DROOLS-5473] Fixing assertion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzgxODc2", "url": "https://github.com/kiegroup/drools/pull/2973#pullrequestreview-442381876", "createdAt": "2020-07-03T12:33:05Z", "commit": {"oid": "0aa6b069153c5cf498fe4452215f0a75af662988"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzk3Nzk0", "url": "https://github.com/kiegroup/drools/pull/2973#pullrequestreview-442397794", "createdAt": "2020-07-03T13:01:16Z", "commit": {"oid": "0aa6b069153c5cf498fe4452215f0a75af662988"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMToxN1rOGsvsZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMjoyNVrOGsvuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MTk0Mw==", "bodyText": "I still don't like such long lines. Can we split this stream to multiple lines?", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449571943", "createdAt": "2020-07-03T13:01:17Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DefineFunctionUtils.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DefineFunction;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.ParameterField;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtils.getApplyExpressionMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtils.getConstantExpressionMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.ExpressionFunctionUtils.getFieldRefExpressionMethodDeclaration;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DefineFunction</code>s\n+ */\n+public class DefineFunctionUtils {\n+\n+    private DefineFunctionUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    static Map<String, MethodDeclaration> getDefineFunctionsMethodMap(final List<DefineFunction> defineFunctions) {\n+        Map<String, MethodDeclaration> toReturn = new HashMap<>();\n+        defineFunctions.forEach(defineFunction ->\n+                                        toReturn.put(defineFunction.getName(),\n+                                                     getDefineFunctionMethodDeclaration(defineFunction)));\n+        return toReturn;\n+    }\n+\n+    static MethodDeclaration getDefineFunctionMethodDeclaration(final DefineFunction defineFunction) {\n+        final Expression expression = defineFunction.getExpression();\n+        if (expression != null) {\n+            return getExpressionMethodDeclaration(defineFunction.getName(), expression, defineFunction.getParameterFields());\n+        } else {\n+            throw new KiePMMLException(\"Define Function without Expression are not supported, yet\");\n+        }\n+    }\n+\n+    /**\n+     * @param methodName\n+     * @param expression\n+     * @param parameterFields\n+     * @return\n+     */\n+    static MethodDeclaration getExpressionMethodDeclaration(final String methodName, final Expression expression, List<ParameterField> parameterFields) {\n+        List<ClassOrInterfaceType> parametersClassOrInterfaces = getClassOrInterfaceTypes(parameterFields);\n+        parametersClassOrInterfaces.add(0, getTypedClassOrInterfaceType(List.class.getName(), Collections.singletonList(KiePMMLNameValue.class.getName())));\n+        if (expression instanceof Aggregate) {\n+            return getAggregatedMethodDeclaration(methodName, (Aggregate) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof Apply) {\n+            return getApplyMethodDeclaration(methodName, (Apply) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof Constant) {\n+            return getConstantMethodDeclaration(methodName, (Constant) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof Discretize) {\n+            return getDiscretizeMethodDeclaration(methodName, (Discretize) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof FieldRef) {\n+            return getFieldRefMethodDeclaration(methodName, (FieldRef) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof Lag) {\n+            return getLagMethodDeclaration(methodName, (Lag) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof MapValues) {\n+            return getMapValuesMethodDeclaration(methodName, (MapValues) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof NormContinuous) {\n+            return getNormContinuousMethodDeclaration(methodName, (NormContinuous) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof NormDiscrete) {\n+            return getNormDiscreteMethodDeclaration(methodName, (NormDiscrete) expression, parametersClassOrInterfaces);\n+        } else if (expression instanceof TextIndex) {\n+            return getTextIndexMethodDeclaration(methodName, (TextIndex) expression, parametersClassOrInterfaces);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\"Expression %s not managed\", expression.getClass()));\n+        }\n+    }\n+\n+    /**\n+     * @param methodName\n+     * @param aggregate\n+     * @param parameterFields\n+     * @return\n+     */\n+    static MethodDeclaration getAggregatedMethodDeclaration(final String methodName, final Aggregate aggregate, List<ClassOrInterfaceType> parameterFields) {\n+        throw new KiePMMLException(\"Aggregate not managed, yet\");\n+    }\n+\n+    /**\n+     * @param methodName\n+     * @param apply\n+     * @param parameterFields\n+     * @return\n+     */\n+    static MethodDeclaration getApplyMethodDeclaration(final String methodName, final Apply apply, List<ClassOrInterfaceType> parameterFields) {\n+        return getApplyExpressionMethodDeclaration(methodName, apply, parameterFields);\n+    }\n+\n+    /**\n+     * Return\n+     * <pre>\n+     *     (<i>constant_type</i>) constant(<i>methodArity</i>))(List<KiePMMLNameValue> param1) {\n+     *     return (<i>constant_value</i>);\n+     * }\n+     * </pre>\n+     * e.g.\n+     * <pre>\n+     *     double constant10(java.util.List<org.kie.pmml.commons.model.tuples.KiePMMLNameValue> param1) {\n+     *     return 34.6;\n+     * }\n+     * </pre>\n+     * @param methodName\n+     * @param constant\n+     * @param parameterFields\n+     * @return\n+     */\n+    static MethodDeclaration getConstantMethodDeclaration(final String methodName, final Constant constant, List<ClassOrInterfaceType> parameterFields) {\n+        return getConstantExpressionMethodDeclaration(methodName, constant, parameterFields);\n+    }\n+\n+    /**\n+     * @param methodName\n+     * @param discretize\n+     * @param parameterFields\n+     * @return\n+     */\n+    static MethodDeclaration getDiscretizeMethodDeclaration(final String methodName, final Discretize discretize, List<ClassOrInterfaceType> parameterFields) {\n+        throw new KiePMMLException(\"Discretize not managed, yet\");\n+    }\n+\n+    /**\n+     * Returns\n+     * <pre>\n+     * Object FieldRef(<i>methodArity</i>)(java.util.List<KiePMMLNameValue> param1) {\n+     *      Optional<KiePMMLNameValue> kiePMMLNameValue = param1.stream().filter((KiePMMLNameValue lmbdParam) -> Objects.equals(<i>(FieldRef_name)</i>, lmbdParam.getName())).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa6b069153c5cf498fe4452215f0a75af662988"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjM5OA==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2973#discussion_r449572398", "createdAt": "2020-07-03T13:02:25Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtils.java", "diffHunk": "@@ -162,95 +393,110 @@ static MethodDeclaration getFieldRefExpressionMethodDeclaration(final String met\n         // kiePMMLNameValue.map(KiePMMLNameValue::getValue).orElse( (fieldRef.getMapMissingTo() )\n         MethodCallExpr expression = new MethodCallExpr(\"orElse\");\n         expression.setScope(expressionScope);\n-        com.github.javaparser.ast.expr.Expression orElseExpression =  fieldRef.getMapMissingTo() != null ? new StringLiteralExpr(fieldRef.getMapMissingTo()) : new NullLiteralExpr();\n+        com.github.javaparser.ast.expr.Expression orElseExpression = fieldRef.getMapMissingTo() != null ? new StringLiteralExpr(fieldRef.getMapMissingTo()) : new NullLiteralExpr();\n         expression.setArguments(NodeList.nodeList(orElseExpression));\n \n-        // return kiePMMLNameValue.map(KiePMMLNameValue::getValue).orElse( (fieldRef.getMapMissingTo() )\n-        ReturnStmt returnStmt = new ReturnStmt();\n-        returnStmt.setExpression(expression);\n-        body.addStatement(returnStmt);\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n+        // Object variableName = kiePMMLNameValue.map(KiePMMLNameValue::getValue).orElse( (fieldRef.getMapMissingTo() )\n+        VariableDeclarator variableDeclarator = new VariableDeclarator();\n         ClassOrInterfaceType classOrInterfaceType = parseClassOrInterfaceType(Object.class.getName());\n-        toReturn.setType(classOrInterfaceType);\n-        toReturn.setBody(body);\n+        variableDeclarator.setType(classOrInterfaceType);\n+        variableDeclarator.setName(variableName);\n+        variableDeclarator.setInitializer(expression);\n+        VariableDeclarationExpr variableDeclarationExpr = new VariableDeclarationExpr();\n+        variableDeclarationExpr.setVariables(NodeList.nodeList(variableDeclarator));\n+        toReturn.addStatement(variableDeclarationExpr);\n+\n         return toReturn;\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param lag\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getLagExpressionMethodDeclaration(final String methodName, final Lag lag, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getLagExpressionBlockStmt(final String variableName, final Lag lag,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"Lag not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param mapValues\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getMapValuesExpressionMethodDeclaration(final String methodName, final MapValues mapValues, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getMapValuesExpressionBlockStmt(final String variableName, final MapValues mapValues,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"MapValues not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param normContinuous\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getNormContinuousExpressionMethodDeclaration(final String methodName, final NormContinuous normContinuous, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getNormContinuousExpressionBlockStmt(final String variableName, final NormContinuous normContinuous,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"NormContinuous not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     *\n+     * @param variableName\n      * @param normDiscrete\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getNormDiscreteExpressionMethodDeclaration(final String methodName, final NormDiscrete normDiscrete, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getNormDiscreteExpressionBlockStmt(final String variableName, final NormDiscrete normDiscrete, final ClassOrInterfaceType returnedType,  final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"NormDiscrete not managed, yet\");\n     }\n \n     /**\n-     * \n-     * @param methodName\n+     *\n+     * @param variableName\n      * @param textIndex\n+     * @param returnedType\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getTextIndexExpressionMethodDeclaration(final String methodName, final TextIndex textIndex, final List<ClassOrInterfaceType> parameterTypes) {\n-        MethodDeclaration toReturn = getExpressionMethodDeclaration(methodName, parameterTypes);\n-        return toReturn;\n+    static BlockStmt getTextIndexExpressionBlockStmt(final String variableName, final TextIndex textIndex,  final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {\n+        throw new KiePMMLException(\"TextIndex not managed, yet\");\n     }\n \n-\n     /**\n      * Return\n      * <pre>\n-     *     empty  methodName(List<KiePMMLNameValue> param1) {\n+     *     (<i>returnedType</i>)  (<i>methodName</i>)(List<KiePMMLNameValue> param1) {\n+     *              <i>body</i>\n+     *              return <i>variableName</i>;\n      *     }\n      * </pre>\n-     * \n      * @param methodName\n      * @param parameterTypes\n      * @return\n      */\n-    static MethodDeclaration getExpressionMethodDeclaration(final String methodName, final List<ClassOrInterfaceType> parameterTypes) {\n-        return getMethodDeclaration(methodName, parameterTypes);\n+    /**\n+     *\n+     * @param methodName\n+     * @param variableName\n+     * @param body\n+     * @param returnedType\n+     * @param parameterTypes\n+     * @return\n+     */\n+    static MethodDeclaration getExpressionMethodDeclaration(final String methodName, final String variableName, final BlockStmt body, final ClassOrInterfaceType returnedType, final List<ClassOrInterfaceType> parameterTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa6b069153c5cf498fe4452215f0a75af662988"}, "originalPosition": 538}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1843, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}