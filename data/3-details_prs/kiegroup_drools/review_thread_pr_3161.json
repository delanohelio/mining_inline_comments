{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzE4MzE1", "number": 3161, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTo1MDoyOFrOEs3--g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTo1MDoyOFrOEs3--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDkwMDQyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTo1MDoyOVrOHgWT3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTowNzo1N1rOHgc7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4MjAxNQ==", "bodyText": "@mariofusco\nWhat's the need for that ?", "url": "https://github.com/kiegroup/drools/pull/3161#discussion_r503682015", "createdAt": "2020-10-13T05:50:29Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "diffHunk": "@@ -57,13 +60,27 @@ public static PMMLRuntime getPMMLRuntime(String kbaseName, File pmmlFile, Releas\n     private static PMMLRuntime getPMMLRuntime(String kbaseName, File pmmlFile, KnowledgeBuilderImpl kbuilderImpl) {\n         FileSystemResource fileSystemResource = new FileSystemResource(pmmlFile);\n         new PMMLAssemblerService().addResource(kbuilderImpl, fileSystemResource, ResourceType.PMML, null);\n-        InternalKnowledgeBase kieBase = KnowledgeBaseFactory.newKnowledgeBase(kbaseName, new RuleBaseConfiguration());\n-        kieBase.addPackages( kbuilderImpl.getKnowledgePackages() );\n+        KieBase kieBase = createKieBase( kbuilderImpl );\n         return getPMMLRuntime(kieBase);\n     }\n \n     private static PMMLRuntime getPMMLRuntime(KieBase kieBase) {\n         final KieRuntimeFactory kieRuntimeFactory = KieRuntimeFactory.of(kieBase);\n         return kieRuntimeFactory.get(PMMLRuntime.class);\n     }\n+\n+    private static KieBase createKieBase( KnowledgeBuilderImpl kbuilderImpl ) {\n+        KieHelper kieHelper = new KieHelper();\n+        kbuilderImpl.getPackageNames().stream().flatMap( name -> kbuilderImpl.getPackageDescrs( name ).stream() )\n+                .forEach( pDescr -> kieHelper.addResource( createDescrResource(pDescr) ) );\n+        KieBase kieBase = kieHelper.build(ExecutableModelProject.class);\n+        (( InternalKnowledgeBase ) kieBase).addPackages( kbuilderImpl.getKnowledgePackages() );\n+        return kieBase;\n+    }\n+\n+    private static DescrResource createDescrResource( PackageDescr pDescr ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48623d421f451a4e64788ec911af3c51e7daf9c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MDMzNg==", "bodyText": "@gitgabrio When you add a resource to be compiled the resource has to have a path in the virtual file system that drools create internally. SInce I'm creating an artificial resource (not one taken from the file system) I'm also giving it an artificial name. I guess this is a leaky abstraction that we could avoid, but for now this is necessary.", "url": "https://github.com/kiegroup/drools/pull/3161#discussion_r503790336", "createdAt": "2020-10-13T09:07:57Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "diffHunk": "@@ -57,13 +60,27 @@ public static PMMLRuntime getPMMLRuntime(String kbaseName, File pmmlFile, Releas\n     private static PMMLRuntime getPMMLRuntime(String kbaseName, File pmmlFile, KnowledgeBuilderImpl kbuilderImpl) {\n         FileSystemResource fileSystemResource = new FileSystemResource(pmmlFile);\n         new PMMLAssemblerService().addResource(kbuilderImpl, fileSystemResource, ResourceType.PMML, null);\n-        InternalKnowledgeBase kieBase = KnowledgeBaseFactory.newKnowledgeBase(kbaseName, new RuleBaseConfiguration());\n-        kieBase.addPackages( kbuilderImpl.getKnowledgePackages() );\n+        KieBase kieBase = createKieBase( kbuilderImpl );\n         return getPMMLRuntime(kieBase);\n     }\n \n     private static PMMLRuntime getPMMLRuntime(KieBase kieBase) {\n         final KieRuntimeFactory kieRuntimeFactory = KieRuntimeFactory.of(kieBase);\n         return kieRuntimeFactory.get(PMMLRuntime.class);\n     }\n+\n+    private static KieBase createKieBase( KnowledgeBuilderImpl kbuilderImpl ) {\n+        KieHelper kieHelper = new KieHelper();\n+        kbuilderImpl.getPackageNames().stream().flatMap( name -> kbuilderImpl.getPackageDescrs( name ).stream() )\n+                .forEach( pDescr -> kieHelper.addResource( createDescrResource(pDescr) ) );\n+        KieBase kieBase = kieHelper.build(ExecutableModelProject.class);\n+        (( InternalKnowledgeBase ) kieBase).addPackages( kbuilderImpl.getKnowledgePackages() );\n+        return kieBase;\n+    }\n+\n+    private static DescrResource createDescrResource( PackageDescr pDescr ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4MjAxNQ=="}, "originalCommit": {"oid": "a48623d421f451a4e64788ec911af3c51e7daf9c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2350, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}