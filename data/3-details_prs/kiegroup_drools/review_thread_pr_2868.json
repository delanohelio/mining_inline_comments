{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDExNTc3", "number": 2868, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozNjozNVrOD1XjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo1Mzo1OVrOD1YCYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mjg3MDQ0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/KiePMMLStatusHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozNjozNVrOGKxhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNTo0OFrOGLJ5eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDM3Nw==", "bodyText": "Can you please double check these changes? Accumulator is an AtomicReference so it is a reference and I don't know how useful could be to compare/hash it.\nDo you compare different KiePMMLStatusHolder instances? When do you expect them to be the same?", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413950377", "createdAt": "2020-04-23T16:36:35Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/KiePMMLStatusHolder.java", "diffHunk": "@@ -48,11 +62,12 @@ public boolean equals(Object o) {\n             return false;\n         }\n         KiePMMLStatusHolder that = (KiePMMLStatusHolder) o;\n-        return Objects.equals(status, that.status);\n+        return Objects.equals(status, that.status) &&\n+                Objects.equals(accumulator, that.accumulator);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(status);\n+        return Objects.hash(status, accumulator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0OTY4OA==", "bodyText": "@danielezonca Those equals/hashcode are the one automatically generated by IJ. I usually add them on data classes (like this).", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414349688", "createdAt": "2020-04-24T07:15:48Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/KiePMMLStatusHolder.java", "diffHunk": "@@ -48,11 +62,12 @@ public boolean equals(Object o) {\n             return false;\n         }\n         KiePMMLStatusHolder that = (KiePMMLStatusHolder) o;\n-        return Objects.equals(status, that.status);\n+        return Objects.equals(status, that.status) &&\n+                Objects.equals(accumulator, that.accumulator);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(status);\n+        return Objects.hash(status, accumulator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDM3Nw=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mjg3NDE3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/utils/KiePMMLDroolsModelUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozNzoyM1rOGKxj0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTowNDoyNFrOGLSbjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDkyOA==", "bodyText": "When this can happen? Is it an expected condition?", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413950928", "createdAt": "2020-04-23T16:37:23Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/utils/KiePMMLDroolsModelUtils.java", "diffHunk": "@@ -43,6 +43,9 @@ public static String getSanitizedClassName(String input) {\n      * @return\n      */\n     public static Object getCorrectlyFormattedResult(Object rawValue, DATA_TYPE targetType) {\n+        if (rawValue == null) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MDM1NQ==", "bodyText": "@danielezonca\nYes, it is expected and I prefer to manage this in one single place (here).", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414350355", "createdAt": "2020-04-24T07:16:57Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/utils/KiePMMLDroolsModelUtils.java", "diffHunk": "@@ -43,6 +43,9 @@ public static String getSanitizedClassName(String input) {\n      * @return\n      */\n     public static Object getCorrectlyFormattedResult(Object rawValue, DATA_TYPE targetType) {\n+        if (rawValue == null) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDkyOA=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1NjI1MA==", "bodyText": "Ok, can you please add this information to the javadoc?", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414356250", "createdAt": "2020-04-24T07:27:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/utils/KiePMMLDroolsModelUtils.java", "diffHunk": "@@ -43,6 +43,9 @@ public static String getSanitizedClassName(String input) {\n      * @return\n      */\n     public static Object getCorrectlyFormattedResult(Object rawValue, DATA_TYPE targetType) {\n+        if (rawValue == null) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDkyOA=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4OTQ4Nw==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414489487", "createdAt": "2020-04-24T11:04:24Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/utils/KiePMMLDroolsModelUtils.java", "diffHunk": "@@ -43,6 +43,9 @@ public static String getSanitizedClassName(String input) {\n      * @return\n      */\n     public static Object getCorrectlyFormattedResult(Object rawValue, DATA_TYPE targetType) {\n+        if (rawValue == null) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MDkyOA=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mjg5ODk2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/PredicateASTFactoryData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0Mjo1M1rOGKxzAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoyODoxOVrOGLMhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NDgxOQ==", "bodyText": "If you want prevent external classes to alter the map you should create a new instance here like you are doing in the getter", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413954819", "createdAt": "2020-04-23T16:42:53Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/PredicateASTFactoryData.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dmg.pmml.Predicate;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Data class to contain objects required by <b>Predicate</b>s concrete ASTFactories\n+ */\n+public class PredicateASTFactoryData {\n+\n+    private final Predicate predicate;\n+    private final List<KiePMMLOutputField> outputFields;\n+    private final List<KiePMMLDroolsRule> rules;\n+    private final String parentPath;\n+    private final String currentRule;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    public PredicateASTFactoryData(Predicate predicate,\n+                                   List<KiePMMLOutputField> outputFields,\n+                                   List<KiePMMLDroolsRule> rules,\n+                                   String parentPath,\n+                                   String currentRule,\n+                                   Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        this.predicate = predicate;\n+        this.outputFields = outputFields;\n+        this.rules = rules;\n+        this.parentPath = parentPath;\n+        this.currentRule = currentRule;\n+        this.fieldTypeMap = fieldTypeMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MjYzNg==", "bodyText": "@danielezonca\nI've moved the \"immutability\" logic in the constructor itself.", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414392636", "createdAt": "2020-04-24T08:28:19Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/PredicateASTFactoryData.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dmg.pmml.Predicate;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Data class to contain objects required by <b>Predicate</b>s concrete ASTFactories\n+ */\n+public class PredicateASTFactoryData {\n+\n+    private final Predicate predicate;\n+    private final List<KiePMMLOutputField> outputFields;\n+    private final List<KiePMMLDroolsRule> rules;\n+    private final String parentPath;\n+    private final String currentRule;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    public PredicateASTFactoryData(Predicate predicate,\n+                                   List<KiePMMLOutputField> outputFields,\n+                                   List<KiePMMLDroolsRule> rules,\n+                                   String parentPath,\n+                                   String currentRule,\n+                                   Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        this.predicate = predicate;\n+        this.outputFields = outputFields;\n+        this.rules = rules;\n+        this.parentPath = parentPath;\n+        this.currentRule = currentRule;\n+        this.fieldTypeMap = fieldTypeMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NDgxOQ=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjkwMTM1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0MzoyM1rOGKx0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoyNzo0NlrOGLMf2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NTE4MA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413955180", "createdAt": "2020-04-23T16:43:23Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -62,31 +66,42 @@ public void declareRhs(final KiePMMLDroolsRule rule) {\n     protected void declareDefaultThen(final KiePMMLDroolsRule rule) {\n         StringJoiner joiner = new StringJoiner(\"\");\n         if (rule.getStatusToSet() != null) {\n-            joiner.add(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+            joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+        }\n+        if (rule.getStatusToSet() != null || rule.getToAccumulate() != null) {\n+            joiner.add(UPDATE_STATUS_HOLDER);\n         }\n         commonDeclareThen(rule, joiner);\n         builder.rhs(joiner.toString());\n     }\n \n     protected void declareIfThen(final KiePMMLDroolsRule rule) {\n-        builder.rhs(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+        builder.rhs(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+//        builder.rhs(UPDATE_STATUS_HOLDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MjI4MA==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414392280", "createdAt": "2020-04-24T08:27:46Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -62,31 +66,42 @@ public void declareRhs(final KiePMMLDroolsRule rule) {\n     protected void declareDefaultThen(final KiePMMLDroolsRule rule) {\n         StringJoiner joiner = new StringJoiner(\"\");\n         if (rule.getStatusToSet() != null) {\n-            joiner.add(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+            joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+        }\n+        if (rule.getStatusToSet() != null || rule.getToAccumulate() != null) {\n+            joiner.add(UPDATE_STATUS_HOLDER);\n         }\n         commonDeclareThen(rule, joiner);\n         builder.rhs(joiner.toString());\n     }\n \n     protected void declareIfThen(final KiePMMLDroolsRule rule) {\n-        builder.rhs(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+        builder.rhs(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+//        builder.rhs(UPDATE_STATUS_HOLDER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NTE4MA=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjkwMTg5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0MzozM1rOGKx0yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoyNzo0M1rOGLMfxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NTI3NA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413955274", "createdAt": "2020-04-23T16:43:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -62,31 +66,42 @@ public void declareRhs(final KiePMMLDroolsRule rule) {\n     protected void declareDefaultThen(final KiePMMLDroolsRule rule) {\n         StringJoiner joiner = new StringJoiner(\"\");\n         if (rule.getStatusToSet() != null) {\n-            joiner.add(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+            joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+        }\n+        if (rule.getStatusToSet() != null || rule.getToAccumulate() != null) {\n+            joiner.add(UPDATE_STATUS_HOLDER);\n         }\n         commonDeclareThen(rule, joiner);\n         builder.rhs(joiner.toString());\n     }\n \n     protected void declareIfThen(final KiePMMLDroolsRule rule) {\n-        builder.rhs(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+        builder.rhs(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+//        builder.rhs(UPDATE_STATUS_HOLDER);\n         StringJoiner joiner = new StringJoiner(\"\");\n-        joiner.add(String.format(UPDATE_STATUS_HOLDER, DONE));\n+        joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, DONE));\n         commonDeclareThen(rule, joiner);\n+//        joiner.add(UPDATE_STATUS_HOLDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MjI2Mw==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414392263", "createdAt": "2020-04-24T08:27:43Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java", "diffHunk": "@@ -62,31 +66,42 @@ public void declareRhs(final KiePMMLDroolsRule rule) {\n     protected void declareDefaultThen(final KiePMMLDroolsRule rule) {\n         StringJoiner joiner = new StringJoiner(\"\");\n         if (rule.getStatusToSet() != null) {\n-            joiner.add(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+            joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+        }\n+        if (rule.getStatusToSet() != null || rule.getToAccumulate() != null) {\n+            joiner.add(UPDATE_STATUS_HOLDER);\n         }\n         commonDeclareThen(rule, joiner);\n         builder.rhs(joiner.toString());\n     }\n \n     protected void declareIfThen(final KiePMMLDroolsRule rule) {\n-        builder.rhs(String.format(UPDATE_STATUS_HOLDER, rule.getStatusToSet()));\n+        builder.rhs(String.format(UPDATE_STATUS_HOLDER_STATUS, rule.getStatusToSet()));\n+//        builder.rhs(UPDATE_STATUS_HOLDER);\n         StringJoiner joiner = new StringJoiner(\"\");\n-        joiner.add(String.format(UPDATE_STATUS_HOLDER, DONE));\n+        joiner.add(String.format(UPDATE_STATUS_HOLDER_STATUS, DONE));\n         commonDeclareThen(rule, joiner);\n+//        joiner.add(UPDATE_STATUS_HOLDER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1NTI3NA=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjkyNDk0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0ODo0MVrOGKyCtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0ODowN1rOGLNUIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODgzNw==", "bodyText": "Are you sure of this condition? If I understand it correct the code, this get(null) will always throw a NPE [1].\n[1] https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#get-java.lang.Object- [..]If the specified obj argument is null, the method throws a NullPointerException.[..]", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413958837", "createdAt": "2020-04-23T16:48:41Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -111,6 +111,16 @@ public Object getActualValue(Object rawValue) {\n                 throw new KieDataFieldException(\"Fail to convert \" + rawValue + \"[\" + rawValue.getClass().getName() + \"] to expected class \" + mappedClass.getName(), e);\n             }\n         }\n+        if (!rawValue.getClass().isPrimitive()) {\n+            try {\n+                if (mappedClass.equals(rawValue.getClass().getField(\"TYPE\").get(null))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MDUzMQ==", "bodyText": "@danielezonca\nIf the underlying field is a static field, the obj argument is ignored; it may be null.", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414370531", "createdAt": "2020-04-24T07:51:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -111,6 +111,16 @@ public Object getActualValue(Object rawValue) {\n                 throw new KieDataFieldException(\"Fail to convert \" + rawValue + \"[\" + rawValue.getClass().getName() + \"] to expected class \" + mappedClass.getName(), e);\n             }\n         }\n+        if (!rawValue.getClass().isPrimitive()) {\n+            try {\n+                if (mappedClass.equals(rawValue.getClass().getField(\"TYPE\").get(null))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODgzNw=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNTY2NA==", "bodyText": "Ok cool, I wasn't aware of this behavior :)", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414405664", "createdAt": "2020-04-24T08:48:07Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -111,6 +111,16 @@ public Object getActualValue(Object rawValue) {\n                 throw new KieDataFieldException(\"Fail to convert \" + rawValue + \"[\" + rawValue.getClass().getName() + \"] to expected class \" + mappedClass.getName(), e);\n             }\n         }\n+        if (!rawValue.getClass().isPrimitive()) {\n+            try {\n+                if (mappedClass.equals(rawValue.getClass().getField(\"TYPE\").get(null))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1ODgzNw=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mjk0OTQ2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateWithAccumulationASTFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo1Mzo1OVrOGKyRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0NzozMVrOGLPq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MjU1OQ==", "bodyText": "If you create a common Builder interface with at least withAccumulationResult, withResult and withResultCode you can probably create a couple of static methods and get rid of:\n\nKiePMMLSimpleSetPredicateWithAccumulationASTFactory\nKiePMMLSimpleSetPredicateWithResultASTFactory\nKiePMMLTruePredicateWithAccumulationASTFactory\nKiePMMLTruePredicateWithResultASTFactory\npart of KiePMMLCompoundPredicateWithAccumulationASTFactory\npart of KiePMMLSimplePredicateWithResultASTFactory\npart of KiePMMLSimplePredicateWithAccumulationASTFactory\npart of KiePMMLCompoundPredicateWithResultASTFactory\n\nWdyt?\nIt could be done with another ticket too of course.", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r413962559", "createdAt": "2020-04-23T16:53:59Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateWithAccumulationASTFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDroolsRule</code> out of a <code>SimpleSetPredicate</code>\n+ */\n+public class KiePMMLSimpleSetPredicateWithAccumulationASTFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3ODk3OA==", "bodyText": "@danielezonca\nI avoided that on purpose, but I could not find a better solution.\nSome parameters are common by both implementations (e.g. KiePMMLSimpleSetPredicateWithAccumulationASTFactory and KiePMMLSimpleSetPredicateWithResultASTFactory) but AccumulationResult and Result (mostly) differentiate them.\nI already saw that the overall design could be improved/simplified, but for the moment being it helped me on separating concerns. At the same time, I'm not sure if other drools-implemented models (e.g. mining) will need another differentiation. I'll defer that decision.", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414378978", "createdAt": "2020-04-24T08:06:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateWithAccumulationASTFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDroolsRule</code> out of a <code>SimpleSetPredicate</code>\n+ */\n+public class KiePMMLSimpleSetPredicateWithAccumulationASTFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MjU1OQ=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNjI3Ng==", "bodyText": "Yes fine for me, what about open a ticket to review this after/together with mining model impl?", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414406276", "createdAt": "2020-04-24T08:49:00Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateWithAccumulationASTFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDroolsRule</code> out of a <code>SimpleSetPredicate</code>\n+ */\n+public class KiePMMLSimpleSetPredicateWithAccumulationASTFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MjU1OQ=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NDI4Nw==", "bodyText": "@danielezonca\nhttps://issues.redhat.com/browse/DROOLS-5272", "url": "https://github.com/kiegroup/drools/pull/2868#discussion_r414444287", "createdAt": "2020-04-24T09:47:31Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateWithAccumulationASTFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.ast.factories;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.models.drools.ast.KiePMMLDroolsRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDroolsRule</code> out of a <code>SimpleSetPredicate</code>\n+ */\n+public class KiePMMLSimpleSetPredicateWithAccumulationASTFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MjU1OQ=="}, "originalCommit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2492, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}