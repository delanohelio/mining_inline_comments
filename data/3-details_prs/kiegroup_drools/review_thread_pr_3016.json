{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MTQ4NDg4", "number": 3016, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzoxOFrOETq0VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzozM1rOETq0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDU5OTI0OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzoxOFrOG5iCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyNzo0N1rOG5-tww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightAND == Boolean.FALSE ? rightAND : null;\n          \n          \n            \n                                return rightAND == Boolean.FALSE ? false : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r462979639", "createdAt": "2020-07-30T13:03:18Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0NzkyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightAND == Boolean.FALSE ? rightAND : null;\n          \n          \n            \n                                return rightAND.equals(Boolean.FALSE) ? false : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463447920", "createdAt": "2020-07-31T07:24:05Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTYzOQ=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0OTUzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightAND == Boolean.FALSE ? rightAND : null;\n          \n          \n            \n                                return Boolean.FALSE.equals(rightAND) ? Boolean.FALSE : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463449539", "createdAt": "2020-07-31T07:27:47Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTYzOQ=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDYwMDA3OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzozM1rOG5iCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyODoxMVrOG5-uPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTc3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightOR == Boolean.TRUE ? rightOR : null;\n          \n          \n            \n                                return rightOR == Boolean.TRUE ? true : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r462979777", "createdAt": "2020-07-30T13:03:33Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;\n+                }\n             case OR:\n-                return or( left, right, ctx );\n+                Boolean leftOR = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftOR != null) {\n+                    if (!leftOR.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.TRUE; //left hand operand is true, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightOR = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightOR == Boolean.TRUE ? rightOR : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0ODEwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightOR == Boolean.TRUE ? rightOR : null;\n          \n          \n            \n                                return rightOR.equals(Boolean.TRUE) ? true : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463448105", "createdAt": "2020-07-31T07:24:27Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;\n+                }\n             case OR:\n-                return or( left, right, ctx );\n+                Boolean leftOR = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftOR != null) {\n+                    if (!leftOR.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.TRUE; //left hand operand is true, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightOR = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightOR == Boolean.TRUE ? rightOR : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTc3Nw=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0OTY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightOR == Boolean.TRUE ? rightOR : null;\n          \n          \n            \n                                return Boolean.TRUE.equals(rightOR) ? Boolean.TRUE : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463449661", "createdAt": "2020-07-31T07:28:11Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;\n+                }\n             case OR:\n-                return or( left, right, ctx );\n+                Boolean leftOR = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftOR != null) {\n+                    if (!leftOR.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.TRUE; //left hand operand is true, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightOR = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightOR == Boolean.TRUE ? rightOR : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTc3Nw=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2407, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}