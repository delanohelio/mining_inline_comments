{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNTk2OTQw", "number": 3155, "title": "DROOLS-5714 DMN produce programmatically OAS first iteration", "bodyText": "JIRA: https://issues.redhat.com/browse/DROOLS-5714\nreferenced Pull Requests: part of an ensemble of PRs:\n\nkiegroup/droolsjbpm-build-bootstrap#1493\n#3155\n(DRAFT) kiegroup/kogito-runtimes#817\n\nthe Kogito DRAFT PR downstream can be helpful to understand (one of) potential usages of this utility module.\n\n\nHow to retest this PR or trigger a specific build:\n\n\n\na pull request please add comment: Jenkins retest this\n\n\na full downstream build please add comment: Jenkins run fdb\n\n\na compile downstream build please  add comment: Jenkins run cdb\n\n\na full production downstream build please add comment: Jenkins execute product fdb\n\n\nan upstream build please add comment: Jenkins run upstream", "createdAt": "2020-10-09T13:40:05Z", "url": "https://github.com/kiegroup/drools/pull/3155", "merged": true, "mergeCommit": {"oid": "e82b3a40e55d0b64b11813a8fa8e8ac28818a61b"}, "closed": true, "closedAt": "2020-10-13T07:59:39Z", "author": {"login": "tarilabs"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP1XjwAH2gAyNTAwNTk2OTQwOmJjYWNiZDMyMTQwZDI1YTI5OWRiZWQxOTg1ODQ1YTA3MmFhMTU1OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR2oLBAFqTUwNjc2NTYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcacbd32140d25a299dbed1985845a072aa15598", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/bcacbd32140d25a299dbed1985845a072aa15598", "committedDate": "2020-10-06T09:56:48Z", "message": "initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c773e61a2af9e23310cc4e3302ccb417ef3a4bd", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/4c773e61a2af9e23310cc4e3302ccb417ef3a4bd", "committedDate": "2020-10-06T12:55:44Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edfd6e1d123883156f53d02fe63d6fc64a3a821a", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/edfd6e1d123883156f53d02fe63d6fc64a3a821a", "committedDate": "2020-10-08T08:03:28Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc9d9044cc44fbc06dbf0f97d7742afdb6a6159a", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/fc9d9044cc44fbc06dbf0f97d7742afdb6a6159a", "committedDate": "2020-10-08T08:06:38Z", "message": "remove alternative implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8be06a4265c2918191fbcf2ad367a202ec4ffb1e", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/8be06a4265c2918191fbcf2ad367a202ec4ffb1e", "committedDate": "2020-10-08T09:03:42Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f4bbd75510a41ff8acbe57e6068b16b111216e5", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/1f4bbd75510a41ff8acbe57e6068b16b111216e5", "committedDate": "2020-10-08T10:33:50Z", "message": "with model validation (basic checks)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2c48ce472b97bc7fefae4858942002d4a85a11d", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/f2c48ce472b97bc7fefae4858942002d4a85a11d", "committedDate": "2020-10-08T11:21:13Z", "message": "refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9bdca281f5929b6c92f6af2177003349a4937dc", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/f9bdca281f5929b6c92f6af2177003349a4937dc", "committedDate": "2020-10-08T12:02:43Z", "message": "support for type name containing spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac9b087b15ae4b5ec2c43058354b7930a44aad88", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/ac9b087b15ae4b5ec2c43058354b7930a44aad88", "committedDate": "2020-10-08T12:37:11Z", "message": "collection support and anonymous innner type collection of base type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ba246b91f60ed2e87c0afcc5edcacc0384b5dc", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/95ba246b91f60ed2e87c0afcc5edcacc0384b5dc", "committedDate": "2020-10-08T12:49:16Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6488671fb47699e907c19e202b895e748f68a2fc", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/6488671fb47699e907c19e202b895e748f68a2fc", "committedDate": "2020-10-08T12:50:43Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f7365e25ebe84e9f4ed8fadf99f379e83b9651", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/73f7365e25ebe84e9f4ed8fadf99f379e83b9651", "committedDate": "2020-10-08T13:01:14Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5607a0f863e20fd96dd8083d9db0dfa54e0978", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/fe5607a0f863e20fd96dd8083d9db0dfa54e0978", "committedDate": "2020-10-08T13:07:38Z", "message": "SLF4j logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08a38772fd685689d85e7301cb4d6b34e0e7d888", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/08a38772fd685689d85e7301cb4d6b34e0e7d888", "committedDate": "2020-10-08T13:08:59Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86010c72d0b14b80dc20ebadeae223c1ecee5004", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/86010c72d0b14b80dc20ebadeae223c1ecee5004", "committedDate": "2020-10-08T13:09:34Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3540e5f3e44bf1d15cb2c3368350cf3f25f93991", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/3540e5f3e44bf1d15cb2c3368350cf3f25f93991", "committedDate": "2020-10-08T13:10:09Z", "message": "."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/bdd9fa2a4b54e8605436225146b57d29ab043c41", "committedDate": "2020-10-09T13:38:33Z", "message": "finalize pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzkyNjQw", "url": "https://github.com/kiegroup/drools/pull/3155#pullrequestreview-505792640", "createdAt": "2020-10-09T15:45:21Z", "commit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0NToyMlrOHfPYDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDo0NzozOFrOHf5Zaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxOTgyMQ==", "bodyText": "This value is always overridden, I think you can directly return both inside try and catch blocks just declare the variable as\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String namePart = type.getName();\n          \n          \n            \n                    String namePart;", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502519821", "createdAt": "2020-10-09T15:45:22Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DefaultNamingPolicy.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.impl;\n+\n+import java.net.URI;\n+\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.core.impl.BaseDMNTypeImpl;\n+import org.kie.dmn.openapi.NamingPolicy;\n+\n+public class DefaultNamingPolicy implements NamingPolicy {\n+\n+    @Override\n+    public String getName(DMNType type) {\n+        String name = type.getName();\n+        DMNType belongingType = ((BaseDMNTypeImpl) type).getBelongingType(); // internals for anonymous inner types.\n+        while (belongingType != null) {\n+            name = belongingType.getName() + \"_\" + name;\n+            belongingType = ((BaseDMNTypeImpl) belongingType).getBelongingType();\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getRef(DMNType type) {\n+        String namePart = type.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMTI4Mg==", "bodyText": "As far as I can see only ioSets is actually used. What about a TODO/remove the unused fields?", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502521282", "createdAt": "2020-10-09T15:47:56Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/model/DMNOASResult.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.openapi.NamingPolicy;\n+\n+public class DMNOASResult {\n+\n+    public final ObjectNode jsonSchemaNode;\n+    public final List<DMNModelIOSets> ioSets;\n+    public final Map<DMNType, Schema> schemas;\n+    public final NamingPolicy namingPolicy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMjgyNg==", "bodyText": "What about convert ioSets as Map<DMNModel, DMNModelIOSets>  directly in the constructor (or Map<DMNModel, List<DMNModelIOSets>> if you want to preserve the possibility to have multiple DMNModelIOSets for each DMNModel)?", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502522826", "createdAt": "2020-10-09T15:50:39Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/model/DMNOASResult.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.openapi.NamingPolicy;\n+\n+public class DMNOASResult {\n+\n+    public final ObjectNode jsonSchemaNode;\n+    public final List<DMNModelIOSets> ioSets;\n+    public final Map<DMNType, Schema> schemas;\n+    public final NamingPolicy namingPolicy;\n+\n+    public DMNOASResult(ObjectNode jsonSchemaNode, List<DMNModelIOSets> ioSets, Map<DMNType, Schema> schemas, NamingPolicy namingPolicy) {\n+        this.jsonSchemaNode = jsonSchemaNode.deepCopy();\n+        this.ioSets = Collections.unmodifiableList(ioSets);\n+        this.schemas = Collections.unmodifiableMap(schemas);\n+        this.namingPolicy = namingPolicy;\n+    }\n+\n+    public DMNModelIOSets lookupIOSetsByModel(DMNModel model) {\n+        return ioSets.stream().filter(ioset -> ioset.getModel().equals(model)).findFirst().orElseThrow(IllegalArgumentException::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMzQxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            e.printStackTrace();\n          \n          \n            \n                            LOG.error(e);", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502523418", "createdAt": "2020-10-09T15:51:41Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/test/java/org/kie/dmn/openapi/JacksonUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JacksonUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JacksonUtils.class);\n+\n+    public static void printoutJSON(Object tree) {\n+        if (LOG.isDebugEnabled()) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            try {\n+                LOG.debug(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(tree));\n+            } catch (Exception e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzEzNQ==", "bodyText": "Can you please add a javadoc?", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502527135", "createdAt": "2020-10-09T15:58:00Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/DMNOASGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi;\n+\n+import org.kie.dmn.openapi.model.DMNOASResult;\n+\n+public interface DMNOASGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MTc0OA==", "bodyText": "I like this idea to create an aggregated type to represent the whole input/output \ud83d\udc4d", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502541748", "createdAt": "2020-10-09T16:24:36Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/model/DMNModelIOSets.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.model;\n+\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.api.core.ast.DecisionNode;\n+import org.kie.dmn.api.core.ast.InputDataNode;\n+import org.kie.dmn.core.impl.CompositeTypeImpl;\n+\n+public class DMNModelIOSets {\n+\n+    private final DMNModel model;\n+    private CompositeTypeImpl inputSet;\n+    private CompositeTypeImpl outputSet;\n+\n+    public DMNModelIOSets(DMNModel model) {\n+        this.model = model;\n+        buildInputSet();\n+        buildOutputSet();\n+    }\n+\n+    private void buildOutputSet() {\n+        CompositeTypeImpl is = new CompositeTypeImpl(model.getNamespace(), \"<temp>\", model.getDefinitions().getId() + \"OutputSet\");\n+        for (DecisionNode dn : model.getDecisions()) {\n+            DMNType idnType = dn.getResultType();\n+            is.addField(dn.getName(), idnType);\n+        }\n+        for (InputDataNode idn : model.getInputs()) {\n+            DMNType idnType = idn.getType();\n+            is.addField(idn.getName(), idnType);\n+        }\n+        this.outputSet = is;\n+    }\n+\n+    private void buildInputSet() {\n+        CompositeTypeImpl is = new CompositeTypeImpl(model.getNamespace(), \"<temp>\", model.getDefinitions().getId() + \"InputSet\");\n+        for (InputDataNode idn : model.getInputs()) {\n+            DMNType idnType = idn.getType();\n+            is.addField(idn.getName(), idnType);\n+        }\n+        this.inputSet = is;\n+    }\n+\n+    public DMNModel getModel() {\n+        return model;\n+    }\n+\n+    public DMNType getInputSet() {\n+        return inputSet;\n+    }\n+\n+    public DMNType getOutputSet() {\n+        return outputSet;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MjA3Nw==", "bodyText": "Is this cast safe?", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502542077", "createdAt": "2020-10-09T16:25:09Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/FEELSchemaEnum.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.kie.dmn.api.core.DMNUnaryTest;\n+import org.kie.dmn.feel.FEEL;\n+import org.kie.dmn.feel.runtime.UnaryTestImpl;\n+\n+public class FEELSchemaEnum {\n+\n+    public static void parseAllowedValuesIntoSchema(Schema schema, List<DMNUnaryTest> list) {\n+        try {\n+            FEEL SimpleFEEL = FEEL.newInstance();\n+            List<Object> expectLiterals = list.stream().map(UnaryTestImpl.class::cast)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwODI5OQ==", "bodyText": "Considering that typesIndex is immutable why don't populate a Map<DMNType, Schema> map in the constructor to be returned here?", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503208299", "createdAt": "2020-10-12T10:47:38Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DMNTypeSchemas.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.eclipse.microprofile.openapi.OASFactory;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.eclipse.microprofile.openapi.models.media.Schema.SchemaType;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.core.impl.BaseDMNTypeImpl;\n+import org.kie.dmn.core.impl.CompositeTypeImpl;\n+import org.kie.dmn.core.impl.SimpleTypeImpl;\n+import org.kie.dmn.openapi.NamingPolicy;\n+import org.kie.dmn.openapi.model.DMNModelIOSets;\n+import org.kie.dmn.typesafe.DMNTypeUtils;\n+\n+public class DMNTypeSchemas {\n+\n+    private final List<DMNModelIOSets> ioSets;\n+    private final Set<DMNType> typesIndex;\n+    private final NamingPolicy namingPolicy;\n+\n+    public DMNTypeSchemas(List<DMNModelIOSets> ioSets, Set<DMNType> typesIndex, NamingPolicy namingPolicy) {\n+        this.ioSets = Collections.unmodifiableList(ioSets);\n+        this.typesIndex = Collections.unmodifiableSet(typesIndex);\n+        this.namingPolicy = namingPolicy;\n+    }\n+\n+    public Map<DMNType, Schema> generateSchemas() {\n+        Map<DMNType, Schema> schemas = new HashMap<>();\n+        for (DMNType t : typesIndex) {\n+            Schema schema = schemaFromType(t);\n+            schemas.put(t, schema);\n+        }\n+        return schemas;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/drools/commit/96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "committedDate": "2020-10-12T11:53:21Z", "message": "Implement code review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjYyNDY0", "url": "https://github.com/kiegroup/drools/pull/3155#pullrequestreview-506662464", "createdAt": "2020-10-12T14:19:44Z", "commit": {"oid": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzY1NjI1", "url": "https://github.com/kiegroup/drools/pull/3155#pullrequestreview-506765625", "createdAt": "2020-10-12T16:32:42Z", "commit": {"oid": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1813, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}