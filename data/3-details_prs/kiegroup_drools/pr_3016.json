{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MTQ4NDg4", "number": 3016, "title": "Optimized the AND and OR FEEL operations ", "bodyText": "to not evaluate the right operand if not required", "createdAt": "2020-07-30T12:54:50Z", "url": "https://github.com/kiegroup/drools/pull/3016", "merged": true, "mergeCommit": {"oid": "9c76a3e3921ac7d85667df791509b1a06d987134"}, "closed": true, "closedAt": "2020-08-04T11:16:51Z", "author": {"login": "SimonRinguette"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5_JEAgH2gAyNDU5MTQ4NDg4OmFmNjZiODNkNmQyZTBmMTUwOTRlZTk4NDczNjM0N2IxNDIxMTViN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7kvUigFqTQ2MDcxODQyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f", "author": {"user": {"login": "sringuette", "name": null}}, "url": "https://github.com/kiegroup/drools/commit/af66b83d6d2e0f15094ee984736347b142115b7f", "committedDate": "2020-07-30T12:53:41Z", "message": "Optimized the AND and OR FEEL operations to not evaluate the right operand if not required"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mzc4Mzkw", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-458378390", "createdAt": "2020-07-30T13:03:17Z", "commit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzoxOFrOG5iCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzoxOFrOG5iCNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTYzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightAND == Boolean.FALSE ? rightAND : null;\n          \n          \n            \n                                return rightAND == Boolean.FALSE ? false : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r462979639", "createdAt": "2020-07-30T13:03:18Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mzc4NTk3", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-458378597", "createdAt": "2020-07-30T13:03:33Z", "commit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzozM1rOG5iCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMzozM1rOG5iCwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightOR == Boolean.TRUE ? rightOR : null;\n          \n          \n            \n                                return rightOR == Boolean.TRUE ? true : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r462979777", "createdAt": "2020-07-30T13:03:33Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;\n+                }\n             case OR:\n-                return or( left, right, ctx );\n+                Boolean leftOR = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftOR != null) {\n+                    if (!leftOR.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.TRUE; //left hand operand is true, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightOR = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightOR == Boolean.TRUE ? rightOR : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mzc5NzYw", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-458379760", "createdAt": "2020-07-30T13:04:55Z", "commit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTY3MzIz", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-458967323", "createdAt": "2020-07-31T07:24:05Z", "commit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyNDowNVrOG5-ncA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyNDoyN1rOG5-oKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0NzkyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightAND == Boolean.FALSE ? rightAND : null;\n          \n          \n            \n                                return rightAND.equals(Boolean.FALSE) ? false : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463447920", "createdAt": "2020-07-31T07:24:05Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTYzOQ=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0ODEwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightOR == Boolean.TRUE ? rightOR : null;\n          \n          \n            \n                                return rightOR.equals(Boolean.TRUE) ? true : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463448105", "createdAt": "2020-07-31T07:24:27Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;\n+                }\n             case OR:\n-                return or( left, right, ctx );\n+                Boolean leftOR = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftOR != null) {\n+                    if (!leftOR.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.TRUE; //left hand operand is true, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightOR = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightOR == Boolean.TRUE ? rightOR : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTc3Nw=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTY5Mjgz", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-458969283", "createdAt": "2020-07-31T07:27:47Z", "commit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyNzo0N1rOG5-tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoyODoxMVrOG5-uPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0OTUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightAND == Boolean.FALSE ? rightAND : null;\n          \n          \n            \n                                return Boolean.FALSE.equals(rightAND) ? Boolean.FALSE : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463449539", "createdAt": "2020-07-31T07:27:47Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTYzOQ=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0OTY2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return rightOR == Boolean.TRUE ? rightOR : null;\n          \n          \n            \n                                return Boolean.TRUE.equals(rightOR) ? Boolean.TRUE : null;", "url": "https://github.com/kiegroup/drools/pull/3016#discussion_r463449661", "createdAt": "2020-07-31T07:28:11Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/InfixOpNode.java", "diffHunk": "@@ -163,41 +163,63 @@ public Type getResultType() {\n \n     @Override\n     public Object evaluate(EvaluationContext ctx) {\n-        if (left == null) return null;\n-        Object left = this.left.evaluate( ctx );\n-        Object right = this.right.evaluate( ctx );\n+        if (this.left == null) return null;\n         switch ( operator ) {\n             case ADD:\n-                return add( left, right, ctx );\n+                return add(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case SUB:\n-                return sub( left, right, ctx );\n+                return sub(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case MULT:\n-                return mult( left, right, ctx );\n+                return mult(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case DIV:\n-                return div( left, right, ctx );\n+                return div(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx);\n             case POW:\n-                return math( left, right, ctx, (l, r) -> BigDecimalMath.pow( l, r, MathContext.DECIMAL128 ) );\n+                return math(this.left.evaluate(ctx), this.right.evaluate(ctx), ctx, (l, r) -> BigDecimalMath.pow(l, r, MathContext.DECIMAL128));\n             case AND:\n-                return and( left, right, ctx );\n+                Boolean leftAND = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftAND != null) {\n+                    if (leftAND.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.FALSE; //left hand operand is false, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightAND = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightAND == Boolean.FALSE ? rightAND : null;\n+                }\n             case OR:\n-                return or( left, right, ctx );\n+                Boolean leftOR = EvalHelper.getBooleanOrNull(this.left.evaluate(ctx));\n+                if (leftOR != null) {\n+                    if (!leftOR.booleanValue()) {\n+                        return EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    } else {\n+                        return Boolean.TRUE; //left hand operand is true, we do not need to evaluate right side\n+                    }\n+                } else {\n+                    Boolean rightOR = EvalHelper.getBooleanOrNull(this.right.evaluate(ctx));\n+                    return rightOR == Boolean.TRUE ? rightOR : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3OTc3Nw=="}, "originalCommit": {"oid": "af66b83d6d2e0f15094ee984736347b142115b7f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53a3c46197f71b8b0238a917d646086d3454facb", "author": {"user": {"login": "SimonRinguette", "name": null}}, "url": "https://github.com/kiegroup/drools/commit/53a3c46197f71b8b0238a917d646086d3454facb", "committedDate": "2020-07-31T12:44:34Z", "message": "Applied @tarilabs suggestions\n\nCo-authored-by: Matteo Mortari <matteo.mortari@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "036defdce5b587bc426e87785680f53efdcddc5a", "author": {"user": {"login": "SimonRinguette", "name": null}}, "url": "https://github.com/kiegroup/drools/commit/036defdce5b587bc426e87785680f53efdcddc5a", "committedDate": "2020-07-31T12:44:42Z", "message": "Applied @tarilabs suggestions\n\nCo-authored-by: Matteo Mortari <matteo.mortari@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTE4NzMy", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-459918732", "createdAt": "2020-08-03T10:27:31Z", "commit": {"oid": "036defdce5b587bc426e87785680f53efdcddc5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzE4NDIw", "url": "https://github.com/kiegroup/drools/pull/3016#pullrequestreview-460718420", "createdAt": "2020-08-04T11:15:53Z", "commit": {"oid": "036defdce5b587bc426e87785680f53efdcddc5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1878, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}