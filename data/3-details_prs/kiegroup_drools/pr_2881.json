{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODA5NDk5", "number": 2881, "title": "[JBPM-9129] Start process without triggering a start node", "bodyText": "added new command to restart a process from where it left", "createdAt": "2020-05-04T08:34:34Z", "url": "https://github.com/kiegroup/drools/pull/2881", "merged": true, "mergeCommit": {"oid": "749ff76b2de0f7d87b1a2d55fdf58ae3f4b1403b"}, "closed": true, "closedAt": "2020-05-27T14:05:17Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceOcF_ABqjMzMDI4ODU1NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcktdfrAFqTQxNzYxNjc1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f25281a5d81cb535dd4b47d27435beb35b9e6d11", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/f25281a5d81cb535dd4b47d27435beb35b9e6d11", "committedDate": "2020-05-04T08:33:29Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}, "afterCommit": {"oid": "3d37797f8bbb7b91eaa2a67d661aa0611045a83a", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/3d37797f8bbb7b91eaa2a67d661aa0611045a83a", "committedDate": "2020-05-05T06:52:54Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d37797f8bbb7b91eaa2a67d661aa0611045a83a", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/3d37797f8bbb7b91eaa2a67d661aa0611045a83a", "committedDate": "2020-05-05T06:52:54Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}, "afterCommit": {"oid": "4406bc7c118efcc0c7d0b0169d6f443f457e428c", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/4406bc7c118efcc0c7d0b0169d6f443f457e428c", "committedDate": "2020-05-05T06:56:19Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4406bc7c118efcc0c7d0b0169d6f443f457e428c", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/4406bc7c118efcc0c7d0b0169d6f443f457e428c", "committedDate": "2020-05-05T06:56:19Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}, "afterCommit": {"oid": "ca587347d5b886aa6a529344e0979836444cf7e2", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/ca587347d5b886aa6a529344e0979836444cf7e2", "committedDate": "2020-05-11T13:44:32Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca587347d5b886aa6a529344e0979836444cf7e2", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/ca587347d5b886aa6a529344e0979836444cf7e2", "committedDate": "2020-05-11T13:44:32Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}, "afterCommit": {"oid": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "committedDate": "2020-05-11T17:56:29Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDEyMDc0", "url": "https://github.com/kiegroup/drools/pull/2881#pullrequestreview-415412074", "createdAt": "2020-05-20T14:44:52Z", "commit": {"oid": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0NDo1MlrOGYPYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0NTozMVrOGYPang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MTA1NQ==", "bodyText": "Still seems to refer to nodeInstanceIds but I think these are just nodeIds (node definition ids).", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428071055", "createdAt": "2020-05-20T14:44:52Z", "author": {"login": "krisv"}, "path": "drools-core/src/main/java/org/drools/core/base/WrappedStatefulKnowledgeSessionForRHS.java", "diffHunk": "@@ -775,19 +775,9 @@ public SessionClock getSessionClock() {\n         return delegate.getSessionClock();\n     }\n \n-//    public void switchToRuleUnit(RuleUnit ruleUnit, Activation activation) {\n-//        delegate.getRuleUnitExecutor().switchToRuleUnit(ruleUnit, activation);\n-//    }\n-//\n-//    public void switchToRuleUnit(Class<? extends RuleUnit> ruleUnitClass, Activation activation) {\n-//        delegate.getRuleUnitExecutor().switchToRuleUnit(ruleUnitClass, activation);\n-//    }\n-//\n-//    public void guardRuleUnit(RuleUnit ruleUnit, Activation activation) {\n-//        delegate.getRuleUnitExecutor().guardRuleUnit(ruleUnit, activation);\n-//    }\n-//\n-//    public void guardRuleUnit(Class<? extends RuleUnit> ruleUnitClass, Activation activation) {\n-//        delegate.getRuleUnitExecutor().guardRuleUnit(ruleUnitClass, activation);\n-//    }\n+    @Override\n+    public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeInstancesIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MTU4Mg==", "bodyText": "Same here, this class seem to refer to instance ids in many places, but they are definition ids I believe.", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428071582", "createdAt": "2020-05-20T14:45:31Z", "author": {"login": "krisv"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.command.runtime.process;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+\n+import org.drools.core.runtime.impl.ExecutionResultImpl;\n+import org.kie.api.runtime.Context;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.command.CorrelationKeyCommand;\n+import org.kie.internal.command.RegistryContext;\n+import org.kie.internal.jaxb.CorrelationKeyXmlAdapter;\n+import org.kie.internal.process.CorrelationAwareProcessRuntime;\n+import org.kie.internal.process.CorrelationKey;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.NONE)\n+public class StartProcessFromNodeIdsCommand extends StartProcessCommand implements CorrelationKeyCommand {\n+\n+    private static final long serialVersionUID = -6839934578407787510L;\n+\n+    @XmlElementWrapper(name = \"node-instance-id-list\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "committedDate": "2020-05-11T17:56:29Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}, "afterCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/d897089996b0b8bc9b5345763fd491b7d4be080b", "committedDate": "2020-05-21T09:36:24Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDUwNTYy", "url": "https://github.com/kiegroup/drools/pull/2881#pullrequestreview-416050562", "createdAt": "2020-05-21T10:48:16Z", "commit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0ODoxNlrOGYucEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1MDoxMlrOGYufIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTg1OA==", "bodyText": "This is the same as parent but class name, that could be resolved by reflection or tailored with a protected attribute", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428579858", "createdAt": "2020-05-21T10:48:16Z", "author": {"login": "gmunozfe"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.command.runtime.process;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+\n+import org.drools.core.runtime.impl.ExecutionResultImpl;\n+import org.kie.api.runtime.Context;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.command.CorrelationKeyCommand;\n+import org.kie.internal.command.RegistryContext;\n+import org.kie.internal.jaxb.CorrelationKeyXmlAdapter;\n+import org.kie.internal.process.CorrelationAwareProcessRuntime;\n+import org.kie.internal.process.CorrelationKey;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.NONE)\n+public class StartProcessFromNodeIdsCommand extends StartProcessCommand implements CorrelationKeyCommand {\n+\n+    private static final long serialVersionUID = -6839934578407787510L;\n+\n+    @XmlElementWrapper(name = \"node-id-list\")\n+    @XmlElement(name = \"node-id\")\n+    private List<String> nodeIds;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    @XmlJavaTypeAdapter(value = CorrelationKeyXmlAdapter.class)\n+    private CorrelationKey correlationKey;\n+\n+    public StartProcessFromNodeIdsCommand() {\n+    }\n+\n+\n+    public StartProcessFromNodeIdsCommand(String processId, String outIdentifier) {\n+        super(processId);\n+        setOutIdentifier(outIdentifier);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters) {\n+        super(processId);\n+        setParameters(parameters);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters, String outIdentifier) {\n+        this(processId, outIdentifier);\n+        setParameters(parameters);\n+    }\n+\n+    public List<String> getNodeIds() {\n+        return nodeIds;\n+    }\n+\n+    public void setNodeIds(List<String> nodeIds) {\n+        this.nodeIds = nodeIds;\n+    }\n+\n+    public void setCorrelationKey(CorrelationKey key) {\n+        this.correlationKey = key;\n+    }\n+\n+    public CorrelationKey getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    @Override\n+    public ProcessInstance execute(Context context) {\n+        KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n+\n+        if (getData() != null) {\n+            for (Object o : getData()) {\n+                ksession.insert(o);\n+            }\n+        }\n+\n+        String[] ids = nodeIds != null ? nodeIds.stream().toArray(String[]::new) : new String[0];\n+\n+        ProcessInstance processInstance = null;\n+        if (correlationKey == null) {\n+            processInstance = ksession.startProcessFromNodeIds(getProcessId(), getParameters(), ids);\n+        } else {\n+            processInstance = ((CorrelationAwareProcessRuntime) ksession).startProcessFromNodeIds(getProcessId(), correlationKey, getParameters(), ids);\n+        }\n+        if ( getOutIdentifier() != null ) {\n+            ((RegistryContext) context).lookup(ExecutionResultImpl.class).setResult(getOutIdentifier(), processInstance.getId());\n+        }\n+        return processInstance;\n+    }\n+\n+    public String toString() {\n+        final StringBuilder result = new StringBuilder();\n+        result.append(\"session.restartProcess(\");\n+        result.append(getProcessId());\n+        result.append(\", [\");\n+        if (getParameters() != null) {\n+            int i = 0;\n+            for (final Map.Entry<String, Object> entry : getParameters().entrySet()) {\n+                if (i++ > 0) {\n+                    result.append(\", \");\n+                }\n+                result.append(entry.getKey());\n+                result.append(\"=\");\n+                result.append(entry.getValue());\n+            }\n+        }\n+        result.append(\"]);\");\n+        return result.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDM0NQ==", "bodyText": "Same comment as Kris here to be coherent, use nodeIds", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428580345", "createdAt": "2020-05-21T10:49:30Z", "author": {"login": "gmunozfe"}, "path": "drools-ruleunit/src/main/java/org/drools/ruleunit/executor/RuleUnitSessionImpl.java", "diffHunk": "@@ -1006,4 +1006,14 @@ public void deactivate() {\n     public boolean tryDeactivate() {\n         return session.tryDeactivate();\n     }\n+\n+    @Override\n+    public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeInstancesIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDY0Mg==", "bodyText": "and same here", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428580642", "createdAt": "2020-05-21T10:50:12Z", "author": {"login": "gmunozfe"}, "path": "drools-templates/src/test/java/org/drools/template/parser/ExternalSheetListenerTest.java", "diffHunk": "@@ -454,6 +454,11 @@ public void fireUntilHalt() {\n                 public void fireUntilHalt(org.kie.api.runtime.rule.AgendaFilter agendaFilter) {\n \n                 }\n+\n+                @Override\n+                public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeInstancesIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDk2MzUy", "url": "https://github.com/kiegroup/drools/pull/2881#pullrequestreview-416096352", "createdAt": "2020-05-21T12:14:59Z", "commit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoxNDo1OVrOGYwmVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMToyM1rOGYy3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNTI1NA==", "bodyText": "Should be 2020\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428615254", "createdAt": "2020-05-21T12:14:59Z", "author": {"login": "afalhambra"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MjMwNg==", "bodyText": "Wonder if logging nodeIds list here could add some value when debugging? wdyt?", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428652306", "createdAt": "2020-05-21T13:31:23Z", "author": {"login": "afalhambra"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.command.runtime.process;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+\n+import org.drools.core.runtime.impl.ExecutionResultImpl;\n+import org.kie.api.runtime.Context;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.command.CorrelationKeyCommand;\n+import org.kie.internal.command.RegistryContext;\n+import org.kie.internal.jaxb.CorrelationKeyXmlAdapter;\n+import org.kie.internal.process.CorrelationAwareProcessRuntime;\n+import org.kie.internal.process.CorrelationKey;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.NONE)\n+public class StartProcessFromNodeIdsCommand extends StartProcessCommand implements CorrelationKeyCommand {\n+\n+    private static final long serialVersionUID = -6839934578407787510L;\n+\n+    @XmlElementWrapper(name = \"node-id-list\")\n+    @XmlElement(name = \"node-id\")\n+    private List<String> nodeIds;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    @XmlJavaTypeAdapter(value = CorrelationKeyXmlAdapter.class)\n+    private CorrelationKey correlationKey;\n+\n+    public StartProcessFromNodeIdsCommand() {\n+    }\n+\n+\n+    public StartProcessFromNodeIdsCommand(String processId, String outIdentifier) {\n+        super(processId);\n+        setOutIdentifier(outIdentifier);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters) {\n+        super(processId);\n+        setParameters(parameters);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters, String outIdentifier) {\n+        this(processId, outIdentifier);\n+        setParameters(parameters);\n+    }\n+\n+    public List<String> getNodeIds() {\n+        return nodeIds;\n+    }\n+\n+    public void setNodeIds(List<String> nodeIds) {\n+        this.nodeIds = nodeIds;\n+    }\n+\n+    public void setCorrelationKey(CorrelationKey key) {\n+        this.correlationKey = key;\n+    }\n+\n+    public CorrelationKey getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    @Override\n+    public ProcessInstance execute(Context context) {\n+        KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n+\n+        if (getData() != null) {\n+            for (Object o : getData()) {\n+                ksession.insert(o);\n+            }\n+        }\n+\n+        String[] ids = nodeIds != null ? nodeIds.stream().toArray(String[]::new) : new String[0];\n+\n+        ProcessInstance processInstance = null;\n+        if (correlationKey == null) {\n+            processInstance = ksession.startProcessFromNodeIds(getProcessId(), getParameters(), ids);\n+        } else {\n+            processInstance = ((CorrelationAwareProcessRuntime) ksession).startProcessFromNodeIds(getProcessId(), correlationKey, getParameters(), ids);\n+        }\n+        if ( getOutIdentifier() != null ) {\n+            ((RegistryContext) context).lookup(ExecutionResultImpl.class).setResult(getOutIdentifier(), processInstance.getId());\n+        }\n+        return processInstance;\n+    }\n+\n+    public String toString() {\n+        final StringBuilder result = new StringBuilder();\n+        result.append(\"session.restartProcess(\");\n+        result.append(getProcessId());\n+        result.append(\", [\");\n+        if (getParameters() != null) {\n+            int i = 0;\n+            for (final Map.Entry<String, Object> entry : getParameters().entrySet()) {\n+                if (i++ > 0) {\n+                    result.append(\", \");\n+                }\n+                result.append(entry.getKey());\n+                result.append(\"=\");\n+                result.append(entry.getValue());\n+            }\n+        }\n+        result.append(\"]);\");\n+        return result.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2b7048c57d7b0386a64f888916f42175c061f0b", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/d2b7048c57d7b0386a64f888916f42175c061f0b", "committedDate": "2020-05-22T08:13:37Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/d897089996b0b8bc9b5345763fd491b7d4be080b", "committedDate": "2020-05-21T09:36:24Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}, "afterCommit": {"oid": "d2b7048c57d7b0386a64f888916f42175c061f0b", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/d2b7048c57d7b0386a64f888916f42175c061f0b", "committedDate": "2020-05-22T08:13:37Z", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjE2NzUy", "url": "https://github.com/kiegroup/drools/pull/2881#pullrequestreview-417616752", "createdAt": "2020-05-25T10:25:18Z", "commit": {"oid": "d2b7048c57d7b0386a64f888916f42175c061f0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1516, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}