{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTM2NjMy", "number": 3218, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NToyOFrOE1t9Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDo1Mjo1NFrOE3Q1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzYyOTAyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NToyOFrOHuJjvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NToyOFrOHuJjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzE1MA==", "bodyText": "oh nice, I like this much better now", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r518153150", "createdAt": "2020-11-05T15:45:28Z", "author": {"login": "evacchi"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -30,7 +30,9 @@ public final Object get() {\n \n     @Override\n     public String toString() {\n-        if(lambdaFingerprint == null) {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0699c132e0ab01e6ab526f43badcc0b99d049a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTE5NTYyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTo1NjoxNlrOHurQ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjowMDo1MFrOHurZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNTM2Nw==", "bodyText": "Shouldn't we reintroduce the check for native compilation here.", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r518705367", "createdAt": "2020-11-06T11:56:16Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -30,7 +30,9 @@ public final Object get() {\n \n     @Override\n     public String toString() {\n-        if(lambdaFingerprint == null) {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(lambdaFingerprint == null) {\n             lambdaFingerprint = LambdaPrinter.print(getLambda());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0699c132e0ab01e6ab526f43badcc0b99d049a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNzQ1Nw==", "bodyText": "No as the purpose of this is to enable native compilation with the accumulate", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r518707457", "createdAt": "2020-11-06T12:00:50Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -30,7 +30,9 @@ public final Object get() {\n \n     @Override\n     public String toString() {\n-        if(lambdaFingerprint == null) {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(lambdaFingerprint == null) {\n             lambdaFingerprint = LambdaPrinter.print(getLambda());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNTM2Nw=="}, "originalCommit": {"oid": "0a0699c132e0ab01e6ab526f43badcc0b99d049a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE3NjY0OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToxMzoyNVrOHv9ysA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0Njo0N1rOHwR2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzUyMA==", "bodyText": "@mariofusco I'm not sure about this, we could remove this dependency by copying and pasting the native image properties check", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520057520", "createdAt": "2020-11-09T19:13:25Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/pom.xml", "diffHunk": "@@ -18,6 +18,10 @@\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.drools</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5b4e3f7618a48d27b89cb0ba73c7ccfeb4cc81"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4NjA1Mg==", "bodyText": "+10 from me to copy both utility methods instead of a dependency on drools-core", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520386052", "createdAt": "2020-11-10T08:46:47Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-canonical-model/pom.xml", "diffHunk": "@@ -18,6 +18,10 @@\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.drools</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzUyMA=="}, "originalCommit": {"oid": "aa5b4e3f7618a48d27b89cb0ba73c7ccfeb4cc81"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTEzOTk5OnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoyMjowN1rOHwG1FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODozMToyNlrOHwRRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTU4OA==", "bodyText": "@lucamolteni Probably you want to call clearProperty() ? Btw, setting \"false\" wouldn't work because it's evaluated with null or not.\nhttps://github.com/kiegroup/drools/blob/master/drools-core/src/main/java/org/drools/core/base/CoreComponentsBuilder.java#L26", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520205588", "createdAt": "2020-11-10T00:22:07Z", "author": {"login": "tkobayas"}, "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void unsetNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baed4c5f2a0b0b3be697752423961879174092a7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3NjY4Mw==", "bodyText": "whooops sorry :D", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520376683", "createdAt": "2020-11-10T08:31:26Z", "author": {"login": "lucamolteni"}, "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void unsetNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTU4OA=="}, "originalCommit": {"oid": "baed4c5f2a0b0b3be697752423961879174092a7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjI1ODkyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODoyOTo1NlrOHwRNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODoyOTo1NlrOHwRNYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3NTY0OQ==", "bodyText": "What about promote/document this interface? As far as I can see, implement this interface is the only way to write a\n\"programmatic\" lambda with a stable fingerprint.", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520375649", "createdAt": "2020-11-10T08:29:56Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.model.functions;\n+\n+public interface HashedExpression {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baed4c5f2a0b0b3be697752423961879174092a7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjI3NzIyOnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODozNDozMFrOHwRYOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODozNDozMFrOHwRYOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3ODQyNw==", "bodyText": "Considering that are not instance methods and are used only for testing I would prefer to move them to a NativeImageTestUtils or similar directly inside drools-test-coverage module. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520378427", "createdAt": "2020-11-10T08:34:30Z", "author": {"login": "danielezonca"}, "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void unsetNativeImage() {\n+        System.clearProperty(\"org.graalvm.nativeimage.imagecode\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjI4NTIxOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODozNjozN1rOHwRdEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTowNToyNlrOHwSjfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3OTY2NQ==", "bodyText": "What about rename print() method to highlight this introspection behavior? Something like getIntrospectedFingerprint", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520379665", "createdAt": "2020-11-10T08:36:37Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,8 +34,18 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            // Lambdas generated by the model-compiler have the fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) {\n+                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5NzY5NQ==", "bodyText": "TBH I find print clearer than  getIntrospectedFingerprint as this effectively prints a string representation of a lambda such as\nALOAD 0\nINVOKEVIRTUAL org/drools/modelcompiler/domain/Person.getAge()I\nINVOKESTATIC java/lang/Integer.valueOf(I)Ljava/lang/Integer;", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520397695", "createdAt": "2020-11-10T09:05:26Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,8 +34,18 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            // Lambdas generated by the model-compiler have the fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) {\n+                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3OTY2NQ=="}, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjI5NzUxOnYy", "diffSide": "RIGHT", "path": "drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODozOTo0MlrOHwRkog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo1MjoxN1rOHwSDlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4MTYwMg==", "bodyText": "Is this stable? Any EntryPointNode can be used?", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520381602", "createdAt": "2020-11-10T08:39:42Z", "author": {"login": "danielezonca"}, "path": "drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java", "diffHunk": "@@ -233,6 +169,47 @@ public void testFromSharingWithPropertyReactive() {\n         }\n     }\n \n+    public static String fromSharingRule() {\n+        return \"import \" + ListsContainer.class.getCanonicalName() + \"\\n\" +\n+                \"global java.util.List output1;\\n\" +\n+                \"global java.util.List output2;\\n\" +\n+                \"rule R1 when\\n\" +\n+                \"    ListsContainer( $list : list1 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output1.add($s);\\n\" +\n+                \"end\\n\" +\n+                \"rule R2 when\\n\" +\n+                \"    ListsContainer( $list : list2 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output2.add($s);\\n\" +\n+                \"end\\n\" +\n+                \"rule R3 when\\n\" +\n+                \"    ListsContainer( $list : list2 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output2.add($s);\\n\" +\n+                \"end\\n\";\n+    }\n+\n+    private static ObjectTypeNode insertObjectFireRules(InternalKnowledgeBase kbase, KieSession ksession) {\n+        final List<String> output1 = new ArrayList<>();\n+        ksession.setGlobal(\"output1\", output1);\n+        final List<String> output2 = new ArrayList<>();\n+        ksession.setGlobal(\"output2\", output2);\n+\n+        ksession.insert(new ListsContainer());\n+        ksession.fireAllRules();\n+\n+        assertEquals(\"bb\", output1.get(0));\n+        assertEquals(\"22\", output2.get(0));\n+        assertEquals(\"22\", output2.get(1));\n+\n+        final EntryPointNode epn = kbase.getRete().getEntryPointNodes().values().iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4OTUyNw==", "bodyText": "yes, this test never failed us", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520389527", "createdAt": "2020-11-10T08:52:17Z", "author": {"login": "lucamolteni"}, "path": "drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java", "diffHunk": "@@ -233,6 +169,47 @@ public void testFromSharingWithPropertyReactive() {\n         }\n     }\n \n+    public static String fromSharingRule() {\n+        return \"import \" + ListsContainer.class.getCanonicalName() + \"\\n\" +\n+                \"global java.util.List output1;\\n\" +\n+                \"global java.util.List output2;\\n\" +\n+                \"rule R1 when\\n\" +\n+                \"    ListsContainer( $list : list1 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output1.add($s);\\n\" +\n+                \"end\\n\" +\n+                \"rule R2 when\\n\" +\n+                \"    ListsContainer( $list : list2 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output2.add($s);\\n\" +\n+                \"end\\n\" +\n+                \"rule R3 when\\n\" +\n+                \"    ListsContainer( $list : list2 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output2.add($s);\\n\" +\n+                \"end\\n\";\n+    }\n+\n+    private static ObjectTypeNode insertObjectFireRules(InternalKnowledgeBase kbase, KieSession ksession) {\n+        final List<String> output1 = new ArrayList<>();\n+        ksession.setGlobal(\"output1\", output1);\n+        final List<String> output2 = new ArrayList<>();\n+        ksession.setGlobal(\"output2\", output2);\n+\n+        ksession.insert(new ListsContainer());\n+        ksession.fireAllRules();\n+\n+        assertEquals(\"bb\", output1.get(0));\n+        assertEquals(\"22\", output2.get(0));\n+        assertEquals(\"22\", output2.get(1));\n+\n+        final EntryPointNode epn = kbase.getRete().getEntryPointNodes().values().iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4MTYwMg=="}, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjMwNTMyOnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0MTo0MlrOHwRphw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0MTo0MlrOHwRphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4Mjg1NQ==", "bodyText": "I wonder if it would make sense to keep it as part of the test / support library for tests (but I get this is probably here to make it available to the wider code/test-base)", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520382855", "createdAt": "2020-11-10T08:41:42Z", "author": {"login": "evacchi"}, "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjMxNTM2OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0NDoyMlrOHwRvww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0NDoyMlrOHwRvww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4NDQ1MQ==", "bodyText": "What about a log (trace) message for each branch? I don't know how often this method is invoked but the value is already cached so I expect almost no overhead.\nThe main reason for this comment is that based on this simple toString value node sharing could be disabled so it could have a global perf impact", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520384451", "createdAt": "2020-11-10T08:44:22Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,8 +34,18 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            // Lambdas generated by the model-compiler have the fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) {\n+                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            } else {\n+                // Non-native image, lambda without fingerprint (manually written) node sharing is disabled\n+                lambdaFingerprint = UUID.randomUUID().toString();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43707b0c7f198abb1f73da9d919492cf60b1c8a5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzcwOTAzOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODoxMFrOHwfH4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDo1MTo0NVrOHwgQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzYxOA==", "bodyText": "@lucamolteni I'm curious.\nCan you perhaps explain what do I need to do with my lambdas to end up in this branch? Obviously, if possible, I'd love node sharing even in native mode.", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520603618", "createdAt": "2020-11-10T14:28:10Z", "author": {"login": "triceo"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3a1af701ce2e4de3219f9bb888f6069a873857"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMjI0MQ==", "bodyText": "@triceo sure\nYour lambdas need to implement this interface HashedExpression take a look at this example\nhttps://github.com/kiegroup/drools/pull/3218/files#diff-6f42e31ecf903f12bd95ae1d71869e6a7a1f10f742bf5e07299effe83d8e31d8R62", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520622241", "createdAt": "2020-11-10T14:51:45Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzYxOA=="}, "originalCommit": {"oid": "cf3a1af701ce2e4de3219f9bb888f6069a873857"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzgyOTczOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDo1Mjo1NFrOHwgUSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTowMToxMFrOHwguIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMzE3Nw==", "bodyText": "Minor improvement: instead of generating a random UUID maybe in this case we could simply return super.toString(). In this way it should return something like org.drools.model.functions.IntrospectableLambda@b268bb07, i.e. the name of the class followed by the memory address, and in this way we will keep the node sharing in case of 2 constraints using the same lambda instance (not sure if this could happen in reality though).", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520623177", "createdAt": "2020-11-10T14:52:54Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(!IS_NATIVE_IMAGE) {\n+            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n+            return LambdaPrinter.print(getLambda());\n+        } else {\n+            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n+            return UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3a1af701ce2e4de3219f9bb888f6069a873857"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyODAxMg==", "bodyText": "It can certainly happen in Constraint Streams, which may use the same predicate in multiple rules w/ the executable model.", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520628012", "createdAt": "2020-11-10T14:58:53Z", "author": {"login": "triceo"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(!IS_NATIVE_IMAGE) {\n+            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n+            return LambdaPrinter.print(getLambda());\n+        } else {\n+            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n+            return UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMzE3Nw=="}, "originalCommit": {"oid": "cf3a1af701ce2e4de3219f9bb888f6069a873857"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyOTc5Mg==", "bodyText": "done @mariofusco", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520629792", "createdAt": "2020-11-10T15:01:10Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(!IS_NATIVE_IMAGE) {\n+            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n+            return LambdaPrinter.print(getLambda());\n+        } else {\n+            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n+            return UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMzE3Nw=="}, "originalCommit": {"oid": "cf3a1af701ce2e4de3219f9bb888f6069a873857"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2266, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}