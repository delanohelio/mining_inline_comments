{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzMzMTg5", "number": 2723, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozNjowOVrODYueug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozNjowOVrODYueug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjUzOTQ2OnYy", "diffSide": "RIGHT", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjozNjowOVrOFev9xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTowMzowN1rOFeyjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4NzQ2Mg==", "bodyText": "Shouln't we use org.drools.core.base.evaluators.Operator.getAllOperators() ?", "url": "https://github.com/kiegroup/drools/pull/2723#discussion_r367787462", "createdAt": "2020-01-17T06:36:09Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -2783,7 +2784,16 @@ private static String findOperator(String expr) {\n     }\n \n     private static boolean isNotMethodName(final String expression,\n+                                           final String potentialOperator,\n                                            final int operatorPosition) {\n+        if (Objects.equals(potentialOperator, Operator.EQUAL.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.NOT_EQUAL.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.LESS.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.LESS_OR_EQUAL.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.GREATER.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.GREATER_OR_EQUAL.getOperatorString())) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea375f2be1d54d0598f35ad571681c798fec1f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyOTc2Mw==", "bodyText": "No, this addition came about due to the XLS attached to the JIRA containing a CONDITION definition traceId==(\"$param\") where there are no spaces between the operator and the value so this check failed and the parsing of the XLS lead to incorrect results.\nI only check for ==, !=, <, <=, >, >= as these cannot be the prefix to a method name whereas, for example, matches could be in the method name matchesCheese().", "url": "https://github.com/kiegroup/drools/pull/2723#discussion_r367829763", "createdAt": "2020-01-17T09:03:07Z", "author": {"login": "manstis"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -2783,7 +2784,16 @@ private static String findOperator(String expr) {\n     }\n \n     private static boolean isNotMethodName(final String expression,\n+                                           final String potentialOperator,\n                                            final int operatorPosition) {\n+        if (Objects.equals(potentialOperator, Operator.EQUAL.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.NOT_EQUAL.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.LESS.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.LESS_OR_EQUAL.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.GREATER.getOperatorString()) ||\n+                Objects.equals(potentialOperator, Operator.GREATER_OR_EQUAL.getOperatorString())) {\n+            return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4NzQ2Mg=="}, "originalCommit": {"oid": "9ea375f2be1d54d0598f35ad571681c798fec1f9"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2622, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}