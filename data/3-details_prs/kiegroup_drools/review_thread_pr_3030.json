{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTE2NzY1", "number": 3030, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoyMDoxNlrOEVPhDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoyMDoxNlrOEVPhDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzA5Nzc0OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNModelTypesIndex.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoyMDoxNlrOG74smg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjowOTo0OFrOG8gtmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0ODA5MA==", "bodyText": "Don't index a collection type of a declared type (e.g. tPersonList which is a collection of tPerson in testTopLevelTypeCollection) because it will be a Collection<TPerson> field in InputSet.\nOn the other hand, a collection of a composite structure (e.g. tPairList which is a collection of composite of string and number in testTopLevelCompositeCollection) will generate a Java class of the composite structure. The collection will be a Collection<TPairList> field in InputSet. (btw, in this case, we may want to name the type \"tPair\" rather than \"tPairList\". But I chose \"tPairList\" because it looks natural in the DMN itself)", "url": "https://github.com/kiegroup/drools/pull/3030#discussion_r465448090", "createdAt": "2020-08-05T03:20:16Z", "author": {"login": "tkobayas"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNModelTypesIndex.java", "diffHunk": "@@ -61,7 +61,8 @@ public void createIndex() {\n     }\n \n     private boolean shouldIndex(DMNType dmnType) {\n-        return !dmnType.getNamespace().equals(model.getDefinitions().getURIFEEL()) && dmnType.isComposite();\n+        // Don't index a collection type of a declared type. e.g. tPersonList which is a collection of tPerson\n+        return !dmnType.getNamespace().equals(model.getDefinitions().getURIFEEL()) && dmnType.isComposite() && !(dmnType.isCollection() && dmnType.getBaseType() != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df1f9dcd134d71baded69c61338778e7c554e186"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NzUyNQ==", "bodyText": "Makes sense, thank you for this fix @tkobayas !\nWe might need to further check indexing when dealing with collection of collection (of collection)* later\nBut it's comforting to know it now works in the most common use cases thanks to this fix!", "url": "https://github.com/kiegroup/drools/pull/3030#discussion_r465987525", "createdAt": "2020-08-05T20:34:10Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNModelTypesIndex.java", "diffHunk": "@@ -61,7 +61,8 @@ public void createIndex() {\n     }\n \n     private boolean shouldIndex(DMNType dmnType) {\n-        return !dmnType.getNamespace().equals(model.getDefinitions().getURIFEEL()) && dmnType.isComposite();\n+        // Don't index a collection type of a declared type. e.g. tPersonList which is a collection of tPerson\n+        return !dmnType.getNamespace().equals(model.getDefinitions().getURIFEEL()) && dmnType.isComposite() && !(dmnType.isCollection() && dmnType.getBaseType() != null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0ODA5MA=="}, "originalCommit": {"oid": "df1f9dcd134d71baded69c61338778e7c554e186"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMzcwNg==", "bodyText": "We might need to further check indexing when dealing with collection of collection (of collection)* later\n\nSure, filed a JIRA https://issues.redhat.com/browse/DROOLS-5561", "url": "https://github.com/kiegroup/drools/pull/3030#discussion_r466103706", "createdAt": "2020-08-06T02:09:48Z", "author": {"login": "tkobayas"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNModelTypesIndex.java", "diffHunk": "@@ -61,7 +61,8 @@ public void createIndex() {\n     }\n \n     private boolean shouldIndex(DMNType dmnType) {\n-        return !dmnType.getNamespace().equals(model.getDefinitions().getURIFEEL()) && dmnType.isComposite();\n+        // Don't index a collection type of a declared type. e.g. tPersonList which is a collection of tPerson\n+        return !dmnType.getNamespace().equals(model.getDefinitions().getURIFEEL()) && dmnType.isComposite() && !(dmnType.isCollection() && dmnType.getBaseType() != null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0ODA5MA=="}, "originalCommit": {"oid": "df1f9dcd134d71baded69c61338778e7c554e186"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2416, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}