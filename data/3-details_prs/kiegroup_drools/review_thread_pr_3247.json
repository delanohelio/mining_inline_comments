{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzQ5Mjgx", "number": 3247, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo0NzozN1rOE66g2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo0NzozN1rOE66g2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjExNTQ2OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/ConstraintEvaluator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo0NzozN1rOH2QZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODowOTowOVrOH2RClw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MzkxMw==", "bodyText": "@mariofusco These two lines (among others) are a great example that maybe Drools would benefit from a consistent code style.\nIn OptaPlanner, we've employed this plugin, which enforces a consistent (and configurable) code style during the build, just like Quarkus does:\nhttps://code.revelc.net/formatter-maven-plugin/\nMaybe you could consider that too? (Just a suggestion.)", "url": "https://github.com/kiegroup/drools/pull/3247#discussion_r526653913", "createdAt": "2020-11-19T07:47:37Z", "author": {"login": "triceo"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/ConstraintEvaluator.java", "diffHunk": "@@ -226,4 +214,109 @@ public boolean isTemporal() {\n     public Interval getInterval() {\n         throw new UnsupportedOperationException();\n     }\n+\n+    protected void setPatternDeclaration( Declaration patternDeclaration ) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    static abstract class InnerEvaluator {\n+\n+        private final Declaration patternDeclaration;\n+\n+        protected InnerEvaluator( Declaration patternDeclaration ) {\n+            this.patternDeclaration = patternDeclaration;\n+        }\n+\n+        public abstract boolean evaluate( InternalFactHandle handle, InternalWorkingMemory workingMemory ) throws Exception;\n+        public abstract boolean evaluate(InternalFactHandle handle, Tuple tuple, InternalWorkingMemory workingMemory) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19bbce726a1751fb651e26e0c8eb5f26a293f0b"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY2MDUyMg==", "bodyText": "@triceo this is a good suggestion, indeed. I just don't want that a formatter plugin will make the whole build to fail only for of a formatting inconsistency like this, also because this will increase the barrier for eventual external contributors. Is this the case? Or maybe is the plugin configurable?", "url": "https://github.com/kiegroup/drools/pull/3247#discussion_r526660522", "createdAt": "2020-11-19T08:01:14Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/ConstraintEvaluator.java", "diffHunk": "@@ -226,4 +214,109 @@ public boolean isTemporal() {\n     public Interval getInterval() {\n         throw new UnsupportedOperationException();\n     }\n+\n+    protected void setPatternDeclaration( Declaration patternDeclaration ) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    static abstract class InnerEvaluator {\n+\n+        private final Declaration patternDeclaration;\n+\n+        protected InnerEvaluator( Declaration patternDeclaration ) {\n+            this.patternDeclaration = patternDeclaration;\n+        }\n+\n+        public abstract boolean evaluate( InternalFactHandle handle, InternalWorkingMemory workingMemory ) throws Exception;\n+        public abstract boolean evaluate(InternalFactHandle handle, Tuple tuple, InternalWorkingMemory workingMemory) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MzkxMw=="}, "originalCommit": {"oid": "f19bbce726a1751fb651e26e0c8eb5f26a293f0b"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY2NDM0Mw==", "bodyText": "I believe you can configure the plugin to not fail when it has to reformat code, but at the same time, I believe it defeats the purpose, as unformatted code can still hit the repo.\nSee more on Quarkus Github:\nhttps://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#ide-config-and-code-style", "url": "https://github.com/kiegroup/drools/pull/3247#discussion_r526664343", "createdAt": "2020-11-19T08:09:09Z", "author": {"login": "triceo"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/ConstraintEvaluator.java", "diffHunk": "@@ -226,4 +214,109 @@ public boolean isTemporal() {\n     public Interval getInterval() {\n         throw new UnsupportedOperationException();\n     }\n+\n+    protected void setPatternDeclaration( Declaration patternDeclaration ) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    static abstract class InnerEvaluator {\n+\n+        private final Declaration patternDeclaration;\n+\n+        protected InnerEvaluator( Declaration patternDeclaration ) {\n+            this.patternDeclaration = patternDeclaration;\n+        }\n+\n+        public abstract boolean evaluate( InternalFactHandle handle, InternalWorkingMemory workingMemory ) throws Exception;\n+        public abstract boolean evaluate(InternalFactHandle handle, Tuple tuple, InternalWorkingMemory workingMemory) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MzkxMw=="}, "originalCommit": {"oid": "f19bbce726a1751fb651e26e0c8eb5f26a293f0b"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2285, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}