{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzI3MzIy", "number": 3276, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo1NDo0N1rOFX13Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo1NTozNVrOFX14jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwNTQ0MDc4OnYy", "diffSide": "RIGHT", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/ExpressionEvaluatorResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo1NDo0N1rOIhhlkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo1NDo0N1rOIhhlkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDIwOA==", "bodyText": "Will it be a problem for i18n that these are only in English?", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r572024208", "createdAt": "2021-02-08T12:54:47Z", "author": {"login": "Rikkola"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/ExpressionEvaluatorResult.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.expression;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This DTO holds info related to an expression evaluation.\n+ * - successful: field represents status of involved evaluation (successful or failed);\n+ * - pathToWrongValue: a list which contains the steps to describe the wrong value. In case of nested object or collections,\n+ *                     can require multiple steps (eg. Author.books). In case of a list, conversion is to report the Item\n+ *                     number (eg. Author.books.Item(2).isAvailable)\n+ * - wrongValue: The actual wrong value\n+ * Instantiated objects can be accessed only to retrieve the success status and to generate an error message, if evaluation\n+ * failed, based on wrongValue and its path.\n+ */\n+public class ExpressionEvaluatorResult {\n+\n+    private boolean successful;\n+    private String wrongValue;\n+    private List<String> pathToWrongValue;\n+\n+    public static ExpressionEvaluatorResult of(boolean successful) {\n+        return new ExpressionEvaluatorResult(successful);\n+    }\n+\n+    public static ExpressionEvaluatorResult ofSuccessful() {\n+        return new ExpressionEvaluatorResult(true);\n+    }\n+\n+    public static ExpressionEvaluatorResult ofFailed() {\n+        return new ExpressionEvaluatorResult(false);\n+    }\n+\n+    public static ExpressionEvaluatorResult ofFailed(String wrongValue, String wrongValueField) {\n+        return new ExpressionEvaluatorResult(false, wrongValue, wrongValueField);\n+    }\n+\n+    private ExpressionEvaluatorResult(boolean successful, String wrongValue, String wrongValueField) {\n+        this.successful = successful;\n+        this.pathToWrongValue = new ArrayList<>();\n+        this.addFieldItemStepToPath(wrongValueField);\n+        this.wrongValue = wrongValue;\n+    }\n+\n+    private ExpressionEvaluatorResult(boolean successful) {\n+        this.successful = successful;\n+        this.pathToWrongValue = new ArrayList<>();\n+        this.wrongValue = null;\n+    }\n+\n+    public boolean isSuccessful() {\n+        return successful;\n+    }\n+\n+    public void addFieldItemStepToPath(String fieldName) {\n+        pathToWrongValue.add(0, \"Field \\\"\" + fieldName+ \"\\\"\");\n+    }\n+\n+    public void addListItemStepToPath(int elementNumber) {\n+        pathToWrongValue.add(0, \"List's item: \" + elementNumber);\n+    }\n+\n+    public void addMapItemStepToPath(String key) {\n+        pathToWrongValue.add(0, \"Map item with \\\"\" + key + \"\\\" key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwNTQ0Mzk5OnYy", "diffSide": "RIGHT", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxMjo1NTozNVrOIhhnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMToyNzozNFrOImCHvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDY4Nw==", "bodyText": "Same thing in this class. i18n might be an issue.", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r572024687", "createdAt": "2021-02-08T12:55:35Z", "author": {"login": "Rikkola"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.util;\n+\n+import java.util.List;\n+\n+public class ScenarioSimulationBackendMessages {\n+\n+    private ScenarioSimulationBackendMessages() {\n+        // Util class - Not instantiable\n+    }\n+\n+    public static String getGenericCollectionErrorMessage() {\n+        return \"Impossible to find elements in the collection to satisfy the conditions.\";\n+    }\n+\n+    public static String getCollectionHTMLErrorMessage(String wrongValue, List<String> pathToWrongValue) {\n+        if (wrongValue == null) {\n+            return getCollectionWithoutWrongValueHTMLErrorMessage(pathToWrongValue);\n+        }\n+        return \"Value <strong>\\\"\" + wrongValue + \"\\\"</strong>\" +\n+                \" is wrong inside:\\n\" +\n+                \"<em>\" + String.join(\"\\n\", pathToWrongValue) + \"</em>\";\n+    }\n+\n+    private static String getCollectionWithoutWrongValueHTMLErrorMessage(List<String> pathToWrongValue) {\n+        if (pathToWrongValue == null || pathToWrongValue.isEmpty()) {\n+            return getGenericCollectionErrorMessage();\n+        }\n+        return \"Following path is wrong:\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTE0NTc4MA==", "bodyText": "@Rikkola Thank you for spotting, you're right. Usually, I can easily manage i18n on the front end side, but how I should manage it backend side?", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r575145780", "createdAt": "2021-02-12T11:04:18Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.util;\n+\n+import java.util.List;\n+\n+public class ScenarioSimulationBackendMessages {\n+\n+    private ScenarioSimulationBackendMessages() {\n+        // Util class - Not instantiable\n+    }\n+\n+    public static String getGenericCollectionErrorMessage() {\n+        return \"Impossible to find elements in the collection to satisfy the conditions.\";\n+    }\n+\n+    public static String getCollectionHTMLErrorMessage(String wrongValue, List<String> pathToWrongValue) {\n+        if (wrongValue == null) {\n+            return getCollectionWithoutWrongValueHTMLErrorMessage(pathToWrongValue);\n+        }\n+        return \"Value <strong>\\\"\" + wrongValue + \"\\\"</strong>\" +\n+                \" is wrong inside:\\n\" +\n+                \"<em>\" + String.join(\"\\n\", pathToWrongValue) + \"</em>\";\n+    }\n+\n+    private static String getCollectionWithoutWrongValueHTMLErrorMessage(List<String> pathToWrongValue) {\n+        if (pathToWrongValue == null || pathToWrongValue.isEmpty()) {\n+            return getGenericCollectionErrorMessage();\n+        }\n+        return \"Following path is wrong:\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDY4Nw=="}, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTIwNTg2OQ==", "bodyText": "@yesamer @Rikkola My suggestion would to return keys/maps from the backend, and consume I18n API in the front end :-)", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r575205869", "createdAt": "2021-02-12T12:59:38Z", "author": {"login": "karreiro"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.util;\n+\n+import java.util.List;\n+\n+public class ScenarioSimulationBackendMessages {\n+\n+    private ScenarioSimulationBackendMessages() {\n+        // Util class - Not instantiable\n+    }\n+\n+    public static String getGenericCollectionErrorMessage() {\n+        return \"Impossible to find elements in the collection to satisfy the conditions.\";\n+    }\n+\n+    public static String getCollectionHTMLErrorMessage(String wrongValue, List<String> pathToWrongValue) {\n+        if (wrongValue == null) {\n+            return getCollectionWithoutWrongValueHTMLErrorMessage(pathToWrongValue);\n+        }\n+        return \"Value <strong>\\\"\" + wrongValue + \"\\\"</strong>\" +\n+                \" is wrong inside:\\n\" +\n+                \"<em>\" + String.join(\"\\n\", pathToWrongValue) + \"</em>\";\n+    }\n+\n+    private static String getCollectionWithoutWrongValueHTMLErrorMessage(List<String> pathToWrongValue) {\n+        if (pathToWrongValue == null || pathToWrongValue.isEmpty()) {\n+            return getGenericCollectionErrorMessage();\n+        }\n+        return \"Following path is wrong:\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDY4Nw=="}, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTI2MjgwNg==", "bodyText": "@Rikkola @karreiro Can you please point me an example? :)", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r575262806", "createdAt": "2021-02-12T14:27:35Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.util;\n+\n+import java.util.List;\n+\n+public class ScenarioSimulationBackendMessages {\n+\n+    private ScenarioSimulationBackendMessages() {\n+        // Util class - Not instantiable\n+    }\n+\n+    public static String getGenericCollectionErrorMessage() {\n+        return \"Impossible to find elements in the collection to satisfy the conditions.\";\n+    }\n+\n+    public static String getCollectionHTMLErrorMessage(String wrongValue, List<String> pathToWrongValue) {\n+        if (wrongValue == null) {\n+            return getCollectionWithoutWrongValueHTMLErrorMessage(pathToWrongValue);\n+        }\n+        return \"Value <strong>\\\"\" + wrongValue + \"\\\"</strong>\" +\n+                \" is wrong inside:\\n\" +\n+                \"<em>\" + String.join(\"\\n\", pathToWrongValue) + \"</em>\";\n+    }\n+\n+    private static String getCollectionWithoutWrongValueHTMLErrorMessage(List<String> pathToWrongValue) {\n+        if (pathToWrongValue == null || pathToWrongValue.isEmpty()) {\n+            return getGenericCollectionErrorMessage();\n+        }\n+        return \"Following path is wrong:\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDY4Nw=="}, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc0MjEzMQ==", "bodyText": "@yesamer Yes what @karreiro said. I do this with Verification. For the errors/warnings/info messages I have an ID for each type that is just an enum. Then in the client side I have a Report Generator that gets a message based on the ID. If the message template needs variable, I have them in the message object.\nIn the example I produce HTML, but might as well just use the same for more simple i18n.\nhttps://github.com/kiegroup/kie-wb-common/blob/master/kie-wb-common-services/kie-wb-common-verifier/kie-wb-common-verifier-reporting-client/src/main/java/org/kie/workbench/common/services/verifier/reporting/client/reporting/ExplanationProvider.java", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r576742131", "createdAt": "2021-02-16T11:11:49Z", "author": {"login": "Rikkola"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.util;\n+\n+import java.util.List;\n+\n+public class ScenarioSimulationBackendMessages {\n+\n+    private ScenarioSimulationBackendMessages() {\n+        // Util class - Not instantiable\n+    }\n+\n+    public static String getGenericCollectionErrorMessage() {\n+        return \"Impossible to find elements in the collection to satisfy the conditions.\";\n+    }\n+\n+    public static String getCollectionHTMLErrorMessage(String wrongValue, List<String> pathToWrongValue) {\n+        if (wrongValue == null) {\n+            return getCollectionWithoutWrongValueHTMLErrorMessage(pathToWrongValue);\n+        }\n+        return \"Value <strong>\\\"\" + wrongValue + \"\\\"</strong>\" +\n+                \" is wrong inside:\\n\" +\n+                \"<em>\" + String.join(\"\\n\", pathToWrongValue) + \"</em>\";\n+    }\n+\n+    private static String getCollectionWithoutWrongValueHTMLErrorMessage(List<String> pathToWrongValue) {\n+        if (pathToWrongValue == null || pathToWrongValue.isEmpty()) {\n+            return getGenericCollectionErrorMessage();\n+        }\n+        return \"Following path is wrong:\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDY4Nw=="}, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc1MTU1MA==", "bodyText": "@Rikkola Thank you, I moved all messages on the client-side and managed them with i18n.", "url": "https://github.com/kiegroup/drools/pull/3276#discussion_r576751550", "createdAt": "2021-02-16T11:27:34Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioSimulationBackendMessages.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.scenariosimulation.backend.util;\n+\n+import java.util.List;\n+\n+public class ScenarioSimulationBackendMessages {\n+\n+    private ScenarioSimulationBackendMessages() {\n+        // Util class - Not instantiable\n+    }\n+\n+    public static String getGenericCollectionErrorMessage() {\n+        return \"Impossible to find elements in the collection to satisfy the conditions.\";\n+    }\n+\n+    public static String getCollectionHTMLErrorMessage(String wrongValue, List<String> pathToWrongValue) {\n+        if (wrongValue == null) {\n+            return getCollectionWithoutWrongValueHTMLErrorMessage(pathToWrongValue);\n+        }\n+        return \"Value <strong>\\\"\" + wrongValue + \"\\\"</strong>\" +\n+                \" is wrong inside:\\n\" +\n+                \"<em>\" + String.join(\"\\n\", pathToWrongValue) + \"</em>\";\n+    }\n+\n+    private static String getCollectionWithoutWrongValueHTMLErrorMessage(List<String> pathToWrongValue) {\n+        if (pathToWrongValue == null || pathToWrongValue.isEmpty()) {\n+            return getGenericCollectionErrorMessage();\n+        }\n+        return \"Following path is wrong:\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAyNDY4Nw=="}, "originalCommit": {"oid": "954747239e7d56e830b9d141baef2d55fd551ef7"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2210, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}