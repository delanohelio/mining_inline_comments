{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDMxNjM3", "number": 3162, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo1OToxOFrOEs5GPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNzowNlrOEtaxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA4Mjg0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo1OToxOFrOHgX_7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNzoyNlrOHhFE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTY3Ng==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503709676", "createdAt": "2020-10-13T06:59:18Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0ODI0NA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504448244", "createdAt": "2020-10-14T07:07:26Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTY3Ng=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA5NzY0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-dependencies/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzowMzo0N1rOHgYIww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNzo1MlrOHhFF1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMTkzOQ==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503711939", "createdAt": "2020-10-13T07:03:47Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-dependencies/pom.xml", "diffHunk": "@@ -20,9 +20,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0ODQ2OA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504448468", "createdAt": "2020-10-14T07:07:52Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-dependencies/pom.xml", "diffHunk": "@@ -20,9 +20,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMTkzOQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEwMDM0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-api/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzowNDozN1rOHgYKYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowODoxNVrOHhFGqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMjM1Mw==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503712353", "createdAt": "2020-10-13T07:04:37Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-api/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0ODY4MQ==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504448681", "createdAt": "2020-10-14T07:08:15Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-api/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMjM1Mw=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEyNTI1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxMjoyMVrOHgYY8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzozNjowN1rOHhGA2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjA4MQ==", "bodyText": "To be removed? It is a mock", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503716081", "createdAt": "2020-10-13T07:12:21Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.converters;\n+\n+import org.kie.pmml.api.models.PMMLModelImpl;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+public class PMMLModelConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2MzU3OA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504463578", "createdAt": "2020-10-14T07:36:07Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.converters;\n+\n+import org.kie.pmml.api.models.PMMLModelImpl;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+public class PMMLModelConverter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjA4MQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEyODYyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxMzoyN1rOHgYbGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0Mzo1MFrOHhGRbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjYzNA==", "bodyText": "Are you sure the generic should be PMMLRuntimeInternal and not PMMLRuntime?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503716634", "createdAt": "2020-10-13T07:13:27Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java", "diffHunk": "@@ -17,18 +17,18 @@\n \n import org.kie.api.KieBase;\n import org.kie.api.internal.runtime.KieRuntimeService;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntimeInternal;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n \n-public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntime> {\n+public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntimeInternal> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NzgyMg==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504467822", "createdAt": "2020-10-14T07:43:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java", "diffHunk": "@@ -17,18 +17,18 @@\n \n import org.kie.api.KieBase;\n import org.kie.api.internal.runtime.KieRuntimeService;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntimeInternal;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n \n-public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntime> {\n+public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntimeInternal> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjYzNA=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEzMTEwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxNDoxNVrOHgYctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0NTo1MFrOHhGWEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzA0Nw==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503717047", "createdAt": "2020-10-13T07:14:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2OTAwOA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504469008", "createdAt": "2020-10-14T07:45:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzA0Nw=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEzMjAzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxNDozNFrOHgYdSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0NjoxOVrOHhGXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzE5NA==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503717194", "createdAt": "2020-10-13T07:14:34Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2OTI4MA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504469280", "createdAt": "2020-10-14T07:46:19Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzE5NA=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEzMzQ3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models-drools-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxNDo1OFrOHgYeGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0NzoxNlrOHhGZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzQwMw==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503717403", "createdAt": "2020-10-13T07:14:58Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models-drools-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2OTgyNA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504469824", "createdAt": "2020-10-14T07:47:16Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models-drools-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzQwMw=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEzNDkyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models-drools-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxNToxNVrOHgYe3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0Nzo1OFrOHhGawA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzU5OA==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503717598", "createdAt": "2020-10-13T07:15:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models-drools-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3MDIwOA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504470208", "createdAt": "2020-10-14T07:47:58Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models-drools-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzU5OA=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE0MTEyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxNjo0NlrOHgYiTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0OToyNlrOHhGd5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxODQ3OQ==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503718479", "createdAt": "2020-10-13T07:16:46Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3MTAxMw==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504471013", "createdAt": "2020-10-14T07:49:26Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxODQ3OQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE0NjU4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxODoyNlrOHgYlkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0OToyOVrOHhGeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxOTMxNQ==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503719315", "createdAt": "2020-10-13T07:18:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3MTA2NA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504471064", "createdAt": "2020-10-14T07:49:29Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxOTMxNQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE1MDAzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxOToyNFrOHgYnsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0OTozOFrOHhGeZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxOTg1OQ==", "bodyText": "Fix dependency", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503719859", "createdAt": "2020-10-13T07:19:24Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3MTE0Mw==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504471143", "createdAt": "2020-10-14T07:49:38Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-model/pom.xml", "diffHunk": "@@ -15,9 +15,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxOTg1OQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE2MDc4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMjoxOVrOHgYuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1NDo1MlrOHhGqlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxMg==", "bodyText": "To be reverted?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503721512", "createdAt": "2020-10-13T07:22:19Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "diffHunk": "@@ -151,7 +152,12 @@ public void getKiePMMLRegressionModelClasses() throws IOException, IllegalAccess\n     public void getKiePMMLRegressionModelSourcesMap() throws IOException {\n         Map<String, String> retrieved = KiePMMLRegressionModelFactory.getKiePMMLRegressionModelSourcesMap(dataDictionary, transformationDictionary, regressionModel, PACKAGE_NAME);\n         assertNotNull(retrieved);\n-        int expectedSize = regressionTables.size() + 2; // One for classification and one for the whole model\n+//        int miningFields = regressionModel.getMiningSchema() != null ? regressionModel.getMiningSchema().getMiningFields().size() : 0;\n+//        int outputFields = regressionModel.getOutput() != null ? regressionModel.getOutput().getOutputFields().size() : 0;\n+        int expectedSize = regressionTables.size()\n+//                + miningFields  // for each MiningField an \"add\" statement is created\n+//                + outputFields  // for each OutputField an \"add\" statement is created\n+                + 2; // One for classification and one for the whole model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NDI2MQ==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504474261", "createdAt": "2020-10-14T07:54:52Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "diffHunk": "@@ -151,7 +152,12 @@ public void getKiePMMLRegressionModelClasses() throws IOException, IllegalAccess\n     public void getKiePMMLRegressionModelSourcesMap() throws IOException {\n         Map<String, String> retrieved = KiePMMLRegressionModelFactory.getKiePMMLRegressionModelSourcesMap(dataDictionary, transformationDictionary, regressionModel, PACKAGE_NAME);\n         assertNotNull(retrieved);\n-        int expectedSize = regressionTables.size() + 2; // One for classification and one for the whole model\n+//        int miningFields = regressionModel.getMiningSchema() != null ? regressionModel.getMiningSchema().getMiningFields().size() : 0;\n+//        int outputFields = regressionModel.getOutput() != null ? regressionModel.getOutput().getOutputFields().size() : 0;\n+        int expectedSize = regressionTables.size()\n+//                + miningFields  // for each MiningField an \"add\" statement is created\n+//                + outputFields  // for each OutputField an \"add\" statement is created\n+                + 2; // One for classification and one for the whole model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxMg=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE2Mjc2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMjo0OVrOHgYvTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1NToyM1rOHhGsAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTgwNg==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503721806", "createdAt": "2020-10-13T07:22:49Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-model/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NDYyNw==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504474627", "createdAt": "2020-10-14T07:55:23Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-model/pom.xml", "diffHunk": "@@ -17,9 +17,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTgwNg=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIyMDU1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozNzowN1rOHgZSVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1NToyN1rOHhGsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMDc3Mg==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503730772", "createdAt": "2020-10-13T07:37:07Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/pom.xml", "diffHunk": "@@ -19,9 +19,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NDY5Mw==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504474693", "createdAt": "2020-10-14T07:55:27Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/pom.xml", "diffHunk": "@@ -19,9 +19,13 @@\n   <dependencies>\n     <!-- PMML -->\n     <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+</dependency>\n+<dependency>\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-commons</artifactId>\n-    </dependency>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMDc3Mg=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIzMTQwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozOTo1M1rOHgZY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1NjowMVrOHhGtsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjQ3OA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503732478", "createdAt": "2020-10-13T07:39:53Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -114,37 +117,63 @@ public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary data\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n-        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(className,\n-                       constructorDeclaration,\n+        setConstructor(model,\n+                        constructorDeclaration,\n                        targetFieldName,\n-                       MINING_FUNCTION.byName(model.getMiningFunction().value()),\n-                       modelName,\n                        segmentationClass);\n-        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addKiePMMLOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n         addTransformationsInClassOrInterfaceDeclaration(modelTemplate, transformationDictionary, model.getLocalTransformations());\n         toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n         return toReturn;\n     }\n \n-    static void setConstructor(final String generatedClassName,\n+    static void setConstructor(final MiningModel miningModel,\n                                final ConstructorDeclaration constructorDeclaration,\n                                final String targetField,\n-                               final MINING_FUNCTION miningFunction,\n-                               final String modelName,\n                                final String segmentationClass) {\n-        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n+        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(miningModel.getMiningSchema());\n+        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(miningModel.getOutput());\n+        setKiePMMLModelConstructor(getSanitizedClassName(miningModel.getModelName()), constructorDeclaration, miningModel.getModelName(), miningFields, outputFields);\n+        Expression miningFunctionExpression;\n+        if (miningModel.getMiningFunction() != null) {\n+            MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(miningModel.getMiningFunction().value());\n+            miningFunctionExpression = new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name());\n+        } else {\n+            miningFunctionExpression = new NullLiteralExpr();\n+        }\n         final BlockStmt body = constructorDeclaration.getBody();\n         CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n-        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", miningFunctionExpression);\n         CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n         ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n         ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n         objectCreationExpr.setType(kiePMMLSegmentationClass);\n         CommonCodegenUtils.setAssignExpressionValue(body, \"segmentation\", objectCreationExpr);\n     }\n \n+//\n+//    static void setConstructor(final String generatedClassName,\n+//                               final ConstructorDeclaration constructorDeclaration,\n+//                               final String targetField,\n+//                               final MINING_FUNCTION miningFunction,\n+//                               final String modelName,\n+//                               final String segmentationClass) {\n+//        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(treeModel.getMiningSchema());\n+//        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(treeModel.getOutput());\n+//        setKiePMMLModelConstructor(generatedClassName, constructorDeclaration, modelName, miningFields, outputFields);\n+//\n+////        setKiePMMLModelConstructor(generatedClassName, constructorDeclaration, modelName);\n+//        final BlockStmt body = constructorDeclaration.getBody();\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n+//        ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n+//        ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+//        objectCreationExpr.setType(kiePMMLSegmentationClass);\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"segmentation\", objectCreationExpr);\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NTA1Ng==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504475056", "createdAt": "2020-10-14T07:56:01Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -114,37 +117,63 @@ public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary data\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n-        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(className,\n-                       constructorDeclaration,\n+        setConstructor(model,\n+                        constructorDeclaration,\n                        targetFieldName,\n-                       MINING_FUNCTION.byName(model.getMiningFunction().value()),\n-                       modelName,\n                        segmentationClass);\n-        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addKiePMMLOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n         addTransformationsInClassOrInterfaceDeclaration(modelTemplate, transformationDictionary, model.getLocalTransformations());\n         toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n         return toReturn;\n     }\n \n-    static void setConstructor(final String generatedClassName,\n+    static void setConstructor(final MiningModel miningModel,\n                                final ConstructorDeclaration constructorDeclaration,\n                                final String targetField,\n-                               final MINING_FUNCTION miningFunction,\n-                               final String modelName,\n                                final String segmentationClass) {\n-        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n+        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(miningModel.getMiningSchema());\n+        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(miningModel.getOutput());\n+        setKiePMMLModelConstructor(getSanitizedClassName(miningModel.getModelName()), constructorDeclaration, miningModel.getModelName(), miningFields, outputFields);\n+        Expression miningFunctionExpression;\n+        if (miningModel.getMiningFunction() != null) {\n+            MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(miningModel.getMiningFunction().value());\n+            miningFunctionExpression = new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name());\n+        } else {\n+            miningFunctionExpression = new NullLiteralExpr();\n+        }\n         final BlockStmt body = constructorDeclaration.getBody();\n         CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n-        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", miningFunctionExpression);\n         CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n         ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n         ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n         objectCreationExpr.setType(kiePMMLSegmentationClass);\n         CommonCodegenUtils.setAssignExpressionValue(body, \"segmentation\", objectCreationExpr);\n     }\n \n+//\n+//    static void setConstructor(final String generatedClassName,\n+//                               final ConstructorDeclaration constructorDeclaration,\n+//                               final String targetField,\n+//                               final MINING_FUNCTION miningFunction,\n+//                               final String modelName,\n+//                               final String segmentationClass) {\n+//        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(treeModel.getMiningSchema());\n+//        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(treeModel.getOutput());\n+//        setKiePMMLModelConstructor(generatedClassName, constructorDeclaration, modelName, miningFields, outputFields);\n+//\n+////        setKiePMMLModelConstructor(generatedClassName, constructorDeclaration, modelName);\n+//        final BlockStmt body = constructorDeclaration.getBody();\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n+//        ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n+//        ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+//        objectCreationExpr.setType(kiePMMLSegmentationClass);\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"segmentation\", objectCreationExpr);\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjQ3OA=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIzMjgxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MDoxMFrOHgZZ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1Njo1MVrOHhGvxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjY5Mw==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503732693", "createdAt": "2020-10-13T07:40:10Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -114,37 +117,63 @@ public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary data\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n-        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(className,\n-                       constructorDeclaration,\n+        setConstructor(model,\n+                        constructorDeclaration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NTU5MQ==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504475591", "createdAt": "2020-10-14T07:56:51Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -114,37 +117,63 @@ public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary data\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n-        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(className,\n-                       constructorDeclaration,\n+        setConstructor(model,\n+                        constructorDeclaration,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjY5Mw=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI0MDQ2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MjowMlrOHgZeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowMTowM1rOHhG6eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzg1OQ==", "bodyText": "Where is this used?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503733859", "createdAt": "2020-10-13T07:42:02Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java", "diffHunk": "@@ -145,6 +160,17 @@ protected void executeTransformations(final KiePMMLModel model, final PMMLContex\n         });\n     }\n \n+    PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n+        String correlationId = \"CORRELATION_ID\";\n+        PMMLRequestDataBuilder pmmlRequestDataBuilder = new PMMLRequestDataBuilder(correlationId, modelName);\n+        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n+            Object pValue = entry.getValue();\n+            Class class1 = pValue.getClass();\n+            pmmlRequestDataBuilder.addParameter(entry.getKey(), pValue, class1);\n+        }\n+        return pmmlRequestDataBuilder.build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODMyOQ==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504478329", "createdAt": "2020-10-14T08:01:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java", "diffHunk": "@@ -145,6 +160,17 @@ protected void executeTransformations(final KiePMMLModel model, final PMMLContex\n         });\n     }\n \n+    PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n+        String correlationId = \"CORRELATION_ID\";\n+        PMMLRequestDataBuilder pmmlRequestDataBuilder = new PMMLRequestDataBuilder(correlationId, modelName);\n+        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n+            Object pValue = entry.getValue();\n+            Class class1 = pValue.getClass();\n+            pmmlRequestDataBuilder.addParameter(entry.getKey(), pValue, class1);\n+        }\n+        return pmmlRequestDataBuilder.build();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzg1OQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI1MDc2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0NDo0NFrOHgZkpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowNDo1MlrOHhHDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNTQ2MQ==", "bodyText": "Where is it used?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503735461", "createdAt": "2020-10-13T07:44:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/pom.xml", "diffHunk": "@@ -45,6 +45,11 @@\n       <groupId>org.drools</groupId>\n       <artifactId>drools-model-compiler</artifactId>\n     </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MDU4Nw==", "bodyText": "@danielezonca\nPMMLRuntimeFactoryImpl.getPMMLFileFromClasspath\nIf there is a similar method in the current classpath, pls let me know.\nThe only one I found is inside kie-testing module but, being a \"testing\" module, I do not want to depend on it at runtime", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504480587", "createdAt": "2020-10-14T08:04:52Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/pom.xml", "diffHunk": "@@ -45,6 +45,11 @@\n       <groupId>org.drools</groupId>\n       <artifactId>drools-model-compiler</artifactId>\n     </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNTQ2MQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI2MzM2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-api/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0ODowMFrOHgZsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowNToyNVrOHhHEoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNzQxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <description>Public APIs fro Trusty PMML</description>\n          \n          \n            \n              <description>Public APIs for Trusty PMML</description>", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503737419", "createdAt": "2020-10-13T07:48:00Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-api/pom.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-trusty</artifactId>\n+    <groupId>org.kie</groupId>\n+    <version>7.45.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-api</artifactId>\n+\n+  <name>KIE :: PMML :: API</name>\n+  <description>Public APIs fro Trusty PMML</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MDkyOA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504480928", "createdAt": "2020-10-14T08:05:25Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-api/pom.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-trusty</artifactId>\n+    <groupId>org.kie</groupId>\n+    <version>7.45.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-api</artifactId>\n+\n+  <name>KIE :: PMML :: API</name>\n+  <description>Public APIs fro Trusty PMML</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNzQxOQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI5OTI4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo1Njo1NVrOHgaCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTo0MDoyMVrOHhO2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0Mjk5NQ==", "bodyText": "How is the user supposed to obtain an instance of this interface? Do you expect an explicit\nPMMLRuntimeFactory factory = new PMMLRuntimeFactoryImpl();\n?\nWhat about add a kie.conf for PMMLRuntimeFactoryImpl and then replicate the same mechanism of KieServices?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503742995", "createdAt": "2020-10-13T07:56:55Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjIyOQ==", "bodyText": "@danielezonca\nFor the moment being it is\nPMMLRuntimeFactory factory = new PMMLRuntimeFactoryImpl(); \nAgree about kie.conf, but it need some time to rewrite/test - moreover would break the \"encapsulation\" as it currently is, that I like", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504482229", "createdAt": "2020-10-14T08:07:36Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0Mjk5NQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwODMxNw==", "bodyText": "Ok let's revisit it in another iteration", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504608317", "createdAt": "2020-10-14T11:40:21Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0Mjk5NQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA4Nzk3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxNDozNVrOHghlDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxNTozMlrOHhMGOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjYzNg==", "bodyText": "What about overload this method with another one without kieBase parameter so that user can leverage on default kieBase if available? I expect most of the users might not be aware of the name of the kBase when there is a default", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503866636", "createdAt": "2020-10-13T11:14:35Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the given <code><File</code>\n+     * @param modelName\n+     * @param pmmlFile\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile);\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the <code><File</code>\n+     * with the given <b>pmmlFileName</b>. Such file will be looked for in the classpath\n+     * (e.g. provided by <b>Maven</b> dependency)\n+     *\n+     * @param modelName\n+     * @param pmmlFileName\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName);\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the <code><File</code>\n+     * with the given <b>pmmlFileName</b>. Such file will be looked for in the <code>kjar</code>\n+     * loaded inside the <code>KieContainer</code>\n+     * with the given <b>gav</b>\n+     *\n+     * @param modelName\n+     * @param pmmlFileName\n+     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n+     * @param gav\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromKieContainer(String modelName, String kieBase, String pmmlFileName, String gav);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MzI1Nw==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504563257", "createdAt": "2020-10-14T10:15:32Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the given <code><File</code>\n+     * @param modelName\n+     * @param pmmlFile\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile);\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the <code><File</code>\n+     * with the given <b>pmmlFileName</b>. Such file will be looked for in the classpath\n+     * (e.g. provided by <b>Maven</b> dependency)\n+     *\n+     * @param modelName\n+     * @param pmmlFileName\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName);\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the <code><File</code>\n+     * with the given <b>pmmlFileName</b>. Such file will be looked for in the <code>kjar</code>\n+     * loaded inside the <code>KieContainer</code>\n+     * with the given <b>gav</b>\n+     *\n+     * @param modelName\n+     * @param pmmlFileName\n+     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n+     * @param gav\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromKieContainer(String modelName, String kieBase, String pmmlFileName, String gav);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjYzNg=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjIyMjkwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo1MjoxNFrOHgi2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODoyNDoxNFrOHhHyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NzYxMw==", "bodyText": "Where are these fields populated? Is it something that subclasses has to handle? If so I think is quite error prone because if I forget to do that, no error is thrown but the fields are not populated.\nWhat about an abstract method like populateMiningAndOutputFields() invoked in the constructor so that each subclass has to implement it?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503887613", "createdAt": "2020-10-13T11:52:14Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -39,6 +43,8 @@\n     protected Map<String, Object> missingValueReplacementMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> commonTransformationsMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> localTransformationsMap = new HashMap<>();\n+    protected List<MiningField> miningFields = new ArrayList<>();\n+    protected List<OutputField> outputFields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5MjU5NA==", "bodyText": "@danielezonca\nTo keep modifications at bare minimum those tow lists are populated in two different places:\n\nduring runtime compilation, inside KiePMMLModelRetriever, after the KiePMMLModel has been instantiated/populated by model-specific compilers\nduring codegen, inside model-specific codegen factories (see all methods invoking KiePMMLModelFactoryUtils.setKiePMMLModelConstructor)\n\nIt could be refactored, but it would take some time, so in another ticket", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504492594", "createdAt": "2020-10-14T08:24:14Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -39,6 +43,8 @@\n     protected Map<String, Object> missingValueReplacementMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> commonTransformationsMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> localTransformationsMap = new HashMap<>();\n+    protected List<MiningField> miningFields = new ArrayList<>();\n+    protected List<OutputField> outputFields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NzYxMw=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjI0NDY5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo1Nzo1OVrOHgjD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODoyODowMVrOHhH8JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MDkzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<KiePMMLModel> toReturn = getModelImplementationProviderStream(model)\n          \n          \n            \n                            .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n          \n          \n            \n                                    , kBuilder))\n          \n          \n            \n                            .findFirst();\n          \n          \n            \n                    toReturn.ifPresent(kiePMMLModel ->\n          \n          \n            \n                                               populateWithPMMLModelFields(kiePMMLModel,\n          \n          \n            \n                                                                           model.getMiningSchema(),\n          \n          \n            \n                                                                           model.getOutput()));\n          \n          \n            \n                    return toReturn;\n          \n          \n            \n                    return getModelImplementationProviderStream(model)\n          \n          \n            \n                            .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n          \n          \n            \n                                    , kBuilder))\n          \n          \n            \n                            .peek(kiePMMLModel -> populateWithPMMLModelFields(kiePMMLModel, model.getMiningSchema(), model.getOutput()))\n          \n          \n            \n                            .findFirst();\n          \n      \n    \n    \n  \n\nNOTE: if you make populateWithPMMLModelFields returns KiePMMLModel you can replace peek with map", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503890931", "createdAt": "2020-10-13T11:57:59Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -53,13 +62,20 @@ private KiePMMLModelRetriever() {\n         logger.trace(\"getFromCommonDataAndTransformationDictionaryAndModel {}\", model);\n         final PMML_MODEL pmmlMODEL = PMML_MODEL.byName(model.getClass().getSimpleName());\n         logger.debug(\"pmmlModelType {}\", pmmlMODEL);\n-        return getModelImplementationProviderStream(model)\n-                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model, kBuilder))\n+        Optional<KiePMMLModel> toReturn = getModelImplementationProviderStream(model)\n+                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n+                        , kBuilder))\n                 .findFirst();\n+        toReturn.ifPresent(kiePMMLModel ->\n+                                   populateWithPMMLModelFields(kiePMMLModel,\n+                                                               model.getMiningSchema(),\n+                                                               model.getOutput()));\n+        return toReturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NTE0MA==", "bodyText": "@danielezonca\n\"Stream.peek\" should be used with caution\nCode smell Major java:S3864\nReplaced with map (returning the populated object)", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504495140", "createdAt": "2020-10-14T08:28:01Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -53,13 +62,20 @@ private KiePMMLModelRetriever() {\n         logger.trace(\"getFromCommonDataAndTransformationDictionaryAndModel {}\", model);\n         final PMML_MODEL pmmlMODEL = PMML_MODEL.byName(model.getClass().getSimpleName());\n         logger.debug(\"pmmlModelType {}\", pmmlMODEL);\n-        return getModelImplementationProviderStream(model)\n-                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model, kBuilder))\n+        Optional<KiePMMLModel> toReturn = getModelImplementationProviderStream(model)\n+                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n+                        , kBuilder))\n                 .findFirst();\n+        toReturn.ifPresent(kiePMMLModel ->\n+                                   populateWithPMMLModelFields(kiePMMLModel,\n+                                                               model.getMiningSchema(),\n+                                                               model.getOutput()));\n+        return toReturn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MDkzMQ=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjI1MTAwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo1OTo0NFrOHgjH8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODozMTowOVrOHhIEbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MTk1NA==", "bodyText": "?", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503891954", "createdAt": "2020-10-13T11:59:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java", "diffHunk": "@@ -94,41 +125,118 @@ public static void addOutputFieldsPopulation(final BlockStmt body, final List<Ki\n                 builder = new MethodCallExpr(builder, \"withTargetField\", expressions);\n             }\n             if (outputField.getResultFeature() != null) {\n-                expressions = NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n+                expressions =\n+                        NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n                 builder = new MethodCallExpr(builder, \"withResultFeature\", expressions);\n             }\n             Expression newOutputField = new MethodCallExpr(builder, \"build\");\n             expressions = NodeList.nodeList(newOutputField);\n-            body.addStatement(new MethodCallExpr(new NameExpr(\"outputFields\"), \"add\", expressions));\n+            body.addStatement(new MethodCallExpr(new NameExpr(\"kiePMMLOutputFields\"), \"add\", expressions));\n         }\n     }\n \n     /**\n-     * Add <b>common</b> and <b>local</b> local transformations management inside the given <code>ClassOrInterfaceDeclaration</code>\n+     * Add <b>common</b> and <b>local</b> local transformations management inside the given\n+     * <code>ClassOrInterfaceDeclaration</code>\n      * @param toPopulate\n      * @param transformationDictionary\n      * @param localTransformations\n      */\n-    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate,\n+                                                                       final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n         final AtomicInteger arityCounter = new AtomicInteger(0);\n-        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap = (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ? getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) : Collections.emptyMap();\n-        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap = (localTransformations != null && localTransformations.getDerivedFields() != null) ? getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) : Collections.emptyMap();\n-        final Map<String, MethodDeclaration> defineFunctionsMethodMap = (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ? getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) : Collections.emptyMap();\n+        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap =\n+                (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ?\n+                        getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) :\n+                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap =\n+                (localTransformations != null && localTransformations.getDerivedFields() != null) ?\n+                        getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) :\n+                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> defineFunctionsMethodMap =\n+                (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ?\n+                        getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) :\n+                        Collections.emptyMap();\n         populateMethodDeclarations(toPopulate, commonDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, localDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, defineFunctionsMethodMap.values());\n-        final ConstructorDeclaration constructorDeclaration = toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n-        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap, localDerivedFieldsMethodMap);\n+        final ConstructorDeclaration constructorDeclaration =\n+                toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n+        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap,\n+                                             localDerivedFieldsMethodMap);\n         //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NzI2MQ==", "bodyText": "@danielezonca\nremoved", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504497261", "createdAt": "2020-10-14T08:31:09Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java", "diffHunk": "@@ -94,41 +125,118 @@ public static void addOutputFieldsPopulation(final BlockStmt body, final List<Ki\n                 builder = new MethodCallExpr(builder, \"withTargetField\", expressions);\n             }\n             if (outputField.getResultFeature() != null) {\n-                expressions = NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n+                expressions =\n+                        NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n                 builder = new MethodCallExpr(builder, \"withResultFeature\", expressions);\n             }\n             Expression newOutputField = new MethodCallExpr(builder, \"build\");\n             expressions = NodeList.nodeList(newOutputField);\n-            body.addStatement(new MethodCallExpr(new NameExpr(\"outputFields\"), \"add\", expressions));\n+            body.addStatement(new MethodCallExpr(new NameExpr(\"kiePMMLOutputFields\"), \"add\", expressions));\n         }\n     }\n \n     /**\n-     * Add <b>common</b> and <b>local</b> local transformations management inside the given <code>ClassOrInterfaceDeclaration</code>\n+     * Add <b>common</b> and <b>local</b> local transformations management inside the given\n+     * <code>ClassOrInterfaceDeclaration</code>\n      * @param toPopulate\n      * @param transformationDictionary\n      * @param localTransformations\n      */\n-    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate,\n+                                                                       final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n         final AtomicInteger arityCounter = new AtomicInteger(0);\n-        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap = (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ? getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) : Collections.emptyMap();\n-        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap = (localTransformations != null && localTransformations.getDerivedFields() != null) ? getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) : Collections.emptyMap();\n-        final Map<String, MethodDeclaration> defineFunctionsMethodMap = (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ? getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) : Collections.emptyMap();\n+        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap =\n+                (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ?\n+                        getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) :\n+                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap =\n+                (localTransformations != null && localTransformations.getDerivedFields() != null) ?\n+                        getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) :\n+                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> defineFunctionsMethodMap =\n+                (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ?\n+                        getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) :\n+                        Collections.emptyMap();\n         populateMethodDeclarations(toPopulate, commonDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, localDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, defineFunctionsMethodMap.values());\n-        final ConstructorDeclaration constructorDeclaration = toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n-        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap, localDerivedFieldsMethodMap);\n+        final ConstructorDeclaration constructorDeclaration =\n+                toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n+        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap,\n+                                             localDerivedFieldsMethodMap);\n         //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MTk1NA=="}, "originalCommit": {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU5NTA0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/runtime/PMMLRuntime.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNToyNVrOHhMbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNToyNVrOHhMbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODY1NQ==", "bodyText": "Unused import", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504568655", "createdAt": "2020-10-14T10:25:25Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/runtime/PMMLRuntime.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.api.models.PMMLModel;\n+import org.kie.pmml.api.models.PMMLModelImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a49d8ced70fee192d88b9b2b619099a9a50c46"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDYwMDc3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNzowNlrOHhMe0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNzowNlrOHhMe0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTU1Mg==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504569552", "createdAt": "2020-10-14T10:27:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.assembler.factories;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieContainerImpl;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.core.io.internal.InternalResource;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.pmml.api.PMMLRuntimeFactory;\n+import org.kie.pmml.api.exceptions.ExternalException;\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.commons.io.FileUtils.getFile;\n+\n+public class PMMLRuntimeFactoryImpl implements PMMLRuntimeFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeFactoryImpl.class);\n+    private static  final KieServices KIE_SERVICES = KieServices.get();\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile) {\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile);\n+    }\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName) {\n+        File pmmlFile = getPMMLFileFromClasspath(pmmlFileName);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile);\n+    }\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromKieContainerByKieBase(String modelName, String kieBase, String pmmlFileName, String gav) {\n+        ReleaseId releaseId = new ReleaseIdImpl(gav);\n+        File pmmlFile = getPMMLFileFromKieContainerByKieBase(pmmlFileName, kieBase, releaseId);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile, releaseId);\n+    }\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromKieContainerByDefaultKieBase(String modelName, String pmmlFileName, String gav) {\n+        ReleaseId releaseId = new ReleaseIdImpl(gav);\n+        File pmmlFile = getPMMLFileFromKieContainerByDefaultKieBase(pmmlFileName, releaseId);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile, releaseId);\n+    }\n+\n+    /**\n+     * Load a <code>File</code> with the given <b>pmmlFileName</b> from the\n+     * current <code>Classloader</code>\n+     *\n+     * @param pmmlFileName\n+     * @return\n+     */\n+    private File getPMMLFileFromClasspath(final String pmmlFileName) {\n+        return getFile(pmmlFileName);\n+    }\n+\n+    /**\n+     * Load a <code>File</code> with the given <b>pmmlFileName</b> from the <code>kjar</code> contained in the\n+     * <code>KieContainer</code> with the given <code>ReleaseId</code>\n+     *\n+     * @param pmmlFileName\n+     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n+     * @param releaseId\n+     * @return\n+     */\n+    private File getPMMLFileFromKieContainerByKieBase(final String pmmlFileName, final String kieBase, final ReleaseId releaseId) {\n+        //kieContainer.getKieProject().getDefaultKieBaseModel().getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a49d8ced70fee192d88b9b2b619099a9a50c46"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2356, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}