{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjI4Nzgz", "number": 2948, "title": "Drools 5372 - Implement PMML coexistence", "bodyText": "@danielezonca @mariofusco @jiripetrlik @tarilabs\nSee https://issues.redhat.com/browse/DROOLS-5372\nLogic behind this PR\n\na \"NO_OP\" ResourceType has been implemented\na \"kie-pmml-implementation\" System property has been defined - possible values are \"legacy\" and \"new\"\nif (and only if) BOTH PMMLAssembelrs are present in the classpath, the above property is evaluated; the PMMLAssembler that does not match the requested version will be mapped to NO_OP resource type\nSimilar logic has been implemented inside DMNPMMLEvaluator - depending on the aforementioned property, one \"evaluator\" implementation or the other will be instantiated\nTo have DMNPMML tests working, a workaround has been implemented to force cleanup/population of stored KieAssemblers, since this happen - normally - only at startup", "createdAt": "2020-06-15T15:53:29Z", "url": "https://github.com/kiegroup/drools/pull/2948", "merged": true, "mergeCommit": {"oid": "5b1fffc78f2b26d45c95518b5c623c6d8603db5d"}, "closed": true, "closedAt": "2020-06-22T08:35:55Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn7cKGgH2gAyNDM0NjI4NzgzOjAzMTBiNjY3Y2U2YzhmNmNjOTI3MjBjNzUwZDlkNjE1NTg0OTQzMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsxUU5AH2gAyNDM0NjI4NzgzOmE4ZmIwZjExZmE4ZjMwYjk1YmUxNWVhNDE2NWU1ZDJkMzViZjJlODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0310b667ce6c8f6cc92720c750d9d61558494338", "committedDate": "2020-06-04T10:24:17Z", "message": "[Drools-5373] Refactored PMMLAssembler - implemented two delegates PMMLCompilerService and PMMLLoaderService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3ac318ed0ac6edce90a020807c85146675c5cf", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6d3ac318ed0ac6edce90a020807c85146675c5cf", "committedDate": "2020-06-05T10:06:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2badfe14a34ed998f036b866cf8a94b3ad2efe42", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2badfe14a34ed998f036b866cf8a94b3ad2efe42", "committedDate": "2020-06-05T11:42:15Z", "message": "[DROOLS-5372] Implement dynamic ResourceType switch inside PMMLAssemblerService(s)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eab522b04d70abe69e173f9acf834ea13d24cdd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7eab522b04d70abe69e173f9acf834ea13d24cdd", "committedDate": "2020-06-05T11:43:25Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3f2e54864708e535bcd3f317323acca93c14b9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0d3f2e54864708e535bcd3f317323acca93c14b9", "committedDate": "2020-06-05T13:08:37Z", "message": "[DROOLS-5372] Using PMMLConstants for system property retrieval/setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea3d3c2399c6eb18b9f914d63cc0ec48a2974a0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7ea3d3c2399c6eb18b9f914d63cc0ec48a2974a0", "committedDate": "2020-06-08T08:54:50Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5676276eeaa963be72a67a71d7a1911469a9899", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a5676276eeaa963be72a67a71d7a1911469a9899", "committedDate": "2020-06-08T11:07:36Z", "message": "[DROOLS-5372] Implementing  AbstractDMNKiePMMLInvocationEvaluator and DMNKiePMMLNewInvocationEvaluator. Refactored DMNKiePMMLInvocationEvaluator. Implement switch between them inside AbstractPMMLInvocationEvaluator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74915ee8ccdb0ae9b5f17fa488b8234e60c12d3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a74915ee8ccdb0ae9b5f17fa488b8234e60c12d3", "committedDate": "2020-06-08T16:07:11Z", "message": "[DROOLS-5372] Fixing bug with nested node containing only a True predicate. Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0beb8528e5f0ae06c26e3cc9ed8cdf79435918", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9a0beb8528e5f0ae06c26e3cc9ed8cdf79435918", "committedDate": "2020-06-09T14:55:58Z", "message": "[DROOLS-5372] Working on DMN-PMML implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14623a16993cf0f3b887a976faebbcfe7791c67", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f14623a16993cf0f3b887a976faebbcfe7791c67", "committedDate": "2020-06-10T10:19:42Z", "message": "[DROOLS-5423] Declaring glassfish jaxb-runtime dependency for JDK >= 11 to maintain compiler functionality in such environments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848624b1a9ba09597b50c2002df702c507421bde", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/848624b1a9ba09597b50c2002df702c507421bde", "committedDate": "2020-06-11T07:27:14Z", "message": "[DROOLS-5372] Add specific message for missing PMML result. Working on tests (currently broken when run together)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb07adcb468e27eff2c087ed61e8d657360772a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/aeb07adcb468e27eff2c087ed61e8d657360772a", "committedDate": "2020-06-11T07:32:38Z", "message": "Merge branch 'master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628aee3515caf031794523f89222ebef64c9bc0a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/628aee3515caf031794523f89222ebef64c9bc0a", "committedDate": "2020-06-11T15:38:13Z", "message": "[DROOLS-5258] Working with tests. Currently broken if DMNTreePMMLTest and DMNTreePMMLNewImplTest run concurrently.\nLOT of System.out.println to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6240cf6317fdee876a085f5eb17fbfe347abe2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4f6240cf6317fdee876a085f5eb17fbfe347abe2", "committedDate": "2020-06-11T15:38:59Z", "message": "[DROOLS-5372] Working with tests. Currently broken if DMNTreePMMLTest and DMNTreePMMLNewImplTest run concurrently.\nLOT of System.out.println to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4e925f944f3b3485ad71e8e21c66f53c1e8fed", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9d4e925f944f3b3485ad71e8e21c66f53c1e8fed", "committedDate": "2020-06-11T15:39:38Z", "message": "Merge branch 'DROOLS-5372' of github.com:gitgabrio/drools into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02673158812e720c1e1862d4379c2e9980cc1f81", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/02673158812e720c1e1862d4379c2e9980cc1f81", "committedDate": "2020-06-15T15:03:36Z", "message": "[DROOLS-5372] Implemented reset workaround"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623f03f6b59d4baae90e927b207cae9f982beceb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/623f03f6b59d4baae90e927b207cae9f982beceb", "committedDate": "2020-06-15T15:43:00Z", "message": "[DROOLS-5372] Fixed DMN-PMML tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjM5NTAw", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-431239500", "createdAt": "2020-06-16T07:42:04Z", "commit": {"oid": "623f03f6b59d4baae90e927b207cae9f982beceb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0MjowNFrOGkPFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0MjowNFrOGkPFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0ODk2NQ==", "bodyText": "Is there any reason why you're attempting to load the class from the thread context class loader? Not saying it's wrong, just wondering if a plain Class.forName() wouldn't be enough in this case.", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r440648965", "createdAt": "2020-06-16T07:42:04Z", "author": {"login": "mariofusco"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractPMMLInvocationEvaluator.java", "diffHunk": "@@ -143,9 +146,68 @@ public static AbstractPMMLInvocationEvaluator newInstance(DMNModelImpl model, Cl\n                                   funcDef.getIdentifierString());\n             return new AbstractPMMLInvocationEvaluator.DummyPMMLInvocationEvaluator(model.getNamespace(), funcDef, pmmlResource, pmmlModel);\n         }\n+    }\n \n-        private PMMLInvocationEvaluatorFactory() {\n-            // Constructing instances is not allowed for this Factory\n+    private static AbstractDMNKiePMMLInvocationEvaluator getAbstractDMNKiePMMLInvocationEvaluator(String nameSpace, DMNElement funcDef, Resource pmmlResource, String pmmlModel, PMMLInfo<?> pmmlInfo) {\n+        final boolean legacyImplementationPresent = isLegacyImplementationPresent();\n+        final boolean newImplementationPresent = isNewImplementationPresent();\n+        if (legacyImplementationPresent && newImplementationPresent) {\n+            if (isLegacyPMMLRequired()) {\n+                return getDMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+            } else {\n+                return getDMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+            }\n+        } else if (legacyImplementationPresent) {\n+            return getDMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } else if (newImplementationPresent) {\n+            return getDMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static DMNKiePMMLInvocationEvaluator getDMNKiePMMLInvocationEvaluator(String nameSpace, DMNElement funcDef, Resource pmmlResource, String pmmlModel, PMMLInfo<?> pmmlInfo) {\n+        try {\n+            return new DMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } catch (NoClassDefFoundError e) {\n+            LOG.warn(\"Tried binding org.drools:kie-pmml, failed.\");\n+        } catch (Throwable e) {\n+            LOG.warn(\"Binding org.drools:kie-pmml succeded but initialization failed, with:\", e);\n+        }\n+        return null;\n+    }\n+\n+    private static DMNKiePMMLNewInvocationEvaluator getDMNKiePMMLNewInvocationEvaluator(String nameSpace, DMNElement funcDef, Resource pmmlResource, String pmmlModel, PMMLInfo<?> pmmlInfo) {\n+        try {\n+            return new DMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } catch (NoClassDefFoundError e) {\n+            LOG.warn(\"Tried binding org.drools:kie-pmml-new, failed.\");\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Binding org.drools:kie-pmml-new succeded but initialization failed, with:\", e);\n+        }\n+        return null;\n+    }\n+\n+    private static boolean isLegacyPMMLRequired() {\n+        final String property = System.getProperty(KIE_PMML_IMPLEMENTATION.getName(), LEGACY.getName());\n+        return property.equals(LEGACY.getName());\n+    }\n+\n+    private static boolean isLegacyImplementationPresent() {\n+        try {\n+            Thread.currentThread().getContextClassLoader().loadClass(\"org.kie.pmml.pmml_4_2.PMML4ExecutionHelper\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623f03f6b59d4baae90e927b207cae9f982beceb"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df529ffbbdfd8a55f8b4ad5e8774067752529808", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/df529ffbbdfd8a55f8b4ad5e8774067752529808", "committedDate": "2020-06-16T08:04:34Z", "message": "[DROOLS-5372] Replaced ContextClassLoader.loadClass(...) with Class.forName(...)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78156d8aaf79d5949db204458805b64351bb2eca", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/78156d8aaf79d5949db204458805b64351bb2eca", "committedDate": "2020-06-16T08:56:01Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa1d857373755be933c0ec0c6222f40f09da365", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6fa1d857373755be933c0ec0c6222f40f09da365", "committedDate": "2020-06-16T10:38:33Z", "message": "[DROOLS-5372] Add kie-pmml-new to drools build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14363955cfa11b69997a54b69a1d9622845fca65", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/14363955cfa11b69997a54b69a1d9622845fca65", "committedDate": "2020-06-16T11:40:05Z", "message": "[DROOLS-5372] Excluding dependencies from org.kie:kie-test-util due to ban-duplicated-classes enforcer rule fired on FDB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b701f0bac31cc69636b09c32e1d8c320c510a37b", "committedDate": "2020-06-16T13:18:40Z", "message": "[DROOLS-5372] Excluding dependencies due to ban-duplicated-classes enforcer rule fired on FDB"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTE2Mzg3", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-432116387", "createdAt": "2020-06-17T07:09:38Z", "commit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzowOTozOFrOGk4fGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1NTo0MlrOGlJuIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyNzM4NA==", "bodyText": "Is this wrong? What is missing?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441327384", "createdAt": "2020-06-17T07:09:38Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractDMNKiePMMLInvocationEvaluator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.core.pmml;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Field;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventManager;\n+import org.kie.dmn.core.api.EvaluatorResult;\n+import org.kie.dmn.core.api.EvaluatorResult.ResultType;\n+import org.kie.dmn.core.ast.EvaluatorResultImpl;\n+import org.kie.dmn.core.impl.CompositeTypeImpl;\n+import org.kie.dmn.core.impl.DMNResultImpl;\n+import org.kie.dmn.core.util.Msg;\n+import org.kie.dmn.core.util.MsgUtil;\n+import org.kie.dmn.feel.util.EvalHelper;\n+import org.kie.dmn.model.api.DMNElement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>DMNKiePMMLInvocationEvaluator</code> to delegate actual <code>PMML4Result</code> retrieval to specific\n+ * kie-pmml implementation (legacy or new)\n+ */\n+public abstract class AbstractDMNKiePMMLInvocationEvaluator extends AbstractPMMLInvocationEvaluator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractDMNKiePMMLInvocationEvaluator.class);\n+    protected final PMMLInfo<?> pmmlInfo;\n+\n+    public AbstractDMNKiePMMLInvocationEvaluator(String dmnNS, DMNElement node, Resource pmmlResource, String model, PMMLInfo<?> pmmlInfo) {\n+        super(dmnNS, node, pmmlResource, model);\n+        this.pmmlInfo = pmmlInfo;\n+    }\n+\n+    @Override\n+    public EvaluatorResult evaluate(DMNRuntimeEventManager eventManager, DMNResult dmnr) {\n+        PMML4Result resultHolder = getPMML4Result(eventManager, dmnr);\n+\n+        Map<String, Object> resultVariables = resultHolder.getResultVariables();\n+        Map<String, Object> result = getOutputFieldValues(resultHolder, resultVariables, dmnr);\n+        if (result.isEmpty()) {\n+            result = getPredictedValues(resultHolder, dmnr);\n+        }\n+        if (result.isEmpty()) {\n+            // TO FIX\n+            MsgUtil.reportMessage(LOG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5MTk5MQ==", "bodyText": "What about wrap decision logic to a method like checkPMMLavailability that just returns LEGACY or NEW?\nI think it could improve readability", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441491991", "createdAt": "2020-06-17T12:01:32Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractPMMLInvocationEvaluator.java", "diffHunk": "@@ -143,9 +146,68 @@ public static AbstractPMMLInvocationEvaluator newInstance(DMNModelImpl model, Cl\n                                   funcDef.getIdentifierString());\n             return new AbstractPMMLInvocationEvaluator.DummyPMMLInvocationEvaluator(model.getNamespace(), funcDef, pmmlResource, pmmlModel);\n         }\n+    }\n \n-        private PMMLInvocationEvaluatorFactory() {\n-            // Constructing instances is not allowed for this Factory\n+    private static AbstractDMNKiePMMLInvocationEvaluator getAbstractDMNKiePMMLInvocationEvaluator(String nameSpace, DMNElement funcDef, Resource pmmlResource, String pmmlModel, PMMLInfo<?> pmmlInfo) {\n+        final boolean legacyImplementationPresent = isLegacyImplementationPresent();\n+        final boolean newImplementationPresent = isNewImplementationPresent();\n+        if (legacyImplementationPresent && newImplementationPresent) {\n+            if (isLegacyPMMLRequired()) {\n+                return getDMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+            } else {\n+                return getDMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+            }\n+        } else if (legacyImplementationPresent) {\n+            return getDMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } else if (newImplementationPresent) {\n+            return getDMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDczMA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441514730", "createdAt": "2020-06-17T12:43:00Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/util/KieHelper.java", "diffHunk": "@@ -30,11 +30,16 @@\n \n public final class KieHelper {\n \n+    private KieHelper() {\n+        // Constructing instances is not allowed for this class\n+    }\n+\n     public static KieContainer getKieContainer(ReleaseId releaseId,\n-                                               Resource... resources ) {\n+                                               Resource... resources) {\n         KieServices ks = KieServices.Factory.get();\n-        createAndDeployJar( ks, releaseId, resources );\n-        return ks.newKieContainer( releaseId );\n+//        createAndDeployJar( ks, releaseId, resources );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5NzQ0Mg==", "bodyText": "Is it possible to move this code to AbstractDMNPMMLTest? It seems to me always the same", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441597442", "createdAt": "2020-06-17T14:39:40Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/pmml/DMNNaiveBayesPMMLTest.java", "diffHunk": "@@ -30,12 +31,22 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class DMNNaiveBayesPMMLTest {\n+import static org.kie.api.pmml.PMMLConstants.KIE_PMML_IMPLEMENTATION;\n+import static org.kie.api.pmml.PMMLConstants.LEGACY;\n+import static org.kie.dmn.core.util.DMNRuntimeUtil.resetServices;\n+\n+public class DMNNaiveBayesPMMLTest extends AbstractDMNPMMLTest {\n     private static final Logger LOG = LoggerFactory.getLogger(DMNNaiveBayesPMMLTest.class);\n \n     private DMNRuntime runtime;\n     private DMNModel dmnModel;\n \n+    @Before\n+    public void resetEnvironment() {\n+        LOG.debug(\"resetEnvironment\");\n+        resetEnvironment(LEGACY.getName());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5OTQ0MQ==", "bodyText": "Can you please add logging in both branches (debug should be fine)?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441599441", "createdAt": "2020-06-17T14:42:21Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLNewInvocationEvaluator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.core.pmml;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventManager;\n+import org.kie.dmn.core.ast.DMNFunctionDefinitionEvaluator.FormalParameter;\n+import org.kie.dmn.core.impl.DMNResultImpl;\n+import org.kie.dmn.core.impl.DMNRuntimeImpl;\n+import org.kie.dmn.core.util.Msg;\n+import org.kie.dmn.core.util.MsgUtil;\n+import org.kie.dmn.feel.util.EvalHelper;\n+import org.kie.dmn.model.api.DMNElement;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+public class DMNKiePMMLNewInvocationEvaluator extends AbstractDMNKiePMMLInvocationEvaluator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DMNKiePMMLNewInvocationEvaluator.class);\n+\n+    public DMNKiePMMLNewInvocationEvaluator(String dmnNS, DMNElement node, Resource pmmlResource, String model, PMMLInfo<?> pmmlInfo) {\n+        super(dmnNS, node, pmmlResource, model, pmmlInfo);\n+    }\n+\n+    @Override\n+    protected PMML4Result getPMML4Result(DMNRuntimeEventManager eventManager, DMNResult dmnr) {\n+        LOG.debug(\"getPMML4Result\");\n+        PMMLContext pmmlContext = getPMMLPMMLContext(UUID.randomUUID().toString(), model, dmnr);\n+        String sanitizedKieBase = getSanitizedPackageName(model);\n+        PMMLRuntime pmmlRuntime = getPMMLRuntime(eventManager, sanitizedKieBase);\n+        return pmmlRuntime.evaluate(model, pmmlContext);\n+    }\n+\n+    @Override\n+    protected Map<String, Object> getOutputFieldValues(PMML4Result pmml4Result, Map<String, Object> resultVariables, DMNResult dmnr) {\n+        LOG.debug(\"getOutputFieldValues\");\n+        Map<String, Object> toReturn = new HashMap<>();\n+        for (Map.Entry<String, Object> kv : resultVariables.entrySet()) {\n+            String resultName = kv.getKey();\n+            if (resultName == null || resultName.isEmpty()) {\n+                continue;\n+            }\n+            Object r = kv.getValue();\n+            populateWithObject(toReturn, kv.getKey(), r, dmnr);\n+        }\n+        return toReturn;\n+    }\n+\n+    @Override\n+    protected Map<String, Object> getPredictedValues(PMML4Result pmml4Result, DMNResult dmnr) {\n+        LOG.debug(\"pmml4Result\");\n+        Map<String, Object> toReturn = new HashMap<>();\n+        String resultName = pmml4Result.getResultObjectName();\n+        Object value = pmml4Result.getResultVariables().get(resultName);\n+        toReturn.put(resultName, EvalHelper.coerceNumber(value));\n+        return toReturn;\n+    }\n+\n+    private void populateWithObject(Map<String, Object> toPopulate, String resultName, Object r, DMNResult dmnr) {\n+        Optional<String> outputFieldNameFromInfo = getOutputFieldNameFromInfo(resultName);\n+        if (outputFieldNameFromInfo.isPresent()) {\n+            String name = outputFieldNameFromInfo.get();\n+            try {\n+                toPopulate.put(name, EvalHelper.coerceNumber(r));\n+            } catch (Throwable e) {\n+                MsgUtil.reportMessage(LOG,\n+                                      DMNMessage.Severity.WARN,\n+                                      node,\n+                                      ((DMNResultImpl) dmnr),\n+                                      e,\n+                                      null,\n+                                      Msg.INVALID_NAME,\n+                                      name,\n+                                      e.getMessage());\n+                toPopulate.put(name, null);\n+            }\n+        }\n+    }\n+\n+    private PMMLRuntime getPMMLRuntime(DMNRuntimeEventManager eventManager, String sanitizedKieBase) {\n+        KnowledgeBaseImpl knowledgeBase = ((KnowledgeBaseImpl) ((DMNRuntimeImpl) eventManager.getRuntime()).getInternalKnowledgeBase());\n+        KieContainer kieContainer = knowledgeBase.getKieContainer();\n+        KieBase kieBase;\n+        if (kieContainer.getKieBaseNames().contains(sanitizedKieBase)) {\n+            kieBase = kieContainer.getKieBase(sanitizedKieBase);\n+        } else {\n+            kieBase = kieContainer.getKieBase();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5OTgwMQ==", "bodyText": "Can you please remove them or move to trace level?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441599801", "createdAt": "2020-06-17T14:42:49Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLNewInvocationEvaluator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.core.pmml;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventManager;\n+import org.kie.dmn.core.ast.DMNFunctionDefinitionEvaluator.FormalParameter;\n+import org.kie.dmn.core.impl.DMNResultImpl;\n+import org.kie.dmn.core.impl.DMNRuntimeImpl;\n+import org.kie.dmn.core.util.Msg;\n+import org.kie.dmn.core.util.MsgUtil;\n+import org.kie.dmn.feel.util.EvalHelper;\n+import org.kie.dmn.model.api.DMNElement;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+public class DMNKiePMMLNewInvocationEvaluator extends AbstractDMNKiePMMLInvocationEvaluator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DMNKiePMMLNewInvocationEvaluator.class);\n+\n+    public DMNKiePMMLNewInvocationEvaluator(String dmnNS, DMNElement node, Resource pmmlResource, String model, PMMLInfo<?> pmmlInfo) {\n+        super(dmnNS, node, pmmlResource, model, pmmlInfo);\n+    }\n+\n+    @Override\n+    protected PMML4Result getPMML4Result(DMNRuntimeEventManager eventManager, DMNResult dmnr) {\n+        LOG.debug(\"getPMML4Result\");\n+        PMMLContext pmmlContext = getPMMLPMMLContext(UUID.randomUUID().toString(), model, dmnr);\n+        String sanitizedKieBase = getSanitizedPackageName(model);\n+        PMMLRuntime pmmlRuntime = getPMMLRuntime(eventManager, sanitizedKieBase);\n+        return pmmlRuntime.evaluate(model, pmmlContext);\n+    }\n+\n+    @Override\n+    protected Map<String, Object> getOutputFieldValues(PMML4Result pmml4Result, Map<String, Object> resultVariables, DMNResult dmnr) {\n+        LOG.debug(\"getOutputFieldValues\");\n+        Map<String, Object> toReturn = new HashMap<>();\n+        for (Map.Entry<String, Object> kv : resultVariables.entrySet()) {\n+            String resultName = kv.getKey();\n+            if (resultName == null || resultName.isEmpty()) {\n+                continue;\n+            }\n+            Object r = kv.getValue();\n+            populateWithObject(toReturn, kv.getKey(), r, dmnr);\n+        }\n+        return toReturn;\n+    }\n+\n+    @Override\n+    protected Map<String, Object> getPredictedValues(PMML4Result pmml4Result, DMNResult dmnr) {\n+        LOG.debug(\"pmml4Result\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5OTg4Ng==", "bodyText": "Can you please remove them or move to trace level?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441599886", "createdAt": "2020-06-17T14:42:55Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLNewInvocationEvaluator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.core.pmml;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventManager;\n+import org.kie.dmn.core.ast.DMNFunctionDefinitionEvaluator.FormalParameter;\n+import org.kie.dmn.core.impl.DMNResultImpl;\n+import org.kie.dmn.core.impl.DMNRuntimeImpl;\n+import org.kie.dmn.core.util.Msg;\n+import org.kie.dmn.core.util.MsgUtil;\n+import org.kie.dmn.feel.util.EvalHelper;\n+import org.kie.dmn.model.api.DMNElement;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+public class DMNKiePMMLNewInvocationEvaluator extends AbstractDMNKiePMMLInvocationEvaluator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DMNKiePMMLNewInvocationEvaluator.class);\n+\n+    public DMNKiePMMLNewInvocationEvaluator(String dmnNS, DMNElement node, Resource pmmlResource, String model, PMMLInfo<?> pmmlInfo) {\n+        super(dmnNS, node, pmmlResource, model, pmmlInfo);\n+    }\n+\n+    @Override\n+    protected PMML4Result getPMML4Result(DMNRuntimeEventManager eventManager, DMNResult dmnr) {\n+        LOG.debug(\"getPMML4Result\");\n+        PMMLContext pmmlContext = getPMMLPMMLContext(UUID.randomUUID().toString(), model, dmnr);\n+        String sanitizedKieBase = getSanitizedPackageName(model);\n+        PMMLRuntime pmmlRuntime = getPMMLRuntime(eventManager, sanitizedKieBase);\n+        return pmmlRuntime.evaluate(model, pmmlContext);\n+    }\n+\n+    @Override\n+    protected Map<String, Object> getOutputFieldValues(PMML4Result pmml4Result, Map<String, Object> resultVariables, DMNResult dmnr) {\n+        LOG.debug(\"getOutputFieldValues\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5OTk2NQ==", "bodyText": "Can you please remove them or move to trace level?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441599965", "createdAt": "2020-06-17T14:43:02Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLNewInvocationEvaluator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.core.pmml;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.Resource;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventManager;\n+import org.kie.dmn.core.ast.DMNFunctionDefinitionEvaluator.FormalParameter;\n+import org.kie.dmn.core.impl.DMNResultImpl;\n+import org.kie.dmn.core.impl.DMNRuntimeImpl;\n+import org.kie.dmn.core.util.Msg;\n+import org.kie.dmn.core.util.MsgUtil;\n+import org.kie.dmn.feel.util.EvalHelper;\n+import org.kie.dmn.model.api.DMNElement;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.PMMLContextImpl;\n+import org.kie.pmml.evaluator.core.utils.PMMLRequestDataBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+public class DMNKiePMMLNewInvocationEvaluator extends AbstractDMNKiePMMLInvocationEvaluator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DMNKiePMMLNewInvocationEvaluator.class);\n+\n+    public DMNKiePMMLNewInvocationEvaluator(String dmnNS, DMNElement node, Resource pmmlResource, String model, PMMLInfo<?> pmmlInfo) {\n+        super(dmnNS, node, pmmlResource, model, pmmlInfo);\n+    }\n+\n+    @Override\n+    protected PMML4Result getPMML4Result(DMNRuntimeEventManager eventManager, DMNResult dmnr) {\n+        LOG.debug(\"getPMML4Result\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwMzc1NQ==", "bodyText": "This method is a bit misleading because it is not a proper ignore case. For example using these values List(\"sAmple\") and sample will fail", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441603755", "createdAt": "2020-06-17T14:47:56Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLInvocationEvaluator.java", "diffHunk": "@@ -76,70 +74,90 @@ public EvaluatorResult evaluate(DMNRuntimeEventManager eventManager, DMNResult d\n             Class class1 = pValue.getClass();\n             request.addParameter(p.name, pValue, class1);\n         }\n-        PMML4Result resultHolder = helper.submitRequest(request.build());\n-\n-        Map<String, Object> resultVariables = resultHolder.getResultVariables();\n+        return helper.submitRequest(request.build());\n+    }\n \n-        Map<String, Object> result = new HashMap<>();\n-        for (Entry<String, Object> kv : resultVariables.entrySet()) {\n+    @Override\n+    protected Map<String, Object> getOutputFieldValues(PMML4Result pmml4Result, Map<String, Object> resultVariables, DMNResult dmnr) {\n+        LOG.debug(\"getOutputFieldValues\");\n+        Map<String, Object> toReturn = new HashMap<>();\n+        for (Map.Entry<String, Object> kv : resultVariables.entrySet()) {\n+            String resultName = kv.getKey();\n+            if (resultName == null || resultName.isEmpty()) {\n+                continue;\n+            }\n             Object r = kv.getValue();\n             if (r instanceof PMML4Field) {\n-                final String resultName = kv.getKey();\n-                if (resultName != null && !resultName.isEmpty()) {\n-                    Optional<String> outputFieldNameFromInfo;\n-                    Optional<DMNType> opt = getCompositeOutput();\n-                    if (opt.isPresent()) {\n-                        CompositeTypeImpl type = (CompositeTypeImpl) opt.get();\n-                        outputFieldNameFromInfo = type.getFields()\n-                                                      .keySet()\n-                                                      .stream()\n-                                                      .filter(k -> k.equalsIgnoreCase(resultName))\n-                                                      .findFirst();\n-                    } else {\n-                        outputFieldNameFromInfo = pmmlInfo.getModels()\n-                                                          .stream()\n-                                                          .filter(m -> model.equals(m.getName()))\n-                                                          .flatMap(m -> m.getOutputFieldNames().stream())\n-                                                          .filter(ofn -> ofn.equalsIgnoreCase(resultName))\n-                                                          .findFirst();\n-                    }\n-                    if (outputFieldNameFromInfo.isPresent()) {\n-                        String name = outputFieldNameFromInfo.get();\n-                        try {\n-                            Method method = r.getClass().getMethod(\"getValue\");\n-                            Object value = method.invoke(r);\n-                            result.put(name, EvalHelper.coerceNumber(value));\n-                        } catch (Throwable e) {\n-                            MsgUtil.reportMessage(LOG,\n-                                                  DMNMessage.Severity.WARN,\n-                                                  node,\n-                                                  ((DMNResultImpl) result),\n-                                                  e,\n-                                                  null,\n-                                                  Msg.INVALID_NAME,\n-                                                  name,\n-                                                  e.getMessage());\n-                            result.put(name, null);\n-                        }\n-                    }\n-                }\n+                populateWithPMML4Field(toReturn, kv.getKey(), (PMML4Field) r, dmnr);\n             }\n         }\n+        return toReturn;\n+    }\n \n-        Object coercedResult = result.size() > 1 ? result : result.values().iterator().next();\n-        return new EvaluatorResultImpl(coercedResult, ResultType.SUCCESS);\n+    @Override\n+    protected Map<String, Object> getPredictedValues(PMML4Result pmml4Result, DMNResult dmnr) {\n+        LOG.debug(\"getPredictedValues\");\n+        final DMNPMMLModelInfo modelInfo = getDMNPMMLInfo();\n+        if (modelInfo == null) {\n+            return Collections.emptyMap();\n+        }\n+        return getTargetObjects(modelInfo.getTargetFieldNames(), pmml4Result, dmnr);\n     }\n \n-    private Optional<DMNType> getCompositeOutput() {\n-        Collection<? extends PMMLModelInfo> models = pmmlInfo.getModels();\n-        return models.stream()\n-                .filter(m -> model.equals(m.getName()))\n-                .filter(m -> m instanceof DMNPMMLModelInfo)\n-                .flatMap(m -> ((DMNPMMLModelInfo)m).getOutputFields().entrySet().stream())\n-                .filter(e -> e.getKey().equals(model))\n-                .filter(e -> e.getValue() instanceof CompositeTypeImpl)\n-                .map(Map.Entry::getValue)\n-                .findFirst();\n+    private Map<String, Object> getTargetObjects(Collection<String> targetFieldNames, PMML4Result pmml4Result, DMNResult dmnr) {\n+        Map<String, Object> toReturn = new HashMap<>();\n+        pmml4Result.getResultVariables().forEach((key, value) -> {\n+            if (containsIgnoreCase(targetFieldNames, key) && value instanceof PMML4OutputField) {\n+                PMML4OutputField pmml4OutputField = (PMML4OutputField) value;\n+                populateWithReflection(toReturn, key, pmml4OutputField, dmnr);\n+            }\n+        });\n+        return toReturn;\n     }\n \n+    private void populateWithPMML4Field(Map<String, Object> toPopulate, String resultName, PMML4Field pmml4Field, DMNResult dmnr) {\n+        Optional<String> outputFieldNameFromInfo = getOutputFieldNameFromInfo(resultName);\n+        if (outputFieldNameFromInfo.isPresent()) {\n+            String name = outputFieldNameFromInfo.get();\n+            populateWithReflection(toPopulate, name, pmml4Field, dmnr);\n+        }\n+    }\n+\n+    private void populateWithReflection(Map<String, Object> toPopulate, String name, PMML4Field pmml4Field, DMNResult dmnr) {\n+        try {\n+            Method method = pmml4Field.getClass().getMethod(\"getValue\");\n+            Object value = method.invoke(pmml4Field);\n+            toPopulate.put(name, EvalHelper.coerceNumber(value));\n+        } catch (Throwable e) {\n+            MsgUtil.reportMessage(LOG,\n+                                  DMNMessage.Severity.WARN,\n+                                  node,\n+                                  ((DMNResultImpl) dmnr),\n+                                  e,\n+                                  null,\n+                                  Msg.INVALID_NAME,\n+                                  name,\n+                                  e.getMessage());\n+            toPopulate.put(name, null);\n+        }\n+    }\n+\n+    /**\n+     * Returns <code>true</code> if <b>containingCollection</b> contains <b>searchedString</b> OR <b>searchedString.toLowerCase()</b>\n+     * @param containingCollection\n+     * @param searchedString\n+     * @return\n+     */\n+    private boolean containsIgnoreCase(Collection<String> containingCollection, String searchedString) {\n+        return containingCollection.contains(searchedString) || containingCollection.contains(searchedString.toLowerCase());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNzYzMQ==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441607631", "createdAt": "2020-06-17T14:52:59Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/util/DMNRuntimeUtil.java", "diffHunk": "@@ -94,6 +103,21 @@ public static DMNRuntime createRuntime(final String resourceName, final Class te\n         return dmnMessages;\n     }\n \n+    public static void resetServices() {\n+        final ServiceDiscoveryImpl serviceDiscovery = ServiceDiscoveryImpl.getInstance();\n+        serviceDiscovery.reset();\n+        final ServiceRegistryImpl instance = (ServiceRegistryImpl)ServiceRegistry.getInstance();\n+        instance.reload();\n+//\n+//\n+//        Map<String, Object> resetServices = serviceDiscovery.getServices();\n+//        KieAssemblersImpl resetKieAssemblers = (KieAssemblersImpl)resetServices.get(\"org.kie.api.internal.assembler.KieAssemblers\");\n+//        KieAssemblersImpl kieAssemblers = (KieAssemblersImpl)instance.get(KieAssemblers.class);\n+//        Map<ResourceType, KieAssemblerService> registeredKieAssemblers = kieAssemblers.getAssemblers();\n+//        resetKieAssemblers.getAssemblers()\n+//                .forEach(registeredKieAssemblers::put);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTc2MQ==", "bodyText": "Is this always true?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441609761", "createdAt": "2020-06-17T14:55:42Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java", "diffHunk": "@@ -98,10 +98,8 @@ protected void declareFinalRuleFromNode(final Node node,\n             return;\n         }\n         String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore());\n-        if (!(predicate instanceof True)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzEzMTgx", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-432713181", "createdAt": "2020-06-17T19:33:50Z", "commit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMzo1MFrOGlUeIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1MzoyM1rOGlVF_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTg5MA==", "bodyText": "Is there any reason to keep commented code? If yes please add description into the comment. Otherwise please remove.", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441785890", "createdAt": "2020-06-17T19:33:50Z", "author": {"login": "jiripetrlik"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/util/DMNRuntimeUtil.java", "diffHunk": "@@ -94,6 +103,21 @@ public static DMNRuntime createRuntime(final String resourceName, final Class te\n         return dmnMessages;\n     }\n \n+    public static void resetServices() {\n+        final ServiceDiscoveryImpl serviceDiscovery = ServiceDiscoveryImpl.getInstance();\n+        serviceDiscovery.reset();\n+        final ServiceRegistryImpl instance = (ServiceRegistryImpl)ServiceRegistry.getInstance();\n+        instance.reload();\n+//\n+//\n+//        Map<String, Object> resetServices = serviceDiscovery.getServices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4OTUzNg==", "bodyText": "Maybe it would be better to throw exception.", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441789536", "createdAt": "2020-06-17T19:40:56Z", "author": {"login": "jiripetrlik"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractPMMLInvocationEvaluator.java", "diffHunk": "@@ -143,9 +146,68 @@ public static AbstractPMMLInvocationEvaluator newInstance(DMNModelImpl model, Cl\n                                   funcDef.getIdentifierString());\n             return new AbstractPMMLInvocationEvaluator.DummyPMMLInvocationEvaluator(model.getNamespace(), funcDef, pmmlResource, pmmlModel);\n         }\n+    }\n \n-        private PMMLInvocationEvaluatorFactory() {\n-            // Constructing instances is not allowed for this Factory\n+    private static AbstractDMNKiePMMLInvocationEvaluator getAbstractDMNKiePMMLInvocationEvaluator(String nameSpace, DMNElement funcDef, Resource pmmlResource, String pmmlModel, PMMLInfo<?> pmmlInfo) {\n+        final boolean legacyImplementationPresent = isLegacyImplementationPresent();\n+        final boolean newImplementationPresent = isNewImplementationPresent();\n+        if (legacyImplementationPresent && newImplementationPresent) {\n+            if (isLegacyPMMLRequired()) {\n+                return getDMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+            } else {\n+                return getDMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+            }\n+        } else if (legacyImplementationPresent) {\n+            return getDMNKiePMMLInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } else if (newImplementationPresent) {\n+            return getDMNKiePMMLNewInvocationEvaluator(nameSpace, funcDef, pmmlResource, pmmlModel, pmmlInfo);\n+        } else {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5Mjc4MQ==", "bodyText": "I'm not sure about this. I think it would be much more clear to create two separate modules as @tarilabs suggested with different jars on classpath. We can never be sure that it DMN PMML works without logic in resetService() method.", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441792781", "createdAt": "2020-06-17T19:47:23Z", "author": {"login": "jiripetrlik"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/pmml/AbstractDMNPMMLTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.dmn.core.pmml;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.api.pmml.PMMLConstants.KIE_PMML_IMPLEMENTATION;\n+import static org.kie.dmn.core.util.DMNRuntimeUtil.resetServices;\n+\n+public abstract class AbstractDMNPMMLTest {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractDMNPMMLTest.class);\n+\n+    protected void resetEnvironment(String pmmlVersion) {\n+        LOG.debug(\"resetEnvironment {}\", pmmlVersion);\n+        System.setProperty(KIE_PMML_IMPLEMENTATION.getName(), pmmlVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NDE1Ng==", "bodyText": "Can you please explain why do we need to exclude these libs now?", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441794156", "createdAt": "2020-06-17T19:49:42Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models-archetype/src/main/resources/archetype-resources/__rootArtifactId__-compiler/pom.xml", "diffHunk": "@@ -40,6 +40,16 @@\n       <groupId>org.kie</groupId>\n       <artifactId>kie-test-util</artifactId>\n       <scope>test</scope>\n+      <exclusions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NjA5Mw==", "bodyText": "Is there any difference between old dmn and new dmn? Can you please explain reason for it.", "url": "https://github.com/kiegroup/drools/pull/2948#discussion_r441796093", "createdAt": "2020-06-17T19:53:23Z", "author": {"login": "jiripetrlik"}, "path": "kie-dmn/kie-dmn-core/src/test/resources/org/kie/dmn/core/pmml/KiePMMLNewTree.dmn", "diffHunk": "@@ -0,0 +1,148 @@\n+<?xml version='1.0' encoding='UTF-8'?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b701f0bac31cc69636b09c32e1d8c320c510a37b"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffec110ad745dee881b1f64edc7850cca7124f2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8ffec110ad745dee881b1f64edc7850cca7124f2", "committedDate": "2020-06-18T08:08:41Z", "message": "[DROOLS-5372] Fixed as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4257ccbee1c3cf820bca85275966600e12cae01e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4257ccbee1c3cf820bca85275966600e12cae01e", "committedDate": "2020-06-18T09:51:48Z", "message": "[DROOLS-5372] Fixed as per PR suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMTI5MjQx", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-433129241", "createdAt": "2020-06-18T10:00:18Z", "commit": {"oid": "4257ccbee1c3cf820bca85275966600e12cae01e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjY4OTc1", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-433268975", "createdAt": "2020-06-18T13:14:04Z", "commit": {"oid": "4257ccbee1c3cf820bca85275966600e12cae01e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTAyNTEz", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-433902513", "createdAt": "2020-06-19T08:35:51Z", "commit": {"oid": "4257ccbee1c3cf820bca85275966600e12cae01e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTM2NzI0", "url": "https://github.com/kiegroup/drools/pull/2948#pullrequestreview-433936724", "createdAt": "2020-06-19T09:35:30Z", "commit": {"oid": "4257ccbee1c3cf820bca85275966600e12cae01e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8fb0f11fa8f30b95be15ea4165e5d2d35bf2e89", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a8fb0f11fa8f30b95be15ea4165e5d2d35bf2e89", "committedDate": "2020-06-19T11:26:18Z", "message": "[DROOLS-5372] Revert empty spaces/formatting modification"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1920, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}