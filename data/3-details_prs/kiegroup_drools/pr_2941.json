{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjk2NjE4", "number": 2941, "title": "[DROOLS-5350] Externalize lambda for \"from\" clause", "bodyText": "", "createdAt": "2020-06-10T08:38:38Z", "url": "https://github.com/kiegroup/drools/pull/2941", "merged": true, "mergeCommit": {"oid": "ec4c82f1c03bb49d9c63c4fd39c4c118b74ff840"}, "closed": true, "closedAt": "2020-06-22T12:10:01Z", "author": {"login": "tkobayas"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp1R_oAH2gAyNDMyMjk2NjE4OmIyMTdjZmU4ZDY2OWRkOWFmYTI4M2U3YTNiYzFmZDNlMDczNWFjNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctsR9lgH2gAyNDMyMjk2NjE4OjBmYmVmMmFlYWY4N2I1MDg2ODI4OGQ4OTZlMjhhM2VmNjgzZDRlYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b217cfe8d669dd9afa283e7a3bc1fd3e0735ac6a", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/b217cfe8d669dd9afa283e7a3bc1fd3e0735ac6a", "committedDate": "2020-06-10T08:21:36Z", "message": "[DROOLS-5350] Externalize lambda for \"from\" clause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a1661f8c4add72008eb8bcac88d2bae98e27dd2", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/0a1661f8c4add72008eb8bcac88d2bae98e27dd2", "committedDate": "2020-06-11T06:15:02Z", "message": "- Fixed failure cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2994379974b43f9c7fea69cadd471adb2c99b922", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/2994379974b43f9c7fea69cadd471adb2c99b922", "committedDate": "2020-06-11T09:52:13Z", "message": "- Fixed Code Smell"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjgyMzkw", "url": "https://github.com/kiegroup/drools/pull/2941#pullrequestreview-430282390", "createdAt": "2020-06-15T02:02:45Z", "commit": {"oid": "2994379974b43f9c7fea69cadd471adb2c99b922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjowMjo0NVrOGjhNCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjowMjo0NVrOGjhNCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NzM1NA==", "bodyText": "In case of \"from\", we cannot infer the return type in ExecModelLambdaPostProcessor like other cases. So I introduced lambdaReturnTypes to hold return type of lambda. lambdaReturnTypes is populated during parsing (FromVisitor) and then we can use it in ExecModelLambdaPostProcessor later.", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r439897354", "createdAt": "2020-06-15T02:02:45Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java", "diffHunk": "@@ -148,6 +149,8 @@\n     private Map<String, CreatedClass> lambdaClasses = new HashMap<>();\n     private Set<RuleUnitDescription> ruleUnits = new HashSet<>();\n \n+    private Map<LambdaExpr, java.lang.reflect.Type> lambdaReturnTypes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2994379974b43f9c7fea69cadd471adb2c99b922"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjgyNTU0", "url": "https://github.com/kiegroup/drools/pull/2941#pullrequestreview-430282554", "createdAt": "2020-06-15T02:03:31Z", "commit": {"oid": "2994379974b43f9c7fea69cadd471adb2c99b922"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjowMzozMVrOGjhNhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjowMzozMVrOGjhNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NzQ3OQ==", "bodyText": "Changed to parseType() so it can handle array types as well.", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r439897479", "createdAt": "2020-06-15T02:03:31Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "diffHunk": "@@ -496,7 +496,7 @@ public static Expression generateLambdaWithoutParameters(Collection<String> used\n         if (!skipFirstParamAsThis) {\n             Type type;\n             if (canResolve) {\n-                type = StaticJavaParser.parseClassOrInterfaceType(patternClass.get().getCanonicalName());\n+                type = StaticJavaParser.parseType(patternClass.get().getCanonicalName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2994379974b43f9c7fea69cadd471adb2c99b922"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d587008b91518ab7e02bf735eaa4883bbfba7eb", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/3d587008b91518ab7e02bf735eaa4883bbfba7eb", "committedDate": "2020-06-15T02:58:08Z", "message": "- Add array type test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjk1OTgz", "url": "https://github.com/kiegroup/drools/pull/2941#pullrequestreview-430295983", "createdAt": "2020-06-15T03:03:51Z", "commit": {"oid": "3d587008b91518ab7e02bf735eaa4883bbfba7eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzowMzo1MVrOGjh4_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzowMzo1MVrOGjh4_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwODYwNg==", "bodyText": "This conditional branching is to handle cases where return types are Class (e.g. Person) or collection of classes (e.g. List<Person>). Special cases like java.util.Collection<V> will be left non-externalized so FromTest.testFromMapValues() is not yet externalized. I'll file a JIRA with minor priority.", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r439908606", "createdAt": "2020-06-15T03:03:51Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -178,6 +187,52 @@ private void convertBindCallForFlowDSL(MethodCallExpr methodCallExpr) {\n         extractLambdaFromMethodCall(bindAsMethodOpt.get(), () -> new MaterializedLambdaExtractor(packageName, ruleClassName, returnType));\n     }\n \n+    private void convertFromCall(MethodCallExpr methodCallExpr) {\n+        Optional<Expression> lambdaOpt = methodCallExpr.getArguments().stream().filter(Expression::isLambdaExpr).findFirst();\n+        if (!lambdaOpt.isPresent()) {\n+            return; // Don't need to handle. e.g. D.from(var_$children)\n+        }\n+\n+        java.lang.reflect.Type returnType = lambdaReturnTypes.get(lambdaOpt.get());\n+        if (returnType == null) {\n+            return;\n+        }\n+\n+        returnType = ClassUtil.boxTypePrimitive(returnType);\n+\n+        String returnTypeStr;\n+\n+        if (returnType instanceof Class) {\n+            returnTypeStr = ((Class<?>)returnType).getCanonicalName();\n+        } else if (returnType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) returnType;\n+            java.lang.reflect.Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            if (actualTypeArguments.length != 1) {\n+                return;\n+            }\n+            java.lang.reflect.Type argType = actualTypeArguments[0];\n+            if (argType instanceof Class) {\n+                // java.util.List<org.drools.FromTest$MyPerson> has to be resolved to canonical name java.util.List<org.drools.FromTest.MyPerson>\n+                returnTypeStr = canonicalNameParameterizedType(parameterizedType, (Class<?>)argType);\n+            } else {\n+                return; // e.g. java.util.Collection<V> (V is TypeVariable), nested ParameterizedType, GenericArrayType etc.\n+            }\n+        } else {\n+            return; // e.g. GenericArrayType etc.\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d587008b91518ab7e02bf735eaa4883bbfba7eb"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/4c5f43f3d8e203b7e91c41d3e25175daefcee62d", "committedDate": "2020-06-19T01:55:37Z", "message": "- safe cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODk3ODIz", "url": "https://github.com/kiegroup/drools/pull/2941#pullrequestreview-433897823", "createdAt": "2020-06-19T08:28:52Z", "commit": {"oid": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDY2Mjgy", "url": "https://github.com/kiegroup/drools/pull/2941#pullrequestreview-434066282", "createdAt": "2020-06-19T13:13:22Z", "commit": {"oid": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjgwMDU1", "url": "https://github.com/kiegroup/drools/pull/2941#pullrequestreview-434680055", "createdAt": "2020-06-22T07:49:42Z", "commit": {"oid": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0OTo0M1rOGm1gfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0OTo0M1rOGm1gfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTc0Mg==", "bodyText": "Just a suggestion: what about refactoring ExecModelLambdaPostProcessor and to it a constructor that simply takes the whole PackageModel?", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r443375742", "createdAt": "2020-06-22T07:49:43Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/RuleWriter.java", "diffHunk": "@@ -85,6 +85,7 @@ public String getMainSource() {\n                                 pkgModel.getRulesFileNameWithPackage(),\n                                 pkgModel.getImports(),\n                                 pkgModel.getStaticImports(),\n+                                pkgModel.getLambdaReturnTypes(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fbef2aeaf87b50868288d896e28a3ef683d4eaa", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/0fbef2aeaf87b50868288d896e28a3ef683d4eaa", "committedDate": "2020-06-22T08:08:07Z", "message": "- ExecModelLambdaPostProcessor constructor refactoring"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1915, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}