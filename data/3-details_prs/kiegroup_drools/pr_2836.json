{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODA4MDE5", "number": 2836, "title": "Drools 5144 - Refactor PMML Decision Tree", "bodyText": "@danielezonca @mariofusco @jiripetrlik\nsee https://issues.redhat.com/browse/DROOLS-5144\nDesign and implementation.\nThe implementation use the Drools Rule engine to made the evaluation.\nThe module is made of four submodules - as the others: model, compiler, evaluator, tests.\nThe compiler is responsible to read the PMML and create its drools representation (PackageDescr) inside the specific KiePMMLTreeModel.\nThe evalulator receive input data, retrieve the corresponding KiePMMLTreeModel, and execute the rules created.\nMore in detail, the creation of Drools specific PackageDescr is made in two steps:\n\nreading the original PMML and translating it in an intermediate AST format\ncreating the PackageDescr out of the intermediate AST", "createdAt": "2020-04-01T07:23:35Z", "url": "https://github.com/kiegroup/drools/pull/2836", "merged": true, "mergeCommit": {"oid": "83923adc5d2483303d0f402de3c20171abcdcc88"}, "closed": true, "closedAt": "2020-04-15T13:15:00Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 219, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVpe3ngH2gAyMzk2ODA4MDE5OmJiNjNmMTQ3YTIwZDcxNjFmMjE4MmQyM2QxY2Y0MTY0ZjhhNzAzZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX3rJlgFqTM5Mzc0NzMzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb63f147a20d7161f2182d23d1cf4164f8a703e0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/bb63f147a20d7161f2182d23d1cf4164f8a703e0", "committedDate": "2020-04-08T15:18:19Z", "message": "[DROOLS-5144] Storing missing values replaced inside PMMLContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23448ed58ca7252f879fbedd7ef104b3094877e1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/23448ed58ca7252f879fbedd7ef104b3094877e1", "committedDate": "2020-04-08T15:23:54Z", "message": "[DROOLS-5144] Removing unused fields/classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5fef28af06cbdadb335ed624b2db0aec00ebc92", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d5fef28af06cbdadb335ed624b2db0aec00ebc92", "committedDate": "2020-04-08T15:39:26Z", "message": "[DROOLS-5144] Fix switches with illegal cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6da6d860c9677c3fa7473042560c120869464629", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6da6d860c9677c3fa7473042560c120869464629", "committedDate": "2020-04-08T16:10:27Z", "message": "[DROOLS-5144] Refactor implementation for targetfields. Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289ea16c49082d96f89ab909df24751d94a0f094", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/289ea16c49082d96f89ab909df24751d94a0f094", "committedDate": "2020-04-09T07:37:41Z", "message": "[DROOLS-5144] Replaced Queue with List"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a8b5433ba6383d80c1725133baf843340f8128c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6a8b5433ba6383d80c1725133baf843340f8128c", "committedDate": "2020-04-09T07:39:54Z", "message": "[DROOLS-5144] Autoformat sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d841056a7766ef2b81b37155828f667edb7cb476", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d841056a7766ef2b81b37155828f667edb7cb476", "committedDate": "2020-04-09T08:38:18Z", "message": "[DROOLS-5144] Refactor overall drools-related models layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a3afc08ba65e180ce2786bef49af3e798e30445", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9a3afc08ba65e180ce2786bef49af3e798e30445", "committedDate": "2020-04-09T09:08:04Z", "message": "[DROOLS-5144] Package renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dce121ab98ce666f28cc3380c1af396cc984a40d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/dce121ab98ce666f28cc3380c1af396cc984a40d", "committedDate": "2020-04-09T09:22:32Z", "message": "[DROOLS-5144] Replaced Drooled with Drools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad878ef973496b86a93586bf2e0f70b5d5461c80", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ad878ef973496b86a93586bf2e0f70b5d5461c80", "committedDate": "2020-04-09T09:28:15Z", "message": "[DROOLS-5144] Refactor agendaEventListener as private stataic final field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7144181105985ea6fa619a2a104af258e0bdb306", "committedDate": "2020-04-09T09:45:28Z", "message": "[DROOLS-5144] Replaced use of \"toString\" with \"getConstraintsAsString\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDE3NTgz", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-391417583", "createdAt": "2020-04-10T12:30:19Z", "commit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMDoyMFrOGD5OJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozMjo0OVrOGD9w9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNjQyMg==", "bodyText": "I would prefer to just keep the field and remove this method because nobody should use it. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406736422", "createdAt": "2020-04-10T12:30:20Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/DroolsModelExecutor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.kie.pmml.models.drools.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModel;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DroolsModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DroolsModelExecutor.class.getName());\n+\n+    private static final AgendaEventListener agendaEventListener = getAgendaEventListener();\n+\n+    private static AgendaEventListener getAgendaEventListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDc0MQ==", "bodyText": "Comment to remove", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406810741", "createdAt": "2020-04-10T15:32:35Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDg2OQ==", "bodyText": "Can you remove them?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406810869", "createdAt": "2020-04-10T15:32:49Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;\n+    private static KieBase kbase;\n+    private double input1;\n+    private double input2;\n+    private double input3;\n+    private String expectedResult;\n+\n+    public CompoundPredicatesTreeTest(double input1, double input2, double input3, String expectedResult) {\n+        this.input1 = input1;\n+        this.input2 = input2;\n+        this.input3 = input3;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {7.1, 7.1, 7.1, \"classRootNode\"},\n+//                {-5.01, 0, 0, \"classOrAndNestedNode\"},\n+//                {105, -5.5, 0, \"classOrAndNestedNode\"},\n+//                {2, 2, 2, \"classOrNode\"},\n+//                {2.1, 3.5, 2.1, \"classOrNode\"},\n+//                {0.1, 10, 10, \"classAndNode\"},\n+//                {6, 7.1, 7.1, \"classXorNode\"},\n+//                {6, 6.5, 7.1, \"classRootNode\"},\n+//                {6, 6.5, 7.7, \"classXorNode\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58be528bbe96f6ef5308239eec74ffa5f2a886c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d58be528bbe96f6ef5308239eec74ffa5f2a886c", "committedDate": "2020-04-14T08:22:13Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/archetype.pom.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/archetype.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-evaluator/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/archetype.pom.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/archetype.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-evaluator/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzY2NjU1", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-392766655", "createdAt": "2020-04-14T09:42:25Z", "commit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83f10eb9066a8cc234100807b3582e85054d8d4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c83f10eb9066a8cc234100807b3582e85054d8d4", "committedDate": "2020-04-14T10:00:07Z", "message": "[DROOLS-5144] Updated version. Isolated KieSession access inside KiePMMLSessionUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c", "committedDate": "2020-04-14T10:21:29Z", "message": "[DROOLS-5144] Lowered logger level to trace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODQ2MDY1", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-392846065", "createdAt": "2020-04-14T11:41:59Z", "commit": {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0MjowMFrOGFKqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0MjowMFrOGFKqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw==", "bodyText": "Can you please review this method? I don't like that it is named add... but the values to add are fields.\nI would prefer one of the following:\n\nUse a field for KieSession too and rename the method like init()\nAdd pmml4Result and unwrappedInputParams as parameters too\nKeep the method as it is but rename it as initKieSession\n\nWdyt?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408070707", "createdAt": "2020-04-14T11:42:00Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.utils;\n+\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Class used to isolate all the <code>KieSession</code> instantiation/usage details\n+ */\n+public class KiePMMLSessionUtils {\n+\n+    private final PackageDescr packageDescr;\n+    private final PMML4Result pmml4Result;\n+    private AgendaEventListener agendaEventListener;\n+    private Map<String, Object> unwrappedInputParams;\n+    private Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        this.packageDescr = packageDescr;\n+        this.pmml4Result = pmml4Result;\n+    }\n+\n+    public static Builder builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        return new Builder(packageDescr, pmml4Result);\n+    }\n+\n+    public void fireAllRules() {\n+        KieSession kieSession = new KieHelper()\n+                .addContent(packageDescr)\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        kieSession.addEventListener(agendaEventListener);\n+        kieSession.setGlobal(\"$pmml4Result\", pmml4Result);\n+        addExecutionsParameters(kieSession);\n+        kieSession.fireAllRules();\n+    }\n+\n+    private void addExecutionsParameters(final KieSession kieSession) {\n+        kieSession.insert(new KiePMMLStatusHolder());\n+        kieSession.insert(pmml4Result);\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kieSession.getKieBase().getFactType(packageDescr.getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                kieSession.insert(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b70a80a5f1e1da557b16a550648579b297e84892", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b70a80a5f1e1da557b16a550648579b297e84892", "committedDate": "2020-04-14T12:16:50Z", "message": "[DROOLS-5144] Refactor due to PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzQ3MzM0", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-393747334", "createdAt": "2020-04-15T12:58:15Z", "commit": {"oid": "b70a80a5f1e1da557b16a550648579b297e84892"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da5d5c64321ae7c793abfaee91f4e737b9d8c96", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4da5d5c64321ae7c793abfaee91f4e737b9d8c96", "committedDate": "2020-02-21T15:10:38Z", "message": "[DROOLS-3339] Refactored RegressionModelEvaluator; add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f1125fa98dcef8ca3b4a3a8fe28ce1ff8b1679", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/37f1125fa98dcef8ca3b4a3a8fe28ce1ff8b1679", "committedDate": "2020-02-21T15:10:58Z", "message": "Merge branch 'DROOLS-3339' of github.com:gitgabrio/drools into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ea60ab257982a7d92000d8ec0f7bbcb226d24c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/00ea60ab257982a7d92000d8ec0f7bbcb226d24c", "committedDate": "2020-02-21T15:57:32Z", "message": "[DROOLS-3339] Implemented PMMLRegressionModelUtilsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14ac8f587abd3a4ebafdeac88b062bd683c009cc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/14ac8f587abd3a4ebafdeac88b062bd683c009cc", "committedDate": "2020-02-21T16:25:20Z", "message": "[DROOLS-3339] Implemented PMMLRegressionModelExecutorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f47b01f07d59c736a888a15ccb4658b87c449b74", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f47b01f07d59c736a888a15ccb4658b87c449b74", "committedDate": "2020-02-21T17:06:02Z", "message": "[DROOLS-3339] Implemented Predictors tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c74e4d74010729e0f0f251297fdbea32b4b72d", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/37c74e4d74010729e0f0f251297fdbea32b4b72d", "committedDate": "2020-02-24T07:34:09Z", "message": "[DROOLS-3339] Implement PMMLRegressionModelExecutorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3025a45b6a4ee98dd9adb19a23f1bb16f467c76", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a3025a45b6a4ee98dd9adb19a23f1bb16f467c76", "committedDate": "2020-02-24T09:07:37Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "854804b8b30b95811ec21b83e1dac088abe8ff69", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/854804b8b30b95811ec21b83e1dac088abe8ff69", "committedDate": "2020-02-24T09:36:37Z", "message": "[DROOLS-3339] Fixing Sonar remarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b307015ec9f007b90bed3156b0e2db163da5b9bd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b307015ec9f007b90bed3156b0e2db163da5b9bd", "committedDate": "2020-02-24T09:56:01Z", "message": "[DROOLS-3339] Fixing Sonar remarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d091b2956da21419b7163c689700d657a1275a20", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d091b2956da21419b7163c689700d657a1275a20", "committedDate": "2020-02-25T09:19:48Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eba8c8d1288cbd4febfe558070fdcfa6d3c87b5c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/eba8c8d1288cbd4febfe558070fdcfa6d3c87b5c", "committedDate": "2020-02-25T09:35:43Z", "message": "[DROOLS-3339] Removed \"Optional\" properties from model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79580cb2f0f338739877d84819a59f7bf0c83e60", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/79580cb2f0f338739877d84819a59f7bf0c83e60", "committedDate": "2020-02-25T13:46:48Z", "message": "[DROOLS-5099] Tests for logistic regression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd335e9461490fd383426b56f686a47b1621cb0", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/0dd335e9461490fd383426b56f686a47b1621cb0", "committedDate": "2020-02-26T08:33:50Z", "message": "[DROOLS-5099] Test also probabilities in logistic regression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec04311c9fa0125ce290e0a724af4742a7a5d7e1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ec04311c9fa0125ce290e0a724af4742a7a5d7e1", "committedDate": "2020-02-26T10:55:22Z", "message": "[DROOLS-3339] Simplify abstract hierarchy. Removing \"Serializable\" interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b118f3684e399e5f7ae88415acd5017320010c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/54b118f3684e399e5f7ae88415acd5017320010c", "committedDate": "2020-02-26T11:00:58Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/resources/logisticRegressionIrisData.pmml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93bb545160635776edbb2a6ba351baf8c0e9faed", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/93bb545160635776edbb2a6ba351baf8c0e9faed", "committedDate": "2020-02-26T11:02:37Z", "message": "[DROOLS-3339] Simplify abstract hierarchy. Removing \"Serializable\" interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d52dac54b5ed45e882205af2c9bdfbc16e251118", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d52dac54b5ed45e882205af2c9bdfbc16e251118", "committedDate": "2020-02-26T11:42:46Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948a5663dee77d9388d8d06e62d00c30e75c7fae", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/948a5663dee77d9388d8d06e62d00c30e75c7fae", "committedDate": "2020-02-26T11:43:38Z", "message": "[DROOLS-3339] Fixed as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70667b0d96ec38cfcb48b5f45b3d64fd344aeadf", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/70667b0d96ec38cfcb48b5f45b3d64fd344aeadf", "committedDate": "2020-02-26T14:24:09Z", "message": "[DROOLS-5099] Test for normalization methods in regression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a5d93f55eb90d0785fe639115121f1215833e60", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/7a5d93f55eb90d0785fe639115121f1215833e60", "committedDate": "2020-02-27T09:41:58Z", "message": "[DROOLS-5099] WIP: Test logistic regression normalization methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2478197c0f7507b33b967a2ceaec11b1c6276b74", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/2478197c0f7507b33b967a2ceaec11b1c6276b74", "committedDate": "2020-02-27T13:20:24Z", "message": "[DROOLS-5099] Finish test for logistic regression normalization methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a29b4f9bb617b7b94872adb48e79931eca628f4f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a29b4f9bb617b7b94872adb48e79931eca628f4f", "committedDate": "2020-02-27T13:29:22Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c0ac56e578b99255d8a2331ec59b229fbee09ee", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6c0ac56e578b99255d8a2331ec59b229fbee09ee", "committedDate": "2020-02-27T13:29:43Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339_codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c72bcd216a2a2d242b0496f4a6b765d3077ba9d", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/9c72bcd216a2a2d242b0496f4a6b765d3077ba9d", "committedDate": "2020-02-27T14:23:56Z", "message": "[DROOLS-5099] Improve PMML loading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d0520bcca8f79bba1e5c63d0d3e476e32509774", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9d0520bcca8f79bba1e5c63d0d3e476e32509774", "committedDate": "2020-03-02T08:15:40Z", "message": "[DROOLS-3339] Generating RegressionTable source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0989d33321cbc62d6eaa4e134b63294c004abd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4f0989d33321cbc62d6eaa4e134b63294c004abd", "committedDate": "2020-03-04T10:25:48Z", "message": "[DROOLS-3339] Compiling generated classes. Returned new instance of generated model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf30eb7c0f698b780547c7ed27f58f40bb94b739", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cf30eb7c0f698b780547c7ed27f58f40bb94b739", "committedDate": "2020-03-04T10:27:26Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530d7d82f569f6f1aa73869be59a2d2a3e64c84b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/530d7d82f569f6f1aa73869be59a2d2a3e64c84b", "committedDate": "2020-03-04T10:28:47Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339_codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a20c6672ca819280483c940657836605cc153260", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a20c6672ca819280483c940657836605cc153260", "committedDate": "2020-03-04T16:51:22Z", "message": "[DROOLS-3339] Test working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40f0dc16c13f0ef8e06aea471bd253df4efb8c3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c40f0dc16c13f0ef8e06aea471bd253df4efb8c3", "committedDate": "2020-03-05T11:40:06Z", "message": "[DROOLS-3339] Fixing ClassificationTableTemplate - add missing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9a2440e3f9f38264b2e7ea66a9cbebd9c7f7694", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d9a2440e3f9f38264b2e7ea66a9cbebd9c7f7694", "committedDate": "2020-03-05T14:00:34Z", "message": "[DROOLS-3339] Begin benchmark implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd571e4e478a331b554c97482adc11d94d44069", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/bcd571e4e478a331b554c97482adc11d94d44069", "committedDate": "2020-03-05T16:37:42Z", "message": "[DROOLS-3339] Updated codegen benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708945f540249a2b148252ea576f43e419185700", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/708945f540249a2b148252ea576f43e419185700", "committedDate": "2020-03-06T08:31:33Z", "message": "[DROOLS-3339] Refactoring inner compiler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92ab3198a846858bfac3d003099f0525cb8d262", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a92ab3198a846858bfac3d003099f0525cb8d262", "committedDate": "2020-03-06T13:19:58Z", "message": "[DROOLS-3339] Refactoring inner compiler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d310e15270f28e31a8bcdce78805f1460dd51b5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5d310e15270f28e31a8bcdce78805f1460dd51b5", "committedDate": "2020-03-09T08:26:54Z", "message": "[DROOLS-3339] Keep working on Benchmarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee5b1f2f9c539b5514264ae365f8891da5c2e217", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ee5b1f2f9c539b5514264ae365f8891da5c2e217", "committedDate": "2020-03-09T09:10:50Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c0cc347a28c948783ef233b9f218e0343315d54", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6c0cc347a28c948783ef233b9f218e0343315d54", "committedDate": "2020-03-09T09:32:56Z", "message": "[DROOLS-3339] Fix broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "061fd36e8bc6da2bccbcd72435e492d20a0ead51", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/061fd36e8bc6da2bccbcd72435e492d20a0ead51", "committedDate": "2020-03-09T12:14:24Z", "message": "[DROOLS-3339] Fix benchmarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ec487c4445c6bd0f52a071dc56819132fd20ba", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b8ec487c4445c6bd0f52a071dc56819132fd20ba", "committedDate": "2020-03-09T15:56:57Z", "message": "[DROOLS-3339] Fix import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a68e7e68b439401a4d7a232b0f86700998e459a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5a68e7e68b439401a4d7a232b0f86700998e459a", "committedDate": "2020-03-09T16:52:43Z", "message": "[DROOLS-3339] Fix benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7543d6c235681cdd6561a8bb4e5b520cafa64c7d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7543d6c235681cdd6561a8bb4e5b520cafa64c7d", "committedDate": "2020-03-09T18:22:13Z", "message": "[DROOLS-3339] Rename test classes. Minor fix inside Classification table generation. Remove stream from templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dad383552056e624197e5fe8aa6af8b64be91a6", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4dad383552056e624197e5fe8aa6af8b64be91a6", "committedDate": "2020-03-10T15:47:56Z", "message": "[DROOLS-5144] Bgin implementation of Tree model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6078f5e5c81ba44e5765c92a8403eb9345d642", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ca6078f5e5c81ba44e5765c92a8403eb9345d642", "committedDate": "2020-03-11T11:22:18Z", "message": "[DROOLS-3339] Fix benchmark. Fix model tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4b1593329e337ba108e511b24b5f38c8b1cf5f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8e4b1593329e337ba108e511b24b5f38c8b1cf5f", "committedDate": "2020-03-11T11:22:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4a838980a18a8428b253ee431087beb471fe8d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3c4a838980a18a8428b253ee431087beb471fe8d", "committedDate": "2020-03-11T15:14:20Z", "message": "[DROOLS-3339] Fix as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d032ee3d28e8f722011741a0f5af75407a0a5d28", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d032ee3d28e8f722011741a0f5af75407a0a5d28", "committedDate": "2020-03-11T15:18:05Z", "message": "[DROOLS-5144] Keep going with implementation of Tree model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03a26a3ba7892321b253039e838fe20856055ae7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/03a26a3ba7892321b253039e838fe20856055ae7", "committedDate": "2020-03-11T15:18:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bfe1c692de3ba98f978212b61e0fbd8e603c8f4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9bfe1c692de3ba98f978212b61e0fbd8e603c8f4", "committedDate": "2020-03-11T15:21:44Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7137be049ed7d893b8a50e80d3aed72a1915b057", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7137be049ed7d893b8a50e80d3aed72a1915b057", "committedDate": "2020-03-11T16:01:19Z", "message": "[DROOLS-5144] Fix poms and KiePMMLModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77aa99536b62ac5994c04958a6b88b695103e686", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/77aa99536b62ac5994c04958a6b88b695103e686", "committedDate": "2020-03-12T13:56:17Z", "message": "[DROOLS-5144] Refactored KiePMMLDescrFactory. Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835d6310752a3c5f7323f26288c519093a0131a5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/835d6310752a3c5f7323f26288c519093a0131a5", "committedDate": "2020-03-13T10:15:47Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c3458acdaacec6300194526e8b5dca53b784dd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/14c3458acdaacec6300194526e8b5dca53b784dd", "committedDate": "2020-03-13T11:12:35Z", "message": "[DROOLS-3339] Fix as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f2afc1a728ff95ec7a817965e135f6cb56dbe37", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4f2afc1a728ff95ec7a817965e135f6cb56dbe37", "committedDate": "2020-03-13T11:45:29Z", "message": "[DROOLS-3339] Missing bits. Completely remove use of optionals in factories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf316584fb6e289d5fc6a328051038e976ad8771", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/bf316584fb6e289d5fc6a328051038e976ad8771", "committedDate": "2020-03-13T13:14:30Z", "message": "[DROOLS-5144] Begin implementation of XOR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a86166896740e792019a5caea92bebd45b9714", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/25a86166896740e792019a5caea92bebd45b9714", "committedDate": "2020-03-13T13:14:57Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51721f4340d1d21299dfc6bc0c2024295eb84250", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/51721f4340d1d21299dfc6bc0c2024295eb84250", "committedDate": "2020-03-13T14:07:50Z", "message": "[DROOLS-5144] Fix merge/tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37794e71469d489344bcfe6449b975a7656902fd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/37794e71469d489344bcfe6449b975a7656902fd", "committedDate": "2020-03-17T11:11:03Z", "message": "[DROOLS-5144] Implementing xor. Work status for two predicates, not for more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47342f28d88ab44885d924060ddbe7ba8502a1da", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/47342f28d88ab44885d924060ddbe7ba8502a1da", "committedDate": "2020-03-17T16:06:59Z", "message": "[DROOLS-5144] Implementing XOR. Works for 2 elements, not for more."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91347766a86c4bd7231b15ebef71db1a4565e79", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b91347766a86c4bd7231b15ebef71db1a4565e79", "committedDate": "2020-03-17T16:08:14Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ea0a66d32ca2af681ea80069ae9f3aa507411d", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/e3ea0a66d32ca2af681ea80069ae9f3aa507411d", "committedDate": "2020-03-18T12:56:05Z", "message": "WIP: Tree model test module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a32a2d47b2b13e7629fecc428d9124a01265a6e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9a32a2d47b2b13e7629fecc428d9124a01265a6e", "committedDate": "2020-03-18T16:23:38Z", "message": "[DROOLS-5144] Populating PMML$Result inside drl. Implemented higher level missingValueReplacement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a99cdab589a878f9b26999dc7f2f90f342e79ddc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a99cdab589a878f9b26999dc7f2f90f342e79ddc", "committedDate": "2020-03-18T16:28:12Z", "message": "Merge remote-tracking branch 'jiripetrlik/DROOLS-5144' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff53ee927d397742fd244c5cd262e1c24dd71e02", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ff53ee927d397742fd244c5cd262e1c24dd71e02", "committedDate": "2020-03-19T13:43:00Z", "message": "[DROOLS-5144] Fixing dotted field name issue. Implementing \"surrogate\" compound predicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47018cd4d9d2fd7d759f73006b63b7db137b943", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b47018cd4d9d2fd7d759f73006b63b7db137b943", "committedDate": "2020-03-19T13:43:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dabb7de2085a5b49574b070d8f74b5226bdeceb", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/7dabb7de2085a5b49574b070d8f74b5226bdeceb", "committedDate": "2020-03-19T15:21:27Z", "message": "[DROOLS-5166] Finish tree model test for Iris data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cb4d3247574ef2251b6b6f4f8191eed91a586c0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2cb4d3247574ef2251b6b6f4f8191eed91a586c0", "committedDate": "2020-03-19T15:34:30Z", "message": "[DROOLS-5144] Minor refactoring in DescrFactory. Add some test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14572e8d700d70c0e9440cab273758373b7c0ee", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e14572e8d700d70c0e9440cab273758373b7c0ee", "committedDate": "2020-03-19T15:35:16Z", "message": "Merge branch 'DROOLS-5144' of github.com:gitgabrio/drools into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4821469eb20c81950fa7b5a333d048e02c1aed4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f4821469eb20c81950fa7b5a333d048e02c1aed4", "committedDate": "2020-03-20T15:12:10Z", "message": "[DROOLS-5144] Avoid automatic type inference. Surrogate still broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef6ed0300d1c7e910bdc01791fb1581a8968f1c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1ef6ed0300d1c7e910bdc01791fb1581a8968f1c", "committedDate": "2020-03-23T10:33:20Z", "message": "[DROOLS-5144] Avoid useless \"update\" call on PMML4Result. Set PPML4Result as global variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81d20df3a4e0e610007489356c1618e75d07e942", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/81d20df3a4e0e610007489356c1618e75d07e942", "committedDate": "2020-03-23T10:34:09Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413782c421bd858456c17431dd2d60d954f00426", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/413782c421bd858456c17431dd2d60d954f00426", "committedDate": "2020-03-23T11:30:21Z", "message": "[DROOLS-5144] Update version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3246b23c88aa8332b74457636ba56d0f6e780eb1", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/3246b23c88aa8332b74457636ba56d0f6e780eb1", "committedDate": "2020-03-24T10:16:02Z", "message": "[DROOLS-5166] Tree model test for Boston housing data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b66cb1cb510bf87bed0ae792bf6b577a951a721", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/6b66cb1cb510bf87bed0ae792bf6b577a951a721", "committedDate": "2020-03-25T10:49:05Z", "message": "[DROOLS-5166] Test for classification using simple tree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe75f5735b5e49e684a19baea2dc443901781d3", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/afe75f5735b5e49e684a19baea2dc443901781d3", "committedDate": "2020-03-25T13:15:56Z", "message": "[DROOLS-5166] Test for return last prediction strategy in trees"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "844cf96b6fa7b6f81c9016e3c5f8187879a74a77", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/844cf96b6fa7b6f81c9016e3c5f8187879a74a77", "committedDate": "2020-03-26T11:47:22Z", "message": "[DROOLS-5166] Test for compound predicates in trees"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a29b4acd58d61b8308ab9bc6e526590e013d897", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/6a29b4acd58d61b8308ab9bc6e526590e013d897", "committedDate": "2020-03-26T14:48:27Z", "message": "[DROOLS-5166] Test for simple set predicate in trees"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ab1206074e5de49c8a9850e121e7cf786f3bf6", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e3ab1206074e5de49c8a9850e121e7cf786f3bf6", "committedDate": "2020-03-26T15:02:15Z", "message": "[DROOLS-5144] Implemented KiePMML drool' specific AST. Implemented TreeModel AST factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2077aaeba12c152a1e9d5ccec9cc54a264069ad", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a2077aaeba12c152a1e9d5ccec9cc54a264069ad", "committedDate": "2020-03-26T15:03:20Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20c23eee08134b679493a5d1d8f15756309cfbb5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/20c23eee08134b679493a5d1d8f15756309cfbb5", "committedDate": "2020-03-31T07:41:38Z", "message": "[DROOLS-5144] Refactored AST and Descr factories. Some integration test still failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c46c606cc1911dfc6d36f41d5a1df997a87681ce", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c46c606cc1911dfc6d36f41d5a1df997a87681ce", "committedDate": "2020-03-31T07:42:03Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d39e9f270cf5a06a913edcee038b1936ffe58272", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d39e9f270cf5a06a913edcee038b1936ffe58272", "committedDate": "2020-03-31T07:42:37Z", "message": "Merge branch 'DROOLS-5144' of github.com:gitgabrio/drools into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc8c0251c941aafd5c980b08c0202b00377097f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6bc8c0251c941aafd5c980b08c0202b00377097f", "committedDate": "2020-04-01T07:10:46Z", "message": "[DROOLS-5144] Implementing SimpleSetPredicate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "committedDate": "2020-04-01T07:12:50Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDUzODY3", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-385453867", "createdAt": "2020-04-01T10:23:11Z", "commit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyMzoxMVrOF-6Szg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NDo0MVrOF-7UqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA==", "bodyText": "Can you please explain why it is good to change settings of this plugin.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401511118", "createdAt": "2020-04-01T10:23:11Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-archetype-plugin</artifactId>\n+        <configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw==", "bodyText": "Can you please describe the motivation behind \"drooled\" module? What is it for?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401515453", "createdAt": "2020-04-01T10:31:04Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng==", "bodyText": "Please handle this exception properly.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401516856", "createdAt": "2020-04-01T10:33:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNzQxOA==", "bodyText": "Is this this code commented out intentionally?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401517418", "createdAt": "2020-04-01T10:34:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {\n+\n+            public void matchCancelled(MatchCancelledEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void matchCreated(MatchCreatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterMatchFired(AfterMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPopped(AgendaGroupPoppedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPushed(AgendaGroupPushedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeMatchFired(BeforeMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+        };\n+        kSession.addEventListener(agendaEventListener);\n+    }\n+\n+//    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ==", "bodyText": "I would suggest to add the same implementation to all branches for readability.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401520911", "createdAt": "2020-04-01T10:41:10Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final Queue<KiePMMLDrooledRule> rules;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        this.compoundPredicate = compoundPredicate;\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.rules = rules;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.info(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMTE0Ng==", "bodyText": "Please handle exception properly.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401521146", "createdAt": "2020-04-01T10:41:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledAST;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetField;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrFactory.getBaseDescr;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.getKiePMMLDrooledAST;\n+\n+/**\n+ * Class used to generate <code>KiePMMLTreeModel</code> out of a <code>DataDictionary</code> and a <code>TreeModel</code>\n+ */\n+public class KiePMMLTreeModelFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelFactory.class.getName());\n+\n+    private KiePMMLTreeModelFactory() {\n+    }\n+\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+        logger.info(\"getKiePMMLTreeModel {}\", model);\n+        String name = model.getModelName();\n+        Optional<String> targetFieldName = getTargetField(dataDictionary, model);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        final KiePMMLDrooledAST kiePMMLDrooledAST = getKiePMMLDrooledAST(dataDictionary, model, fieldTypeMap);\n+        final PackageDescr baseDescr = getBaseDescr(kiePMMLDrooledAST, name.toLowerCase());\n+        // TODO {gcardosi} Dev debug only - to be removed\n+        try {\n+            String string = new DrlDumper().dump(baseDescr);\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjQzNg==", "bodyText": "Seems like implementation is missing.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401522436", "createdAt": "2020-04-01T10:44:05Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/test/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelPredicateASTFactoryTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import org.junit.Test;\n+\n+public class KiePMMLTreeModelPredicateASTFactoryTest {\n+\n+    @Test\n+    public void declareRuleFromPredicate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzQ2MA==", "bodyText": "Please remove debugging outputs.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523460", "createdAt": "2020-04-01T10:45:56Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzU1OA==", "bodyText": "Please remove.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523558", "createdAt": "2020-04-01T10:46:09Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzc0MA==", "bodyText": "Is this commented out intentionally?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523740", "createdAt": "2020-04-01T10:46:30Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}*/\n+\n+//rule \"Get Tree\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDMwNA==", "bodyText": "Please handle this exception properly.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401524304", "createdAt": "2020-04-01T10:47:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/test/java/org/kie/pmml/models/tree/evaluator/TreeModelCompilationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+\n+import org.drools.compiler.compiler.DrlParser;\n+import org.junit.Test;\n+import org.kie.test.util.filesystem.FileUtils;\n+\n+import static org.junit.Assert.fail;\n+\n+public class TreeModelCompilationTest {\n+\n+    @Test\n+    public void testTreeModelFile() throws Exception {\n+        DrlParser drlParser = new DrlParser();\n+        File file = FileUtils.getFile(\"TreeModel.drl\");\n+        String content = new String(Files.readAllBytes(file.toPath()));\n+        try {\n+            drlParser.parse(false, content);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTQwNA==", "bodyText": "Can we avoid of using break here?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401525404", "createdAt": "2020-04-01T10:49:44Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLNode.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLBase;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KiePMMLNode extends AbstractKiePMMLBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLNode.class);\n+\n+    private String score;\n+    private String result;\n+    private KiePMMLPredicate kiePMMLPredicate;\n+    private List<KiePMMLNode> kiePMMLNodes;\n+\n+    private KiePMMLNode(String name, List<KiePMMLExtension> extensions) {\n+        super(name, extensions);\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions) {\n+        return new Builder(name, extensions);\n+    }\n+\n+    public boolean evaluate(Map<String, Object> values) {\n+        result = null;\n+        logger.info(\"{}: evaluate {}\", id, this.score);\n+        if (kiePMMLPredicate != null && kiePMMLPredicate.evaluate(values)) {\n+            logger.info(\"{}: matching predicate, evaluating... \", id);\n+            logger.info(\"{}: preliminary set {}\", id, score);\n+            result = score;\n+            if (kiePMMLNodes != null) {\n+                for (KiePMMLNode kiePMMLNode : kiePMMLNodes) {\n+                    if (kiePMMLNode.evaluate(values)) {\n+                        logger.info(\"{}: matching node, update set {}\", id, kiePMMLNode.result);\n+                        result = kiePMMLNode.result;\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTk1Mg==", "bodyText": "Please split this stream to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401525952", "createdAt": "2020-04-01T10:50:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/BOOLEAN_OPERATOR.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_CompoundPredicate>CompoundPredicate</a>\n+ */\n+public enum BOOLEAN_OPERATOR {\n+\n+    OR(\"or\"),\n+    AND(\"and\"),\n+    XOR(\"xor\"),\n+    SURROGATE(\"surrogate\");\n+\n+    private String name;\n+\n+    BOOLEAN_OPERATOR(String name) {\n+        this.name = name;\n+    }\n+\n+    public static BOOLEAN_OPERATOR byName(String name) {\n+        return Arrays.stream(BOOLEAN_OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjEwMQ==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401526101", "createdAt": "2020-04-01T10:51:09Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/OPERATOR.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdGroup_PREDICATE>PREDICATE</a>\n+ */\n+public enum OPERATOR {\n+\n+    EQUAL(\"equal\", \"==\"),\n+    NOT_EQUAL(\"notEqual\", \"!=\"),\n+    LESS_THAN(\"lessThan\", \"<\"),\n+    LESS_OR_EQUAL(\"lessOrEqual\", \"<=\"),\n+    GREATER_THAN(\"greaterThan\", \">\"),\n+    GREATER_OR_EQUAL(\"greaterOrEqual\", \">=\"),\n+    IS_MISSING(\"isMissing\", \"\"),\n+    IS_NOT_MISSING(\"isNotMissing\", \"\");\n+\n+    private final String name;\n+    private final String operator;\n+\n+    OPERATOR(String name, String operator) {\n+        this.name = name;\n+        this.operator = operator;\n+    }\n+\n+    public static OPERATOR byName(String name) {\n+        return Arrays.stream(OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjY0NA==", "bodyText": "Please remove PMML from this file.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401526644", "createdAt": "2020-04-01T10:52:11Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/KiePMMLNodeTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLSimplePredicate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLNodeTest {\n+\n+    private final static List<KiePMMLNode> NODES = new ArrayList<>();\n+    private final String SCORE = \"SCORE\";\n+    private final String WILL_PLAY = \"will play\";\n+    private final String NO_PLAY = \"no play\";\n+    private final String MAY_PLAY = \"may play\";\n+    private final String HUMIDITY = \"humidity\";\n+    private final String TEMPERATURE = \"temperature\";\n+    private final String OUTLOOK = \"outlook\";\n+    private final String SUNNY = \"sunny\";\n+    private final String WINDY = \"windy\";\n+    private final String OVERCAST = \"overcast\";\n+    private final String RAIN = \"rain\";\n+\n+    private KiePMMLNode WILL_PLAY_NODE;\n+\n+    /*\n+    http://dmg.org/pmml/v4-4/TreeModel.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzc4NA==", "bodyText": "It is possible to ignore unfinished tests using Ignore annotation. It is better because such tests will appear in junit statistics and we will not forget to finish them.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401527784", "createdAt": "2020-04-01T10:54:20Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLCompoundPredicateTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLCompoundPredicateTest {\n+\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static BOOLEAN_OPERATOR _BOOLEAN_OPERATOR = BOOLEAN_OPERATOR.OR;\n+    private final static List<KiePMMLPredicate> PREDICATES = new ArrayList<>();\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLCompoundPredicate retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertNull(retrieved.getKiePMMLPredicates());\n+        retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .withKiePMMLPredicates(PREDICATES)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertEquals(PREDICATES, retrieved.getKiePMMLPredicates());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzk3Ng==", "bodyText": "Please rather ignore unfinished tests.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401527976", "createdAt": "2020-04-01T10:54:41Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLSimplePredicateTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLSimplePredicateTest {\n+\n+    private final static String NAME = \"NAME\";\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static OPERATOR _OPERATOR = OPERATOR.GREATER_OR_EQUAL;\n+    private final static Object VALUE = \"VALUE\";\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLSimplePredicate retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertNull(retrieved.getValue());\n+        retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .withValue(VALUE)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertEquals(VALUE, retrieved.getValue());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0982e6ddf6589d7861981c6b16a0d208547973ec", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0982e6ddf6589d7861981c6b16a0d208547973ec", "committedDate": "2020-04-01T14:50:39Z", "message": "[DROOLS-5144] Implementing Surrogate predicates with agenda-group/activation-group."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af3a4c90a46163b4a7022cf4a28b9a2eafdacf4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8af3a4c90a46163b4a7022cf4a28b9a2eafdacf4", "committedDate": "2020-04-01T15:17:24Z", "message": "[DROOLS-5144] Refactored integration tests to avoid multiple model parsing/compilation for same test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/67abeb019d33ee7886aaab07352c80da1d3402fd", "committedDate": "2020-04-02T08:27:27Z", "message": "[DROOLS-5144] Fixing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDQ5MjYz", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-387049263", "createdAt": "2020-04-03T08:17:56Z", "commit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxNzo1NlrOGAKQTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMzo0MVrOGALFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTE5Ng==", "bodyText": "This is the StringUtils.join logic and it's repeated a few times", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821196", "createdAt": "2020-04-03T08:17:56Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTYzOQ==", "bodyText": "StringUtils.join", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821639", "createdAt": "2020-04-03T08:18:27Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTc0MA==", "bodyText": "StringUtils.join", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821740", "createdAt": "2020-04-03T08:18:32Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" && \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        notBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareExistsConstraint(final CEDescrBuilder<?, ?> existsBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" || \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTc5Nw==", "bodyText": "StringUtils.join", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821797", "createdAt": "2020-04-03T08:18:38Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" && \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        notBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareExistsConstraint(final CEDescrBuilder<?, ?> existsBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" || \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        existsBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintIn(final String patternType, final List<Object> values) {\n+        String constraints = getInNotInConstraint(values);\n+        builder.pattern(patternType).constraint(constraints);\n+    }\n+\n+    protected void declareConstraintNotIn(final String patternType, final List<Object> values) {\n+        String constraints = getInNotInConstraint(values);\n+        builder.not().pattern(patternType).constraint(constraints);\n+    }\n+\n+    protected void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue) {\n+        builder.pattern(ifBreakField).id(INPUT_FIELD, false);\n+        final ConditionalBranchDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> condBranchBuilder = builder.conditionalBranch();\n+        condBranchBuilder.condition().constraint(String.format(INPUT_FIELD_CONDITIONAL, ifBreakOperator, ifBreakValue));\n+        condBranchBuilder.consequence().breaking(true).name(BREAK_LABEL);\n+    }\n+\n+    protected String getInNotInConstraint(final List<Object> values) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        constraintBuilder.append(\"(\");\n+        for (int i = 0; i < values.size(); i++) {\n+            Object value = values.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\", \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzM1OA==", "bodyText": "to be removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402833358", "createdAt": "2020-04-03T08:31:59Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        // TODO {gcardosi} Dev debug only - to be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNDgxMg==", "bodyText": "commmented code", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402834812", "createdAt": "2020-04-03T08:33:41Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.dmg.pmml.False;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.True;\n+import org.dmg.pmml.tree.LeafNode;\n+import org.dmg.pmml.tree.Node;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.PATH_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>Node</code>\n+ */\n+public class KiePMMLTreeModelNodeASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelNodeASTFactory.class.getName());\n+\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final TreeModel.NoTrueChildStrategy noTrueChildStrategy;\n+\n+    private KiePMMLTreeModelNodeASTFactory(final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final TreeModel.NoTrueChildStrategy noTrueChildStrategy) {\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.noTrueChildStrategy = noTrueChildStrategy;\n+    }\n+\n+    public static KiePMMLTreeModelNodeASTFactory factory(final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final TreeModel.NoTrueChildStrategy noTrueChildStrategy) {\n+        return new KiePMMLTreeModelNodeASTFactory(fieldTypeMap, noTrueChildStrategy);\n+    }\n+\n+    public Queue<KiePMMLDrooledRule> declareRulesFromRootNode(final Node node, final String parentPath) {\n+        logger.debug(\"declareRulesFromRootNode {} {}\", node, parentPath);\n+        Queue<KiePMMLDrooledRule> toReturn = new LinkedList<>();\n+        declareRuleFromNode(node, parentPath, toReturn);\n+        return toReturn;\n+    }\n+\n+    protected void declareRuleFromNode(final Node node, final String parentPath,\n+                                       final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareRuleFromNode {} {}\", node, parentPath);\n+        if (isFinalLeaf(node)) {\n+            declareFinalRuleFromNode(node, parentPath, rules);\n+        } else {\n+            declareIntermediateRuleFromNode(node, parentPath, rules);\n+            if (TreeModel.NoTrueChildStrategy.RETURN_LAST_PREDICTION.equals(noTrueChildStrategy) && node.getScore() != null) {\n+                declareDefaultRuleFromNode(node, parentPath, rules);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is meant to be executed when <code>node</code> <b>is</b> a <i>final leaf</i>\n+     * @param node\n+     * @param parentPath\n+     * @param rules\n+     */\n+    protected void declareFinalRuleFromNode(final Node node,\n+                                            final String parentPath,\n+                                            final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareFinalRuleFromNode {} {}\", node, parentPath);\n+        final Predicate predicate = node.getPredicate();\n+        // This means the rule should not be created at all.\n+        // Different semantics has to be implemented if the \"False\"/\"True\" predicates are declared inside\n+        // an XOR compound predicate\n+        if (predicate instanceof False) {\n+            return;\n+        }\n+        String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore().toString());\n+        if (!(predicate instanceof True)) {\n+            KiePMMLTreeModelPredicateASTFactory.factory(fieldTypeMap, rules).declareRuleFromPredicate(predicate, parentPath, currentRule, node.getScore(), true);\n+        }\n+    }\n+\n+    /**\n+     * This method is meant to be executed when <code>node</code> <b>is not</b> a <i>final leaf</i>\n+     * @param node\n+     * @param parentPath\n+     * @param rules\n+     */\n+    protected void declareIntermediateRuleFromNode(final Node node,\n+                                                   final String parentPath,\n+                                                   final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareIntermediateRuleFromNode {} {}\", node, parentPath);\n+        final Predicate predicate = node.getPredicate();\n+        // This means the rule should not be created at all.\n+        // Different semantics has to be implemented if the \"False\"/\"True\" predicates are declared inside\n+        // an XOR compound predicate\n+        if (predicate instanceof False) {\n+            return;\n+        }\n+        String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore().toString());\n+//        if (predicate instanceof True) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0307cffe1f1d754a1d2801d9440753db1226001", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f0307cffe1f1d754a1d2801d9440753db1226001", "committedDate": "2020-04-03T10:08:56Z", "message": "[DROOLS-5144] Removed StringBuilder. Fixing correct type format for values and returns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ec235b9a6aece62ee56648af1fae4d385c91c72", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0ec235b9a6aece62ee56648af1fae4d385c91c72", "committedDate": "2020-04-03T10:09:33Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adb0d6d059c6c9649a09b2759754c8a03f83ce6a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/adb0d6d059c6c9649a09b2759754c8a03f83ce6a", "committedDate": "2020-04-07T09:45:35Z", "message": "[DROOLS-5144] Integration tests running (without OutputField). Begin implementation of OutputFields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ded427987962bdba36f530da6d0596bdf2b454a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3ded427987962bdba36f530da6d0596bdf2b454a", "committedDate": "2020-04-07T09:45:56Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea9ae1c00723d5782490531ec2511b54eb453dfd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ea9ae1c00723d5782490531ec2511b54eb453dfd", "committedDate": "2020-04-07T10:02:22Z", "message": "[DROOLS-5144] Integration tests running withOutputField. Implemented OutputField (currently only predictedValue managed)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a2d3d6ff4494404da5fb2910d9704172ecdf06", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/59a2d3d6ff4494404da5fb2910d9704172ecdf06", "committedDate": "2020-04-07T10:05:16Z", "message": "[DROOLS-5144] Add \"Release.md\" file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d50e76fbb1875df7d8a481c8f0ab41e33584dc5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3d50e76fbb1875df7d8a481c8f0ab41e33584dc5", "committedDate": "2020-04-07T13:55:50Z", "message": "[DROOLS-5144] Fixed unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de5a31c194635e49c17aaa9fb69411a44f8b8415", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/de5a31c194635e49c17aaa9fb69411a44f8b8415", "committedDate": "2020-04-07T14:00:57Z", "message": "[DROOLS-5144] Minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "committedDate": "2020-04-07T14:05:57Z", "message": "[DROOLS-5144] Fix as per Sonar suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzI1Mzk0", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-385325394", "createdAt": "2020-04-01T07:26:04Z", "commit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "state": "COMMENTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoyNjowNVrOF-z7-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowODoyNlrOGCxBLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNjk2OQ==", "bodyText": "Can you add a small javadoc for each status to describe when it is used? It is not clear to me DONE vs OK/FAIL", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401406969", "createdAt": "2020-04-01T07:26:05Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/enums/StatusCode.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n public enum StatusCode {\n+    DONE(\"DONE\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMTQyMw==", "bodyText": "Is it possible to keep track of the fact that we are using default value for this parameter (a status field in ParameterInfo or something similar)?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401411423", "createdAt": "2020-04-01T07:34:59Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -71,10 +74,33 @@ public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlMo\n     @Override\n     public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n         logger.debug(\"evaluate {} {}\", model, context);\n+        addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n         return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n     }\n \n+    /**\n+     * Add missing input values if defined in original PMML as <b>missingValueReplacement</b>.\n+     * <p>\n+     * \"missingValueReplacement: If this attribute is specified then a missing input value is automatically replaced by the given value.\n+     * That is, the model itself works as if the given value was found in the original input. \"\n+     * @param model\n+     * @param context\n+     * @see <a href=\"http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD\">MISSING-VALUE-TREATMENT-METHOD</a>\n+     */\n+    protected void addMissingValuesReplacements(KiePMMLModel model, PMMLContext context) {\n+        logger.debug(\"addMissingValuesReplacements {} {}\", model, context);\n+        final PMMLRequestData requestData = context.getRequestData();\n+        final Map<String, ParameterInfo> mappedRequestParams = requestData.getMappedRequestParams();\n+        final Map<String, Object> missingValueReplacementMap = model.getMissingValueReplacementMap();\n+        missingValueReplacementMap.forEach((fieldName, missingValueReplacement) -> {\n+            if (!mappedRequestParams.containsKey(fieldName)) {\n+                logger.debug(\"missingValueReplacement {} {}\", fieldName, missingValueReplacement);\n+                requestData.addRequestParam(fieldName, missingValueReplacement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjM3OA==", "bodyText": "What does Drooled mean?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401412378", "createdAt": "2020-04-01T07:36:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie</groupId>\n+    <artifactId>kie-pmml-models</artifactId>\n+    <version>7.36.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-models-drooled</artifactId>\n+\n+  <name>KIE :: PMML :: Models :: Drooled</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODM5Ng==", "bodyText": "Can you explain this method? Why are you returning the first element? It is deterministic only because getTargetFieldsTypeMap use a LinkedHasMap that should be an implementation detail (maybe we can use a SortedMap to make it evident?)", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405498396", "createdAt": "2020-04-08T12:49:49Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -44,10 +47,14 @@ private ModelUtils() {\n      * @param model\n      * @return\n      */\n-    public static Optional<String> getTargetField(DataDictionary dataDictionary, Model model) {\n+    public static Optional<String> getTargetFieldName(DataDictionary dataDictionary, Model model) {\n         return getTargetFields(dataDictionary, model).stream().map(KiePMMLNameOpType::getName).findFirst();\n     }\n \n+    public static DATA_TYPE getTargetFieldType(DataDictionary dataDictionary, Model model) {\n+        return getTargetFieldsTypeMap(dataDictionary, model).entrySet().iterator().next().getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTI1Ng==", "bodyText": "Javadoc?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405529256", "createdAt": "2020-04-08T13:35:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledConstraint.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTQ1NQ==", "bodyText": "Why Queue?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405529455", "createdAt": "2020-04-08T13:35:24Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledAST.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Queue;\n+\n+public class KiePMMLDrooledAST {\n+\n+    private final Queue<KiePMMLDrooledType> types;\n+    private final Queue<KiePMMLDrooledRule> rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTM3NQ==", "bodyText": "Can you please add a javadoc?\nIt is \"drools-agnostic\" so maybe we can remove Drools from the name?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405531375", "createdAt": "2020-04-08T13:38:13Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledRule.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+\n+public class KiePMMLDrooledRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTY4MQ==", "bodyText": "Javadoc?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405531681", "createdAt": "2020-04-08T13:38:36Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTarget.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledTarget extends KiePMMLDrooledConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMjYzNQ==", "bodyText": "Javadoc?\nDo you use this?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405532635", "createdAt": "2020-04-08T13:39:57Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTypeField.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Objects;\n+\n+public class KiePMMLDrooledTypeField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMzIxNQ==", "bodyText": "To be removed/refactored", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405533215", "createdAt": "2020-04-08T13:40:48Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNDA1NQ==", "bodyText": "Can you please move it to a static final field?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405534055", "createdAt": "2020-04-08T13:42:02Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel drooledModel) {\n+        if (logger.isDebugEnabled()) {\n+            try {\n+                String string = new DrlDumper().dump(drooledModel.getPackageDescr());\n+                logger.debug(string);\n+            } catch (Exception e) {\n+                throw new KieEnumException(\"Failed to dump \" + drooledModel, e);\n+            }\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjMwMg==", "bodyText": "It is not used", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405536302", "createdAt": "2020-04-08T13:45:09Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDE5MA==", "bodyText": "Can you please review Object kBuilder? Is it really needed?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405540190", "createdAt": "2020-04-08T13:50:28Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;\n+\n+    protected DrooledModelProvider() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mjk2NQ==", "bodyText": "Can you please create a asString() or similar to produce an equivalent method without overload toString with a specific meaning", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405542965", "createdAt": "2020-04-08T13:54:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/tuples/KiePMMLOperatorValue.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.tuples;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tupla representing the operator and the value to be applied to a given field\n+ */\n+public class KiePMMLOperatorValue {\n+\n+    public static final String VALUE_CONSTRAINT_PATTERN = \"value %s %s\";\n+    private final String operator;\n+    private final Object value;\n+\n+    public KiePMMLOperatorValue(String operator, Object value) {\n+        this.operator = operator;\n+        this.value = value;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDUxMQ==", "bodyText": "Please verify that this toString is not used during code generation but only for logging purposes", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405544511", "createdAt": "2020-04-08T13:56:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLFieldOperatorValue.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+\n+/**\n+ * Class representing a <code>Pattern</code> with the referred field, its possible <code>KiePMMLOperatorValue</code>s and, eventually, nested <code>Pattern</code>s\n+ */\n+public class KiePMMLFieldOperatorValue {\n+\n+    public static final String NO_FIELD_CONSTRAINT_PATTERN = \"(%s)\";\n+    public static final String FIELD_CONSTRAINT_PATTERN = \" %s \" + NO_FIELD_CONSTRAINT_PATTERN;\n+    private final String name;\n+    private final String operator;\n+    private final List<KiePMMLOperatorValue> kiePMMLOperatorValues;\n+    private final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues;\n+    private final String constraintsString;\n+    private final String toString;\n+\n+    /**\n+     * @param name The name of the type\n+     * @param operator the operator to use to join multiple <code>KiePMMLOperatorValue</code>s (if provided)\n+     * @param kiePMMLOperatorValues the inner <code>List&lt;KiePMMLOperatorValue&gt;</code>\n+     * @param nestedKiePMMLFieldOperatorValues the nested <code>List&lt;KiePMMLFieldOperatorValue&gt;</code>s\n+     */\n+    public KiePMMLFieldOperatorValue(final String name, final String operator, final List<KiePMMLOperatorValue> kiePMMLOperatorValues, final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues) {\n+        this.name = name;\n+        this.operator = operator != null ? operator : \"\";\n+        this.kiePMMLOperatorValues = kiePMMLOperatorValues;\n+        this.nestedKiePMMLFieldOperatorValues = nestedKiePMMLFieldOperatorValues;\n+        constraintsString = buildConstraintsString();\n+        toString = buildToString();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public String getConstraintsAsString() {\n+        return constraintsString;\n+    }\n+\n+    public List<KiePMMLFieldOperatorValue> getNestedKiePMMLFieldOperatorValues() {\n+        return nestedKiePMMLFieldOperatorValues != null ? Collections.unmodifiableList(nestedKiePMMLFieldOperatorValues) : null;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjY5OQ==", "bodyText": "If it is Drools specific please move to a -drools module", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405546699", "createdAt": "2020-04-08T13:59:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.executor;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.provider.DrooledModelProvider;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelFactory.getKiePMMLTreeModel;\n+import static org.kie.pmml.models.tree.model.KiePMMLTreeModel.PMML_MODEL_TYPE;\n+\n+/**\n+ * Default <code>ModelImplementationProvider</code> for <b>Tree</b>\n+ */\n+public class TreeModelImplementationProvider extends DrooledModelProvider<TreeModel, KiePMMLTreeModel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzQ4Ng==", "bodyText": "Please raise an exception like new IllegalStateException(\"This should never happen\")", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405547486", "createdAt": "2020-04-08T14:00:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0ODY2NA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405548664", "createdAt": "2020-04-08T14:01:41Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:\n+                    nestedPredicates.addAll(getConstraintEntriesFromXOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                default:\n+                    // noop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTg1Mg==", "bodyText": "It is not possible to reach this code (look at the if at the beginning of the method), can you please review?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405549852", "createdAt": "2020-04-08T14:03:19Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTExNw==", "bodyText": "Why Queue?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405551117", "createdAt": "2020-04-08T14:05:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModeAbstractPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Abstract class to be extended to generate <code>KiePMMLDrooledRule</code>s out of a <code>Predicate</code>s\n+ */\n+public class KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    protected final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    protected final List<KiePMMLOutputField> outputFields;\n+    protected final Queue<KiePMMLDrooledRule> rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTgxNQ==", "bodyText": "What if Surrogate?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405551815", "createdAt": "2020-04-08T14:06:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+        }\n+    }\n+\n+    public void declareRuleFromCompoundPredicateAndOrXor(final String parentPath,\n+                                                         final String currentRule,\n+                                                         final Object result,\n+                                                         boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicateAndOrXor {} {} {}\", compoundPredicate, parentPath, currentRule);\n+        String statusConstraint = StringUtils.isEmpty(parentPath) ? STATUS_NULL : String.format(STATUS_PATTERN, parentPath);\n+        List<KiePMMLFieldOperatorValue> constraints;\n+        String statusToSet = isFinalLeaf ? StatusCode.DONE.getName() : currentRule;\n+        KiePMMLDrooledRule.Builder builder = KiePMMLDrooledRule.builder(currentRule, statusToSet, outputFields)\n+                .withStatusConstraint(statusConstraint);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withAndConstraints(constraints);\n+                break;\n+            case OR:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withOrConstraints(constraints);\n+                break;\n+            case XOR:\n+                constraints = getConstraintEntriesFromXOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withXorConstraints(constraints);\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MjE4Ng==", "bodyText": "Can you please add a default case too?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405552186", "createdAt": "2020-04-08T14:06:40Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzA4Mg==", "bodyText": "Can you please move this class inside a -drools module?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405553082", "createdAt": "2020-04-08T14:07:55Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/java/org/kie/pmml/models/tree/evaluator/PMMLTreeModelEvaluator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.executor.DrooledModelExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>PMMLModelExecutor</code> for <b>Tree</b>\n+ */\n+public class PMMLTreeModelEvaluator extends DrooledModelExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzQ1NQ==", "bodyText": "Can you please move to a -drools module?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405553455", "createdAt": "2020-04-08T14:08:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLTreeModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+public class KiePMMLTreeModel extends KiePMMLDrooledModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDEyMTE0", "url": "https://github.com/kiegroup/drools/pull/2836#pullrequestreview-390012114", "createdAt": "2020-04-08T14:10:22Z", "commit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMDoyMlrOGCxGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMDoyMlrOGCxGpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NDg1NQ==", "bodyText": "@mariofusco\nCan you please double check this block? Is it the proper way to load them?\nNOTE: we will need to review them for Kogito", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405554855", "createdAt": "2020-04-08T14:10:22Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c588ca5fd1bdeab815e6a7da73a366a70bf151", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/03c588ca5fd1bdeab815e6a7da73a366a70bf151", "committedDate": "2020-04-08T15:08:31Z", "message": "[DROOLS-5144] Refactored StatusCode to ResultCode. Moved \"DONE\" as String constant. Fixed som Sonar complains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dbecf3b9d9c2d30d888f65394e910923b10079c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3dbecf3b9d9c2d30d888f65394e910923b10079c", "committedDate": "2020-01-14T16:45:26Z", "message": "[DROOLS-4933] Scheleton implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8d48091b32f272146d9a2957987371b22f1c659", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d8d48091b32f272146d9a2957987371b22f1c659", "committedDate": "2020-01-14T17:01:05Z", "message": "[DROOLS-4933] Add UMLs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "925f1987f140893cb1322e539256872f2ccbeecd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/925f1987f140893cb1322e539256872f2ccbeecd", "committedDate": "2020-01-15T12:03:01Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e0adbc1c2b8b2a96f208342cb2e7c4c571f311", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d1e0adbc1c2b8b2a96f208342cb2e7c4c571f311", "committedDate": "2020-01-16T13:02:50Z", "message": "[DROOLS-4933] Refactor module layout to include KiePMMLRuntime implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3433fe23e6e8c8f5c56ed87aba9b31fc7fdb8c4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f3433fe23e6e8c8f5c56ed87aba9b31fc7fdb8c4", "committedDate": "2020-01-16T16:27:04Z", "message": "[DROOLS-4933] Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e2db3f85353573027fef94ceb58c672fbb072e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a2e2db3f85353573027fef94ceb58c672fbb072e", "committedDate": "2020-01-21T13:20:08Z", "message": "[DROOLS_4933] Begin Regression model runtime implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406f5aa611d29288414e56990b02cc1511fa922b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/406f5aa611d29288414e56990b02cc1511fa922b", "committedDate": "2020-01-21T13:22:02Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf3a796d5f83b2d0ba3c9301defc8b03d83d3ab", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/acf3a796d5f83b2d0ba3c9301defc8b03d83d3ab", "committedDate": "2020-01-21T15:23:19Z", "message": "[DROOLS-4933] Implemented regression model test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46a55aeea38f0cff3394726e9d2a69fd27f29de3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/46a55aeea38f0cff3394726e9d2a69fd27f29de3", "committedDate": "2020-01-21T15:28:35Z", "message": "[DROOLS-4933] Add models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4804ecb09fa750cd3f9d55cd4862b31dc181e102", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4804ecb09fa750cd3f9d55cd4862b31dc181e102", "committedDate": "2020-01-21T16:17:38Z", "message": "[DROOLS-4933] Add PMML compiler test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f728a0545a1d660d4dcde290305e4c637b2302cd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f728a0545a1d660d4dcde290305e4c637b2302cd", "committedDate": "2020-01-22T18:28:39Z", "message": "[DROOLS-4933] Implemented compiler and assembler, with tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a17446ea7262bd11cde18697e67a7bc92a1213", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a6a17446ea7262bd11cde18697e67a7bc92a1213", "committedDate": "2020-01-23T10:12:27Z", "message": "[DROOLS-4933] Switched version. Moved ResourceHelper to kie-test-util package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1e01ec7a306f3d0253d261eca41867e86399c5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7c1e01ec7a306f3d0253d261eca41867e86399c5", "committedDate": "2020-01-23T10:30:10Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "212bfb68a5ad7db74ad36f0c1387a967f40cff57", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/212bfb68a5ad7db74ad36f0c1387a967f40cff57", "committedDate": "2020-01-23T12:24:20Z", "message": "[DROOLS-4933] Implemented integration test module. Full roundtrip test for linear regression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e53facd07bdeef8aeef9e181e8db381b71568ff", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5e53facd07bdeef8aeef9e181e8db381b71568ff", "committedDate": "2020-01-23T15:16:34Z", "message": "[DROOLS-4933] Implementing full roundtrip test with full kie integration - test not working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c052f3939c806f06ba9da81d8a458306fdf821d1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c052f3939c806f06ba9da81d8a458306fdf821d1", "committedDate": "2020-01-23T17:59:13Z", "message": "[DROOLS-4933] Implementing PMMLWeaverService. Fixing integration test setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c248d9f9bb20102002da13b80f30ae2c349280", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/85c248d9f9bb20102002da13b80f30ae2c349280", "committedDate": "2020-01-24T09:50:45Z", "message": "[DROOLS-4933] Begin implementation of drools-based Tree model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daec25864ebfb41a5d5b24fb767a5f34018bf57a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/daec25864ebfb41a5d5b24fb767a5f34018bf57a", "committedDate": "2020-01-24T09:56:54Z", "message": "[DROOLS-4933] Fixing old KieBaseTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414dfb3bf8436958e7ad9d2a6450cef56bd66267", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/414dfb3bf8436958e7ad9d2a6450cef56bd66267", "committedDate": "2020-01-24T16:00:23Z", "message": "[DROOLS-4933] Begin implementation of Tree model with tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b55f05acc849c76130d70bc796fe1a395e103f4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4b55f05acc849c76130d70bc796fe1a395e103f4", "committedDate": "2020-01-27T08:12:46Z", "message": "[DROOLS-4933] Keep going with implementation of Tree model and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea39606d4becc5dc01226cab8412f598490a1d0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2ea39606d4becc5dc01226cab8412f598490a1d0", "committedDate": "2020-01-27T08:13:07Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb1d77ac080712959f51271a356ebad6063b390", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cbb1d77ac080712959f51271a356ebad6063b390", "committedDate": "2020-01-27T15:58:41Z", "message": "[DROOLS-4933] Renaming previous implementation to kie-pmml-legacy. Updating dependant modules to reflect that"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e22de0c5d1b6dd260f93be2839f5254794a87ff", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7e22de0c5d1b6dd260f93be2839f5254794a87ff", "committedDate": "2020-01-27T15:59:49Z", "message": "[DROOLS-4933] Fixing linear regression roundtrip test. Implementing finder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0cf0f5916cbc9c730d9d23e43fe6d313fd97f9e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a0cf0f5916cbc9c730d9d23e43fe6d313fd97f9e", "committedDate": "2020-01-28T09:25:11Z", "message": "[DROOLS-4933] Commenting execution logic from Tree model. Begin model test implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c42ce09ac28ed51ad9e6060f980685de7d06c42", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6c42ce09ac28ed51ad9e6060f980685de7d06c42", "committedDate": "2020-01-28T09:25:18Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e483c8c449cac316f8310afe45b8ba7f31f503c2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e483c8c449cac316f8310afe45b8ba7f31f503c2", "committedDate": "2020-01-28T10:55:43Z", "message": "[DROOLS-4933] Done TreeModelImplementationProviderTest stub. Add True/False predicates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98bca0adc201a3fdb1ffdc38a89b31c207fe749a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/98bca0adc201a3fdb1ffdc38a89b31c207fe749a", "committedDate": "2020-01-28T13:50:07Z", "message": "[DROOLS-4933] First TreeModel (drools) iteration done with empty rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59116f44ded7f430ed3597ff3fa718271aa8a5a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d59116f44ded7f430ed3597ff3fa718271aa8a5a", "committedDate": "2020-01-30T12:29:19Z", "message": "[DROOLS-4933] TreeModel (drools) iteration done with golfing model example test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a193a6dba6f6207164f8dc83bdda8b40f0a0a50b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a193a6dba6f6207164f8dc83bdda8b40f0a0a50b", "committedDate": "2020-01-30T16:35:26Z", "message": "[DROOLS-4933] Refactored builders. Begin MiningModel implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ff28abb0f692680a866b94fe2452e9e9b8b836", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/19ff28abb0f692680a866b94fe2452e9e9b8b836", "committedDate": "2020-01-31T07:36:23Z", "message": "[DROOLS-4933] Keep working on MiningModel implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85bd66afb70ce59af3ae6c55800dd1b55389b84", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c85bd66afb70ce59af3ae6c55800dd1b55389b84", "committedDate": "2020-01-31T07:36:56Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8971e0cd3aac211c0b36bb00f37f229a60cbaed1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8971e0cd3aac211c0b36bb00f37f229a60cbaed1", "committedDate": "2020-01-31T09:03:12Z", "message": "[DROOLS-4933] Begin kie-pmml-mining model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921b348434bd8348345973588725c623cc2f4173", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/921b348434bd8348345973588725c623cc2f4173", "committedDate": "2020-01-31T09:47:17Z", "message": "[DROOLS-4933] Cleanup poms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "713668504dd2fb49b9d52db00a34ea926765b21e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/713668504dd2fb49b9d52db00a34ea926765b21e", "committedDate": "2020-01-31T14:39:19Z", "message": "[DROOLS-4933] Created pmml-models archetype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edeeedbc693b49984609d0a178434c641b546d54", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/edeeedbc693b49984609d0a178434c641b546d54", "committedDate": "2020-01-31T14:40:17Z", "message": "[DROOLS-4933] Created pmml-model-mining"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459f819de6be5cf254c40942bf016eb5dfce5d4e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/459f819de6be5cf254c40942bf016eb5dfce5d4e", "committedDate": "2020-01-31T14:52:40Z", "message": "[DROOLS-4933] Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c47c3f367473464803ed1d568c5067763442c8a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4c47c3f367473464803ed1d568c5067763442c8a", "committedDate": "2020-01-31T15:28:33Z", "message": "[DROOLS-4933] Created pmml-runtime archetype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3fd656e4750327cfc639ad1e3a531ac01711dc3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e3fd656e4750327cfc639ad1e3a531ac01711dc3", "committedDate": "2020-01-31T15:29:29Z", "message": "[DROOLS-4933] Created pmml-runtime-mining"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b56a83a99b42615d75c09c8fe80892f34f69f2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/50b56a83a99b42615d75c09c8fe80892f34f69f2", "committedDate": "2020-01-31T17:12:39Z", "message": "[DROOLS-4933] Implemented library-commons module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f66e40313bee5cf66397060cf0a8255eaa7216", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/98f66e40313bee5cf66397060cf0a8255eaa7216", "committedDate": "2020-02-06T09:34:57Z", "message": "[DROOLS-4933] Refactored log. Keep working on mining model."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c428bb16df9c3fb532619ce6d03b1375fff6c0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/53c428bb16df9c3fb532619ce6d03b1375fff6c0", "committedDate": "2020-02-06T09:35:35Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03a4b4ddb940bf244976035b4e5a81aa490932e3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/03a4b4ddb940bf244976035b4e5a81aa490932e3", "committedDate": "2020-02-06T10:03:27Z", "message": "[DROOLS-4933] Fixing archetypes' poms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a143a6ffe27414701ded12c9c79b611c1738491", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0a143a6ffe27414701ded12c9c79b611c1738491", "committedDate": "2020-02-06T10:51:08Z", "message": "[DROOLS-4933] Add Tree model overall implementation strategy description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8187bbf36f4f72c35d48af1cadd94209b4e3704", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a8187bbf36f4f72c35d48af1cadd94209b4e3704", "committedDate": "2020-02-06T11:18:27Z", "message": "[DROOLS-4933] Refactored log. Updated implementation.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dfc36e5428b6e36354e60c0898f19b36f9bb9ab", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7dfc36e5428b6e36354e60c0898f19b36f9bb9ab", "committedDate": "2020-02-07T14:00:51Z", "message": "[DROOLS-4933] First implmentation of KiePMMLDescrFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0297c3edc6baa0e36efa5e52b3f0f950414c4d2e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0297c3edc6baa0e36efa5e52b3f0f950414c4d2e", "committedDate": "2020-02-07T14:42:45Z", "message": "[DROOLS-4933] Refactoring - reorganizing modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44b449c659787092a93d8f45f4629bb03f9e16c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d44b449c659787092a93d8f45f4629bb03f9e16c", "committedDate": "2020-02-07T15:10:25Z", "message": "[DROOLS-4933] Fixed refactoring - Tree runtime broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a20e82e3baa8e74ff854ad163beeed608399d4ae", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a20e82e3baa8e74ff854ad163beeed608399d4ae", "committedDate": "2020-02-07T15:59:02Z", "message": "[DROOLS-4933] Keep refactoring - moved models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb5f0e6bd51bd89f1a86b7d927f556d4ffd6a48", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6cb5f0e6bd51bd89f1a86b7d927f556d4ffd6a48", "committedDate": "2020-02-10T08:43:57Z", "message": "[DROOLS-4933] Adapting archetype. Not completely working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba41cc61bff3b65558d299472952593e4c968dcb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ba41cc61bff3b65558d299472952593e4c968dcb", "committedDate": "2020-02-10T08:44:33Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afc30bd72eca48f9b574ec70519d96bf6f5e604a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/afc30bd72eca48f9b574ec70519d96bf6f5e604a", "committedDate": "2020-02-10T17:32:10Z", "message": "[DROOLS-4933] Renamed kie-pmml to kie-pmml-refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83bb9948d4d287964841584e03ee6be1ca0fe394", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/83bb9948d4d287964841584e03ee6be1ca0fe394", "committedDate": "2020-02-10T17:46:48Z", "message": "[DROOLS-4933] Restored kie-pmml-legacy to kie-pmml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5b637d10f0a2249ecc693380e5e8ebe688143a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5c5b637d10f0a2249ecc693380e5e8ebe688143a", "committedDate": "2020-02-10T18:09:27Z", "message": "[DROOLS-4933] Create PMML refactoring skeleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c28bfe7ced36b439175e9eba671aed5c9fb80f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/67c28bfe7ced36b439175e9eba671aed5c9fb80f", "committedDate": "2020-02-10T18:15:50Z", "message": "[DROOLS-4933] Add test utility methods. Fixed pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca8e81b9d20f3aa192e74608c7325efcfc7d314", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6ca8e81b9d20f3aa192e74608c7325efcfc7d314", "committedDate": "2020-02-10T18:33:01Z", "message": "[DROOLS-3339] Begin refactoring of regression model with new architecture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "committedDate": "2020-02-11T08:56:44Z", "message": "[DROOLS-4933] Add tests to kie-test-util"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "committedDate": "2020-02-11T09:03:08Z", "message": "[DROOLS-4933] Add assertions to tests inside kie-test-util"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413738cfcbca688f64aa93deca9d5f96d2f4dc0b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/413738cfcbca688f64aa93deca9d5f96d2f4dc0b", "committedDate": "2020-02-11T09:39:24Z", "message": "[DROOLS-3339] Begin Regression model implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97726c0778e26fb7815b3ad35fec88ec63ebabfe", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/97726c0778e26fb7815b3ad35fec88ec63ebabfe", "committedDate": "2020-02-11T10:02:36Z", "message": "[DROOLS-3339] Add tests to IsRegressionModel. Make KiePMMLRegressionModel constructor protected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47c187638b8be2d807e6d187e7627e20432b4d1a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/47c187638b8be2d807e6d187e7627e20432b4d1a", "committedDate": "2020-02-11T10:20:22Z", "message": "[DROOLS-3339] Add some fixes as per sonar suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2959221c665ee2eda43afaa8b89baf75829f9f8f", "committedDate": "2020-02-12T10:27:46Z", "message": "[DROOLS-4933] Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "committedDate": "2020-02-12T11:02:17Z", "message": "[DROOLS-4933] Moving kie-pmml-api to kie-pmml-commons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a163b2d51d89d7e02401f198939201edc1123bd7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a163b2d51d89d7e02401f198939201edc1123bd7", "committedDate": "2020-02-12T11:28:09Z", "message": "[DROOLS-4933] Renamed kie-pmml-refactoring to kie-pmml-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ef20f048ff6935f8b928c966440e33d4af8f127", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6ef20f048ff6935f8b928c966440e33d4af8f127", "committedDate": "2020-02-12T11:44:16Z", "message": "[WIP] Renamed modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35439483900cb2905876ccf0bb1104b4950613f9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/35439483900cb2905876ccf0bb1104b4950613f9", "committedDate": "2020-02-12T11:46:04Z", "message": "Merge branch 'DROOLS-4933' into PMML-REF-WIP\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/test/java/org/kie/pmml/api/model/TestUtils.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/main/java/org/kie/pmml/library/api/implementations/ModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/main/java/org/kie/pmml/library/api/implementations/ModelImplementationProviderFinder.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/factories/KiePMMLExtensionFactory.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/factories/KiePMMLFieldRefFactory.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/ModelImplementationProviderFinderImpl.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/utils/KiePMMLUtil.java\n#\tkie-pmml-new/kie-pmml-library/pom.xml\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/container/PMMLPackage.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/exceptions/KiePMMLModelException.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/executor/PMMLContext.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/executor/PMMLRuntime.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/PMMLWeaverService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/container/PMMLPackageImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/PMMLContextImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/executor/PMMLModelExecutor.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/executor/PMMLModelExecutorFinderImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/PMMLRequestDataBuilder.java\n#\tkie-pmml-new/kie-pmml-runtime/pom.xml\n#\tkie-pmml-new/pom.xml\n#\tkie-test-util/src/main/java/org/kie/test/util/filesystem/FileUtils.java\n#\tkie-test-util/src/main/java/org/kie/test/util/filesystem/ResourceHelper.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84ddf7046f3f597262b7cea67a3c67975ae15de2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/84ddf7046f3f597262b7cea67a3c67975ae15de2", "committedDate": "2020-02-12T12:01:48Z", "message": "[WIP] Keep renaming/refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d973ddb6be6da1b7adb0b29544cf1917aa324291", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d973ddb6be6da1b7adb0b29544cf1917aa324291", "committedDate": "2020-02-12T13:07:25Z", "message": "[DROOLS-3339] Begin test implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67f86b39b1294731de1a4f8afe34a1368a3f97ac", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/67f86b39b1294731de1a4f8afe34a1368a3f97ac", "committedDate": "2020-02-12T13:09:26Z", "message": "Merge remote-tracking branch 'gitgabrio/PMML-REF-WIP' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingFunction.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/PMMLRequestDataBuilder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7a381245ae84c30b84e445cc203293d9f79aeac", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e7a381245ae84c30b84e445cc203293d9f79aeac", "committedDate": "2020-02-12T13:26:28Z", "message": "[DROOLS-3339] Merge refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49777dd997b3c78dc5da7b5cede42280c4133b5d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/49777dd997b3c78dc5da7b5cede42280c4133b5d", "committedDate": "2020-02-12T13:44:04Z", "message": "[DROOLS-3339] Merge refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa2e577cd9fe6312f1bac58da2ac236dcd0ed8c4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/fa2e577cd9fe6312f1bac58da2ac236dcd0ed8c4", "committedDate": "2020-02-13T08:09:54Z", "message": "[DROOLS-3339] Begin integrationg of tests from previous implementation. Refactoring predictors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f79b9743dbfccc1d6e2a3e61fda9c453e06ec30", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1f79b9743dbfccc1d6e2a3e61fda9c453e06ec30", "committedDate": "2020-02-13T14:27:37Z", "message": "[DROOLS-3339] Reorganizing resources in integration test. Fixing broken pmmls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "432b11e4facce1ff204aae5fa3c776132ff00eb1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/432b11e4facce1ff204aae5fa3c776132ff00eb1", "committedDate": "2020-02-13T17:30:34Z", "message": "[DROOLS-3339] Fixed regression. Begin fixing classification. Add outputfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eefbc4f4f97343d54ef9915083817935bdd1aef4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/eefbc4f4f97343d54ef9915083817935bdd1aef4", "committedDate": "2020-02-14T13:49:39Z", "message": "[DROOLS-3339] Fixed classification and add some whole-model test. Start increasing unittesting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a71bc70ac4c0a6d2e0b7600159ce092808d66a78", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a71bc70ac4c0a6d2e0b7600159ce092808d66a78", "committedDate": "2020-02-17T14:57:27Z", "message": "[DROOLS-3339] Updated name refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb8cd4540266533d6f5365851b74a0bd45aa0e64", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/bb8cd4540266533d6f5365851b74a0bd45aa0e64", "committedDate": "2020-02-18T08:13:11Z", "message": "[DROOLS-3339] Changed log level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66fb642deaf3288f9c1c3a20d2c38bfcc60d9227", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/66fb642deaf3288f9c1c3a20d2c38bfcc60d9227", "committedDate": "2020-02-18T11:09:55Z", "message": "[DROOLS-3339] Sync with base pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3a56f43a5e1a7ecde49df5de863cd27ae4a2e9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ee3a56f43a5e1a7ecde49df5de863cd27ae4a2e9", "committedDate": "2020-02-18T11:11:08Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ee307ca406deddd9c11dc449fc45f93d5a33c3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d5ee307ca406deddd9c11dc449fc45f93d5a33c3", "committedDate": "2020-02-18T11:12:30Z", "message": "[DROOLS-3339] Update version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c478acbf8b402e1da8db4976c8d7867e2bd5b1f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3c478acbf8b402e1da8db4976c8d7867e2bd5b1f", "committedDate": "2020-02-19T09:19:57Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/.gitignore\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLExtensioned.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLNamed.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-api/src/main/java/org/kie/pmml/evaluator/api/executor/PMMLRuntime.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0252db264590eab9cb09d736af61422c60598d13", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0252db264590eab9cb09d736af61422c60598d13", "committedDate": "2020-02-19T09:25:50Z", "message": "[DROOLS-3339] Merging master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be10d13c9c11387678bd9b952e3f755d8997f058", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/be10d13c9c11387678bd9b952e3f755d8997f058", "committedDate": "2020-02-19T09:30:45Z", "message": "[DROOLS-3339] Fixing merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dfcd04225406cf68c56c831f0cefdad5dc15989", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1dfcd04225406cf68c56c831f0cefdad5dc15989", "committedDate": "2020-02-19T09:36:15Z", "message": "[DROOLS-3339] Fixing merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ba9803a700031577e4ff7b916a6c491eb4257b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/08ba9803a700031577e4ff7b916a6c491eb4257b", "committedDate": "2020-02-19T09:39:10Z", "message": "[DROOLS-3339] Fixing merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f13d63392567162e43a735e023b96b803f055720", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f13d63392567162e43a735e023b96b803f055720", "committedDate": "2020-02-19T09:45:59Z", "message": "[DROOLS-3339] Fix merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d006f75f08f11c53dd9070c63d563d0b3e49363d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d006f75f08f11c53dd9070c63d563d0b3e49363d", "committedDate": "2020-02-19T09:58:13Z", "message": "[DROOLS-3339] Fix merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81dae86e4b8bbfefe4ee91f48b094f5de66054f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f81dae86e4b8bbfefe4ee91f48b094f5de66054f", "committedDate": "2020-02-19T10:05:10Z", "message": "[DROOLS-3339] Fixing merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f8b89211ee5b049037e45a53485c623debcfb8", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/c7f8b89211ee5b049037e45a53485c623debcfb8", "committedDate": "2020-02-19T15:24:19Z", "message": "Example of simple test for whole model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb91454321ab75ec4ce011e7a255e62939bc3095", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/eb91454321ab75ec4ce011e7a255e62939bc3095", "committedDate": "2020-02-20T11:49:29Z", "message": "[DROOLS-3339] Implementing factories unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8e359bbdf01bdaf471233bd554c4d9976a46246", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c8e359bbdf01bdaf471233bd554c4d9976a46246", "committedDate": "2020-02-20T11:49:59Z", "message": "Merge branch 'DROOLS-3339' of github.com:gitgabrio/drools into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b6c4b41bfb33ce5732e644a6e77261ef136e01", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c9b6c4b41bfb33ce5732e644a6e77261ef136e01", "committedDate": "2020-02-20T12:10:16Z", "message": "[DROOLS-3339] Changed outputfield - target field to Optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f5c4ae4d486f4839a67477dd63bdaf52691b0f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c7f5c4ae4d486f4839a67477dd63bdaf52691b0f", "committedDate": "2020-02-20T13:22:04Z", "message": "[DROOLS-3339] Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60ac6321fca21660851f05c8ea01d652119579f9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/60ac6321fca21660851f05c8ea01d652119579f9", "committedDate": "2020-02-20T13:54:01Z", "message": "[DROOLS-3339] Refactoring kie-pmml-models-regression-api -> kie-pmml-models-regression-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37d423724f3e36ff1464a3b46014c0331244bb83", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/37d423724f3e36ff1464a3b46014c0331244bb83", "committedDate": "2020-02-20T14:19:00Z", "message": "Parameterize and polish NumericVariablesLinearRegressionTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff18f260a1fc55388b7db6c72fbc4cf33319eb7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5ff18f260a1fc55388b7db6c72fbc4cf33319eb7", "committedDate": "2020-02-21T09:37:55Z", "message": "[DROOLS-3339] Keep testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1178cffc04dd79b8ec0db806bd75e435dc8fc138", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1178cffc04dd79b8ec0db806bd75e435dc8fc138", "committedDate": "2020-02-21T09:38:42Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86523713cb68d5b422553f9649e046279682a4bc", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/86523713cb68d5b422553f9649e046279682a4bc", "committedDate": "2020-02-21T09:50:28Z", "message": "Change package name for PMML regression tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "564492a1ff343a8faf391e2bd30bba51abcaa66e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/564492a1ff343a8faf391e2bd30bba51abcaa66e", "committedDate": "2020-02-21T13:24:48Z", "message": "[DROOLS-3339] Fixing/refactoring ClassificationModelEvaluator. Implemented tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29c29482c09c29a88360f73764d9e68d9f736d7a", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/29c29482c09c29a88360f73764d9e68d9f736d7a", "committedDate": "2020-02-21T13:27:41Z", "message": "[DROOLS-5099] PMML tests for regression with numeric inputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0139a0fe1897e5db8b7a91a9b027c183b1ef1ca8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0139a0fe1897e5db8b7a91a9b027c183b1ef1ca8", "committedDate": "2020-02-21T14:20:16Z", "message": "[DROOLS-3339] Done ClassificationModelEvaluator tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1464, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}