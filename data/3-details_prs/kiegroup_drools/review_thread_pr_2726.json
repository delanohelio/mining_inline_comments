{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzM0MzU5", "number": 2726, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjowNjoxMFrODYuO0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowOTo0N1rODZOLRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjQ5ODc0OnYy", "diffSide": "RIGHT", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjowNjoxMFrOFevmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMDoxMlrOFe0Ejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4MTUwOA==", "bodyText": "Please do not introduce new public api method as there is single occurence of it, in the same class.", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r367781508", "createdAt": "2020-01-17T06:06:10Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -634,22 +634,34 @@ public void visitFactPattern(final FactPattern pattern) {\n         }\n \n         public void visitFreeFormLine(final FreeFormLine ffl) {\n+            visitFreeFormLine(ffl,\n+                              generatorContextFactory.getMaximumPatternDepth() > 1);\n+        }\n+\n+        public void visitFreeFormLine(final FreeFormLine ffl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4985d7b847769174283b542e53d1cbb48fdbc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDczNQ==", "bodyText": "OK.. the single parameter form of these methods (visitXYZ) are called by a relection-based visitor however the two parameter versions are only called internally but could be overridden so I've made them all protected. I hope that is more acceptable.", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r367854735", "createdAt": "2020-01-17T10:00:12Z", "author": {"login": "manstis"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -634,22 +634,34 @@ public void visitFactPattern(final FactPattern pattern) {\n         }\n \n         public void visitFreeFormLine(final FreeFormLine ffl) {\n+            visitFreeFormLine(ffl,\n+                              generatorContextFactory.getMaximumPatternDepth() > 1);\n+        }\n+\n+        public void visitFreeFormLine(final FreeFormLine ffl,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4MTUwOA=="}, "originalCommit": {"oid": "7d4985d7b847769174283b542e53d1cbb48fdbc0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjUwODQyOnYy", "diffSide": "RIGHT", "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjoxNDowMFrOFevsEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzoyMzoyNlrOFe4zyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4MjkzMQ==", "bodyText": "Does this return true means we are saving rdslr file? I though it means the rules combine drools and dsl sentences, however I was wrong probably.\nCan we please add test where a from expression and DSL sentence is present? Or do we have such test please?", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r367782931", "createdAt": "2020-01-17T06:14:00Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -4763,4 +4763,160 @@ public void testRHSDateInsertActionWithoutSystemProperty() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testFromCompositeFactPatternWithDSLAlthoughModelHasNoDSLSentences() {\n+        final RuleModel model = new RuleModel() {\n+            @Override\n+            public boolean hasDSLSentences() {\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4985d7b847769174283b542e53d1cbb48fdbc0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1Njc2NQ==", "bodyText": "It replicates the state of validating a model when it was created as a rdslr file but has no actual DSL elements (as per https://issues.redhat.com/browse/RHDM-1189). Validation is called here and the source obtained here. RuleModelWrapper constructor set to true when the file is  .rdslr. It is used by RuleModelWrapper as the hasDSLSentences here.\nLet me check about the test (or add one)....", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r367856765", "createdAt": "2020-01-17T10:05:02Z", "author": {"login": "manstis"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -4763,4 +4763,160 @@ public void testRHSDateInsertActionWithoutSystemProperty() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testFromCompositeFactPatternWithDSLAlthoughModelHasNoDSLSentences() {\n+        final RuleModel model = new RuleModel() {\n+            @Override\n+            public boolean hasDSLSentences() {\n+                return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4MjkzMQ=="}, "originalCommit": {"oid": "7d4985d7b847769174283b542e53d1cbb48fdbc0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzMTYwMg==", "bodyText": "@jomarko New tests added.. what a can of worms that opened.. but good they were added as it highlighted a bug (not only relating to my changes but also existing tests that contained from).", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r367931602", "createdAt": "2020-01-17T13:21:25Z", "author": {"login": "manstis"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -4763,4 +4763,160 @@ public void testRHSDateInsertActionWithoutSystemProperty() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testFromCompositeFactPatternWithDSLAlthoughModelHasNoDSLSentences() {\n+        final RuleModel model = new RuleModel() {\n+            @Override\n+            public boolean hasDSLSentences() {\n+                return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4MjkzMQ=="}, "originalCommit": {"oid": "7d4985d7b847769174283b542e53d1cbb48fdbc0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzMjM2Mw==", "bodyText": "This requirement was not being adhered to in all scenarios.", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r367932363", "createdAt": "2020-01-17T13:23:26Z", "author": {"login": "manstis"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -4763,4 +4763,160 @@ public void testRHSDateInsertActionWithoutSystemProperty() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testFromCompositeFactPatternWithDSLAlthoughModelHasNoDSLSentences() {\n+        final RuleModel model = new RuleModel() {\n+            @Override\n+            public boolean hasDSLSentences() {\n+                return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4MjkzMQ=="}, "originalCommit": {"oid": "7d4985d7b847769174283b542e53d1cbb48fdbc0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzczMjUzOnYy", "diffSide": "RIGHT", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowOTo0N1rOFfffiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNToxNzo1OFrOFfhkWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NjE1Mw==", "bodyText": "When I grep  RuleModelDRLPersistenceImpl class for occurrences of .append(\">\"); code snippet, I am now getting two kinds of occurrences:\n\n\">\" is add/not added according variables isSubPattern and isDSLEnhanced\n\">\" is add/not added according variable isDSLEnhanced\n\nShouldn't be \">\" added/not added always according to both variables?", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r368566153", "createdAt": "2020-01-20T14:09:47Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -630,33 +639,54 @@ public void visitFactPattern(final FactPattern pattern) {\n             }\n \n             postGeneratePattern(gctx);\n-            buf.append(\"\\n\");\n+            if (!isSubPattern) {\n+                buf.append(\"\\n\");\n+            }\n         }\n \n         public void visitFreeFormLine(final FreeFormLine ffl) {\n+            visitFreeFormLine(ffl,\n+                              rootContext);\n+        }\n+\n+        protected void visitFreeFormLine(final FreeFormLine ffl,\n+                                         final LHSGeneratorContext parentContext) {\n             if (ffl.getText() == null) {\n                 return;\n             }\n+\n+            final LHSGeneratorContext gctx = generatorContextFactory.newPeerGeneratorContext(parentContext, ffl);\n+            final boolean isSubPattern = gctx.getDepth() > 0;\n+\n             String[] lines = ffl.getText().split(\"\\\\n|\\\\r\\\\n\");\n             for (String line : lines) {\n                 this.buf.append(indentation);\n-                if (isDSLEnhanced) {\n+                if (!isSubPattern && isDSLEnhanced) {\n                     buf.append(\">\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce572ed53028417d7117b21ca3082689ff569ede"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwMDE1Mw==", "bodyText": "@jomarko You are probably correct.. I can't think of any reason for it to be different.\nI've added a new commit to ensure use of isSubPattern is used consistently in LHSPatternVisitor. Some occurrences were in RHSActionVisitor however this has no concept of sub pattern and hence can remain unchanged.", "url": "https://github.com/kiegroup/drools/pull/2726#discussion_r368600153", "createdAt": "2020-01-20T15:17:58Z", "author": {"login": "manstis"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -630,33 +639,54 @@ public void visitFactPattern(final FactPattern pattern) {\n             }\n \n             postGeneratePattern(gctx);\n-            buf.append(\"\\n\");\n+            if (!isSubPattern) {\n+                buf.append(\"\\n\");\n+            }\n         }\n \n         public void visitFreeFormLine(final FreeFormLine ffl) {\n+            visitFreeFormLine(ffl,\n+                              rootContext);\n+        }\n+\n+        protected void visitFreeFormLine(final FreeFormLine ffl,\n+                                         final LHSGeneratorContext parentContext) {\n             if (ffl.getText() == null) {\n                 return;\n             }\n+\n+            final LHSGeneratorContext gctx = generatorContextFactory.newPeerGeneratorContext(parentContext, ffl);\n+            final boolean isSubPattern = gctx.getDepth() > 0;\n+\n             String[] lines = ffl.getText().split(\"\\\\n|\\\\r\\\\n\");\n             for (String line : lines) {\n                 this.buf.append(indentation);\n-                if (isDSLEnhanced) {\n+                if (!isSubPattern && isDSLEnhanced) {\n                     buf.append(\">\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NjE1Mw=="}, "originalCommit": {"oid": "ce572ed53028417d7117b21ca3082689ff569ede"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2629, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}