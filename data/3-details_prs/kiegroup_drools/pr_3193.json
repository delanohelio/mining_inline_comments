{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjU5NzE2", "number": 3193, "title": "[KOGITO-2836] Math predicates not processed correctly when null and bad error messaging", "bodyText": "Each time we create an expression (expr) in the executable model we index it in the PackageModel using the exprId as the key.\nIn the lambda extractor post processing, we therefore use such map to add the original MVEL constraint to the materialized lambda, this information is propagated in every constraint until we can print it in the .isAllowed method of the LambdaConstraint in case of an error.\nIn this PredicateInformation class there is currently the support for the rule name and the rule file, but it's not as significant as it could be as an identical constraint would be shared among two rules, so it will return the last added to the map.\u00a0It's still useful because it gives you an occurrence of a used constraint, but it doesn't tell you every place where it's used.\nWDYT?\nJIRA: (please edit the JIRA link if it exists)\nhttps://issues.redhat.com/browse/KOGITO-2836\n\n\nHow to retest this PR or trigger a specific build:\n\n\n\na pull request please add comment: Jenkins retest this\n\n\na full downstream build please add comment: Jenkins run fdb\n\n\na compile downstream build please  add comment: Jenkins run cdb\n\n\na full production downstream build please add comment: Jenkins execute product fdb\n\n\nan upstream build please add comment: Jenkins run upstream", "createdAt": "2020-10-27T10:55:14Z", "url": "https://github.com/kiegroup/drools/pull/3193", "merged": true, "mergeCommit": {"oid": "6917331e36d36b6ab577274c12344da952c2d32e"}, "closed": true, "closedAt": "2020-10-29T16:33:45Z", "author": {"login": "lucamolteni"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWqRHygFqTUxNzY3OTY0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXSgozAFqTUxOTY4NTIxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3Njc5NjQ1", "url": "https://github.com/kiegroup/drools/pull/3193#pullrequestreview-517679645", "createdAt": "2020-10-27T13:06:39Z", "commit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowNjo0MFrOHo7MPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1NzoxNlrOHpAqzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NDg3Ng==", "bodyText": "I think it is better to be consistent: always wrap originalException or never. Now it is possible to have different stack traces for the same type of error. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512674876", "createdAt": "2020-10-27T13:06:40Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.model.functions;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Used to generate a better error message when constraints fail\n+ */\n+public class PredicateInformation {\n+\n+    public static final PredicateInformation EMPTY_PREDICATE_INFORMATION =\n+            new PredicateInformation(\"\", \"\", \"\");\n+\n+\n+    // Used to generate a significant error message\n+    private final String stringConstraint;\n+    private final String ruleName;\n+    private final String ruleFileName;\n+\n+    public PredicateInformation(String stringConstraint, String ruleName, String ruleFileName) {\n+        this.stringConstraint = defaultToEmptyString(stringConstraint);\n+        this.ruleName = defaultToEmptyString(ruleName);\n+        this.ruleFileName = defaultToEmptyString(ruleFileName);\n+    }\n+\n+    private String defaultToEmptyString(String stringConstraint) {\n+        return Optional.ofNullable(stringConstraint).orElse(\"\");\n+    }\n+\n+    public RuntimeException betterErrorMessage(RuntimeException originalException) {\n+        if(\"\".equals(stringConstraint)) {\n+            return originalException;\n+        }\n+\n+        String errorMessage = String.format(\n+                \"Error evaluating constraint '%s' in [Rule %s in %s]\",\n+                stringConstraint,\n+                ruleName,\n+                ruleFileName);\n+        return new RuntimeException(errorMessage, originalException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNDIzMQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512714231", "createdAt": "2020-10-27T13:58:15Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java", "diffHunk": "@@ -27,12 +28,13 @@ public void convertPatternLambda() throws Exception {\n         CompilationUnit inputCU = parseResource(\"org/drools/modelcompiler/util/lambdareplace/PatternTestHarness.java\");\n         CompilationUnit clone = inputCU.clone();\n \n-        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), clone).convertLambdas();\n+        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), new HashMap<>(), clone).convertLambdas();\n \n         String PATTERN_HARNESS = \"PatternTestHarness\";\n         MethodDeclaration expectedResult = getMethodChangingName(inputCU, PATTERN_HARNESS, \"expectedOutput\");\n         MethodDeclaration actual = getMethodChangingName(clone, PATTERN_HARNESS, \"inputMethod\");\n \n+//        assertEquals(expectedResult, actual); // better diff - fails on String equals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0NDY3Ng==", "bodyText": "What about a different method name to highlight that this is not a plain getter but it does some side effect on indexing too?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512744676", "createdAt": "2020-10-27T14:33:56Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()\n+        ));\n+        return exprId;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MzY3Mw==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512753673", "createdAt": "2020-10-27T14:44:31Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java", "diffHunk": "@@ -56,6 +63,7 @@ public void createClassWithTwoParameters() {\n                 \"        }\\n\" +\n                 \"    }\\n\";\n \n+//        assertEquals(StaticJavaParser.parse(expectedResult), aClass.getCompilationUnit()); // Better diff", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTMyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void testMethod(EnumDeclaration classDeclaration) {\n          \n          \n            \n                private void createTestMethod(EnumDeclaration classDeclaration) {", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512759321", "createdAt": "2020-10-27T14:51:05Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "diffHunk": "@@ -43,7 +50,14 @@ String getPrefix() {\n     }\n \n     @Override\n-    void createMethodDeclaration(EnumDeclaration classDeclaration) {\n+    void createMethodsDeclaration(EnumDeclaration classDeclaration) {\n+        testMethod(classDeclaration);\n+        if(!predicateInformation.isEmpty()) {\n+            predicateInformationMethod(classDeclaration);\n+        }\n+    }\n+\n+    private void testMethod(EnumDeclaration classDeclaration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void predicateInformationMethod(EnumDeclaration classDeclaration) {\n          \n          \n            \n                private void createPredicateInformationMethod(EnumDeclaration classDeclaration) {", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512759685", "createdAt": "2020-10-27T14:51:30Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "diffHunk": "@@ -55,6 +69,20 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         methodDeclaration.setBody(new BlockStmt(NodeList.nodeList(new ReturnStmt(clone.getExpression()))));\n     }\n \n+    private void predicateInformationMethod(EnumDeclaration classDeclaration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MjAwNA==", "bodyText": "It seems not used. Can you please double check?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512762004", "createdAt": "2020-10-27T14:54:21Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java", "diffHunk": "@@ -65,4 +65,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return Objects.hash(compilationUnit, className, packageName);\n     }\n+\n+    public CompilationUnit getCompilationUnit() {\n+        return compilationUnit;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MzA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return allConstraintsMap;\n          \n          \n            \n                    return java.util.Collections.unmodifiableMap(allConstraintsMap);", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512763075", "createdAt": "2020-10-27T14:55:32Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java", "diffHunk": "@@ -858,4 +862,16 @@ public String getDomainClassesMetadataSource() {\n     public Map<LambdaExpr, java.lang.reflect.Type> getLambdaReturnTypes() {\n         return lambdaReturnTypes;\n     }\n+\n+    public void indexConstraint(String exprId, PredicateInformation predicateInformation) {\n+        allConstraintsMap.put(exprId, predicateInformation);\n+    }\n+\n+    public Optional<PredicateInformation> findConstraintWithExprId(String exprId) {\n+        return Optional.ofNullable(allConstraintsMap.get(exprId));\n+    }\n+\n+    public Map<String, PredicateInformation> getAllConstraintsMap() {\n+        return allConstraintsMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDYyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n          \n          \n            \n                    this.debugPredicateInformation = java.util.Collections.unmodifiableMap(pkgModel.getAllConstraintsMap());\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n          \n          \n            \n                    this.debugPredicateInformation = new HashMap<>(pkgModel.getAllConstraintsMap());", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512764620", "createdAt": "2020-10-27T14:57:16Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -88,6 +92,7 @@ public ExecModelLambdaPostProcessor(PackageModel pkgModel,\n         this.imports = pkgModel.getImports();\n         this.staticImports = pkgModel.getStaticImports();\n         this.lambdaReturnTypes = pkgModel.getLambdaReturnTypes();\n+        this.debugPredicateInformation = pkgModel.getAllConstraintsMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzA1NTE2", "url": "https://github.com/kiegroup/drools/pull/3193#pullrequestreview-518305516", "createdAt": "2020-10-28T03:50:56Z", "commit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1MDo1NlrOHpZEPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1MDo1NlrOHpZEPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            context.getRuleName()\n          \n          \n            \n                            context.getRuleDescr().getResource().getSourcePath()\n          \n      \n    \n    \n  \n\nHow about this for the latter parameter (ruleFileName)? I'm not fully sure if RuleDescr always has Resource so null check may be required.", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513164349", "createdAt": "2020-10-28T03:50:56Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzA2MDYy", "url": "https://github.com/kiegroup/drools/pull/3193#pullrequestreview-518306062", "createdAt": "2020-10-28T03:52:50Z", "commit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b299430449bb306f1a54382f713221271484bbf", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/1b299430449bb306f1a54382f713221271484bbf", "committedDate": "2020-10-28T07:18:32Z", "message": "Test for KOGITO-2836"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "174d95549190ca6da5f97af0f9c80f159f5dc5ee", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/174d95549190ca6da5f97af0f9c80f159f5dc5ee", "committedDate": "2020-10-28T07:18:32Z", "message": "Add information regarding the original constraint to executable model constraint for error reporting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f549de0de8179d83eae4cb71410ada5f2d26eccc", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/f549de0de8179d83eae4cb71410ada5f2d26eccc", "committedDate": "2020-10-28T07:18:32Z", "message": "Fix ExecModelLambdaPostProcessorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a81c48ffbb723d09d3028e43a84c0bdc5dab053", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/5a81c48ffbb723d09d3028e43a84c0bdc5dab053", "committedDate": "2020-10-28T07:18:32Z", "message": "MaterializedLambdaPredicateTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e9f084e4943c0d82a61681dcfb515ef025f740e", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/1e9f084e4943c0d82a61681dcfb515ef025f740e", "committedDate": "2020-10-28T07:18:32Z", "message": "Pass expr Id as argument to generate the materialized lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08429c868ef9bd41a8b7e3d9e18496bb3e871f0", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/d08429c868ef9bd41a8b7e3d9e18496bb3e871f0", "committedDate": "2020-10-28T07:18:32Z", "message": "Global map of exprId => rawconstraint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5517b036752395f03bae35dd4463af3be227a658", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/5517b036752395f03bae35dd4463af3be227a658", "committedDate": "2020-10-28T07:18:32Z", "message": "Correct quoting on predicate information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ace50eba083b4d6c8d18348ff2e40289623a371", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/8ace50eba083b4d6c8d18348ff2e40289623a371", "committedDate": "2020-10-28T07:18:33Z", "message": "Fixed NPE on testAfterWithAnd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "782d043b1e3bee3ee30f61cf373b955bffe456d0", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/782d043b1e3bee3ee30f61cf373b955bffe456d0", "committedDate": "2020-10-28T07:18:33Z", "message": "All predicates delegate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f991b54e2c34202f3206a53570dedd648ee293", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/14f991b54e2c34202f3206a53570dedd648ee293", "committedDate": "2020-10-28T07:18:33Z", "message": "First review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "committedDate": "2020-10-28T07:39:31Z", "message": "Review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/653fd3f05e553a8352d2d6e22dd628f13c006911", "committedDate": "2020-10-27T11:01:36Z", "message": "First review"}, "afterCommit": {"oid": "dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "committedDate": "2020-10-28T07:39:31Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/drools/commit/9a15690f473c9fd9f3cd75466daaa4765830ab7a", "committedDate": "2020-10-28T15:27:37Z", "message": "Better assertion method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODI2MzAw", "url": "https://github.com/kiegroup/drools/pull/3193#pullrequestreview-518826300", "createdAt": "2020-10-28T16:00:16Z", "commit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Njc4Nzk0", "url": "https://github.com/kiegroup/drools/pull/3193#pullrequestreview-519678794", "createdAt": "2020-10-29T13:45:06Z", "commit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0NTowNlrOHqcfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0NTowNlrOHqcfzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2OTEzMw==", "bodyText": "Minor: wouldn't be better to have a Predicate interface, make all PredicateX interfaces to extend it and put this method only there?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r514269133", "createdAt": "2020-10-29T13:45:06Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/Predicate1.java", "diffHunk": "@@ -26,6 +26,8 @@\n         return a -> !test( a );\n     }\n \n+    default PredicateInformation predicateInformation() { return PredicateInformation.EMPTY_PREDICATE_INFORMATION; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Njg1MjE3", "url": "https://github.com/kiegroup/drools/pull/3193#pullrequestreview-519685217", "createdAt": "2020-10-29T13:51:26Z", "commit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1720, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}