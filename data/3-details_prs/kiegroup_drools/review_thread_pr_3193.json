{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjU5NzE2", "number": 3193, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowNjo0MFrOEyV5AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0NTowNlrOEzTfWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjIyOTEzOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowNjo0MFrOHo7MPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyMDo0OVrOHpcxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NDg3Ng==", "bodyText": "I think it is better to be consistent: always wrap originalException or never. Now it is possible to have different stack traces for the same type of error. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512674876", "createdAt": "2020-10-27T13:06:40Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.model.functions;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Used to generate a better error message when constraints fail\n+ */\n+public class PredicateInformation {\n+\n+    public static final PredicateInformation EMPTY_PREDICATE_INFORMATION =\n+            new PredicateInformation(\"\", \"\", \"\");\n+\n+\n+    // Used to generate a significant error message\n+    private final String stringConstraint;\n+    private final String ruleName;\n+    private final String ruleFileName;\n+\n+    public PredicateInformation(String stringConstraint, String ruleName, String ruleFileName) {\n+        this.stringConstraint = defaultToEmptyString(stringConstraint);\n+        this.ruleName = defaultToEmptyString(ruleName);\n+        this.ruleFileName = defaultToEmptyString(ruleFileName);\n+    }\n+\n+    private String defaultToEmptyString(String stringConstraint) {\n+        return Optional.ofNullable(stringConstraint).orElse(\"\");\n+    }\n+\n+    public RuntimeException betterErrorMessage(RuntimeException originalException) {\n+        if(\"\".equals(stringConstraint)) {\n+            return originalException;\n+        }\n+\n+        String errorMessage = String.format(\n+                \"Error evaluating constraint '%s' in [Rule %s in %s]\",\n+                stringConstraint,\n+                ruleName,\n+                ruleFileName);\n+        return new RuntimeException(errorMessage, originalException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNDk4Mw==", "bodyText": "When we don't have the debug information (the original constraint) to me it doesn't make sense to wrap the original exception with a \ufffdRuntImeException and I wound't know which error message to put", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513224983", "createdAt": "2020-10-28T07:20:49Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.model.functions;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Used to generate a better error message when constraints fail\n+ */\n+public class PredicateInformation {\n+\n+    public static final PredicateInformation EMPTY_PREDICATE_INFORMATION =\n+            new PredicateInformation(\"\", \"\", \"\");\n+\n+\n+    // Used to generate a significant error message\n+    private final String stringConstraint;\n+    private final String ruleName;\n+    private final String ruleFileName;\n+\n+    public PredicateInformation(String stringConstraint, String ruleName, String ruleFileName) {\n+        this.stringConstraint = defaultToEmptyString(stringConstraint);\n+        this.ruleName = defaultToEmptyString(ruleName);\n+        this.ruleFileName = defaultToEmptyString(ruleFileName);\n+    }\n+\n+    private String defaultToEmptyString(String stringConstraint) {\n+        return Optional.ofNullable(stringConstraint).orElse(\"\");\n+    }\n+\n+    public RuntimeException betterErrorMessage(RuntimeException originalException) {\n+        if(\"\".equals(stringConstraint)) {\n+            return originalException;\n+        }\n+\n+        String errorMessage = String.format(\n+                \"Error evaluating constraint '%s' in [Rule %s in %s]\",\n+                stringConstraint,\n+                ruleName,\n+                ruleFileName);\n+        return new RuntimeException(errorMessage, originalException);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NDg3Ng=="}, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjQ3NjM1OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1ODoxNVrOHo9l9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyMzowOFrOHpc0eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNDIzMQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512714231", "createdAt": "2020-10-27T13:58:15Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java", "diffHunk": "@@ -27,12 +28,13 @@ public void convertPatternLambda() throws Exception {\n         CompilationUnit inputCU = parseResource(\"org/drools/modelcompiler/util/lambdareplace/PatternTestHarness.java\");\n         CompilationUnit clone = inputCU.clone();\n \n-        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), clone).convertLambdas();\n+        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), new HashMap<>(), clone).convertLambdas();\n \n         String PATTERN_HARNESS = \"PatternTestHarness\";\n         MethodDeclaration expectedResult = getMethodChangingName(inputCU, PATTERN_HARNESS, \"expectedOutput\");\n         MethodDeclaration actual = getMethodChangingName(clone, PATTERN_HARNESS, \"inputMethod\");\n \n+//        assertEquals(expectedResult, actual); // better diff - fails on String equals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNTg1MA==", "bodyText": "The assertEquals on the JavaParser AST produces a much better diff when the twos are different, therefore it's really useful to fix this kind of test. Unfortunately it can't be used for the assertion as it requires the node of the AST to be identical, so it pretty much fails all the time. That's why I used the assertion on the string. After five minutes of trying to understand the diff between the strings I remembered this diff is far much better so I think it could be useful the next time we have to fix it.\nAny suggestions are welcome though :)", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513225850", "createdAt": "2020-10-28T07:23:08Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java", "diffHunk": "@@ -27,12 +28,13 @@ public void convertPatternLambda() throws Exception {\n         CompilationUnit inputCU = parseResource(\"org/drools/modelcompiler/util/lambdareplace/PatternTestHarness.java\");\n         CompilationUnit clone = inputCU.clone();\n \n-        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), clone).convertLambdas();\n+        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), new HashMap<>(), clone).convertLambdas();\n \n         String PATTERN_HARNESS = \"PatternTestHarness\";\n         MethodDeclaration expectedResult = getMethodChangingName(inputCU, PATTERN_HARNESS, \"expectedOutput\");\n         MethodDeclaration actual = getMethodChangingName(clone, PATTERN_HARNESS, \"inputMethod\");\n \n+//        assertEquals(expectedResult, actual); // better diff - fails on String equals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNDIzMQ=="}, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjY2NTYzOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDozMzo1NlrOHo_c5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDozMzo1NlrOHo_c5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0NDY3Ng==", "bodyText": "What about a different method name to highlight that this is not a plain getter but it does some side effect on indexing too?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512744676", "createdAt": "2020-10-27T14:33:56Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()\n+        ));\n+        return exprId;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjcyMDkxOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo0NDozMVrOHpAACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNTozNVrOHpc4iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MzY3Mw==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512753673", "createdAt": "2020-10-27T14:44:31Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java", "diffHunk": "@@ -56,6 +63,7 @@ public void createClassWithTwoParameters() {\n                 \"        }\\n\" +\n                 \"    }\\n\";\n \n+//        assertEquals(StaticJavaParser.parse(expectedResult), aClass.getCompilationUnit()); // Better diff", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjg4OQ==", "bodyText": "Same as before, it's the \"better diff\" comment", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513226889", "createdAt": "2020-10-28T07:25:35Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java", "diffHunk": "@@ -56,6 +63,7 @@ public void createClassWithTwoParameters() {\n                 \"        }\\n\" +\n                 \"    }\\n\";\n \n+//        assertEquals(StaticJavaParser.parse(expectedResult), aClass.getCompilationUnit()); // Better diff", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MzY3Mw=="}, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjc1NTYxOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1MTowNVrOHpAWGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1MTowNVrOHpAWGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void testMethod(EnumDeclaration classDeclaration) {\n          \n          \n            \n                private void createTestMethod(EnumDeclaration classDeclaration) {", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512759321", "createdAt": "2020-10-27T14:51:05Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "diffHunk": "@@ -43,7 +50,14 @@ String getPrefix() {\n     }\n \n     @Override\n-    void createMethodDeclaration(EnumDeclaration classDeclaration) {\n+    void createMethodsDeclaration(EnumDeclaration classDeclaration) {\n+        testMethod(classDeclaration);\n+        if(!predicateInformation.isEmpty()) {\n+            predicateInformationMethod(classDeclaration);\n+        }\n+    }\n+\n+    private void testMethod(EnumDeclaration classDeclaration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjc1Nzc3OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1MTozMFrOHpAXhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1MTozMFrOHpAXhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void predicateInformationMethod(EnumDeclaration classDeclaration) {\n          \n          \n            \n                private void createPredicateInformationMethod(EnumDeclaration classDeclaration) {", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512759685", "createdAt": "2020-10-27T14:51:30Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "diffHunk": "@@ -55,6 +69,20 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         methodDeclaration.setBody(new BlockStmt(NodeList.nodeList(new ReturnStmt(clone.getExpression()))));\n     }\n \n+    private void predicateInformationMethod(EnumDeclaration classDeclaration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjc3MTkzOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1NDoyMVrOHpAglA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1NDoyMVrOHpAglA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MjAwNA==", "bodyText": "It seems not used. Can you please double check?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512762004", "createdAt": "2020-10-27T14:54:21Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java", "diffHunk": "@@ -65,4 +65,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return Objects.hash(compilationUnit, className, packageName);\n     }\n+\n+    public CompilationUnit getCompilationUnit() {\n+        return compilationUnit;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjc3ODM2OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1NTozMlrOHpAkww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1NTozMlrOHpAkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MzA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return allConstraintsMap;\n          \n          \n            \n                    return java.util.Collections.unmodifiableMap(allConstraintsMap);", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512763075", "createdAt": "2020-10-27T14:55:32Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java", "diffHunk": "@@ -858,4 +862,16 @@ public String getDomainClassesMetadataSource() {\n     public Map<LambdaExpr, java.lang.reflect.Type> getLambdaReturnTypes() {\n         return lambdaReturnTypes;\n     }\n+\n+    public void indexConstraint(String exprId, PredicateInformation predicateInformation) {\n+        allConstraintsMap.put(exprId, predicateInformation);\n+    }\n+\n+    public Optional<PredicateInformation> findConstraintWithExprId(String exprId) {\n+        return Optional.ofNullable(allConstraintsMap.get(exprId));\n+    }\n+\n+    public Map<String, PredicateInformation> getAllConstraintsMap() {\n+        return allConstraintsMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjc4ODE3OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo1NzoxNlrOHpAqzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNjo1MVrOHpc6lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n          \n          \n            \n                    this.debugPredicateInformation = java.util.Collections.unmodifiableMap(pkgModel.getAllConstraintsMap());\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n          \n          \n            \n                    this.debugPredicateInformation = new HashMap<>(pkgModel.getAllConstraintsMap());", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512764620", "createdAt": "2020-10-27T14:57:16Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -88,6 +92,7 @@ public ExecModelLambdaPostProcessor(PackageModel pkgModel,\n         this.imports = pkgModel.getImports();\n         this.staticImports = pkgModel.getStaticImports();\n         this.lambdaReturnTypes = pkgModel.getLambdaReturnTypes();\n+        this.debugPredicateInformation = pkgModel.getAllConstraintsMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzQxMw==", "bodyText": "if getAllConstraintsMap returns a new unmodifiableMap each time does it make sense to wrap it again here? I'd wrap it only once in the actual getter", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513227413", "createdAt": "2020-10-28T07:26:51Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -88,6 +92,7 @@ public ExecModelLambdaPostProcessor(PackageModel pkgModel,\n         this.imports = pkgModel.getImports();\n         this.staticImports = pkgModel.getStaticImports();\n         this.lambdaReturnTypes = pkgModel.getLambdaReturnTypes();\n+        this.debugPredicateInformation = pkgModel.getAllConstraintsMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDYyMA=="}, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM0Mzk4OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1MDo1NlrOHpZEPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNzo0N1rOHpdMiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            context.getRuleName()\n          \n          \n            \n                            context.getRuleDescr().getResource().getSourcePath()\n          \n      \n    \n    \n  \n\nHow about this for the latter parameter (ruleFileName)? I'm not fully sure if RuleDescr always has Resource so null check may be required.", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513164349", "createdAt": "2020-10-28T03:50:56Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzY4OA==", "bodyText": "Let me try it, thanks for the suggestion!", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513227688", "createdAt": "2020-10-28T07:27:28Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ=="}, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMjAwOQ==", "bodyText": "it works and now the error message is identical to the DRL one. Impressive thanks!", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513232009", "createdAt": "2020-10-28T07:37:47Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ=="}, "originalCommit": {"oid": "653fd3f05e553a8352d2d6e22dd628f13c006911"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjMyMTUyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/Predicate1.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0NTowNlrOHqcfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo1Mjo1NVrOHqc2bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2OTEzMw==", "bodyText": "Minor: wouldn't be better to have a Predicate interface, make all PredicateX interfaces to extend it and put this method only there?", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r514269133", "createdAt": "2020-10-29T13:45:06Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/Predicate1.java", "diffHunk": "@@ -26,6 +26,8 @@\n         return a -> !test( a );\n     }\n \n+    default PredicateInformation predicateInformation() { return PredicateInformation.EMPTY_PREDICATE_INFORMATION; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3NDkyNw==", "bodyText": "I guess yes, but I followed the non-polymorphic design we did in the first place", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r514274927", "createdAt": "2020-10-29T13:52:55Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/Predicate1.java", "diffHunk": "@@ -26,6 +26,8 @@\n         return a -> !test( a );\n     }\n \n+    default PredicateInformation predicateInformation() { return PredicateInformation.EMPTY_PREDICATE_INFORMATION; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2OTEzMw=="}, "originalCommit": {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2253, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}