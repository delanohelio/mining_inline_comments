{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNjA4ODQ5", "number": 2802, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzoxMVrODlE4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToxMDoyOVrODmmHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjAzOTMzOnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-api/src/main/java/org/kie/dmn/api/core/event/BeforeEvaluateAllEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzoxMVrOFxwiYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzoxMVrOFxwiYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTc3OQ==", "bodyText": "@tarilabs please check that the structure of BeforeEvaluateAllEvent makes sense to you", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387719779", "createdAt": "2020-03-04T14:57:11Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-api/src/main/java/org/kie/dmn/api/core/event/BeforeEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.kie.dmn.api.core.event;\n+\n+public interface BeforeEvaluateAllEvent extends DMNEvent {\n+\n+    String getModelNamespace();\n+\n+    String getModelName();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjA0MDg0OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-api/src/main/java/org/kie/dmn/api/core/event/AfterEvaluateAllEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzozMFrOFxwjTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzozMFrOFxwjTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDAxNQ==", "bodyText": "@tarilabs please check that the structure of AfterEvaluateAllEvent makes sense to you", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387720015", "createdAt": "2020-03-04T14:57:30Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-api/src/main/java/org/kie/dmn/api/core/event/AfterEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.kie.dmn.api.core.event;\n+\n+public interface AfterEvaluateAllEvent extends DMNEvent {\n+\n+    String getModelNamespace();\n+\n+    String getModelName();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjUxOTc0OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0OTo0OFrOFx1Qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTozMjozOVrOFyyVwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ==", "bodyText": "I am missing why this change is needed, please?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387797131", "createdAt": "2020-03-04T16:49:48Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNDU0Ng==", "bodyText": "Nevermind, I believe I got it, because to align with this: 8116db8#diff-9e8ea9e754fcefdbad2891d584eaa112R34", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387814546", "createdAt": "2020-03-04T17:19:12Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNDY2OA==", "bodyText": "please confirm.", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387814668", "createdAt": "2020-03-04T17:19:22Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Mjc3Mg==", "bodyText": "What about removing the Supplier with\n    private static <T extends DMNEvent> T notifyListeners(DMNRuntimeEventManager eventManager, T event, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {\n        if (!eventManager.hasListeners()) {\n            return null;\n        }\n\n        for( DMNRuntimeEventListener listener : eventManager.getListeners() ) {\n            try {\n                eventConsumer.accept(listener, event);\n\n?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388172772", "createdAt": "2020-03-05T09:31:58Z", "author": {"login": "r00ta"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MTg0MA==", "bodyText": "Please verify performance implication too because I expect this new notifyListeners method might have a negative impact", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388271840", "createdAt": "2020-03-05T12:48:43Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5Nzg5MA==", "bodyText": "I just reverted it back to the original one just adding the two methods I need", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388797890", "createdAt": "2020-03-06T09:32:39Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTU0NDY4OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/AfterEvaluateAllEventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1MjoxOFrOFySVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MDozOFrOFyylSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzU3Nw==", "bodyText": "What about final?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388273577", "createdAt": "2020-03-05T12:52:18Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/AfterEvaluateAllEventImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.dmn.core.impl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.AfterEvaluateAllEvent;\n+\n+public class AfterEvaluateAllEventImpl implements AfterEvaluateAllEvent {\n+\n+    private String modelNamespace;\n+    private String modelName;\n+    private DMNResult result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMTg2NA==", "bodyText": "I looked at classes implementing other DMN events and none of them has final private attributes, so I assumed there may be some reason I don't know yet.\nI can mark them as final if there's no such reason \ud83d\ude09", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388801864", "createdAt": "2020-03-06T09:40:38Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/AfterEvaluateAllEventImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.dmn.core.impl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.AfterEvaluateAllEvent;\n+\n+public class AfterEvaluateAllEventImpl implements AfterEvaluateAllEvent {\n+\n+    private String modelNamespace;\n+    private String modelName;\n+    private DMNResult result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzU3Nw=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTU0NDk4OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/BeforeEvaluateAllEventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1MjoyNFrOFySV2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MTowMFrOFyymEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzYyNg==", "bodyText": "What about final?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388273626", "createdAt": "2020-03-05T12:52:24Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/BeforeEvaluateAllEventImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.dmn.core.impl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.BeforeEvaluateAllEvent;\n+\n+public class BeforeEvaluateAllEventImpl implements BeforeEvaluateAllEvent {\n+\n+    private String modelNamespace;\n+    private String modelName;\n+    private DMNResult result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMjA2NQ==", "bodyText": "Same as here", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388802065", "createdAt": "2020-03-06T09:41:00Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/BeforeEvaluateAllEventImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.dmn.core.impl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.BeforeEvaluateAllEvent;\n+\n+public class BeforeEvaluateAllEventImpl implements BeforeEvaluateAllEvent {\n+\n+    private String modelNamespace;\n+    private String modelName;\n+    private DMNResult result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzYyNg=="}, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzk3MDAyOnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/classloader/DMNRuntimeListenerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToxMDoyOVrOF0Gb-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoyMjo1MVrOF0w7Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3NTczOA==", "bodyText": "wouldn't be easier to just have a separate test for the 2 new events?\nyou can even use an anonymous class listener just tailored to the 2 new events.\nThis way we guarantee non regression more easily", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r390175738", "createdAt": "2020-03-10T09:10:29Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/classloader/DMNRuntimeListenerTest.java", "diffHunk": "@@ -139,7 +142,11 @@ public void testListenerWithBKM() throws Exception {\n         final DMNRuntime runtime = DMNRuntimeUtil.createRuntime(\"org/kie/dmn/core/say_for_hello.dmn\", this.getClass());\n         TestEventListener listener = new TestEventListener();\n         runtime.addListener(listener);\n-        final DMNModel dmnModel = runtime.getModel(\"http://www.trisotech.com/dmn/definitions/_b6f2a9ca-a246-4f27-896a-e8ef04ea439c\", \"say for hello\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NTkxNg==", "bodyText": "I expanded the already existing test because I thought its purpose was to test the whole sequence of events, since it includes also BeforeEvaluateDecisionEvent and AfterEvaluateDecisionEvent.\nI can easily move my logic to a separate one... @danielezonca what do you think?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r390185916", "createdAt": "2020-03-10T09:28:29Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/classloader/DMNRuntimeListenerTest.java", "diffHunk": "@@ -139,7 +142,11 @@ public void testListenerWithBKM() throws Exception {\n         final DMNRuntime runtime = DMNRuntimeUtil.createRuntime(\"org/kie/dmn/core/say_for_hello.dmn\", this.getClass());\n         TestEventListener listener = new TestEventListener();\n         runtime.addListener(listener);\n-        final DMNModel dmnModel = runtime.getModel(\"http://www.trisotech.com/dmn/definitions/_b6f2a9ca-a246-4f27-896a-e8ef04ea439c\", \"say for hello\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3NTczOA=="}, "originalCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgyNDQ2Ng==", "bodyText": "It is the same for me, probably if we move this additional check to another test it could be easier to read", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r390824466", "createdAt": "2020-03-11T08:59:22Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/classloader/DMNRuntimeListenerTest.java", "diffHunk": "@@ -139,7 +142,11 @@ public void testListenerWithBKM() throws Exception {\n         final DMNRuntime runtime = DMNRuntimeUtil.createRuntime(\"org/kie/dmn/core/say_for_hello.dmn\", this.getClass());\n         TestEventListener listener = new TestEventListener();\n         runtime.addListener(listener);\n-        final DMNModel dmnModel = runtime.getModel(\"http://www.trisotech.com/dmn/definitions/_b6f2a9ca-a246-4f27-896a-e8ef04ea439c\", \"say for hello\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3NTczOA=="}, "originalCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MTg3OQ==", "bodyText": "Ok I moved it in a separate test \ud83d\udc4d", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r390871879", "createdAt": "2020-03-11T10:22:51Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/classloader/DMNRuntimeListenerTest.java", "diffHunk": "@@ -139,7 +142,11 @@ public void testListenerWithBKM() throws Exception {\n         final DMNRuntime runtime = DMNRuntimeUtil.createRuntime(\"org/kie/dmn/core/say_for_hello.dmn\", this.getClass());\n         TestEventListener listener = new TestEventListener();\n         runtime.addListener(listener);\n-        final DMNModel dmnModel = runtime.getModel(\"http://www.trisotech.com/dmn/definitions/_b6f2a9ca-a246-4f27-896a-e8ef04ea439c\", \"say for hello\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3NTczOA=="}, "originalCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2590, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}