{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzI3MTY1", "number": 2979, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNTo0M1rOEMCLww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NDo1NFrOEMEEaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU0MTQ3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/ConverterTypeUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNTo0M1rOGt6Pwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyNTo0N1rOGt8JbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzQxMA==", "bodyText": "Isn't String a supported type?", "url": "https://github.com/kiegroup/drools/pull/2979#discussion_r450793410", "createdAt": "2020-07-07T11:25:43Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/ConverterTypeUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+/**\n+ * Class meant to provide helper methods to <b>convert</b> a given object to another one of a requested type\n+ */\n+public class ConverterTypeUtil {\n+\n+    static final String FAILED_CONVERSION = \"Failed to convert %s to %s\";\n+\n+    private ConverterTypeUtil() {\n+        // Avoid instantiation\n+    }\n+\n+    /**\n+     * Convert the given <code>Object</code> to expected <code>Class</code>.\n+     * It throws <code>KiePMMLInternalException</code> if conversion has failed\n+     *\n+     * @param expectedClass\n+     * @param originalObject\n+     * @return\n+     */\n+    public static Object convert(Class<?> expectedClass, Object originalObject) {\n+        if (originalObject == null) {\n+            return null;\n+        }\n+        Class<?> currentClass = originalObject.getClass();\n+        if (expectedClass.isAssignableFrom(currentClass)) {\n+            return originalObject;\n+        }\n+        Object toReturn;\n+        if (currentClass.equals(String.class)) {\n+            try {\n+                toReturn =convertFromString(expectedClass, (String) originalObject);\n+            } catch (Exception e) {\n+                throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                                 expectedClass.getName()), e);\n+            }\n+        } else if (expectedClass == String.class) {\n+            toReturn = originalObject.toString();\n+        } else {\n+            throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                             expectedClass.getName()));\n+        }\n+        return toReturn;\n+    }\n+\n+    static Object convertFromString(Class<?> expectedClass, String originalObject) {\n+        if (expectedClass.isAssignableFrom(Boolean.class) || expectedClass.isAssignableFrom(boolean.class)) {\n+            return parseBoolean(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Integer.class) || expectedClass.isAssignableFrom(int.class)) {\n+            return Integer.parseInt(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Long.class) || expectedClass.isAssignableFrom(long.class)) {\n+            return Long.parseLong(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Double.class) || expectedClass.isAssignableFrom(double.class)) {\n+            return Double.parseDouble(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Float.class) || expectedClass.isAssignableFrom(float.class)) {\n+            return Float.parseFloat(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Character.class) || expectedClass.isAssignableFrom(char.class)) {\n+            return parseChar(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Byte.class) || expectedClass.isAssignableFrom(byte.class)) {\n+            return Byte.parseByte(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Short.class) || expectedClass.isAssignableFrom(short.class)) {\n+            return Short.parseShort(originalObject);\n+        } else {\n+            throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                     expectedClass.getName()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723a34fcd46cf85060f9303b341353c44647c2a6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNDU1Nw==", "bodyText": "@danielezonca\nThat method is \"convertFromString\" - it is invoked when the original object is a String and it has to be converted to a different type", "url": "https://github.com/kiegroup/drools/pull/2979#discussion_r450824557", "createdAt": "2020-07-07T12:25:47Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/ConverterTypeUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+/**\n+ * Class meant to provide helper methods to <b>convert</b> a given object to another one of a requested type\n+ */\n+public class ConverterTypeUtil {\n+\n+    static final String FAILED_CONVERSION = \"Failed to convert %s to %s\";\n+\n+    private ConverterTypeUtil() {\n+        // Avoid instantiation\n+    }\n+\n+    /**\n+     * Convert the given <code>Object</code> to expected <code>Class</code>.\n+     * It throws <code>KiePMMLInternalException</code> if conversion has failed\n+     *\n+     * @param expectedClass\n+     * @param originalObject\n+     * @return\n+     */\n+    public static Object convert(Class<?> expectedClass, Object originalObject) {\n+        if (originalObject == null) {\n+            return null;\n+        }\n+        Class<?> currentClass = originalObject.getClass();\n+        if (expectedClass.isAssignableFrom(currentClass)) {\n+            return originalObject;\n+        }\n+        Object toReturn;\n+        if (currentClass.equals(String.class)) {\n+            try {\n+                toReturn =convertFromString(expectedClass, (String) originalObject);\n+            } catch (Exception e) {\n+                throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                                 expectedClass.getName()), e);\n+            }\n+        } else if (expectedClass == String.class) {\n+            toReturn = originalObject.toString();\n+        } else {\n+            throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                             expectedClass.getName()));\n+        }\n+        return toReturn;\n+    }\n+\n+    static Object convertFromString(Class<?> expectedClass, String originalObject) {\n+        if (expectedClass.isAssignableFrom(Boolean.class) || expectedClass.isAssignableFrom(boolean.class)) {\n+            return parseBoolean(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Integer.class) || expectedClass.isAssignableFrom(int.class)) {\n+            return Integer.parseInt(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Long.class) || expectedClass.isAssignableFrom(long.class)) {\n+            return Long.parseLong(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Double.class) || expectedClass.isAssignableFrom(double.class)) {\n+            return Double.parseDouble(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Float.class) || expectedClass.isAssignableFrom(float.class)) {\n+            return Float.parseFloat(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Character.class) || expectedClass.isAssignableFrom(char.class)) {\n+            return parseChar(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Byte.class) || expectedClass.isAssignableFrom(byte.class)) {\n+            return Byte.parseByte(originalObject);\n+        } else if (expectedClass.isAssignableFrom(Short.class) || expectedClass.isAssignableFrom(short.class)) {\n+            return Short.parseShort(originalObject);\n+        } else {\n+            throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                     expectedClass.getName()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzQxMA=="}, "originalCommit": {"oid": "723a34fcd46cf85060f9303b341353c44647c2a6"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg1MDMyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/ConverterTypeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NDo1NFrOGt9L7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NDo1NFrOGt9L7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MTU4Mg==", "bodyText": "I would suggest String.valueOf to avoid a NPE", "url": "https://github.com/kiegroup/drools/pull/2979#discussion_r450841582", "createdAt": "2020-07-07T12:54:54Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/ConverterTypeUtil.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+import java.util.function.Predicate;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+/**\n+ * Class meant to provide helper methods to <b>convert</b> a given object to another one of a requested type\n+ */\n+public class ConverterTypeUtil {\n+\n+    static final String FAILED_CONVERSION = \"Failed to convert %s to %s\";\n+    private static Predicate<Class<?>> IS_BOOLEAN =\n+            expectedClass -> expectedClass.isAssignableFrom(Boolean.class) || expectedClass.isAssignableFrom(boolean.class);\n+    private static Predicate<Class<?>> IS_INTEGER =\n+            expectedClass -> expectedClass.isAssignableFrom(Integer.class) || expectedClass.isAssignableFrom(int.class);\n+    private static Predicate<Class<?>> IS_LONG =\n+            expectedClass -> expectedClass.isAssignableFrom(Long.class) || expectedClass.isAssignableFrom(long.class);\n+    private static Predicate<Class<?>> IS_DOUBLE =\n+            expectedClass -> expectedClass.isAssignableFrom(Double.class) || expectedClass.isAssignableFrom(double.class);\n+    private static Predicate<Class<?>> IS_FLOAT =\n+            expectedClass -> expectedClass.isAssignableFrom(Float.class) || expectedClass.isAssignableFrom(float.class);\n+    private static Predicate<Class<?>> IS_CHARACTER =\n+            expectedClass -> expectedClass.isAssignableFrom(Character.class) || expectedClass.isAssignableFrom(char.class);\n+    private static Predicate<Class<?>> IS_BYTE =\n+            expectedClass -> expectedClass.isAssignableFrom(Byte.class) || expectedClass.isAssignableFrom(byte.class);\n+    private static Predicate<Class<?>> IS_SHORT =\n+            expectedClass -> expectedClass.isAssignableFrom(Short.class) || expectedClass.isAssignableFrom(short.class);\n+\n+    private ConverterTypeUtil() {\n+        // Avoid instantiation\n+    }\n+\n+    /**\n+     * Convert the given <code>Object</code> to expected <code>Class</code>.\n+     * It throws <code>KiePMMLInternalException</code> if conversion has failed\n+     * @param expectedClass\n+     * @param originalObject\n+     * @return\n+     */\n+    public static Object convert(Class<?> expectedClass, Object originalObject) {\n+        if (originalObject == null) {\n+            return null;\n+        }\n+        Class<?> currentClass = originalObject.getClass();\n+        if (expectedClass.isAssignableFrom(currentClass)) {\n+            return originalObject;\n+        }\n+        Object toReturn;\n+        if (currentClass.equals(String.class)) {\n+            try {\n+                toReturn = convertFromString(expectedClass, (String) originalObject);\n+            } catch (Exception e) {\n+                throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n+                                                         expectedClass.getName()), e);\n+            }\n+        } else if (expectedClass == String.class) {\n+            toReturn = originalObject.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83228abafed8979f1caaa6dec8d9d8b79f2f0e15"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2380, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}