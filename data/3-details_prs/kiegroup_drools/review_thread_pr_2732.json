{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Mjc1MDU5", "number": 2732, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo1OTozNVrODbMciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo1OTozNVrODbMciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODQyMDU5OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo1OTozNVrOFiid9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozNDowOVrOFilGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2MDYyOA==", "bodyText": "Nitpicking - it might be better to call this in an else part of the next if statement. Currently .setFeelType can be called twice in some situations. What I mean is:\nif (type.isCollection()) {\n    type.setFeelType(new GenListType(type.getFeelType()));\n} else {\n    type.setFeelType(new MapBackedType(type.getName(), fieldsAsFEEL));\n}", "url": "https://github.com/kiegroup/drools/pull/2732#discussion_r371760628", "createdAt": "2020-01-28T11:59:35Z", "author": {"login": "baldimir"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java", "diffHunk": "@@ -603,11 +608,17 @@ private DMNType buildTypeDef(DMNCompilerContext ctx, DMNModelImpl dmnModel, DMNN\n                                            itemDef.getName() );\n                 }\n             }\n+            Map<String, Type> fieldsAsFEEL = new HashMap<>();\n             for (ItemDefinition fieldDef : itemDef.getItemComponent()) {\n                 DMNCompilerHelper.checkVariableName(dmnModel, fieldDef, fieldDef.getName());\n                 DMNType fieldType = buildTypeDef(ctx, dmnModel, node, fieldDef, false);\n                 fieldType = fieldType != null ? fieldType : dmnModel.getTypeRegistry().unknown();\n                 compType.addField(fieldDef.getName(), fieldType);\n+                fieldsAsFEEL.put(fieldDef.getName(), ((BaseDMNTypeImpl) fieldType).getFeelType());\n+            }\n+            type.setFeelType(new MapBackedType(type.getName(), fieldsAsFEEL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9562b5cd36e4453ebf4ec3def17c90865a52c50"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwMzE4NQ==", "bodyText": "I missed that it is getting wrapped. Ignore this comment.", "url": "https://github.com/kiegroup/drools/pull/2732#discussion_r371803185", "createdAt": "2020-01-28T13:33:11Z", "author": {"login": "baldimir"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java", "diffHunk": "@@ -603,11 +608,17 @@ private DMNType buildTypeDef(DMNCompilerContext ctx, DMNModelImpl dmnModel, DMNN\n                                            itemDef.getName() );\n                 }\n             }\n+            Map<String, Type> fieldsAsFEEL = new HashMap<>();\n             for (ItemDefinition fieldDef : itemDef.getItemComponent()) {\n                 DMNCompilerHelper.checkVariableName(dmnModel, fieldDef, fieldDef.getName());\n                 DMNType fieldType = buildTypeDef(ctx, dmnModel, node, fieldDef, false);\n                 fieldType = fieldType != null ? fieldType : dmnModel.getTypeRegistry().unknown();\n                 compType.addField(fieldDef.getName(), fieldType);\n+                fieldsAsFEEL.put(fieldDef.getName(), ((BaseDMNTypeImpl) fieldType).getFeelType());\n+            }\n+            type.setFeelType(new MapBackedType(type.getName(), fieldsAsFEEL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2MDYyOA=="}, "originalCommit": {"oid": "e9562b5cd36e4453ebf4ec3def17c90865a52c50"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwMzY2OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/kiegroup/drools/pull/2732#discussion_r371803669", "createdAt": "2020-01-28T13:34:09Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java", "diffHunk": "@@ -603,11 +608,17 @@ private DMNType buildTypeDef(DMNCompilerContext ctx, DMNModelImpl dmnModel, DMNN\n                                            itemDef.getName() );\n                 }\n             }\n+            Map<String, Type> fieldsAsFEEL = new HashMap<>();\n             for (ItemDefinition fieldDef : itemDef.getItemComponent()) {\n                 DMNCompilerHelper.checkVariableName(dmnModel, fieldDef, fieldDef.getName());\n                 DMNType fieldType = buildTypeDef(ctx, dmnModel, node, fieldDef, false);\n                 fieldType = fieldType != null ? fieldType : dmnModel.getTypeRegistry().unknown();\n                 compType.addField(fieldDef.getName(), fieldType);\n+                fieldsAsFEEL.put(fieldDef.getName(), ((BaseDMNTypeImpl) fieldType).getFeelType());\n+            }\n+            type.setFeelType(new MapBackedType(type.getName(), fieldsAsFEEL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2MDYyOA=="}, "originalCommit": {"oid": "e9562b5cd36e4453ebf4ec3def17c90865a52c50"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2636, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}