{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTMyODY2", "number": 2736, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1ODoyNVrODblH1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1OToxMVrODblI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjQ2MzU3OnYy", "diffSide": "RIGHT", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1ODoyNlrOFjJRBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDoyOTozNlrOFjKWAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjI5Mw==", "bodyText": "Also different value, not just order, wee need to fix", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372396293", "createdAt": "2020-01-29T13:58:26Z", "author": {"login": "jomarko"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMzk1NA==", "bodyText": "@jomarko Done, thank you!", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372413954", "createdAt": "2020-01-29T14:29:36Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjI5Mw=="}, "originalCommit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjQ2NjI0OnYy", "diffSide": "RIGHT", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1OToxMVrOFjJSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDoyOTo0MlrOFjKWOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjcyMg==", "bodyText": "same lines", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372396722", "createdAt": "2020-01-29T13:59:11Z", "author": {"login": "jomarko"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));\n+        /* IN operator */\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNDAxMQ==", "bodyText": "@jomarko Done, thank you!", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372414011", "createdAt": "2020-01-29T14:29:42Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));\n+        /* IN operator */\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjcyMg=="}, "originalCommit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2565, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}