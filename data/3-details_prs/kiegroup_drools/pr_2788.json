{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDcxNDAw", "number": 2788, "title": "[DROOLS-4956] Normarize rule constraints for property reactivity and \u2026", "bodyText": "\u2026indexing\nWIP implementation. As suggested, now I focus on executable-model.\nNote that this PR has several @ignore tests where I haven't yet implemented logic for those cases.\nPlease give a quick review before going too far. Thanks!", "createdAt": "2020-02-26T08:18:30Z", "url": "https://github.com/kiegroup/drools/pull/2788", "merged": true, "mergeCommit": {"oid": "16113ad197b89515b33aae788b689c0a9f4cb107"}, "closed": true, "closedAt": "2020-03-16T16:15:03Z", "author": {"login": "tkobayas"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIDCetAFqTM2NDcyNDA4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOK1oRgH2gAyMzgwMDcxNDAwOmJkZDI0ODcwOTFmZDlmYWU5ZjQ0MGYxOWEyZTBkMzllYjA2NTFhMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzI0MDg0", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-364724084", "createdAt": "2020-02-26T09:05:42Z", "commit": {"oid": "ac9da977df36f5d3f3f646b6173b0cef1670e5d0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTowNTo0MlrOFujQIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTowOTo0MVrOFujYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1NjM4Ng==", "bodyText": "I like how everything related to this logic is in just one class", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r384356386", "createdAt": "2020-02-26T09:05:42Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.drools.modelcompiler.builder.generator;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import org.drools.model.Index.ConstraintType;\n+import org.drools.modelcompiler.builder.generator.drlxparse.DrlxParseResult;\n+import org.drools.modelcompiler.builder.generator.drlxparse.SingleDrlxParseSuccess;\n+import org.drools.modelcompiler.builder.generator.visitor.pattern.PatternConstraintParseResult;\n+import org.drools.modelcompiler.util.EvaluationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.drools.modelcompiler.builder.generator.DrlxParseUtil.THIS_PLACEHOLDER;\n+\n+public class ConstraintUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9da977df36f5d3f3f646b6173b0cef1670e5d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1NzM4Mg==", "bodyText": "Please double check the inversion because I'm not sure but maybe > gets inverted to \u2264 and < to \u2265 (greater than => less than equal) (less than => greater than equal)", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r384357382", "createdAt": "2020-02-26T09:07:39Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.drools.modelcompiler.builder.generator;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import org.drools.model.Index.ConstraintType;\n+import org.drools.modelcompiler.builder.generator.drlxparse.DrlxParseResult;\n+import org.drools.modelcompiler.builder.generator.drlxparse.SingleDrlxParseSuccess;\n+import org.drools.modelcompiler.builder.generator.visitor.pattern.PatternConstraintParseResult;\n+import org.drools.modelcompiler.util.EvaluationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.drools.modelcompiler.builder.generator.DrlxParseUtil.THIS_PLACEHOLDER;\n+\n+public class ConstraintUtil {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConstraintUtil.class);\n+\n+    private static final String METHOD_PREFIX = EvaluationUtil.class.getCanonicalName() + \".\";\n+\n+    public static final String DROOLS_NORMALIZE_CONSTRAINT = \"drools.normalize.constraint\";\n+\n+    private static boolean ENABLE_NORMALIZE = Boolean.valueOf(System.getProperty(DROOLS_NORMALIZE_CONSTRAINT, \"true\"));\n+\n+    public static PatternConstraintParseResult normalizeConstraint(PatternConstraintParseResult pConstraint) {\n+        if (!ENABLE_NORMALIZE) {\n+            return pConstraint;\n+        }\n+\n+        DrlxParseResult drlxParseResult = pConstraint.getDrlxParseResult();\n+\n+        if (drlxParseResult instanceof SingleDrlxParseSuccess) {\n+            SingleDrlxParseSuccess s = (SingleDrlxParseSuccess) drlxParseResult;\n+\n+            // TODO: Add logic based on s.getExpr() class\n+\n+            ConstraintType type = s.getDecodeConstraintType();\n+            TypedExpression left = s.getLeft();\n+            TypedExpression right = s.getRight();\n+            if (type != null && (type == ConstraintType.EQUAL || type == ConstraintType.NOT_EQUAL || type == ConstraintType.GREATER_THAN || type == ConstraintType.GREATER_OR_EQUAL || type == ConstraintType.LESS_THAN ||\n+                                 type == ConstraintType.LESS_OR_EQUAL) && (isPropertyOnRight(left, right))) {\n+                inverseExpression(s);\n+            }\n+        }\n+\n+        return pConstraint;\n+    }\n+\n+    private static boolean isPropertyOnRight(TypedExpression left, TypedExpression right) {\n+        if (!isProperty(left) && isProperty(right)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isProperty(TypedExpression tExpr) {\n+        if (tExpr == null) {\n+            return false;\n+        }\n+        Expression expr = tExpr.getExpression();\n+        if (expr instanceof MethodCallExpr) {\n+            Optional<Expression> thisScope = getRootScope((MethodCallExpr) expr).filter(scope -> scope.equals(new NameExpr(THIS_PLACEHOLDER)));\n+            if (thisScope.isPresent()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static Optional<Expression> getRootScope(MethodCallExpr mcExpr) {\n+        // to get \"_this\" from nested property like \"_this.getAdress().getCity()\"\n+        return mcExpr.getScope().flatMap(s -> {\n+            if (s instanceof NameExpr) {\n+                return Optional.of(s);\n+            } else if (s instanceof MethodCallExpr) {\n+                return getRootScope((MethodCallExpr) s);\n+            } else {\n+                return Optional.empty();\n+            }\n+        });\n+    }\n+\n+    private static void inverseExpression(SingleDrlxParseSuccess s) {\n+        Expression expr = s.getExpr();\n+        if (!(expr instanceof MethodCallExpr)) {\n+            return;\n+        }\n+        MethodCallExpr mExpr = (MethodCallExpr) expr;\n+        String mExprName = mExpr.getName().asString();\n+        String methodName = mExprName.substring(METHOD_PREFIX.length(), mExprName.length());\n+        NodeList<Expression> arguments = mExpr.getArguments();\n+        if (arguments.size() != 2) {\n+            return;\n+        }\n+        ConstraintType inversedOperator = null;\n+        try {\n+            switch (s.getDecodeConstraintType()) {\n+                case EQUAL:\n+                    inversedOperator = ConstraintType.EQUAL;\n+                    break;\n+                case NOT_EQUAL:\n+                    inversedOperator = ConstraintType.NOT_EQUAL;\n+                    break;\n+                case GREATER_THAN:\n+                    inversedOperator = ConstraintType.LESS_THAN;\n+                    methodName = replaceMethodName(methodName, \"greaterThan\", \"lessThan\");\n+                    break;\n+                case GREATER_OR_EQUAL:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9da977df36f5d3f3f646b6173b0cef1670e5d0"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODQxNg==", "bodyText": "Here maybe instead of the definition of the rule we should test the behaviour. So we insert all kind of people and only the one that matches are in the result. What do you think?", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r384358416", "createdAt": "2020-02-26T09:09:41Z", "author": {"login": "lucamolteni"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/ConstraintNormalizationTest.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.modelcompiler;\n+\n+import java.math.BigDecimal;\n+\n+import org.drools.core.common.NamedEntryPoint;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.AlphaNode;\n+import org.drools.core.reteoo.CompositeObjectSinkAdapter;\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.core.rule.GroupElement;\n+import org.drools.core.rule.Pattern;\n+import org.drools.modelcompiler.builder.generator.DRLIdGenerator;\n+import org.drools.modelcompiler.constraints.LambdaConstraint;\n+import org.drools.modelcompiler.domain.Address;\n+import org.drools.modelcompiler.domain.Child;\n+import org.drools.modelcompiler.domain.Man;\n+import org.drools.modelcompiler.domain.Person;\n+import org.drools.modelcompiler.domain.Toy;\n+import org.drools.modelcompiler.domain.Woman;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.runtime.KieSession;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+public class ConstraintNormalizationTest extends BaseModelTest {\n+\n+    // Only supports executable-model at the moment\n+    @Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        if (Boolean.valueOf(System.getProperty(\"alphanetworkCompilerEnabled\"))) {\n+            return new Object[]{RUN_TYPE.FLOW_DSL, RUN_TYPE.PATTERN_DSL, RUN_TYPE.FLOW_WITH_ALPHA_NETWORK, RUN_TYPE.PATTERN_WITH_ALPHA_NETWORK};\n+        } else {\n+            return new Object[]{RUN_TYPE.FLOW_DSL, RUN_TYPE.PATTERN_DSL};\n+        }\n+    }\n+\n+    public ConstraintNormalizationTest(RUN_TYPE testRunType) {\n+        super(testRunType);\n+    }\n+\n+    @Test\n+    public void testNormalizationForPropertyReactivity() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"import \" + Toy.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $t : Toy($owner : owner)\\n\" +\n+                           \" $p : Person($owner == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"  $p.setAge(20);\" +\n+                           \"  update($p);\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \"  $p : Person(age == 20)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        final Toy t = new Toy(\"Ball\");\n+        t.setOwner(\"Toshiya\");\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(t);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules(10)); // no infinite loop\n+    }\n+\n+    @Test\n+    public void testNormalizationForPropertyReactivity2() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $i : Integer()\\n\" +\n+                           \" $p : Person($i < age)\\n\" +\n+                           \"then\\n\" +\n+                           \"  $p.setName(\\\"Blaa\\\");\" +\n+                           \"  update($p);\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(name == \\\"Blaa\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(new Integer(30));\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules(10)); // no infinite loop\n+    }\n+\n+    @Test\n+    public void testNormalizationForAlphaIndexing() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $p : Person(\\\"Toshiya\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(\\\"Mario\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R3 when \\n\" +\n+                           \" $p : Person(\\\"Luca\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        ObjectTypeNode otn = ((NamedEntryPoint) ksession.getEntryPoint(\"DEFAULT\")).getEntryPointNode().getObjectTypeNodes().entrySet()\n+                                                                                  .stream()\n+                                                                                  .filter(e -> e.getKey().getClassName().equals(Person.class.getCanonicalName()))\n+                                                                                  .map(e -> e.getValue())\n+                                                                                  .findFirst()\n+                                                                                  .get();\n+        CompositeObjectSinkAdapter sinkAdaptor = (CompositeObjectSinkAdapter) otn.getObjectSinkPropagator();\n+\n+        assertNotNull(sinkAdaptor.getHashedSinkMap());\n+        assertEquals(3, sinkAdaptor.getHashedSinkMap().size());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(p);\n+        assertEquals(1, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNormalizationForNodeSharing() {\n+\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $p : Person(\\\"Toshiya\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(name == \\\"Toshiya\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testOperators() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(20 < age, 30 > age)\\n\" +\n+                           \" Person(30 <= age, 40 >= age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        if (testRunType == RUN_TYPE.FLOW_DSL || testRunType == RUN_TYPE.PATTERN_DSL) {\n+            String exprId1 = new DRLIdGenerator().getExprId(Person.class, \"org.drools.modelcompiler.util.EvaluationUtil.\" +\n+                                                                          \"greaterThanNumbers(_this.getAge(), 20)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9da977df36f5d3f3f646b6173b0cef1670e5d0"}, "originalPosition": 190}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "956b8298a9ec574b87bc8181a978d8eedc521585", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/956b8298a9ec574b87bc8181a978d8eedc521585", "committedDate": "2020-02-27T04:51:07Z", "message": "- Fix code smells"}, "afterCommit": {"oid": "9e0a3cc35903d740fc1133691da1a821530828bd", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/9e0a3cc35903d740fc1133691da1a821530828bd", "committedDate": "2020-03-04T05:46:32Z", "message": "- implement BigDecimal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTQxNjAw", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-368541600", "createdAt": "2020-03-04T07:00:25Z", "commit": {"oid": "9e0a3cc35903d740fc1133691da1a821530828bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjA1NDc3", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-368605477", "createdAt": "2020-03-04T09:07:58Z", "commit": {"oid": "9e0a3cc35903d740fc1133691da1a821530828bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTowNzo1OFrOFxlBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTowNzo1OFrOFxlBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzMTE0OA==", "bodyText": "I understand why you're doing this, but having a so special case only for BigDecimal is not ideal. I think this is still manageable but we need to avoid having tons of special cases like this. Regarding this specific fix, I'm afraid this is not avoidable, or anyway I also don't see a better way to cover this case. For now please just add a comment to explain why you need to do this otherwise we will have to \"rediscover\" it again when somebody else will bump into this in 6 months.", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r387531148", "createdAt": "2020-03-04T09:07:58Z", "author": {"login": "mariofusco"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.drools.modelcompiler.builder.generator;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.expr.BinaryExpr;\n+import com.github.javaparser.ast.expr.EnclosedExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.UnaryExpr;\n+import org.drools.model.Index.ConstraintType;\n+import org.drools.modelcompiler.builder.generator.drlxparse.DrlxParseResult;\n+import org.drools.modelcompiler.builder.generator.drlxparse.SingleDrlxParseSuccess;\n+import org.drools.modelcompiler.util.EvaluationUtil;\n+\n+import static org.drools.modelcompiler.builder.generator.DrlxParseUtil.THIS_PLACEHOLDER;\n+\n+public class ConstraintUtil {\n+\n+    private static final String CLASS_NAME = EvaluationUtil.class.getCanonicalName() + \".\";\n+    private static final String TO_BIG_DECIMAL = EvaluationUtil.class.getCanonicalName() + \".toBigDecimal\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e0a3cc35903d740fc1133691da1a821530828bd"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjExMzcx", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-368611371", "createdAt": "2020-03-04T09:16:42Z", "commit": {"oid": "9e0a3cc35903d740fc1133691da1a821530828bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjEwMTM4", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-371210138", "createdAt": "2020-03-09T14:05:15Z", "commit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNToxNVrOFzpu1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNToxNVrOFzpu1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTQyOA==", "bodyText": "I think that avoiding naming variables with a single character makes the code more readable. There are more places like this in the PR.", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r389705428", "createdAt": "2020-03-09T14:05:15Z", "author": {"login": "hellowdan"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package org.drools.modelcompiler.builder.generator;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.expr.BinaryExpr;\n+import com.github.javaparser.ast.expr.EnclosedExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.UnaryExpr;\n+import org.drools.model.Index.ConstraintType;\n+import org.drools.modelcompiler.builder.generator.drlxparse.DrlxParseResult;\n+import org.drools.modelcompiler.builder.generator.drlxparse.SingleDrlxParseSuccess;\n+import org.drools.modelcompiler.util.EvaluationUtil;\n+\n+import static org.drools.modelcompiler.builder.generator.DrlxParseUtil.THIS_PLACEHOLDER;\n+\n+public class ConstraintUtil {\n+\n+    private static final String CLASS_NAME = EvaluationUtil.class.getCanonicalName() + \".\";\n+\n+    // This is required to detect BigDecimal property from generated MethodCallExpr\n+    private static final String TO_BIG_DECIMAL = EvaluationUtil.class.getCanonicalName() + \".toBigDecimal\";\n+\n+    private static final String GREATER_THAN_PREFIX = \"greaterThan\";\n+    private static final String GREATER_OR_EQUAL_PREFIX = \"greaterOrEqual\";\n+    private static final String LESS_THAN_PREFIX = \"lessThan\";\n+    private static final String LESS_OR_EQUAL_PREFIX = \"lessOrEqual\";\n+\n+    public static final String DROOLS_NORMALIZE_CONSTRAINT = \"drools.normalize.constraint\";\n+\n+    private static final boolean ENABLE_NORMALIZE = Boolean.parseBoolean(System.getProperty(DROOLS_NORMALIZE_CONSTRAINT, \"true\"));\n+\n+    private ConstraintUtil() {}\n+\n+    /**\n+     * Swap left and right operands in a constraint when a fact property is located on the right side.\n+     * \n+     * e.g. Person(20 < age) should be normalized to Person(age > 20)\n+     * \n+     * @param drlxParseResult\n+     * @return Normalized <code>DrlxParseResult</code>\n+     */\n+    public static DrlxParseResult normalizeConstraint(DrlxParseResult drlxParseResult) {\n+        if (!ENABLE_NORMALIZE) {\n+            return drlxParseResult;\n+        }\n+\n+        if (drlxParseResult instanceof SingleDrlxParseSuccess) {\n+            // Create a copy\n+            SingleDrlxParseSuccess s = new SingleDrlxParseSuccess((SingleDrlxParseSuccess) drlxParseResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186b7699bb6ebc9180187d64970fcfd0adcb02ba", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/186b7699bb6ebc9180187d64970fcfd0adcb02ba", "committedDate": "2020-03-11T08:41:53Z", "message": "[DROOLS-4956] Normarize rule constraints for property reactivity and indexing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41018f17b5b893fbef6dcb2b6978bcf61c61f140", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/41018f17b5b893fbef6dcb2b6978bcf61c61f140", "committedDate": "2020-03-11T08:41:53Z", "message": "- Check NodeSharing instead of exprId\n- Removed OOPath test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dadfdd57d68c937923f07bde62c783a39ab4ff3", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/9dadfdd57d68c937923f07bde62c783a39ab4ff3", "committedDate": "2020-03-11T08:41:53Z", "message": "- Fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372655544d2e5cfec0546e43031288053939c5f5", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/372655544d2e5cfec0546e43031288053939c5f5", "committedDate": "2020-03-11T08:41:53Z", "message": "- wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e877d97816a0c375bf706e209e63f6902466fb", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/a0e877d97816a0c375bf706e209e63f6902466fb", "committedDate": "2020-03-11T08:41:53Z", "message": "- implement And, Or, Nagate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ba77b5c566c97b843913f7a739575689881b395", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/2ba77b5c566c97b843913f7a739575689881b395", "committedDate": "2020-03-11T08:41:53Z", "message": "- implement BigDecimal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b43786b75ec05771c15dd47965bd5f5b983ca54", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/6b43786b75ec05771c15dd47965bd5f5b983ca54", "committedDate": "2020-03-11T08:41:53Z", "message": "- add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9773ab6994e7c9dbdf82c3792642654ecd4f21c4", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/9773ab6994e7c9dbdf82c3792642654ecd4f21c4", "committedDate": "2020-03-11T08:41:53Z", "message": "- implement STANDARD_FROM_DRL normalization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81d9e1b1d8a2253401f0e8a8763b1194c3a6d12", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/c81d9e1b1d8a2253401f0e8a8763b1194c3a6d12", "committedDate": "2020-03-11T09:02:43Z", "message": "- implement Map access"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/6453527ede0287142cf296f2eb6c90655f4ebba8", "committedDate": "2020-03-06T09:47:16Z", "message": "- implement STANDARD_FROM_DRL normalization"}, "afterCommit": {"oid": "c81d9e1b1d8a2253401f0e8a8763b1194c3a6d12", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/c81d9e1b1d8a2253401f0e8a8763b1194c3a6d12", "committedDate": "2020-03-11T09:02:43Z", "message": "- implement Map access"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjA1ODc3", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-370205877", "createdAt": "2020-03-06T10:00:58Z", "commit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDowMDo1OFrOFyzPOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOToxMDowOFrOF0uYQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMjYwMw==", "bodyText": "I wonder if I should implement the normalization for FactTemplateObjectType (If yes, need to detect its properties). Is it still used (I only hit this in Misc2Test#testFactTemplates)? According to https://issues.redhat.com/browse/DROOLS-600 , it will likely be removed...", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r388812603", "createdAt": "2020-03-06T10:00:58Z", "author": {"login": "tkobayas"}, "path": "drools-compiler/src/main/java/org/drools/compiler/rule/builder/util/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.drools.compiler.rule.builder.util;\n+\n+import org.drools.compiler.lang.descr.BaseDescr;\n+import org.drools.compiler.lang.descr.OperatorDescr;\n+import org.drools.compiler.lang.descr.RelationalExprDescr;\n+import org.drools.core.base.ClassObjectType;\n+import org.drools.core.rule.Pattern;\n+import org.mvel2.util.PropertyTools;\n+\n+public class ConstraintUtil {\n+\n+    /**\n+     * Swap left and right operands in a constraint when a fact property is located on the right side.\n+     * \n+     * e.g. Person(20 < age) should be normalized to Person(age > 20)\n+     * \n+     * @param expression\n+     * @param operator \n+     * @param rightValue \n+     * @param leftValue \n+     * @return Normalized <code>expression</code>\n+     */\n+    public static String inverseExpression(RelationalExprDescr relDescr, String expression, String leftValue, String rightValue, String operator, Pattern pattern) {\n+\n+        Class<?> clazz = pattern.getObjectType().getClassType();\n+\n+        String leftProp = getFirstProp(leftValue);\n+        String rightProp = getFirstProp(rightValue);\n+\n+        OperatorDescr operatorDescr = relDescr.getOperatorDescr();\n+\n+        if (!(pattern.getObjectType() instanceof ClassObjectType)) {\n+            // do not inverse\n+            return expression;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMzIxNA==", "bodyText": "There seems to be an issue with Map access and executable-model. I'll check next week.", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r388813214", "createdAt": "2020-03-06T10:02:15Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/ConstraintNormalizationTest.java", "diffHunk": "@@ -0,0 +1,547 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.modelcompiler;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.assertj.core.api.Assertions;\n+import org.drools.core.common.NamedEntryPoint;\n+import org.drools.core.reteoo.AlphaNode;\n+import org.drools.core.reteoo.CompositeObjectSinkAdapter;\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.modelcompiler.domain.Address;\n+import org.drools.modelcompiler.domain.Person;\n+import org.drools.modelcompiler.domain.Toy;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.runtime.KieSession;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ConstraintNormalizationTest extends BaseModelTest {\n+\n+    public ConstraintNormalizationTest(RUN_TYPE testRunType) {\n+        super(testRunType);\n+    }\n+\n+    @Test\n+    public void testNormalizationForPropertyReactivity() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"import \" + Toy.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $t : Toy($owner : owner)\\n\" +\n+                           \" $p : Person($owner == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"  $p.setAge(20);\" +\n+                           \"  update($p);\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \"  $p : Person(age == 20)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        final Toy t = new Toy(\"Ball\");\n+        t.setOwner(\"Toshiya\");\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(t);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules(10)); // no infinite loop\n+    }\n+\n+    @Test\n+    public void testNormalizationForPropertyReactivity2() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $i : Integer()\\n\" +\n+                           \" $p : Person($i < age)\\n\" +\n+                           \"then\\n\" +\n+                           \"  $p.setName(\\\"Blaa\\\");\" +\n+                           \"  update($p);\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(name == \\\"Blaa\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(new Integer(30));\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules(10)); // no infinite loop\n+    }\n+\n+    @Test\n+    public void testNormalizationForAlphaIndexing() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $p : Person(\\\"Toshiya\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(\\\"Mario\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R3 when \\n\" +\n+                           \" $p : Person(\\\"Luca\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        ObjectTypeNode otn = ((NamedEntryPoint) ksession.getEntryPoint(\"DEFAULT\")).getEntryPointNode().getObjectTypeNodes().entrySet()\n+                                                                                  .stream()\n+                                                                                  .filter(e -> e.getKey().getClassName().equals(Person.class.getCanonicalName()))\n+                                                                                  .map(e -> e.getValue())\n+                                                                                  .findFirst()\n+                                                                                  .get();\n+        CompositeObjectSinkAdapter sinkAdaptor = (CompositeObjectSinkAdapter) otn.getObjectSinkPropagator();\n+\n+        assertNotNull(sinkAdaptor.getHashedSinkMap());\n+        assertEquals(3, sinkAdaptor.getHashedSinkMap().size());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(p);\n+        assertEquals(1, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNormalizationForNodeSharing() {\n+\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $p : Person(\\\"Toshiya\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(name == \\\"Toshiya\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testOperators() throws Exception {\n+\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(20 < age, 30 > age)\\n\" +\n+                           \" Person(30 <= age, 40 >= age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(age > 20, age < 30)\\n\" +\n+                           \" Person(age >= 30, age <= 40)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(4, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p1 = new Person(\"John\", 21);\n+        final Person p2 = new Person(\"Paul\", 40);\n+\n+        ksession.insert(p1);\n+        ksession.insert(p2);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNestedProperty() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"ABC\\\" == address.city)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(address.city == \\\"ABC\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setAddress(new Address(\"ABC\"));\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testComplexMethod() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"import \" + BigDecimal.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(0 == this.money.compareTo(new BigDecimal(\\\"0.0\\\")))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(this.money.compareTo(new BigDecimal(\\\"0.0\\\")) == 0)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setMoney(new BigDecimal(\"0.0\"));\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testPropsOnBothSide() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person($id: id == age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person($id: id == age)\\n\" + // No normalization\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setId(45);\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testExtraParentheses() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person((30 < age))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person((age > 30))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testAnd() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"Toshiya\\\" == name && \\\"Bird\\\" == likes)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(name == \\\"Toshiya\\\" && likes == \\\"Bird\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        if (testRunType == RUN_TYPE.STANDARD_FROM_DRL) {\n+            assertEquals(2, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+        } else {\n+            // && is not split in case of executable-model\n+            assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+        }\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setLikes(\"Bird\");\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testOr() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"XXX\\\" == name || \\\"Bird\\\" == likes)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(name == \\\"XXX\\\" || likes == \\\"Bird\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setLikes(\"Bird\");\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNegate() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(!(30 > age))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(!(age < 30))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testBigDecimal() throws Exception {\n+        String str =\n+                \"import \" + Person.class.getCanonicalName() + \";\" +\n+                     \"rule R1 when\\n\" +\n+                     \"  $p : Person(20 < money)\\n\" +\n+                     \"then\\n\" +\n+                     \"end\\n\" +\n+\n+                     \"rule R2 when\\n\" +\n+                     \"  $p : Person(money > 20)\\n\" +\n+                     \"then\\n\" +\n+                     \"end\";\n+\n+        KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        Person p = new Person(\"John\");\n+        p.setMoney(new BigDecimal(\"30.0\"));\n+\n+        ksession.insert(p);\n+\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNegateComplex() throws Exception {\n+        String str =\n+                \"import \" + Person.class.getCanonicalName() + \";\" +\n+                     \"global java.util.List list;\\n\" +\n+                     \"rule R1 when\\n\" +\n+                     \"  $p : Person(!(20 < money && 40 > money))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\\n\" +\n+\n+                     \"rule R2 when\\n\" +\n+                     \"  $p : Person(!(money > 20 && money < 40))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\";\n+\n+        KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final List<String> list = new ArrayList<>();\n+        ksession.setGlobal(\"list\", list);\n+\n+        Person p1 = new Person(\"John\");\n+        p1.setMoney(new BigDecimal(\"10.0\"));\n+        Person p2 = new Person(\"Paul\");\n+        p2.setMoney(new BigDecimal(\"30.0\"));\n+        Person p3 = new Person(\"George\");\n+        p3.setMoney(new BigDecimal(\"50.0\"));\n+\n+        ksession.insert(p1);\n+        ksession.insert(p2);\n+        ksession.insert(p3);\n+\n+        assertEquals(4, ksession.fireAllRules());\n+        Assertions.assertThat(list).containsExactlyInAnyOrder(\"John\", \"George\", \"John\", \"George\");\n+    }\n+\n+    @Test\n+    public void testNegateComplex2() throws Exception {\n+        String str =\n+                \"import \" + Person.class.getCanonicalName() + \";\" +\n+                     \"global java.util.List list;\\n\" +\n+                     \"rule R1 when\\n\" +\n+                     \"  $p : Person(!(!(20 >= money) && 40 > money))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\\n\" +\n+\n+                     \"rule R2 when\\n\" +\n+                     \"  $p : Person(!(!(money <= 20) && money < 40))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\";\n+\n+        KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final List<String> list = new ArrayList<>();\n+        ksession.setGlobal(\"list\", list);\n+\n+        Person p1 = new Person(\"John\");\n+        p1.setMoney(new BigDecimal(\"10.0\"));\n+        Person p2 = new Person(\"Paul\");\n+        p2.setMoney(new BigDecimal(\"30.0\"));\n+        Person p3 = new Person(\"George\");\n+        p3.setMoney(new BigDecimal(\"50.0\"));\n+\n+        ksession.insert(p1);\n+        ksession.insert(p2);\n+        ksession.insert(p3);\n+\n+        assertEquals(4, ksession.fireAllRules());\n+        Assertions.assertThat(list).containsExactlyInAnyOrder(\"John\", \"George\", \"John\", \"George\");\n+    }\n+\n+    @Test\n+    public void testDeclaredType() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"declare Person\\n\" +\n+                           \"    name : String\\n\" +\n+                           \"    age : int\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"Toshiya\\\" == name, 20 < age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(name == \\\"Toshiya\\\", age > 20)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(2, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        FactType factType = ksession.getKieBase().getFactType(\"org.drools.test\", \"Person\");\n+        Object p = factType.newInstance();\n+        factType.set(p, \"name\", \"Toshiya\");\n+        factType.set(p, \"age\", 45);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void testMap() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"Value\\\" == itemsString[\\\"Key\\\"])\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(itemsString[\\\"Key\\\"] == \\\"Value\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\");\n+        p.getItemsString().put(\"Key\", \"Value\");\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "originalPosition": 546}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDEzOA==", "bodyText": "Confirmed with @mariofusco , we don't support FactTemplates so it's okay to \"do not inverse\" here.", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r390100138", "createdAt": "2020-03-10T05:20:30Z", "author": {"login": "tkobayas"}, "path": "drools-compiler/src/main/java/org/drools/compiler/rule/builder/util/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.drools.compiler.rule.builder.util;\n+\n+import org.drools.compiler.lang.descr.BaseDescr;\n+import org.drools.compiler.lang.descr.OperatorDescr;\n+import org.drools.compiler.lang.descr.RelationalExprDescr;\n+import org.drools.core.base.ClassObjectType;\n+import org.drools.core.rule.Pattern;\n+import org.mvel2.util.PropertyTools;\n+\n+public class ConstraintUtil {\n+\n+    /**\n+     * Swap left and right operands in a constraint when a fact property is located on the right side.\n+     * \n+     * e.g. Person(20 < age) should be normalized to Person(age > 20)\n+     * \n+     * @param expression\n+     * @param operator \n+     * @param rightValue \n+     * @param leftValue \n+     * @return Normalized <code>expression</code>\n+     */\n+    public static String inverseExpression(RelationalExprDescr relDescr, String expression, String leftValue, String rightValue, String operator, Pattern pattern) {\n+\n+        Class<?> clazz = pattern.getObjectType().getClassType();\n+\n+        String leftProp = getFirstProp(leftValue);\n+        String rightProp = getFirstProp(rightValue);\n+\n+        OperatorDescr operatorDescr = relDescr.getOperatorDescr();\n+\n+        if (!(pattern.getObjectType() instanceof ClassObjectType)) {\n+            // do not inverse\n+            return expression;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMjYwMw=="}, "originalCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDUwNg==", "bodyText": "Filed https://issues.redhat.com/browse/DROOLS-5136 . This issue needs to be fixed/merged first.", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r390100506", "createdAt": "2020-03-10T05:21:45Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/ConstraintNormalizationTest.java", "diffHunk": "@@ -0,0 +1,547 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.modelcompiler;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.assertj.core.api.Assertions;\n+import org.drools.core.common.NamedEntryPoint;\n+import org.drools.core.reteoo.AlphaNode;\n+import org.drools.core.reteoo.CompositeObjectSinkAdapter;\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.modelcompiler.domain.Address;\n+import org.drools.modelcompiler.domain.Person;\n+import org.drools.modelcompiler.domain.Toy;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.runtime.KieSession;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class ConstraintNormalizationTest extends BaseModelTest {\n+\n+    public ConstraintNormalizationTest(RUN_TYPE testRunType) {\n+        super(testRunType);\n+    }\n+\n+    @Test\n+    public void testNormalizationForPropertyReactivity() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"import \" + Toy.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $t : Toy($owner : owner)\\n\" +\n+                           \" $p : Person($owner == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"  $p.setAge(20);\" +\n+                           \"  update($p);\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \"  $p : Person(age == 20)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        final Toy t = new Toy(\"Ball\");\n+        t.setOwner(\"Toshiya\");\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(t);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules(10)); // no infinite loop\n+    }\n+\n+    @Test\n+    public void testNormalizationForPropertyReactivity2() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $i : Integer()\\n\" +\n+                           \" $p : Person($i < age)\\n\" +\n+                           \"then\\n\" +\n+                           \"  $p.setName(\\\"Blaa\\\");\" +\n+                           \"  update($p);\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(name == \\\"Blaa\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(new Integer(30));\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules(10)); // no infinite loop\n+    }\n+\n+    @Test\n+    public void testNormalizationForAlphaIndexing() {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $p : Person(\\\"Toshiya\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(\\\"Mario\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R3 when \\n\" +\n+                           \" $p : Person(\\\"Luca\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        ObjectTypeNode otn = ((NamedEntryPoint) ksession.getEntryPoint(\"DEFAULT\")).getEntryPointNode().getObjectTypeNodes().entrySet()\n+                                                                                  .stream()\n+                                                                                  .filter(e -> e.getKey().getClassName().equals(Person.class.getCanonicalName()))\n+                                                                                  .map(e -> e.getValue())\n+                                                                                  .findFirst()\n+                                                                                  .get();\n+        CompositeObjectSinkAdapter sinkAdaptor = (CompositeObjectSinkAdapter) otn.getObjectSinkPropagator();\n+\n+        assertNotNull(sinkAdaptor.getHashedSinkMap());\n+        assertEquals(3, sinkAdaptor.getHashedSinkMap().size());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(p);\n+        assertEquals(1, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNormalizationForNodeSharing() {\n+\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" $p : Person(\\\"Toshiya\\\" == name)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R2 when \\n\" +\n+                           \" $p : Person(name == \\\"Toshiya\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testOperators() throws Exception {\n+\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(20 < age, 30 > age)\\n\" +\n+                           \" Person(30 <= age, 40 >= age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(age > 20, age < 30)\\n\" +\n+                           \" Person(age >= 30, age <= 40)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(4, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p1 = new Person(\"John\", 21);\n+        final Person p2 = new Person(\"Paul\", 40);\n+\n+        ksession.insert(p1);\n+        ksession.insert(p2);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNestedProperty() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"ABC\\\" == address.city)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(address.city == \\\"ABC\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setAddress(new Address(\"ABC\"));\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testComplexMethod() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"import \" + BigDecimal.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(0 == this.money.compareTo(new BigDecimal(\\\"0.0\\\")))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(this.money.compareTo(new BigDecimal(\\\"0.0\\\")) == 0)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setMoney(new BigDecimal(\"0.0\"));\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testPropsOnBothSide() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person($id: id == age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person($id: id == age)\\n\" + // No normalization\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setId(45);\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testExtraParentheses() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person((30 < age))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person((age > 30))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testAnd() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"Toshiya\\\" == name && \\\"Bird\\\" == likes)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(name == \\\"Toshiya\\\" && likes == \\\"Bird\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        if (testRunType == RUN_TYPE.STANDARD_FROM_DRL) {\n+            assertEquals(2, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+        } else {\n+            // && is not split in case of executable-model\n+            assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+        }\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setLikes(\"Bird\");\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testOr() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"XXX\\\" == name || \\\"Bird\\\" == likes)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(name == \\\"XXX\\\" || likes == \\\"Bird\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+        p.setLikes(\"Bird\");\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNegate() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(!(30 > age))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(!(age < 30))\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\", 45);\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testBigDecimal() throws Exception {\n+        String str =\n+                \"import \" + Person.class.getCanonicalName() + \";\" +\n+                     \"rule R1 when\\n\" +\n+                     \"  $p : Person(20 < money)\\n\" +\n+                     \"then\\n\" +\n+                     \"end\\n\" +\n+\n+                     \"rule R2 when\\n\" +\n+                     \"  $p : Person(money > 20)\\n\" +\n+                     \"then\\n\" +\n+                     \"end\";\n+\n+        KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        Person p = new Person(\"John\");\n+        p.setMoney(new BigDecimal(\"30.0\"));\n+\n+        ksession.insert(p);\n+\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Test\n+    public void testNegateComplex() throws Exception {\n+        String str =\n+                \"import \" + Person.class.getCanonicalName() + \";\" +\n+                     \"global java.util.List list;\\n\" +\n+                     \"rule R1 when\\n\" +\n+                     \"  $p : Person(!(20 < money && 40 > money))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\\n\" +\n+\n+                     \"rule R2 when\\n\" +\n+                     \"  $p : Person(!(money > 20 && money < 40))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\";\n+\n+        KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final List<String> list = new ArrayList<>();\n+        ksession.setGlobal(\"list\", list);\n+\n+        Person p1 = new Person(\"John\");\n+        p1.setMoney(new BigDecimal(\"10.0\"));\n+        Person p2 = new Person(\"Paul\");\n+        p2.setMoney(new BigDecimal(\"30.0\"));\n+        Person p3 = new Person(\"George\");\n+        p3.setMoney(new BigDecimal(\"50.0\"));\n+\n+        ksession.insert(p1);\n+        ksession.insert(p2);\n+        ksession.insert(p3);\n+\n+        assertEquals(4, ksession.fireAllRules());\n+        Assertions.assertThat(list).containsExactlyInAnyOrder(\"John\", \"George\", \"John\", \"George\");\n+    }\n+\n+    @Test\n+    public void testNegateComplex2() throws Exception {\n+        String str =\n+                \"import \" + Person.class.getCanonicalName() + \";\" +\n+                     \"global java.util.List list;\\n\" +\n+                     \"rule R1 when\\n\" +\n+                     \"  $p : Person(!(!(20 >= money) && 40 > money))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\\n\" +\n+\n+                     \"rule R2 when\\n\" +\n+                     \"  $p : Person(!(!(money <= 20) && money < 40))\\n\" +\n+                     \"then\\n\" +\n+                     \"  list.add($p.getName());\" +\n+                     \"end\";\n+\n+        KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final List<String> list = new ArrayList<>();\n+        ksession.setGlobal(\"list\", list);\n+\n+        Person p1 = new Person(\"John\");\n+        p1.setMoney(new BigDecimal(\"10.0\"));\n+        Person p2 = new Person(\"Paul\");\n+        p2.setMoney(new BigDecimal(\"30.0\"));\n+        Person p3 = new Person(\"George\");\n+        p3.setMoney(new BigDecimal(\"50.0\"));\n+\n+        ksession.insert(p1);\n+        ksession.insert(p2);\n+        ksession.insert(p3);\n+\n+        assertEquals(4, ksession.fireAllRules());\n+        Assertions.assertThat(list).containsExactlyInAnyOrder(\"John\", \"George\", \"John\", \"George\");\n+    }\n+\n+    @Test\n+    public void testDeclaredType() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"declare Person\\n\" +\n+                           \"    name : String\\n\" +\n+                           \"    age : int\\n\" +\n+                           \"end\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"Toshiya\\\" == name, 20 < age)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(name == \\\"Toshiya\\\", age > 20)\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(2, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        FactType factType = ksession.getKieBase().getFactType(\"org.drools.test\", \"Person\");\n+        Object p = factType.newInstance();\n+        factType.set(p, \"name\", \"Toshiya\");\n+        factType.set(p, \"age\", 45);\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void testMap() throws Exception {\n+        final String str =\n+                \"package org.drools.test;\\n\" +\n+                           \"import \" + Person.class.getCanonicalName() + \";\\n\" +\n+                           \"rule R1 when \\n\" +\n+                           \" Person(\\\"Value\\\" == itemsString[\\\"Key\\\"])\\n\" +\n+                           \"then\\n\" +\n+                           \"end\\n\" +\n+\n+                           \"rule R2 when \\n\" +\n+                           \" Person(itemsString[\\\"Key\\\"] == \\\"Value\\\")\\n\" +\n+                           \"then\\n\" +\n+                           \"end\";\n+\n+        final KieSession ksession = getKieSession(str);\n+\n+        // Check NodeSharing to verify if normalization works expectedly\n+        assertEquals(1, ReteDumper.collectNodes(ksession).stream().filter(AlphaNode.class::isInstance).count());\n+\n+        final Person p = new Person(\"Toshiya\");\n+        p.getItemsString().put(\"Key\", \"Value\");\n+\n+        ksession.insert(p);\n+        assertEquals(2, ksession.fireAllRules());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMzIxNA=="}, "originalCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "originalPosition": 546}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzMDE0Nw==", "bodyText": "Thank you for pointing this out! I have fixed it.", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r390830147", "createdAt": "2020-03-11T09:10:08Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package org.drools.modelcompiler.builder.generator;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.expr.BinaryExpr;\n+import com.github.javaparser.ast.expr.EnclosedExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.UnaryExpr;\n+import org.drools.model.Index.ConstraintType;\n+import org.drools.modelcompiler.builder.generator.drlxparse.DrlxParseResult;\n+import org.drools.modelcompiler.builder.generator.drlxparse.SingleDrlxParseSuccess;\n+import org.drools.modelcompiler.util.EvaluationUtil;\n+\n+import static org.drools.modelcompiler.builder.generator.DrlxParseUtil.THIS_PLACEHOLDER;\n+\n+public class ConstraintUtil {\n+\n+    private static final String CLASS_NAME = EvaluationUtil.class.getCanonicalName() + \".\";\n+\n+    // This is required to detect BigDecimal property from generated MethodCallExpr\n+    private static final String TO_BIG_DECIMAL = EvaluationUtil.class.getCanonicalName() + \".toBigDecimal\";\n+\n+    private static final String GREATER_THAN_PREFIX = \"greaterThan\";\n+    private static final String GREATER_OR_EQUAL_PREFIX = \"greaterOrEqual\";\n+    private static final String LESS_THAN_PREFIX = \"lessThan\";\n+    private static final String LESS_OR_EQUAL_PREFIX = \"lessOrEqual\";\n+\n+    public static final String DROOLS_NORMALIZE_CONSTRAINT = \"drools.normalize.constraint\";\n+\n+    private static final boolean ENABLE_NORMALIZE = Boolean.parseBoolean(System.getProperty(DROOLS_NORMALIZE_CONSTRAINT, \"true\"));\n+\n+    private ConstraintUtil() {}\n+\n+    /**\n+     * Swap left and right operands in a constraint when a fact property is located on the right side.\n+     * \n+     * e.g. Person(20 < age) should be normalized to Person(age > 20)\n+     * \n+     * @param drlxParseResult\n+     * @return Normalized <code>DrlxParseResult</code>\n+     */\n+    public static DrlxParseResult normalizeConstraint(DrlxParseResult drlxParseResult) {\n+        if (!ENABLE_NORMALIZE) {\n+            return drlxParseResult;\n+        }\n+\n+        if (drlxParseResult instanceof SingleDrlxParseSuccess) {\n+            // Create a copy\n+            SingleDrlxParseSuccess s = new SingleDrlxParseSuccess((SingleDrlxParseSuccess) drlxParseResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTQyOA=="}, "originalCommit": {"oid": "6453527ede0287142cf296f2eb6c90655f4ebba8"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491c035c297a3e9b86496336bfae9000507e09f5", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/491c035c297a3e9b86496336bfae9000507e09f5", "committedDate": "2020-03-12T01:30:45Z", "message": "- fix code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDA3MTM5", "url": "https://github.com/kiegroup/drools/pull/2788#pullrequestreview-375007139", "createdAt": "2020-03-16T08:44:39Z", "commit": {"oid": "491c035c297a3e9b86496336bfae9000507e09f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0NDozOVrOF2qPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo0NDozOVrOF2qPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTM5Mw==", "bodyText": "Minor thing: we already have part of this analysis for operator inside the enum IndexUtil.ConstraintType. If possible I'd keep all the similar code there. For instance you can add this canInverse method in that enum and then testing it with IndexUtil.ConstraintType.decode(operator).canInverse()", "url": "https://github.com/kiegroup/drools/pull/2788#discussion_r392859393", "createdAt": "2020-03-16T08:44:39Z", "author": {"login": "mariofusco"}, "path": "drools-compiler/src/main/java/org/drools/compiler/rule/builder/util/ConstraintUtil.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.drools.compiler.rule.builder.util;\n+\n+import org.drools.compiler.lang.descr.BaseDescr;\n+import org.drools.compiler.lang.descr.OperatorDescr;\n+import org.drools.compiler.lang.descr.RelationalExprDescr;\n+import org.drools.core.base.ClassObjectType;\n+import org.drools.core.rule.Pattern;\n+import org.mvel2.util.PropertyTools;\n+\n+public class ConstraintUtil {\n+\n+    public static final String DROOLS_NORMALIZE_CONSTRAINT = \"drools.normalize.constraint\";\n+\n+    private static final boolean ENABLE_NORMALIZE = Boolean.parseBoolean(System.getProperty(DROOLS_NORMALIZE_CONSTRAINT, \"true\"));\n+\n+    private ConstraintUtil() {}\n+\n+    /**\n+     * Swap left and right operands in a constraint when a fact property is located on the right side.\n+     * \n+     * e.g. Person(20 < age) should be normalized to Person(age > 20)\n+     * \n+     * @param expression\n+     * @param operator \n+     * @param rightValue \n+     * @param leftValue \n+     * @return Normalized <code>expression</code>\n+     */\n+    public static String inverseExpression(RelationalExprDescr relDescr, String expression, String leftValue, String rightValue, String operator, Pattern pattern) {\n+        if (!ENABLE_NORMALIZE) {\n+            return expression;\n+        }\n+        Class<?> clazz = pattern.getObjectType().getClassType();\n+\n+        String leftProp = getFirstProp(leftValue);\n+        String rightProp = getFirstProp(rightValue);\n+\n+        OperatorDescr operatorDescr = relDescr.getOperatorDescr();\n+\n+        if (canInverse(pattern, operator, operatorDescr, leftProp, rightProp) && isPropertyOnRight(clazz, leftProp, rightProp)) {\n+            boolean negate = false;\n+            if (isNagatedExpression(expression, leftValue, rightValue, operator)) {\n+                if (relDescr.getOperatorDescr().isNegated()) {\n+                    negate = true;\n+                } else {\n+                    // do not inverse\n+                    return expression;\n+                }\n+            }\n+\n+            BaseDescr left = relDescr.getLeft();\n+            relDescr.setLeft(relDescr.getRight());\n+            relDescr.setRight(left);\n+\n+            String inversedOperator = inverseOperator(operator);\n+\n+            operatorDescr.setOperator(inversedOperator);\n+\n+            StringBuilder sb = new StringBuilder();\n+            String inversedExpression = sb.append(rightValue).append(\" \").append(inversedOperator).append(\" \").append(leftValue).toString();\n+            if (negate) {\n+                inversedExpression = \"!( \" + inversedExpression + \" )\";\n+            }\n+\n+            return inversedExpression;\n+        }\n+\n+        // do not inverse\n+        return expression;\n+    }\n+\n+    private static boolean isPropertyOnRight(Class<?> clazz, String leftProp, String rightProp) {\n+        return (PropertyTools.getFieldOrAccessor(clazz, leftProp) == null) && ((PropertyTools.getFieldOrAccessor(clazz, rightProp) != null) || (rightProp.equals(\"this\")));\n+    }\n+\n+    private static boolean canInverse(Pattern pattern, String operator, OperatorDescr operatorDescr, String leftProp, String rightProp) {\n+        if (!(pattern.getObjectType() instanceof ClassObjectType)) {\n+            return false;\n+        }\n+        if (!operator.equals(operatorDescr.getOperator())) {\n+            return false;\n+        }\n+        if (leftProp.isEmpty() || rightProp.isEmpty()) {\n+            return false;\n+        }\n+        return canInverse(operator);\n+    }\n+\n+    private static boolean canInverse(String operator) {\n+        return (operator.equals(\"==\") || operator.equals(\"!=\") || operator.equals(\">\") || operator.equals(\"<\") || operator.equals(\">=\") || operator.equals(\"<=\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "491c035c297a3e9b86496336bfae9000507e09f5"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdd2487091fd9fae9f440f19a2e0d39eb0651a07", "author": {"user": {"login": "tkobayas", "name": "Toshiya Kobayashi"}}, "url": "https://github.com/kiegroup/drools/commit/bdd2487091fd9fae9f440f19a2e0d39eb0651a07", "committedDate": "2020-03-16T09:38:39Z", "message": "- Refactor to use IndexUtil"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1610, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}