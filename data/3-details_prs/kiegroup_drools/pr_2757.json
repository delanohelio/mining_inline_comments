{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjgxNjY4", "number": 2757, "title": "Drools 4933 - Setup PMML refactoring implementation", "bodyText": "@danielezonca @mariofusco @jiripetrlik\nSee https://issues.redhat.com/browse/DROOLS-4933\nThis PR mainly setup the overall architecture of the new module, with the planned submodules.\nIt also provide initial implementation for our internal models (KiePMMLModel...) and the runtime/compiler.\nInside the kie-pmml-refactoring module there are some images and file to explain the planned architecture.\nIt does not provide any model-specific implementation - so basically it does not do anything.\nLast, I've add a couple of helping test class in the kie-test-util module.", "createdAt": "2020-02-10T18:18:22Z", "url": "https://github.com/kiegroup/drools/pull/2757", "merged": true, "mergeCommit": {"oid": "8b675168540d27a55f6ff6010e306c82c0505bca"}, "closed": true, "closedAt": "2020-02-19T08:02:54Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDBKs9gH2gAyMzczMjgxNjY4OjVjNWI2MzdkMTBmMGEyMjQ5ZWNjNjkzMzgwZTVlOGViZTY4ODE0M2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFf8xCAH2gAyMzczMjgxNjY4OjNkMTMyNThjZjVlOTI4YzdkNzk4YzM1MDQ1MDFmNWZjM2MyMzFkNTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c5b637d10f0a2249ecc693380e5e8ebe688143a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5c5b637d10f0a2249ecc693380e5e8ebe688143a", "committedDate": "2020-02-10T18:09:27Z", "message": "[DROOLS-4933] Create PMML refactoring skeleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c28bfe7ced36b439175e9eba671aed5c9fb80f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/67c28bfe7ced36b439175e9eba671aed5c9fb80f", "committedDate": "2020-02-10T18:15:50Z", "message": "[DROOLS-4933] Add test utility methods. Fixed pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "committedDate": "2020-02-11T08:56:44Z", "message": "[DROOLS-4933] Add tests to kie-test-util"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "committedDate": "2020-02-11T09:03:08Z", "message": "[DROOLS-4933] Add assertions to tests inside kie-test-util"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njc4MDE1", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-356678015", "createdAt": "2020-02-11T14:01:43Z", "commit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMTo0NFrOFoKA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0OTozMFrOFoOViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTQ0MQ==", "bodyText": "I would suggest to not use word refactoring in GAV. I know this module is not part of KIE build yet. But if it is merged and added into Drools parent pom as module these GAVs will be exported to Maven central etc. I would suggest to choose something which can be published from the start.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377651441", "createdAt": "2020-02-11T14:01:44Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2011 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>drools</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kie-pmml-refactoring</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA==", "bodyText": "Do we need this class to be serializable. Is there some use case which requires serialization. There is already different serialization implemented in KIE.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377661660", "createdAt": "2020-02-11T14:19:12Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw==", "bodyText": "Do we expect to compare objects of this class somewhere?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377663147", "createdAt": "2020-02-11T14:21:42Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NDQyMA==", "bodyText": "Please remove unnecessary new lines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377664420", "createdAt": "2020-02-11T14:23:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+public abstract class KiePMMLTerm extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+\n+    public KiePMMLTerm(String name) {\n+        super(name);\n+    }\n+\n+    public abstract Number getCoefficient();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA==", "bodyText": "I would suggest to do not add any test utils to API.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377667298", "createdAt": "2020-02-11T14:28:19Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3Mzc1MQ==", "bodyText": "I think we do not need any integration tests in architecture which you proposed. I expect there will be unit tests for models in kie-pmml-models module. Integration tests maybe for example on the level of kie-server. I would suggest to stay with only unit tests in new PMML implementation.\nIt is also much easier to measure test coverage when there are only unit tests located in proper modules with implementation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377673751", "createdAt": "2020-02-11T14:38:30Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-integration-tests/pom.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjExMw==", "bodyText": "Manage version of this artifact in the parent or even better in kie-parent.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377676113", "createdAt": "2020-02-11T14:41:58Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjgxMA==", "bodyText": "Isn't the version of kie-test-util managed in kie-parent. If not I think we should add it there.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377676810", "createdAt": "2020-02-11T14:42:58Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-api</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: API </name>\n+  <description>API specific for PMML library</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-api</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <dependency>\n+      <groupId>org.jpmml</groupId>\n+      <artifactId>pmml-model</artifactId>\n+    </dependency>\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-test-util</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-api</artifactId>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+      <!-- EXTERNAL -->\n+      <!-- TEST -->\n+      <dependency>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-test-util</artifactId>\n+        <version>${version.org.kie}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3Nzk2Mw==", "bodyText": "Please remove unnecessary new lines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377677963", "createdAt": "2020-02-11T14:44:48Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.library.testutils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import javax.xml.bind.JAXBException;\n+\n+import org.dmg.pmml.PMML;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.xml.sax.SAXException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ==", "bodyText": "I think it is not a proper place to add definition of functional interfaces here. API should serve for methods like loadModel, verifyModel, evaluateModel etc. and not for extending Java 8 implementation. If we really need these utils and interfaces we should move it to some \"common\" module.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377714471", "createdAt": "2020-02-11T15:38:09Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTYyNQ==", "bodyText": "Do we need a separate API for library. Can't we merge it with kie-pmml-api. It would be much easier for user to have only one API. Many API modules are usually source of mistakes and confusion.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377719625", "createdAt": "2020-02-11T15:45:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-commons/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-commons</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Commons </name>\n+  <description>Kie PMML Commons</description>\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMDY2Ng==", "bodyText": "Remove new lines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377720666", "createdAt": "2020-02-11T15:47:07Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/pom.xml", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.drools</groupId>\n+    <artifactId>kie-pmml-library</artifactId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-library-compiler</artifactId>\n+\n+  <name>KIE :: PMML :: Library :: Compiler</name>\n+  <description>PMML Compiler</description>\n+\n+\n+  <dependencies>\n+    <!-- PMML -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-commons</artifactId>\n+    </dependency>\n+    <!-- EXTERNAL -->\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>kie-pmml-library-api</artifactId>\n+      <classifier>tests</classifier>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- PMML -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-library-commons</artifactId>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+      <!-- EXTERNAL -->\n+      <!-- TEST -->\n+      <dependency>\n+        <groupId>org.drools</groupId>\n+        <artifactId>kie-pmml-library-api</artifactId>\n+        <classifier>tests</classifier>\n+        <scope>test</scope>\n+        <version>${version.org.kie}</version>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMTc1Nw==", "bodyText": "Please remove newlines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377721757", "createdAt": "2020-02-11T15:48:47Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.runtime.core.utils;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.kie.api.pmml.ParameterInfo;\n+\n+/**\n+ * Class used to convert data to/from different formats\n+ */\n+public class Converter {\n+\n+    /**\n+     * <b>Extract</b> the objects from the <code>ParameterInfo</code> values of the given map.\n+     *\n+     * @param parameterMap\n+     * @return\n+     */\n+    public static Map<String, Object> getUnwrappedParametersMap(Map<String, ParameterInfo> parameterMap) {\n+        return parameterMap.entrySet()\n+                .stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                                          e -> e.getValue().getValue()));\n+\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMjI0OA==", "bodyText": "Please remove newlines.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377722248", "createdAt": "2020-02-11T15:49:30Z", "author": {"login": "jiripetrlik"}, "path": "kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.test.util.filesystem;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+import static org.kie.test.util.filesystem.ResourceHelper.getResourcesByExtension;\n+import static org.kie.test.util.filesystem.ResourceHelper.getResourcesFromDirectory;\n+\n+public class ResourceHelperTest {\n+\n+    private static final String TEST_FILE = \"TestFile.txt\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2959221c665ee2eda43afaa8b89baf75829f9f8f", "committedDate": "2020-02-12T10:27:46Z", "message": "[DROOLS-4933] Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "committedDate": "2020-02-12T11:02:17Z", "message": "[DROOLS-4933] Moving kie-pmml-api to kie-pmml-commons"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njk5ODMy", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-356699832", "createdAt": "2020-02-11T14:28:45Z", "commit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyODo0NVrOFoK_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTowOToxN1rOFoqjrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzU3NA==", "bodyText": "If this is used only by Drools implementation it should be in a implementation module and not here in the common API. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377667574", "createdAt": "2020-02-11T14:28:45Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+/**\n+ * Class used inside drools. Rules are fired based on the value of status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NTU4MQ==", "bodyText": "I think it should be better to track TODOs with a Jira epic or similar instead of a MD file here. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377675581", "createdAt": "2020-02-11T14:41:10Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/ToDo.md", "diffHunk": "@@ -0,0 +1,8 @@\n+TO-DOs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMjE2NA==", "bodyText": "Can you please remove it? It is not used", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378122164", "createdAt": "2020-02-12T09:14:13Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.annotations;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+/**\n+ * Denotes that a parameter, field or method return value can be null.\n+ * <p>\n+ * When decorating a method call parameter, this denotes that the parameter can\n+ * legitimately be null and the method will gracefully deal with it. Typically\n+ * used on optional parameters.\n+ * <p>\n+ * When decorating a method, this denotes the method might legitimately return\n+ * null.\n+ * <p>\n+ * This is a marker annotation and it has no specific attributes.\n+ *\n+ * @paramDoc This value may be {@code null}.\n+ * @returnDoc This value may be {@code null}.\n+ * @hide\n+ */\n+@Retention(SOURCE)\n+@Target({METHOD, PARAMETER, FIELD})\n+public @interface Nullable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg==", "bodyText": "Why Exception instead of RuntimeException? This change has as consequence a sort of \"duplication\" of many Java 8 interfaces (Stream and Function as first).\nIf your goal is to enforce user to manage the errors I would suggest to use one/more RuntimeException internally and then do a try/catch at public method level and generate the checked exception only there. In this way you should be able to avoid interface duplication. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378177782", "createdAt": "2020-02-12T10:55:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.exceptions;\n+\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTMwMQ==", "bodyText": "@jiripetrlik\nAll these models/pojos are defined to represent XML content and should be not changed. Implementing equals/hashCode give you the possibility to manage them as \"values\" easier (for example compare or add them to a Set).\nI don't think there is a specific use case for now because this PR is just a \"stub\" of the design that will be extended later with multiple model implementations so it is safer to already implement a meaningful equals.\nDoes this answer to your question?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378181301", "createdAt": "2020-02-12T11:02:30Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTk3MQ==", "bodyText": "I think this module is more intended to be a -common more than API so I would suggest to rename it to -common.\n@gitgabrio wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378181971", "createdAt": "2020-02-12T11:03:47Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA=="}, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MzQyNA==", "bodyText": "Isn't it a copy of this ?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378183424", "createdAt": "2020-02-12T11:06:50Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-compiler/src/test/resources/LinearRegressionSample.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<PMML xmlns=\"http://www.dmg.org/PMML-4_2\" version=\"4.2\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NDYyMw==", "bodyText": "I don't like the name runtime to refer to a sort of \"kie-integration\" module. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378184623", "createdAt": "2020-02-12T11:09:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kie-pmml-runtime</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>7.33.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-runtime-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a163b2d51d89d7e02401f198939201edc1123bd7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a163b2d51d89d7e02401f198939201edc1123bd7", "committedDate": "2020-02-12T11:28:09Z", "message": "[DROOLS-4933] Renamed kie-pmml-refactoring to kie-pmml-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85f13b94096cb28081a72ddb75d9864088acf103", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/85f13b94096cb28081a72ddb75d9864088acf103", "committedDate": "2020-02-12T12:13:59Z", "message": "[DROOLS-4933] Fixed package in test. Removed KiePMMLStatusHolder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b58a8c38d85d7537398974de0738c77a8cf7ff", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/19b58a8c38d85d7537398974de0738c77a8cf7ff", "committedDate": "2020-02-14T08:04:44Z", "message": "[DROOLS-4933] Renamed library module to compiler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f692667aaa512fe92155c7800a47f0b25d9dc8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/75f692667aaa512fe92155c7800a47f0b25d9dc8", "committedDate": "2020-02-14T08:10:27Z", "message": "[DROOLS-4933] Renamed runtime module to evaluator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b8fe153626fce559ef277bc23c00647476bdd19", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1b8fe153626fce559ef277bc23c00647476bdd19", "committedDate": "2020-02-14T08:18:49Z", "message": "[DROOLS-4933] Renamed library package to compiler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ddd8fcdec57ddeae5aa89384963d10f93c1dd58", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7ddd8fcdec57ddeae5aa89384963d10f93c1dd58", "committedDate": "2020-02-14T08:24:00Z", "message": "[DROOLS-4933] Renamed runtime package to evaluator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40187e1ceb19143daaefeeed50010f1dfca7e7d3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/40187e1ceb19143daaefeeed50010f1dfca7e7d3", "committedDate": "2020-02-14T08:25:02Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95b0a3c09b334321ea1d8d340d7412d98b6683d0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/95b0a3c09b334321ea1d8d340d7412d98b6683d0", "committedDate": "2020-02-14T11:13:26Z", "message": "[DROOLS-4933] Moved dependency management to parent pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d979421ea8bcfcb5b16ce98b0586a99b24cbfc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a3d979421ea8bcfcb5b16ce98b0586a99b24cbfc", "committedDate": "2020-02-14T11:30:36Z", "message": "[DROOLS-4933] Reformat code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79476275bb34a9dde4c25e5867febd926fa35e59", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/79476275bb34a9dde4c25e5867febd926fa35e59", "committedDate": "2020-02-17T10:25:49Z", "message": "[DROOLS-4933] Reorganized Exception management. Renamed groupId org.drools -> org.kie"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ebb66276a244d2cf18c951ebdc260b7b1f584da7", "committedDate": "2020-02-17T10:26:15Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjkyMjkz", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-359692293", "createdAt": "2020-02-17T12:15:02Z", "commit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxNTowM1rOFqiZbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0NToxM1rOFqjMgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ==", "bodyText": "Can we change also this to RuntimeException?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380148079", "createdAt": "2020-02-17T12:15:03Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n+ */\n+public class ExternalException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODYwMw==", "bodyText": "Can we change also this to RuntimeException?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380148603", "createdAt": "2020-02-17T12:16:08Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions to be wrapping to <b>unchecked</b> ones at <i>customer</i> API boundaries\n+ */\n+public class KiePMMLException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg==", "bodyText": "I'm not sure about adding these functional utils into code. Can't we use some library instead?\n@mariofusco\nWhat do you think? Can you help us to find some library with these functional utils?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380152532", "createdAt": "2020-02-17T12:25:06Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380159552", "createdAt": "2020-02-17T12:41:25Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDA4MQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160081", "createdAt": "2020-02-17T12:42:41Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_FIELD-USAGE-TYPE>FIELD-USAGE-TYPE</a>\n+ */\n+public enum FIELD_USAGE_TYPE {\n+\n+    ACTIVE(\"active\"),\n+    PREDICTED(\"predicted\"),\n+    TARGET(\"target\"),\n+    SUPPLEMENTARY(\"supplementary\"),\n+    GROUP(\"group\"),\n+    ORDER(\"order\"),\n+    FREQUENCY_WEIGHT(\"frequencyWeight\"),\n+    ANALYSIS_WEIGHT(\"analysisWeight\");\n+\n+    private String name;\n+\n+    FIELD_USAGE_TYPE(String name) {\n+        this.name = name;\n+    }\n+\n+    public static FIELD_USAGE_TYPE byName(String name) throws KieEnumException {\n+        return Arrays.stream(FIELD_USAGE_TYPE.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find FIELD_USAGE_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDEzMg==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160132", "createdAt": "2020-02-17T12:42:48Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdType_MINING-FUNCTION>MINING-FUNCTION</a>\n+ */\n+public enum MINING_FUNCTION {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    MINING_FUNCTION(String name) {\n+        this.name = name;\n+    }\n+\n+    public static MINING_FUNCTION byName(String name) throws KieEnumException {\n+        return Arrays.stream(MINING_FUNCTION.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDE3Nw==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160177", "createdAt": "2020-02-17T12:42:54Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD>MISSING-VALUE_TREATMENT-METHOD</a>\n+ */\n+public enum MISSING_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    MISSING_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static MISSING_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(MISSING_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDIxOQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160219", "createdAt": "2020-02-17T12:43:00Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-2-1/DataDictionary.html#xsdType_OPTYPE>OPTYPE</a>\n+ */\n+public enum OP_TYPE {\n+\n+    CATEGORICAL(\"categorical\"),\n+    ORDINAL(\"ordinal\"),\n+    CONTINUOUS(\"continuous\");\n+\n+    private String name;\n+\n+    OP_TYPE(String name) {\n+        this.name = name;\n+    }\n+\n+    public static OP_TYPE byName(String name) throws KieEnumException {\n+        return Arrays.stream(OP_TYPE.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDMxMw==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160313", "createdAt": "2020-02-17T12:43:14Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_OUTLIER-TREATMENT-METHOD>OUTLIER-TREATMENT-METHOD</a>\n+ */\n+public enum OUTLIER_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    OUTLIER_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static OUTLIER_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(OUTLIER_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDM0OA==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160348", "createdAt": "2020-02-17T12:43:19Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * PMML models\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdGroup_MODEL-ELEMENT>MODEL-ELEMENT</a>\n+ */\n+public enum PMML_MODEL {\n+\n+    ANOMALY_DETECTION_MODEL(\"AnomalyDetectionModel\"),\n+    ASSOCIATION_MODEL(\"AssociationModel\"),\n+    BAYESIAN_NETWORK_MODEL(\"BayesianNetworkModel\"),\n+    BASELINE_MODEL(\"BaselineModel\"),\n+    CLUSTERING_MODEL(\"ClusteringModel\"),\n+    GAUSSIAN_PROCESS_MODEL(\"GaussianProcessModel\"),\n+    GENERAL_REGRESSION_MODEL(\"GeneralRegressionModel\"),\n+    MINING_MODEL(\"MiningModel\"),\n+    NAIVEBAYES_MODEL(\"NaiveBayesModel\"),\n+    NEARESTNEIGHBOR_MODEL(\"NearestNeighborModel\"),\n+    NEURALNETWORK_MODEL(\"NeuralNetworkModel\"),\n+    REGRESSION_MODEL(\"RegressionModel\"),\n+    RULESET_MODEL(\"RulesetModel\"),\n+    SEQUENCE_MODEL(\"SequenceModel\"),\n+    SCORECARD_MODEL(\"ScorecardModel\"),\n+    SUPPORT_VECTOR_MACHINE_MODEL(\"SupportVectorMachineModel\"),\n+    TEXT_MODEL(\"TextModel\"),\n+    TIME_SERIES_MODEL(\"TimeSeriesModel\"),\n+    TREE_MODEL(\"TreeModel\");\n+\n+    private String name;\n+\n+    PMML_MODEL(String name) {\n+        this.name = name;\n+    }\n+\n+    public static PMML_MODEL byName(String name) throws KieEnumException {\n+        return Arrays.stream(PMML_MODEL.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find PMMLModelType with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDQzOQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160439", "createdAt": "2020-02-17T12:43:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/DataDictionary.html#xsdElement_Value>Value</a>\n+ */\n+public enum VALUE_PROPERTY {\n+\n+    VALID(\"valid\"),\n+    INVALID(\"invalid\"),\n+    MISSING(\"missing\");\n+\n+    private String name;\n+\n+    VALUE_PROPERTY(String name) {\n+        this.name = name;\n+    }\n+\n+    public static VALUE_PROPERTY byName(String name) throws KieEnumException {\n+        return Arrays.stream(VALUE_PROPERTY.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find VALUE_PROPERTY with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDc5OQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160799", "createdAt": "2020-02-17T12:44:24Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLExtensionFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.Extension;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+\n+public class KiePMMLExtensionFactory {\n+\n+    private KiePMMLExtensionFactory() {\n+    }\n+\n+    public static List<KiePMMLExtension> getKiePMMLExtensions(List<Extension> extensions) {\n+        return extensions.stream().map(KiePMMLExtensionFactory::getKiePMMLExtension).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDk3MQ==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160971", "createdAt": "2020-02-17T12:44:48Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.interfaces.FunctionalWrapperFactory.throwingFunctionWrapper;\n+\n+public class KiePMMLModelRetriever {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLModelRetriever.class.getName());\n+    private static final ModelImplementationProviderFinder modelImplementationProviderFinder = new ModelImplementationProviderFinderImpl();\n+\n+    /**\n+     * Read the given <code>DataDictionary</code> and <code>Model</code>> to returns a <code>Optional&lt;KiePMMLModel&gt;</code>\n+     * @param dataDictionary\n+     * @param model\n+     * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n+     * @return\n+     * @throws KiePMMLInternalException\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<KiePMMLModel> getFromDataDictionaryAndModel(DataDictionary dataDictionary, Model model, Object kBuilder) throws KiePMMLException {\n+        logger.info(\"getFromModel {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTA4OA==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380161088", "createdAt": "2020-02-17T12:45:03Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.info(\"getImplementations {}\", refresh);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw==", "bodyText": "Can we add test for this method?", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380161153", "createdAt": "2020-02-17T12:45:13Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.MiningField;\n+import org.dmg.pmml.Model;\n+\n+/**\n+ * Class to provide common methods to interact with <code>Model</code>\n+ */\n+public class ModelUtils {\n+\n+    /**\n+     * Return an <code>Optional</code> with the name of the field whose <b>usageType</b> is <code>TARGET</code> or <code>PREDICTED</code>\n+     * <p>\n+     * While the xsd schema does not strictly enforce this, it seems that <b>by convention</b> majority of models has only one target.\n+     * <p>\n+     * (see https://github.com/jpmml/jpmml-evaluator/issues/64 discussion)\n+     * @param model\n+     * @return\n+     */\n+    public static Optional<String> getTargetField(Model model) {\n+        return model.getMiningSchema().getMiningFields().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1d304e0b98817608a0e1f049a19adb1d82bd2357", "committedDate": "2020-02-17T15:41:30Z", "message": "[DROOLS-4933] Make use of Objects.equals inside enums"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "658208fe9d7b1e357097b8d338a07966bd7c71f0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/658208fe9d7b1e357097b8d338a07966bd7c71f0", "committedDate": "2020-02-17T16:57:12Z", "message": "[DROOLS-4933] Implemented KiePMMLNameOpType. Add tests for ModelUtils. Moved util class to compiler-commons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da0fde1e22a273635df59fdbaa58b8e26319911", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4da0fde1e22a273635df59fdbaa58b8e26319911", "committedDate": "2020-02-18T06:53:28Z", "message": "[DROOLS-4933] Changed log level of messages printed out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "966683e9c6efac56d59136944963730afdf91910", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/966683e9c6efac56d59136944963730afdf91910", "committedDate": "2020-02-18T08:35:43Z", "message": "[DROOLS-4933] Add test to compiler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda10f9440b1b5bb604d83b17c93deec249ae7b0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cda10f9440b1b5bb604d83b17c93deec249ae7b0", "committedDate": "2020-02-18T08:40:30Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "committedDate": "2020-02-18T08:47:18Z", "message": "[DROOLS-4933] Updated version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTY2NTk3", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360166597", "createdAt": "2020-02-18T09:05:18Z", "commit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTcwNTQ0", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360170544", "createdAt": "2020-02-18T09:11:15Z", "commit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMToxNVrOFq6WgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMToxNVrOFq6WgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDU0NQ==", "bodyText": "Is this useful? Even if it is please change the implementation: you're implicitly creating a subclass of HashMap at each invocation in this way.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380540545", "createdAt": "2020-02-18T09:11:15Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {\n+\n+    /**\n+     * Returns an <code>HashMap</code> with the given key/value pairs\n+     * @param k1\n+     * @param v1\n+     * @return\n+     */\n+    public static <K, V> Map<K, V> mapOf(K k1, V v1) {\n+        return new HashMap<K, V>() {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTcwOTk0", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360170994", "createdAt": "2020-02-18T09:11:50Z", "commit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMTo1MVrOFq6X4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMTo1MVrOFq6X4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDg5OA==", "bodyText": "Demonstration that checked exceptions are bogus.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380540898", "createdAt": "2020-02-18T09:11:51Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.interfaces;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.DoubleConsumer;\n+import java.util.function.Function;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Factory for <b>wrappers</b> around custom <b>exception-throwing</b> functional interfaces\n+ */\n+public class FunctionalWrapperFactory {\n+\n+    /**\n+     * <code>Function</code> <code>wrapper</code> for exception-throwing <code>Function</code>\n+     * @param throwingFunction\n+     * @param <T>\n+     * @param <R>\n+     * @param <E>\n+     * @return\n+     * @throws E\n+     */\n+    public static <T, R, E extends Exception> Function<T, R> throwingFunctionWrapper(ThrowingFunction<T, R, E> throwingFunction) throws E {\n+        return t -> {\n+            try {\n+                return throwingFunction.apply(t);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTcxNDgw", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360171480", "createdAt": "2020-02-18T09:12:33Z", "commit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMjozM1rOFq6ZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMjozM1rOFq6ZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MTI3OA==", "bodyText": "At this point I want to die.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380541278", "createdAt": "2020-02-18T09:12:33Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.interfaces;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Exception-throwing <code>BiConsumer</code>\n+ */\n+@FunctionalInterface\n+public interface ThrowingBiConsumer<T, U, E extends Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTcyNTAw", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360172500", "createdAt": "2020-02-18T09:14:04Z", "commit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxNDowNFrOFq6cpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxNDowNFrOFq6cpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MjExOQ==", "bodyText": "Should this be Serializable? If so you need an empty constructor. If not make all these fields final.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380542119", "createdAt": "2020-02-18T09:14:04Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {\n+\n+    private static final long serialVersionUID = -5895956619311871049L;\n+    private String extender;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8d2100bc3bf118fba39c99ee364279725b5d2d91", "committedDate": "2020-02-18T09:23:17Z", "message": "[DROOLS-4933] Unchecking all exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a31512025662961a5df697fdcbbafddbc01878", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/67a31512025662961a5df697fdcbbafddbc01878", "committedDate": "2020-02-18T09:28:56Z", "message": "[DROOLS-4933] Adding empty constructor to Serialiazables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTg2MzM1", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360186335", "createdAt": "2020-02-18T09:33:02Z", "commit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzowMlrOFq7ICQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzowMlrOFq7ICQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzIyNQ==", "bodyText": "This generic doesn't seem to be useful since you cannot use it on the call site and then obliges you to add those [at]SuppressWarning annotation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380553225", "createdAt": "2020-02-18T09:33:02Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.api.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+/**\n+ * API for actual PMML model implementations\n+ */\n+public interface ModelImplementationProvider<T extends Model, E extends KiePMMLModel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTg2OTIw", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360186920", "createdAt": "2020-02-18T09:33:53Z", "commit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzo1M1rOFq7J2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozMzo1M1rOFq7J2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzY4OQ==", "bodyText": "If you remove the generic on the ModelImplementationProvider as I suggested above you can get rid of this annotation.", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380553689", "createdAt": "2020-02-18T09:33:53Z", "author": {"login": "mariofusco"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.debug(\"getImplementations {}\", refresh);\n+        List<ModelImplementationProvider> toReturn = new ArrayList<>();\n+        Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n+        providers.forEachRemaining(toReturn::add);\n+        logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n+        toReturn.forEach(provider -> logger.debug(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        return toReturn;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTk2Nzcy", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360196772", "createdAt": "2020-02-18T09:47:29Z", "commit": {"oid": "67a31512025662961a5df697fdcbbafddbc01878"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjAxODcy", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360201872", "createdAt": "2020-02-18T09:54:25Z", "commit": {"oid": "67a31512025662961a5df697fdcbbafddbc01878"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjA2NDE2", "url": "https://github.com/kiegroup/drools/pull/2757#pullrequestreview-360206416", "createdAt": "2020-02-18T10:00:34Z", "commit": {"oid": "67a31512025662961a5df697fdcbbafddbc01878"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d13258cf5e928c7d798c3504501f5fc3c231d51", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3d13258cf5e928c7d798c3504501f5fc3c231d51", "committedDate": "2020-02-18T11:09:08Z", "message": "[DROOLS-4933] Reducing usage of SuppressWarnings"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}