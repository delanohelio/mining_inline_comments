{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTAzOTIy", "number": 2863, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MToxNFrODzxITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1NDowMlrODzxOLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA4OTEwOnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNDeclaredField.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MToxNFrOGIYb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjo1MTowNlrOGIeExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MjEzOA==", "bodyText": "I suspect this will need some refactor, I know this is the escape, but still something does not look right to me here.", "url": "https://github.com/kiegroup/drools/pull/2863#discussion_r411442138", "createdAt": "2020-04-20T14:51:14Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNDeclaredField.java", "diffHunk": "@@ -101,9 +109,46 @@ private String withPackage(String typeName) {\n     }\n \n     public String getBaseType(DMNType fieldType) {\n-        Optional<DMNType> baseType = Optional.ofNullable(fieldType.getBaseType());\n-        return baseType.map(DMNType::getName)\n-                .orElse(OBJECT_TYPE);\n+        Optional<DMNType> baseType = getRecursiveBaseType(fieldType);\n+        return baseType.map(this::getFieldNameWithAnyCheck).orElse(OBJECT_TYPE);\n+    }\n+\n+    private Optional<DMNType> getRecursiveBaseType(DMNType fieldType) {\n+        if (index.isIndexedClass(getFieldNameWithAnyCheck(fieldType))) {\n+            return Optional.of(fieldType);\n+        } else if (fieldType.getBaseType() == null) {\n+            return Optional.of(fieldType);\n+        } else {\n+            return getRecursiveBaseType(fieldType.getBaseType());\n+        }\n+    }\n+\n+    private String convertType(String originalType) {\n+        Class<?> convertedClass;\n+        switch (originalType) {\n+            case \"Any\":\n+                convertedClass = Object.class;\n+                break;\n+            case \"Date\":\n+                convertedClass = LocalDate.class;\n+                break;\n+            case \"Time\":\n+                convertedClass = LocalTime.class;\n+                break;\n+            case \"DateTime\":\n+                convertedClass = LocalDateTime.class;\n+                break;\n+            case \"DayTimeDuration\":\n+            case \"Days_32and_32time_32duration\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773445a372aae36533bdf85603ccba0f504f088"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNDUzNA==", "bodyText": "Yeah it definitely does", "url": "https://github.com/kiegroup/drools/pull/2863#discussion_r411534534", "createdAt": "2020-04-20T16:51:06Z", "author": {"login": "lucamolteni"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNDeclaredField.java", "diffHunk": "@@ -101,9 +109,46 @@ private String withPackage(String typeName) {\n     }\n \n     public String getBaseType(DMNType fieldType) {\n-        Optional<DMNType> baseType = Optional.ofNullable(fieldType.getBaseType());\n-        return baseType.map(DMNType::getName)\n-                .orElse(OBJECT_TYPE);\n+        Optional<DMNType> baseType = getRecursiveBaseType(fieldType);\n+        return baseType.map(this::getFieldNameWithAnyCheck).orElse(OBJECT_TYPE);\n+    }\n+\n+    private Optional<DMNType> getRecursiveBaseType(DMNType fieldType) {\n+        if (index.isIndexedClass(getFieldNameWithAnyCheck(fieldType))) {\n+            return Optional.of(fieldType);\n+        } else if (fieldType.getBaseType() == null) {\n+            return Optional.of(fieldType);\n+        } else {\n+            return getRecursiveBaseType(fieldType.getBaseType());\n+        }\n+    }\n+\n+    private String convertType(String originalType) {\n+        Class<?> convertedClass;\n+        switch (originalType) {\n+            case \"Any\":\n+                convertedClass = Object.class;\n+                break;\n+            case \"Date\":\n+                convertedClass = LocalDate.class;\n+                break;\n+            case \"Time\":\n+                convertedClass = LocalTime.class;\n+                break;\n+            case \"DateTime\":\n+                convertedClass = LocalDateTime.class;\n+                break;\n+            case \"DayTimeDuration\":\n+            case \"Days_32and_32time_32duration\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MjEzOA=="}, "originalCommit": {"oid": "2773445a372aae36533bdf85603ccba0f504f088"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA5OTg0OnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/v1_3/DMNTypeSafeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MzoxNlrOGIYiXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MzoxNlrOGIYiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzgwNw==", "bodyText": "can you please revert this move? I am not understanding why was it necessary", "url": "https://github.com/kiegroup/drools/pull/2863#discussion_r411443807", "createdAt": "2020-04-20T14:53:16Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/v1_3/DMNTypeSafeTest.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.dmn.typesafe;\n+package org.kie.dmn.core.v1_3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773445a372aae36533bdf85603ccba0f504f088"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjEwNDEyOnYy", "diffSide": "RIGHT", "path": "kie-dmn/kie-dmn-validation/src/test/java/org/kie/dmn/validation/ValidatorImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1NDowMlrOGIYk6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1NDowMlrOGIYk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NDQ1OA==", "bodyText": "not sure why ValidatorImportTest.java needed any modifications?", "url": "https://github.com/kiegroup/drools/pull/2863#discussion_r411444458", "createdAt": "2020-04-20T14:54:02Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-validation/src/test/java/org/kie/dmn/validation/ValidatorImportTest.java", "diffHunk": "@@ -70,7 +70,7 @@ public void testBaseModelOK() {\n     public void testBaseModelOKFromReaderInput() throws IOException {\n         try (final Reader reader0 = getReader(\"import/Base-model.dmn\");\n                 final Reader reader1 = getReader(\"import/Import-base-model.dmn\");) {\n-            final List<DMNMessage> messages = validator.validateUsing(// VALIDATE_SCHEMA, disabled, due to QName use not compliant. \n+            final List<DMNMessage> messages = validator.validateUsing(// VALIDATE_SCHEMA, disabled, due to QName use not compliant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773445a372aae36533bdf85603ccba0f504f088"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2486, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}