{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDczMjMx", "number": 3237, "title": "[DROOLS-5780] descope ecj", "bodyText": "", "createdAt": "2020-11-12T18:26:10Z", "url": "https://github.com/kiegroup/drools/pull/3237", "merged": true, "mergeCommit": {"oid": "850a6567a0d3e74c05a4615690165728ebe0f4e7"}, "closed": true, "closedAt": "2020-11-20T08:26:57Z", "author": {"login": "mariofusco"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb2zm5AH2gAyNTIwMDczMjMxOjAzOTc1MWE4MWZiNTYxMWMyNDBkZGIwMjJiMWNmY2UxOGZjYWM4YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeBB5-gH2gAyNTIwMDczMjMxOmMzNzlmZTBiM2ZmMzg1MDQ4ZTM5NTdjNzM5OWFlZWIyODBhZDFlNTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "039751a81fb5611c240ddb022b1cfce18fcac8aa", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/039751a81fb5611c240ddb022b1cfce18fcac8aa", "committedDate": "2020-11-12T18:24:26Z", "message": "[DROOLS-5780] descope ecj"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDEzNDgy", "url": "https://github.com/kiegroup/drools/pull/3237#pullrequestreview-529413482", "createdAt": "2020-11-12T19:19:10Z", "commit": {"oid": "039751a81fb5611c240ddb022b1cfce18fcac8aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f", "committedDate": "2020-11-13T15:29:39Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTcwODk5", "url": "https://github.com/kiegroup/drools/pull/3237#pullrequestreview-530170899", "createdAt": "2020-11-13T15:43:53Z", "commit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTo0Mzo1NFrOHyzbRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTo0Mzo1NFrOHyzbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMzQxNQ==", "bodyText": "Does this work in Java11/Native image?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r523033415", "createdAt": "2020-11-13T15:43:54Z", "author": {"login": "lucamolteni"}, "path": "drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/NativeJavaCompiler.java", "diffHunk": "@@ -347,12 +357,52 @@ public boolean hasLocation(Location location) {\n                         }\n                     }\n                 }\n-                return result == null ? Collections.<JavaFileObject>emptyList() : result;\n+                return result == null ? Collections.emptyList() : result;\n             } catch (IOException e) {\n                 return Collections.emptyList();\n             }\n         }\n \n+        private List<JavaFileObject> findClassesIndexed(String packageName) {\n+            List<JavaFileObject> result = new ArrayList<JavaFileObject>();\n+            for (String className : indexedClasses.getOrDefault( packageName, Collections.emptySet() )) {\n+                String binaryName = packageName + \".\" + className;\n+                URL classUrl = classLoader.getResource(binaryName.replace('.', '/') + \".class\");\n+                if (classUrl != null) {\n+                    try {\n+                        result.add(new CustomJavaFileObject(binaryName, classUrl.toURI()));\n+                    } catch (URISyntaxException e) {\n+                        throw new RuntimeException( e );\n+                    }\n+                }\n+            }\n+            return result;\n+        }\n+\n+        private Map<String, Set<String>> indexClassesByPackage() {\n+            Map<String, Set<String>> indexedClasses = new HashMap<>();\n+            for (ClassLoader cl = classLoader; cl != null; cl = cl.getParent()) {\n+                indexClassesByPackage(indexedClasses, cl);\n+            }\n+            return indexedClasses;\n+        }\n+\n+        private void indexClassesByPackage(Map<String, Set<String>> indexedClasses, ClassLoader classLoader) {\n+            if (classLoader instanceof ProjectClassLoader || classLoader == NativeJavaCompiler.class.getClassLoader()) {\n+                return;\n+            }\n+            try {\n+                Field classesField = ClassLoader.class.getDeclaredField( \"classes\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTU4ODUy", "url": "https://github.com/kiegroup/drools/pull/3237#pullrequestreview-531158852", "createdAt": "2020-11-16T09:45:26Z", "commit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo0NToyN1rOHzw4mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDo0NzozNVrOHz1G6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA0MDM0Nw==", "bodyText": "It is a bit unrelated but why don't return Optional<JavaCompiler> if it can silently fail?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524040347", "createdAt": "2020-11-16T09:45:27Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java", "diffHunk": "@@ -70,7 +52,7 @@ public JavaCompiler createCompiler(final String pHint) {\n         }\n         \n         try {\n-            return (JavaCompiler) clazz.newInstance();\n+            return (JavaCompiler) clazz.getConstructor().newInstance();\n         } catch (Throwable t) {\n             return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2MzU3OQ==", "bodyText": "What is the differences between loadCompiler and createCompiler? Both create it so it seems to be just an overload", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524063579", "createdAt": "2020-11-16T10:05:47Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java", "diffHunk": "@@ -81,34 +63,20 @@ public JavaCompiler loadCompiler( JavaConfiguration configuration) {\n     }\n \n     public JavaCompiler loadCompiler( JavaConfiguration.CompilerType compilerType, String lngLevel ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2NDY0Mw==", "bodyText": "Why this hack?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524064643", "createdAt": "2020-11-16T10:06:48Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java", "diffHunk": "@@ -81,34 +63,20 @@ public JavaCompiler loadCompiler( JavaConfiguration configuration) {\n     }\n \n     public JavaCompiler loadCompiler( JavaConfiguration.CompilerType compilerType, String lngLevel ) {\n-        JavaCompiler compiler;\n-        switch ( compilerType ) {\n-            case NATIVE : {\n-                compiler = createCompiler( \"native\" );\n-                if (compiler == null) {\n-                    throw new RuntimeException(\"Instance of native compiler cannot be created!\");\n-                } else {\n-                    updateSettings( compiler.createDefaultSettings(), lngLevel );\n-                }\n-                break;\n-            }\n-            case ECLIPSE :\n-            default : {\n-                compiler = createCompiler( \"eclipse\" );\n-                if (compiler == null) {\n-                    throw new RuntimeException(\"Instance of eclipse compiler cannot be created!\");\n-                } else {\n-                    updateSettings( compiler.createDefaultSettings(), lngLevel );\n-                }\n-                break;\n-            }\n+        JavaCompiler compiler = createCompiler( compilerType );\n+        if (compiler == null) {\n+            throw new RuntimeException(\"Instance of \" + compilerType + \" compiler cannot be created!\");\n+        } else {\n+            compiler.setJavaCompilerSettings( updateSettings( compiler.createDefaultSettings(), lngLevel ) );\n         }\n         return compiler;\n     }\n \n     private JavaCompilerSettings updateSettings( JavaCompilerSettings settings, String lngLevel ) {\n         settings.setTargetVersion( lngLevel );\n-        settings.setSourceVersion( lngLevel );\n+        if (lngLevel.startsWith( \"1.\" )) { // avoid in memory compilation with JPMS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NzE2OQ==", "bodyText": "Do you think it makes sense to keep the shading of ecj in this pom? The original problem was to avoid clashing with GWT ecj version and this could still happen. Now with the descoping I think the shading should be preserved: if you want to avoid ECJ you can while if you explicitly add this dependency having it shaded or not should be the same. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524077169", "createdAt": "2020-11-16T10:18:08Z", "author": {"login": "danielezonca"}, "path": "drools-ecj/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020. Red Hat, Inc. and/or its affiliates.\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>drools</artifactId>\n+        <groupId>org.drools</groupId>\n+        <version>7.47.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <name>Drools :: ECJ</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4MDIyMw==", "bodyText": "What about drools-engine-classic? Do we want to keep ecj in that \"bundle\"? As default?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524080223", "createdAt": "2020-11-16T10:20:54Z", "author": {"login": "danielezonca"}, "path": "drools-ecj/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020. Red Hat, Inc. and/or its affiliates.\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>drools</artifactId>\n+        <groupId>org.drools</groupId>\n+        <version>7.47.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <name>Drools :: ECJ</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4MzI0NA==", "bodyText": "I'm worried that now we will not test ecj anymore at all because it is not the default and it is not explicitly declared/used anywhere as far as I can see.\nDo you think it make sense to add ecj tests as parametrized junit? only some tests? the whole test suite?\nI'm not sure we want to deprecate ecj or we just want to make it optional but we want to be sure everything still works\nWe can improve with other tickets, now I would like to understand the direction", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524083244", "createdAt": "2020-11-16T10:23:44Z", "author": {"login": "danielezonca"}, "path": "drools-ecj/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020. Red Hat, Inc. and/or its affiliates.\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>drools</artifactId>\n+        <groupId>org.drools</groupId>\n+        <version>7.47.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <name>Drools :: ECJ</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5MzQzMg==", "bodyText": "We should document this behavior, personally I don't like a \"dynamic\" default based on classpath.\nIs it for backward compatibility?\nIn any case, can you please add a log.debug with the selected value to make it easier to debug?\nSomething like\nlog.debug(\"Selected compiler \" + prop + \" [drools.dialect.java.compiler:\" + this.conf.getChainedProperties().getProperty( JAVA_COMPILER_PROPERTY, null) + \", hasEclipseCompiler:\" + hasEclipseCompiler() + \"]\");", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524093432", "createdAt": "2020-11-16T10:32:56Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/compiler/JavaConfiguration.java", "diffHunk": "@@ -192,11 +195,10 @@ public CompilerType getCompiler() {\n      */\n     private CompilerType getDefaultCompiler() {\n         try {\n-            final String prop = this.conf.getChainedProperties().getProperty( JAVA_COMPILER_PROPERTY,\n-                                                                              \"ECLIPSE\" );\n-            if ( prop.equals( \"NATIVE\" ) ) {\n+            final String prop = this.conf.getChainedProperties().getProperty( JAVA_COMPILER_PROPERTY, hasEclipseCompiler() ? \"ECLIPSE\" : \"NATIVE\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5ODc0Mg==", "bodyText": "Is it possible to move this configuration as part of DEFAULT_JAVA_CONFIGURATION?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524098742", "createdAt": "2020-11-16T10:37:49Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/compiler/JavaConfiguration.java", "diffHunk": "@@ -77,25 +79,48 @@\n     implements\n     DialectConfiguration {\n \n+    // This should be in alphabetic order to search with BinarySearch\n+    protected static final String[]  LANGUAGE_LEVELS = new String[]{\"1.5\", \"1.6\", \"1.7\", \"1.8\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"9\"};\n+\n+    private static final JavaConfiguration DEFAULT_JAVA_CONFIGURATION = new JavaConfiguration(new KnowledgeBuilderConfigurationImpl(JavaConfiguration.class.getClassLoader()));\n+    private static final String DEFAULT_JAVA_VERSION = findJavaVersion(DEFAULT_JAVA_CONFIGURATION.conf.getChainedProperties());\n+\n     protected static final transient Logger logger = LoggerFactory.getLogger( JavaConfiguration.class);\n \n     public static final String JAVA_COMPILER_PROPERTY = \"drools.dialect.java.compiler\";\n     public static final String JAVA_LANG_LEVEL_PROPERTY = \"drools.dialect.java.compiler.lnglevel\";\n \n     public enum CompilerType {\n-        ECLIPSE, NATIVE\n+        ECLIPSE(\"org.drools.ecj.EclipseJavaCompiler\"),\n+        NATIVE(\"org.drools.compiler.commons.jci.compilers.NativeJavaCompiler\");\n+\n+        private final String implClassName;\n+\n+        CompilerType( String implClassName ) {\n+            this.implClassName = implClassName;\n+        }\n+\n+        public String getImplClassName() {\n+            return implClassName;\n+        }\n     }\n \n-    // This should be in alphabetic order to search with BinarySearch\n-    protected static final String[]  LANGUAGE_LEVELS = new String[]{\"1.5\", \"1.6\", \"1.7\", \"1.8\", \"10\", \"11\", \"12\", \"9\"};\n+    public static JavaCompiler createDefaultCompiler() {\n+        JavaCompiler javaCompiler = JavaCompilerFactory.INSTANCE.loadCompiler(DEFAULT_JAVA_CONFIGURATION.getCompiler(), DEFAULT_JAVA_VERSION);\n+        javaCompiler.setSourceFolder(\"src/main/java/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwOTU0Nw==", "bodyText": "What do you mean with \"Indexed\"?", "url": "https://github.com/kiegroup/drools/pull/3237#discussion_r524109547", "createdAt": "2020-11-16T10:47:35Z", "author": {"login": "danielezonca"}, "path": "drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/NativeJavaCompiler.java", "diffHunk": "@@ -347,12 +357,52 @@ public boolean hasLocation(Location location) {\n                         }\n                     }\n                 }\n-                return result == null ? Collections.<JavaFileObject>emptyList() : result;\n+                return result == null ? Collections.emptyList() : result;\n             } catch (IOException e) {\n                 return Collections.emptyList();\n             }\n         }\n \n+        private List<JavaFileObject> findClassesIndexed(String packageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c3ba9c9deeb2080d2d0a8330ac3c146a758e5f"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad66a9ddccb288259ccbfa8cefd93630391305fe", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/ad66a9ddccb288259ccbfa8cefd93630391305fe", "committedDate": "2020-11-16T11:54:08Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8c370211c75ac671fe5c2402fb9ff557374a308", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/b8c370211c75ac671fe5c2402fb9ff557374a308", "committedDate": "2020-11-17T11:54:04Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMzQ3NDkx", "url": "https://github.com/kiegroup/drools/pull/3237#pullrequestreview-532347491", "createdAt": "2020-11-17T13:15:24Z", "commit": {"oid": "b8c370211c75ac671fe5c2402fb9ff557374a308"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "467964c2ca68b05258c563ac01fb578cba418bbd", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/467964c2ca68b05258c563ac01fb578cba418bbd", "committedDate": "2020-11-17T15:15:58Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTU0ODA3", "url": "https://github.com/kiegroup/drools/pull/3237#pullrequestreview-532954807", "createdAt": "2020-11-18T01:46:33Z", "commit": {"oid": "467964c2ca68b05258c563ac01fb578cba418bbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57823c51418a05305ca15cb4f30628c533d356e4", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/57823c51418a05305ca15cb4f30628c533d356e4", "committedDate": "2020-11-18T09:20:38Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcf9711e699ec0c39de910405d619cc88f93b549", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/dcf9711e699ec0c39de910405d619cc88f93b549", "committedDate": "2020-11-18T10:56:24Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c751a4e38464c86d9a7c562fab9334024e7bd692", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/c751a4e38464c86d9a7c562fab9334024e7bd692", "committedDate": "2020-11-19T11:22:46Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35042399558da698c9afe9455450a7580a0b36e5", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/35042399558da698c9afe9455450a7580a0b36e5", "committedDate": "2020-11-19T08:11:15Z", "message": "Merge branch 'master' into d5780"}, "afterCommit": {"oid": "c751a4e38464c86d9a7c562fab9334024e7bd692", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/c751a4e38464c86d9a7c562fab9334024e7bd692", "committedDate": "2020-11-19T11:22:46Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c379fe0b3ff385048e3957c7399aeeb280ad1e58", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/drools/commit/c379fe0b3ff385048e3957c7399aeeb280ad1e58", "committedDate": "2020-11-19T11:26:57Z", "message": "Merge branch 'master' into d5780"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1745, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}