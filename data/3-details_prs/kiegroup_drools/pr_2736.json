{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTMyODY2", "number": 2736, "title": "DROOLS-4973: Adding additional test cases for FEEL expressions", "bodyText": "@jomarko @danielezonca\nAdded test cases for case reported in https://issues.redhat.com/browse/DROOLS-4973", "createdAt": "2020-01-28T10:24:00Z", "url": "https://github.com/kiegroup/drools/pull/2736", "merged": true, "mergeCommit": {"oid": "584be094cf9ae8977485fdea92145017f1608145"}, "closed": true, "closedAt": "2020-01-29T16:56:12Z", "author": {"login": "yesamer"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-usuTgH2gAyMzY3OTMyODY2Ojc2YjMxYzBmMzQ2MjI1ZGI2NGVhYWJlMmYwNTk2YTJiMzhiYWZhZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_G4f7AFqTM1MDE1MDE3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/drools/commit/76b31c0f346225db64eaabe2f0596a2b38bafad1", "committedDate": "2020-01-28T10:22:43Z", "message": "DROOLS-4973: Adding additional test cases for FEEL expressions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjgzNTMz", "url": "https://github.com/kiegroup/drools/pull/2736#pullrequestreview-349283533", "createdAt": "2020-01-28T10:52:22Z", "commit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMTIzNjc2", "url": "https://github.com/kiegroup/drools/pull/2736#pullrequestreview-350123676", "createdAt": "2020-01-29T13:58:25Z", "commit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1ODoyNlrOFjJRBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1OToxMVrOFjJSsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjI5Mw==", "bodyText": "Also different value, not just order, wee need to fix", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372396293", "createdAt": "2020-01-29T13:58:26Z", "author": {"login": "jomarko"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjcyMg==", "bodyText": "same lines", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372396722", "createdAt": "2020-01-29T13:59:11Z", "author": {"login": "jomarko"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));\n+        /* IN operator */\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d99b67a2ef83033d64bf16768fcefdf9c5329442", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/drools/commit/d99b67a2ef83033d64bf16768fcefdf9c5329442", "committedDate": "2020-01-29T14:29:15Z", "message": "DROOLS-4973: Adding additional test cases for FEEL expressions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMTUwMTcy", "url": "https://github.com/kiegroup/drools/pull/2736#pullrequestreview-350150172", "createdAt": "2020-01-29T14:33:18Z", "commit": {"oid": "d99b67a2ef83033d64bf16768fcefdf9c5329442"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1573, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}