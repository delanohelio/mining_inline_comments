{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTA5ODA4", "number": 2966, "title": "Drools 5461 - Overall Transformations Workflow", "bodyText": "@danielezonca @mariofusco @jiripetrlik\nsee https://issues.redhat.com/browse/DROOLS-5461\nMain modifications to this PR\n\nimplementing overall flow for transformations management\nimplemented overall DerivedFields management\nimplemented \"Constant\" and \"FieldRef\" Expressions\nFor drools models, moved \"FieldType\" map and \"Types\" list population to DroolsModelProvider", "createdAt": "2020-07-01T07:47:42Z", "url": "https://github.com/kiegroup/drools/pull/2966", "merged": true, "mergeCommit": {"oid": "c83c152277670b87460446d1962268799ad223ef"}, "closed": true, "closedAt": "2020-07-01T19:21:16Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZbS8XgH2gAyNDQyNTA5ODA4OmU2NGVmNjFhODU2MWY1Y2QzNDI0OGU5OGRmM2IyZTFkNDgzNDUwZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwsSsGgFqTQ0MDk5NTQ1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e64ef61a8561f5cd34248e98df3b2e1d483450dc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e64ef61a8561f5cd34248e98df3b2e1d483450dc", "committedDate": "2020-04-20T09:02:19Z", "message": "[DROOLS-5247] Implemented/propagate Transformation Map (to be populated)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2213dbb4caeb745e377cb7baa813a911ed0aae92", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2213dbb4caeb745e377cb7baa813a911ed0aae92", "committedDate": "2020-04-20T09:03:33Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0310b667ce6c8f6cc92720c750d9d61558494338", "committedDate": "2020-06-04T10:24:17Z", "message": "[Drools-5373] Refactored PMMLAssembler - implemented two delegates PMMLCompilerService and PMMLLoaderService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3ac318ed0ac6edce90a020807c85146675c5cf", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6d3ac318ed0ac6edce90a020807c85146675c5cf", "committedDate": "2020-06-05T10:06:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2badfe14a34ed998f036b866cf8a94b3ad2efe42", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2badfe14a34ed998f036b866cf8a94b3ad2efe42", "committedDate": "2020-06-05T11:42:15Z", "message": "[DROOLS-5372] Implement dynamic ResourceType switch inside PMMLAssemblerService(s)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eab522b04d70abe69e173f9acf834ea13d24cdd", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7eab522b04d70abe69e173f9acf834ea13d24cdd", "committedDate": "2020-06-05T11:43:25Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3f2e54864708e535bcd3f317323acca93c14b9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0d3f2e54864708e535bcd3f317323acca93c14b9", "committedDate": "2020-06-05T13:08:37Z", "message": "[DROOLS-5372] Using PMMLConstants for system property retrieval/setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea3d3c2399c6eb18b9f914d63cc0ec48a2974a0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7ea3d3c2399c6eb18b9f914d63cc0ec48a2974a0", "committedDate": "2020-06-08T08:54:50Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5676276eeaa963be72a67a71d7a1911469a9899", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a5676276eeaa963be72a67a71d7a1911469a9899", "committedDate": "2020-06-08T11:07:36Z", "message": "[DROOLS-5372] Implementing  AbstractDMNKiePMMLInvocationEvaluator and DMNKiePMMLNewInvocationEvaluator. Refactored DMNKiePMMLInvocationEvaluator. Implement switch between them inside AbstractPMMLInvocationEvaluator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74915ee8ccdb0ae9b5f17fa488b8234e60c12d3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a74915ee8ccdb0ae9b5f17fa488b8234e60c12d3", "committedDate": "2020-06-08T16:07:11Z", "message": "[DROOLS-5372] Fixing bug with nested node containing only a True predicate. Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0beb8528e5f0ae06c26e3cc9ed8cdf79435918", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9a0beb8528e5f0ae06c26e3cc9ed8cdf79435918", "committedDate": "2020-06-09T14:55:58Z", "message": "[DROOLS-5372] Working on DMN-PMML implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14623a16993cf0f3b887a976faebbcfe7791c67", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f14623a16993cf0f3b887a976faebbcfe7791c67", "committedDate": "2020-06-10T10:19:42Z", "message": "[DROOLS-5423] Declaring glassfish jaxb-runtime dependency for JDK >= 11 to maintain compiler functionality in such environments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848624b1a9ba09597b50c2002df702c507421bde", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/848624b1a9ba09597b50c2002df702c507421bde", "committedDate": "2020-06-11T07:27:14Z", "message": "[DROOLS-5372] Add specific message for missing PMML result. Working on tests (currently broken when run together)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb07adcb468e27eff2c087ed61e8d657360772a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/aeb07adcb468e27eff2c087ed61e8d657360772a", "committedDate": "2020-06-11T07:32:38Z", "message": "Merge branch 'master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628aee3515caf031794523f89222ebef64c9bc0a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/628aee3515caf031794523f89222ebef64c9bc0a", "committedDate": "2020-06-11T15:38:13Z", "message": "[DROOLS-5258] Working with tests. Currently broken if DMNTreePMMLTest and DMNTreePMMLNewImplTest run concurrently.\nLOT of System.out.println to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6240cf6317fdee876a085f5eb17fbfe347abe2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4f6240cf6317fdee876a085f5eb17fbfe347abe2", "committedDate": "2020-06-11T15:38:59Z", "message": "[DROOLS-5372] Working with tests. Currently broken if DMNTreePMMLTest and DMNTreePMMLNewImplTest run concurrently.\nLOT of System.out.println to remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4e925f944f3b3485ad71e8e21c66f53c1e8fed", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9d4e925f944f3b3485ad71e8e21c66f53c1e8fed", "committedDate": "2020-06-11T15:39:38Z", "message": "Merge branch 'DROOLS-5372' of github.com:gitgabrio/drools into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02673158812e720c1e1862d4379c2e9980cc1f81", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/02673158812e720c1e1862d4379c2e9980cc1f81", "committedDate": "2020-06-15T15:03:36Z", "message": "[DROOLS-5372] Implemented reset workaround"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623f03f6b59d4baae90e927b207cae9f982beceb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/623f03f6b59d4baae90e927b207cae9f982beceb", "committedDate": "2020-06-15T15:43:00Z", "message": "[DROOLS-5372] Fixed DMN-PMML tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df529ffbbdfd8a55f8b4ad5e8774067752529808", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/df529ffbbdfd8a55f8b4ad5e8774067752529808", "committedDate": "2020-06-16T08:04:34Z", "message": "[DROOLS-5372] Replaced ContextClassLoader.loadClass(...) with Class.forName(...)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78156d8aaf79d5949db204458805b64351bb2eca", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/78156d8aaf79d5949db204458805b64351bb2eca", "committedDate": "2020-06-16T08:56:01Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5372"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4062f6999a4a4553bfa4fc7b3cc32fd292ad03f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d4062f6999a4a4553bfa4fc7b3cc32fd292ad03f", "committedDate": "2020-06-16T08:59:24Z", "message": "Merge branch 'DROOLS-5372' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/PMMLTreeModelEvaluatorTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/src/test/java/org/kie/pmml/models/drools/tree/tests/AbstractPMMLTreeTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/AbstractPMMLRegressionTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LogisticRegressionNoneNormalizationTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/NormalizationMethodsRegressionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4acfbcf1ce39ac844f46e13bbc6588c4b973bea", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b4acfbcf1ce39ac844f46e13bbc6588c4b973bea", "committedDate": "2020-06-19T10:12:03Z", "message": "[DROOLS-5247] Begin modifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd4bb69b24c178eeddcc994fe95a1c4463a41ac4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/dd4bb69b24c178eeddcc994fe95a1c4463a41ac4", "committedDate": "2020-06-22T15:28:55Z", "message": "Merge branch 'master' into DROOLS-5247\n\n# Conflicts:\n#\tkie-dmn/kie-dmn-core/pom.xml\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractDMNKiePMMLInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/AbstractPMMLInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLNewInvocationEvaluator.java\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/util/KieHelper.java\n#\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/pmml/DMNTreePMMLNewImplTest.java\n#\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/util/DMNRuntimeUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d010ecdd96e80846fd5fb00d07f7e14936809e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/50d010ecdd96e80846fd5fb00d07f7e14936809e", "committedDate": "2020-06-22T15:30:19Z", "message": "[DROOLS-5247] Removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a162ead002405e8762b88ef681eb2f58a98b5d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/85a162ead002405e8762b88ef681eb2f58a98b5d", "committedDate": "2020-06-23T16:43:11Z", "message": "[DROOLS-5448] Add TransformationDictionary to \"compiler\" stack methods. Implemented transformations flow inside Runtime."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945486ac4696ad6a05bcced78e98fd86b3ab9149", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/945486ac4696ad6a05bcced78e98fd86b3ab9149", "committedDate": "2020-06-23T16:51:09Z", "message": "[DROOLS-5247] Begin implementation of actual Transformation management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64bae84f6727c1d258a9ee9208bb4b087a1652be", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/64bae84f6727c1d258a9ee9208bb4b087a1652be", "committedDate": "2020-06-23T16:53:07Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5448' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetrieverTest.java\n#\tkie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/mocks/TestingModelImplementationProvider.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "committedDate": "2020-06-24T08:19:50Z", "message": "[DROOLS-5448] Make all parameters \"final\" in modified classes. Fixed local transformations logic inside PMMLRuntimeImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf24e7ad6d2f45ebcf43b83c6bd068a58d8099c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2cf24e7ad6d2f45ebcf43b83c6bd068a58d8099c", "committedDate": "2020-06-24T08:27:49Z", "message": "[DROOLS-5448] Return unmodifiable maps from PMMLContextImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1f362154ad35a3f6993680a85e594bcf41b7b2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8c1f362154ad35a3f6993680a85e594bcf41b7b2", "committedDate": "2020-06-24T08:33:03Z", "message": "[DROOLS-5247] Invoking populateTransformationsInConstructor from models factories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eafe68b0bbf3bc77e7b128e41382169e5aee0367", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/eafe68b0bbf3bc77e7b128e41382169e5aee0367", "committedDate": "2020-06-24T08:33:42Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5448' into DROOLS-5247"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1bf2a4eea08f137b4c2bae70348f9fdea6067f8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b1bf2a4eea08f137b4c2bae70348f9fdea6067f8", "committedDate": "2020-06-24T15:28:27Z", "message": "[DROOLS-5247] Renamed for consistence with current module name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5491ef81ef3e0a94f246686557132d61aacf92eb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5491ef81ef3e0a94f246686557132d61aacf92eb", "committedDate": "2020-06-25T13:08:25Z", "message": "[DROOLS-5247] Begin implementation of codegen for specific Expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33fb044a708c737e128467796b98301edd5d1626", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/33fb044a708c737e128467796b98301edd5d1626", "committedDate": "2020-06-25T13:16:09Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247\n\n# Conflicts:\n#\tkie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e0a6f50654af942f9cee19d060032422c8e21b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/43e0a6f50654af942f9cee19d060032422c8e21b", "committedDate": "2020-06-25T16:08:49Z", "message": "[DROOLS-5247] Add Javadocs to illustrate generated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df336f9512ace14c7445cc58a0a0d9dcd4729047", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/df336f9512ace14c7445cc58a0a0d9dcd4729047", "committedDate": "2020-06-29T08:24:40Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5247"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db9fcb41ffe0a1b9ce5dfe0a6e684546e9773912", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/db9fcb41ffe0a1b9ce5dfe0a6e684546e9773912", "committedDate": "2020-06-29T14:10:28Z", "message": "[DROOLS-5247] Add method to CommonCodegenUtils. Update relevant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daf5cfe8741f0d347fc382ae233b3f6cb7ae5078", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/daf5cfe8741f0d347fc382ae233b3f6cb7ae5078", "committedDate": "2020-06-29T14:35:43Z", "message": "[DROOLS-5247] Add method to DerivedFieldFunctionUtils. Update relevant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6cbc84b58b6d669e81966f48af0bf1cb4b1dcc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cb6cbc84b58b6d669e81966f48af0bf1cb4b1dcc", "committedDate": "2020-06-29T15:02:00Z", "message": "[DROOLS-5247] Add new values to DATA_TYPE to match new DataType definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f4afc4e49ce42760d1ccb9583b507d177b4ad64", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2f4afc4e49ce42760d1ccb9583b507d177b4ad64", "committedDate": "2020-06-29T15:02:51Z", "message": "[DROOLS-5247] Implemented KiePMMLDerivedFieldASTFactory. Implemented KiePMMLDerivedFieldASTFactoryTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7299312e90bbc25498bda63af6e8fdaae43e295", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c7299312e90bbc25498bda63af6e8fdaae43e295", "committedDate": "2020-06-30T10:21:57Z", "message": "[DROOLS-5247] Add common methods to DroolsModelProvider. Implemented DroolsModelProviderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19783255705a993bf815c547fd7a89f639dbdbcc", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/19783255705a993bf815c547fd7a89f639dbdbcc", "committedDate": "2020-06-30T12:11:31Z", "message": "[DROOLS-5247] Regression tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54be3a058d3a304cf4fed6d4919ab18a34de7e3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f54be3a058d3a304cf4fed6d4919ab18a34de7e3", "committedDate": "2020-06-30T12:20:41Z", "message": "[DROOLS-5247] Minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee5021c110dd393bb9834708e169b645858a8289", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ee5021c110dd393bb9834708e169b645858a8289", "committedDate": "2020-06-30T12:22:42Z", "message": "[DROOLS-5247] Add common methods to DroolsModelProvider. Implemented DroolsModelProviderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f27514d486344f839c79b820f185dadceddbb12b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f27514d486344f839c79b820f185dadceddbb12b", "committedDate": "2020-06-30T12:23:33Z", "message": "[DROOLS-5247] Add Scorecard/TreeModel integration tests with transformations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f681ceaa00a69afc3cf4391a6dd8fc544b253d1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2f681ceaa00a69afc3cf4391a6dd8fc544b253d1", "committedDate": "2020-06-30T12:28:29Z", "message": "[DROOLS-5247] Add MISSING_BODY_TEMPLATE constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e4d6eabded4830f1019b66931090db074e757f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/39e4d6eabded4830f1019b66931090db074e757f", "committedDate": "2020-06-30T13:38:13Z", "message": "[DROOLS-5247] Add Transformations management inside KiePMMLModelFactoryUtils. Implemented tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82113d325d5886c1b178b9062440310995c6cd00", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/82113d325d5886c1b178b9062440310995c6cd00", "committedDate": "2020-06-30T13:46:06Z", "message": "[DROOLS-5247] Add TransformationDictionary parameter inside KiePMMLModelRetriever methods. Implemented/updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4278c2c652071b0b3e52139f520162508a2ac22", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b4278c2c652071b0b3e52139f520162508a2ac22", "committedDate": "2020-06-30T14:25:07Z", "message": "[DROOLS-5247] Updated KiePMMLRegressionModelFactory. Implemented/updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ebc23060548efc3fe26a36a94dbbcc77345c48", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/11ebc23060548efc3fe26a36a94dbbcc77345c48", "committedDate": "2020-06-30T14:30:22Z", "message": "[DROOLS-5247] Avoid NPE inside KiePMMLRegressionTableClassificationFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a512c1ec61afbb42d68cbdabb5dae491be66ec8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7a512c1ec61afbb42d68cbdabb5dae491be66ec8", "committedDate": "2020-06-30T14:31:21Z", "message": "[DROOLS-5247] Removing MISSING_BODY_TEMPLATE and importing from Constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bab1cc472b1f05eba51e78cff569e0f8302e33", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/89bab1cc472b1f05eba51e78cff569e0f8302e33", "committedDate": "2020-06-30T14:52:05Z", "message": "[DROOLS-5247] Moved List<KiePMMLDroolsType> types population in DroolsModelProvider.getKiePMMLDroolsASTCommon. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7877fe90da73c6e9228d86fc635d3e14a3accfe", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a7877fe90da73c6e9228d86fc635d3e14a3accfe", "committedDate": "2020-06-30T14:52:38Z", "message": "[DROOLS-5247] Renaming/clean up tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb87da6de23f9dc9f440f1aec60744278e42af23", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cb87da6de23f9dc9f440f1aec60744278e42af23", "committedDate": "2020-06-30T15:15:58Z", "message": "[DROOLS-5247] Add transformations management inside KiePMMLScorecardModelFactory generated sources. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dac2c626760e2d20b1e2a2a99520d3725e42bce", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1dac2c626760e2d20b1e2a2a99520d3725e42bce", "committedDate": "2020-06-30T15:22:16Z", "message": "[DROOLS-5247] Add transformations management inside KiePMMLTreeModelFactory generated sources. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c5ceb3a8161218545c36f9aa1a40f466f53b356e", "committedDate": "2020-07-01T07:44:01Z", "message": "[DROOLS-5461] Fixing build/test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjk3NzIy", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440697722", "createdAt": "2020-07-01T09:23:51Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyMzo1MVrOGreEaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyMzo1MVrOGreEaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNDYwMA==", "bodyText": "#2962 (comment)", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448234600", "createdAt": "2020-07-01T09:23:51Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter\n+\n+    private DerivedFieldFunctionUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    static Map<String, MethodDeclaration> getDerivedFieldsMethodMap(final List<DerivedField> derivedFields, final AtomicInteger arityCounter) {\n+        Map<String, MethodDeclaration> toReturn = new HashMap<>();\n+        derivedFields.forEach(derivedField ->\n+                                      toReturn.put(derivedField.getName().getValue(),\n+                                                   getDerivedFieldMethodDeclaration(derivedField, arityCounter)));\n+        return toReturn;\n+    }\n+\n+    static MethodDeclaration getDerivedFieldMethodDeclaration(final DerivedField derivedField, final AtomicInteger arityCounter) {\n+        final Expression expression = derivedField.getExpression();\n+        if (expression != null) {\n+            return getExpressionMethodDeclaration(expression, arityCounter);\n+        } else {\n+            // TODO {gcardosi}\n+            return new MethodDeclaration();\n+        }\n+    }\n+\n+    static MethodDeclaration getExpressionMethodDeclaration(final Expression expression, final AtomicInteger arityCounter) {\n+        int methodArity = arityCounter.addAndGet(1);\n+        if (expression instanceof Aggregate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjk5OTc3", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440699977", "createdAt": "2020-07-01T09:26:47Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNjo0N1rOGreK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNjo0N1rOGreK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNjI3Mg==", "bodyText": "see #2962 (comment)", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448236272", "createdAt": "2020-07-01T09:26:47Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelASTFactory.java", "diffHunk": "@@ -48,15 +49,26 @@ private KiePMMLTreeModelASTFactory() {\n     /**\n      * Returns the <code>KiePMMLDroolsAST</code> built out of the given parameters.\n      * It also <b>populate</b> the <b>fieldNameTypeNameMap</b> with mapping between original field' name and <b>original type/generated type</b> tupla\n+     *\n      * @param dataDictionary\n      * @param model\n      * @param fieldTypeMap\n+     * @param types\n      * @return\n      */\n-    public static KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+    public static KiePMMLDroolsAST getKiePMMLDroolsAST(final DataDictionary dataDictionary,\n+                                                       final TreeModel model,\n+                                                       final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap,\n+                                                       final List<KiePMMLDroolsType> types) {\n         logger.trace(\"getKiePMMLDroolsAST {} {}\", dataDictionary, model);\n         DATA_TYPE targetType = getTargetFieldType(dataDictionary, model);\n-        List<KiePMMLDroolsType> types = KiePMMLDataDictionaryASTFactory.factory(fieldTypeMap).declareTypes(dataDictionary);\n+//        List<KiePMMLDroolsType> types = fieldTypeMap.values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzAyNjUw", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440702650", "createdAt": "2020-07-01T09:30:24Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMDoyNVrOGreS6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMDoyNVrOGreS6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzODMxNQ==", "bodyText": "see #2962 (comment)\nThose are additional assertions - IMHO it does not make much sense to move them on a different test to only have the same computation made twice but verified with different assertions. BTW it is the way we have managed such situations until now", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448238315", "createdAt": "2020-07-01T09:30:25Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LinearRegressionSampleWithTransformationsTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.regression.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.data.Percentage;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class LinearRegressionSampleWithTransformationsTest extends AbstractPMMLRegressionTest {\n+\n+    private static final String MODEL_NAME = \"LinearRegressionSampleWithTransformations\";\n+    private static final String TARGET_FIELD = \"number_of_claims\";\n+    private static final String OUT_DER_AGE = \"out_der_age\";\n+    private static final String OUT_DER_SALARY = \"out_der_salary\";\n+    private static final String OUT_DER_CAR_LOCATION = \"out_der_car_location\";\n+    private static final String OUT_DER_CONSTANT = \"out_der_constant\";\n+    private static final String CONSTANT = \"constant\";\n+\n+\n+    private static final Percentage TOLERANCE_PERCENTAGE = Percentage.withPercentage(0.001);\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private double age;\n+    private double salary;\n+    private String car_location;\n+    private double expectedResult;\n+\n+    public LinearRegressionSampleWithTransformationsTest(double age,\n+                                                         double salary,\n+                                                         String car_location,\n+                                                         double expectedResult) {\n+        this.age = age;\n+        this.salary = salary;\n+        this.car_location = car_location;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {27, 34000, \"street\", 989.1},\n+                {49, 78000, \"carpark\", 1301.37},\n+                {57, 72000, \"street\", 1582.1},\n+                {61, 123000, \"carpark\", 1836.5699999999997},\n+                {18, 26000, \"street\", 845.1999999999999},\n+        });\n+    }\n+\n+    @Test\n+    public void testLogisticRegressionIrisData() {\n+        final Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(\"age\", age);\n+        inputData.put(\"salary\", salary);\n+        inputData.put(\"car_location\", car_location);\n+        PMML4Result pmml4Result = evaluate(pmmlRuntime, inputData, MODEL_NAME);\n+\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isNotNull();\n+        Assertions.assertThat((double) pmml4Result.getResultVariables().get(TARGET_FIELD)).isCloseTo(expectedResult, TOLERANCE_PERCENTAGE);\n+\n+        // TODO {gcardosi} TO BE FIXED WITH DROOLS-5453", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzAzNzA5", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440703709", "createdAt": "2020-07-01T09:31:48Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMTo0OFrOGreWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMTo0OFrOGreWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzOTEyNA==", "bodyText": "see #2962 (comment)\nSee previous answer", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448239124", "createdAt": "2020-07-01T09:31:48Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/java/org/kie/pmml/regression/tests/LogisticRegressionTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.regression.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.data.Percentage;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class LogisticRegressionTest extends AbstractPMMLRegressionTest {\n+\n+    private static final String MODEL_NAME = \"LogisticRegression\";\n+    private static final String TARGET_FIELD = \"class\";\n+    private static final String PROBABILITY_AUTHENTIC = \"probability(Authentic)\";\n+    private static final String PROBABILITY_COUNTERFEIT = \"probability(Counterfeit)\";\n+\n+    private static final Percentage TOLERANCE_PERCENTAGE = Percentage.withPercentage(0.001);\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private double variance;\n+    private double skewness;\n+    private double curtosis;\n+    private double entropy;\n+    private String expectedResult;\n+    private double expectedProbAuthentic;\n+    private double expectedProbCounterfeit;\n+\n+    public LogisticRegressionTest(double variance, double skewness, double curtosis,\n+                                  double petalWidth, String expectedResult,\n+                                  double expectedProbAuthentic,\n+                                  double expectedProbCounterfeit) {\n+        this.variance = variance;\n+        this.skewness = skewness;\n+        this.curtosis = curtosis;\n+        this.entropy = petalWidth;\n+        this.expectedResult = expectedResult;\n+        this.expectedProbAuthentic = expectedProbAuthentic;\n+        this.expectedProbCounterfeit = expectedProbCounterfeit;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {2.3, 6.9, 3.1, 5.1, \"Authentic\", 0.9999999999999969, 3.1271452352700172E-15},\n+                {1.2, 5.8, 2.6, 4.0, \"Authentic\", 0.9999999999977859, 2.214170674606705E-12},\n+                {1.2, 5.7, 3.0, 4.2, \"Authentic\", 0.9999999999990105, 9.89558801361823E-13},\n+                {0.2, 5.0, 3.3, 1.4, \"Authentic\", 0.9999999980426516, 1.9573484459863236E-9},\n+                {0.4, 5.4, 3.9, 1.3, \"Authentic\", 0.9999999997410439, 2.589560996869738E-10}\n+        });\n+    }\n+\n+    @Test\n+    public void testLogisticRegressionIrisData() {\n+        final Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(\"variance\", variance);\n+        inputData.put(\"skewness\", skewness);\n+        inputData.put(\"curtosis\", curtosis);\n+        inputData.put(\"entropy\", entropy);\n+        PMML4Result pmml4Result = evaluate(pmmlRuntime, inputData, MODEL_NAME);\n+\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isNotNull();\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isEqualTo(expectedResult);\n+\n+        // TODO {gcardosi} TO BE FIXED WITH DROOLS-5453", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzA0NDg4", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440704488", "createdAt": "2020-07-01T09:32:53Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMjo1M1rOGreYGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozMjo1M1rOGreYGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzOTY0Mw==", "bodyText": "see #2962 (comment)\nSee above answer", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448239643", "createdAt": "2020-07-01T09:32:53Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-tests/src/test/java/org/kie/pmml/models/drools/tree/tests/SampleMineTreeModelWithTransformationsTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.drools.tree.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class SampleMineTreeModelWithTransformationsTest extends AbstractPMMLTreeTest {\n+\n+    private static final String MODEL_NAME = \"SampleMineTreeModelWithTransformations\";\n+    private static final String TARGET_FIELD = \"decision\";\n+    private static final String OUT_DER_TEMPERATURE = \"out_der_temperature\";\n+    private static final String OUT_DER_HUMIDITY = \"out_der_humidity\";\n+    private static final String OUT_DER_CONSTANT = \"out_der_constant\";\n+    private static final String CONSTANT = \"constant\";\n+\n+\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private double temperature;\n+    private double humidity;\n+    private String expectedResult;\n+\n+    public SampleMineTreeModelWithTransformationsTest(double temperature, double humidity, String expectedResult) {\n+        this.temperature = temperature;\n+        this.humidity = humidity;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {30.0, 10.0, \"sunglasses\"},\n+                {5.0, 70.0, \"umbrella\"},\n+                {10.0, 15.0, \"nothing\"}\n+        });\n+    }\n+\n+    @Test\n+    public void testSetPredicateTree() {\n+        final Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(\"temperature\", temperature);\n+        inputData.put(\"humidity\", humidity);\n+        PMML4Result pmml4Result = evaluate(pmmlRuntime, inputData, MODEL_NAME);\n+\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isNotNull();\n+        Assertions.assertThat(pmml4Result.getResultVariables().get(TARGET_FIELD)).isEqualTo(expectedResult);\n+        // // TODO {gcardosi} TO BE FIXED WITH DROOLS-5453", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzA2OTY3", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440706967", "createdAt": "2020-07-01T09:36:18Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozNjoxOFrOGrefTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozNjoxOFrOGrefTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MTQ4NQ==", "bodyText": "see #2962 (comment)\nIn general, this map is populated in different methods. For this specific case, the map has to be returned by that method", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448241485", "createdAt": "2020-07-01T09:36:18Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java", "diffHunk": "@@ -48,6 +54,19 @@ public static PredicateASTFactoryData getPredicateASTFactoryData(Predicate predi\n         return new PredicateASTFactoryData(predicate, outputFields, rules, parentPath, currentRule, fieldTypeMap);\n     }\n \n+    public static Map<String, KiePMMLOriginalTypeGeneratedType> getFieldTypeMap(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> toReturn = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzExMDM4", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440711038", "createdAt": "2020-07-01T09:41:37Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MTozN1rOGrerWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MTozN1rOGrerWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDU2OQ==", "bodyText": "see #2962 (comment)\nIn the generated code there is a reference to that parameter. That reference must always be \"param1\".", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448244569", "createdAt": "2020-07-01T09:41:37Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzEyNTIx", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440712521", "createdAt": "2020-07-01T09:43:33Z", "commit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MzozM1rOGreveQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MzozM1rOGreveQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTYyNQ==", "bodyText": "see #2962 (comment)", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448245625", "createdAt": "2020-07-01T09:43:33Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/DerivedFieldFunctionUtils.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.MethodReferenceExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.TypeExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Aggregate;\n+import org.dmg.pmml.Apply;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DerivedField;\n+import org.dmg.pmml.Discretize;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldRef;\n+import org.dmg.pmml.Lag;\n+import org.dmg.pmml.MapValues;\n+import org.dmg.pmml.NormContinuous;\n+import org.dmg.pmml.NormDiscrete;\n+import org.dmg.pmml.TextIndex;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getFilteredKiePMMLNameValueExpression;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getMethodDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+/**\n+ * Class meant to provide <i>helper</i> methods to retrieve <code>Function</code> code-generators\n+ * out of <code>DerivedField</code>s\n+ */\n+public class DerivedFieldFunctionUtils {\n+\n+    static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"; // it is the first parameter\n+\n+    private DerivedFieldFunctionUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    static Map<String, MethodDeclaration> getDerivedFieldsMethodMap(final List<DerivedField> derivedFields, final AtomicInteger arityCounter) {\n+        Map<String, MethodDeclaration> toReturn = new HashMap<>();\n+        derivedFields.forEach(derivedField ->\n+                                      toReturn.put(derivedField.getName().getValue(),\n+                                                   getDerivedFieldMethodDeclaration(derivedField, arityCounter)));\n+        return toReturn;\n+    }\n+\n+    static MethodDeclaration getDerivedFieldMethodDeclaration(final DerivedField derivedField, final AtomicInteger arityCounter) {\n+        final Expression expression = derivedField.getExpression();\n+        if (expression != null) {\n+            return getExpressionMethodDeclaration(expression, arityCounter);\n+        } else {\n+            // TODO {gcardosi}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ceb3a8161218545c36f9aa1a40f466f53b356e"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "781b3d9d8d9ec7fae304efc9f63ddc1d331e7405", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/781b3d9d8d9ec7fae304efc9f63ddc1d331e7405", "committedDate": "2020-07-01T09:45:17Z", "message": "[DROOLS-5461] Fixing as per PR review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzMzMTg3", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440733187", "createdAt": "2020-07-01T10:10:18Z", "commit": {"oid": "781b3d9d8d9ec7fae304efc9f63ddc1d331e7405"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7288ba2b02404cf695a5b68dfb9dd067587dcb", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/9d7288ba2b02404cf695a5b68dfb9dd067587dcb", "committedDate": "2020-07-01T11:55:51Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5461\n\n# Conflicts:\n#\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/pmml/DMNTreePMMLTrustyImplTest.java\n#\tkie-dmn/kie-dmn-pmml-tests-parent/kie-dmn-pmml-tests/src/test/java/org/kie/dmn/pmml/DMNTreePMMLTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca", "committedDate": "2020-07-01T13:43:42Z", "message": "[DROOLS-5461] Fixing merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d6416dbcd54db05512e9db0f775ad203f92baf", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/03d6416dbcd54db05512e9db0f775ad203f92baf", "committedDate": "2020-07-01T13:54:36Z", "message": "[DROOLS-5461] Removing extensions data types from DATA_TYPE. Fixed test that used them"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwODkwNjk2", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440890696", "createdAt": "2020-07-01T13:53:44Z", "commit": {"oid": "bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1Mzo0NFrOGrm5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1Mzo0NFrOGrm5Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3OTIzNQ==", "bodyText": "These are extensions, I think we can remove them. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2966#discussion_r448379235", "createdAt": "2020-07-01T13:53:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/DATA_TYPE.java", "diffHunk": "@@ -44,11 +44,19 @@\n     DATE_DAYS_SINCE_1960(\"dateDaysSince[1960]\", Long.class),\n     DATE_DAYS_SINCE_1970(\"dateDaysSince[1970]\", Long.class),\n     DATE_DAYS_SINCE_1980(\"dateDaysSince[1980]\", Long.class),\n+    DATE_DAYS_SINCE_1990(\"x-dateDaysSince[1990]\", Long.class),\n+    DATE_DAYS_SINCE_2000(\"x-dateDaysSince[2000]\", Long.class),\n+    DATE_DAYS_SINCE_2010(\"x-dateDaysSince[2010]\", Long.class),\n+    DATE_DAYS_SINCE_2020(\"x-dateDaysSince[2020]\", Long.class),\n     TIME_SECONDS(\"timeSeconds\", Long.class),\n     DATE_TIME_SECONDS_SINCE_0(\"dateTimeSecondsSince[0]\", Long.class),\n     DATE_TIME_SECONDS_SINCE_1960(\"dateTimeSecondsSince[1960]\", Long.class),\n     DATE_TIME_SECONDS_SINCE_1970(\"dateTimeSecondsSince[1970]\", Long.class),\n-    DATE_TIME_SECONDS_SINCE_1980(\"dateTimeSecondsSince[1980]\", Long.class);\n+    DATE_TIME_SECONDS_SINCE_1980(\"dateTimeSecondsSince[1980]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_1990(\"x-dateTimeSecondsSince[1990]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2000(\"x-dateTimeSecondsSince[2000]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2010(\"x-dateTimeSecondsSince[2010]\", Long.class),\n+    DATE_TIME_SECONDS_SINCE_2020(\"x-dateTimeSecondsSince[2020]\", Long.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf756811ca4fd0087f7714dbe8fd2a5bc2a2d3ca"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff8afa75f2eba101bde232efc12b1b3dc7dea64a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ff8afa75f2eba101bde232efc12b1b3dc7dea64a", "committedDate": "2020-07-01T15:21:40Z", "message": "[DROOLS-5461] Removing unimplemented tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTk1NDU5", "url": "https://github.com/kiegroup/drools/pull/2966#pullrequestreview-440995459", "createdAt": "2020-07-01T15:50:41Z", "commit": {"oid": "ff8afa75f2eba101bde232efc12b1b3dc7dea64a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1932, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}