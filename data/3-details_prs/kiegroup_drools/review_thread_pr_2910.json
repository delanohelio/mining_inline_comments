{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODc0NTg5", "number": 2910, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0ODoyNlrOD-7Cfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1NzoyNFrOD_r4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA1NTk5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0ODoyNlrOGZUVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoxNzo1MVrOGZ1z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDc2OA==", "bodyText": "What is the reason of this change? Why only Scorecard should be different?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429200768", "createdAt": "2020-05-22T11:48:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "diffHunk": "@@ -40,7 +40,7 @@\n     REGRESSION_MODEL(\"RegressionModel\"),\n     RULESET_MODEL(\"RulesetModel\"),\n     SEQUENCE_MODEL(\"SequenceModel\"),\n-    SCORECARD_MODEL(\"ScorecardModel\"),\n+    SCORECARD_MODEL(\"Scorecard\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0OTIzNA==", "bodyText": "@danielezonca\nThose are the names as defined inside jpmml parser, indicated in the javadoc of the enum itself", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429749234", "createdAt": "2020-05-25T06:17:51Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "diffHunk": "@@ -40,7 +40,7 @@\n     REGRESSION_MODEL(\"RegressionModel\"),\n     RULESET_MODEL(\"RulesetModel\"),\n     SEQUENCE_MODEL(\"SequenceModel\"),\n-    SCORECARD_MODEL(\"ScorecardModel\"),\n+    SCORECARD_MODEL(\"Scorecard\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDc2OA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA2NjM4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1MjozOVrOGZUcGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoyOToxOVrOGaeSEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjQ1Ng==", "bodyText": "Is there any reason why you are removing _?\nIs this package name visible/known by the user?\nIf it is an implementation detail as I expect I would prefer to avoid name clash so I propose to replace this method as\n        return modelName.replace(\" \", \"_\").replace(\"_\", \"__\");\nWdyt?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429202456", "createdAt": "2020-05-22T11:52:39Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NTYwMQ==", "bodyText": "@danielezonca\nAll those \"generated\" names (package name, class name) should be hidden to final user.\nI do not think such modification is needed, and anyway would not resolve a possible clashing issue if user uses something like \"A B\" and \"A_B\" at the same time (with your modification both will be transformed to \"A__B\")", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429755601", "createdAt": "2020-05-25T06:39:42Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjQ1Ng=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxMjMwNw==", "bodyText": "@danielezonca\nI've created those two tickets\nhttps://issues.redhat.com/browse/DROOLS-5376\nhttps://issues.redhat.com/browse/DROOLS-5367\nthat should cover the potential issue you are referring to", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430412307", "createdAt": "2020-05-26T13:29:19Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjQ1Ng=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA2ODY4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1MzozM1rOGZUdgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MDozMFrOGZ2N3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjgxNg==", "bodyText": "Same consideration as above\n        return upperCasedInput.replace(\".\", \"___\").replace(\"_\", \"__\").replace(\" \", \"_\");", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429202816", "createdAt": "2020-05-22T11:53:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();\n+    }\n+\n+    /**\n+     * Convert the given <code>String</code> in a valid class name (i.e. no dots, no spaces, first letter upper case)\n+     * @param input\n+     * @return\n+     */\n+    public static String getSanitizedClassName(String input) {\n+        String upperCasedInput = input.substring(0, 1).toUpperCase() + input.substring(1);\n+        return upperCasedInput.replace(\".\", \"\").replace(\"_\", \"\").replace(\" \", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NTg3MA==", "bodyText": "@danielezonca\nAs above, I do not think it is necessary", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429755870", "createdAt": "2020-05-25T06:40:30Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();\n+    }\n+\n+    /**\n+     * Convert the given <code>String</code> in a valid class name (i.e. no dots, no spaces, first letter upper case)\n+     * @param input\n+     * @return\n+     */\n+    public static String getSanitizedClassName(String input) {\n+        String upperCasedInput = input.substring(0, 1).toUpperCase() + input.substring(1);\n+        return upperCasedInput.replace(\".\", \"\").replace(\"_\", \"\").replace(\" \", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjgxNg=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA3MTg5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLFactoryModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1NDo1NlrOGZUfgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyMjoxMVrOGZ14PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMzMyOA==", "bodyText": "Can you please clarify? Is this a factory? Why does it extend KiePMMLModel?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429203328", "createdAt": "2020-05-22T11:54:56Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLFactoryModel.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+/**\n+ * KIE representation of PMML model\n+ */\n+public class KiePMMLFactoryModel extends KiePMMLModel implements HasSourcesMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MDMzMw==", "bodyText": "@danielezonca\nKiePMMLFactory model is the model used to generate the \"Factories\" used at runtime to retrieve models from kjar.\nTo avoid proliferation of identical interfaces/subinterfaces, I declare only \"KiePMMLModel\". I'll add explanation to javadoc", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429750333", "createdAt": "2020-05-25T06:22:11Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLFactoryModel.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+/**\n+ * KIE representation of PMML model\n+ */\n+public class KiePMMLFactoryModel extends KiePMMLModel implements HasSourcesMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMzMyOA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA4MjI2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1ODo0NFrOGZUlpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1NDo0NVrOGZ2hsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDkwMg==", "bodyText": "Is there any specific reason why you get the resource from the context classloader instead of JavaParserUtils.class.getResourceAsStream?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429204902", "createdAt": "2020-05-22T11:58:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.io.InputStream;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+\n+public class JavaParserUtils {\n+\n+    private JavaParserUtils() {\n+    }\n+\n+    public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";\n+\n+    public static CompilationUnit getFromFileName(String fileName) {\n+        try {\n+            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MDk0Nw==", "bodyText": "@danielezonca\nJavaParserUtils.class.getResourceAsStream throws an exception if invoked from maven plugin - originally I wrote as you suggest but then I find out that exception.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429760947", "createdAt": "2020-05-25T06:54:45Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.io.InputStream;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+\n+public class JavaParserUtils {\n+\n+    private JavaParserUtils() {\n+    }\n+\n+    public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";\n+\n+    public static CompilationUnit getFromFileName(String fileName) {\n+        try {\n+            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDkwMg=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA5NDQzOnYy", "diffSide": "RIGHT", "path": "kie-pmml/src/test/java/org/kie/pmml/pmml_4_2/DroolsAbstractPMMLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowMzoyN1rOGZUtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowMzoyN1rOGZUtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNjc5NA==", "bodyText": "To be removed or at least moved to a different path :)", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429206794", "createdAt": "2020-05-22T12:03:27Z", "author": {"login": "danielezonca"}, "path": "kie-pmml/src/test/java/org/kie/pmml/pmml_4_2/DroolsAbstractPMMLTest.java", "diffHunk": "@@ -72,12 +73,47 @@\n     protected DataSource<PMMLRequestData> data;\n     protected DataSource<PMML4Result> resultData;\n     protected DataSource<PMML4Data> pmmlData;\n-\n-    private KieSession kSession;\n     protected KieBase kbase;\n+    private KieSession kSession;\n \n     public DroolsAbstractPMMLTest() {\n         super();\n+        Properties props = System.getProperties();\n+        props.setProperty(\"drools.dump.dir\", \"/home/gcardosi/NotBackedUp/old_pmml_dump_dir\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA5OTEwOnYy", "diffSide": "LEFT", "path": "kie-pmml-new/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowNTozM1rOGZUwPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzozNzozMVrOGaen_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNzYxMw==", "bodyText": "Why have you dropped kie-pmml-integration-tests?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429207613", "createdAt": "2020-05-22T12:05:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/pom.xml", "diffHunk": "@@ -39,170 +39,17 @@\n     <module>kie-pmml-models-archetype</module>\n     <module>kie-pmml-models-drools-archetype</module>\n     <module>kie-pmml-models</module>\n-    <module>kie-pmml-integration-tests</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxNzkxOA==", "bodyText": "@danielezonca\nCompletely replaced by the integration tests written by @jiripetrlik", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430417918", "createdAt": "2020-05-26T13:37:31Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/pom.xml", "diffHunk": "@@ -39,170 +39,17 @@\n     <module>kie-pmml-models-archetype</module>\n     <module>kie-pmml-models-drools-archetype</module>\n     <module>kie-pmml-models</module>\n-    <module>kie-pmml-integration-tests</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNzYxMw=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzExMTY3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxMDoyNVrOGZU4Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzozODo1NVrOGaeruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwOTYxNQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429209615", "createdAt": "2020-05-22T12:10:25Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "diffHunk": "@@ -117,7 +117,8 @@ public KiePMMLRegressionModelFactoryTest(String modelName, double tableIntercept\n \n     @Test\n     public void getKiePMMLRegressionModelTest() throws IOException, IllegalAccessException, InstantiationException {\n-        KiePMMLRegressionModel retrieved = getKiePMMLRegressionModel(dataDictionary, regressionModel);\n+//        assertNotNull(getKiePMMLRegressionModelClasses(dataDictionary, regressionModel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxODg3NQ==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430418875", "createdAt": "2020-05-26T13:38:55Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "diffHunk": "@@ -117,7 +117,8 @@ public KiePMMLRegressionModelFactoryTest(String modelName, double tableIntercept\n \n     @Test\n     public void getKiePMMLRegressionModelTest() throws IOException, IllegalAccessException, InstantiationException {\n-        KiePMMLRegressionModel retrieved = getKiePMMLRegressionModel(dataDictionary, regressionModel);\n+//        assertNotNull(getKiePMMLRegressionModelClasses(dataDictionary, regressionModel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwOTYxNQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEyMTkxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNDozM1rOGZU-Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowMzozOVrOGZ2udA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMTIwNw==", "bodyText": "I would prefer to replace ifPresent with map and then add orElseThrow with an error message so if the template will change an error is raised.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429211207", "createdAt": "2020-05-22T12:14:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.io.InputStream;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+\n+public class JavaParserUtils {\n+\n+    private JavaParserUtils() {\n+    }\n+\n+    public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";\n+\n+    public static CompilationUnit getFromFileName(String fileName) {\n+        try {\n+            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);\n+            return StaticJavaParser.parse(resource);\n+        } catch (Exception e) {\n+            throw new KiePMMLInternalException(String.format(\"Failed to parse %s due to %s\", fileName, e.getMessage()), e);\n+        }\n+    }\n+\n+    public static void setModelName(String modelName, ClassOrInterfaceDeclaration modelTemplate) {\n+        modelTemplate.getFieldByName(\"MODEL_NAME\").ifPresent(fieldDeclaration -> fieldDeclaration.getVariable(0).setInitializer(new StringLiteralExpr(modelName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2NDIxMg==", "bodyText": "@danielezonca\nReplaced with OrElseThrow (same semantic)\n(update)\nCompletely removed. Turns out it is not needed at all", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429764212", "createdAt": "2020-05-25T07:03:39Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.io.InputStream;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+\n+public class JavaParserUtils {\n+\n+    private JavaParserUtils() {\n+    }\n+\n+    public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";\n+\n+    public static CompilationUnit getFromFileName(String fileName) {\n+        try {\n+            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);\n+            return StaticJavaParser.parse(resource);\n+        } catch (Exception e) {\n+            throw new KiePMMLInternalException(String.format(\"Failed to parse %s due to %s\", fileName, e.getMessage()), e);\n+        }\n+    }\n+\n+    public static void setModelName(String modelName, ClassOrInterfaceDeclaration modelTemplate) {\n+        modelTemplate.getFieldByName(\"MODEL_NAME\").ifPresent(fieldDeclaration -> fieldDeclaration.getVariable(0).setInitializer(new StringLiteralExpr(modelName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMTIwNw=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEzMDA3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNzoyM1rOGZVDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNzoyM1rOGZVDIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjQ0OA==", "bodyText": "Please remove it or add an if condition logger.isTraceEnabled before", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429212448", "createdAt": "2020-05-22T12:17:23Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java", "diffHunk": "@@ -53,11 +55,22 @@ public PMML_MODEL getPMMLModelType() {\n \n     @Override\n     public KiePMMLRegressionModel getKiePMMLModel(DataDictionary dataDictionary, RegressionModel model, Object kBuilder) {\n-        logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n+        logger.trace(\"getKiePMMLModel {} {} {}\", dataDictionary, model, kBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEzMDMzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNzoyOVrOGZVDQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNzoyOVrOGZVDQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjQ4Mw==", "bodyText": "Please remove it or add an if condition logger.isTraceEnabled before", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429212483", "createdAt": "2020-05-22T12:17:29Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java", "diffHunk": "@@ -53,11 +55,22 @@ public PMML_MODEL getPMMLModelType() {\n \n     @Override\n     public KiePMMLRegressionModel getKiePMMLModel(DataDictionary dataDictionary, RegressionModel model, Object kBuilder) {\n-        logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n+        logger.trace(\"getKiePMMLModel {} {} {}\", dataDictionary, model, kBuilder);\n         validate(dataDictionary, model);\n         try {\n-            return KiePMMLRegressionModelFactory.getKiePMMLRegressionModel(dataDictionary, model);\n+            return KiePMMLRegressionModelFactory.getKiePMMLRegressionModelClasses(dataDictionary, model);\n         } catch (IOException | IllegalAccessException | InstantiationException e) {\n+            throw new KiePMMLException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public KiePMMLRegressionModel getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, RegressionModel model, Object kBuilder) {\n+        logger.trace(\"getKiePMMLModelFromPlugin {} {} {}\", dataDictionary, model, kBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEzMjYzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxODoxNVrOGZVEsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0OTo0NFrOGafKDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjg1MA==", "bodyText": "Why do you need this dependency with Regression compiler that is not a Drools based model?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429212850", "createdAt": "2020-05-22T12:18:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/pom.xml", "diffHunk": "@@ -15,6 +15,10 @@\n   <description>PMML Regression Compiler</description>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-internal</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjYzNg==", "bodyText": "@danielezonca\nremoved", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430426636", "createdAt": "2020-05-26T13:49:44Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/pom.xml", "diffHunk": "@@ -15,6 +15,10 @@\n   <description>PMML Regression Compiler</description>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-internal</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjg1MA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEzNzk1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMDoxOVrOGZVH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMDoxOVrOGZVH4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzY2Nw==", "bodyText": "Can you please add a isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429213667", "createdAt": "2020-05-22T12:20:19Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEzODIxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMDoyNlrOGZVIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMDoyNlrOGZVIEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzcxNA==", "bodyText": "Can you please add a isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429213714", "createdAt": "2020-05-22T12:20:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {} {} {}\", dataDictionary, model, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEzOTk0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMDo1OFrOGZVJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0NjoyMlrOGafAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzk1OA==", "bodyText": "Can you please create a ticket for this so we will not forget?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429213958", "createdAt": "2020-05-22T12:20:58Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public Map<String, String> getKiePMMLDroolsModelSourcesMap(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, String packageName) {\n+        // TODO {gcardosi} to implement\n+        throw new RuntimeException(\"Not implemented, yet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDE5Mw==", "bodyText": "@danielezonca\nhttps://issues.redhat.com/browse/DROOLS-5381", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430424193", "createdAt": "2020-05-26T13:46:22Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public Map<String, String> getKiePMMLDroolsModelSourcesMap(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, String packageName) {\n+        // TODO {gcardosi} to implement\n+        throw new RuntimeException(\"Not implemented, yet\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzk1OA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE0MTMzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-tests/src/test/java/org/kie/pmml/models/drools/scorecard/tests/CompoundNestedPredicateScorecardTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMTozMVrOGZVJ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1MTowM1rOGafOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNDE4MQ==", "bodyText": "Are you sure about this change?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429214181", "createdAt": "2020-05-22T12:21:31Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-tests/src/test/java/org/kie/pmml/models/drools/scorecard/tests/CompoundNestedPredicateScorecardTest.java", "diffHunk": "@@ -66,15 +66,15 @@ public static void setupClass() {\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][]{\n                 { -50, \"classB\", -8, \"characteristic2ReasonCode\", null },\n-                { -50, \"classD\", -8, \"characteristic2ReasonCode\", null },\n-                { -9, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { 25.4, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { -7, \"classA\", -8, \"characteristic2ReasonCode\", null },\n-                { -7, \"classC\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 5, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 7.4, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 12, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { 12, \"classD\", 75, \"characteristic1ReasonCode\", null },\n+//                { -50, \"classD\", -8, \"characteristic2ReasonCode\", null },\n+//                { -9, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { 25.4, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { -7, \"classA\", -8, \"characteristic2ReasonCode\", null },\n+//                { -7, \"classC\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 5, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 7.4, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 12, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { 12, \"classD\", 75, \"characteristic1ReasonCode\", null },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNzczMA==", "bodyText": "@danielezonca\nreverted", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430427730", "createdAt": "2020-05-26T13:51:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-tests/src/test/java/org/kie/pmml/models/drools/scorecard/tests/CompoundNestedPredicateScorecardTest.java", "diffHunk": "@@ -66,15 +66,15 @@ public static void setupClass() {\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][]{\n                 { -50, \"classB\", -8, \"characteristic2ReasonCode\", null },\n-                { -50, \"classD\", -8, \"characteristic2ReasonCode\", null },\n-                { -9, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { 25.4, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { -7, \"classA\", -8, \"characteristic2ReasonCode\", null },\n-                { -7, \"classC\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 5, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 7.4, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 12, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { 12, \"classD\", 75, \"characteristic1ReasonCode\", null },\n+//                { -50, \"classD\", -8, \"characteristic2ReasonCode\", null },\n+//                { -9, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { 25.4, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { -7, \"classA\", -8, \"characteristic2ReasonCode\", null },\n+//                { -7, \"classC\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 5, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 7.4, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 12, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { 12, \"classD\", 75, \"characteristic1ReasonCode\", null },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNDE4MQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE1MTM2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLAgendaListenerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNToyMVrOGZVQFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNToyMVrOGZVQFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNTc2Nw==", "bodyText": "Can you please add isDebugEnabled check where it is missing?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429215767", "createdAt": "2020-05-22T12:25:21Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLAgendaListenerUtils.java", "diffHunk": "@@ -33,33 +33,51 @@\n \n     public static AgendaEventListener getAgendaEventListener(final Logger logger) {\n         return new AgendaEventListener() {\n-            public void matchCancelled(MatchCancelledEvent event) {/*Not used */}\n+            public void matchCancelled(MatchCancelledEvent event) { if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE1NDI1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNjoyNlrOGZVR1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1MTo0NlrOGafQXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjIxNA==", "bodyText": "Comment to be removed?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216214", "createdAt": "2020-05-22T12:26:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrFactory.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     public static final String PMML4_RESULT = \"PMML4Result\";\n     public static final String PMML4_RESULT_IDENTIFIER = \"$pmml4Result\";\n-    public static final String OUTPUTFIELDS_MAP = \"Map<String, Object>\";\n+    public static final String OUTPUTFIELDS_MAP = \"Map\";/*\"Map<String, Object>\";*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODI1NA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430428254", "createdAt": "2020-05-26T13:51:46Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrFactory.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     public static final String PMML4_RESULT = \"PMML4Result\";\n     public static final String PMML4_RESULT_IDENTIFIER = \"$pmml4Result\";\n-    public static final String OUTPUTFIELDS_MAP = \"Map<String, Object>\";\n+    public static final String OUTPUTFIELDS_MAP = \"Map\";/*\"Map<String, Object>\";*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjIxNA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE1NTc4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNzowNFrOGZVSwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNzowNFrOGZVSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjQ0OQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216449", "createdAt": "2020-05-22T12:27:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE1NjA4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNzoxMVrOGZVS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyNzoxMVrOGZVS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjQ5OQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216499", "createdAt": "2020-05-22T12:27:11Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);\n+        List<KiePMMLModel> models = new ArrayList<>();\n+        knowledgeBase.getKiePackages().forEach(kpkg -> {\n+            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n+            if (pmmlPackage != null) {\n+                models.addAll(pmmlPackage.getAllModels().values());\n+            }\n+        });\n+        return models;\n+    }\n+\n+    public static Optional<KiePMMLModel> getModel(final KieBase knowledgeBase, String modelName) {\n+        logger.trace(\"getModels {} {}\", knowledgeBase, modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE1ODg4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyODoxN1rOGZVUsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzozODowNlrOGZ3nDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjk0NQ==", "bodyText": "This code is @jomarko approved \ud83d\ude04", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216945", "createdAt": "2020-05-22T12:28:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);\n+        List<KiePMMLModel> models = new ArrayList<>();\n+        knowledgeBase.getKiePackages().forEach(kpkg -> {\n+            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n+            if (pmmlPackage != null) {\n+                models.addAll(pmmlPackage.getAllModels().values());\n+            }\n+        });\n+        return models;\n+    }\n+\n+    public static Optional<KiePMMLModel> getModel(final KieBase knowledgeBase, String modelName) {\n+        logger.trace(\"getModels {} {}\", knowledgeBase, modelName);\n+        return getModels(knowledgeBase)\n+                .stream()\n+                .filter(model -> Objects.equals(modelName, model.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3ODcwMg==", "bodyText": "Great!", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429778702", "createdAt": "2020-05-25T07:38:06Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);\n+        List<KiePMMLModel> models = new ArrayList<>();\n+        knowledgeBase.getKiePackages().forEach(kpkg -> {\n+            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n+            if (pmmlPackage != null) {\n+                models.addAll(pmmlPackage.getAllModels().values());\n+            }\n+        });\n+        return models;\n+    }\n+\n+    public static Optional<KiePMMLModel> getModel(final KieBase knowledgeBase, String modelName) {\n+        logger.trace(\"getModels {} {}\", knowledgeBase, modelName);\n+        return getModels(knowledgeBase)\n+                .stream()\n+                .filter(model -> Objects.equals(modelName, model.getName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjk0NQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE2MTE4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyOToxMlrOGZVWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyOToxMlrOGZVWHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzMwOQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429217309", "createdAt": "2020-05-22T12:29:12Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE2MTc3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyOToyNVrOGZVWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyOToyNVrOGZVWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzQwMw==", "bodyText": "Can you please add isDebugEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429217403", "createdAt": "2020-05-22T12:29:25Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);\n+        return KnowledgeBaseUtils.getModel(knowledgeBase, modelName);\n     }\n \n     @Override\n-    public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n+    public PMML4Result evaluate(String modelName, PMMLContext context) {\n+        logger.debug(\"evaluate {} {}\", modelName, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE2NzcyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjozMTo0MVrOGZVaLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1Mjo1NFrOGafTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODM0OA==", "bodyText": "Do you really need to use the internal interface instead of the public one? After a quick look it seems to me not needed", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429218348", "createdAt": "2020-05-22T12:31:41Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyOTEwNQ==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430429105", "createdAt": "2020-05-26T13:52:54Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODM0OA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE2OTg5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjozMjoyOVrOGZVbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1NjoyMFrOGafdtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODY4Nw==", "bodyText": "I would prefer to raise an exception if the model executor is not available. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429218687", "createdAt": "2020-05-22T12:32:29Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);\n+        return KnowledgeBaseUtils.getModel(knowledgeBase, modelName);\n     }\n \n     @Override\n-    public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n+    public PMML4Result evaluate(String modelName, PMMLContext context) {\n+        logger.debug(\"evaluate {} {}\", modelName, context);\n+        KiePMMLModel toEvaluate = getModel(modelName).orElseThrow(() -> new KiePMMLException(\"Failed to retrieve model with name \" + modelName));\n+        return evaluate(toEvaluate, context);\n+    }\n+\n+    protected PMML4Result evaluate(KiePMMLModel model, PMMLContext context) {\n         logger.debug(\"evaluate {} {}\", model, context);\n         addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n-        return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n+        return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(knowledgeBase, model, context) : new PMML4Result();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMTY3MA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430431670", "createdAt": "2020-05-26T13:56:20Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);\n+        return KnowledgeBaseUtils.getModel(knowledgeBase, modelName);\n     }\n \n     @Override\n-    public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n+    public PMML4Result evaluate(String modelName, PMMLContext context) {\n+        logger.debug(\"evaluate {} {}\", modelName, context);\n+        KiePMMLModel toEvaluate = getModel(modelName).orElseThrow(() -> new KiePMMLException(\"Failed to retrieve model with name \" + modelName));\n+        return evaluate(toEvaluate, context);\n+    }\n+\n+    protected PMML4Result evaluate(KiePMMLModel model, PMMLContext context) {\n         logger.debug(\"evaluate {} {}\", model, context);\n         addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n-        return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n+        return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(knowledgeBase, model, context) : new PMML4Result();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODY4Nw=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE3MjIyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/executor/PMMLModelExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjozMzoxNVrOGZVc6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1NzowMlrOGaff0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTA0OA==", "bodyText": "Can you mark all the parameters as final (or remove final to knowledgeBase one :) )?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429219048", "createdAt": "2020-05-22T12:33:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/executor/PMMLModelExecutor.java", "diffHunk": "@@ -31,11 +32,12 @@\n \n     /**\n      * Evaluate the model, given the context\n+     * @param knowledgeBase The <code>KieBase</code> we are currently working on.\n+     * It may be <code>null</code> for testing purpose for <b>not drools-related</b> models\n      * @param model the model to evaluate\n      * @param context the context with all the input variables\n-     * @param releaseId Used to indirectly retrieve same instance of kiecontainer\n      * @return the result of the evaluation\n      * @throws KiePMMLInternalException\n      */\n-    PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId);\n+    PMML4Result evaluate(final KieBase knowledgeBase, KiePMMLModel model, PMMLContext context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMjIwOA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430432208", "createdAt": "2020-05-26T13:57:02Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/executor/PMMLModelExecutor.java", "diffHunk": "@@ -31,11 +32,12 @@\n \n     /**\n      * Evaluate the model, given the context\n+     * @param knowledgeBase The <code>KieBase</code> we are currently working on.\n+     * It may be <code>null</code> for testing purpose for <b>not drools-related</b> models\n      * @param model the model to evaluate\n      * @param context the context with all the input variables\n-     * @param releaseId Used to indirectly retrieve same instance of kiecontainer\n      * @return the result of the evaluation\n      * @throws KiePMMLInternalException\n      */\n-    PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId);\n+    PMML4Result evaluate(final KieBase knowledgeBase, KiePMMLModel model, PMMLContext context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTA0OA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE3NDgyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjozNDoxN1rOGZVemA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1ODo0NVrOGafkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTQ4MA==", "bodyText": "I would like to preserve cases. It reduces the possibility of name clashes.\nIn any case I think you should use the package sanitizer utils here too to be sure to have it coherent with the rest of the code", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429219480", "createdAt": "2020-05-22T12:34:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -96,16 +127,57 @@ protected void addModels(KnowledgeBuilderImpl kbuilderImpl, List<KiePMMLModel> t\n      * @throws ExternalException if any other kind of <code>Exception</code> has been thrown during execution\n      */\n     protected List<KiePMMLModel> getKiePMMLModelsFromResource(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            final Class<? extends KiePMMLModelFactory> aClass = (Class<? extends KiePMMLModelFactory>) Class.forName(packageName + \".\" + factoryClassName);\n+            return aClass.newInstance().getKiePMMLModels();\n+        } catch (ClassNotFoundException e) {\n+            logger.info(String.format(\"%s not found in kjar, going to compile model\", factoryClassName));\n+        } catch (Exception e) {\n+            throw new KiePMMLException(\"Exception while instantiating \" + factoryClassName, e);\n+        }\n         PMMLCompiler pmmlCompiler = kbuilderImpl.getCachedOrCreate(PMML_COMPILER_CACHE_KEY, () -> getCompiler(kbuilderImpl));\n-        // TODO {gcardosi} replace with dynamically generated one\n-        logger.debug(\"getKiePMMLModelsFromResource releaseId {}\", RELEASE_ID);\n         try {\n-            return pmmlCompiler.getModels(resource.getInputStream(), RELEASE_ID);\n+            return pmmlCompiler.getModels(resource.getInputStream(), kbuilderImpl);\n         } catch (IOException e) {\n             throw new ExternalException(\"ExternalException\", e);\n         }\n     }\n \n+    /**\n+     * @param kbuilderImpl\n+     * @param resource\n+     * @return\n+     */\n+    protected List<KiePMMLModel> getKiePMMLModelsFromResourceFromPlugin(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        PMMLCompiler pmmlCompiler = kbuilderImpl.getCachedOrCreate(PMML_COMPILER_CACHE_KEY, () -> getCompiler(kbuilderImpl));\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            return pmmlCompiler.getModelsFromPlugin(factoryClassName, packageName, resource.getInputStream(), kbuilderImpl);\n+        } catch (IOException e) {\n+            throw new ExternalException(\"ExternalException\", e);\n+        }\n+    }\n+\n+    /**\n+     * Returns an array where the first item is the <b>factory class</b> name and the second item is the <b>package</b> name,\n+     * built starting from the given <code>Resource</code>\n+     * @param resource\n+     * @return\n+     */\n+    private String[] getFactoryClassNamePackageName(Resource resource) {\n+        String sourcePath = resource.getSourcePath();\n+        String fileName = sourcePath.substring(sourcePath.lastIndexOf('/') + 1);\n+        fileName = fileName.replace(\".pmml\", \"\");\n+        String packageName = fileName.toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMzQ1Mg==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430433452", "createdAt": "2020-05-26T13:58:45Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -96,16 +127,57 @@ protected void addModels(KnowledgeBuilderImpl kbuilderImpl, List<KiePMMLModel> t\n      * @throws ExternalException if any other kind of <code>Exception</code> has been thrown during execution\n      */\n     protected List<KiePMMLModel> getKiePMMLModelsFromResource(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            final Class<? extends KiePMMLModelFactory> aClass = (Class<? extends KiePMMLModelFactory>) Class.forName(packageName + \".\" + factoryClassName);\n+            return aClass.newInstance().getKiePMMLModels();\n+        } catch (ClassNotFoundException e) {\n+            logger.info(String.format(\"%s not found in kjar, going to compile model\", factoryClassName));\n+        } catch (Exception e) {\n+            throw new KiePMMLException(\"Exception while instantiating \" + factoryClassName, e);\n+        }\n         PMMLCompiler pmmlCompiler = kbuilderImpl.getCachedOrCreate(PMML_COMPILER_CACHE_KEY, () -> getCompiler(kbuilderImpl));\n-        // TODO {gcardosi} replace with dynamically generated one\n-        logger.debug(\"getKiePMMLModelsFromResource releaseId {}\", RELEASE_ID);\n         try {\n-            return pmmlCompiler.getModels(resource.getInputStream(), RELEASE_ID);\n+            return pmmlCompiler.getModels(resource.getInputStream(), kbuilderImpl);\n         } catch (IOException e) {\n             throw new ExternalException(\"ExternalException\", e);\n         }\n     }\n \n+    /**\n+     * @param kbuilderImpl\n+     * @param resource\n+     * @return\n+     */\n+    protected List<KiePMMLModel> getKiePMMLModelsFromResourceFromPlugin(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        PMMLCompiler pmmlCompiler = kbuilderImpl.getCachedOrCreate(PMML_COMPILER_CACHE_KEY, () -> getCompiler(kbuilderImpl));\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            return pmmlCompiler.getModelsFromPlugin(factoryClassName, packageName, resource.getInputStream(), kbuilderImpl);\n+        } catch (IOException e) {\n+            throw new ExternalException(\"ExternalException\", e);\n+        }\n+    }\n+\n+    /**\n+     * Returns an array where the first item is the <b>factory class</b> name and the second item is the <b>package</b> name,\n+     * built starting from the given <code>Resource</code>\n+     * @param resource\n+     * @return\n+     */\n+    private String[] getFactoryClassNamePackageName(Resource resource) {\n+        String sourcePath = resource.getSourcePath();\n+        String fileName = sourcePath.substring(sourcePath.lastIndexOf('/') + 1);\n+        fileName = fileName.replace(\".pmml\", \"\");\n+        String packageName = fileName.toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTQ4MA=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE5MDc1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0MDowMlrOGZVoiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowNTowM1rOGZ2wfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMjAyNw==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429222027", "createdAt": "2020-05-22T12:40:02Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -41,7 +49,7 @@\n \n     @Override\n     public List<KiePMMLModel> getModels(InputStream inputStream, Object kbuilder) {\n-        logger.trace(\"getModels {}\", inputStream);\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2NDczMg==", "bodyText": "@danielezonca\nSee previous answer: check on the current log level is already implemented by logging framework itself - not needed here", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429764732", "createdAt": "2020-05-25T07:05:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -41,7 +49,7 @@\n \n     @Override\n     public List<KiePMMLModel> getModels(InputStream inputStream, Object kbuilder) {\n-        logger.trace(\"getModels {}\", inputStream);\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMjAyNw=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzE5MTAxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0MDowN1rOGZVorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0MDowN1rOGZVorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMjA2Mg==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429222062", "createdAt": "2020-05-22T12:40:07Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -54,6 +62,42 @@\n         }\n     }\n \n+    @Override\n+    public List<KiePMMLModel> getModelsFromPlugin(String factoryClassName, String packageName, InputStream inputStream, Object kbuilder) {\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzIxNDY5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFactoryFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0Nzo0NlrOGZV23w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1MjoyOFrOGZ2eUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNTY5NQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429225695", "createdAt": "2020-05-22T12:47:46Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFactoryFactory.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFromFileName;\n+\n+/**\n+ * This class is meant to create source code for PMML file-specific <b>Factory</b>\n+ */\n+public class KiePMMLFactoryFactory {\n+\n+    private static final String KIE_PMML_MODEL_FACTORY_TEMPLATE_JAVA = \"KiePMMLModelFactoryTemplate.tmpl\";\n+    private static final String KIE_PMML_MODEL_FACTORY_TEMPLATE = \"KiePMMLModelFactoryTemplate\";\n+    private static final String KIE_PMML_MODELS_FIELD = \"KIE_PMML_MODELS\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLFactoryFactory.class.getName());\n+\n+    private KiePMMLFactoryFactory() {\n+        // Avoid instantiation\n+    }\n+\n+    public static Map<String, String> getFactorySourceCode(String factoryClassName, String packageName, Set<String> generatedClasses) {\n+        logger.trace(\"getFactorySourceCode {} {} {}\", factoryClassName, packageName, generatedClasses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MDA4Mw==", "bodyText": "@danielezonca\nThat check is already implemented (behind the scene) in the call itself (otherwise it would have no sense to invoke a \"trace\" method vs debug vs info).\nSuch check is eventually needed if using \"String.format\" - that execute formatting regardless of the log level - or anyway whenever an operation is invoked before actually evaluation of log level\nprivate void formatAndLog(int level, String format, Object arg1, Object arg2) {\n        if (!isLevelEnabled(level)) {\n            return;\n        }\n        FormattingTuple tp = MessageFormatter.format(format, arg1, arg2);\n        log(level, tp.getMessage(), tp.getThrowable());\n    }", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429760083", "createdAt": "2020-05-25T06:52:28Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFactoryFactory.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFromFileName;\n+\n+/**\n+ * This class is meant to create source code for PMML file-specific <b>Factory</b>\n+ */\n+public class KiePMMLFactoryFactory {\n+\n+    private static final String KIE_PMML_MODEL_FACTORY_TEMPLATE_JAVA = \"KiePMMLModelFactoryTemplate.tmpl\";\n+    private static final String KIE_PMML_MODEL_FACTORY_TEMPLATE = \"KiePMMLModelFactoryTemplate\";\n+    private static final String KIE_PMML_MODELS_FIELD = \"KIE_PMML_MODELS\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLFactoryFactory.class.getName());\n+\n+    private KiePMMLFactoryFactory() {\n+        // Avoid instantiation\n+    }\n+\n+    public static Map<String, String> getFactorySourceCode(String factoryClassName, String packageName, Set<String> generatedClasses) {\n+        logger.trace(\"getFactorySourceCode {} {} {}\", factoryClassName, packageName, generatedClasses);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNTY5NQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzIyMjMyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo1MDoxNFrOGZV7eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDowMjozOFrOGafv8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjg3Mg==", "bodyText": "I think we should improve this interface: I would like to have at least a marker interface as return value and unify knowledgeBase behavior. Wdyt?\nIf you agree, can you please create a ticket to track it?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429226872", "createdAt": "2020-05-22T12:50:14Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -60,7 +60,24 @@ public String getTargetField() {\n         return Collections.unmodifiableMap(missingValueReplacementMap);\n     }\n \n-    public abstract Object evaluate(Map<String, Object> requestData);\n+    /**\n+     * Method to retrieve the <b>package</b> name to be used inside kiebase/package attribute of\n+     * kmodule.xml and to use for package creation inside PMMLAssemblerService\n+     * By default returns the package name of the current instance\n+     * To be eventually overridden.\n+     * @return\n+     */\n+    public String getKModulePackageName() {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    /**\n+     * @param knowledgeBase the knowledgeBase we are working on. Add as <code>Object</code> to avoid direct dependency. It is needed only by <b>Drools-dependent</b>\n+     * models, so it may be <b>ignored</b> by others\n+     * @param requestData\n+     * @return\n+     */\n+    public abstract Object evaluate(final Object knowledgeBase, Map<String, Object> requestData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NDE5NA==", "bodyText": "@danielezonca\nI've already planned other refactoring. After them, I'll see if it is still needed/feasible.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429754194", "createdAt": "2020-05-25T06:35:10Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -60,7 +60,24 @@ public String getTargetField() {\n         return Collections.unmodifiableMap(missingValueReplacementMap);\n     }\n \n-    public abstract Object evaluate(Map<String, Object> requestData);\n+    /**\n+     * Method to retrieve the <b>package</b> name to be used inside kiebase/package attribute of\n+     * kmodule.xml and to use for package creation inside PMMLAssemblerService\n+     * By default returns the package name of the current instance\n+     * To be eventually overridden.\n+     * @return\n+     */\n+    public String getKModulePackageName() {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    /**\n+     * @param knowledgeBase the knowledgeBase we are working on. Add as <code>Object</code> to avoid direct dependency. It is needed only by <b>Drools-dependent</b>\n+     * models, so it may be <b>ignored</b> by others\n+     * @param requestData\n+     * @return\n+     */\n+    public abstract Object evaluate(final Object knowledgeBase, Map<String, Object> requestData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjg3Mg=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxODczMw==", "bodyText": "Ok can you please create a ticket to track it? Something like \"Investigate how to improve....\"", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430418733", "createdAt": "2020-05-26T13:38:42Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -60,7 +60,24 @@ public String getTargetField() {\n         return Collections.unmodifiableMap(missingValueReplacementMap);\n     }\n \n-    public abstract Object evaluate(Map<String, Object> requestData);\n+    /**\n+     * Method to retrieve the <b>package</b> name to be used inside kiebase/package attribute of\n+     * kmodule.xml and to use for package creation inside PMMLAssemblerService\n+     * By default returns the package name of the current instance\n+     * To be eventually overridden.\n+     * @return\n+     */\n+    public String getKModulePackageName() {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    /**\n+     * @param knowledgeBase the knowledgeBase we are working on. Add as <code>Object</code> to avoid direct dependency. It is needed only by <b>Drools-dependent</b>\n+     * models, so it may be <b>ignored</b> by others\n+     * @param requestData\n+     * @return\n+     */\n+    public abstract Object evaluate(final Object knowledgeBase, Map<String, Object> requestData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjg3Mg=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzNjMzNw==", "bodyText": "@danielezonca\nhttps://issues.redhat.com/browse/DROOLS-5382", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430436337", "createdAt": "2020-05-26T14:02:38Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -60,7 +60,24 @@ public String getTargetField() {\n         return Collections.unmodifiableMap(missingValueReplacementMap);\n     }\n \n-    public abstract Object evaluate(Map<String, Object> requestData);\n+    /**\n+     * Method to retrieve the <b>package</b> name to be used inside kiebase/package attribute of\n+     * kmodule.xml and to use for package creation inside PMMLAssemblerService\n+     * By default returns the package name of the current instance\n+     * To be eventually overridden.\n+     * @return\n+     */\n+    public String getKModulePackageName() {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    /**\n+     * @param knowledgeBase the knowledgeBase we are working on. Add as <code>Object</code> to avoid direct dependency. It is needed only by <b>Drools-dependent</b>\n+     * models, so it may be <b>ignored</b> by others\n+     * @param requestData\n+     * @return\n+     */\n+    public abstract Object evaluate(final Object knowledgeBase, Map<String, Object> requestData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjg3Mg=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI1NzYwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowMjowNlrOGZWRYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzozNjoxNFrOGZ3j4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMjQ4MQ==", "bodyText": "If I have understood correctly here we expect to have some models with source map and some not.\nWhy? Can you please clarify?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429232481", "createdAt": "2020-05-22T13:02:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -54,6 +62,42 @@\n         }\n     }\n \n+    @Override\n+    public List<KiePMMLModel> getModelsFromPlugin(String factoryClassName, String packageName, InputStream inputStream, Object kbuilder) {\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);\n+        try {\n+            PMML commonPMMLModel = KiePMMLUtil.load(inputStream);\n+            Set<String> expectedClasses = commonPMMLModel.getModels()\n+                    .stream()\n+                    .map(model -> packageName + \".\" + getSanitizedClassName(model.getModelName()))\n+                    .collect(Collectors.toSet());\n+            List<KiePMMLModel> toReturn = getModelsFromPlugin(packageName, commonPMMLModel, kbuilder);\n+            Set<String> generatedClasses = new HashSet<>();\n+            toReturn.forEach(kiePMMLModel -> {\n+                if (kiePMMLModel instanceof HasSourcesMap) {\n+                    generatedClasses.addAll(((HasSourcesMap) kiePMMLModel).getSourcesMap().keySet());\n+                } else {\n+                    generatedClasses.add(kiePMMLModel.getClass().getName());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Nzg5MA==", "bodyText": "@danielezonca\nReplaced with Exception.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429777890", "createdAt": "2020-05-25T07:36:14Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -54,6 +62,42 @@\n         }\n     }\n \n+    @Override\n+    public List<KiePMMLModel> getModelsFromPlugin(String factoryClassName, String packageName, InputStream inputStream, Object kbuilder) {\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);\n+        try {\n+            PMML commonPMMLModel = KiePMMLUtil.load(inputStream);\n+            Set<String> expectedClasses = commonPMMLModel.getModels()\n+                    .stream()\n+                    .map(model -> packageName + \".\" + getSanitizedClassName(model.getModelName()))\n+                    .collect(Collectors.toSet());\n+            List<KiePMMLModel> toReturn = getModelsFromPlugin(packageName, commonPMMLModel, kbuilder);\n+            Set<String> generatedClasses = new HashSet<>();\n+            toReturn.forEach(kiePMMLModel -> {\n+                if (kiePMMLModel instanceof HasSourcesMap) {\n+                    generatedClasses.addAll(((HasSourcesMap) kiePMMLModel).getSourcesMap().keySet());\n+                } else {\n+                    generatedClasses.add(kiePMMLModel.getClass().getName());\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMjQ4MQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI2NDg2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowNDozM1rOGZWV3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDowMzoyOFrOGafybg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMzYzMQ==", "bodyText": "This will probably not work with native compilation. Can you please create a ticket to track it so we will verify?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429233631", "createdAt": "2020-05-22T13:04:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -96,16 +127,57 @@ protected void addModels(KnowledgeBuilderImpl kbuilderImpl, List<KiePMMLModel> t\n      * @throws ExternalException if any other kind of <code>Exception</code> has been thrown during execution\n      */\n     protected List<KiePMMLModel> getKiePMMLModelsFromResource(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            final Class<? extends KiePMMLModelFactory> aClass = (Class<? extends KiePMMLModelFactory>) Class.forName(packageName + \".\" + factoryClassName);\n+            return aClass.newInstance().getKiePMMLModels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzNjk3NA==", "bodyText": "@danielezonca\nThis will be managed inside\nhttps://issues.redhat.com/browse/DROOLS-5373", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430436974", "createdAt": "2020-05-26T14:03:28Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -96,16 +127,57 @@ protected void addModels(KnowledgeBuilderImpl kbuilderImpl, List<KiePMMLModel> t\n      * @throws ExternalException if any other kind of <code>Exception</code> has been thrown during execution\n      */\n     protected List<KiePMMLModel> getKiePMMLModelsFromResource(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            final Class<? extends KiePMMLModelFactory> aClass = (Class<? extends KiePMMLModelFactory>) Class.forName(packageName + \".\" + factoryClassName);\n+            return aClass.newInstance().getKiePMMLModels();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMzYzMQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI2OTEwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModelWithSources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowNjowMFrOGZWYXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDowNDowMVrOGaf0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDI2OQ==", "bodyText": "typo drool -> Drools", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429234269", "createdAt": "2020-05-22T13:06:00Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModelWithSources.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.commons.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+/**\n+ * KIE representation of PMML model that use <b>drool</b> for implementation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzNzM3OA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430437378", "createdAt": "2020-05-26T14:04:01Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModelWithSources.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.commons.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+/**\n+ * KIE representation of PMML model that use <b>drool</b> for implementation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDI2OQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI3ODUzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowOToyOFrOGZWehg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDowNDo1MFrOGaf2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNTg0Ng==", "bodyText": "I think we should remove this listener and maybe add it only if log level is debug or similar. Wdyt? Otherwise we will generate tons of log messages", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429235846", "createdAt": "2020-05-22T13:09:28Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -36,29 +50,65 @@\n  */\n public class KiePMMLSessionUtils {\n \n-    private final PackageDescr packageDescr;\n-    private final KieSession kieSession;\n-\n-    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n-        this.packageDescr = packageDescr;\n-        kieSession = new KieHelper()\n-                .addContent(packageDescr)\n-                .build(ExecutableModelProject.class)\n-                .newKieSession();\n-        kieSession.insert(new KiePMMLStatusHolder());\n-        kieSession.insert(pmml4Result);\n-        kieSession.setGlobal(PMML4_RESULT_IDENTIFIER, pmml4Result);\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLSessionUtils.class.getName());\n+\n+    private static final CommandFactoryServiceImpl COMMAND_FACTORY_SERVICE = new CommandFactoryServiceImpl();\n+    private final StatelessKieSession kieSession;\n+    private final String modelName;\n+    private final String packageName;\n+    private final List<Command> commands;\n+\n+    private KiePMMLSessionUtils(final InternalKnowledgeBase knowledgeBase, final String modelName, final PMML4Result pmml4Result) {\n+        this.modelName = modelName;\n+        packageName = getSanitizedPackageName(modelName);\n+        kieSession = getKieSession(knowledgeBase);\n+        kieSession.addEventListener(new RuleRuntimeEventListener() {\n+            private final Logger logger = LoggerFactory.getLogger(RuleRuntimeEventListener.class);\n+\n+            @Override\n+            public void objectInserted(ObjectInsertedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            @Override\n+            public void objectUpdated(ObjectUpdatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            @Override\n+            public void objectDeleted(ObjectDeletedEvent event) {\n+                logger.info(event.toString());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzNzk4MQ==", "bodyText": "@danielezonca\nremoved", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430437981", "createdAt": "2020-05-26T14:04:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -36,29 +50,65 @@\n  */\n public class KiePMMLSessionUtils {\n \n-    private final PackageDescr packageDescr;\n-    private final KieSession kieSession;\n-\n-    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n-        this.packageDescr = packageDescr;\n-        kieSession = new KieHelper()\n-                .addContent(packageDescr)\n-                .build(ExecutableModelProject.class)\n-                .newKieSession();\n-        kieSession.insert(new KiePMMLStatusHolder());\n-        kieSession.insert(pmml4Result);\n-        kieSession.setGlobal(PMML4_RESULT_IDENTIFIER, pmml4Result);\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLSessionUtils.class.getName());\n+\n+    private static final CommandFactoryServiceImpl COMMAND_FACTORY_SERVICE = new CommandFactoryServiceImpl();\n+    private final StatelessKieSession kieSession;\n+    private final String modelName;\n+    private final String packageName;\n+    private final List<Command> commands;\n+\n+    private KiePMMLSessionUtils(final InternalKnowledgeBase knowledgeBase, final String modelName, final PMML4Result pmml4Result) {\n+        this.modelName = modelName;\n+        packageName = getSanitizedPackageName(modelName);\n+        kieSession = getKieSession(knowledgeBase);\n+        kieSession.addEventListener(new RuleRuntimeEventListener() {\n+            private final Logger logger = LoggerFactory.getLogger(RuleRuntimeEventListener.class);\n+\n+            @Override\n+            public void objectInserted(ObjectInsertedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            @Override\n+            public void objectUpdated(ObjectUpdatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            @Override\n+            public void objectDeleted(ObjectDeletedEvent event) {\n+                logger.info(event.toString());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNTg0Ng=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI4NDY0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMToyNFrOGZWiOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDowNTozNFrOGaf4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjc5NQ==", "bodyText": "Can you verify if it is possible to use KieBase instead of InternalKnowledgeBase?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429236795", "createdAt": "2020-05-22T13:11:24Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -90,16 +140,16 @@ private void addObjectsToSession(final Map<String, Object> unwrappedInputParams,\n      * @param globalName its global name\n      */\n     private void insertObjectInSession(final Object toInsert, final String globalName) {\n-        kieSession.insert(toInsert);\n-        kieSession.setGlobal(globalName, toInsert);\n+        commands.add(COMMAND_FACTORY_SERVICE.newInsert(toInsert));\n+        commands.add(COMMAND_FACTORY_SERVICE.newSetGlobal(globalName, toInsert));\n     }\n \n     public static class Builder {\n \n         private KiePMMLSessionUtils toBuild;\n \n-        private Builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n-            this.toBuild = new KiePMMLSessionUtils(packageDescr, pmml4Result);\n+        private Builder(final InternalKnowledgeBase knowledgeBase, final String modelName, final PMML4Result pmml4Result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzODU2NA==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430438564", "createdAt": "2020-05-26T14:05:34Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -90,16 +140,16 @@ private void addObjectsToSession(final Map<String, Object> unwrappedInputParams,\n      * @param globalName its global name\n      */\n     private void insertObjectInSession(final Object toInsert, final String globalName) {\n-        kieSession.insert(toInsert);\n-        kieSession.setGlobal(globalName, toInsert);\n+        commands.add(COMMAND_FACTORY_SERVICE.newInsert(toInsert));\n+        commands.add(COMMAND_FACTORY_SERVICE.newSetGlobal(globalName, toInsert));\n     }\n \n     public static class Builder {\n \n         private KiePMMLSessionUtils toBuild;\n \n-        private Builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n-            this.toBuild = new KiePMMLSessionUtils(packageDescr, pmml4Result);\n+        private Builder(final InternalKnowledgeBase knowledgeBase, final String modelName, final PMML4Result pmml4Result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjc5NQ=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5MjQwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMzo0OFrOGZWm8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMzo0OFrOGZWm8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODAwMQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238001", "createdAt": "2020-05-22T13:13:48Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -44,17 +43,28 @@\n     private KiePMMLTreeModelFactory() {\n     }\n \n-    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n         logger.trace(\"getKiePMMLTreeModel {}\", model);\n         String name = model.getModelName();\n         Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n-        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        final KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n-        final PackageDescr baseDescr = getBaseDescr(kiePMMLDroolsAST, name.toLowerCase());\n+        final List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         return KiePMMLTreeModel.builder(name, Collections.emptyList(), MINING_FUNCTION.byName(model.getMiningFunction().value()), model.getAlgorithmName())\n-                .withPackageDescr(baseDescr)\n+                .withOutputFields(outputFields)\n                 .withFieldTypeMap(fieldTypeMap)\n                 .withTargetField(targetFieldName.orElse(null))\n                 .build();\n     }\n+\n+    /**\n+     * This method returns a <code>KiePMMLDroolsAST</code> out of the given <code>DataDictionary</code> and <code>TreeModel</code>.\n+     * <b>It also populate the given <code>Map</code> that has to be used for final <code>KiePMMLTreeModel</code></b>\n+     * @param dataDictionary\n+     * @param model\n+     * @param fieldTypeMap\n+     * @return\n+     */\n+    public static KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5MjgwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMzo1NlrOGZWnMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMzo1NlrOGZWnMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODA2Ng==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238066", "createdAt": "2020-05-22T13:13:56Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -44,17 +43,28 @@\n     private KiePMMLTreeModelFactory() {\n     }\n \n-    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n         logger.trace(\"getKiePMMLTreeModel {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5NTE3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNDo0MFrOGZWooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNDo0MFrOGZWooQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODQzMw==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238433", "createdAt": "2020-05-22T13:14:40Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -44,24 +63,116 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelFactory.class.getName());\n \n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA = \"KiePMMLScorecardModelTemplate.tmpl\";\n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE = \"KiePMMLScorecardModelTemplate\";\n+\n     private KiePMMLScorecardModelFactory() {\n         // Avoid instantiation\n     }\n \n-    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model) {\n+    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) throws IOException, IllegalAccessException, InstantiationException {\n         logger.trace(\"getKiePMMLScorecardModel {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5NTQ1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNDo0NlrOGZWo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNDo0NlrOGZWo1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODQ4NQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238485", "createdAt": "2020-05-22T13:14:46Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -44,24 +63,116 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelFactory.class.getName());\n \n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA = \"KiePMMLScorecardModelTemplate.tmpl\";\n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE = \"KiePMMLScorecardModelTemplate\";\n+\n     private KiePMMLScorecardModelFactory() {\n         // Avoid instantiation\n     }\n \n-    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model) {\n+    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) throws IOException, IllegalAccessException, InstantiationException {\n         logger.trace(\"getKiePMMLScorecardModel {}\", model);\n-        String name = model.getModelName();\n-        Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n-        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        final KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n-        String packageName = name.replace(\" \", \"_\").toLowerCase();\n-        final PackageDescr baseDescr = getBaseDescr(kiePMMLDroolsAST, packageName);\n-        final List<KiePMMLOutputField> outputFields = getOutputFields(model);\n-        return KiePMMLScorecardModel.builder(name, Collections.emptyList(), MINING_FUNCTION.byName(model.getMiningFunction().value()))\n-                .withOutputFields(outputFields)\n-                .withPackageDescr(baseDescr)\n-                .withFieldTypeMap(fieldTypeMap)\n-                .withTargetField(targetFieldName.orElse(null))\n-                .build();\n+        String className = getSanitizedClassName(model.getModelName());\n+        String packageName = getSanitizedPackageName(className);\n+        Map<String, String> sourcesMap = getKiePMMLScorecardModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+        String fullClassName = packageName + \".\" + className;\n+        final Map<String, Class<?>> compiledClasses = KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n+        return (KiePMMLScorecardModel) compiledClasses.get(fullClassName).newInstance();\n+    }\n+\n+    public static Map<String, String> getKiePMMLScorecardModelSourcesMap(final DataDictionary dataDictionary, final Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException {\n+        logger.trace(\"getKiePMMLScorecardModelSourcesMap {} {} {}\", dataDictionary, model, packageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5NTkwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNDo1N1rOGZWpJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNDo1N1rOGZWpJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODU2Nw==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238567", "createdAt": "2020-05-22T13:14:57Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -44,24 +63,116 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelFactory.class.getName());\n \n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA = \"KiePMMLScorecardModelTemplate.tmpl\";\n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE = \"KiePMMLScorecardModelTemplate\";\n+\n     private KiePMMLScorecardModelFactory() {\n         // Avoid instantiation\n     }\n \n-    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model) {\n+    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) throws IOException, IllegalAccessException, InstantiationException {\n         logger.trace(\"getKiePMMLScorecardModel {}\", model);\n-        String name = model.getModelName();\n-        Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n-        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        final KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n-        String packageName = name.replace(\" \", \"_\").toLowerCase();\n-        final PackageDescr baseDescr = getBaseDescr(kiePMMLDroolsAST, packageName);\n-        final List<KiePMMLOutputField> outputFields = getOutputFields(model);\n-        return KiePMMLScorecardModel.builder(name, Collections.emptyList(), MINING_FUNCTION.byName(model.getMiningFunction().value()))\n-                .withOutputFields(outputFields)\n-                .withPackageDescr(baseDescr)\n-                .withFieldTypeMap(fieldTypeMap)\n-                .withTargetField(targetFieldName.orElse(null))\n-                .build();\n+        String className = getSanitizedClassName(model.getModelName());\n+        String packageName = getSanitizedPackageName(className);\n+        Map<String, String> sourcesMap = getKiePMMLScorecardModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+        String fullClassName = packageName + \".\" + className;\n+        final Map<String, Class<?>> compiledClasses = KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n+        return (KiePMMLScorecardModel) compiledClasses.get(fullClassName).newInstance();\n+    }\n+\n+    public static Map<String, String> getKiePMMLScorecardModelSourcesMap(final DataDictionary dataDictionary, final Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException {\n+        logger.trace(\"getKiePMMLScorecardModelSourcesMap {} {} {}\", dataDictionary, model, packageName);\n+        String className = getSanitizedClassName(model.getModelName());\n+        String targetField = getTargetFieldName(dataDictionary, model).orElse(null);\n+        List<KiePMMLOutputField> outputFields = getOutputFields(model);\n+        CompilationUnit templateCU = getFromFileName(KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA);\n+        CompilationUnit cloneCU = templateCU.clone();\n+        cloneCU.setPackageDeclaration(packageName);\n+        ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(KIE_PMML_SCORECARD_MODEL_TEMPLATE)\n+                .orElseThrow(() -> new RuntimeException(MAIN_CLASS_NOT_FOUND));\n+        modelTemplate.setName(className);\n+        setModelName(className, modelTemplate);\n+        MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(model.getMiningFunction().value());\n+        final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(\"Missing default constructor in ClassOrInterfaceDeclaration %s \", modelTemplate.getName())));\n+        setConstructor(model, constructorDeclaration, modelTemplate.getName(), targetField, miningFunction);\n+        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addFieldTypeMapPopulation(constructorDeclaration.getBody(), fieldTypeMap);\n+        Map<String, String> toReturn = new HashMap<>();\n+        String fullClassName = packageName + \".\" + className;\n+        toReturn.put(fullClassName, cloneCU.toString());\n+        return toReturn;\n+    }\n+\n+    /**\n+     * This method returns a <code>KiePMMLDroolsAST</code> out of the given <code>DataDictionary</code> and <code>Scorecard</code>.\n+     * <b>It also populate the given <code>Map</code> that has to be used for final <code>KiePMMLScorecardModel</code></b>\n+     * @param dataDictionary\n+     * @param model\n+     * @param fieldTypeMap\n+     * @return\n+     */\n+    public static KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5NzQzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNToyN1rOGZWqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNToyN1rOGZWqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODgwOQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238809", "createdAt": "2020-05-22T13:15:27Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModel.java", "diffHunk": "@@ -46,31 +52,29 @@\n \n     private static final AgendaEventListener agendaEventListener = getAgendaEventListener(logger);\n \n-    protected PackageDescr packageDescr;\n-\n-    protected List<KiePMMLOutputField> outputFields;\n+    protected List<KiePMMLOutputField> outputFields = new ArrayList<>();\n \n     /**\n      * Map between the original field name and the generated type.\n      */\n-    protected Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    protected Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n \n     protected KiePMMLDroolsModel(String name, List<KiePMMLExtension> extensions) {\n         super(name, extensions);\n     }\n \n-    public PackageDescr getPackageDescr() {\n-        return packageDescr;\n-    }\n-\n     public Map<String, KiePMMLOriginalTypeGeneratedType> getFieldTypeMap() {\n         return fieldTypeMap;\n     }\n \n     @Override\n-    public Object evaluate(Map<String, Object> requestData) {\n+    public Object evaluate(final Object knowledgeBase, Map<String, Object> requestData) {\n+        logger.trace(\"evaluate {} {}\", knowledgeBase, requestData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMwMjM0OnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNzowMFrOGZWtLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzozMzozNlrOGaedow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzOTU5Ng==", "bodyText": "Can you please revert code formatting?\nIt is really hard to find the few line changed.\nAs alternative, can you please highlight where to look at?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429239596", "createdAt": "2020-05-22T13:17:00Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -82,7 +82,6 @@\n import org.kie.internal.builder.ResourceChangeSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxNTI2Nw==", "bodyText": "@danielezonca\nlines 215-223\nline 231", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430415267", "createdAt": "2020-05-26T13:33:36Z", "author": {"login": "gitgabrio"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -82,7 +82,6 @@\n import org.kie.internal.builder.ResourceChangeSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzOTU5Ng=="}, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTAwODA1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/HasSourcesMap.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0NjozN1rOGafBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyNTo1MlrOGa-tDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDM0Mw==", "bodyText": "Maybe SourceMapFactory would be better name for this interface.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430424343", "createdAt": "2020-05-26T13:46:37Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/HasSourcesMap.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface used to define if a given <code>KiePmmlModel</code> contains a <b>sources map</b>\n+ */\n+public interface HasSourcesMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NTMwOQ==", "bodyText": "@jiripetrlik\nTo be honest, this interface is used to tell that a class contains SourcesMap, that's why I named it that way. Does this make sense?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430445309", "createdAt": "2020-05-26T14:14:33Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/HasSourcesMap.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface used to define if a given <code>KiePmmlModel</code> contains a <b>sources map</b>\n+ */\n+public interface HasSourcesMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDM0Mw=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MzUwMQ==", "bodyText": "@gitgabrio\nOk, understand.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430943501", "createdAt": "2020-05-27T08:25:52Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/HasSourcesMap.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface used to define if a given <code>KiePmmlModel</code> contains a <b>sources map</b>\n+ */\n+public interface HasSourcesMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDM0Mw=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTAxODg3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0ODo1MVrOGafHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyNjoxNVrOGa-tzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjAzMQ==", "bodyText": "Does it make sense to use if here? Is saved time worth of lower readability?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430426031", "createdAt": "2020-05-26T13:48:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -44,7 +44,9 @@\n         Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n         providers.forEachRemaining(toReturn::add);\n         logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n-        toReturn.forEach(provider -> logger.trace(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        if (logger.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1MTU1Mw==", "bodyText": "@jiripetrlik This has been introduced following similar comments from @danielezonca\nTBH, I like to avoid method executions that are completely wasted: in this situation the list would be looped even if no output would actually be logged.\nI think in both point of view (readability vs performance) there is not a big difference, so my personal approach (for this situation) would be to avoid wasting resource (this approach would be consistent with similar cases where the difference may be relevant).\nTo cut a long story short: I think most of those \"tracing\" will be removed, in the future, when the code is more stable/tested", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430451553", "createdAt": "2020-05-26T14:22:53Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -44,7 +44,9 @@\n         Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n         providers.forEachRemaining(toReturn::add);\n         logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n-        toReturn.forEach(provider -> logger.trace(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        if (logger.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjAzMQ=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MzY5NQ==", "bodyText": "In that case I have no problem with it.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430943695", "createdAt": "2020-05-27T08:26:15Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -44,7 +44,9 @@\n         Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n         providers.forEachRemaining(toReturn::add);\n         logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n-        toReturn.forEach(provider -> logger.trace(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        if (logger.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjAzMQ=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTAzMzY4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1MjowMFrOGafRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyNzo0MVrOGa-xSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODQyMw==", "bodyText": "Would it be possible to split long lines in this file? It is very hard to read.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430428423", "createdAt": "2020-05-26T13:52:00Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java", "diffHunk": "@@ -35,13 +46,43 @@\n     @Override\n     public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {\n         logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n-        E toReturn = getKiePMMLDroolsModel(dataDictionary, model);\n         if (!(kBuilder instanceof KnowledgeBuilder)) {\n             throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n         }\n-        ((KnowledgeBuilderImpl) kBuilder).addPackage(toReturn.getPackageDescr());\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+        E toReturn = getKiePMMLDroolsModel(dataDictionary, model, fieldTypeMap);\n+        PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, toReturn.getKModulePackageName());\n+        ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n         return toReturn;\n     }\n \n-    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model);\n+    @Override\n+    public E getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, T model, Object kBuilder) {\n+        logger.trace(\"getKiePMMLModelFromPlugin {} {} {}\", dataDictionary, model, kBuilder);\n+        if (!(kBuilder instanceof KnowledgeBuilder)) {\n+            throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n+        }\n+        try {\n+            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+            KiePMMLDroolsAST kiePMMLDroolsAST =  getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+            Map<String, String> sourcesMap = getKiePMMLDroolsModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+            E toReturn = (E) new KiePMMLDroolsModelWithSources(model.getModelName(), packageName, sourcesMap);\n+            PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, packageName);\n+            ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n+            return toReturn;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract Map<String, String> getKiePMMLDroolsModelSourcesMap(final DataDictionary dataDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NDEyOA==", "bodyText": "@jiripetrlik\nSorry for long lines. But since we are talking of that: do you know - by chance - if there is a way to improve our formatting style? This long-line issue happen a lot of times, but IMHO the auto-format should resolve all this kind of situations", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430454128", "createdAt": "2020-05-26T14:26:09Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java", "diffHunk": "@@ -35,13 +46,43 @@\n     @Override\n     public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {\n         logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n-        E toReturn = getKiePMMLDroolsModel(dataDictionary, model);\n         if (!(kBuilder instanceof KnowledgeBuilder)) {\n             throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n         }\n-        ((KnowledgeBuilderImpl) kBuilder).addPackage(toReturn.getPackageDescr());\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+        E toReturn = getKiePMMLDroolsModel(dataDictionary, model, fieldTypeMap);\n+        PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, toReturn.getKModulePackageName());\n+        ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n         return toReturn;\n     }\n \n-    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model);\n+    @Override\n+    public E getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, T model, Object kBuilder) {\n+        logger.trace(\"getKiePMMLModelFromPlugin {} {} {}\", dataDictionary, model, kBuilder);\n+        if (!(kBuilder instanceof KnowledgeBuilder)) {\n+            throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n+        }\n+        try {\n+            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+            KiePMMLDroolsAST kiePMMLDroolsAST =  getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+            Map<String, String> sourcesMap = getKiePMMLDroolsModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+            E toReturn = (E) new KiePMMLDroolsModelWithSources(model.getModelName(), packageName, sourcesMap);\n+            PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, packageName);\n+            ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n+            return toReturn;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract Map<String, String> getKiePMMLDroolsModelSourcesMap(final DataDictionary dataDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODQyMw=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NDU4NA==", "bodyText": "I usually check that I don't have long lines in the code visually. It is usually a matter of few second to check that I did not add any long lines. Unfortunately I'm not aware of any automatic tools for this.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430944584", "createdAt": "2020-05-27T08:27:41Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java", "diffHunk": "@@ -35,13 +46,43 @@\n     @Override\n     public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {\n         logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n-        E toReturn = getKiePMMLDroolsModel(dataDictionary, model);\n         if (!(kBuilder instanceof KnowledgeBuilder)) {\n             throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n         }\n-        ((KnowledgeBuilderImpl) kBuilder).addPackage(toReturn.getPackageDescr());\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+        E toReturn = getKiePMMLDroolsModel(dataDictionary, model, fieldTypeMap);\n+        PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, toReturn.getKModulePackageName());\n+        ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n         return toReturn;\n     }\n \n-    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model);\n+    @Override\n+    public E getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, T model, Object kBuilder) {\n+        logger.trace(\"getKiePMMLModelFromPlugin {} {} {}\", dataDictionary, model, kBuilder);\n+        if (!(kBuilder instanceof KnowledgeBuilder)) {\n+            throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n+        }\n+        try {\n+            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+            KiePMMLDroolsAST kiePMMLDroolsAST =  getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+            Map<String, String> sourcesMap = getKiePMMLDroolsModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+            E toReturn = (E) new KiePMMLDroolsModelWithSources(model.getModelName(), packageName, sourcesMap);\n+            PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, packageName);\n+            ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n+            return toReturn;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract Map<String, String> getKiePMMLDroolsModelSourcesMap(final DataDictionary dataDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODQyMw=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTA1ODUwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1NzoyNFrOGafg1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODozMToxN1rOGa-5_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMjQ3MA==", "bodyText": "Does it make sense to change license header format in this PR? I would suggest to do a separate PR with format changes if needed because it is not related with DROOLS-5258 and it harder to review the code.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430432470", "createdAt": "2020-05-26T13:57:24Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProvider.java", "diffHunk": "@@ -1,41 +1,63 @@\n /*\n-* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n-*\n-* Licensed under the Apache License, Version 2.0 (the \"License\");\n-* you may not use this file except in compliance with the License.\n-* You may obtain a copy of the License at\n-*\n-*     http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing, software\n-* distributed under the License is distributed on an \"AS IS\" BASIS,\n-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-* See the License for the specific language governing permissions and\n-* limitations under the License.\n-*/\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjE2Ng==", "bodyText": "@jiripetrlik\nSorry, I can not find the difference. I've configured my IDE to automatically add this header with a template long time ago, and never changed it since then.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430456166", "createdAt": "2020-05-26T14:28:47Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProvider.java", "diffHunk": "@@ -1,41 +1,63 @@\n /*\n-* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n-*\n-* Licensed under the Apache License, Version 2.0 (the \"License\");\n-* you may not use this file except in compliance with the License.\n-* You may obtain a copy of the License at\n-*\n-*     http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing, software\n-* distributed under the License is distributed on an \"AS IS\" BASIS,\n-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-* See the License for the specific language governing permissions and\n-* limitations under the License.\n-*/\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMjQ3MA=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NjgxNA==", "bodyText": "It is probably not important if you add header in your format. But I think it would be good to avoid of editing headers which are already present in the code. It makes review much harder if there is loads of unrelated formatting changes in the old code.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430946814", "createdAt": "2020-05-27T08:31:17Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProvider.java", "diffHunk": "@@ -1,41 +1,63 @@\n /*\n-* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n-*\n-* Licensed under the Apache License, Version 2.0 (the \"License\");\n-* you may not use this file except in compliance with the License.\n-* You may obtain a copy of the License at\n-*\n-*     http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing, software\n-* distributed under the License is distributed on an \"AS IS\" BASIS,\n-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-* See the License for the specific language governing permissions and\n-* limitations under the License.\n-*/\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMjQ3MA=="}, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2537, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}