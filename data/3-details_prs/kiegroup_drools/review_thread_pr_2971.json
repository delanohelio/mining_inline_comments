{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzY2NDI1", "number": 2971, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyMTowNlrOEK0SDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyMToyMFrOEK0SYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc3ODA0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyMTowNlrOGsEs1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyNTo0M1rOGsE3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzU0MA==", "bodyText": "Maybe you forget to describe something here?", "url": "https://github.com/kiegroup/drools/pull/2971#discussion_r448867540", "createdAt": "2020-07-02T09:21:06Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.stmt.Statement;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldName;\n+import org.dmg.pmml.FieldRef;\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.pmml.compiler.commons.testutils.CodegenTestUtils.commonValidateCompilation;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.METHOD_NAME_TEMPLATE;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+public class ExpressionFunctionUtilsTest {\n+\n+    @Test\n+    public void getConstantExpressionMethodDeclaration() {\n+        Constant constant = new Constant();\n+        constant.setDataType(DataType.DOUBLE);\n+        constant.setValue(34.6);\n+        int methodArity = new Random().nextInt(20);\n+        String methodName = String.format(METHOD_NAME_TEMPLATE, constant.getClass().getSimpleName(), methodArity);\n+        MethodDeclaration retrieved = ExpressionFunctionUtils.getConstantExpressionMethodDeclaration(methodName, constant, Collections.emptyList());\n+        commonValidateConstant(retrieved, constant, methodName, double.class.getName());\n+        //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c881d4c0afe2cf369a5998e897ed76f394d435"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3MDMzNQ==", "bodyText": "hi @jiripetrlik\nWhen methods tests two different conditions I use \"//\" to separate them", "url": "https://github.com/kiegroup/drools/pull/2971#discussion_r448870335", "createdAt": "2020-07-02T09:25:43Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.stmt.Statement;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldName;\n+import org.dmg.pmml.FieldRef;\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.pmml.compiler.commons.testutils.CodegenTestUtils.commonValidateCompilation;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.METHOD_NAME_TEMPLATE;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+public class ExpressionFunctionUtilsTest {\n+\n+    @Test\n+    public void getConstantExpressionMethodDeclaration() {\n+        Constant constant = new Constant();\n+        constant.setDataType(DataType.DOUBLE);\n+        constant.setValue(34.6);\n+        int methodArity = new Random().nextInt(20);\n+        String methodName = String.format(METHOD_NAME_TEMPLATE, constant.getClass().getSimpleName(), methodArity);\n+        MethodDeclaration retrieved = ExpressionFunctionUtils.getConstantExpressionMethodDeclaration(methodName, constant, Collections.emptyList());\n+        commonValidateConstant(retrieved, constant, methodName, double.class.getName());\n+        //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzU0MA=="}, "originalCommit": {"oid": "a2c881d4c0afe2cf369a5998e897ed76f394d435"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzc3ODg5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyMToyMFrOGsEtZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToyNTo1NFrOGsE4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzY4NA==", "bodyText": "Again empty comment.", "url": "https://github.com/kiegroup/drools/pull/2971#discussion_r448867684", "createdAt": "2020-07-02T09:21:20Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.stmt.Statement;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldName;\n+import org.dmg.pmml.FieldRef;\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.pmml.compiler.commons.testutils.CodegenTestUtils.commonValidateCompilation;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.METHOD_NAME_TEMPLATE;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+public class ExpressionFunctionUtilsTest {\n+\n+    @Test\n+    public void getConstantExpressionMethodDeclaration() {\n+        Constant constant = new Constant();\n+        constant.setDataType(DataType.DOUBLE);\n+        constant.setValue(34.6);\n+        int methodArity = new Random().nextInt(20);\n+        String methodName = String.format(METHOD_NAME_TEMPLATE, constant.getClass().getSimpleName(), methodArity);\n+        MethodDeclaration retrieved = ExpressionFunctionUtils.getConstantExpressionMethodDeclaration(methodName, constant, Collections.emptyList());\n+        commonValidateConstant(retrieved, constant, methodName, double.class.getName());\n+        //\n+        constant = new Constant();\n+        constant.setDataType(DataType.STRING);\n+        constant.setValue(\"EXPECTED\");\n+        methodArity = new Random().nextInt(20);\n+        methodName = String.format(METHOD_NAME_TEMPLATE, constant.getClass().getSimpleName(), methodArity);\n+        retrieved = DerivedFieldFunctionUtils.getConstantMethodDeclaration(constant, methodArity);\n+        commonValidateConstant(retrieved, constant, methodName, String.class.getName());\n+    }\n+\n+    @Test\n+    public void getFieldRefExpressionMethodDeclaration() {\n+        int methodArity = new Random().nextInt(20);\n+        String fieldName = \"FIELD_NAME\";\n+        FieldRef fieldRef = new FieldRef(FieldName.create(fieldName));\n+        String methodName = String.format(METHOD_NAME_TEMPLATE, fieldRef.getClass().getSimpleName(), methodArity);\n+        MethodDeclaration retrieved = ExpressionFunctionUtils.getFieldRefExpressionMethodDeclaration(methodName, fieldRef, Collections.singletonList(getTypedClassOrInterfaceType(List.class.getName(), Collections.singletonList(KiePMMLNameValue.class.getName()))));\n+        String expected = String.format(\"return kiePMMLNameValue.map(%1$s::getValue).orElse(%2$s);\",\n+                                        KiePMMLNameValue.class.getName(),\n+                                        fieldRef.getMapMissingTo());\n+        commonValidateFieldRef(retrieved, fieldRef, methodName, expected);\n+        //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c881d4c0afe2cf369a5998e897ed76f394d435"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3MDQ2Mw==", "bodyText": "@jiripetrlik\nsee above", "url": "https://github.com/kiegroup/drools/pull/2971#discussion_r448870463", "createdAt": "2020-07-02T09:25:54Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.stmt.Statement;\n+import org.dmg.pmml.Constant;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.Expression;\n+import org.dmg.pmml.FieldName;\n+import org.dmg.pmml.FieldRef;\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.pmml.compiler.commons.testutils.CodegenTestUtils.commonValidateCompilation;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.METHOD_NAME_TEMPLATE;\n+import static org.kie.pmml.compiler.commons.utils.CommonCodegenUtils.getTypedClassOrInterfaceType;\n+\n+public class ExpressionFunctionUtilsTest {\n+\n+    @Test\n+    public void getConstantExpressionMethodDeclaration() {\n+        Constant constant = new Constant();\n+        constant.setDataType(DataType.DOUBLE);\n+        constant.setValue(34.6);\n+        int methodArity = new Random().nextInt(20);\n+        String methodName = String.format(METHOD_NAME_TEMPLATE, constant.getClass().getSimpleName(), methodArity);\n+        MethodDeclaration retrieved = ExpressionFunctionUtils.getConstantExpressionMethodDeclaration(methodName, constant, Collections.emptyList());\n+        commonValidateConstant(retrieved, constant, methodName, double.class.getName());\n+        //\n+        constant = new Constant();\n+        constant.setDataType(DataType.STRING);\n+        constant.setValue(\"EXPECTED\");\n+        methodArity = new Random().nextInt(20);\n+        methodName = String.format(METHOD_NAME_TEMPLATE, constant.getClass().getSimpleName(), methodArity);\n+        retrieved = DerivedFieldFunctionUtils.getConstantMethodDeclaration(constant, methodArity);\n+        commonValidateConstant(retrieved, constant, methodName, String.class.getName());\n+    }\n+\n+    @Test\n+    public void getFieldRefExpressionMethodDeclaration() {\n+        int methodArity = new Random().nextInt(20);\n+        String fieldName = \"FIELD_NAME\";\n+        FieldRef fieldRef = new FieldRef(FieldName.create(fieldName));\n+        String methodName = String.format(METHOD_NAME_TEMPLATE, fieldRef.getClass().getSimpleName(), methodArity);\n+        MethodDeclaration retrieved = ExpressionFunctionUtils.getFieldRefExpressionMethodDeclaration(methodName, fieldRef, Collections.singletonList(getTypedClassOrInterfaceType(List.class.getName(), Collections.singletonList(KiePMMLNameValue.class.getName()))));\n+        String expected = String.format(\"return kiePMMLNameValue.map(%1$s::getValue).orElse(%2$s);\",\n+                                        KiePMMLNameValue.class.getName(),\n+                                        fieldRef.getMapMissingTo());\n+        commonValidateFieldRef(retrieved, fieldRef, methodName, expected);\n+        //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzY4NA=="}, "originalCommit": {"oid": "a2c881d4c0afe2cf369a5998e897ed76f394d435"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2370, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}