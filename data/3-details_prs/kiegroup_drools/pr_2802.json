{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNjA4ODQ5", "number": 2802, "title": "[FAI-58] Extend DMNRuntimeEventListener", "bodyText": "Add methods + events to DMNRuntimeEventListener to be able to monitor when API method calls are invoked on the DMNRuntime (evaluateAll, evaluateDS, etc.)", "createdAt": "2020-03-04T14:50:46Z", "url": "https://github.com/kiegroup/drools/pull/2802", "merged": true, "mergeCommit": {"oid": "4e07b0a6cd10f0e85f37f1e10c9abccc9d0cdeea"}, "closed": true, "closedAt": "2020-03-13T08:02:23Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKYM9UAFqTM2ODg0NzExMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM40KdAFqTM3MzQxOTM0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODQ3MTEx", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-368847111", "createdAt": "2020-03-04T14:57:11Z", "commit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzoxMVrOFxwiYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzoxMVrOFxwiYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTc3OQ==", "bodyText": "@tarilabs please check that the structure of BeforeEvaluateAllEvent makes sense to you", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387719779", "createdAt": "2020-03-04T14:57:11Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-api/src/main/java/org/kie/dmn/api/core/event/BeforeEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.kie.dmn.api.core.event;\n+\n+public interface BeforeEvaluateAllEvent extends DMNEvent {\n+\n+    String getModelNamespace();\n+\n+    String getModelName();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODQ3NDM3", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-368847437", "createdAt": "2020-03-04T14:57:30Z", "commit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzozMFrOFxwjTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1NzozMFrOFxwjTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMDAxNQ==", "bodyText": "@tarilabs please check that the structure of AfterEvaluateAllEvent makes sense to you", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387720015", "createdAt": "2020-03-04T14:57:30Z", "author": {"login": "kostola"}, "path": "kie-dmn/kie-dmn-api/src/main/java/org/kie/dmn/api/core/event/AfterEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.kie.dmn.api.core.event;\n+\n+public interface AfterEvaluateAllEvent extends DMNEvent {\n+\n+    String getModelNamespace();\n+\n+    String getModelName();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTQ3NjEy", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-368947612", "createdAt": "2020-03-04T16:49:48Z", "commit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0OTo0OFrOFx1Qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0OTo0OFrOFx1Qiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzEzMQ==", "bodyText": "I am missing why this change is needed, please?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r387797131", "createdAt": "2020-03-04T16:49:48Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeEventManagerUtils.java", "diffHunk": "@@ -32,85 +47,114 @@\n     private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeEventManagerUtils.class );\n \n     public static BeforeEvaluateDecisionEvent fireBeforeEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionEvent event = new BeforeEvaluateDecisionEventImpl( decision, result );\n-            notifyListeners( eventManager, l -> l.beforeEvaluateDecision( event ) );\n-            return event;\n-        }\n-        return null;\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecision\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecision( DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionEvent event = new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecision(event));\n-        }\n+    public static AfterEvaluateDecisionEvent fireAfterEvaluateDecision(DMNRuntimeEventManager eventManager, DecisionNode decision, DMNResult result, BeforeEvaluateDecisionEvent beforeEvaluateDecisionEvent) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateDecisionEventImpl(decision, result, beforeEvaluateDecisionEvent),\n+                DMNRuntimeEventListener::afterEvaluateDecision\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionServiceEvent event = new BeforeEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionService(event));\n-        }\n+    public static BeforeEvaluateDecisionServiceEvent fireBeforeEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateDecisionServiceEventImpl(decision, result),\n+                DMNRuntimeEventListener::beforeEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionServiceEvent event = new AfterEvaluateDecisionServiceEventImpl(decision, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionService(event));\n-        }\n+    public static AfterEvaluateDecisionServiceEvent fireAfterEvaluateDecisionService(DMNRuntimeEventManager eventManager, DecisionServiceNode decision, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionServiceEventImpl(decision, result),\n+            DMNRuntimeEventListener::afterEvaluateDecisionService\n+        );\n     }\n \n-    public static void fireBeforeEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateBKMEvent event = new BeforeEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateBKM(event));\n-        }\n+    public static BeforeEvaluateBKMEvent fireBeforeEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::beforeEvaluateBKM\n+        );\n     }\n \n-    public static void fireAfterEvaluateBKM( DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateBKMEvent event = new AfterEvaluateBKMEventImpl(bkm, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateBKM(event));\n-        }\n+    public static AfterEvaluateBKMEvent fireAfterEvaluateBKM(DMNRuntimeEventManager eventManager, BusinessKnowledgeModelNode bkm, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateBKMEventImpl(bkm, result),\n+            DMNRuntimeEventListener::afterEvaluateBKM\n+        );\n     }\n \n-    public static void fireBeforeEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateDecisionTableEvent event = new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateDecisionTable(event));\n-        }\n+    public static BeforeEvaluateDecisionTableEvent fireBeforeEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateDecisionTableEventImpl(nodeName, dtName, result),\n+            DMNRuntimeEventListener::beforeEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireAfterEvaluateDecisionTable( DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateDecisionTableEvent event = new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired);\n-            notifyListeners(eventManager, l -> l.afterEvaluateDecisionTable(event));\n-        }\n+    public static AfterEvaluateDecisionTableEvent fireAfterEvaluateDecisionTable(DMNRuntimeEventManager eventManager, String nodeName, String dtName, DMNResult result, List<Integer> matches, List<Integer> fired ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateDecisionTableEventImpl(nodeName, dtName, result, matches, fired),\n+            DMNRuntimeEventListener::afterEvaluateDecisionTable\n+        );\n     }\n \n-    public static void fireBeforeEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n-        if( eventManager.hasListeners() ) {\n-            BeforeEvaluateContextEntryEvent event = new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result);\n-            notifyListeners(eventManager, l -> l.beforeEvaluateContextEntry(event));\n-        }\n+    public static BeforeEvaluateContextEntryEvent fireBeforeEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, DMNResult result) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new BeforeEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, result),\n+            DMNRuntimeEventListener::beforeEvaluateContextEntry\n+        );\n     }\n \n-    public static void fireAfterEvaluateContextEntry( DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n-        if( eventManager.hasListeners() ) {\n-            AfterEvaluateContextEntryEvent event = new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result);\n-            notifyListeners(eventManager, l -> l.afterEvaluateContextEntry(event));\n-        }\n+    public static AfterEvaluateContextEntryEvent fireAfterEvaluateContextEntry(DMNRuntimeEventManager eventManager, String nodeName, String variableName, String variableId, String expressionId, Object expressionResult, DMNResult result ) {\n+        return notifyListeners(\n+            eventManager,\n+            () -> new AfterEvaluateContextEntryEventImpl(nodeName, variableName, variableId, expressionId, expressionResult, result),\n+            DMNRuntimeEventListener::afterEvaluateContextEntry\n+        );\n+    }\n+\n+    public static BeforeEvaluateAllEvent fireBeforeEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new BeforeEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::beforeEvaluateAll\n+        );\n     }\n \n-    private static void notifyListeners(DMNRuntimeEventManager eventManager, Consumer<DMNRuntimeEventListener> consumer) {\n+    public static AfterEvaluateAllEvent fireAfterEvaluateAll(DMNRuntimeEventManager eventManager, DMNModel model, DMNResult result) {\n+        return notifyListeners(\n+                eventManager,\n+                () -> new AfterEvaluateAllEventImpl(model.getNamespace(), model.getName(), result),\n+                DMNRuntimeEventListener::afterEvaluateAll\n+        );\n+    }\n+\n+    private static <T> T notifyListeners(DMNRuntimeEventManager eventManager, Supplier<T> eventSupplier, BiConsumer<DMNRuntimeEventListener, T> eventConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTQyMDAy", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-369542002", "createdAt": "2020-03-05T12:52:18Z", "commit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1MjoxOFrOFySVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1MjoyNFrOFySV2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzU3Nw==", "bodyText": "What about final?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388273577", "createdAt": "2020-03-05T12:52:18Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/AfterEvaluateAllEventImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.dmn.core.impl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.AfterEvaluateAllEvent;\n+\n+public class AfterEvaluateAllEventImpl implements AfterEvaluateAllEvent {\n+\n+    private String modelNamespace;\n+    private String modelName;\n+    private DMNResult result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MzYyNg==", "bodyText": "What about final?", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r388273626", "createdAt": "2020-03-05T12:52:24Z", "author": {"login": "danielezonca"}, "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/BeforeEvaluateAllEventImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.dmn.core.impl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.BeforeEvaluateAllEvent;\n+\n+public class BeforeEvaluateAllEventImpl implements BeforeEvaluateAllEvent {\n+\n+    private String modelNamespace;\n+    private String modelName;\n+    private DMNResult result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1acebb22e5693467cc91ec36a3458200564eed39", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/1acebb22e5693467cc91ec36a3458200564eed39", "committedDate": "2020-03-04T14:44:45Z", "message": "[FAI-58] Add beforeEvaluateAll and afterEvaluateAll to DMNRuntimeEventListener"}, "afterCommit": {"oid": "b6c81152551210951bf60e3e159fd5d1604d27f2", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/b6c81152551210951bf60e3e159fd5d1604d27f2", "committedDate": "2020-03-06T09:31:02Z", "message": "[FAI-58] Add beforeEvaluateAll and afterEvaluateAll to DMNRuntimeEventListener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349f1a42b6233fb2f084235a3a46352bbb9ea770", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/349f1a42b6233fb2f084235a3a46352bbb9ea770", "committedDate": "2020-03-09T14:19:48Z", "message": "[FAI-58] Add beforeEvaluateAll and afterEvaluateAll to DMNRuntimeEventListener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69265e877ca8af855b3204236081c80b50b28bc9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/69265e877ca8af855b3204236081c80b50b28bc9", "committedDate": "2020-03-09T16:36:38Z", "message": "[FAI-58] Add licenses"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6c81152551210951bf60e3e159fd5d1604d27f2", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/b6c81152551210951bf60e3e159fd5d1604d27f2", "committedDate": "2020-03-06T09:31:02Z", "message": "[FAI-58] Add beforeEvaluateAll and afterEvaluateAll to DMNRuntimeEventListener"}, "afterCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/da086c1b575f511cc06fa5548695fee9d18e4b56", "committedDate": "2020-03-10T08:28:42Z", "message": "[FAI-58] Fix and extend DMNRuntimeListenerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzc4NDYw", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-371778460", "createdAt": "2020-03-10T09:10:29Z", "commit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToxMDoyOVrOF0Gb-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToxMDoyOVrOF0Gb-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3NTczOA==", "bodyText": "wouldn't be easier to just have a separate test for the 2 new events?\nyou can even use an anonymous class listener just tailored to the 2 new events.\nThis way we guarantee non regression more easily", "url": "https://github.com/kiegroup/drools/pull/2802#discussion_r390175738", "createdAt": "2020-03-10T09:10:29Z", "author": {"login": "tarilabs"}, "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/classloader/DMNRuntimeListenerTest.java", "diffHunk": "@@ -139,7 +142,11 @@ public void testListenerWithBKM() throws Exception {\n         final DMNRuntime runtime = DMNRuntimeUtil.createRuntime(\"org/kie/dmn/core/say_for_hello.dmn\", this.getClass());\n         TestEventListener listener = new TestEventListener();\n         runtime.addListener(listener);\n-        final DMNModel dmnModel = runtime.getModel(\"http://www.trisotech.com/dmn/definitions/_b6f2a9ca-a246-4f27-896a-e8ef04ea439c\", \"say for hello\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da086c1b575f511cc06fa5548695fee9d18e4b56", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/da086c1b575f511cc06fa5548695fee9d18e4b56", "committedDate": "2020-03-10T08:28:42Z", "message": "[FAI-58] Fix and extend DMNRuntimeListenerTest"}, "afterCommit": {"oid": "ed818d9087c7bd4ff4cdb0739cbd01d6e45b1fc9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/ed818d9087c7bd4ff4cdb0739cbd01d6e45b1fc9", "committedDate": "2020-03-11T10:18:20Z", "message": "[FAI-58] Fix and extend DMNRuntimeListenerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzA5OTU5", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-372709959", "createdAt": "2020-03-11T12:24:27Z", "commit": {"oid": "ed818d9087c7bd4ff4cdb0739cbd01d6e45b1fc9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25e6e9e193298ba8037fe00b9a51ed9302c9b7b5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/25e6e9e193298ba8037fe00b9a51ed9302c9b7b5", "committedDate": "2020-03-11T13:20:45Z", "message": "[FAI-58] Fix and extend DMNRuntimeListenerTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed818d9087c7bd4ff4cdb0739cbd01d6e45b1fc9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/ed818d9087c7bd4ff4cdb0739cbd01d6e45b1fc9", "committedDate": "2020-03-11T10:18:20Z", "message": "[FAI-58] Fix and extend DMNRuntimeListenerTest"}, "afterCommit": {"oid": "25e6e9e193298ba8037fe00b9a51ed9302c9b7b5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/drools/commit/25e6e9e193298ba8037fe00b9a51ed9302c9b7b5", "committedDate": "2020-03-11T13:20:45Z", "message": "[FAI-58] Fix and extend DMNRuntimeListenerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDE5MzQ2", "url": "https://github.com/kiegroup/drools/pull/2802#pullrequestreview-373419346", "createdAt": "2020-03-12T10:04:50Z", "commit": {"oid": "25e6e9e193298ba8037fe00b9a51ed9302c9b7b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1613, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}