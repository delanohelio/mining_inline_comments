{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Nzg1MDg1", "number": 2989, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowMDozOFrOERnUcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNTo0NFrOER0K2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA1NDU3OnYy", "diffSide": "RIGHT", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowMDozOFrOG2bacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzoyMDoxNVrOG2lcdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNTQyNw==", "bodyText": "Not sure about this change: old logic is an audit log with ordered list of fired rules while now we will not have duplication\n(if a rule fires 10 times instead of once I think it is important to know) and neither ordering.\nFor the ordering should be enough to use a LinkedHashMap but still not sure about losing the duplication.\nIs this on purpose? Can you please clarify?", "url": "https://github.com/kiegroup/drools/pull/2989#discussion_r459725427", "createdAt": "2020-07-23T21:00:38Z", "author": {"login": "danielezonca"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelper.java", "diffHunk": "@@ -99,8 +100,7 @@ protected ScenarioResultMetadata extractResultMetadata(Map<String, Object> reque\n         scenarioResultMetadata.addAllAvailable(availableRules);\n         scenarioResultMetadata.addAllExecuted(ruleExecuted);\n         final AtomicInteger counter = new AtomicInteger(0);\n-        coverageAgendaListener\n-                .getAuditsMessages().forEach(auditMessage -> scenarioResultMetadata.addAuditMessage(counter.addAndGet(1), auditMessage, \"INFO\"));\n+        ruleExecuted.keySet().forEach(ruleName -> scenarioResultMetadata.addAuditMessage(counter.addAndGet(1), ruleName, ConstantsHolder.EXECUTED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203ef64465e1f8e7a2bb25e1abd9d9913fcadf55"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTkzOA==", "bodyText": "@danielezonca You're right, it's wrong. I'll restore the previous list. Thanks", "url": "https://github.com/kiegroup/drools/pull/2989#discussion_r459729938", "createdAt": "2020-07-23T21:10:12Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelper.java", "diffHunk": "@@ -99,8 +100,7 @@ protected ScenarioResultMetadata extractResultMetadata(Map<String, Object> reque\n         scenarioResultMetadata.addAllAvailable(availableRules);\n         scenarioResultMetadata.addAllExecuted(ruleExecuted);\n         final AtomicInteger counter = new AtomicInteger(0);\n-        coverageAgendaListener\n-                .getAuditsMessages().forEach(auditMessage -> scenarioResultMetadata.addAuditMessage(counter.addAndGet(1), auditMessage, \"INFO\"));\n+        ruleExecuted.keySet().forEach(ruleName -> scenarioResultMetadata.addAuditMessage(counter.addAndGet(1), ruleName, ConstantsHolder.EXECUTED));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNTQyNw=="}, "originalCommit": {"oid": "203ef64465e1f8e7a2bb25e1abd9d9913fcadf55"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4OTc4MQ==", "bodyText": "@danielezonca Restored. Thank you for reported that.", "url": "https://github.com/kiegroup/drools/pull/2989#discussion_r459889781", "createdAt": "2020-07-24T07:20:15Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelper.java", "diffHunk": "@@ -99,8 +100,7 @@ protected ScenarioResultMetadata extractResultMetadata(Map<String, Object> reque\n         scenarioResultMetadata.addAllAvailable(availableRules);\n         scenarioResultMetadata.addAllExecuted(ruleExecuted);\n         final AtomicInteger counter = new AtomicInteger(0);\n-        coverageAgendaListener\n-                .getAuditsMessages().forEach(auditMessage -> scenarioResultMetadata.addAuditMessage(counter.addAndGet(1), auditMessage, \"INFO\"));\n+        ruleExecuted.keySet().forEach(ruleName -> scenarioResultMetadata.addAuditMessage(counter.addAndGet(1), ruleName, ConstantsHolder.EXECUTED));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNTQyNw=="}, "originalCommit": {"oid": "203ef64465e1f8e7a2bb25e1abd9d9913fcadf55"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE1OTk1OnYy", "diffSide": "RIGHT", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/CoverageAgendaListenerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNTo0NFrOG2ulrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0MjoxNVrOG2yEYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzOTU5Ng==", "bodyText": "Can you move rule1 to a variable?", "url": "https://github.com/kiegroup/drools/pull/2989#discussion_r460039596", "createdAt": "2020-07-24T13:05:44Z", "author": {"login": "danielezonca"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/CoverageAgendaListenerTest.java", "diffHunk": "@@ -38,6 +38,6 @@ public void beforeMatchFired() {\n         assertEquals((Integer) 1, ruleExecuted.get(\"rule1\"));\n         List<String> auditMessages = coverageAgendaListener.getAuditsMessages();\n         assertEquals(1, auditMessages.size());\n-        assertEquals(auditMessages.get(0), CoverageAgendaListener.generateAuditMessage(\"rule1\"));\n+        assertEquals(\"rule1\", auditMessages.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d6258d42a80ef35a7f92ab58ec328720f242b44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NjYwOQ==", "bodyText": "@danielezonca Done!", "url": "https://github.com/kiegroup/drools/pull/2989#discussion_r460096609", "createdAt": "2020-07-24T14:42:15Z", "author": {"login": "yesamer"}, "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/CoverageAgendaListenerTest.java", "diffHunk": "@@ -38,6 +38,6 @@ public void beforeMatchFired() {\n         assertEquals((Integer) 1, ruleExecuted.get(\"rule1\"));\n         List<String> auditMessages = coverageAgendaListener.getAuditsMessages();\n         assertEquals(1, auditMessages.size());\n-        assertEquals(auditMessages.get(0), CoverageAgendaListener.generateAuditMessage(\"rule1\"));\n+        assertEquals(\"rule1\", auditMessages.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzOTU5Ng=="}, "originalCommit": {"oid": "7d6258d42a80ef35a7f92ab58ec328720f242b44"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2383, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}