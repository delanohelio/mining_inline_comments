{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzM5NjE3", "number": 2936, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOTo0NlrOECqGtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOTo1N1rOECqG9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIyNDU1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOTo0NlrOGfQBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzo1MDowMVrOGfkABg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTU4MA==", "bodyText": "Can you please clarify the logic?\nDoes it try to load (aka parse and compile) from resources and only if there are no file it tries to load compiled?\nI think we should identify if it is a compiled kjar or not and decide what to do.\n@mariofusco\nHow does it work with Drools core?\nDoes it try both load from resource and compiled or just one of them?", "url": "https://github.com/kiegroup/drools/pull/2936#discussion_r435421580", "createdAt": "2020-06-04T17:19:46Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -66,7 +80,11 @@ public void addResources(Object kbuilder, Collection<ResourceWithConfiguration>\n         if (isBuildFromMaven()) {\n             addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(kbuilderImpl, resources));\n         } else {\n-            addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurations(kbuilderImpl, resources));\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            if (toAdd.isEmpty()) {\n+                toAdd = getKiePMMLModelsCompiledFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            }\n+            addModels(kbuilderImpl, toAdd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Nzk1Ng==", "bodyText": "@danielezonca\nScope of the \"Assembler\" is to put  \"KiePMMLModels\" inside \"Packages\";  such Packages are put inside a KieBuilderImpl that - in turns, it is used to build and populate a \"KieBase\".\nHow this KieBase is used depends on the original caller\n\nin case of \"plugin\" - models with sources are put inside the package and then the plugin manage such sources to have them compiled.\nIf there is already a generated factory class (i.e. loaded from a kjar) a new instance is created out of it (no compilation) and then such class is used to retrieve the actual kiepmmlmodels that are put inside the package.\nlast, if none of the above is true (not invoked by plugin and not found in kjar), the PMML model is compiled and the result (KiePMMLModels) are put in the package.\n\nThe only thing that this PR add is the split of logic between \"compilation\" and \"loading\" - that before was mixed in the PMMLAssembler.\nIn the present context \"load\" and \"compile\" are the two opposite operations.", "url": "https://github.com/kiegroup/drools/pull/2936#discussion_r435487956", "createdAt": "2020-06-04T19:06:20Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -66,7 +80,11 @@ public void addResources(Object kbuilder, Collection<ResourceWithConfiguration>\n         if (isBuildFromMaven()) {\n             addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(kbuilderImpl, resources));\n         } else {\n-            addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurations(kbuilderImpl, resources));\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            if (toAdd.isEmpty()) {\n+                toAdd = getKiePMMLModelsCompiledFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            }\n+            addModels(kbuilderImpl, toAdd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTU4MA=="}, "originalCommit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyNTA0OQ==", "bodyText": "Thanks for the clarification, I'm not sure about point 3: it should be possible to recognize if the kjar has been already compiled or not to decide if it has to compile it. With the current logic I am worried that in case of error with the plugin or similar, the error will be hidden by this getOrCreate logic.\nIt could be done with a different ticket of course, I'm just trying to understand the whole flow :)", "url": "https://github.com/kiegroup/drools/pull/2936#discussion_r435725049", "createdAt": "2020-06-05T06:57:53Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -66,7 +80,11 @@ public void addResources(Object kbuilder, Collection<ResourceWithConfiguration>\n         if (isBuildFromMaven()) {\n             addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(kbuilderImpl, resources));\n         } else {\n-            addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurations(kbuilderImpl, resources));\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            if (toAdd.isEmpty()) {\n+                toAdd = getKiePMMLModelsCompiledFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            }\n+            addModels(kbuilderImpl, toAdd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTU4MA=="}, "originalCommit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0ODg3MA==", "bodyText": "@danielezonca\nShort answer: I think this is the cleanest way\nLong answer\nThere are the following things to consider\n\nkjar may have any name (we can't force user to give a specific name to his/her kjar)\nthere can be multiple kjars (and that enforce the previous issue)\ngiven that, only way to know if a given kjar is in the current classpath is to look for something that is expected to be inside the kjar itself\nthis could be for example a text file, or whatever, loaded with a getResource or similar\nafter all that, the actual logic would be exactly the same, only more contrived\n\nThe other possible solution I see could be to implement a declarative approach: the user defines somewhere the kjar(s) or class(es) is expecting to find in the classpath; this \"variable\" is read by the PMMLAssembler and then this latter try to figure out if such artifact(s)/class(es) are actually present. Again, I can't see any real benefit, without an apparence of control: the need is to rise an Exception when the user try to evaluate a PMML that is not present in the classloader, and this is already in place. With this declarative approach we would only create a more complex matrix of possible error conditions to manage.\nLast note about the getOrCreate logic:\nthis works only if the users put the PMML file inside the project . If there is not such PMML file, the model won't be compiled, and then the issue won't be hided. On the other side, if such file is present in the project, I'm expecting user to have put it willingly.\nIf the user put both a kjar and a PMML file in the project, there is anyway a log telling him/her if the model has been loaded or compiled, and this is done on a per-file base", "url": "https://github.com/kiegroup/drools/pull/2936#discussion_r435748870", "createdAt": "2020-06-05T07:50:01Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -66,7 +80,11 @@ public void addResources(Object kbuilder, Collection<ResourceWithConfiguration>\n         if (isBuildFromMaven()) {\n             addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(kbuilderImpl, resources));\n         } else {\n-            addModels(kbuilderImpl, getKiePMMLModelsFromResourcesWithConfigurations(kbuilderImpl, resources));\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            if (toAdd.isEmpty()) {\n+                toAdd = getKiePMMLModelsCompiledFromResourcesWithConfigurations(kbuilderImpl, resources);\n+            }\n+            addModels(kbuilderImpl, toAdd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTU4MA=="}, "originalCommit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIyNTE2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOTo1N1rOGfQB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOTo1N1rOGfQB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTY3OA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/drools/pull/2936#discussion_r435421678", "createdAt": "2020-06-04T17:19:57Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -77,7 +95,11 @@ public void addResource(Object kbuilder, Resource resource, ResourceType type, R\n         if (isBuildFromMaven()) {\n             addModels(kbuilderImpl, getKiePMMLModelsFromResourceFromPlugin(kbuilderImpl, resource));\n         } else {\n-            addModels(kbuilderImpl, getKiePMMLModelsFromResource(kbuilderImpl, resource));\n+            List<KiePMMLModel> toAdd = getKiePMMLModelsLoadedFromResource(kbuilderImpl, resource);\n+            if (toAdd.isEmpty()) {\n+                toAdd = getKiePMMLModelsCompiledFromResource(kbuilderImpl, resource);\n+            }\n+            addModels(kbuilderImpl, toAdd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0310b667ce6c8f6cc92720c750d9d61558494338"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2562, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}