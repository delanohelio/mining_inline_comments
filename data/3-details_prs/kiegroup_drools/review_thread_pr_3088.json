{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNTAyOTc1", "number": 3088, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowMDo0NVrOEj-3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowMDo0NVrOEj-3xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTY1NzAyOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/TemporalConstraintEvaluator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowMDo0NVrOHSpjlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowMDo0NVrOHSpjlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNzI3MQ==", "bodyText": "I inverse the arguments here rather than doing it inside each temporalPredicate evaluate method because this approach is concise and less error-prone, I think.", "url": "https://github.com/kiegroup/drools/pull/3088#discussion_r489317271", "createdAt": "2020-09-16T10:00:45Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/TemporalConstraintEvaluator.java", "diffHunk": "@@ -51,7 +51,12 @@ public boolean evaluate( InternalFactHandle handle, Tuple tuple, InternalWorking\n         long start2 = getStartTimestamp( fhs[1], workingMemory, getDeclarations()[1], temporalConstraint.getF2() );\n         long duration2 = getDuration( fhs[1] );\n         long end2 = start2 + duration2;\n-        return temporalConstraint.getTemporalPredicate().evaluate( start1, duration1, end1, start2, duration2, end2);\n+        TemporalPredicate temporalPredicate = temporalConstraint.getTemporalPredicate();\n+        if (temporalPredicate.isThisOnRight()) {\n+            return temporalPredicate.evaluate( start2, duration2, end2, start1, duration1, end1);\n+        } else {\n+            return temporalPredicate.evaluate( start1, duration1, end1, start2, duration2, end2);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27cfaa94a92a6443ffa431d134424b7b8401f932"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2314, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}