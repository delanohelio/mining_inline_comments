{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjA1NzE1", "number": 2931, "title": "[JBPM-9178] Immutable SpringBoot Deployment", "bodyText": "", "createdAt": "2020-06-04T05:53:38Z", "url": "https://github.com/kiegroup/drools/pull/2931", "merged": true, "mergeCommit": {"oid": "c503de20dca1930cd56ed812be540bdee7db68cd"}, "closed": true, "closedAt": "2020-08-12T06:32:09Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpLRNmABqjM0MTg1MzIzNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc95l8pABqjM2NDQwNzMzMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "101040d2388d94e6fb0641a67a4a6fffa79e7e37", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/101040d2388d94e6fb0641a67a4a6fffa79e7e37", "committedDate": "2020-06-04T05:51:46Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "c06f30f68d1e66057d4dbf76db86aa6bdb9833af", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/c06f30f68d1e66057d4dbf76db86aa6bdb9833af", "committedDate": "2020-06-08T07:23:59Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c06f30f68d1e66057d4dbf76db86aa6bdb9833af", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/c06f30f68d1e66057d4dbf76db86aa6bdb9833af", "committedDate": "2020-06-08T07:23:59Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "6717869b73ef894f6d1914fe024adb063efe6a36", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/6717869b73ef894f6d1914fe024adb063efe6a36", "committedDate": "2020-06-09T06:50:03Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6717869b73ef894f6d1914fe024adb063efe6a36", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/6717869b73ef894f6d1914fe024adb063efe6a36", "committedDate": "2020-06-09T06:50:03Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "f757bd63231c05f3c88124a8b5c1db85450f0afe", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/f757bd63231c05f3c88124a8b5c1db85450f0afe", "committedDate": "2020-06-11T07:43:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f757bd63231c05f3c88124a8b5c1db85450f0afe", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/f757bd63231c05f3c88124a8b5c1db85450f0afe", "committedDate": "2020-06-11T07:43:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "02a6d8cc08f1a19a9f01d82d73052bd355412390", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/02a6d8cc08f1a19a9f01d82d73052bd355412390", "committedDate": "2020-06-12T08:23:49Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDk3ODQz", "url": "https://github.com/kiegroup/drools/pull/2931#pullrequestreview-430097843", "createdAt": "2020-06-13T00:47:02Z", "commit": {"oid": "02a6d8cc08f1a19a9f01d82d73052bd355412390"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02a6d8cc08f1a19a9f01d82d73052bd355412390", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/02a6d8cc08f1a19a9f01d82d73052bd355412390", "committedDate": "2020-06-12T08:23:49Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "acd46a36c7bace2e2a3a028505e17cf384a1c217", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/acd46a36c7bace2e2a3a028505e17cf384a1c217", "committedDate": "2020-06-15T10:09:50Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acd46a36c7bace2e2a3a028505e17cf384a1c217", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/acd46a36c7bace2e2a3a028505e17cf384a1c217", "committedDate": "2020-06-15T10:09:50Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "dfb5e788b720e9289527c5e1d5987d6dfb02f761", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/dfb5e788b720e9289527c5e1d5987d6dfb02f761", "committedDate": "2020-06-15T10:27:54Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfb5e788b720e9289527c5e1d5987d6dfb02f761", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/dfb5e788b720e9289527c5e1d5987d6dfb02f761", "committedDate": "2020-06-15T10:27:54Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "2660afe913afb1f35a46693438637274c725b381", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/2660afe913afb1f35a46693438637274c725b381", "committedDate": "2020-06-15T19:24:21Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2660afe913afb1f35a46693438637274c725b381", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/2660afe913afb1f35a46693438637274c725b381", "committedDate": "2020-06-15T19:24:21Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "8503a79f17b8127ef0fb1ac70d7b62e8f8235613", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/8503a79f17b8127ef0fb1ac70d7b62e8f8235613", "committedDate": "2020-06-16T10:20:01Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8503a79f17b8127ef0fb1ac70d7b62e8f8235613", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/8503a79f17b8127ef0fb1ac70d7b62e8f8235613", "committedDate": "2020-06-16T10:20:01Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/9a837e9d6293e8803416b08623f71f48e0ea3577", "committedDate": "2020-06-17T09:13:02Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTY5MTM5", "url": "https://github.com/kiegroup/drools/pull/2931#pullrequestreview-433969139", "createdAt": "2020-06-19T10:26:27Z", "commit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoyNjoyN1rOGmP_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowNjoxNVrOGmWFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MDk4NQ==", "bodyText": "Not sure why we want to access to all parents for the classloader? We might get a SecurityException is some cases.", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442760985", "createdAt": "2020-06-19T10:26:27Z", "author": {"login": "afalhambra"}, "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ClasspathKieProject.java", "diffHunk": "@@ -98,17 +108,25 @@ public long getCreationTimestamp() {\n     public void discoverKieModules() {\n         String[] configFiles = {KieModuleModelImpl.KMODULE_JAR_PATH, KieModuleModelImpl.KMODULE_SPRING_JAR_PATH};\n         for ( String configFile : configFiles) {\n-            final Enumeration<URL> e;\n+            final Set<URL> resources = new HashSet<>();\n             try {\n-                e = classLoader.getResources(configFile );\n+                ClassLoader currentClassLoader = classLoader;\n+                while (currentClassLoader != null) {\n+                    Enumeration<URL> list = currentClassLoader.getResources(configFile);\n+                    while (list.hasMoreElements()) {\n+                        resources.add(list.nextElement());\n+                    }\n+                    currentClassLoader = currentClassLoader.getParent();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2NDk4NA==", "bodyText": "Why using CRC32 now? not sure about this change? Is this related to the issue itself or it's just an improvement of the same? can you please clarify?", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442764984", "createdAt": "2020-06-19T10:35:57Z", "author": {"login": "afalhambra"}, "path": "drools-compiler/src/main/java/org/drools/compiler/compiler/io/memory/MemoryFileSystem.java", "diffHunk": "@@ -490,16 +491,23 @@ private void writeJarEntries(Folder f,\n                 writeJarEntries( (Folder) rs,\n                                  out );\n             } else {\n-                ZipEntry entry = new ZipEntry( rname );\n-                out.putNextEntry( entry );\n-\n                 byte[] contents = getFileContents( (MemoryFile) rs );\n                 if (contents == null) {\n                     IOException e = new IOException(\"No content found for: \" + rs);\n                     log.error(e.getMessage(), e);\n                     throw e;\n                 }\n-                out.write( contents );\n+\n+\n+                CRC32 crc = new CRC32();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODYwMA==", "bodyText": "Should be changed to Set<URI> instead as per Sonar complain, just in case", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442838600", "createdAt": "2020-06-19T13:25:00Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -30,50 +32,63 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.zip.ZipEntry;\n-import java.util.zip.ZipFile;\n+import java.util.zip.ZipInputStream;\n \n import org.appformer.maven.integration.ArtifactResolver;\n+import org.appformer.maven.integration.ArtifactResolver.ArtifactLocation;\n import org.appformer.maven.integration.DependencyDescriptor;\n import org.appformer.maven.support.AFReleaseId;\n import org.appformer.maven.support.DependencyFilter;\n import org.drools.compiler.kie.builder.impl.InternalKieModule;\n import org.drools.compiler.kproject.models.KieModuleModelImpl;\n import org.drools.core.rule.KieModuleMetaInfo;\n import org.drools.core.rule.TypeMetaInfo;\n+import org.drools.reflective.ResourceProvider;\n import org.drools.reflective.classloader.ProjectClassLoader;\n-import org.eclipse.aether.artifact.Artifact;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import static java.util.Collections.enumeration;\n import static org.appformer.maven.integration.ArtifactResolver.getResolverFor;\n import static org.drools.core.util.ClassUtils.convertResourceToClassName;\n import static org.drools.core.util.IoUtils.UTF8_CHARSET;\n-import static org.drools.core.util.IoUtils.readBytesFromZipEntry;\n \n public class KieModuleMetaDataImpl implements KieModuleMetaData {\n \n+    public interface ResetAwareClassLoader {\n+\n+        void reset(AFReleaseId releaseId);\n+    }\n+\n+    private static final Logger log = LoggerFactory.getLogger(KieModuleMetaDataImpl.class);\n+\n     private final Map<String, Collection<String>> classes = new HashMap<>();\n \n     private final Map<String, String> processes = new HashMap<>();\n \n     private final Map<String, String> forms = new HashMap<>();\n \n-    private final Map<URI, File> jars = new HashMap<>();\n+    private final Set<URL> jars = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0NzUyMA==", "bodyText": "Loop can be replaced with Collections.addAll\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            releasesId.add(releaseId);\n          \n          \n            \n            releasesId.addAll(kieModule.getPomModel().getDependencies(dependencyFilter));", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442847520", "createdAt": "2020-06-19T13:41:40Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,207 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n+\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n+\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n                 }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n+                }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n             for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n+                releasesId.add(releaseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDg0NA==", "bodyText": "artifactLocation.getArtifact() might be null due to:\nhttps://github.com/kiegroup/kie-soup/blob/6a307c900c067c8fb4d312a8b9cc03f4e243bd2f/kie-soup-maven-utils/kie-soup-maven-integration/src/main/java/org/appformer/maven/integration/DefaultArtifactResolver.java#L54", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442850844", "createdAt": "2020-06-19T13:47:50Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,207 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n+\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n+\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n                 }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n+                }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n             for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n+                releasesId.add(releaseId);\n             }\n         } else {\n             for ( DependencyDescriptor dep : artifactResolver.getAllDependecies( dependencyFilter ) ) {\n-                addArtifact( artifactResolver.resolveArtifact( dep.getReleaseId() ) );\n+                releasesId.add(dep.getReleaseId());\n             }\n         }\n \n+        classesMap = new HashMap<>();\n+        for (AFReleaseId rId : releasesId) {\n+            ArtifactLocation artifactLocation = artifactResolver.resolveArtifactLocation(rId);\n+            if (artifactLocation.isClassPath()) {\n+                log.info(\"Artifact {} is local\", artifactLocation.getArtifact());\n+            }\n+            addArtifact(artifactLocation);\n+        }\n+\n+        for (Map.Entry<String, byte[]> entry : classesMap.entrySet()) {\n+            projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+        }\n+\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n+\n+        if (kieModule != null) {\n+            Map<String, byte[]> classes = kieModule.getClassesMap();\n+            for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n+                projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+            }\n+        }\n     }\n \n     private void init(List<URI> dependencies) {\n         for (URI uri : dependencies) {\n-            addJar( new File(uri), uri );\n+            try {\n+                addJar(uri.toURL());\n+            } catch (MalformedURLException e) {\n+                log.error(\"Cannot add URL resource\", e);\n+            }\n         }\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n     }\n \n-    private void addArtifact(Artifact artifact) {\n-        if (artifact != null && artifact.getExtension() != null && artifact.getExtension().equals(\"jar\")) {\n-            File jarFile = artifact.getFile();\n-            addJar( jarFile, jarFile.toURI() );\n+    private void addArtifact(ArtifactLocation artifactLocation) {\n+        if (artifactLocation != null && artifactLocation.getArtifact().getExtension() != null && artifactLocation.getArtifact().getExtension().equals(\"jar\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MTc3MA==", "bodyText": "artifactLocation might be null due to:\nhttps://github.com/kiegroup/kie-soup/blob/6a307c900c067c8fb4d312a8b9cc03f4e243bd2f/kie-soup-maven-utils/kie-soup-maven-integration/src/main/java/org/appformer/maven/integration/DefaultArtifactResolver.java#L54", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442851770", "createdAt": "2020-06-19T13:49:34Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,207 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n+\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n+\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n                 }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n+                }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n             for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n+                releasesId.add(releaseId);\n             }\n         } else {\n             for ( DependencyDescriptor dep : artifactResolver.getAllDependecies( dependencyFilter ) ) {\n-                addArtifact( artifactResolver.resolveArtifact( dep.getReleaseId() ) );\n+                releasesId.add(dep.getReleaseId());\n             }\n         }\n \n+        classesMap = new HashMap<>();\n+        for (AFReleaseId rId : releasesId) {\n+            ArtifactLocation artifactLocation = artifactResolver.resolveArtifactLocation(rId);\n+            if (artifactLocation.isClassPath()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2MDg0OQ==", "bodyText": "Why not using the previous method to do this?\n\n  \n    \n      drools/drools-core/src/main/java/org/drools/core/util/IoUtils.java\n    \n    \n         Line 209\n      in\n      8037cfb\n    \n    \n    \n    \n\n        \n          \n           public static byte[] readBytesFromZipEntry(File file, ZipEntry entry) throws IOException { \n        \n    \n  \n\n\nIs it only to keep on reading zip entries if those additional validations are met? why do we want this?", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r442860849", "createdAt": "2020-06-19T14:06:15Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,207 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n+\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n+\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n                 }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n+                }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n             for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n+                releasesId.add(releaseId);\n             }\n         } else {\n             for ( DependencyDescriptor dep : artifactResolver.getAllDependecies( dependencyFilter ) ) {\n-                addArtifact( artifactResolver.resolveArtifact( dep.getReleaseId() ) );\n+                releasesId.add(dep.getReleaseId());\n             }\n         }\n \n+        classesMap = new HashMap<>();\n+        for (AFReleaseId rId : releasesId) {\n+            ArtifactLocation artifactLocation = artifactResolver.resolveArtifactLocation(rId);\n+            if (artifactLocation.isClassPath()) {\n+                log.info(\"Artifact {} is local\", artifactLocation.getArtifact());\n+            }\n+            addArtifact(artifactLocation);\n+        }\n+\n+        for (Map.Entry<String, byte[]> entry : classesMap.entrySet()) {\n+            projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+        }\n+\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n+\n+        if (kieModule != null) {\n+            Map<String, byte[]> classes = kieModule.getClassesMap();\n+            for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n+                projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+            }\n+        }\n     }\n \n     private void init(List<URI> dependencies) {\n         for (URI uri : dependencies) {\n-            addJar( new File(uri), uri );\n+            try {\n+                addJar(uri.toURL());\n+            } catch (MalformedURLException e) {\n+                log.error(\"Cannot add URL resource\", e);\n+            }\n         }\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n     }\n \n-    private void addArtifact(Artifact artifact) {\n-        if (artifact != null && artifact.getExtension() != null && artifact.getExtension().equals(\"jar\")) {\n-            File jarFile = artifact.getFile();\n-            addJar( jarFile, jarFile.toURI() );\n+    private void addArtifact(ArtifactLocation artifactLocation) {\n+        if (artifactLocation != null && artifactLocation.getArtifact().getExtension() != null && artifactLocation.getArtifact().getExtension().equals(\"jar\")) {\n+            addJar(artifactLocation.toURL());\n         }\n     }\n \n-    private void addJar( File jarFile, URI uri ) {\n-        if (!jars.containsKey(uri)) {\n-            jars.put(uri, jarFile);\n-            scanJar(jarFile);\n+    private void addJar(URL location) {\n+        log.info(\"ADD Artifact {} to {}\", location, jars);\n+        if (!jars.contains(location)) {\n+            log.info(\"Artifact location {} \", location);\n+            jars.add(location);\n+            scanJar(location);\n         }\n     }\n \n-    private void scanJar(File jarFile) {\n-        try (ZipFile zipFile = new ZipFile( jarFile )) {\n-            Enumeration< ? extends ZipEntry> entries = zipFile.entries();\n-            while ( entries.hasMoreElements() ) {\n-                ZipEntry entry = entries.nextElement();\n+    private void scanJar(URL jarFile) {\n+        try (ZipInputStream zipFile = new ZipInputStream(jarFile.openStream())) {\n+\n+            ZipEntry entry = null;\n+            while ( (entry = zipFile.getNextEntry()) != null) {\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+\n+                byte[] blob = out.toByteArray();\n+                if (blob.length == 0) {\n+                    continue;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 310}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/9a837e9d6293e8803416b08623f71f48e0ea3577", "committedDate": "2020-06-17T09:13:02Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "45259015ac7010cd1fede495b3bdaa0bab17510a", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/45259015ac7010cd1fede495b3bdaa0bab17510a", "committedDate": "2020-06-23T09:02:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment\n\nAdding support for in jar artifacts. providing artifacts isolation from\nparent class loader."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTQ2ODA5", "url": "https://github.com/kiegroup/drools/pull/2931#pullrequestreview-436546809", "createdAt": "2020-06-24T11:09:41Z", "commit": {"oid": "45259015ac7010cd1fede495b3bdaa0bab17510a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTowOTo0MlrOGoNj3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowNzowMFrOGoWiLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxODM5OQ==", "bodyText": "Do we really want to add all transitive dependencies? I guess user should carefully add them at their own risk, but we could end up having duplicate deps in different places and locations (BOOT-INF/lib and BOOT-INF/classes/KIE-INF/lib)", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r444818399", "createdAt": "2020-06-24T11:09:42Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,206 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n+\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n+\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n+                }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n                 }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n-            for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n-            }\n+            releasesId.addAll(kieModule.getPomModel().getDependencies(dependencyFilter));\n+\n         } else {\n-            for ( DependencyDescriptor dep : artifactResolver.getAllDependecies( dependencyFilter ) ) {\n-                addArtifact( artifactResolver.resolveArtifact( dep.getReleaseId() ) );\n+            List<AFReleaseId> dependencies = artifactResolver.getAllDependecies(dependencyFilter).stream().map(e -> e.getReleaseId()).collect(toList());\n+            releasesId.addAll(dependencies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45259015ac7010cd1fede495b3bdaa0bab17510a"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyNTU2OQ==", "bodyText": "I would remove this log. It's better with the log used below, when the jar is actually added to the HashSet jars. Also it is not an artifact but an artifact location.", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r444825569", "createdAt": "2020-06-24T11:25:10Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,206 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n+\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n+\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n+                }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n                 }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n-            for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n-            }\n+            releasesId.addAll(kieModule.getPomModel().getDependencies(dependencyFilter));\n+\n         } else {\n-            for ( DependencyDescriptor dep : artifactResolver.getAllDependecies( dependencyFilter ) ) {\n-                addArtifact( artifactResolver.resolveArtifact( dep.getReleaseId() ) );\n+            List<AFReleaseId> dependencies = artifactResolver.getAllDependecies(dependencyFilter).stream().map(e -> e.getReleaseId()).collect(toList());\n+            releasesId.addAll(dependencies);\n+\n+        }\n+\n+        classesMap = new HashMap<>();\n+        for (AFReleaseId rId : releasesId) {\n+            ArtifactLocation artifactLocation = artifactResolver.resolveArtifactLocation(rId);\n+            if (artifactLocation != null && artifactLocation.isClassPath()) {\n+                log.info(\"Artifact {} is local\", artifactLocation.getArtifact());\n             }\n+            addArtifact(artifactLocation);\n+        }\n+\n+        for (Map.Entry<String, byte[]> entry : classesMap.entrySet()) {\n+            projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n         }\n \n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n+\n+        if (kieModule != null) {\n+            Map<String, byte[]> classes = kieModule.getClassesMap();\n+            for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n+                projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+            }\n+        }\n     }\n \n     private void init(List<URI> dependencies) {\n         for (URI uri : dependencies) {\n-            addJar( new File(uri), uri );\n+            try {\n+                addJar(uri.toURL());\n+            } catch (MalformedURLException e) {\n+                log.error(\"Cannot add URL resource\", e);\n+            }\n         }\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n     }\n \n-    private void addArtifact(Artifact artifact) {\n-        if (artifact != null && artifact.getExtension() != null && artifact.getExtension().equals(\"jar\")) {\n-            File jarFile = artifact.getFile();\n-            addJar( jarFile, jarFile.toURI() );\n+    private void addArtifact(ArtifactLocation artifactLocation) {\n+        if (artifactLocation != null && artifactLocation.getArtifact().getExtension() != null && artifactLocation.getArtifact().getExtension().equals(\"jar\")) {\n+            addJar(artifactLocation.toURL());\n         }\n     }\n \n-    private void addJar( File jarFile, URI uri ) {\n-        if (!jars.containsKey(uri)) {\n-            jars.put(uri, jarFile);\n-            scanJar(jarFile);\n+    private void addJar(URL location) {\n+        log.info(\"ADD Artifact {} to {}\", location, jars);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45259015ac7010cd1fede495b3bdaa0bab17510a"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NTQyMg==", "bodyText": "sorry I cannot see the change?", "url": "https://github.com/kiegroup/drools/pull/2931#discussion_r444965422", "createdAt": "2020-06-24T15:07:00Z", "author": {"login": "afalhambra"}, "path": "kie-ci/src/main/java/org/kie/scanner/KieModuleMetaDataImpl.java", "diffHunk": "@@ -133,96 +148,207 @@ public TypeMetaInfo getTypeMetaInfo(Class<?> clazz) {\n \t\treturn rulesPerPackage != null ? rulesPerPackage : Collections.emptyList();\n     }\n \n-    public ClassLoader getClassLoader() {\n-        if (classLoader == null) {\n-            URL[] urls = new URL[jars.size()];\n-            int i = 0;\n-            for (File jar : jars.values()) {\n-                try {\n-                    urls[i++] = jar.toURI().toURL();\n-                } catch (MalformedURLException e) {\n-                    throw new RuntimeException(e);\n-                }\n+    private class KieJarClassLoader extends ClassLoader implements ResetAwareClassLoader {\n+\n+        public KieJarClassLoader(ClassLoader parentCL) {\n+            super(parentCL);\n+        }\n+\n+        @Override\n+        public URL getResource(String name) {\n+            URL url = super.getResource(name);\n+            if (url != null) {\n+                return url;\n             }\n+            List<URL> inJarURL = getJarResources(name);\n+            return !inJarURL.isEmpty() ? inJarURL.get(0) : null;\n+        }\n \n-            classLoader = ProjectClassLoader.createProjectClassLoader(new URLClassLoader(urls, getClass().getClassLoader()));\n+        @Override\n+        public Enumeration<URL> getResources(String name) throws IOException {\n+            Enumeration<URL> url = super.getResources(name);\n+            if (url.hasMoreElements()) {\n+                return url;\n+            }\n+            List<URL> inJarURL = getJarResources(name);\n+            return enumeration(inJarURL);\n+        }\n+\n+        @Override\n+        public void reset(AFReleaseId releaseId) {\n+            jars.clear();\n+            init(getResolverFor(getClassLoader(), releaseId, false));\n+        }\n+    }\n+\n+    private void initClassLoader() {\n+\n+        KieJarClassLoader kieParentCL = new KieJarClassLoader(getClass().getClassLoader());\n+        ResourceProvider resourceProvider = new ResourceProvider() {\n+\n+            @Override\n+            public URL getResource(String name) {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0) : null;\n+            }\n+\n+            @Override\n+            public InputStream getResourceAsStream(String name) throws IOException {\n+                List<URL> resources = getJarResources(name);\n+                return !resources.isEmpty() ? resources.get(0).openStream() : null;\n+            }\n+\n+        };\n+        projectClassLoader = ProjectClassLoader.createProjectClassLoader(kieParentCL, resourceProvider);\n+\n+    }\n \n-            if (kieModule != null) {\n-                Map<String, byte[]> classes = kieModule.getClassesMap();\n-                for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n-                    classLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+    private List<URL> getJarResources(String name) {\n+        List<URL> result = new ArrayList<>();\n+        for (URL url : jars) {\n+            try {\n+                String urlToString = url.toString();\n+                if (!urlToString.endsWith(\".jar\")) {\n+                    continue;\n                 }\n+                URL tmp = null;\n+                if (!urlToString.startsWith(\"jar:\")) {\n+                    tmp = new URL(\"jar:\" + urlToString + \"!/\" + name);\n+                } else {\n+                    tmp = new URL(urlToString + \"!/\" + name);\n+                }\n+\n+                tmp.getContent();\n+                log.info(\"found {} in {}\", tmp, jars);\n+                result.add(tmp);\n+            } catch (IOException e) {\n+                log.trace(\"Failed to load resource {} in {}\", name, url);\n             }\n         }\n-        return classLoader;\n+        return result;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        if (projectClassLoader == null) {\n+            initClassLoader();\n+        }\n+        return projectClassLoader;\n     }\n \n     private void init(ArtifactResolver artifactResolver) {\n         if (artifactResolver == null) {\n             return;\n         }\n+        initClassLoader();\n \n+        List<AFReleaseId> releasesId = new ArrayList<>();\n         if (releaseId != null) {\n-            addArtifact(artifactResolver.resolveArtifact(releaseId));\n+            releasesId.add(releaseId);\n         }\n         if ( kieModule != null && kieModule.getPomModel() != null ) {\n             for ( AFReleaseId releaseId : kieModule.getPomModel().getDependencies(dependencyFilter) ) {\n-                addArtifact( artifactResolver.resolveArtifact( releaseId ) );\n+                releasesId.add(releaseId);\n             }\n         } else {\n             for ( DependencyDescriptor dep : artifactResolver.getAllDependecies( dependencyFilter ) ) {\n-                addArtifact( artifactResolver.resolveArtifact( dep.getReleaseId() ) );\n+                releasesId.add(dep.getReleaseId());\n             }\n         }\n \n+        classesMap = new HashMap<>();\n+        for (AFReleaseId rId : releasesId) {\n+            ArtifactLocation artifactLocation = artifactResolver.resolveArtifactLocation(rId);\n+            if (artifactLocation.isClassPath()) {\n+                log.info(\"Artifact {} is local\", artifactLocation.getArtifact());\n+            }\n+            addArtifact(artifactLocation);\n+        }\n+\n+        for (Map.Entry<String, byte[]> entry : classesMap.entrySet()) {\n+            projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+        }\n+\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n+\n+        if (kieModule != null) {\n+            Map<String, byte[]> classes = kieModule.getClassesMap();\n+            for (Map.Entry<String, byte[]> entry : classes.entrySet()) {\n+                projectClassLoader.storeClass(convertResourceToClassName(entry.getKey()), entry.getKey(), entry.getValue());\n+            }\n+        }\n     }\n \n     private void init(List<URI> dependencies) {\n         for (URI uri : dependencies) {\n-            addJar( new File(uri), uri );\n+            try {\n+                addJar(uri.toURL());\n+            } catch (MalformedURLException e) {\n+                log.error(\"Cannot add URL resource\", e);\n+            }\n         }\n         packages.addAll(classes.keySet());\n         packages.addAll(rulesByPackage.keySet());\n     }\n \n-    private void addArtifact(Artifact artifact) {\n-        if (artifact != null && artifact.getExtension() != null && artifact.getExtension().equals(\"jar\")) {\n-            File jarFile = artifact.getFile();\n-            addJar( jarFile, jarFile.toURI() );\n+    private void addArtifact(ArtifactLocation artifactLocation) {\n+        if (artifactLocation != null && artifactLocation.getArtifact().getExtension() != null && artifactLocation.getArtifact().getExtension().equals(\"jar\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDg0NA=="}, "originalCommit": {"oid": "9a837e9d6293e8803416b08623f71f48e0ea3577"}, "originalPosition": 267}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45259015ac7010cd1fede495b3bdaa0bab17510a", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/45259015ac7010cd1fede495b3bdaa0bab17510a", "committedDate": "2020-06-23T09:02:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment\n\nAdding support for in jar artifacts. providing artifacts isolation from\nparent class loader."}, "afterCommit": {"oid": "d6df1a92f548dbc00bcb7fbaa4e9f95604a967c1", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/d6df1a92f548dbc00bcb7fbaa4e9f95604a967c1", "committedDate": "2020-06-26T07:02:26Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment\n\nAdding support for in jar artifacts. providing artifacts isolation from\nparent class loader."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6df1a92f548dbc00bcb7fbaa4e9f95604a967c1", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/d6df1a92f548dbc00bcb7fbaa4e9f95604a967c1", "committedDate": "2020-06-26T07:02:26Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment\n\nAdding support for in jar artifacts. providing artifacts isolation from\nparent class loader."}, "afterCommit": {"oid": "242819f1e84db62616b837475baa2c7a3b4988f7", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/242819f1e84db62616b837475baa2c7a3b4988f7", "committedDate": "2020-07-30T06:57:21Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment\n\nAdding support for in jar artifacts. providing artifacts isolation from\nparent class loader."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "242819f1e84db62616b837475baa2c7a3b4988f7", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/242819f1e84db62616b837475baa2c7a3b4988f7", "committedDate": "2020-07-30T06:57:21Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment\n\nAdding support for in jar artifacts. providing artifacts isolation from\nparent class loader."}, "afterCommit": {"oid": "167b2467a1101d2d9ad8b03205ee0d3144245d0f", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/167b2467a1101d2d9ad8b03205ee0d3144245d0f", "committedDate": "2020-08-11T15:50:54Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167b2467a1101d2d9ad8b03205ee0d3144245d0f", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/167b2467a1101d2d9ad8b03205ee0d3144245d0f", "committedDate": "2020-08-11T15:50:54Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "209b3648bf6ec4e9fdc64c7c437e76ee5c97e3a4", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/209b3648bf6ec4e9fdc64c7c437e76ee5c97e3a4", "committedDate": "2020-08-11T16:36:16Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9068cb2baba1aeac1abe25673c26801eff7d4f16", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/9068cb2baba1aeac1abe25673c26801eff7d4f16", "committedDate": "2020-08-11T16:41:18Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "209b3648bf6ec4e9fdc64c7c437e76ee5c97e3a4", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/209b3648bf6ec4e9fdc64c7c437e76ee5c97e3a4", "committedDate": "2020-08-11T16:36:16Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "9068cb2baba1aeac1abe25673c26801eff7d4f16", "author": {"user": null}, "url": "https://github.com/kiegroup/drools/commit/9068cb2baba1aeac1abe25673c26801eff7d4f16", "committedDate": "2020-08-11T16:41:18Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1568, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}