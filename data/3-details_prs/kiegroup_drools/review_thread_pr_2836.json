{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODA4MDE5", "number": 2836, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoyNjowNVrODtaHAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0MjowMFrODxmxGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQwMjg4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/enums/StatusCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoyNjowNVrOF-z7-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMDo1MFrOGC2epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNjk2OQ==", "bodyText": "Can you add a small javadoc for each status to describe when it is used? It is not clear to me DONE vs OK/FAIL", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401406969", "createdAt": "2020-04-01T07:26:05Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/enums/StatusCode.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n public enum StatusCode {\n+    DONE(\"DONE\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MjkxOA==", "bodyText": "Done", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405642918", "createdAt": "2020-04-08T16:10:50Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/enums/StatusCode.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n public enum StatusCode {\n+    DONE(\"DONE\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNjk2OQ=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQzMTE3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNDo1OVrOF-0NXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMDo1NFrOGC2exw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMTQyMw==", "bodyText": "Is it possible to keep track of the fact that we are using default value for this parameter (a status field in ParameterInfo or something similar)?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401411423", "createdAt": "2020-04-01T07:34:59Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -71,10 +74,33 @@ public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlMo\n     @Override\n     public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n         logger.debug(\"evaluate {} {}\", model, context);\n+        addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n         return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n     }\n \n+    /**\n+     * Add missing input values if defined in original PMML as <b>missingValueReplacement</b>.\n+     * <p>\n+     * \"missingValueReplacement: If this attribute is specified then a missing input value is automatically replaced by the given value.\n+     * That is, the model itself works as if the given value was found in the original input. \"\n+     * @param model\n+     * @param context\n+     * @see <a href=\"http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD\">MISSING-VALUE-TREATMENT-METHOD</a>\n+     */\n+    protected void addMissingValuesReplacements(KiePMMLModel model, PMMLContext context) {\n+        logger.debug(\"addMissingValuesReplacements {} {}\", model, context);\n+        final PMMLRequestData requestData = context.getRequestData();\n+        final Map<String, ParameterInfo> mappedRequestParams = requestData.getMappedRequestParams();\n+        final Map<String, Object> missingValueReplacementMap = model.getMissingValueReplacementMap();\n+        missingValueReplacementMap.forEach((fieldName, missingValueReplacement) -> {\n+            if (!mappedRequestParams.containsKey(fieldName)) {\n+                logger.debug(\"missingValueReplacement {} {}\", fieldName, missingValueReplacement);\n+                requestData.addRequestParam(fieldName, missingValueReplacement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0Mjk1MQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405642951", "createdAt": "2020-04-08T16:10:54Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -71,10 +74,33 @@ public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlMo\n     @Override\n     public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n         logger.debug(\"evaluate {} {}\", model, context);\n+        addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n         return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n     }\n \n+    /**\n+     * Add missing input values if defined in original PMML as <b>missingValueReplacement</b>.\n+     * <p>\n+     * \"missingValueReplacement: If this attribute is specified then a missing input value is automatically replaced by the given value.\n+     * That is, the model itself works as if the given value was found in the original input. \"\n+     * @param model\n+     * @param context\n+     * @see <a href=\"http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD\">MISSING-VALUE-TREATMENT-METHOD</a>\n+     */\n+    protected void addMissingValuesReplacements(KiePMMLModel model, PMMLContext context) {\n+        logger.debug(\"addMissingValuesReplacements {} {}\", model, context);\n+        final PMMLRequestData requestData = context.getRequestData();\n+        final Map<String, ParameterInfo> mappedRequestParams = requestData.getMappedRequestParams();\n+        final Map<String, Object> missingValueReplacementMap = model.getMissingValueReplacementMap();\n+        missingValueReplacementMap.forEach((fieldName, missingValueReplacement) -> {\n+            if (!mappedRequestParams.containsKey(fieldName)) {\n+                logger.debug(\"missingValueReplacement {} {}\", fieldName, missingValueReplacement);\n+                requestData.addRequestParam(fieldName, missingValueReplacement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMTQyMw=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQzNzMyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNjo0NFrOF-0RGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1NDowOVrOGDRzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjM3OA==", "bodyText": "What does Drooled mean?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401412378", "createdAt": "2020-04-01T07:36:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie</groupId>\n+    <artifactId>kie-pmml-models</artifactId>\n+    <version>7.36.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-models-drooled</artifactId>\n+\n+  <name>KIE :: PMML :: Models :: Drooled</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MDY1OA==", "bodyText": "Add description. Replaced with Drools", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406090658", "createdAt": "2020-04-09T09:54:09Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie</groupId>\n+    <artifactId>kie-pmml-models</artifactId>\n+    <version>7.36.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-models-drooled</artifactId>\n+\n+  <name>KIE :: PMML :: Models :: Drooled</name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjM3OA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA1NjQyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyMzoxMVrOF-6Szg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo1NzoyNlrOF_vWFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA==", "bodyText": "Can you please explain why it is good to change settings of this plugin.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401511118", "createdAt": "2020-04-01T10:23:11Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-archetype-plugin</artifactId>\n+        <configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMTE4MQ==", "bodyText": "HI @jiripetrlik\nI made some changes here:\n\n(about eof) it was a to get rid of a warning during execution;\nincrease debug output to better understand what happen during execution\nReplaced statically defined version with property-defined one (this is related to warnings that are generated by some script running in CI); to implement that modification, I also had to move resources to \"filtered\" resources folder", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402111181", "createdAt": "2020-04-02T07:40:21Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-archetype-plugin</artifactId>\n+        <configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MjE1OA==", "bodyText": "@gitgabrio\nAnd do you plan to remove it before PR is ready to be merged?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402372158", "createdAt": "2020-04-02T14:47:17Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-archetype-plugin</artifactId>\n+        <configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDMxMA==", "bodyText": "@jiripetrlik\nNope - this is meant to be the final (?) implementation (unless for bugs). Is there anything you would prefer to change?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402380310", "createdAt": "2020-04-02T14:57:26Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-archetype-plugin</artifactId>\n+        <configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA4NDEyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDozMTowNFrOF-6jvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo0ODoxOVrOF_u5jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw==", "bodyText": "Can you please describe the motivation behind \"drooled\" module? What is it for?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401515453", "createdAt": "2020-04-01T10:31:04Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMjQ3Mw==", "bodyText": "@jiripetrlik\nAll models using rule engine will have some common code (pls look at Drooled Executor and factories). Since I already know there will be more then one \"rule-based\" implementation, I've put such shared code in this module. All the rule-based implementations have to \"depend\" on this one. It will also allow me to manage common feature/behavior in one single place", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402112473", "createdAt": "2020-04-02T07:42:53Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MzAwNg==", "bodyText": "@gitgabrio Thank you for explanation.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402373006", "createdAt": "2020-04-02T14:48:19Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA5MjgzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDozMzozMVrOF-6pOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo1ODo0M1rOF_vacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng==", "bodyText": "Please handle this exception properly.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401516856", "createdAt": "2020-04-01T10:33:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNDc4MA==", "bodyText": "@jiripetrlik\nTBH, this method is for development only - I'm not expecting rules to be dumped every time and I will remove it soon before merge (I'll add a TODO for this). Moreover, the only reasonable way I see to deal with it it would be to just ignore it, because I do not care at all if the \"dump\" does not work for some reason - what I'm concerned about is if the actual execution fails. Does this make sense? Do you have some suggestion?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402114780", "createdAt": "2020-04-02T07:47:08Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NTI1OA==", "bodyText": "@gitgabrio\nI think that if you plan to remove it before PR is ready it is not a problem. In general I think it is good to rethrow in RuntimeException.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402375258", "createdAt": "2020-04-02T14:51:08Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MTQyNQ==", "bodyText": "\ud83d\udc4d\nPerfectly agree: my plan is to remove that development-only code", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402381425", "createdAt": "2020-04-02T14:58:43Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA5NjQ0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDozNDozMVrOF-6rag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0Nzo0N1rOF_fKTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNzQxOA==", "bodyText": "Is this this code commented out intentionally?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401517418", "createdAt": "2020-04-01T10:34:31Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {\n+\n+            public void matchCancelled(MatchCancelledEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void matchCreated(MatchCreatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterMatchFired(AfterMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPopped(AgendaGroupPoppedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPushed(AgendaGroupPushedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeMatchFired(BeforeMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+        };\n+        kSession.addEventListener(agendaEventListener);\n+    }\n+\n+//    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNTE0OA==", "bodyText": "@jiripetrlik\nRremoved - forgotten leftover", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402115148", "createdAt": "2020-04-02T07:47:47Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {\n+\n+            public void matchCancelled(MatchCancelledEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void matchCreated(MatchCreatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterMatchFired(AfterMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPopped(AgendaGroupPoppedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPushed(AgendaGroupPushedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeMatchFired(BeforeMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+        };\n+        kSession.addEventListener(agendaEventListener);\n+    }\n+\n+//    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNzQxOA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDExODA1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0MToxMFrOF-65Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo1MzoxNVrOF_vI5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ==", "bodyText": "I would suggest to add the same implementation to all branches for readability.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401520911", "createdAt": "2020-04-01T10:41:10Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final Queue<KiePMMLDrooledRule> rules;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        this.compoundPredicate = compoundPredicate;\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.rules = rules;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.info(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNjg1Ng==", "bodyText": "@jiripetrlik\nI do not follow you. Surrogate Compounds are actually dealt with as if they are a new \"Node\" - so the logic is completely different compared to the others", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402116856", "createdAt": "2020-04-02T07:50:23Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final Queue<KiePMMLDrooledRule> rules;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        this.compoundPredicate = compoundPredicate;\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.rules = rules;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.info(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NjkzNQ==", "bodyText": "I meant to put for all \"cases\" AND, OR, XOR the same call with break.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402376935", "createdAt": "2020-04-02T14:53:15Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final Queue<KiePMMLDrooledRule> rules;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        this.compoundPredicate = compoundPredicate;\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.rules = rules;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.info(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDExOTQ3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0MTozOVrOF-65-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1MTo1NFrOF_fUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMTE0Ng==", "bodyText": "Please handle exception properly.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401521146", "createdAt": "2020-04-01T10:41:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledAST;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetField;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrFactory.getBaseDescr;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.getKiePMMLDrooledAST;\n+\n+/**\n+ * Class used to generate <code>KiePMMLTreeModel</code> out of a <code>DataDictionary</code> and a <code>TreeModel</code>\n+ */\n+public class KiePMMLTreeModelFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelFactory.class.getName());\n+\n+    private KiePMMLTreeModelFactory() {\n+    }\n+\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+        logger.info(\"getKiePMMLTreeModel {}\", model);\n+        String name = model.getModelName();\n+        Optional<String> targetFieldName = getTargetField(dataDictionary, model);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        final KiePMMLDrooledAST kiePMMLDrooledAST = getKiePMMLDrooledAST(dataDictionary, model, fieldTypeMap);\n+        final PackageDescr baseDescr = getBaseDescr(kiePMMLDrooledAST, name.toLowerCase());\n+        // TODO {gcardosi} Dev debug only - to be removed\n+        try {\n+            String string = new DrlDumper().dump(baseDescr);\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNzc4Nw==", "bodyText": "@jiripetrlik\nSee my previous answer - this snippet is to be completely removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402117787", "createdAt": "2020-04-02T07:51:54Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledAST;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetField;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrFactory.getBaseDescr;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.getKiePMMLDrooledAST;\n+\n+/**\n+ * Class used to generate <code>KiePMMLTreeModel</code> out of a <code>DataDictionary</code> and a <code>TreeModel</code>\n+ */\n+public class KiePMMLTreeModelFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelFactory.class.getName());\n+\n+    private KiePMMLTreeModelFactory() {\n+    }\n+\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+        logger.info(\"getKiePMMLTreeModel {}\", model);\n+        String name = model.getModelName();\n+        Optional<String> targetFieldName = getTargetField(dataDictionary, model);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        final KiePMMLDrooledAST kiePMMLDrooledAST = getKiePMMLDrooledAST(dataDictionary, model, fieldTypeMap);\n+        final PackageDescr baseDescr = getBaseDescr(kiePMMLDrooledAST, name.toLowerCase());\n+        // TODO {gcardosi} Dev debug only - to be removed\n+        try {\n+            String string = new DrlDumper().dump(baseDescr);\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMTE0Ng=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDEyNzM2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/test/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelPredicateASTFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NDowNVrOF-6_BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1NDo0MlrOF_fbOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjQzNg==", "bodyText": "Seems like implementation is missing.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401522436", "createdAt": "2020-04-01T10:44:05Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/test/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelPredicateASTFactoryTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import org.junit.Test;\n+\n+public class KiePMMLTreeModelPredicateASTFactoryTest {\n+\n+    @Test\n+    public void declareRuleFromPredicate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExOTQ4MQ==", "bodyText": "@jiripetrlik\nYes - not sure if this Test class is actually needed at all - basically only specific behavior is an \"instance of\".", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402119481", "createdAt": "2020-04-02T07:54:42Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/test/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelPredicateASTFactoryTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import org.junit.Test;\n+\n+public class KiePMMLTreeModelPredicateASTFactoryTest {\n+\n+    @Test\n+    public void declareRuleFromPredicate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjQzNg=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDEzMzgxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NTo1NlrOF-7DBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NTo1NlrOF-7DBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzQ2MA==", "bodyText": "Please remove debugging outputs.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523460", "createdAt": "2020-04-01T10:45:56Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDEzNDM4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NjowOVrOF-7DZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1ODoxMFrOF_fi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzU1OA==", "bodyText": "Please remove.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523558", "createdAt": "2020-04-01T10:46:09Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyMTQ2Ng==", "bodyText": "@jiripetrlik\nThose drl files where leftover - deleted them", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402121466", "createdAt": "2020-04-02T07:58:10Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzU1OA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDEzNTQ5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NjozMFrOF-7EHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1ODoyNVrOF_fjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzc0MA==", "bodyText": "Is this commented out intentionally?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523740", "createdAt": "2020-04-01T10:46:30Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}*/\n+\n+//rule \"Get Tree\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyMTYxOQ==", "bodyText": "@jiripetrlik\nSee above", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402121619", "createdAt": "2020-04-02T07:58:25Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}*/\n+\n+//rule \"Get Tree\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzc0MA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDEzODkxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/test/java/org/kie/pmml/models/tree/evaluator/TreeModelCompilationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NzozOVrOF-7GUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NzozOVrOF-7GUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDMwNA==", "bodyText": "Please handle this exception properly.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401524304", "createdAt": "2020-04-01T10:47:39Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/test/java/org/kie/pmml/models/tree/evaluator/TreeModelCompilationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+\n+import org.drools.compiler.compiler.DrlParser;\n+import org.junit.Test;\n+import org.kie.test.util.filesystem.FileUtils;\n+\n+import static org.junit.Assert.fail;\n+\n+public class TreeModelCompilationTest {\n+\n+    @Test\n+    public void testTreeModelFile() throws Exception {\n+        DrlParser drlParser = new DrlParser();\n+        File file = FileUtils.getFile(\"TreeModel.drl\");\n+        String content = new String(Files.readAllBytes(file.toPath()));\n+        try {\n+            drlParser.parse(false, content);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE0NjAyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0OTo0NFrOF-7KnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowOTozNFrOF_f7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTQwNA==", "bodyText": "Can we avoid of using break here?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401525404", "createdAt": "2020-04-01T10:49:44Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLNode.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLBase;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KiePMMLNode extends AbstractKiePMMLBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLNode.class);\n+\n+    private String score;\n+    private String result;\n+    private KiePMMLPredicate kiePMMLPredicate;\n+    private List<KiePMMLNode> kiePMMLNodes;\n+\n+    private KiePMMLNode(String name, List<KiePMMLExtension> extensions) {\n+        super(name, extensions);\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions) {\n+        return new Builder(name, extensions);\n+    }\n+\n+    public boolean evaluate(Map<String, Object> values) {\n+        result = null;\n+        logger.info(\"{}: evaluate {}\", id, this.score);\n+        if (kiePMMLPredicate != null && kiePMMLPredicate.evaluate(values)) {\n+            logger.info(\"{}: matching predicate, evaluating... \", id);\n+            logger.info(\"{}: preliminary set {}\", id, score);\n+            result = score;\n+            if (kiePMMLNodes != null) {\n+                for (KiePMMLNode kiePMMLNode : kiePMMLNodes) {\n+                    if (kiePMMLNode.evaluate(values)) {\n+                        logger.info(\"{}: matching node, update set {}\", id, kiePMMLNode.result);\n+                        result = kiePMMLNode.result;\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzc1OQ==", "bodyText": "@jiripetrlik\nRemoved this (and others) leftover classes", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402127759", "createdAt": "2020-04-02T08:09:34Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLNode.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLBase;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KiePMMLNode extends AbstractKiePMMLBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLNode.class);\n+\n+    private String score;\n+    private String result;\n+    private KiePMMLPredicate kiePMMLPredicate;\n+    private List<KiePMMLNode> kiePMMLNodes;\n+\n+    private KiePMMLNode(String name, List<KiePMMLExtension> extensions) {\n+        super(name, extensions);\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions) {\n+        return new Builder(name, extensions);\n+    }\n+\n+    public boolean evaluate(Map<String, Object> values) {\n+        result = null;\n+        logger.info(\"{}: evaluate {}\", id, this.score);\n+        if (kiePMMLPredicate != null && kiePMMLPredicate.evaluate(values)) {\n+            logger.info(\"{}: matching predicate, evaluating... \", id);\n+            logger.info(\"{}: preliminary set {}\", id, score);\n+            result = score;\n+            if (kiePMMLNodes != null) {\n+                for (KiePMMLNode kiePMMLNode : kiePMMLNodes) {\n+                    if (kiePMMLNode.evaluate(values)) {\n+                        logger.info(\"{}: matching node, update set {}\", id, kiePMMLNode.result);\n+                        result = kiePMMLNode.result;\n+                        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTQwNA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE0OTI4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/BOOLEAN_OPERATOR.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1MDo1MVrOF-7MwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxNTo0NVrOF_gIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTk1Mg==", "bodyText": "Please split this stream to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401525952", "createdAt": "2020-04-01T10:50:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/BOOLEAN_OPERATOR.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_CompoundPredicate>CompoundPredicate</a>\n+ */\n+public enum BOOLEAN_OPERATOR {\n+\n+    OR(\"or\"),\n+    AND(\"and\"),\n+    XOR(\"xor\"),\n+    SURROGATE(\"surrogate\");\n+\n+    private String name;\n+\n+    BOOLEAN_OPERATOR(String name) {\n+        this.name = name;\n+    }\n+\n+    public static BOOLEAN_OPERATOR byName(String name) {\n+        return Arrays.stream(BOOLEAN_OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTE0Mg==", "bodyText": "@jiripetrlik\nDone", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131142", "createdAt": "2020-04-02T08:15:45Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/BOOLEAN_OPERATOR.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_CompoundPredicate>CompoundPredicate</a>\n+ */\n+public enum BOOLEAN_OPERATOR {\n+\n+    OR(\"or\"),\n+    AND(\"and\"),\n+    XOR(\"xor\"),\n+    SURROGATE(\"surrogate\");\n+\n+    private String name;\n+\n+    BOOLEAN_OPERATOR(String name) {\n+        this.name = name;\n+    }\n+\n+    public static BOOLEAN_OPERATOR byName(String name) {\n+        return Arrays.stream(BOOLEAN_OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTk1Mg=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE1MDE4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/OPERATOR.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1MTowOVrOF-7NVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxNTo1N1rOF_gJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjEwMQ==", "bodyText": "Please split to multiple lines.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401526101", "createdAt": "2020-04-01T10:51:09Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/OPERATOR.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdGroup_PREDICATE>PREDICATE</a>\n+ */\n+public enum OPERATOR {\n+\n+    EQUAL(\"equal\", \"==\"),\n+    NOT_EQUAL(\"notEqual\", \"!=\"),\n+    LESS_THAN(\"lessThan\", \"<\"),\n+    LESS_OR_EQUAL(\"lessOrEqual\", \"<=\"),\n+    GREATER_THAN(\"greaterThan\", \">\"),\n+    GREATER_OR_EQUAL(\"greaterOrEqual\", \">=\"),\n+    IS_MISSING(\"isMissing\", \"\"),\n+    IS_NOT_MISSING(\"isNotMissing\", \"\");\n+\n+    private final String name;\n+    private final String operator;\n+\n+    OPERATOR(String name, String operator) {\n+        this.name = name;\n+        this.operator = operator;\n+    }\n+\n+    public static OPERATOR byName(String name) {\n+        return Arrays.stream(OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTI1OA==", "bodyText": "@jiripetrlik\nDone", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131258", "createdAt": "2020-04-02T08:15:57Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/OPERATOR.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdGroup_PREDICATE>PREDICATE</a>\n+ */\n+public enum OPERATOR {\n+\n+    EQUAL(\"equal\", \"==\"),\n+    NOT_EQUAL(\"notEqual\", \"!=\"),\n+    LESS_THAN(\"lessThan\", \"<\"),\n+    LESS_OR_EQUAL(\"lessOrEqual\", \"<=\"),\n+    GREATER_THAN(\"greaterThan\", \">\"),\n+    GREATER_OR_EQUAL(\"greaterOrEqual\", \">=\"),\n+    IS_MISSING(\"isMissing\", \"\"),\n+    IS_NOT_MISSING(\"isNotMissing\", \"\");\n+\n+    private final String name;\n+    private final String operator;\n+\n+    OPERATOR(String name, String operator) {\n+        this.name = name;\n+        this.operator = operator;\n+    }\n+\n+    public static OPERATOR byName(String name) {\n+        return Arrays.stream(OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjEwMQ=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE1MzQ0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/KiePMMLNodeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1MjoxMVrOF-7PdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxNjoyM1rOF_gKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjY0NA==", "bodyText": "Please remove PMML from this file.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401526644", "createdAt": "2020-04-01T10:52:11Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/KiePMMLNodeTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLSimplePredicate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLNodeTest {\n+\n+    private final static List<KiePMMLNode> NODES = new ArrayList<>();\n+    private final String SCORE = \"SCORE\";\n+    private final String WILL_PLAY = \"will play\";\n+    private final String NO_PLAY = \"no play\";\n+    private final String MAY_PLAY = \"may play\";\n+    private final String HUMIDITY = \"humidity\";\n+    private final String TEMPERATURE = \"temperature\";\n+    private final String OUTLOOK = \"outlook\";\n+    private final String SUNNY = \"sunny\";\n+    private final String WINDY = \"windy\";\n+    private final String OVERCAST = \"overcast\";\n+    private final String RAIN = \"rain\";\n+\n+    private KiePMMLNode WILL_PLAY_NODE;\n+\n+    /*\n+    http://dmg.org/pmml/v4-4/TreeModel.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTQ2NA==", "bodyText": "@jiripetrlik\nDeleted file", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131464", "createdAt": "2020-04-02T08:16:23Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/KiePMMLNodeTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLSimplePredicate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLNodeTest {\n+\n+    private final static List<KiePMMLNode> NODES = new ArrayList<>();\n+    private final String SCORE = \"SCORE\";\n+    private final String WILL_PLAY = \"will play\";\n+    private final String NO_PLAY = \"no play\";\n+    private final String MAY_PLAY = \"may play\";\n+    private final String HUMIDITY = \"humidity\";\n+    private final String TEMPERATURE = \"temperature\";\n+    private final String OUTLOOK = \"outlook\";\n+    private final String SUNNY = \"sunny\";\n+    private final String WINDY = \"windy\";\n+    private final String OVERCAST = \"overcast\";\n+    private final String RAIN = \"rain\";\n+\n+    private KiePMMLNode WILL_PLAY_NODE;\n+\n+    /*\n+    http://dmg.org/pmml/v4-4/TreeModel.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjY0NA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE2MDE5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLCompoundPredicateTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NDoyMFrOF-7T6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxNjozM1rOF_gKcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzc4NA==", "bodyText": "It is possible to ignore unfinished tests using Ignore annotation. It is better because such tests will appear in junit statistics and we will not forget to finish them.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401527784", "createdAt": "2020-04-01T10:54:20Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLCompoundPredicateTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLCompoundPredicateTest {\n+\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static BOOLEAN_OPERATOR _BOOLEAN_OPERATOR = BOOLEAN_OPERATOR.OR;\n+    private final static List<KiePMMLPredicate> PREDICATES = new ArrayList<>();\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLCompoundPredicate retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertNull(retrieved.getKiePMMLPredicates());\n+        retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .withKiePMMLPredicates(PREDICATES)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertEquals(PREDICATES, retrieved.getKiePMMLPredicates());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTU2OA==", "bodyText": "@jiripetrlik\nDeleted file", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131568", "createdAt": "2020-04-02T08:16:33Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLCompoundPredicateTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLCompoundPredicateTest {\n+\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static BOOLEAN_OPERATOR _BOOLEAN_OPERATOR = BOOLEAN_OPERATOR.OR;\n+    private final static List<KiePMMLPredicate> PREDICATES = new ArrayList<>();\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLCompoundPredicate retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertNull(retrieved.getKiePMMLPredicates());\n+        retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .withKiePMMLPredicates(PREDICATES)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertEquals(PREDICATES, retrieved.getKiePMMLPredicates());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzc4NA=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDE2MTM2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLSimplePredicateTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NDo0MVrOF-7UqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxNjo0MVrOF_gKrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzk3Ng==", "bodyText": "Please rather ignore unfinished tests.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401527976", "createdAt": "2020-04-01T10:54:41Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLSimplePredicateTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLSimplePredicateTest {\n+\n+    private final static String NAME = \"NAME\";\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static OPERATOR _OPERATOR = OPERATOR.GREATER_OR_EQUAL;\n+    private final static Object VALUE = \"VALUE\";\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLSimplePredicate retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertNull(retrieved.getValue());\n+        retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .withValue(VALUE)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertEquals(VALUE, retrieved.getValue());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTYyOQ==", "bodyText": "@jiripetrlik\nDeleted file", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131629", "createdAt": "2020-04-02T08:16:41Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLSimplePredicateTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLSimplePredicateTest {\n+\n+    private final static String NAME = \"NAME\";\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static OPERATOR _OPERATOR = OPERATOR.GREATER_OR_EQUAL;\n+    private final static Object VALUE = \"VALUE\";\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLSimplePredicate retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertNull(retrieved.getValue());\n+        retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .withValue(VALUE)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertEquals(VALUE, retrieved.getValue());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzk3Ng=="}, "originalCommit": {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM1NzM5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxNzo1NlrOGAKQTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxNzo1NlrOGAKQTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTE5Ng==", "bodyText": "This is the StringUtils.join logic and it's repeated a few times", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821196", "createdAt": "2020-04-03T08:17:56Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM2MDg4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxODoyN1rOGAKSBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxODoyN1rOGAKSBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTYzOQ==", "bodyText": "StringUtils.join", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821639", "createdAt": "2020-04-03T08:18:27Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM2MTcwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxODozMlrOGAKSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxODozMlrOGAKSbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTc0MA==", "bodyText": "StringUtils.join", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821740", "createdAt": "2020-04-03T08:18:32Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" && \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        notBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareExistsConstraint(final CEDescrBuilder<?, ?> existsBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" || \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM2MjE1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxODozOFrOGAKSpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxODozOFrOGAKSpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTc5Nw==", "bodyText": "StringUtils.join", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821797", "createdAt": "2020-04-03T08:18:38Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" && \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        notBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareExistsConstraint(final CEDescrBuilder<?, ?> existsBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" || \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        existsBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintIn(final String patternType, final List<Object> values) {\n+        String constraints = getInNotInConstraint(values);\n+        builder.pattern(patternType).constraint(constraints);\n+    }\n+\n+    protected void declareConstraintNotIn(final String patternType, final List<Object> values) {\n+        String constraints = getInNotInConstraint(values);\n+        builder.not().pattern(patternType).constraint(constraints);\n+    }\n+\n+    protected void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue) {\n+        builder.pattern(ifBreakField).id(INPUT_FIELD, false);\n+        final ConditionalBranchDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> condBranchBuilder = builder.conditionalBranch();\n+        condBranchBuilder.condition().constraint(String.format(INPUT_FIELD_CONDITIONAL, ifBreakOperator, ifBreakValue));\n+        condBranchBuilder.consequence().breaking(true).name(BREAK_LABEL);\n+    }\n+\n+    protected String getInNotInConstraint(final List<Object> values) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        constraintBuilder.append(\"(\");\n+        for (int i = 0; i < values.size(); i++) {\n+            Object value = values.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\", \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODQ0Mzg4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMTo1OVrOGAK_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMTo1OVrOGAK_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzM1OA==", "bodyText": "to be removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402833358", "createdAt": "2020-04-03T08:31:59Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        // TODO {gcardosi} Dev debug only - to be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODQ1NDA1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMzo0MVrOGALFfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMzo0MVrOGALFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNDgxMg==", "bodyText": "commmented code", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402834812", "createdAt": "2020-04-03T08:33:41Z", "author": {"login": "lucamolteni"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.dmg.pmml.False;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.True;\n+import org.dmg.pmml.tree.LeafNode;\n+import org.dmg.pmml.tree.Node;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.PATH_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>Node</code>\n+ */\n+public class KiePMMLTreeModelNodeASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelNodeASTFactory.class.getName());\n+\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final TreeModel.NoTrueChildStrategy noTrueChildStrategy;\n+\n+    private KiePMMLTreeModelNodeASTFactory(final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final TreeModel.NoTrueChildStrategy noTrueChildStrategy) {\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.noTrueChildStrategy = noTrueChildStrategy;\n+    }\n+\n+    public static KiePMMLTreeModelNodeASTFactory factory(final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final TreeModel.NoTrueChildStrategy noTrueChildStrategy) {\n+        return new KiePMMLTreeModelNodeASTFactory(fieldTypeMap, noTrueChildStrategy);\n+    }\n+\n+    public Queue<KiePMMLDrooledRule> declareRulesFromRootNode(final Node node, final String parentPath) {\n+        logger.debug(\"declareRulesFromRootNode {} {}\", node, parentPath);\n+        Queue<KiePMMLDrooledRule> toReturn = new LinkedList<>();\n+        declareRuleFromNode(node, parentPath, toReturn);\n+        return toReturn;\n+    }\n+\n+    protected void declareRuleFromNode(final Node node, final String parentPath,\n+                                       final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareRuleFromNode {} {}\", node, parentPath);\n+        if (isFinalLeaf(node)) {\n+            declareFinalRuleFromNode(node, parentPath, rules);\n+        } else {\n+            declareIntermediateRuleFromNode(node, parentPath, rules);\n+            if (TreeModel.NoTrueChildStrategy.RETURN_LAST_PREDICTION.equals(noTrueChildStrategy) && node.getScore() != null) {\n+                declareDefaultRuleFromNode(node, parentPath, rules);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is meant to be executed when <code>node</code> <b>is</b> a <i>final leaf</i>\n+     * @param node\n+     * @param parentPath\n+     * @param rules\n+     */\n+    protected void declareFinalRuleFromNode(final Node node,\n+                                            final String parentPath,\n+                                            final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareFinalRuleFromNode {} {}\", node, parentPath);\n+        final Predicate predicate = node.getPredicate();\n+        // This means the rule should not be created at all.\n+        // Different semantics has to be implemented if the \"False\"/\"True\" predicates are declared inside\n+        // an XOR compound predicate\n+        if (predicate instanceof False) {\n+            return;\n+        }\n+        String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore().toString());\n+        if (!(predicate instanceof True)) {\n+            KiePMMLTreeModelPredicateASTFactory.factory(fieldTypeMap, rules).declareRuleFromPredicate(predicate, parentPath, currentRule, node.getScore(), true);\n+        }\n+    }\n+\n+    /**\n+     * This method is meant to be executed when <code>node</code> <b>is not</b> a <i>final leaf</i>\n+     * @param node\n+     * @param parentPath\n+     * @param rules\n+     */\n+    protected void declareIntermediateRuleFromNode(final Node node,\n+                                                   final String parentPath,\n+                                                   final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareIntermediateRuleFromNode {} {}\", node, parentPath);\n+        final Predicate predicate = node.getPredicate();\n+        // This means the rule should not be created at all.\n+        // Different semantics has to be implemented if the \"False\"/\"True\" predicates are declared inside\n+        // an XOR compound predicate\n+        if (predicate instanceof False) {\n+            return;\n+        }\n+        String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore().toString());\n+//        if (predicate instanceof True) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjM0NTEzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0OTo0OVrOGCtqHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTowMlrOGC2fDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODM5Ng==", "bodyText": "Can you explain this method? Why are you returning the first element? It is deterministic only because getTargetFieldsTypeMap use a LinkedHasMap that should be an implementation detail (maybe we can use a SortedMap to make it evident?)", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405498396", "createdAt": "2020-04-08T12:49:49Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -44,10 +47,14 @@ private ModelUtils() {\n      * @param model\n      * @return\n      */\n-    public static Optional<String> getTargetField(DataDictionary dataDictionary, Model model) {\n+    public static Optional<String> getTargetFieldName(DataDictionary dataDictionary, Model model) {\n         return getTargetFields(dataDictionary, model).stream().map(KiePMMLNameOpType::getName).findFirst();\n     }\n \n+    public static DATA_TYPE getTargetFieldType(DataDictionary dataDictionary, Model model) {\n+        return getTargetFieldsTypeMap(dataDictionary, model).entrySet().iterator().next().getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzAyMA==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643020", "createdAt": "2020-04-08T16:11:02Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -44,10 +47,14 @@ private ModelUtils() {\n      * @param model\n      * @return\n      */\n-    public static Optional<String> getTargetField(DataDictionary dataDictionary, Model model) {\n+    public static Optional<String> getTargetFieldName(DataDictionary dataDictionary, Model model) {\n         return getTargetFields(dataDictionary, model).stream().map(KiePMMLNameOpType::getName).findFirst();\n     }\n \n+    public static DATA_TYPE getTargetFieldType(DataDictionary dataDictionary, Model model) {\n+        return getTargetFieldsTypeMap(dataDictionary, model).entrySet().iterator().next().getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODM5Ng=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjUzOTU1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledConstraint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozNTowNlrOGCviqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTowNlrOGC2fNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTI1Ng==", "bodyText": "Javadoc?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405529256", "createdAt": "2020-04-08T13:35:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledConstraint.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzA2MQ==", "bodyText": "Removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643061", "createdAt": "2020-04-08T16:11:06Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledConstraint.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledConstraint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTI1Ng=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU0MDc0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledAST.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozNToyNFrOGCvjbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyMzozNFrOGDQuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTQ1NQ==", "bodyText": "Why Queue?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405529455", "createdAt": "2020-04-08T13:35:24Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledAST.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Queue;\n+\n+public class KiePMMLDrooledAST {\n+\n+    private final Queue<KiePMMLDrooledType> types;\n+    private final Queue<KiePMMLDrooledRule> rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjkwMQ==", "bodyText": "REplaced with List", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072901", "createdAt": "2020-04-09T09:23:34Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledAST.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Queue;\n+\n+public class KiePMMLDrooledAST {\n+\n+    private final Queue<KiePMMLDrooledType> types;\n+    private final Queue<KiePMMLDrooledRule> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTQ1NQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU1Mjg3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozODoxM1rOGCvq7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyMzo0NVrOGDQuwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTM3NQ==", "bodyText": "Can you please add a javadoc?\nIt is \"drools-agnostic\" so maybe we can remove Drools from the name?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405531375", "createdAt": "2020-04-08T13:38:13Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledRule.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+\n+public class KiePMMLDrooledRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MzAyNg==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406073026", "createdAt": "2020-04-09T09:23:45Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledRule.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+\n+public class KiePMMLDrooledRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTM3NQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU1NDc3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTarget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozODozNlrOGCvsIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMToxMlrOGC2fhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTY4MQ==", "bodyText": "Javadoc?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405531681", "createdAt": "2020-04-08T13:38:36Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTarget.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledTarget extends KiePMMLDrooledConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzE0Mg==", "bodyText": "Removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643142", "createdAt": "2020-04-08T16:11:12Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTarget.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledTarget extends KiePMMLDrooledConstraint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTY4MQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU2MDU3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTypeField.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozOTo1N1rOGCvv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMToxOVrOGC2fvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMjYzNQ==", "bodyText": "Javadoc?\nDo you use this?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405532635", "createdAt": "2020-04-08T13:39:57Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTypeField.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Objects;\n+\n+public class KiePMMLDrooledTypeField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzE5Nw==", "bodyText": "Removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643197", "createdAt": "2020-04-08T16:11:19Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTypeField.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Objects;\n+\n+public class KiePMMLDrooledTypeField {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMjYzNQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU2NDE0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0MDo0OFrOGCvyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMToyNVrOGC2f7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMzIxNQ==", "bodyText": "To be removed/refactored", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405533215", "createdAt": "2020-04-08T13:40:48Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzI0NA==", "bodyText": "Removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643244", "createdAt": "2020-04-08T16:11:25Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMzIxNQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU2OTQzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0MjowMlrOGCv1Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyODo1N1rOGDQ6_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNDA1NQ==", "bodyText": "Can you please move it to a static final field?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405534055", "createdAt": "2020-04-08T13:42:02Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel drooledModel) {\n+        if (logger.isDebugEnabled()) {\n+            try {\n+                String string = new DrlDumper().dump(drooledModel.getPackageDescr());\n+                logger.debug(string);\n+            } catch (Exception e) {\n+                throw new KieEnumException(\"Failed to dump \" + drooledModel, e);\n+            }\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3NjE1OA==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406076158", "createdAt": "2020-04-09T09:28:57Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel drooledModel) {\n+        if (logger.isDebugEnabled()) {\n+            try {\n+                String string = new DrlDumper().dump(drooledModel.getPackageDescr());\n+                logger.debug(string);\n+            } catch (Exception e) {\n+                throw new KieEnumException(\"Failed to dump \" + drooledModel, e);\n+            }\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNDA1NQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU4NDAzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0NTowOVrOGCv-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTozMFrOGC2gHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjMwMg==", "bodyText": "It is not used", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405536302", "createdAt": "2020-04-08T13:45:09Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzI5NQ==", "bodyText": "Removed", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643295", "createdAt": "2020-04-08T16:11:30Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjMwMg=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYwNzkwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1MDoyOFrOGCwNXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1MjoyN1rOGDRvxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDE5MA==", "bodyText": "Can you please review Object kBuilder? Is it really needed?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405540190", "createdAt": "2020-04-08T13:50:28Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;\n+\n+    protected DrooledModelProvider() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTY2OA==", "bodyText": "@danielezonca\nYes, it is needed by the \"Drools\" implementations.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406089668", "createdAt": "2020-04-09T09:52:27Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;\n+\n+    protected DrooledModelProvider() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDE5MA=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYyNTI0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/tuples/KiePMMLOperatorValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NDowNlrOGCwYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1MjozNlrOGDRwDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mjk2NQ==", "bodyText": "Can you please create a asString() or similar to produce an equivalent method without overload toString with a specific meaning", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405542965", "createdAt": "2020-04-08T13:54:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/tuples/KiePMMLOperatorValue.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.tuples;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tupla representing the operator and the value to be applied to a given field\n+ */\n+public class KiePMMLOperatorValue {\n+\n+    public static final String VALUE_CONSTRAINT_PATTERN = \"value %s %s\";\n+    private final String operator;\n+    private final Object value;\n+\n+    public KiePMMLOperatorValue(String operator, Object value) {\n+        this.operator = operator;\n+        this.value = value;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTc0MQ==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406089741", "createdAt": "2020-04-09T09:52:36Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/tuples/KiePMMLOperatorValue.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.tuples;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tupla representing the operator and the value to be applied to a given field\n+ */\n+public class KiePMMLOperatorValue {\n+\n+    public static final String VALUE_CONSTRAINT_PATTERN = \"value %s %s\";\n+    private final String operator;\n+    private final Object value;\n+\n+    public KiePMMLOperatorValue(String operator, Object value) {\n+        this.operator = operator;\n+        this.value = value;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mjk2NQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYzNDY5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLFieldOperatorValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NjowOFrOGCwePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1MzowM1rOGDRxDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDUxMQ==", "bodyText": "Please verify that this toString is not used during code generation but only for logging purposes", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405544511", "createdAt": "2020-04-08T13:56:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLFieldOperatorValue.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+\n+/**\n+ * Class representing a <code>Pattern</code> with the referred field, its possible <code>KiePMMLOperatorValue</code>s and, eventually, nested <code>Pattern</code>s\n+ */\n+public class KiePMMLFieldOperatorValue {\n+\n+    public static final String NO_FIELD_CONSTRAINT_PATTERN = \"(%s)\";\n+    public static final String FIELD_CONSTRAINT_PATTERN = \" %s \" + NO_FIELD_CONSTRAINT_PATTERN;\n+    private final String name;\n+    private final String operator;\n+    private final List<KiePMMLOperatorValue> kiePMMLOperatorValues;\n+    private final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues;\n+    private final String constraintsString;\n+    private final String toString;\n+\n+    /**\n+     * @param name The name of the type\n+     * @param operator the operator to use to join multiple <code>KiePMMLOperatorValue</code>s (if provided)\n+     * @param kiePMMLOperatorValues the inner <code>List&lt;KiePMMLOperatorValue&gt;</code>\n+     * @param nestedKiePMMLFieldOperatorValues the nested <code>List&lt;KiePMMLFieldOperatorValue&gt;</code>s\n+     */\n+    public KiePMMLFieldOperatorValue(final String name, final String operator, final List<KiePMMLOperatorValue> kiePMMLOperatorValues, final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues) {\n+        this.name = name;\n+        this.operator = operator != null ? operator : \"\";\n+        this.kiePMMLOperatorValues = kiePMMLOperatorValues;\n+        this.nestedKiePMMLFieldOperatorValues = nestedKiePMMLFieldOperatorValues;\n+        constraintsString = buildConstraintsString();\n+        toString = buildToString();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public String getConstraintsAsString() {\n+        return constraintsString;\n+    }\n+\n+    public List<KiePMMLFieldOperatorValue> getNestedKiePMMLFieldOperatorValues() {\n+        return nestedKiePMMLFieldOperatorValues != null ? Collections.unmodifiableList(nestedKiePMMLFieldOperatorValues) : null;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTk5OQ==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406089999", "createdAt": "2020-04-09T09:53:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLFieldOperatorValue.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+\n+/**\n+ * Class representing a <code>Pattern</code> with the referred field, its possible <code>KiePMMLOperatorValue</code>s and, eventually, nested <code>Pattern</code>s\n+ */\n+public class KiePMMLFieldOperatorValue {\n+\n+    public static final String NO_FIELD_CONSTRAINT_PATTERN = \"(%s)\";\n+    public static final String FIELD_CONSTRAINT_PATTERN = \" %s \" + NO_FIELD_CONSTRAINT_PATTERN;\n+    private final String name;\n+    private final String operator;\n+    private final List<KiePMMLOperatorValue> kiePMMLOperatorValues;\n+    private final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues;\n+    private final String constraintsString;\n+    private final String toString;\n+\n+    /**\n+     * @param name The name of the type\n+     * @param operator the operator to use to join multiple <code>KiePMMLOperatorValue</code>s (if provided)\n+     * @param kiePMMLOperatorValues the inner <code>List&lt;KiePMMLOperatorValue&gt;</code>\n+     * @param nestedKiePMMLFieldOperatorValues the nested <code>List&lt;KiePMMLFieldOperatorValue&gt;</code>s\n+     */\n+    public KiePMMLFieldOperatorValue(final String name, final String operator, final List<KiePMMLOperatorValue> kiePMMLOperatorValues, final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues) {\n+        this.name = name;\n+        this.operator = operator != null ? operator : \"\";\n+        this.kiePMMLOperatorValues = kiePMMLOperatorValues;\n+        this.nestedKiePMMLFieldOperatorValues = nestedKiePMMLFieldOperatorValues;\n+        constraintsString = buildConstraintsString();\n+        toString = buildToString();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public String getConstraintsAsString() {\n+        return constraintsString;\n+    }\n+\n+    public List<KiePMMLFieldOperatorValue> getNestedKiePMMLFieldOperatorValues() {\n+        return nestedKiePMMLFieldOperatorValues != null ? Collections.unmodifiableList(nestedKiePMMLFieldOperatorValues) : null;\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDUxMQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY0ODE2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/executor/TreeModelImplementationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1OTowNFrOGCwmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1MzowOVrOGDRxOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjY5OQ==", "bodyText": "If it is Drools specific please move to a -drools module", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405546699", "createdAt": "2020-04-08T13:59:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.executor;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.provider.DrooledModelProvider;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelFactory.getKiePMMLTreeModel;\n+import static org.kie.pmml.models.tree.model.KiePMMLTreeModel.PMML_MODEL_TYPE;\n+\n+/**\n+ * Default <code>ModelImplementationProvider</code> for <b>Tree</b>\n+ */\n+public class TreeModelImplementationProvider extends DrooledModelProvider<TreeModel, KiePMMLTreeModel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MDA0Mw==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406090043", "createdAt": "2020-04-09T09:53:09Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.executor;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.provider.DrooledModelProvider;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelFactory.getKiePMMLTreeModel;\n+import static org.kie.pmml.models.tree.model.KiePMMLTreeModel.PMML_MODEL_TYPE;\n+\n+/**\n+ * Default <code>ModelImplementationProvider</code> for <b>Tree</b>\n+ */\n+public class TreeModelImplementationProvider extends DrooledModelProvider<TreeModel, KiePMMLTreeModel> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjY5OQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY1MzA1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMDowNlrOGCwp3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTo0MVrOGC2gnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzQ4Ng==", "bodyText": "Please raise an exception like new IllegalStateException(\"This should never happen\")", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405547486", "createdAt": "2020-04-08T14:00:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzQyMA==", "bodyText": "Done", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643420", "createdAt": "2020-04-08T16:11:41Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzQ4Ng=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY2MDMxOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMTo0MVrOGCwueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTo0NVrOGC2g1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0ODY2NA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405548664", "createdAt": "2020-04-08T14:01:41Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:\n+                    nestedPredicates.addAll(getConstraintEntriesFromXOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                default:\n+                    // noop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzQ3OQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643479", "createdAt": "2020-04-08T16:11:45Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:\n+                    nestedPredicates.addAll(getConstraintEntriesFromXOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                default:\n+                    // noop", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0ODY2NA=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY2NzQ0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMzoxOVrOGCwzHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTo0OVrOGC2hJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTg1Mg==", "bodyText": "It is not possible to reach this code (look at the if at the beginning of the method), can you please review?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405549852", "createdAt": "2020-04-08T14:03:19Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzU1OQ==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643559", "createdAt": "2020-04-08T16:11:49Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTg1Mg=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY3NTI3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModeAbstractPredicateASTFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNTowNFrOGCw4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyMjo1MVrOGDQsmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTExNw==", "bodyText": "Why Queue?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405551117", "createdAt": "2020-04-08T14:05:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModeAbstractPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Abstract class to be extended to generate <code>KiePMMLDrooledRule</code>s out of a <code>Predicate</code>s\n+ */\n+public class KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    protected final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    protected final List<KiePMMLOutputField> outputFields;\n+    protected final Queue<KiePMMLDrooledRule> rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjQ3NA==", "bodyText": "Replaced with List", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072474", "createdAt": "2020-04-09T09:22:51Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModeAbstractPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Abstract class to be extended to generate <code>KiePMMLDrooledRule</code>s out of a <code>Predicate</code>s\n+ */\n+public class KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    protected final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    protected final List<KiePMMLOutputField> outputFields;\n+    protected final Queue<KiePMMLDrooledRule> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTExNw=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY3OTcyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNjowOFrOGCw6xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTo1NFrOGC2hTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTgxNQ==", "bodyText": "What if Surrogate?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405551815", "createdAt": "2020-04-08T14:06:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+        }\n+    }\n+\n+    public void declareRuleFromCompoundPredicateAndOrXor(final String parentPath,\n+                                                         final String currentRule,\n+                                                         final Object result,\n+                                                         boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicateAndOrXor {} {} {}\", compoundPredicate, parentPath, currentRule);\n+        String statusConstraint = StringUtils.isEmpty(parentPath) ? STATUS_NULL : String.format(STATUS_PATTERN, parentPath);\n+        List<KiePMMLFieldOperatorValue> constraints;\n+        String statusToSet = isFinalLeaf ? StatusCode.DONE.getName() : currentRule;\n+        KiePMMLDrooledRule.Builder builder = KiePMMLDrooledRule.builder(currentRule, statusToSet, outputFields)\n+                .withStatusConstraint(statusConstraint);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withAndConstraints(constraints);\n+                break;\n+            case OR:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withOrConstraints(constraints);\n+                break;\n+            case XOR:\n+                constraints = getConstraintEntriesFromXOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withXorConstraints(constraints);\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzU5OQ==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643599", "createdAt": "2020-04-08T16:11:54Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+        }\n+    }\n+\n+    public void declareRuleFromCompoundPredicateAndOrXor(final String parentPath,\n+                                                         final String currentRule,\n+                                                         final Object result,\n+                                                         boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicateAndOrXor {} {} {}\", compoundPredicate, parentPath, currentRule);\n+        String statusConstraint = StringUtils.isEmpty(parentPath) ? STATUS_NULL : String.format(STATUS_PATTERN, parentPath);\n+        List<KiePMMLFieldOperatorValue> constraints;\n+        String statusToSet = isFinalLeaf ? StatusCode.DONE.getName() : currentRule;\n+        KiePMMLDrooledRule.Builder builder = KiePMMLDrooledRule.builder(currentRule, statusToSet, outputFields)\n+                .withStatusConstraint(statusConstraint);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withAndConstraints(constraints);\n+                break;\n+            case OR:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withOrConstraints(constraints);\n+                break;\n+            case XOR:\n+                constraints = getConstraintEntriesFromXOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withXorConstraints(constraints);\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTgxNQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY4MTgzOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNjo0MFrOGCw8Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMTo1N1rOGC2hbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MjE4Ng==", "bodyText": "Can you please add a default case too?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405552186", "createdAt": "2020-04-08T14:06:40Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzYyOA==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643628", "createdAt": "2020-04-08T16:11:57Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MjE4Ng=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY4NzY4OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/java/org/kie/pmml/models/tree/evaluator/PMMLTreeModelEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowNzo1NVrOGCw_ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyMzowM1rOGDQtBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzA4Mg==", "bodyText": "Can you please move this class inside a -drools module?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405553082", "createdAt": "2020-04-08T14:07:55Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/java/org/kie/pmml/models/tree/evaluator/PMMLTreeModelEvaluator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.executor.DrooledModelExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>PMMLModelExecutor</code> for <b>Tree</b>\n+ */\n+public class PMMLTreeModelEvaluator extends DrooledModelExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjU4Mg==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072582", "createdAt": "2020-04-09T09:23:03Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/java/org/kie/pmml/models/tree/evaluator/PMMLTreeModelEvaluator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.executor.DrooledModelExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>PMMLModelExecutor</code> for <b>Tree</b>\n+ */\n+public class PMMLTreeModelEvaluator extends DrooledModelExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzA4Mg=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY4OTk2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLTreeModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowODoyNlrOGCxBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyMzowOVrOGDQtRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzQ1NQ==", "bodyText": "Can you please move to a -drools module?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405553455", "createdAt": "2020-04-08T14:08:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLTreeModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+public class KiePMMLTreeModel extends KiePMMLDrooledModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjY0NQ==", "bodyText": "DONE", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072645", "createdAt": "2020-04-09T09:23:09Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLTreeModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+public class KiePMMLTreeModel extends KiePMMLDrooledModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzQ1NQ=="}, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY5OTI1OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMDoyMlrOGCxGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMDoyMlrOGCxGpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NDg1NQ==", "bodyText": "@mariofusco\nCan you please double check this block? Is it the proper way to load them?\nNOTE: we will need to review them for Kogito", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405554855", "createdAt": "2020-04-08T14:10:22Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3MTcwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/DroolsModelExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMDoyMFrOGD5OJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMjoxMlrOGFHXsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNjQyMg==", "bodyText": "I would prefer to just keep the field and remove this method because nobody should use it. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406736422", "createdAt": "2020-04-10T12:30:20Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/DroolsModelExecutor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.kie.pmml.models.drools.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModel;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DroolsModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DroolsModelExecutor.class.getName());\n+\n+    private static final AgendaEventListener agendaEventListener = getAgendaEventListener();\n+\n+    private static AgendaEventListener getAgendaEventListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjgxNg==", "bodyText": "@danielezonca\nDone\nI took the chance to completely \"hide\" KieSession access/usage in a specific class.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408016816", "createdAt": "2020-04-14T10:02:12Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/DroolsModelExecutor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.kie.pmml.models.drools.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModel;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DroolsModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DroolsModelExecutor.class.getName());\n+\n+    private static final AgendaEventListener agendaEventListener = getAgendaEventListener();\n+\n+    private static AgendaEventListener getAgendaEventListener() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNjQyMg=="}, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc1ODgwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozMjozNVrOGD9wdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMTozOVrOGFHWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDc0MQ==", "bodyText": "Comment to remove", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406810741", "createdAt": "2020-04-10T15:32:35Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjQ5Ng==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408016496", "createdAt": "2020-04-14T10:01:39Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDc0MQ=="}, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc1OTc0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozMjo0OVrOGD9w9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMTozNVrOGFHWSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDg2OQ==", "bodyText": "Can you remove them?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406810869", "createdAt": "2020-04-10T15:32:49Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;\n+    private static KieBase kbase;\n+    private double input1;\n+    private double input2;\n+    private double input3;\n+    private String expectedResult;\n+\n+    public CompoundPredicatesTreeTest(double input1, double input2, double input3, String expectedResult) {\n+        this.input1 = input1;\n+        this.input2 = input2;\n+        this.input3 = input3;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {7.1, 7.1, 7.1, \"classRootNode\"},\n+//                {-5.01, 0, 0, \"classOrAndNestedNode\"},\n+//                {105, -5.5, 0, \"classOrAndNestedNode\"},\n+//                {2, 2, 2, \"classOrNode\"},\n+//                {2.1, 3.5, 2.1, \"classOrNode\"},\n+//                {0.1, 10, 10, \"classAndNode\"},\n+//                {6, 7.1, 7.1, \"classXorNode\"},\n+//                {6, 6.5, 7.1, \"classRootNode\"},\n+//                {6, 6.5, 7.7, \"classXorNode\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjQ1OA==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408016458", "createdAt": "2020-04-14T10:01:35Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;\n+    private static KieBase kbase;\n+    private double input1;\n+    private double input2;\n+    private double input3;\n+    private String expectedResult;\n+\n+    public CompoundPredicatesTreeTest(double input1, double input2, double input3, String expectedResult) {\n+        this.input1 = input1;\n+        this.input2 = input2;\n+        this.input3 = input3;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {7.1, 7.1, 7.1, \"classRootNode\"},\n+//                {-5.01, 0, 0, \"classOrAndNestedNode\"},\n+//                {105, -5.5, 0, \"classOrAndNestedNode\"},\n+//                {2, 2, 2, \"classOrNode\"},\n+//                {2.1, 3.5, 2.1, \"classOrNode\"},\n+//                {0.1, 10, 10, \"classAndNode\"},\n+//                {6, 7.1, 7.1, \"classXorNode\"},\n+//                {6, 6.5, 7.1, \"classRootNode\"},\n+//                {6, 6.5, 7.7, \"classXorNode\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDg2OQ=="}, "originalCommit": {"oid": "7144181105985ea6fa619a2a104af258e0bdb306"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzQxOTc5OnYy", "diffSide": "RIGHT", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0MjowMFrOGFKqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoxOToyMVrOGFOOtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw==", "bodyText": "Can you please review this method? I don't like that it is named add... but the values to add are fields.\nI would prefer one of the following:\n\nUse a field for KieSession too and rename the method like init()\nAdd pmml4Result and unwrappedInputParams as parameters too\nKeep the method as it is but rename it as initKieSession\n\nWdyt?", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408070707", "createdAt": "2020-04-14T11:42:00Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.utils;\n+\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Class used to isolate all the <code>KieSession</code> instantiation/usage details\n+ */\n+public class KiePMMLSessionUtils {\n+\n+    private final PackageDescr packageDescr;\n+    private final PMML4Result pmml4Result;\n+    private AgendaEventListener agendaEventListener;\n+    private Map<String, Object> unwrappedInputParams;\n+    private Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        this.packageDescr = packageDescr;\n+        this.pmml4Result = pmml4Result;\n+    }\n+\n+    public static Builder builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        return new Builder(packageDescr, pmml4Result);\n+    }\n+\n+    public void fireAllRules() {\n+        KieSession kieSession = new KieHelper()\n+                .addContent(packageDescr)\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        kieSession.addEventListener(agendaEventListener);\n+        kieSession.setGlobal(\"$pmml4Result\", pmml4Result);\n+        addExecutionsParameters(kieSession);\n+        kieSession.fireAllRules();\n+    }\n+\n+    private void addExecutionsParameters(final KieSession kieSession) {\n+        kieSession.insert(new KiePMMLStatusHolder());\n+        kieSession.insert(pmml4Result);\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kieSession.getKieBase().getFactType(packageDescr.getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                kieSession.insert(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5MTg4OA==", "bodyText": "@danielezonca\nFor one reason or another none of the above suggestions satisfy me by themselves, but I think I get the point.\nI've refactored/simplified the class a little bit: removed \"state\" of the class; put as much initialization as possible inside the constructor; etc.\nI still keep the method name \"addObjectsToSession\" because I think it is exactly what the method does - \"initKieSession\" looks a little bit misleading with this refactoring.", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408091888", "createdAt": "2020-04-14T12:21:36Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.utils;\n+\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Class used to isolate all the <code>KieSession</code> instantiation/usage details\n+ */\n+public class KiePMMLSessionUtils {\n+\n+    private final PackageDescr packageDescr;\n+    private final PMML4Result pmml4Result;\n+    private AgendaEventListener agendaEventListener;\n+    private Map<String, Object> unwrappedInputParams;\n+    private Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        this.packageDescr = packageDescr;\n+        this.pmml4Result = pmml4Result;\n+    }\n+\n+    public static Builder builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        return new Builder(packageDescr, pmml4Result);\n+    }\n+\n+    public void fireAllRules() {\n+        KieSession kieSession = new KieHelper()\n+                .addContent(packageDescr)\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        kieSession.addEventListener(agendaEventListener);\n+        kieSession.setGlobal(\"$pmml4Result\", pmml4Result);\n+        addExecutionsParameters(kieSession);\n+        kieSession.fireAllRules();\n+    }\n+\n+    private void addExecutionsParameters(final KieSession kieSession) {\n+        kieSession.insert(new KiePMMLStatusHolder());\n+        kieSession.insert(pmml4Result);\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kieSession.getKieBase().getFactType(packageDescr.getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                kieSession.insert(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw=="}, "originalCommit": {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyOTIwNQ==", "bodyText": "I had a look to method after the refactoring and I don't like that now the KieSession is created together with the builder but it is fine for now. We will probably have to change/adapt this code in the future so I would like not to spend other time on it now :)", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408129205", "createdAt": "2020-04-14T13:19:21Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.utils;\n+\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Class used to isolate all the <code>KieSession</code> instantiation/usage details\n+ */\n+public class KiePMMLSessionUtils {\n+\n+    private final PackageDescr packageDescr;\n+    private final PMML4Result pmml4Result;\n+    private AgendaEventListener agendaEventListener;\n+    private Map<String, Object> unwrappedInputParams;\n+    private Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        this.packageDescr = packageDescr;\n+        this.pmml4Result = pmml4Result;\n+    }\n+\n+    public static Builder builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        return new Builder(packageDescr, pmml4Result);\n+    }\n+\n+    public void fireAllRules() {\n+        KieSession kieSession = new KieHelper()\n+                .addContent(packageDescr)\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        kieSession.addEventListener(agendaEventListener);\n+        kieSession.setGlobal(\"$pmml4Result\", pmml4Result);\n+        addExecutionsParameters(kieSession);\n+        kieSession.fireAllRules();\n+    }\n+\n+    private void addExecutionsParameters(final KieSession kieSession) {\n+        kieSession.insert(new KiePMMLStatusHolder());\n+        kieSession.insert(pmml4Result);\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kieSession.getKieBase().getFactType(packageDescr.getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                kieSession.insert(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw=="}, "originalCommit": {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2464, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}