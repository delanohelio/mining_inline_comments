{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTk5MjYw", "number": 2990, "title": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "bodyText": "https://issues.redhat.com/browse/DROOLS-5507\nFailures that I ran into:\n\n(age != null) == \"@{param}\" ) was not regognized as a predicate ( affects GRE, Templated rules and GDST BRL)\nVariables from single field predicate conditions were not found ( affects GRE, Templated rules and GDST BRL)", "createdAt": "2020-07-14T16:55:18Z", "url": "https://github.com/kiegroup/drools/pull/2990", "merged": true, "mergeCommit": {"oid": "d695f6fdf8d8ccc2dca682e2628c65b5434c6b86"}, "closed": true, "closedAt": "2020-07-21T12:13:36Z", "author": {"login": "Rikkola"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1F9KcABqjM1NDczNjA4OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3CR0BgH2gAyNDQ4OTk5MjYwOmRhNjQxNzgyYWM0OTdlNWIxYWI2YTUxNjIxODFkMjhjMTExZGQzNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/8e7b568465d7da4523b68400c446f5f5dcfe5e21", "committedDate": "2020-07-14T16:37:26Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}, "afterCommit": {"oid": "42d1e74b798c96ed155118eaa9d9c36340884974", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/42d1e74b798c96ed155118eaa9d9c36340884974", "committedDate": "2020-07-15T08:00:07Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzAxNzM2", "url": "https://github.com/kiegroup/drools/pull/2990#pullrequestreview-448701736", "createdAt": "2020-07-15T07:37:00Z", "commit": {"oid": "8e7b568465d7da4523b68400c446f5f5dcfe5e21"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzozNzowMFrOGxx_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzozOTowMVrOGxyDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MjQxMA==", "bodyText": "If the connector is not one that the Guided Rule Model supports, this defaults to predicate.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454852410", "createdAt": "2020-07-15T07:37:00Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7b568465d7da4523b68400c446f5f5dcfe5e21"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MjY2OA==", "bodyText": "Separated this method so it can be overwritten.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454852668", "createdAt": "2020-07-15T07:37:29Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -1124,6 +1122,14 @@ private void generateSingleFieldConstraint(final SingleFieldConstraint constr,\n             }\n         }\n \n+        protected void generatePredicateSingleFieldConstraint(final SingleFieldConstraint constr,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7b568465d7da4523b68400c446f5f5dcfe5e21"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MzE1Nw==", "bodyText": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454853157", "createdAt": "2020-07-15T07:38:24Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java", "diffHunk": "@@ -249,6 +249,11 @@ private void visitRuleModel(final RuleModel model) {\n     }\n \n     private void visitSingleFieldConstraint(final SingleFieldConstraint sfc) {\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+            parseStringPattern(sfc.getValue());\n+            return;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7b568465d7da4523b68400c446f5f5dcfe5e21"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MzQ3MA==", "bodyText": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.\nA bit of redundancy here, but getting rid of it is likely a huge and risky task.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454853470", "createdAt": "2020-07-15T07:39:01Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java", "diffHunk": "@@ -255,6 +255,11 @@ private void visitRuleModel(RuleModel model) {\n     }\n \n     private void visitSingleFieldConstraint(SingleFieldConstraint sfc) {\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+            parseStringPattern(sfc.getValue());\n+            return;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7b568465d7da4523b68400c446f5f5dcfe5e21"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42d1e74b798c96ed155118eaa9d9c36340884974", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/42d1e74b798c96ed155118eaa9d9c36340884974", "committedDate": "2020-07-15T08:00:07Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}, "afterCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/937c6018d012370386e2c086b3811b46e17bf187", "committedDate": "2020-07-16T09:21:26Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODY2ODgz", "url": "https://github.com/kiegroup/drools/pull/2990#pullrequestreview-449866883", "createdAt": "2020-07-16T13:50:22Z", "commit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzE0MTkx", "url": "https://github.com/kiegroup/drools/pull/2990#pullrequestreview-451314191", "createdAt": "2020-07-20T05:57:16Z", "commit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo1NzoxNlrOGz50qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1MzoxMVrOGz7nbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA==", "bodyText": "Shouldn't we implement as return new EvalExpr(expr).asFieldConstraint(m, factPattern); ?\nAsking because that EvalExpr seems be implemented exactly in same way.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457077930", "createdAt": "2020-07-20T05:57:16Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {\n+\n+                final SingleFieldConstraint con = new SingleFieldConstraint();\n+                con.setConstraintValueType(SingleFieldConstraint.TYPE_PREDICATE);\n+                con.setValue(expr);\n+                return con;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTM5MA==", "bodyText": "I saw in some if we were checking && and || operators. I am wondering if test like below should pass then.\n    @Test\n    public void testMoreComplexExpressionLogicAnd() {\n\n        final String drl = \"rule \\\"r0\\\"\\n\" +\n                \"dialect \\\"mvel\\\"\\n\" +\n                \"when\\n\" +\n                \"Person( ( age != null ) == true && ( name == null ) == false )\\n\" +\n                \"then\\n\" +\n                \"end\\n\";\n\n        final PackageDataModelOracle dmo = mock(PackageDataModelOracle.class);\n        final RuleModel m = ruleModelPersistence.unmarshal(drl,\n                                                           Collections.EMPTY_LIST,\n                                                           dmo);\n        final String resultDrl = ruleModelPersistence.marshal(m);\n\n        final String expectedDrl = \"rule \\\"r0\\\"\\n\" +\n                \"dialect \\\"mvel\\\"\\n\" +\n                \"when\\n\" +\n                \"Person( eval( ( age != null ) == true ) && eval( ( name == null ) == false ) )\\n\" +\n                \"then\\n\" +\n                \"end\\n\";\n        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n    }", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457101390", "createdAt": "2020-07-20T06:42:58Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -5104,4 +5103,32 @@ public void testMatchesLegacyToNewVersion() {\n         assertEquals(\"matches\", right.getOperator());\n         assertEquals(\"P.*\", right.getValue());\n     }\n+\n+    @Test\n+    /**\n+     * The GRE can not produce this, but the Persistence class is also used by XLS->GDST->XLS conversions.\n+     */\n+    public void testMoreComplexExpression() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjQyMw==", "bodyText": "If a boolean is expected as param1 value, shouldn't this line be rather         singleFieldConstraint.setValue(\"(age != null) == @{param1}\"); ?", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457106423", "createdAt": "2020-07-20T06:51:39Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitorTest.java", "diffHunk": "@@ -71,6 +72,27 @@ public void visitSingleFieldConstraint() {\n         assertEquals(\"==\", interpolationVariable.getOperator());\n     }\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+\n+        Map<InterpolationVariable, Integer> variableMap = new HashMap<>();\n+        RuleModelVisitor visitor = new RuleModelVisitor(variableMap);\n+\n+        SingleFieldConstraint singleFieldConstraint = new SingleFieldConstraint();\n+        singleFieldConstraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        singleFieldConstraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzMxMQ==", "bodyText": "similar question as above", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457107311", "createdAt": "2020-07-20T06:53:11Z", "author": {"login": "jomarko"}, "path": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTBRDRLPersistenceTest.java", "diffHunk": "@@ -21,19 +21,51 @@\n import java.util.Collection;\n import java.util.function.Function;\n \n+import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;\n+import org.drools.workbench.models.datamodel.rule.FactPattern;\n import org.drools.workbench.models.datamodel.rule.IAction;\n import org.drools.workbench.models.datamodel.rule.InterpolationVariable;\n import org.drools.workbench.models.datamodel.rule.PluggableIAction;\n import org.drools.workbench.models.datamodel.rule.RuleModel;\n+import org.drools.workbench.models.datamodel.rule.SingleFieldConstraint;\n import org.drools.workbench.models.datamodel.rule.TemplateAware;\n import org.drools.workbench.models.guided.dtable.backend.util.GuidedDTBRDRLPersistence;\n import org.junit.Test;\n import org.kie.soup.project.datamodel.oracle.DataType;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n public class GuidedDTBRDRLPersistenceTest {\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+        final GuidedDTBRDRLPersistence persistence = new GuidedDTBRDRLPersistence((key) -> \"true\");\n+\n+        final RuleModel ruleModel = new RuleModel();\n+        ruleModel.name = \"Template aware\";\n+\n+        ruleModel.addRhsItem(new TemplateAwareIAction(\"initialValue\"));\n+        final FactPattern factPattern = new FactPattern(\"Person\");\n+        final SingleFieldConstraint constraint = new SingleFieldConstraint();\n+        constraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        constraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzY5Nzcw", "url": "https://github.com/kiegroup/drools/pull/2990#pullrequestreview-451369770", "createdAt": "2020-07-20T07:47:01Z", "commit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzo0NzowMVrOGz9vbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzo0OToyMlrOGz914g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MjEyNA==", "bodyText": "I'll try this out.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457142124", "createdAt": "2020-07-20T07:47:01Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {\n+\n+                final SingleFieldConstraint con = new SingleFieldConstraint();\n+                con.setConstraintValueType(SingleFieldConstraint.TYPE_PREDICATE);\n+                con.setValue(expr);\n+                return con;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA=="}, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MzEyOA==", "bodyText": "This and several more DRL snippets will fail. What we support should probably be limited to what the Guider Rule Editor components can produce, and like in this case, what we want to be able to migrate from XLS to GDST.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457143128", "createdAt": "2020-07-20T07:48:26Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -5104,4 +5103,32 @@ public void testMatchesLegacyToNewVersion() {\n         assertEquals(\"matches\", right.getOperator());\n         assertEquals(\"P.*\", right.getValue());\n     }\n+\n+    @Test\n+    /**\n+     * The GRE can not produce this, but the Persistence class is also used by XLS->GDST->XLS conversions.\n+     */\n+    public void testMoreComplexExpression() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTM5MA=="}, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0Mzc3OA==", "bodyText": "I would keep it with quotes. The GRE components tend to add the quotes since they rely on the fact that MVEL is used.", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457143778", "createdAt": "2020-07-20T07:49:22Z", "author": {"login": "Rikkola"}, "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitorTest.java", "diffHunk": "@@ -71,6 +72,27 @@ public void visitSingleFieldConstraint() {\n         assertEquals(\"==\", interpolationVariable.getOperator());\n     }\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+\n+        Map<InterpolationVariable, Integer> variableMap = new HashMap<>();\n+        RuleModelVisitor visitor = new RuleModelVisitor(variableMap);\n+\n+        SingleFieldConstraint singleFieldConstraint = new SingleFieldConstraint();\n+        singleFieldConstraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        singleFieldConstraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjQyMw=="}, "originalCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/1ebbb528089147f03388c2ecb4a6b023d66f6850", "committedDate": "2020-07-20T08:09:39Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "937c6018d012370386e2c086b3811b46e17bf187", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/937c6018d012370386e2c086b3811b46e17bf187", "committedDate": "2020-07-16T09:21:26Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}, "afterCommit": {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/drools/commit/1ebbb528089147f03388c2ecb4a6b023d66f6850", "committedDate": "2020-07-20T08:09:39Z", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjQ2Mzk0", "url": "https://github.com/kiegroup/drools/pull/2990#pullrequestreview-452246394", "createdAt": "2020-07-21T08:40:11Z", "commit": {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da641782ac497e5b1ab6a5162181d28c111dd370", "author": {"user": {"login": "jomarko", "name": "Jozef Marko"}}, "url": "https://github.com/kiegroup/drools/commit/da641782ac497e5b1ab6a5162181d28c111dd370", "committedDate": "2020-07-21T08:51:11Z", "message": "DROOLS-5507: Increase coverage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1858, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}