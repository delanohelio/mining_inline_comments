{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzk5MTg3", "number": 3273, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1NToxMlrOE_kCuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1Njo1NlrOE_kFiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg2MjY3OnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1NToxMlrOH9VY6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1NToxNVrOH9e0dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NTYyNg==", "bodyText": "What about something similar to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KieSession kieSession = registryContext.lookup(KieSession.class);\n          \n          \n            \n                    InternalKnowledgeBase kieBase = (InternalKnowledgeBase) kieSession.getKieBase();\n          \n          \n            \n                    return kieBase.getRootClassLoader();\n          \n          \n            \n                    try {\n          \n          \n            \n                        KieSession kieSession = registryContext.lookup(KieSession.class);\n          \n          \n            \n                        InternalKnowledgeBase kieBase = (InternalKnowledgeBase) kieSession.getKieBase();\n          \n          \n            \n                        return kieBase.getRootClassLoader();\n          \n          \n            \n                    catch (Exception e) {\n          \n          \n            \n                        logger.warn(\"Impossible to retrieve RootClassLoader, using ContextClassLoader [\" + e.getMessage() + \"]\", e);\n          \n          \n            \n                        return Thread.currentThread().getContextClassLoader();\n          \n          \n            \n                    }", "url": "https://github.com/kiegroup/drools/pull/3273#discussion_r534075626", "createdAt": "2020-12-02T10:55:12Z", "author": {"login": "danielezonca"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -119,6 +127,36 @@ public void setOutIdentifier(String outIdentifier) {\n     \n     @Override\n     public PMML4Result execute(Context context) {\n+        if (requestData == null) {\n+            throw new IllegalStateException(\"ApplyPmmlModelCommand requires request data (PMMLRequestData) to execute\");\n+        }\n+        final PMMLConstants toInvoke = getToInvoke(context);\n+        switch (toInvoke) {\n+            case NEW:\n+                return executePMMLTrusty();\n+            case LEGACY:\n+                return executePMMLLegacy(context);\n+            default:\n+                throw new RuntimeException(\"Unmanaged PMMLConstants \" + toInvoke);\n+        }\n+    }\n+\n+    protected PMMLConstants getToInvoke(Context context) {\n+        ClassLoader classLoader = getClassLoader((RegistryContext)context);\n+        return toEnable(classLoader);\n+    }\n+\n+    private ClassLoader getClassLoader(RegistryContext registryContext) {\n+        KieSession kieSession = registryContext.lookup(KieSession.class);\n+        InternalKnowledgeBase kieBase = (InternalKnowledgeBase) kieSession.getKieBase();\n+        return kieBase.getRootClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea58dac5fe8cfac7930f4596967d977179147b9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzMDEzNA==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/3273#discussion_r534230134", "createdAt": "2020-12-02T14:55:15Z", "author": {"login": "gitgabrio"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -119,6 +127,36 @@ public void setOutIdentifier(String outIdentifier) {\n     \n     @Override\n     public PMML4Result execute(Context context) {\n+        if (requestData == null) {\n+            throw new IllegalStateException(\"ApplyPmmlModelCommand requires request data (PMMLRequestData) to execute\");\n+        }\n+        final PMMLConstants toInvoke = getToInvoke(context);\n+        switch (toInvoke) {\n+            case NEW:\n+                return executePMMLTrusty();\n+            case LEGACY:\n+                return executePMMLLegacy(context);\n+            default:\n+                throw new RuntimeException(\"Unmanaged PMMLConstants \" + toInvoke);\n+        }\n+    }\n+\n+    protected PMMLConstants getToInvoke(Context context) {\n+        ClassLoader classLoader = getClassLoader((RegistryContext)context);\n+        return toEnable(classLoader);\n+    }\n+\n+    private ClassLoader getClassLoader(RegistryContext registryContext) {\n+        KieSession kieSession = registryContext.lookup(KieSession.class);\n+        InternalKnowledgeBase kieBase = (InternalKnowledgeBase) kieSession.getKieBase();\n+        return kieBase.getRootClassLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NTYyNg=="}, "originalCommit": {"oid": "dea58dac5fe8cfac7930f4596967d977179147b9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg2ODk3OnYy", "diffSide": "RIGHT", "path": "drools-ruleunit/src/test/java/org/drools/ruleunit/command/pmml/mock/PMMLCommandExecutorFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1Njo0NlrOH9VcxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1NToyMlrOH9e04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NjYxMw==", "bodyText": "Please don't use Test suffix otherwise Maven will consider this class as a test class and try to load. What about Mock instead?", "url": "https://github.com/kiegroup/drools/pull/3273#discussion_r534076613", "createdAt": "2020-12-02T10:56:46Z", "author": {"login": "danielezonca"}, "path": "drools-ruleunit/src/test/java/org/drools/ruleunit/command/pmml/mock/PMMLCommandExecutorFactoryTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.ruleunit.command.pmml.mock;\n+\n+import org.kie.internal.pmml.PMMLCommandExecutor;\n+import org.kie.internal.pmml.PMMLCommandExecutorFactory;\n+\n+public class PMMLCommandExecutorFactoryTest implements PMMLCommandExecutorFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea58dac5fe8cfac7930f4596967d977179147b9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzMDI0MQ==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/3273#discussion_r534230241", "createdAt": "2020-12-02T14:55:22Z", "author": {"login": "gitgabrio"}, "path": "drools-ruleunit/src/test/java/org/drools/ruleunit/command/pmml/mock/PMMLCommandExecutorFactoryTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.ruleunit.command.pmml.mock;\n+\n+import org.kie.internal.pmml.PMMLCommandExecutor;\n+import org.kie.internal.pmml.PMMLCommandExecutorFactory;\n+\n+public class PMMLCommandExecutorFactoryTest implements PMMLCommandExecutorFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NjYxMw=="}, "originalCommit": {"oid": "dea58dac5fe8cfac7930f4596967d977179147b9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg2OTg1OnYy", "diffSide": "RIGHT", "path": "drools-ruleunit/src/test/java/org/drools/ruleunit/command/pmml/mock/PMMLCommandExecutorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1Njo1NlrOH9VdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1NTozMlrOH9e1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NjcyOA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/drools/pull/3273#discussion_r534076728", "createdAt": "2020-12-02T10:56:56Z", "author": {"login": "danielezonca"}, "path": "drools-ruleunit/src/test/java/org/drools/ruleunit/command/pmml/mock/PMMLCommandExecutorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.ruleunit.command.pmml.mock;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.internal.pmml.PMMLCommandExecutor;\n+\n+public class PMMLCommandExecutorTest implements PMMLCommandExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea58dac5fe8cfac7930f4596967d977179147b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzMDQyMA==", "bodyText": "@danielezonca\nDone", "url": "https://github.com/kiegroup/drools/pull/3273#discussion_r534230420", "createdAt": "2020-12-02T14:55:32Z", "author": {"login": "gitgabrio"}, "path": "drools-ruleunit/src/test/java/org/drools/ruleunit/command/pmml/mock/PMMLCommandExecutorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.ruleunit.command.pmml.mock;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.pmml.PMMLRequestData;\n+import org.kie.internal.pmml.PMMLCommandExecutor;\n+\n+public class PMMLCommandExecutorTest implements PMMLCommandExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NjcyOA=="}, "originalCommit": {"oid": "dea58dac5fe8cfac7930f4596967d977179147b9"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2204, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}