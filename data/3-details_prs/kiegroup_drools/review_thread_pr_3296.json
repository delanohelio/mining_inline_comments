{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjcxNTYz", "number": 3296, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo0MTozMVrOFHlulQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDoxNTo0NVrOFPJBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTAyNDg1OnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo0MTozMVrOIJGDKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1NTo0NFrOIJSgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNzIwOQ==", "bodyText": "Please add a comment like \"configure result to be equivalent of old kie-pmml impl\"", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546407209", "createdAt": "2020-12-20T17:41:31Z", "author": {"login": "danielezonca"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -167,7 +170,14 @@ protected PMML4Result executePMMLLegacy(Context context) {\n                                                                                          packageName, isMining());\n     }\n \n-    protected PMML4Result executePMMLTrusty() {\n-        return PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData);\n+    protected PMML4Result executePMMLTrusty(Context context) {\n+        RegistryContext registryContext = (RegistryContext) context;\n+        PMML4Result toReturn = PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData, context);\n+        Optional<ExecutionResultImpl> execRes = Optional.ofNullable(registryContext.lookup(ExecutionResultImpl.class));\n+        registryContext.register(PMML4Result.class, toReturn);\n+        execRes.ifPresent(result -> {\n+            result.setResult(\"results\", toReturn);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c94bbe4d187d17b6f15d752fb4627fbb54735b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMTM2Mg==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546611362", "createdAt": "2020-12-21T09:55:44Z", "author": {"login": "gitgabrio"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -167,7 +170,14 @@ protected PMML4Result executePMMLLegacy(Context context) {\n                                                                                          packageName, isMining());\n     }\n \n-    protected PMML4Result executePMMLTrusty() {\n-        return PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData);\n+    protected PMML4Result executePMMLTrusty(Context context) {\n+        RegistryContext registryContext = (RegistryContext) context;\n+        PMML4Result toReturn = PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData, context);\n+        Optional<ExecutionResultImpl> execRes = Optional.ofNullable(registryContext.lookup(ExecutionResultImpl.class));\n+        registryContext.register(PMML4Result.class, toReturn);\n+        execRes.ifPresent(result -> {\n+            result.setResult(\"results\", toReturn);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNzIwOQ=="}, "originalCommit": {"oid": "44c94bbe4d187d17b6f15d752fb4627fbb54735b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTAyNTM2OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo0MjowOFrOIJGDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo0MjowOFrOIJGDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNzI2OA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546407268", "createdAt": "2020-12-20T17:42:08Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml", "diffHunk": "@@ -47,11 +56,11 @@\n         </exclusion>\n       </exclusions>\n     </dependency>\n-    <dependency>\n-      <groupId>org.kie</groupId>\n-      <artifactId>kie-memory-compiler</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n+<!--    <dependency>-->\n+<!--      <groupId>org.kie</groupId>-->\n+<!--      <artifactId>kie-memory-compiler</artifactId>-->\n+<!--      <scope>test</scope>-->\n+<!--    </dependency>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c94bbe4d187d17b6f15d752fb4627fbb54735b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTAyNzE0OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/command/PMMLCommandExecutorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo0Mzo1NFrOIJGEQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDowOTozNlrOIJS7Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNzQ4OA==", "bodyText": "Please add a Javadoc to refer JSONMarshallerPMMLParamInfo behavior", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546407488", "createdAt": "2020-12-20T17:43:54Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/command/PMMLCommandExecutorImpl.java", "diffHunk": "@@ -60,7 +67,22 @@ private PMML4Result evaluate(final PMMLRequestData pmmlRequestData, final PMMLRu\n         return pmmlRuntime.evaluate(modelName, pmmlContext);\n     }\n \n-    private PMMLRuntime getPMMLRuntime(String pmmlFileName) {\n-        return PMML_RUNTIME_FACTORY.getPMMLRuntimeFromClasspath(pmmlFileName);\n+    private PMMLRuntime getPMMLRuntime(String pmmlFileName, String pmmlModelName, KieBase kieBase) {\n+        return PMML_RUNTIME_FACTORY.getPMMLRuntimeFromFileNameModelNameAndKieBase(pmmlFileName, pmmlModelName, kieBase);\n+    }\n+\n+    @SuppressWarnings(\"rawtype\")\n+    private PMMLRequestData getCleanedRequestData(PMMLRequestData toClean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c94bbe4d187d17b6f15d752fb4627fbb54735b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxODEyMg==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546618122", "createdAt": "2020-12-21T10:09:36Z", "author": {"login": "gitgabrio"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/command/PMMLCommandExecutorImpl.java", "diffHunk": "@@ -60,7 +67,22 @@ private PMML4Result evaluate(final PMMLRequestData pmmlRequestData, final PMMLRu\n         return pmmlRuntime.evaluate(modelName, pmmlContext);\n     }\n \n-    private PMMLRuntime getPMMLRuntime(String pmmlFileName) {\n-        return PMML_RUNTIME_FACTORY.getPMMLRuntimeFromClasspath(pmmlFileName);\n+    private PMMLRuntime getPMMLRuntime(String pmmlFileName, String pmmlModelName, KieBase kieBase) {\n+        return PMML_RUNTIME_FACTORY.getPMMLRuntimeFromFileNameModelNameAndKieBase(pmmlFileName, pmmlModelName, kieBase);\n+    }\n+\n+    @SuppressWarnings(\"rawtype\")\n+    private PMMLRequestData getCleanedRequestData(PMMLRequestData toClean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNzQ4OA=="}, "originalCommit": {"oid": "44c94bbe4d187d17b6f15d752fb4627fbb54735b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTA0MDIxOnYy", "diffSide": "RIGHT", "path": "kie-memory-compiler/src/main/java/org/kie/memorycompiler/KieMemoryCompiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo1ODowOVrOIJGKTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzo1ODowOVrOIJGKTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwOTAzNg==", "bodyText": "Please accept this PR to make compile method more flexible\ngitgabrio#1", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546409036", "createdAt": "2020-12-20T17:58:09Z", "author": {"login": "danielezonca"}, "path": "kie-memory-compiler/src/main/java/org/kie/memorycompiler/KieMemoryCompiler.java", "diffHunk": "@@ -29,14 +29,39 @@\n     private KieMemoryCompiler() { }\n \n     /**\n-     * Compile the given sources and add compiled classes to the given <code>ClassLoader</code>\n+     * Compile the given sources <b>without</b> adding compiled classes to the given <code>ClassLoader</code>\n      * <b>classNameSourceMap</b>' key must be the <b>FQDN</b> of the class to compile\n      *\n      * @param classNameSourceMap\n      * @param classLoader\n      * @return\n      */\n     public static Map<String, Class<?>> compile(Map<String, String> classNameSourceMap, ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c94bbe4d187d17b6f15d752fb4627fbb54735b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzU4MjgwOnYy", "diffSide": "RIGHT", "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTozMjoxMlrOIJcRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowMjo0M1rOIJdWXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MTI2Mw==", "bodyText": "This use of Optional is very questionable. I don't see any valid reason to wrap the result of that lookup into an Optional only to test if it is empty or not and take some action accordingly.", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546771263", "createdAt": "2020-12-21T15:32:12Z", "author": {"login": "mariofusco"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -167,7 +170,14 @@ protected PMML4Result executePMMLLegacy(Context context) {\n                                                                                          packageName, isMining());\n     }\n \n-    protected PMML4Result executePMMLTrusty() {\n-        return PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData);\n+    protected PMML4Result executePMMLTrusty(Context context) {\n+        RegistryContext registryContext = (RegistryContext) context;\n+        PMML4Result toReturn = PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData, context);\n+        // Needed to update the ExecutionResultImpl and the Registry context,\n+        // has done inside legacy implementation\n+        Optional<ExecutionResultImpl> execRes = Optional.ofNullable(registryContext.lookup(ExecutionResultImpl.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b23a13ca312536b43318fcfab4c9e6d829eeca"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NzE2MA==", "bodyText": "@mariofusco\nThis snippet is carbon-copied from ApplyPmmlModelCommandExecutorImpl.", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546777160", "createdAt": "2020-12-21T15:42:49Z", "author": {"login": "gitgabrio"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -167,7 +170,14 @@ protected PMML4Result executePMMLLegacy(Context context) {\n                                                                                          packageName, isMining());\n     }\n \n-    protected PMML4Result executePMMLTrusty() {\n-        return PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData);\n+    protected PMML4Result executePMMLTrusty(Context context) {\n+        RegistryContext registryContext = (RegistryContext) context;\n+        PMML4Result toReturn = PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData, context);\n+        // Needed to update the ExecutionResultImpl and the Registry context,\n+        // has done inside legacy implementation\n+        Optional<ExecutionResultImpl> execRes = Optional.ofNullable(registryContext.lookup(ExecutionResultImpl.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MTI2Mw=="}, "originalCommit": {"oid": "b1b23a13ca312536b43318fcfab4c9e6d829eeca"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4ODk1OA==", "bodyText": "I discussed this with @danielezonca and @lucamolteni and they are both happy with this usage of Optional (that continues to seem quite odd to me). Feel free to ignore my former comment.", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r546788958", "createdAt": "2020-12-21T16:02:43Z", "author": {"login": "mariofusco"}, "path": "drools-core/src/main/java/org/drools/core/command/runtime/pmml/ApplyPmmlModelCommand.java", "diffHunk": "@@ -167,7 +170,14 @@ protected PMML4Result executePMMLLegacy(Context context) {\n                                                                                          packageName, isMining());\n     }\n \n-    protected PMML4Result executePMMLTrusty() {\n-        return PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData);\n+    protected PMML4Result executePMMLTrusty(Context context) {\n+        RegistryContext registryContext = (RegistryContext) context;\n+        PMML4Result toReturn = PMMLCommandExecutorFactory.get().newPMMLCommandExecutor().execute(requestData, context);\n+        // Needed to update the ExecutionResultImpl and the Registry context,\n+        // has done inside legacy implementation\n+        Optional<ExecutionResultImpl> execRes = Optional.ofNullable(registryContext.lookup(ExecutionResultImpl.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MTI2Mw=="}, "originalCommit": {"oid": "b1b23a13ca312536b43318fcfab4c9e6d829eeca"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDE0NTEyOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDowNzo1OVrOIUUupw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDowNzo1OVrOIUUupw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4MjA1NQ==", "bodyText": "Is this comment necessary?", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r558182055", "createdAt": "2021-01-15T10:07:59Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml", "diffHunk": "@@ -20,6 +20,7 @@\n       <groupId>org.kie</groupId>\n       <artifactId>kie-pmml-compiler-api</artifactId>\n     </dependency>\n+    <!-- DROOLS -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9630c090db4dd3767942e5b21fb73563f6c21507"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDE4NzAwOnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryInternal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDoxMzowN1rOIUVLLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDoxMzowN1rOIUVLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4OTM1Ng==", "bodyText": "Please remove commented code.", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r558189356", "createdAt": "2021-01-15T10:13:07Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryInternal.java", "diffHunk": "@@ -47,8 +49,10 @@ private PMMLRuntimeFactoryInternal() {\n     }\n \n     public static PMMLRuntime getPMMLRuntime(final File pmmlFile) {\n-        KnowledgeBuilderImpl kbuilderImpl = (KnowledgeBuilderImpl) KnowledgeBuilderFactory.newKnowledgeBuilder();\n-        return getPMMLRuntime(pmmlFile, kbuilderImpl);\n+        KieBase kieBase = createKieBase(pmmlFile);\n+        return getPMMLRuntime(kieBase);\n+//        KnowledgeBuilderImpl kbuilderImpl = (KnowledgeBuilderImpl) KnowledgeBuilderFactory.newKnowledgeBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9630c090db4dd3767942e5b21fb73563f6c21507"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDIwNjg3OnYy", "diffSide": "RIGHT", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/test/java/org/kie/pmml/evaluator/assembler/implementations/HasKnowledgeBuilderImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDoxNTo0NVrOIUVYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDoxNTo0NVrOIUVYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5Mjc5Mg==", "bodyText": "It seems a little bit suspicious that there is no assert in this test.", "url": "https://github.com/kiegroup/drools/pull/3296#discussion_r558192792", "createdAt": "2021-01-15T10:15:45Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/test/java/org/kie/pmml/evaluator/assembler/implementations/HasKnowledgeBuilderImplTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.evaluator.assembler.implementations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.IntConsumer;\n+import java.util.stream.IntStream;\n+\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.reflective.classloader.ProjectClassLoader;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.pmml.api.exceptions.KiePMMLException;\n+\n+import static org.junit.Assert.*;\n+\n+public class HasKnowledgeBuilderImplTest {\n+\n+    private static final String CLASS_SOURCE_NAME = \"ClassSource\";\n+    private static final String CLASS_SOURCE = String.format(\"public class %s {}\" , CLASS_SOURCE_NAME);\n+    private KnowledgeBuilderImpl knowledgeBuilder;\n+    private HasKnowledgeBuilderImpl hasKnowledgeBuilder;\n+\n+    @Before\n+    public void setup() {\n+        knowledgeBuilder = new KnowledgeBuilderImpl();\n+        hasKnowledgeBuilder = new HasKnowledgeBuilderImpl(knowledgeBuilder);\n+    }\n+\n+    @Test\n+    public void getClassLoader() {\n+        ClassLoader retrieved = hasKnowledgeBuilder.getClassLoader();\n+        assertNotNull(retrieved);\n+        assertEquals(knowledgeBuilder.getRootClassLoader(),retrieved);\n+        assertTrue(retrieved instanceof ProjectClassLoader);\n+    }\n+\n+    @Test\n+    public void compileAndLoadClass() {\n+        Map<String, String> sourcesMap = new HashMap<>();\n+        sourcesMap.put(CLASS_SOURCE_NAME, CLASS_SOURCE);\n+        Class<?> retrieved = hasKnowledgeBuilder.compileAndLoadClass(sourcesMap, CLASS_SOURCE_NAME);\n+        assertNotNull(retrieved);\n+        assertEquals(CLASS_SOURCE_NAME, retrieved.getName());\n+    }\n+\n+    @Test\n+    public void compileAndLoadClassMultipleTimes() {\n+        Map<String, String> sourcesMap = new HashMap<>();\n+        sourcesMap.put(CLASS_SOURCE_NAME, CLASS_SOURCE);\n+        IntStream.range(0,3).forEach(value -> hasKnowledgeBuilder.compileAndLoadClass(sourcesMap, CLASS_SOURCE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9630c090db4dd3767942e5b21fb73563f6c21507"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2232, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}