{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTgxNTE4", "number": 2977, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozMjoyMVrOELl1jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozMjoyMVrOELl1jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTg5NzExOnYy", "diffSide": "RIGHT", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozMjoyMVrOGtN2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozMjoyMVrOGtN2wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NjExMg==", "bodyText": "In case of temporal constraints, the generated code is like this:\nexpr(\"40AE484C3A9BF23BE65C0B135D4B1E33\",\n     (org.drools.modelcompiler.domain.StockTick _this) -> _this.getTimeFieldAsLong(),\n     var_$a,\n     (org.drools.modelcompiler.domain.StockTick $a) -> $a.getTimeFieldAsLong(),\n     D.after(5L, java.util.concurrent.TimeUnit.MILLISECONDS, 8L, java.util.concurrent.TimeUnit.MILLISECONDS)\n)\n\nSo I externalize lambdas one-by-one calling replaceLambda() instead of calling extractLambdaFromMethodCall().", "url": "https://github.com/kiegroup/drools/pull/2977#discussion_r450066112", "createdAt": "2020-07-06T08:32:21Z", "author": {"login": "tkobayas"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -137,6 +144,31 @@ public void convertLambdas() {\n              });\n     }\n \n+    private void convertTemporalExpr(MethodCallExpr methodCallExpr) {\n+        // TemporalExpr methodCallExpr may have 2 lambdas\n+        methodCallExpr.getArguments().forEach(a -> {\n+            if (a.isLambdaExpr()) {\n+                LambdaExpr lambdaExpr = a.asLambdaExpr();\n+                Optional<MaterializedLambdaExtractor> extractorOpt = createMaterializedLambdaExtractor(lambdaExpr);\n+                if (!extractorOpt.isPresent()) {\n+                    logger.debug(\"Unable to create MaterializedLambdaExtractor for {}\", lambdaExpr);\n+                } else {\n+                    MaterializedLambdaExtractor extractor = extractorOpt.get();\n+                    replaceLambda(lambdaExpr, () -> extractor);\n+                }\n+            }\n+        });\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527b60d3f503cc69b8461e532d4abd16114d9789"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2377, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}