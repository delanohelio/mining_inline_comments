{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODc0NTg5", "number": 2910, "title": "Drools 5258 - Use kjar artifact for PMML evaluation", "bodyText": "@danielezonca @mariofusco @jiripetrlik\nsee https://issues.redhat.com/browse/DROOLS-5258\nThis PR is meant to allow\n\nusage of pre-compiled kjar inside the execute project\nusage of pmml resources inside the execute project\n\nFor case 1)\n\nkjar is created with kie-maven-plugin (currently unavailable in master, https://github.com/gitgabrio/droolsjbpm-integration/tree/DROOLS-5258)\nexecute project declare kjar as dependency\ninside execute project, at kiebase retrieval, PMMLAssembler is invoked and create KiePackages with KiePMMLModels retrieved from classloader (see CanonicalKieModule.hasNonModelResources(...))\nsuch packages are \"merged\" with the ones (previously) created inside CanonicalKieModule\nreturned kiebase now contains fully crafted KiePackages\nkiebase is used as parameter for evaluation\ndrools-specific models use such kiebase to create a session to execute\nnot-drools models simply ignore the kiebase\n\nFor case 2) there are not differences from original implementation", "createdAt": "2020-05-22T11:44:22Z", "url": "https://github.com/kiegroup/drools/pull/2910", "merged": true, "mergeCommit": {"oid": "40095aeaca3d5b6ddb4fda5b81cfd3ede36af6ef"}, "closed": true, "closedAt": "2020-05-27T09:04:31Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 74, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX4W5ZAH2gAyNDIxODc0NTg5OjgzNTYxNmJkZTY5ODZmN2RjMGUwNzAzNDI5ZDA1MjNmMWYwOGJlNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclVevmAFqTQxODk5NjA5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "835616bde6986f7dc0e0703429d0523f1f08be6d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/835616bde6986f7dc0e0703429d0523f1f08be6d", "committedDate": "2020-04-15T13:46:02Z", "message": "[DROOLS-4859] Fixing generic models archetype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c128e3cd0eac7ea391897c48e847b42b327d521", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5c128e3cd0eac7ea391897c48e847b42b327d521", "committedDate": "2020-04-15T15:07:36Z", "message": "[DROOLS-4859] Implemented model-drools archetype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225e4f8641a2e25fb4ce84f3b60bc7e998bb4321", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/225e4f8641a2e25fb4ce84f3b60bc7e998bb4321", "committedDate": "2020-04-15T15:47:45Z", "message": "[DROOLS-4859] Created scorecard stub module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042d3f7de3662423667e6c792a3c626a6b0d2e74", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/042d3f7de3662423667e6c792a3c626a6b0d2e74", "committedDate": "2020-04-21T08:25:33Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models-drools-archetype/Readme.md\n#\tkie-pmml-new/kie-pmml-models-drools-archetype/pom.xml\n#\tkie-pmml-new/kie-pmml-models-drools-archetype/src/main/resources/archetype-resources/__rootArtifactId__-compiler/src/test/java/__packageModelName__/drools/compiler/executor/__modelName__ModelImplementationProviderTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7adcdd3c8c096cac30016fe10da0986a2c7a3d7a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7adcdd3c8c096cac30016fe10da0986a2c7a3d7a", "committedDate": "2020-04-21T12:15:41Z", "message": "[DROOLS-5261] Move shared code/classes to common modules/packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14941f4e8c434c9699a7bef09805833d1eaec50a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/14941f4e8c434c9699a7bef09805833d1eaec50a", "committedDate": "2020-04-21T12:20:26Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5261' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abbd37ab37e5855a71f3b68147167dca141c6004", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/abbd37ab37e5855a71f3b68147167dca141c6004", "committedDate": "2020-04-21T14:15:39Z", "message": "[DROOLS-4589] Begin implementation of AST factories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f265105d4db3db0056b647b89960839ac7f2585d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f265105d4db3db0056b647b89960839ac7f2585d", "committedDate": "2020-04-21T14:15:46Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350dbfe5cff1d04f47a6c53511997eaae99386aa", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/350dbfe5cff1d04f47a6c53511997eaae99386aa", "committedDate": "2020-04-22T12:40:48Z", "message": "[DROOLS-4589] Basic working status. No expression implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e38cda04a211d7addddeeab913df98d119ecc230", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e38cda04a211d7addddeeab913df98d119ecc230", "committedDate": "2020-04-23T15:45:35Z", "message": "[DROOLS-5270] Refactored AST factories to avoid duplication between tree model and scorecard model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ed543945ff67a0593ce26b9c6d53187b329ede", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b2ed543945ff67a0593ce26b9c6d53187b329ede", "committedDate": "2020-04-23T15:53:04Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5270' into DROOLS-4589\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLPredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLTruePredicateASTFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactory.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLTruePredicateASTFactoryTest.java\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e0eda6781e8250d2b4dd02489067002999f7c7", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/50e0eda6781e8250d2b4dd02489067002999f7c7", "committedDate": "2020-04-24T08:27:12Z", "message": "[DROOLS-5270] Fixed as per PR suggestin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597483906ae6b2e85308a58c4c6bb5a83839fd70", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/597483906ae6b2e85308a58c4c6bb5a83839fd70", "committedDate": "2020-04-24T09:57:19Z", "message": "[DROOLS-4589] Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe7fe670ea4170be22ac983b475d3c768e44455", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4fe7fe670ea4170be22ac983b475d3c768e44455", "committedDate": "2020-04-24T09:58:01Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-5270' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76aacecf92180069ad7d5654abf452d63bad102b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/76aacecf92180069ad7d5654abf452d63bad102b", "committedDate": "2020-04-24T13:10:23Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/KiePMMLStatusHolder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f28a145b338ec0a37ff309d0801ea4a5c17e182a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f28a145b338ec0a37ff309d0801ea4a5c17e182a", "committedDate": "2020-04-24T13:16:42Z", "message": "[DROOLS-4589] Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/1d1a0304fafc0acb4f7c997fa8e361d4e2c78ba0", "committedDate": "2020-04-24T13:20:13Z", "message": "[DROOLS-4589] Add Release status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a17602bdf89f87c839634bd7728d3799bfd76341", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a17602bdf89f87c839634bd7728d3799bfd76341", "committedDate": "2020-04-28T09:34:12Z", "message": "[DROOLS-4589] Refactored DATA_TYPE to avoid reflection. Implemented PrimitiveBoxedUtils as support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69fb7fc99d63af83ffa98f9c56d2432a7addca74", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/69fb7fc99d63af83ffa98f9c56d2432a7addca74", "committedDate": "2020-04-28T10:21:03Z", "message": "[DROOLS-4589] Implemented KiePMMLScorecardModelCharacteristicASTFactoryTest. Implemented missing tests. Refactoring some common classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddd196f0f3fd084dcd2fb2ec5ebdcbe3a1986a6", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4ddd196f0f3fd084dcd2fb2ec5ebdcbe3a1986a6", "committedDate": "2020-04-28T12:29:48Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e548de06921b59f16e783c08620481789c8769b2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e548de06921b59f16e783c08620481789c8769b2", "committedDate": "2020-04-28T12:30:09Z", "message": "[DROOLS-4589] Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef39f0f83350d5162c4f4463ef35e7ecc8600cc2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/ef39f0f83350d5162c4f4463ef35e7ecc8600cc2", "committedDate": "2020-04-28T12:56:30Z", "message": "[DROOLS-4589] Fixed as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e299560a793700f8f1ee7ad1e1ff54458f83c0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/47e299560a793700f8f1ee7ad1e1ff54458f83c0", "committedDate": "2020-04-29T09:17:17Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d17682b77f8e09459d1cdb98cda929838b9e4e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/43d17682b77f8e09459d1cdb98cda929838b9e4e", "committedDate": "2020-04-29T10:02:17Z", "message": "[DROOLS-4589] Move drools evaluation inside model itself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344f7f1a9d140a15b51ce72356c591f609148e9b", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/344f7f1a9d140a15b51ce72356c591f609148e9b", "committedDate": "2020-04-29T11:33:52Z", "message": "[DROOLS-5239] Simple scorecard test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe93748cd419cc33de30a12ddf337fd979bc157", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/dfe93748cd419cc33de30a12ddf337fd979bc157", "committedDate": "2020-04-29T12:59:08Z", "message": "[DROOLS-4589] Fixing usage of Attribute partialScore inside generated rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb212d7cf826ca0085dc17237a43e6b2806c59a0", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/fb212d7cf826ca0085dc17237a43e6b2806c59a0", "committedDate": "2020-04-29T13:42:07Z", "message": "[DROOLS-5239] Fix simple scorecard test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0febba16cacc586c2fdceb8387b33246f2a1cb28", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0febba16cacc586c2fdceb8387b33246f2a1cb28", "committedDate": "2020-04-29T14:24:02Z", "message": "[DROOLS-4589] Fixing OutputField (only for predictedValue feature)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abef3d79fad32dd64c479f0393d95d898c06ac91", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/abef3d79fad32dd64c479f0393d95d898c06ac91", "committedDate": "2020-04-29T14:24:13Z", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-4589' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc39fbbce1400666793c381fa446a1a15c05b0b", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/2dc39fbbce1400666793c381fa446a1a15c05b0b", "committedDate": "2020-04-29T14:30:44Z", "message": "[DROOLS-5239] Use target fields for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f3812514aae8413e176ae16faf642156cc7c54", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/41f3812514aae8413e176ae16faf642156cc7c54", "committedDate": "2020-04-29T14:49:13Z", "message": "[DROOLS-5239] Add test for simple scorecard with categorical variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09da97b521f826a43048cfb275c804f3261f67a3", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/09da97b521f826a43048cfb275c804f3261f67a3", "committedDate": "2020-04-30T10:53:57Z", "message": "[DROOLS-5239] Add simple scorecard test with mixed variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b6d1a7ccc13b1003e485ff684469b08df9c960", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/d7b6d1a7ccc13b1003e485ff684469b08df9c960", "committedDate": "2020-04-30T14:25:32Z", "message": "[DROOLS-5239] Add test for compound predicates in scorecards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8092604c1eef46bac24646928947ff740acd42f2", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8092604c1eef46bac24646928947ff740acd42f2", "committedDate": "2020-04-30T15:07:27Z", "message": "[DROOLS-4589] Implemented reason code evaluation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f5cf123d76671bfddc74b0785dbc20d7a131a9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/57f5cf123d76671bfddc74b0785dbc20d7a131a9", "committedDate": "2020-04-30T15:08:43Z", "message": "Merge branch 'DROOLS-4589' of github.com:gitgabrio/drools into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0724040e0e801922ea448d37e3befc42ef3f1f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/0f0724040e0e801922ea448d37e3befc42ef3f1f", "committedDate": "2020-04-30T15:50:42Z", "message": "[DROOLS-4589] Fixed evaluation with compound predicates. Fixed reasoncode population"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2041554a4fa2fc319df1d1554695f1523b89961d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/2041554a4fa2fc319df1d1554695f1523b89961d", "committedDate": "2020-04-30T15:51:11Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f775a7b65079ef27726f58d5d1727d09efb062", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/88f775a7b65079ef27726f58d5d1727d09efb062", "committedDate": "2020-05-04T13:28:55Z", "message": "[DROOLS-5239] Add tests for nested compound predicates in scorecards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7f52a16dd8125390428a23dc9cda673c88a6aa", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/2d7f52a16dd8125390428a23dc9cda673c88a6aa", "committedDate": "2020-05-04T14:47:43Z", "message": "[DROOLS-5239] Add basic test for evaluation of partial score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f0688720a922cb10d2877eebcc0a7316e976085", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6f0688720a922cb10d2877eebcc0a7316e976085", "committedDate": "2020-05-05T07:38:13Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "447f49ab863a2f68d6940fcd6386d492d03ab093", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/447f49ab863a2f68d6940fcd6386d492d03ab093", "committedDate": "2020-05-05T13:18:51Z", "message": "[DROOLS-4589] Fixed CompoundNestedPredicate. Update version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c5db7371489d16e3f2872bca7226a76e566213", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/68c5db7371489d16e3f2872bca7226a76e566213", "committedDate": "2020-05-05T13:37:00Z", "message": "[DROOLS-4589] Ignoring BasicComplexPartialScoreTest since it is using ComplexPartialScore -> Expression (not implemented in this iteration)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d83c7b702e7c955bcb89ad260d03ba680b0706a7", "author": {"user": {"login": "jiripetrlik", "name": "Jiri Petrlik"}}, "url": "https://github.com/kiegroup/drools/commit/d83c7b702e7c955bcb89ad260d03ba680b0706a7", "committedDate": "2020-05-05T14:04:21Z", "message": "[DROOLS-5239] Add test for nested complex partial score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "630733ca1504761fdc3896f0fba8af7c09dfda9a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/630733ca1504761fdc3896f0fba8af7c09dfda9a", "committedDate": "2020-05-06T14:21:47Z", "message": "[DROOLS-4589] Minor refactoring. Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46051d7a62218a4f1bf1a493622fc804de1de6a9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/46051d7a62218a4f1bf1a493622fc804de1de6a9", "committedDate": "2020-05-06T14:22:20Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8352a8d4fa60112b292ffb6e9c62d51626bf10", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/3d8352a8d4fa60112b292ffb6e9c62d51626bf10", "committedDate": "2020-05-07T07:56:49Z", "message": "[DROOLS-4589] Fixing as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c151a0e4fc06492a095c5a99bde9ea0f965da8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/16c151a0e4fc06492a095c5a99bde9ea0f965da8", "committedDate": "2020-05-07T09:05:58Z", "message": "[DROOLS-4589] Replaced String with OPERATOR inside KiePMMLOperatorValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93f63c903945f2341ec38ec0ac3f65be8721a2b", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d93f63c903945f2341ec38ec0ac3f65be8721a2b", "committedDate": "2020-05-07T09:05:58Z", "message": "[DROOLS-4589] Replaced String with BOOLEAN_OPERATOR inside KiePMMLFieldOperatorValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a71995a93899d483efe56b4b76c6a8d03e4d6594", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/a71995a93899d483efe56b4b76c6a8d03e4d6594", "committedDate": "2020-05-07T10:19:19Z", "message": "[DROOLS-5258] Add Readme.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cc995e35948a7e4e49a89713189af8e82b82ce1", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7cc995e35948a7e4e49a89713189af8e82b82ce1", "committedDate": "2020-05-07T10:20:47Z", "message": "Merge branch 'DROOLS-5258' of github.com:gitgabrio/drools into DROOLS-5258"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47d8fecf55dcd7678da39e33199a70e3c3adfd9", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c47d8fecf55dcd7678da39e33199a70e3c3adfd9", "committedDate": "2020-05-07T12:28:26Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5258"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "768c87d0d18ef1d9ca89ac3d97d62b22f8b45319", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/768c87d0d18ef1d9ca89ac3d97d62b22f8b45319", "committedDate": "2020-05-15T13:26:18Z", "message": "[DROOLS-5258] Removed PackageDescr from KiePMMLDroolsModel. Changed way of KieSession instantiation for Drools model evaluation. Changed package name for generated RegressionModels. Fixed all tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0557064684e47925762c067cf934a9c90a81ba4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/b0557064684e47925762c067cf934a9c90a81ba4", "committedDate": "2020-05-18T09:37:01Z", "message": "[DROOLS-5258] Code-generating KiePMMLScorecardModel inside KiePMMLScorecardModelFactory.getKiePMMLScorecardModel. All tests running. Working status with kjar not verified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff0647a7454c60dbef92250f43d1668bb4b2c56", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4ff0647a7454c60dbef92250f43d1668bb4b2c56", "committedDate": "2020-05-19T11:20:29Z", "message": "[DROOLS-5258] Fixing scoremodel code-generation. Code-generating KiePMMLModelFactories."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb9ef09808c3d92e546cdcc76723c4fa7d6e1e6", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7cb9ef09808c3d92e546cdcc76723c4fa7d6e1e6", "committedDate": "2020-05-19T11:20:56Z", "message": "[DROOLS-5258] Fixing scoremodel code-generation. Code-generating KiePMMLModelFactories."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6541a81e32cedeb2de0816dcb6fb91e70293b88", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d6541a81e32cedeb2de0816dcb6fb91e70293b88", "committedDate": "2020-05-22T07:33:13Z", "message": "[DROOLS-5258] Fix package assembling when invoked at runtime. Propagating original kiebase to avoid retrieval of new container."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4752ce7e5ebf3cbeaa5e0de646912b9aac8b0eed", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4752ce7e5ebf3cbeaa5e0de646912b9aac8b0eed", "committedDate": "2020-05-22T08:45:02Z", "message": "[DROOLS-5258] Removing usage of GAV for session retrieval. Using only propagated kiebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e059d141b44ed5af369d79f044ec92bdf9538164", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e059d141b44ed5af369d79f044ec92bdf9538164", "committedDate": "2020-05-22T10:50:41Z", "message": "[DROOLS-5258] Removing releaseId from signatures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a43e35ba1f60c439ade93dcf487510f5b5b3059", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/7a43e35ba1f60c439ade93dcf487510f5b5b3059", "committedDate": "2020-05-22T10:58:09Z", "message": "[DROOLS-5258] Removing releaseId from signatures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5090b5dfbdcd44c98d9754f41a4f0086c504dcba", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/5090b5dfbdcd44c98d9754f41a4f0086c504dcba", "committedDate": "2020-05-22T11:31:40Z", "message": "[DROOLS-5258] Implemented KnowledgeBaseUtils."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4958630e6805076ec56fcb377bb33385b7865bca", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/4958630e6805076ec56fcb377bb33385b7865bca", "committedDate": "2020-05-22T11:32:03Z", "message": "[DROOLS-5258] Implemented KnowledgeBaseUtils."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/8fb77328113958ca1abc6d3fc33c92435be329e0", "committedDate": "2020-05-22T11:32:41Z", "message": "[DROOLS-5258] Add private constructor to KnowledgeBaseUtils."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODUwMTcy", "url": "https://github.com/kiegroup/drools/pull/2910#pullrequestreview-416850172", "createdAt": "2020-05-22T11:48:26Z", "commit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "state": "COMMENTED", "comments": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0ODoyNlrOGZUVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNzowMFrOGZWtLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDc2OA==", "bodyText": "What is the reason of this change? Why only Scorecard should be different?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429200768", "createdAt": "2020-05-22T11:48:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "diffHunk": "@@ -40,7 +40,7 @@\n     REGRESSION_MODEL(\"RegressionModel\"),\n     RULESET_MODEL(\"RulesetModel\"),\n     SEQUENCE_MODEL(\"SequenceModel\"),\n-    SCORECARD_MODEL(\"ScorecardModel\"),\n+    SCORECARD_MODEL(\"Scorecard\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjQ1Ng==", "bodyText": "Is there any reason why you are removing _?\nIs this package name visible/known by the user?\nIf it is an implementation detail as I expect I would prefer to avoid name clash so I propose to replace this method as\n        return modelName.replace(\" \", \"_\").replace(\"_\", \"__\");\nWdyt?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429202456", "createdAt": "2020-05-22T11:52:39Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjgxNg==", "bodyText": "Same consideration as above\n        return upperCasedInput.replace(\".\", \"___\").replace(\"_\", \"__\").replace(\" \", \"_\");", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429202816", "createdAt": "2020-05-22T11:53:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/KiePMMLModelUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.utils;\n+\n+public class KiePMMLModelUtils {\n+\n+    private KiePMMLModelUtils() {\n+    }\n+\n+    /**\n+     * Method to be used by <b>every</b> KiePMML implementation to retrieve the <b>package</b> name\n+     * out of the model name\n+     * @param modelName\n+     * @return\n+     */\n+    public static String getSanitizedPackageName(String modelName) {\n+        return modelName.replace(\" \", \"\").replace(\"_\", \"\").toLowerCase();\n+    }\n+\n+    /**\n+     * Convert the given <code>String</code> in a valid class name (i.e. no dots, no spaces, first letter upper case)\n+     * @param input\n+     * @return\n+     */\n+    public static String getSanitizedClassName(String input) {\n+        String upperCasedInput = input.substring(0, 1).toUpperCase() + input.substring(1);\n+        return upperCasedInput.replace(\".\", \"\").replace(\"_\", \"\").replace(\" \", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMzMyOA==", "bodyText": "Can you please clarify? Is this a factory? Why does it extend KiePMMLModel?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429203328", "createdAt": "2020-05-22T11:54:56Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLFactoryModel.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+\n+/**\n+ * KIE representation of PMML model\n+ */\n+public class KiePMMLFactoryModel extends KiePMMLModel implements HasSourcesMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDkwMg==", "bodyText": "Is there any specific reason why you get the resource from the context classloader instead of JavaParserUtils.class.getResourceAsStream?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429204902", "createdAt": "2020-05-22T11:58:44Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.io.InputStream;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+\n+public class JavaParserUtils {\n+\n+    private JavaParserUtils() {\n+    }\n+\n+    public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";\n+\n+    public static CompilationUnit getFromFileName(String fileName) {\n+        try {\n+            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNjc5NA==", "bodyText": "To be removed or at least moved to a different path :)", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429206794", "createdAt": "2020-05-22T12:03:27Z", "author": {"login": "danielezonca"}, "path": "kie-pmml/src/test/java/org/kie/pmml/pmml_4_2/DroolsAbstractPMMLTest.java", "diffHunk": "@@ -72,12 +73,47 @@\n     protected DataSource<PMMLRequestData> data;\n     protected DataSource<PMML4Result> resultData;\n     protected DataSource<PMML4Data> pmmlData;\n-\n-    private KieSession kSession;\n     protected KieBase kbase;\n+    private KieSession kSession;\n \n     public DroolsAbstractPMMLTest() {\n         super();\n+        Properties props = System.getProperties();\n+        props.setProperty(\"drools.dump.dir\", \"/home/gcardosi/NotBackedUp/old_pmml_dump_dir\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNzYxMw==", "bodyText": "Why have you dropped kie-pmml-integration-tests?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429207613", "createdAt": "2020-05-22T12:05:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/pom.xml", "diffHunk": "@@ -39,170 +39,17 @@\n     <module>kie-pmml-models-archetype</module>\n     <module>kie-pmml-models-drools-archetype</module>\n     <module>kie-pmml-models</module>\n-    <module>kie-pmml-integration-tests</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwOTYxNQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429209615", "createdAt": "2020-05-22T12:10:25Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "diffHunk": "@@ -117,7 +117,8 @@ public KiePMMLRegressionModelFactoryTest(String modelName, double tableIntercept\n \n     @Test\n     public void getKiePMMLRegressionModelTest() throws IOException, IllegalAccessException, InstantiationException {\n-        KiePMMLRegressionModel retrieved = getKiePMMLRegressionModel(dataDictionary, regressionModel);\n+//        assertNotNull(getKiePMMLRegressionModelClasses(dataDictionary, regressionModel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMTIwNw==", "bodyText": "I would prefer to replace ifPresent with map and then add orElseThrow with an error message so if the template will change an error is raised.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429211207", "createdAt": "2020-05-22T12:14:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.io.InputStream;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+\n+public class JavaParserUtils {\n+\n+    private JavaParserUtils() {\n+    }\n+\n+    public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";\n+\n+    public static CompilationUnit getFromFileName(String fileName) {\n+        try {\n+            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);\n+            return StaticJavaParser.parse(resource);\n+        } catch (Exception e) {\n+            throw new KiePMMLInternalException(String.format(\"Failed to parse %s due to %s\", fileName, e.getMessage()), e);\n+        }\n+    }\n+\n+    public static void setModelName(String modelName, ClassOrInterfaceDeclaration modelTemplate) {\n+        modelTemplate.getFieldByName(\"MODEL_NAME\").ifPresent(fieldDeclaration -> fieldDeclaration.getVariable(0).setInitializer(new StringLiteralExpr(modelName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjQ0OA==", "bodyText": "Please remove it or add an if condition logger.isTraceEnabled before", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429212448", "createdAt": "2020-05-22T12:17:23Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java", "diffHunk": "@@ -53,11 +55,22 @@ public PMML_MODEL getPMMLModelType() {\n \n     @Override\n     public KiePMMLRegressionModel getKiePMMLModel(DataDictionary dataDictionary, RegressionModel model, Object kBuilder) {\n-        logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n+        logger.trace(\"getKiePMMLModel {} {} {}\", dataDictionary, model, kBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjQ4Mw==", "bodyText": "Please remove it or add an if condition logger.isTraceEnabled before", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429212483", "createdAt": "2020-05-22T12:17:29Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java", "diffHunk": "@@ -53,11 +55,22 @@ public PMML_MODEL getPMMLModelType() {\n \n     @Override\n     public KiePMMLRegressionModel getKiePMMLModel(DataDictionary dataDictionary, RegressionModel model, Object kBuilder) {\n-        logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n+        logger.trace(\"getKiePMMLModel {} {} {}\", dataDictionary, model, kBuilder);\n         validate(dataDictionary, model);\n         try {\n-            return KiePMMLRegressionModelFactory.getKiePMMLRegressionModel(dataDictionary, model);\n+            return KiePMMLRegressionModelFactory.getKiePMMLRegressionModelClasses(dataDictionary, model);\n         } catch (IOException | IllegalAccessException | InstantiationException e) {\n+            throw new KiePMMLException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public KiePMMLRegressionModel getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, RegressionModel model, Object kBuilder) {\n+        logger.trace(\"getKiePMMLModelFromPlugin {} {} {}\", dataDictionary, model, kBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjg1MA==", "bodyText": "Why do you need this dependency with Regression compiler that is not a Drools based model?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429212850", "createdAt": "2020-05-22T12:18:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/pom.xml", "diffHunk": "@@ -15,6 +15,10 @@\n   <description>PMML Regression Compiler</description>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-internal</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzY2Nw==", "bodyText": "Can you please add a isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429213667", "createdAt": "2020-05-22T12:20:19Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzcxNA==", "bodyText": "Can you please add a isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429213714", "createdAt": "2020-05-22T12:20:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {} {} {}\", dataDictionary, model, fieldTypeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzk1OA==", "bodyText": "Can you please create a ticket for this so we will not forget?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429213958", "createdAt": "2020-05-22T12:20:58Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -40,8 +44,20 @@ public PMML_MODEL getPMMLModelType() {\n     }\n \n     @Override\n-    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model) {\n-        logger.trace(\"getKiePMMLDroolsModel {} {}\", dataDictionary, model);\n-        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model);\n+    public KiePMMLTreeModel getKiePMMLDroolsModel(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsModel {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLTreeModel(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {} {} {}\", dataDictionary, model, fieldTypeMap);\n+        return KiePMMLTreeModelFactory.getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+    }\n+\n+    @Override\n+    public Map<String, String> getKiePMMLDroolsModelSourcesMap(DataDictionary dataDictionary, TreeModel model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, String packageName) {\n+        // TODO {gcardosi} to implement\n+        throw new RuntimeException(\"Not implemented, yet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNDE4MQ==", "bodyText": "Are you sure about this change?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429214181", "createdAt": "2020-05-22T12:21:31Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-tests/src/test/java/org/kie/pmml/models/drools/scorecard/tests/CompoundNestedPredicateScorecardTest.java", "diffHunk": "@@ -66,15 +66,15 @@ public static void setupClass() {\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][]{\n                 { -50, \"classB\", -8, \"characteristic2ReasonCode\", null },\n-                { -50, \"classD\", -8, \"characteristic2ReasonCode\", null },\n-                { -9, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { 25.4, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { -7, \"classA\", -8, \"characteristic2ReasonCode\", null },\n-                { -7, \"classC\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 5, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 7.4, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n-                { 12, \"classB\", 75, \"characteristic1ReasonCode\", null },\n-                { 12, \"classD\", 75, \"characteristic1ReasonCode\", null },\n+//                { -50, \"classD\", -8, \"characteristic2ReasonCode\", null },\n+//                { -9, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { 25.4, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { -7, \"classA\", -8, \"characteristic2ReasonCode\", null },\n+//                { -7, \"classC\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 5, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 7.4, \"classB\", -15.5, \"characteristic1ReasonCode\", \"characteristic2ReasonCode\" },\n+//                { 12, \"classB\", 75, \"characteristic1ReasonCode\", null },\n+//                { 12, \"classD\", 75, \"characteristic1ReasonCode\", null },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNTc2Nw==", "bodyText": "Can you please add isDebugEnabled check where it is missing?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429215767", "createdAt": "2020-05-22T12:25:21Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLAgendaListenerUtils.java", "diffHunk": "@@ -33,33 +33,51 @@\n \n     public static AgendaEventListener getAgendaEventListener(final Logger logger) {\n         return new AgendaEventListener() {\n-            public void matchCancelled(MatchCancelledEvent event) {/*Not used */}\n+            public void matchCancelled(MatchCancelledEvent event) { if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjIxNA==", "bodyText": "Comment to be removed?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216214", "createdAt": "2020-05-22T12:26:26Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrFactory.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     public static final String PMML4_RESULT = \"PMML4Result\";\n     public static final String PMML4_RESULT_IDENTIFIER = \"$pmml4Result\";\n-    public static final String OUTPUTFIELDS_MAP = \"Map<String, Object>\";\n+    public static final String OUTPUTFIELDS_MAP = \"Map\";/*\"Map<String, Object>\";*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjQ0OQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216449", "createdAt": "2020-05-22T12:27:04Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjQ5OQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216499", "createdAt": "2020-05-22T12:27:11Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);\n+        List<KiePMMLModel> models = new ArrayList<>();\n+        knowledgeBase.getKiePackages().forEach(kpkg -> {\n+            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n+            if (pmmlPackage != null) {\n+                models.addAll(pmmlPackage.getAllModels().values());\n+            }\n+        });\n+        return models;\n+    }\n+\n+    public static Optional<KiePMMLModel> getModel(final KieBase knowledgeBase, String modelName) {\n+        logger.trace(\"getModels {} {}\", knowledgeBase, modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNjk0NQ==", "bodyText": "This code is @jomarko approved \ud83d\ude04", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429216945", "createdAt": "2020-05-22T12:28:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/KnowledgeBaseUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.kie.api.KieBase;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.container.PMMLPackage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnowledgeBaseUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KnowledgeBaseUtils.class);\n+\n+    private KnowledgeBaseUtils() {\n+        // Avoid instantiation\n+    }\n+\n+    public static List<KiePMMLModel> getModels(final KieBase knowledgeBase) {\n+        logger.trace(\"getModels {}\", knowledgeBase);\n+        List<KiePMMLModel> models = new ArrayList<>();\n+        knowledgeBase.getKiePackages().forEach(kpkg -> {\n+            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n+            if (pmmlPackage != null) {\n+                models.addAll(pmmlPackage.getAllModels().values());\n+            }\n+        });\n+        return models;\n+    }\n+\n+    public static Optional<KiePMMLModel> getModel(final KieBase knowledgeBase, String modelName) {\n+        logger.trace(\"getModels {} {}\", knowledgeBase, modelName);\n+        return getModels(knowledgeBase)\n+                .stream()\n+                .filter(model -> Objects.equals(modelName, model.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzMwOQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429217309", "createdAt": "2020-05-22T12:29:12Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzQwMw==", "bodyText": "Can you please add isDebugEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429217403", "createdAt": "2020-05-22T12:29:25Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);\n+        return KnowledgeBaseUtils.getModel(knowledgeBase, modelName);\n     }\n \n     @Override\n-    public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n+    public PMML4Result evaluate(String modelName, PMMLContext context) {\n+        logger.debug(\"evaluate {} {}\", modelName, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODM0OA==", "bodyText": "Do you really need to use the internal interface instead of the public one? After a quick look it seems to me not needed", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429218348", "createdAt": "2020-05-22T12:31:41Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODY4Nw==", "bodyText": "I would prefer to raise an exception if the model executor is not available. Wdyt?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429218687", "createdAt": "2020-05-22T12:32:29Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -15,68 +15,61 @@\n  */\n package org.kie.pmml.evaluator.core.service;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import org.drools.core.definitions.InternalKnowledgePackage;\n-import org.kie.api.KieBase;\n-import org.kie.api.io.ResourceType;\n+import org.drools.core.impl.InternalKnowledgeBase;\n import org.kie.api.pmml.PMML4Result;\n import org.kie.api.pmml.PMMLRequestData;\n import org.kie.api.pmml.ParameterInfo;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n-import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.api.executor.PMMLContext;\n import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n import org.kie.pmml.evaluator.core.executor.PMMLModelExecutorFinderImpl;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PMMLRuntimeImpl implements PMMLRuntime {\n \n     private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);\n \n-    private final KieBase knowledgeBase;\n+    private final InternalKnowledgeBase knowledgeBase;\n     private final PMMLModelExecutorFinderImpl pmmlModelExecutorFinder;\n \n-    public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n+    public PMMLRuntimeImpl(InternalKnowledgeBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlModelExecutorFinder) {\n         this.knowledgeBase = knowledgeBase;\n         this.pmmlModelExecutorFinder = pmmlModelExecutorFinder;\n     }\n \n     @Override\n     public List<KiePMMLModel> getModels() {\n         logger.trace(\"getModels\");\n-        List<KiePMMLModel> models = new ArrayList<>();\n-        knowledgeBase.getKiePackages().forEach(kpkg -> {\n-            PMMLPackage pmmlPackage = (PMMLPackage) ((InternalKnowledgePackage) kpkg).getResourceTypePackages().get(ResourceType.PMML);\n-            if (pmmlPackage != null) {\n-                models.addAll(pmmlPackage.getAllModels().values());\n-            }\n-        });\n-        return models;\n+        return KnowledgeBaseUtils.getModels(knowledgeBase);\n     }\n \n     @Override\n     public Optional<KiePMMLModel> getModel(String modelName) {\n-        logger.trace(\"getModels {}\", modelName);\n-        return getModels()\n-                .stream()\n-                .filter(model -> Objects.equals(modelName, model.getName()))\n-                .findFirst();\n+        logger.trace(\"getModel {}\", modelName);\n+        return KnowledgeBaseUtils.getModel(knowledgeBase, modelName);\n     }\n \n     @Override\n-    public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n+    public PMML4Result evaluate(String modelName, PMMLContext context) {\n+        logger.debug(\"evaluate {} {}\", modelName, context);\n+        KiePMMLModel toEvaluate = getModel(modelName).orElseThrow(() -> new KiePMMLException(\"Failed to retrieve model with name \" + modelName));\n+        return evaluate(toEvaluate, context);\n+    }\n+\n+    protected PMML4Result evaluate(KiePMMLModel model, PMMLContext context) {\n         logger.debug(\"evaluate {} {}\", model, context);\n         addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n-        return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n+        return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(knowledgeBase, model, context) : new PMML4Result();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTA0OA==", "bodyText": "Can you mark all the parameters as final (or remove final to knowledgeBase one :) )?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429219048", "createdAt": "2020-05-22T12:33:15Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/executor/PMMLModelExecutor.java", "diffHunk": "@@ -31,11 +32,12 @@\n \n     /**\n      * Evaluate the model, given the context\n+     * @param knowledgeBase The <code>KieBase</code> we are currently working on.\n+     * It may be <code>null</code> for testing purpose for <b>not drools-related</b> models\n      * @param model the model to evaluate\n      * @param context the context with all the input variables\n-     * @param releaseId Used to indirectly retrieve same instance of kiecontainer\n      * @return the result of the evaluation\n      * @throws KiePMMLInternalException\n      */\n-    PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId);\n+    PMML4Result evaluate(final KieBase knowledgeBase, KiePMMLModel model, PMMLContext context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTQ4MA==", "bodyText": "I would like to preserve cases. It reduces the possibility of name clashes.\nIn any case I think you should use the package sanitizer utils here too to be sure to have it coherent with the rest of the code", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429219480", "createdAt": "2020-05-22T12:34:17Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -96,16 +127,57 @@ protected void addModels(KnowledgeBuilderImpl kbuilderImpl, List<KiePMMLModel> t\n      * @throws ExternalException if any other kind of <code>Exception</code> has been thrown during execution\n      */\n     protected List<KiePMMLModel> getKiePMMLModelsFromResource(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            final Class<? extends KiePMMLModelFactory> aClass = (Class<? extends KiePMMLModelFactory>) Class.forName(packageName + \".\" + factoryClassName);\n+            return aClass.newInstance().getKiePMMLModels();\n+        } catch (ClassNotFoundException e) {\n+            logger.info(String.format(\"%s not found in kjar, going to compile model\", factoryClassName));\n+        } catch (Exception e) {\n+            throw new KiePMMLException(\"Exception while instantiating \" + factoryClassName, e);\n+        }\n         PMMLCompiler pmmlCompiler = kbuilderImpl.getCachedOrCreate(PMML_COMPILER_CACHE_KEY, () -> getCompiler(kbuilderImpl));\n-        // TODO {gcardosi} replace with dynamically generated one\n-        logger.debug(\"getKiePMMLModelsFromResource releaseId {}\", RELEASE_ID);\n         try {\n-            return pmmlCompiler.getModels(resource.getInputStream(), RELEASE_ID);\n+            return pmmlCompiler.getModels(resource.getInputStream(), kbuilderImpl);\n         } catch (IOException e) {\n             throw new ExternalException(\"ExternalException\", e);\n         }\n     }\n \n+    /**\n+     * @param kbuilderImpl\n+     * @param resource\n+     * @return\n+     */\n+    protected List<KiePMMLModel> getKiePMMLModelsFromResourceFromPlugin(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        PMMLCompiler pmmlCompiler = kbuilderImpl.getCachedOrCreate(PMML_COMPILER_CACHE_KEY, () -> getCompiler(kbuilderImpl));\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            return pmmlCompiler.getModelsFromPlugin(factoryClassName, packageName, resource.getInputStream(), kbuilderImpl);\n+        } catch (IOException e) {\n+            throw new ExternalException(\"ExternalException\", e);\n+        }\n+    }\n+\n+    /**\n+     * Returns an array where the first item is the <b>factory class</b> name and the second item is the <b>package</b> name,\n+     * built starting from the given <code>Resource</code>\n+     * @param resource\n+     * @return\n+     */\n+    private String[] getFactoryClassNamePackageName(Resource resource) {\n+        String sourcePath = resource.getSourcePath();\n+        String fileName = sourcePath.substring(sourcePath.lastIndexOf('/') + 1);\n+        fileName = fileName.replace(\".pmml\", \"\");\n+        String packageName = fileName.toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMjAyNw==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429222027", "createdAt": "2020-05-22T12:40:02Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -41,7 +49,7 @@\n \n     @Override\n     public List<KiePMMLModel> getModels(InputStream inputStream, Object kbuilder) {\n-        logger.trace(\"getModels {}\", inputStream);\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMjA2Mg==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429222062", "createdAt": "2020-05-22T12:40:07Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -54,6 +62,42 @@\n         }\n     }\n \n+    @Override\n+    public List<KiePMMLModel> getModelsFromPlugin(String factoryClassName, String packageName, InputStream inputStream, Object kbuilder) {\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNTY5NQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429225695", "createdAt": "2020-05-22T12:47:46Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFactoryFactory.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFromFileName;\n+\n+/**\n+ * This class is meant to create source code for PMML file-specific <b>Factory</b>\n+ */\n+public class KiePMMLFactoryFactory {\n+\n+    private static final String KIE_PMML_MODEL_FACTORY_TEMPLATE_JAVA = \"KiePMMLModelFactoryTemplate.tmpl\";\n+    private static final String KIE_PMML_MODEL_FACTORY_TEMPLATE = \"KiePMMLModelFactoryTemplate\";\n+    private static final String KIE_PMML_MODELS_FIELD = \"KIE_PMML_MODELS\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLFactoryFactory.class.getName());\n+\n+    private KiePMMLFactoryFactory() {\n+        // Avoid instantiation\n+    }\n+\n+    public static Map<String, String> getFactorySourceCode(String factoryClassName, String packageName, Set<String> generatedClasses) {\n+        logger.trace(\"getFactorySourceCode {} {} {}\", factoryClassName, packageName, generatedClasses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjg3Mg==", "bodyText": "I think we should improve this interface: I would like to have at least a marker interface as return value and unify knowledgeBase behavior. Wdyt?\nIf you agree, can you please create a ticket to track it?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429226872", "createdAt": "2020-05-22T12:50:14Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -60,7 +60,24 @@ public String getTargetField() {\n         return Collections.unmodifiableMap(missingValueReplacementMap);\n     }\n \n-    public abstract Object evaluate(Map<String, Object> requestData);\n+    /**\n+     * Method to retrieve the <b>package</b> name to be used inside kiebase/package attribute of\n+     * kmodule.xml and to use for package creation inside PMMLAssemblerService\n+     * By default returns the package name of the current instance\n+     * To be eventually overridden.\n+     * @return\n+     */\n+    public String getKModulePackageName() {\n+        return this.getClass().getPackage().getName();\n+    }\n+\n+    /**\n+     * @param knowledgeBase the knowledgeBase we are working on. Add as <code>Object</code> to avoid direct dependency. It is needed only by <b>Drools-dependent</b>\n+     * models, so it may be <b>ignored</b> by others\n+     * @param requestData\n+     * @return\n+     */\n+    public abstract Object evaluate(final Object knowledgeBase, Map<String, Object> requestData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMjQ4MQ==", "bodyText": "If I have understood correctly here we expect to have some models with source map and some not.\nWhy? Can you please clarify?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429232481", "createdAt": "2020-05-22T13:02:06Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java", "diffHunk": "@@ -54,6 +62,42 @@\n         }\n     }\n \n+    @Override\n+    public List<KiePMMLModel> getModelsFromPlugin(String factoryClassName, String packageName, InputStream inputStream, Object kbuilder) {\n+        logger.trace(\"getModels {} {}\", inputStream, kbuilder);\n+        try {\n+            PMML commonPMMLModel = KiePMMLUtil.load(inputStream);\n+            Set<String> expectedClasses = commonPMMLModel.getModels()\n+                    .stream()\n+                    .map(model -> packageName + \".\" + getSanitizedClassName(model.getModelName()))\n+                    .collect(Collectors.toSet());\n+            List<KiePMMLModel> toReturn = getModelsFromPlugin(packageName, commonPMMLModel, kbuilder);\n+            Set<String> generatedClasses = new HashSet<>();\n+            toReturn.forEach(kiePMMLModel -> {\n+                if (kiePMMLModel instanceof HasSourcesMap) {\n+                    generatedClasses.addAll(((HasSourcesMap) kiePMMLModel).getSourcesMap().keySet());\n+                } else {\n+                    generatedClasses.add(kiePMMLModel.getClass().getName());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMzYzMQ==", "bodyText": "This will probably not work with native compilation. Can you please create a ticket to track it so we will verify?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429233631", "createdAt": "2020-05-22T13:04:33Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java", "diffHunk": "@@ -96,16 +127,57 @@ protected void addModels(KnowledgeBuilderImpl kbuilderImpl, List<KiePMMLModel> t\n      * @throws ExternalException if any other kind of <code>Exception</code> has been thrown during execution\n      */\n     protected List<KiePMMLModel> getKiePMMLModelsFromResource(KnowledgeBuilderImpl kbuilderImpl, Resource resource) {\n+        String[] classNamePackageName = getFactoryClassNamePackageName(resource);\n+        String factoryClassName = classNamePackageName[0];\n+        String packageName = classNamePackageName[1];\n+        try {\n+            final Class<? extends KiePMMLModelFactory> aClass = (Class<? extends KiePMMLModelFactory>) Class.forName(packageName + \".\" + factoryClassName);\n+            return aClass.newInstance().getKiePMMLModels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDI2OQ==", "bodyText": "typo drool -> Drools", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429234269", "createdAt": "2020-05-22T13:06:00Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModelWithSources.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.commons.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+/**\n+ * KIE representation of PMML model that use <b>drool</b> for implementation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNTg0Ng==", "bodyText": "I think we should remove this listener and maybe add it only if log level is debug or similar. Wdyt? Otherwise we will generate tons of log messages", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429235846", "createdAt": "2020-05-22T13:09:28Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -36,29 +50,65 @@\n  */\n public class KiePMMLSessionUtils {\n \n-    private final PackageDescr packageDescr;\n-    private final KieSession kieSession;\n-\n-    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n-        this.packageDescr = packageDescr;\n-        kieSession = new KieHelper()\n-                .addContent(packageDescr)\n-                .build(ExecutableModelProject.class)\n-                .newKieSession();\n-        kieSession.insert(new KiePMMLStatusHolder());\n-        kieSession.insert(pmml4Result);\n-        kieSession.setGlobal(PMML4_RESULT_IDENTIFIER, pmml4Result);\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLSessionUtils.class.getName());\n+\n+    private static final CommandFactoryServiceImpl COMMAND_FACTORY_SERVICE = new CommandFactoryServiceImpl();\n+    private final StatelessKieSession kieSession;\n+    private final String modelName;\n+    private final String packageName;\n+    private final List<Command> commands;\n+\n+    private KiePMMLSessionUtils(final InternalKnowledgeBase knowledgeBase, final String modelName, final PMML4Result pmml4Result) {\n+        this.modelName = modelName;\n+        packageName = getSanitizedPackageName(modelName);\n+        kieSession = getKieSession(knowledgeBase);\n+        kieSession.addEventListener(new RuleRuntimeEventListener() {\n+            private final Logger logger = LoggerFactory.getLogger(RuleRuntimeEventListener.class);\n+\n+            @Override\n+            public void objectInserted(ObjectInsertedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            @Override\n+            public void objectUpdated(ObjectUpdatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            @Override\n+            public void objectDeleted(ObjectDeletedEvent event) {\n+                logger.info(event.toString());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjc5NQ==", "bodyText": "Can you verify if it is possible to use KieBase instead of InternalKnowledgeBase?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429236795", "createdAt": "2020-05-22T13:11:24Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -90,16 +140,16 @@ private void addObjectsToSession(final Map<String, Object> unwrappedInputParams,\n      * @param globalName its global name\n      */\n     private void insertObjectInSession(final Object toInsert, final String globalName) {\n-        kieSession.insert(toInsert);\n-        kieSession.setGlobal(globalName, toInsert);\n+        commands.add(COMMAND_FACTORY_SERVICE.newInsert(toInsert));\n+        commands.add(COMMAND_FACTORY_SERVICE.newSetGlobal(globalName, toInsert));\n     }\n \n     public static class Builder {\n \n         private KiePMMLSessionUtils toBuild;\n \n-        private Builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n-            this.toBuild = new KiePMMLSessionUtils(packageDescr, pmml4Result);\n+        private Builder(final InternalKnowledgeBase knowledgeBase, final String modelName, final PMML4Result pmml4Result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODAwMQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238001", "createdAt": "2020-05-22T13:13:48Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -44,17 +43,28 @@\n     private KiePMMLTreeModelFactory() {\n     }\n \n-    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n         logger.trace(\"getKiePMMLTreeModel {}\", model);\n         String name = model.getModelName();\n         Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n-        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        final KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n-        final PackageDescr baseDescr = getBaseDescr(kiePMMLDroolsAST, name.toLowerCase());\n+        final List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         return KiePMMLTreeModel.builder(name, Collections.emptyList(), MINING_FUNCTION.byName(model.getMiningFunction().value()), model.getAlgorithmName())\n-                .withPackageDescr(baseDescr)\n+                .withOutputFields(outputFields)\n                 .withFieldTypeMap(fieldTypeMap)\n                 .withTargetField(targetFieldName.orElse(null))\n                 .build();\n     }\n+\n+    /**\n+     * This method returns a <code>KiePMMLDroolsAST</code> out of the given <code>DataDictionary</code> and <code>TreeModel</code>.\n+     * <b>It also populate the given <code>Map</code> that has to be used for final <code>KiePMMLTreeModel</code></b>\n+     * @param dataDictionary\n+     * @param model\n+     * @param fieldTypeMap\n+     * @return\n+     */\n+    public static KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODA2Ng==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238066", "createdAt": "2020-05-22T13:13:56Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/main/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -44,17 +43,28 @@\n     private KiePMMLTreeModelFactory() {\n     }\n \n-    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n         logger.trace(\"getKiePMMLTreeModel {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODQzMw==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238433", "createdAt": "2020-05-22T13:14:40Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -44,24 +63,116 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelFactory.class.getName());\n \n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA = \"KiePMMLScorecardModelTemplate.tmpl\";\n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE = \"KiePMMLScorecardModelTemplate\";\n+\n     private KiePMMLScorecardModelFactory() {\n         // Avoid instantiation\n     }\n \n-    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model) {\n+    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) throws IOException, IllegalAccessException, InstantiationException {\n         logger.trace(\"getKiePMMLScorecardModel {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODQ4NQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238485", "createdAt": "2020-05-22T13:14:46Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -44,24 +63,116 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelFactory.class.getName());\n \n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA = \"KiePMMLScorecardModelTemplate.tmpl\";\n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE = \"KiePMMLScorecardModelTemplate\";\n+\n     private KiePMMLScorecardModelFactory() {\n         // Avoid instantiation\n     }\n \n-    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model) {\n+    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) throws IOException, IllegalAccessException, InstantiationException {\n         logger.trace(\"getKiePMMLScorecardModel {}\", model);\n-        String name = model.getModelName();\n-        Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n-        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        final KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n-        String packageName = name.replace(\" \", \"_\").toLowerCase();\n-        final PackageDescr baseDescr = getBaseDescr(kiePMMLDroolsAST, packageName);\n-        final List<KiePMMLOutputField> outputFields = getOutputFields(model);\n-        return KiePMMLScorecardModel.builder(name, Collections.emptyList(), MINING_FUNCTION.byName(model.getMiningFunction().value()))\n-                .withOutputFields(outputFields)\n-                .withPackageDescr(baseDescr)\n-                .withFieldTypeMap(fieldTypeMap)\n-                .withTargetField(targetFieldName.orElse(null))\n-                .build();\n+        String className = getSanitizedClassName(model.getModelName());\n+        String packageName = getSanitizedPackageName(className);\n+        Map<String, String> sourcesMap = getKiePMMLScorecardModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+        String fullClassName = packageName + \".\" + className;\n+        final Map<String, Class<?>> compiledClasses = KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n+        return (KiePMMLScorecardModel) compiledClasses.get(fullClassName).newInstance();\n+    }\n+\n+    public static Map<String, String> getKiePMMLScorecardModelSourcesMap(final DataDictionary dataDictionary, final Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException {\n+        logger.trace(\"getKiePMMLScorecardModelSourcesMap {} {} {}\", dataDictionary, model, packageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODU2Nw==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238567", "createdAt": "2020-05-22T13:14:57Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -44,24 +63,116 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLScorecardModelFactory.class.getName());\n \n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA = \"KiePMMLScorecardModelTemplate.tmpl\";\n+    private static final String KIE_PMML_SCORECARD_MODEL_TEMPLATE = \"KiePMMLScorecardModelTemplate\";\n+\n     private KiePMMLScorecardModelFactory() {\n         // Avoid instantiation\n     }\n \n-    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model) {\n+    public static KiePMMLScorecardModel getKiePMMLScorecardModel(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) throws IOException, IllegalAccessException, InstantiationException {\n         logger.trace(\"getKiePMMLScorecardModel {}\", model);\n-        String name = model.getModelName();\n-        Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n-        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n-        final KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n-        String packageName = name.replace(\" \", \"_\").toLowerCase();\n-        final PackageDescr baseDescr = getBaseDescr(kiePMMLDroolsAST, packageName);\n-        final List<KiePMMLOutputField> outputFields = getOutputFields(model);\n-        return KiePMMLScorecardModel.builder(name, Collections.emptyList(), MINING_FUNCTION.byName(model.getMiningFunction().value()))\n-                .withOutputFields(outputFields)\n-                .withPackageDescr(baseDescr)\n-                .withFieldTypeMap(fieldTypeMap)\n-                .withTargetField(targetFieldName.orElse(null))\n-                .build();\n+        String className = getSanitizedClassName(model.getModelName());\n+        String packageName = getSanitizedPackageName(className);\n+        Map<String, String> sourcesMap = getKiePMMLScorecardModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+        String fullClassName = packageName + \".\" + className;\n+        final Map<String, Class<?>> compiledClasses = KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n+        return (KiePMMLScorecardModel) compiledClasses.get(fullClassName).newInstance();\n+    }\n+\n+    public static Map<String, String> getKiePMMLScorecardModelSourcesMap(final DataDictionary dataDictionary, final Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException {\n+        logger.trace(\"getKiePMMLScorecardModelSourcesMap {} {} {}\", dataDictionary, model, packageName);\n+        String className = getSanitizedClassName(model.getModelName());\n+        String targetField = getTargetFieldName(dataDictionary, model).orElse(null);\n+        List<KiePMMLOutputField> outputFields = getOutputFields(model);\n+        CompilationUnit templateCU = getFromFileName(KIE_PMML_SCORECARD_MODEL_TEMPLATE_JAVA);\n+        CompilationUnit cloneCU = templateCU.clone();\n+        cloneCU.setPackageDeclaration(packageName);\n+        ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(KIE_PMML_SCORECARD_MODEL_TEMPLATE)\n+                .orElseThrow(() -> new RuntimeException(MAIN_CLASS_NOT_FOUND));\n+        modelTemplate.setName(className);\n+        setModelName(className, modelTemplate);\n+        MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(model.getMiningFunction().value());\n+        final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(\"Missing default constructor in ClassOrInterfaceDeclaration %s \", modelTemplate.getName())));\n+        setConstructor(model, constructorDeclaration, modelTemplate.getName(), targetField, miningFunction);\n+        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addFieldTypeMapPopulation(constructorDeclaration.getBody(), fieldTypeMap);\n+        Map<String, String> toReturn = new HashMap<>();\n+        String fullClassName = packageName + \".\" + className;\n+        toReturn.put(fullClassName, cloneCU.toString());\n+        return toReturn;\n+    }\n+\n+    /**\n+     * This method returns a <code>KiePMMLDroolsAST</code> out of the given <code>DataDictionary</code> and <code>Scorecard</code>.\n+     * <b>It also populate the given <code>Map</code> that has to be used for final <code>KiePMMLScorecardModel</code></b>\n+     * @param dataDictionary\n+     * @param model\n+     * @param fieldTypeMap\n+     * @return\n+     */\n+    public static KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        logger.trace(\"getKiePMMLDroolsAST {}\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODgwOQ==", "bodyText": "Can you please add isTraceEnabled check?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429238809", "createdAt": "2020-05-22T13:15:27Z", "author": {"login": "danielezonca"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/model/KiePMMLDroolsModel.java", "diffHunk": "@@ -46,31 +52,29 @@\n \n     private static final AgendaEventListener agendaEventListener = getAgendaEventListener(logger);\n \n-    protected PackageDescr packageDescr;\n-\n-    protected List<KiePMMLOutputField> outputFields;\n+    protected List<KiePMMLOutputField> outputFields = new ArrayList<>();\n \n     /**\n      * Map between the original field name and the generated type.\n      */\n-    protected Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    protected Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n \n     protected KiePMMLDroolsModel(String name, List<KiePMMLExtension> extensions) {\n         super(name, extensions);\n     }\n \n-    public PackageDescr getPackageDescr() {\n-        return packageDescr;\n-    }\n-\n     public Map<String, KiePMMLOriginalTypeGeneratedType> getFieldTypeMap() {\n         return fieldTypeMap;\n     }\n \n     @Override\n-    public Object evaluate(Map<String, Object> requestData) {\n+    public Object evaluate(final Object knowledgeBase, Map<String, Object> requestData) {\n+        logger.trace(\"evaluate {} {}\", knowledgeBase, requestData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzOTU5Ng==", "bodyText": "Can you please revert code formatting?\nIt is really hard to find the few line changed.\nAs alternative, can you please highlight where to look at?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r429239596", "createdAt": "2020-05-22T13:17:00Z", "author": {"login": "danielezonca"}, "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -82,7 +82,6 @@\n import org.kie.internal.builder.ResourceChangeSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb77328113958ca1abc6d3fc33c92435be329e0"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f63408c6044d6ada5161afa51e8010a1a588fd25", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/f63408c6044d6ada5161afa51e8010a1a588fd25", "committedDate": "2020-05-22T14:24:05Z", "message": "[DROOLS-5258] Fixed getKModulePackageName to avoid \"NPE\" (null package\") if class has not already been loaded."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d30258e0dbea6750b4c3efc5b48e1c24c52cfab0", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/d30258e0dbea6750b4c3efc5b48e1c24c52cfab0", "committedDate": "2020-05-22T14:30:16Z", "message": "[DROOLS-5258] Revert modifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5c5a21c895bb509ce3284cf349f9721422ca6e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/6c5c5a21c895bb509ce3284cf349f9721422ca6e", "committedDate": "2020-05-25T07:40:15Z", "message": "[DROOLS-5258] Fixed as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/142b9b6f899eaba317878e032b28700585b31b1c", "committedDate": "2020-05-25T08:29:42Z", "message": "[DROOLS-5258] Replaced Class.byName with classloader.loadClass to found the generated classes regardless of projec-internal or local-repository kjar."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzEzNzg3", "url": "https://github.com/kiegroup/drools/pull/2910#pullrequestreview-418313787", "createdAt": "2020-05-26T13:46:37Z", "commit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0NjozN1rOGafBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1NzoyNFrOGafg1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDM0Mw==", "bodyText": "Maybe SourceMapFactory would be better name for this interface.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430424343", "createdAt": "2020-05-26T13:46:37Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/HasSourcesMap.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface used to define if a given <code>KiePmmlModel</code> contains a <b>sources map</b>\n+ */\n+public interface HasSourcesMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjAzMQ==", "bodyText": "Does it make sense to use if here? Is saved time worth of lower readability?", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430426031", "createdAt": "2020-05-26T13:48:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -44,7 +44,9 @@\n         Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n         providers.forEachRemaining(toReturn::add);\n         logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n-        toReturn.forEach(provider -> logger.trace(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        if (logger.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODQyMw==", "bodyText": "Would it be possible to split long lines in this file? It is very hard to read.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430428423", "createdAt": "2020-05-26T13:52:00Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java", "diffHunk": "@@ -35,13 +46,43 @@\n     @Override\n     public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {\n         logger.trace(\"getKiePMMLModel {} {}\", dataDictionary, model);\n-        E toReturn = getKiePMMLDroolsModel(dataDictionary, model);\n         if (!(kBuilder instanceof KnowledgeBuilder)) {\n             throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n         }\n-        ((KnowledgeBuilderImpl) kBuilder).addPackage(toReturn.getPackageDescr());\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        KiePMMLDroolsAST kiePMMLDroolsAST = getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+        E toReturn = getKiePMMLDroolsModel(dataDictionary, model, fieldTypeMap);\n+        PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, toReturn.getKModulePackageName());\n+        ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n         return toReturn;\n     }\n \n-    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model);\n+    @Override\n+    public E getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, T model, Object kBuilder) {\n+        logger.trace(\"getKiePMMLModelFromPlugin {} {} {}\", dataDictionary, model, kBuilder);\n+        if (!(kBuilder instanceof KnowledgeBuilder)) {\n+            throw new KiePMMLException(String.format(\"Expecting KnowledgeBuilder, received %s\", kBuilder.getClass().getName()));\n+        }\n+        try {\n+            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+            KiePMMLDroolsAST kiePMMLDroolsAST =  getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap);\n+            Map<String, String> sourcesMap = getKiePMMLDroolsModelSourcesMap(dataDictionary, model, fieldTypeMap, packageName);\n+            E toReturn = (E) new KiePMMLDroolsModelWithSources(model.getModelName(), packageName, sourcesMap);\n+            PackageDescr packageDescr = getPackageDescr(kiePMMLDroolsAST, packageName);\n+            ((KnowledgeBuilderImpl) kBuilder).addPackage(packageDescr);\n+            return toReturn;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+\n+    public abstract Map<String, String> getKiePMMLDroolsModelSourcesMap(final DataDictionary dataDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final String packageName) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMjQ3MA==", "bodyText": "Does it make sense to change license header format in this PR? I would suggest to do a separate PR with format changes if needed because it is not related with DROOLS-5258 and it harder to review the code.", "url": "https://github.com/kiegroup/drools/pull/2910#discussion_r430432470", "createdAt": "2020-05-26T13:57:24Z", "author": {"login": "jiripetrlik"}, "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProvider.java", "diffHunk": "@@ -1,41 +1,63 @@\n /*\n-* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n-*\n-* Licensed under the Apache License, Version 2.0 (the \"License\");\n-* you may not use this file except in compliance with the License.\n-* You may obtain a copy of the License at\n-*\n-*     http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing, software\n-* distributed under the License is distributed on an \"AS IS\" BASIS,\n-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-* See the License for the specific language governing permissions and\n-* limitations under the License.\n-*/\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b9b6f899eaba317878e032b28700585b31b1c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd430823b8e9795bd1c90eecbe71ffee4a0d07d3", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/cd430823b8e9795bd1c90eecbe71ffee4a0d07d3", "committedDate": "2020-05-26T14:10:30Z", "message": "[DROOLS-5258] Fixed as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5a8dde8ba6858a611d22dfda4b60753d0eaaf8d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/c5a8dde8ba6858a611d22dfda4b60753d0eaaf8d", "committedDate": "2020-05-26T14:29:20Z", "message": "[DROOLS-5258] Fixed as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90e31fb8cc0efee9799f383fe47da9c902520ba", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/e90e31fb8cc0efee9799f383fe47da9c902520ba", "committedDate": "2020-05-26T14:50:56Z", "message": "[DROOLS-5258] Fixed as per PR suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4Mzc5Njcz", "url": "https://github.com/kiegroup/drools/pull/2910#pullrequestreview-418379673", "createdAt": "2020-05-26T14:52:52Z", "commit": {"oid": "e90e31fb8cc0efee9799f383fe47da9c902520ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57d0ec21b98f26d55a287019638c09ad4cfb070d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/drools/commit/57d0ec21b98f26d55a287019638c09ad4cfb070d", "committedDate": "2020-05-27T06:56:57Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5258\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTk2MDk0", "url": "https://github.com/kiegroup/drools/pull/2910#pullrequestreview-418996094", "createdAt": "2020-05-27T09:02:52Z", "commit": {"oid": "57d0ec21b98f26d55a287019638c09ad4cfb070d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1548, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}