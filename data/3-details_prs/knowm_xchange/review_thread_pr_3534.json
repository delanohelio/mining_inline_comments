{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzUzMzcz", "number": 3534, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNToyMjowN1rOD_NI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowMTowM1rOD_TAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjAyMTQ3OnYy", "diffSide": "RIGHT", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNToyMjowN1rOGZvmMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozNToyOVrOGaDIFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA==", "bodyText": "Do we want to log more information about what the error that occurred here was?", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429647410", "createdAt": "2020-05-24T15:22:07Z", "author": {"login": "earce"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,23 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));\n+                } catch (IOException e) {\n+                  LOG.error(\"Failed to unsubscribe channel: {}\", channelId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a0e0a36665c570fc4846f75fc24cc1f5c15373"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MzQ4NA==", "bodyText": "Well do we really care why it failed to unsubscribe on an IOException?  I assume the socket has gone anyway, and the message (should be warn) is just to avoid eating the exception.", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429683484", "createdAt": "2020-05-24T23:00:39Z", "author": {"login": "mdvx"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,23 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));\n+                } catch (IOException e) {\n+                  LOG.error(\"Failed to unsubscribe channel: {}\", channelId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA=="}, "originalCommit": {"oid": "91a0e0a36665c570fc4846f75fc24cc1f5c15373"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MzY4Ng==", "bodyText": "Probably not, but in some cases this information may yield more color as to what is going on, figured it made sense to consider.", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429683686", "createdAt": "2020-05-24T23:03:25Z", "author": {"login": "earce"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,23 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));\n+                } catch (IOException e) {\n+                  LOG.error(\"Failed to unsubscribe channel: {}\", channelId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA=="}, "originalCommit": {"oid": "91a0e0a36665c570fc4846f75fc24cc1f5c15373"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NzM4MQ==", "bodyText": "Hm, on principle, eating an unknown exception without a stack trace isn't the best idea IMO.   If you know what it is and want to suppress noise, fine, but as you say below, this could be caused by anything.  I should have spotted this, sorry.", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429967381", "createdAt": "2020-05-25T14:35:29Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,23 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));\n+                } catch (IOException e) {\n+                  LOG.error(\"Failed to unsubscribe channel: {}\", channelId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA=="}, "originalCommit": {"oid": "91a0e0a36665c570fc4846f75fc24cc1f5c15373"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njk4MzcyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowMTowM1rOGZ4S-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoyNjoxOFrOGaC2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4OTk0Ng==", "bodyText": "sendMessage itself is asynchronous - I've been thinking for a while that it should return a Completable (see #3518). Is that likely to be a problem for you here? Are you only worried about exceptions from getUnsubscribeMessage and getSubscribeMessage?", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429789946", "createdAt": "2020-05-25T08:01:03Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,25 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a573063b468b01887f38d1a4fd7e7f46509a551"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2Mjk1OQ==", "bodyText": "Are you only worried about exceptions from getUnsubscribeMessage and getSubscribeMessage?\n\nYes, they are overrides, so code is not trustworthy", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429962959", "createdAt": "2020-05-25T14:26:18Z", "author": {"login": "mdvx"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,25 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4OTk0Ng=="}, "originalCommit": {"oid": "8a573063b468b01887f38d1a4fd7e7f46509a551"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}