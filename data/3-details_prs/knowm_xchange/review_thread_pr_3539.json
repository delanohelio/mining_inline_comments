{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDc3OTIz", "number": 3539, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODowOTozNVrOEAZ2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODozMDozOFrOEDLsaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODU4OTEyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingAccountService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODowOTozNVrOGbqOUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTowMzowN1rOGcgnDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1NjUzMQ==", "bodyText": "nit: can collapse all this down to an expression lambda", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431656531", "createdAt": "2020-05-28T08:09:35Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingAccountService.java", "diffHunk": "@@ -67,16 +66,15 @@ public CoinmateStreamingAccountService(PusherStreamingService service, String us\n   }\n \n   private Observable<Map<String, CoinmateWebsocketBalance>> getCoinmateBalances() {\n-    String channelName = \"private-user_balances-\" + userId;\n+    String channelName = \"channel/my-balances\";\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<Map<String, CoinmateWebsocketBalance>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, true);\n \n-    return service\n-        .subscribeChannel(channelName, \"user_balances\")\n+    return service.subscribeMessages()\n         .map(\n             (message) -> {\n-              Map<String, CoinmateWebsocketBalance> balanceMap =\n-                  StreamingObjectMapperHelper.getObjectMapper()\n-                      .readValue(\n-                          message, new TypeReference<Map<String, CoinmateWebsocketBalance>>() {});\n+              Map<String, CoinmateWebsocketBalance> balanceMap = reader.readValue(message.get(\"balances\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzU5OQ==", "bodyText": "Thanks, fixed", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432547599", "createdAt": "2020-05-29T15:03:07Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingAccountService.java", "diffHunk": "@@ -67,16 +66,15 @@ public CoinmateStreamingAccountService(PusherStreamingService service, String us\n   }\n \n   private Observable<Map<String, CoinmateWebsocketBalance>> getCoinmateBalances() {\n-    String channelName = \"private-user_balances-\" + userId;\n+    String channelName = \"channel/my-balances\";\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<Map<String, CoinmateWebsocketBalance>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, true);\n \n-    return service\n-        .subscribeChannel(channelName, \"user_balances\")\n+    return service.subscribeMessages()\n         .map(\n             (message) -> {\n-              Map<String, CoinmateWebsocketBalance> balanceMap =\n-                  StreamingObjectMapperHelper.getObjectMapper()\n-                      .readValue(\n-                          message, new TypeReference<Map<String, CoinmateWebsocketBalance>>() {});\n+              Map<String, CoinmateWebsocketBalance> balanceMap = reader.readValue(message.get(\"balances\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1NjUzMQ=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODYwODEyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoxNTowOVrOGbqa2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoxNTowOVrOGbqa2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1OTczNw==", "bodyText": "This could also be achieved be expecting the ProductSubscriptions to be passed on connect(), in the same way as BinanceStreamingExchange.  I think this is better, since it removes the need to disconnect/reconnect to change subscriptions - something that always confuses Binance users - but we should be aware we're doing it (and probably move Binance to this approach instead and get rid of ProductSubscription)\nSomething to think about.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431659737", "createdAt": "2020-05-28T08:15:09Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODYzMTg2OnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingMarketDataService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoyMTo0NVrOGbqpww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowMjoyNlrOGfNFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ==", "bodyText": "A few problems here:\n\nSince the socket is scoped to a single subscription, there needs to be an onDispose in all these methods to close the StreamingService when the Observable is disposed\nHowever, it's not a great idea to scope a socket to a single subscription.  The pattern used elsewhere is that the Observables are share()ed, so if multiple subscriptions are made, the separate subscribers share the same socket. What I think you need to do here is maintain a ConcurrentMap of CoinmateStreamingService, re-use the existing one if it already exists and use Observable.using() to close the socket when the last subscriber disposes.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431663555", "createdAt": "2020-05-28T08:21:45Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingMarketDataService.java", "diffHunk": "@@ -51,22 +51,20 @@\n \n   @Override\n   public Observable<Trade> getTrades(CurrencyPair currencyPair, Object... args) {\n-    String channelName = \"trades-\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+    String channelName = \"channel/trades/\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, false);\n \n-    return service\n-        .subscribeChannel(channelName, \"new_trades\")\n+    return service.subscribeMessages()\n         .map(\n             s -> {\n-              ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n-              List<CoinmateWebSocketTrade> list =\n-                  mapper.readValue(s, new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+              List<CoinmateWebSocketTrade> list = reader.readValue(s);\n               return list;\n             })\n         .flatMapIterable(coinmateWebSocketTrades -> coinmateWebSocketTrades)\n         .map(\n-            coinmateWebSocketTrade ->\n-                CoinmateAdapters.adaptTrade(\n-                    coinmateWebSocketTrade.toTransactionEntry(\n-                        CoinmateUtils.getPair(currencyPair))));\n+            coinmateWebSocketTrade -> CoinmateStreamingAdapter.adaptTrade(coinmateWebSocketTrade, currencyPair)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MTc3NA==", "bodyText": "Thanks for the suggestions, I am not that good with RxJava, so I am struggling to implement this. I made something like this, to handle both the locking and reusing of connections, but it only works for the first subscriber. I was thinking maybe a ReplaySubject would disposing work with it?\nprivate ConcurrentMap<String, Observable<CoinmateStreamingService>> serviceMap;\n  private static Lock connectionLock = new ReentrantLock();\n  private Scheduler scheduler = Schedulers.single();\n  public Observable<CoinmateStreamingService> createConnection(String endpoint, boolean needsAuth) {\n    String url = baseUrl + \"/\" + endpoint;\n    CoinmateStreamingService service;\n\n    if (serviceMap.containsKey(url)) {\n      return serviceMap.get(url);\n    } else {\n      String authUrl = url;\n      // append auth parameters if necessary\n      if (needsAuth && authParams != null) {\n        authUrl += \"?\" + authParams.toParams();\n      }\n      service = new CoinmateStreamingService(authUrl);\n\n      Observable<CoinmateStreamingService> observable = Observable.using(\n          () -> service,\n          s -> Completable.fromAction(() -> connectionLock.lock())\n              .subscribeOn(scheduler)\n              .andThen(s.connect())\n              .observeOn(scheduler)\n              .doFinally(() -> {\n                connectionLock.unlock();\n              }).andThen(Observable.just(s)),\n          s -> s.disconnect()\n      ).share();\n\n      serviceMap.put(url, observable);\n\n      return observable;\n    }\n  }", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432551774", "createdAt": "2020-05-29T15:10:08Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingMarketDataService.java", "diffHunk": "@@ -51,22 +51,20 @@\n \n   @Override\n   public Observable<Trade> getTrades(CurrencyPair currencyPair, Object... args) {\n-    String channelName = \"trades-\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+    String channelName = \"channel/trades/\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, false);\n \n-    return service\n-        .subscribeChannel(channelName, \"new_trades\")\n+    return service.subscribeMessages()\n         .map(\n             s -> {\n-              ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n-              List<CoinmateWebSocketTrade> list =\n-                  mapper.readValue(s, new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+              List<CoinmateWebSocketTrade> list = reader.readValue(s);\n               return list;\n             })\n         .flatMapIterable(coinmateWebSocketTrades -> coinmateWebSocketTrades)\n         .map(\n-            coinmateWebSocketTrade ->\n-                CoinmateAdapters.adaptTrade(\n-                    coinmateWebSocketTrade.toTransactionEntry(\n-                        CoinmateUtils.getPair(currencyPair))));\n+            coinmateWebSocketTrade -> CoinmateStreamingAdapter.adaptTrade(coinmateWebSocketTrade, currencyPair)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1ODU5NA==", "bodyText": "It's not a case for ReplaySubject.  You're almost there. I;ll try and have a look at this when I get some time.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432558594", "createdAt": "2020-05-29T15:20:51Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingMarketDataService.java", "diffHunk": "@@ -51,22 +51,20 @@\n \n   @Override\n   public Observable<Trade> getTrades(CurrencyPair currencyPair, Object... args) {\n-    String channelName = \"trades-\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+    String channelName = \"channel/trades/\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, false);\n \n-    return service\n-        .subscribeChannel(channelName, \"new_trades\")\n+    return service.subscribeMessages()\n         .map(\n             s -> {\n-              ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n-              List<CoinmateWebSocketTrade> list =\n-                  mapper.readValue(s, new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+              List<CoinmateWebSocketTrade> list = reader.readValue(s);\n               return list;\n             })\n         .flatMapIterable(coinmateWebSocketTrades -> coinmateWebSocketTrades)\n         .map(\n-            coinmateWebSocketTrade ->\n-                CoinmateAdapters.adaptTrade(\n-                    coinmateWebSocketTrade.toTransactionEntry(\n-                        CoinmateUtils.getPair(currencyPair))));\n+            coinmateWebSocketTrade -> CoinmateStreamingAdapter.adaptTrade(coinmateWebSocketTrade, currencyPair)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3MzQ3Mw==", "bodyText": "Eventually I used a slightly different approach", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r435373473", "createdAt": "2020-06-04T16:02:26Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingMarketDataService.java", "diffHunk": "@@ -51,22 +51,20 @@\n \n   @Override\n   public Observable<Trade> getTrades(CurrencyPair currencyPair, Object... args) {\n-    String channelName = \"trades-\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+    String channelName = \"channel/trades/\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, false);\n \n-    return service\n-        .subscribeChannel(channelName, \"new_trades\")\n+    return service.subscribeMessages()\n         .map(\n             s -> {\n-              ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n-              List<CoinmateWebSocketTrade> list =\n-                  mapper.readValue(s, new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+              List<CoinmateWebSocketTrade> list = reader.readValue(s);\n               return list;\n             })\n         .flatMapIterable(coinmateWebSocketTrades -> coinmateWebSocketTrades)\n         .map(\n-            coinmateWebSocketTrade ->\n-                CoinmateAdapters.adaptTrade(\n-                    coinmateWebSocketTrade.toTransactionEntry(\n-                        CoinmateUtils.getPair(currencyPair))));\n+            coinmateWebSocketTrade -> CoinmateStreamingAdapter.adaptTrade(coinmateWebSocketTrade, currencyPair)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODYzNTk5OnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoyMjo0OFrOGbqsUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODoyNDowMVrOGgFArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA==", "bodyText": "I don't think you want or need the PublishSubject here. The existing channel subscription approach should work fine. Did you hit problems with it?", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431664208", "createdAt": "2020-05-28T08:22:48Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MjEyOQ==", "bodyText": "You are right, channel subscription with a fake channel name works as well.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432552129", "createdAt": "2020-05-29T15:10:44Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3Mzk0Mg==", "bodyText": "Actually, channel subscriptions only work for the first subscriber, so I reverted to using PublishSubject", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r435373942", "createdAt": "2020-06-04T16:03:07Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTcxMA==", "bodyText": "As long as they are created with share() they should work for multiple subscribers. I have plenty of code in my application that does this.\nI suspect the problem was something else.  Could you try putting up your code that uses normal channel subscriptions?  I may be able to help pinpoint the issue.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289710", "createdAt": "2020-06-06T18:24:01Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA=="}, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODY0Njk2OnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoyNTo0MFrOGbqzKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoyNTo0MFrOGbqzKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NTk2MQ==", "bodyText": "Rather than blocking the calling thread, which breaks the RX guarantee, how about this:\n\nUse a static Lock to prevent concurrent connections\nReturn Completable<CoinmateStreamingService> from this method (i.e. just return the result of service.connect())\n\nThe, the parent service's connect() method will work asynchronously as expected.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431665961", "createdAt": "2020-05-28T08:25:40Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import info.bitrich.xchangestream.coinmate.CoinmateStreamingService;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+\n+public class CoinmateStreamingServiceFactory {\n+\n+  private AuthParams authParams;\n+  private String baseUrl;\n+\n+  public CoinmateStreamingServiceFactory(String baseUrl, AuthParams authParams) {\n+    this.baseUrl = baseUrl;\n+    this.authParams = authParams;\n+  }\n+\n+  public CoinmateStreamingService createAndConnect(String endpoint, boolean needsAuth) {\n+    String url = baseUrl + \"/\" + endpoint;\n+    if (needsAuth && authParams != null) {\n+      url += \"?\" + authParams.toParams();\n+    }\n+    CoinmateStreamingService service = new CoinmateStreamingService(url);\n+    // block until connected, because of nonce conflicts when connecting to multiple channels\n+    service.connect().blockingAwait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODY1MjQ1OnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingTradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoyNzowN1rOGbq2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoyNzowN1rOGbq2lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NjgzNw==", "bodyText": "Ditto", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431666837", "createdAt": "2020-05-28T08:27:07Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingTradeService.java", "diffHunk": "@@ -1,65 +1,66 @@\n package info.bitrich.xchangestream.coinmate;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectReader;\n import info.bitrich.xchangestream.coinmate.dto.CoinmateWebSocketUserTrade;\n import info.bitrich.xchangestream.coinmate.dto.CoinmateWebsocketOpenOrder;\n import info.bitrich.xchangestream.core.StreamingTradeService;\n import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper;\n-import info.bitrich.xchangestream.service.pusher.PusherStreamingService;\n import io.reactivex.Observable;\n-import java.util.List;\n import org.knowm.xchange.currency.CurrencyPair;\n import org.knowm.xchange.dto.Order;\n import org.knowm.xchange.dto.trade.OpenOrders;\n import org.knowm.xchange.dto.trade.UserTrade;\n import org.knowm.xchange.dto.trade.UserTrades;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n public class CoinmateStreamingTradeService implements StreamingTradeService {\n \n-  private final PusherStreamingService service;\n-  private final String userId;\n+  private final CoinmateStreamingServiceFactory serviceFactory;\n \n-  public CoinmateStreamingTradeService(PusherStreamingService service, String userId) {\n-    this.service = service;\n-    this.userId = userId;\n+  public CoinmateStreamingTradeService(CoinmateStreamingServiceFactory serviceFactory) {\n+    this.serviceFactory = serviceFactory;\n   }\n \n   @Override\n   public Observable<Order> getOrderChanges(CurrencyPair currencyPair, Object... args) {\n     String channelName =\n-        \"private-open_orders-\"\n-            + userId\n-            + \"-\"\n+        \"channel/my-open-orders/\"\n             + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n \n-    return service\n-        .subscribePrivateChannel(channelName, \"open_orders\")\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper()\n+        .readerFor(CoinmateWebsocketOpenOrder.class);\n+\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzcyNDcyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODoyNDo0NFrOGgFAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozNToyMVrOGgeYjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc0Mw==", "bodyText": "I think this should return whatever the channel this service represents (so pass in the channel name as a constructor argument).  That way subscribeChannel will work normally.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289743", "createdAt": "2020-06-06T18:24:44Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNTQyMg==", "bodyText": "You are right. I changed it back to subscribeChannel and it works now.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436705422", "createdAt": "2020-06-08T13:35:21Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc0Mw=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzcyNDkyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODoyNDo0OVrOGgFA4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoxMTo0NVrOGg7oDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw==", "bodyText": "Better to throw new UnsupportedOperationException()", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289763", "createdAt": "2020-06-06T18:24:49Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDQwOQ==", "bodyText": "An exception thrown here would be sent down the Observable chain in subscribeChannel", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436700409", "createdAt": "2020-06-08T13:28:03Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MTI3Ng==", "bodyText": "It would get caught and logged, but returning null from getSubscribeMessage eventually gets handled properly in sendMessage, binance follows the same pattern.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r437061276", "createdAt": "2020-06-08T23:48:32Z", "author": {"login": "nielsdraaisma"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NDUyNg==", "bodyText": "https://github.com/knowm/XChange/blob/develop/xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java#L378", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r437184526", "createdAt": "2020-06-09T07:11:45Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzcyNDkzOnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODoyNDo1M1rOGgFA5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyOTowMlrOGgeHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2NA==", "bodyText": "Better to throw new UnsupportedOperationException()", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289764", "createdAt": "2020-06-06T18:24:53Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getUnsubscribeMessage(String channelName) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMTA3Mg==", "bodyText": "This would generate a warning log when disposing.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436701072", "createdAt": "2020-06-08T13:29:02Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getUnsubscribeMessage(String channelName) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2NA=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzcyNzY4OnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODozMDoyNlrOGgFCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNzoyN1rOGgdfTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDEzNg==", "bodyText": "Doesn't need to be public, I think", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436290136", "createdAt": "2020-06-06T18:30:26Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class CoinmateStreamingServiceFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDc2Ng==", "bodyText": "Thanks", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436690766", "createdAt": "2020-06-08T13:17:27Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class CoinmateStreamingServiceFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDEzNg=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzcyNzc3OnYy", "diffSide": "RIGHT", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODozMDozOFrOGgFCYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNzozMlrOGgdfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDE0Nw==", "bodyText": "I don't think this needs to be public.", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436290147", "createdAt": "2020-06-06T18:30:38Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDg0Ng==", "bodyText": "Thanks", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436690846", "createdAt": "2020-06-08T13:17:32Z", "author": {"login": "stachon"}, "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDE0Nw=="}, "originalCommit": {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3839, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}