{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODY0NjA5", "number": 3700, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDozNzozOFrOEiJpCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozNjoxNFrOEw5Q0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjQ1MDAxOnYy", "diffSide": "RIGHT", "path": "xchange-stream-bitmex/src/main/java/info/bitrich/xchangestream/bitmex/BitmexStreamingService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDozNzozOFrOHP3SVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzowMDoxM1rOHmKsnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjUwMw==", "bodyText": "would this make more sense as a switch, and if not at least having the constant on the left side of the equality comparison for NPE protection?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r486396503", "createdAt": "2020-09-10T14:37:38Z", "author": {"login": "earce"}, "path": "xchange-stream-bitmex/src/main/java/info/bitrich/xchangestream/bitmex/BitmexStreamingService.java", "diffHunk": "@@ -194,7 +200,12 @@ protected DefaultHttpHeaders getCustomHeaders() {\n   @Override\n   protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n     String table = message.get(\"table\").asText();\n-    if (\"order\".equals(table) || \"funding\".equals(table) || \"position\".equals(table)) {\n+    if (table.equals(\"order\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNzUzMQ==", "bodyText": "having a private static final Set<String> SIMPLE_TABLES = ImmutableSet.of(..)\nand just doing if (SIMPLE_TABLES.contains(table)) { would be better", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r491737531", "createdAt": "2020-09-20T21:38:40Z", "author": {"login": "walec51"}, "path": "xchange-stream-bitmex/src/main/java/info/bitrich/xchangestream/bitmex/BitmexStreamingService.java", "diffHunk": "@@ -194,7 +200,12 @@ protected DefaultHttpHeaders getCustomHeaders() {\n   @Override\n   protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n     String table = message.get(\"table\").asText();\n-    if (\"order\".equals(table) || \"funding\".equals(table) || \"position\".equals(table)) {\n+    if (table.equals(\"order\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjUwMw=="}, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4MzE5OQ==", "bodyText": "I like ImmutableSet.of()", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509783199", "createdAt": "2020-10-21T23:00:13Z", "author": {"login": "mdvx"}, "path": "xchange-stream-bitmex/src/main/java/info/bitrich/xchangestream/bitmex/BitmexStreamingService.java", "diffHunk": "@@ -194,7 +200,12 @@ protected DefaultHttpHeaders getCustomHeaders() {\n   @Override\n   protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n     String table = message.get(\"table\").asText();\n-    if (\"order\".equals(table) || \"funding\".equals(table) || \"position\".equals(table)) {\n+    if (table.equals(\"order\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjUwMw=="}, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjQ4MzgwOnYy", "diffSide": "RIGHT", "path": "xchange-bitstamp/src/main/java/org/knowm/xchange/bitstamp/service/BitstampTradeService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDo0NDozOFrOHP3ngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzowNDo0NFrOHmKyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMTkyMg==", "bodyText": "can this new ArrayList<>() be created after the getBitstampOpenOrders() and using the openOrders.length to size the array?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r486401922", "createdAt": "2020-09-10T14:44:38Z", "author": {"login": "earce"}, "path": "xchange-bitstamp/src/main/java/org/knowm/xchange/bitstamp/service/BitstampTradeService.java", "diffHunk": "@@ -43,28 +53,28 @@ public OpenOrders getOpenOrders() throws IOException, BitstampException {\n \n   @Override\n   public OpenOrders getOpenOrders(OpenOrdersParams params) throws ExchangeException, IOException {\n-    Collection<CurrencyPair> pairs = DefaultOpenOrdersParamCurrencyPair.getPairs(params, exchange);\n+\n     List<LimitOrder> limitOrders = new ArrayList<>();\n-    for (CurrencyPair pair : pairs) {\n-      BitstampOrder[] openOrders = getBitstampOpenOrders(pair);\n-      for (BitstampOrder bitstampOrder : openOrders) {\n-        OrderType orderType = bitstampOrder.getType() == 0 ? OrderType.BID : OrderType.ASK;\n-        String id = Long.toString(bitstampOrder.getId());\n-        BigDecimal price = bitstampOrder.getPrice();\n-        limitOrders.add(\n-            new LimitOrder(\n-                orderType,\n-                bitstampOrder.getAmount(),\n-                pair,\n-                id,\n-                bitstampOrder.getDatetime(),\n-                price,\n-                null, // avgPrice\n-                null, // cumAmount\n-                null, // fee\n-                Order.OrderStatus.NEW));\n-      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4NDc2MQ==", "bodyText": "yeah, that works", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509784761", "createdAt": "2020-10-21T23:04:44Z", "author": {"login": "mdvx"}, "path": "xchange-bitstamp/src/main/java/org/knowm/xchange/bitstamp/service/BitstampTradeService.java", "diffHunk": "@@ -43,28 +53,28 @@ public OpenOrders getOpenOrders() throws IOException, BitstampException {\n \n   @Override\n   public OpenOrders getOpenOrders(OpenOrdersParams params) throws ExchangeException, IOException {\n-    Collection<CurrencyPair> pairs = DefaultOpenOrdersParamCurrencyPair.getPairs(params, exchange);\n+\n     List<LimitOrder> limitOrders = new ArrayList<>();\n-    for (CurrencyPair pair : pairs) {\n-      BitstampOrder[] openOrders = getBitstampOpenOrders(pair);\n-      for (BitstampOrder bitstampOrder : openOrders) {\n-        OrderType orderType = bitstampOrder.getType() == 0 ? OrderType.BID : OrderType.ASK;\n-        String id = Long.toString(bitstampOrder.getId());\n-        BigDecimal price = bitstampOrder.getPrice();\n-        limitOrders.add(\n-            new LimitOrder(\n-                orderType,\n-                bitstampOrder.getAmount(),\n-                pair,\n-                id,\n-                bitstampOrder.getDatetime(),\n-                price,\n-                null, // avgPrice\n-                null, // cumAmount\n-                null, // fee\n-                Order.OrderStatus.NEW));\n-      }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMTkyMg=="}, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjUxMDY3OnYy", "diffSide": "RIGHT", "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/service/BitmexTradeService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDo1MDowOFrOHP34fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMTo0NlrOHmK77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjI2OQ==", "bodyText": "this could potentially break downstream users expecting the oldest rows first, does it make more sense to add a param to BitmexTradeHistoryParams which uses could explicitly toggle and have the default set to something?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r486406269", "createdAt": "2020-09-10T14:50:08Z", "author": {"login": "earce"}, "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/service/BitmexTradeService.java", "diffHunk": "@@ -187,7 +194,7 @@ public UserTrades getTradeHistory(TradeHistoryParams params) throws IOException\n     }\n \n     List<UserTrade> userTrades =\n-        getTradeHistory(symbol, null, null, count, start, false, startTime, endTime).stream()\n+        getTradeHistory(symbol, null, null, count, start, true, startTime, endTime).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4NzExOA==", "bodyText": "maintains backward compat\nboolean reverse = (params instanceof TradeHistoryParamsSorted)\n    && ((TradeHistoryParamsSorted) params).getOrder() == TradeHistoryParamsSorted.Order.desc;", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509787118", "createdAt": "2020-10-21T23:11:46Z", "author": {"login": "mdvx"}, "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/service/BitmexTradeService.java", "diffHunk": "@@ -187,7 +194,7 @@ public UserTrades getTradeHistory(TradeHistoryParams params) throws IOException\n     }\n \n     List<UserTrade> userTrades =\n-        getTradeHistory(symbol, null, null, count, start, false, startTime, endTime).stream()\n+        getTradeHistory(symbol, null, null, count, start, true, startTime, endTime).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjI2OQ=="}, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzE1MzE5OnYy", "diffSide": "RIGHT", "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/BitmexExchange.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMTozMjo1OVrOHU9Pjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzowOTowN1rOHnzEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk3NA==", "bodyText": "why is this not final any more?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r491736974", "createdAt": "2020-09-20T21:32:59Z", "author": {"login": "walec51"}, "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/BitmexExchange.java", "diffHunk": "@@ -27,8 +27,8 @@\n \n public class BitmexExchange extends BaseExchange implements Exchange {\n \n-  private final SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);\n   protected RateLimitUpdateListener rateLimitUpdateListener;\n+  private SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MjkzMw==", "bodyText": "It is for me, or at least in latest version", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r511492933", "createdAt": "2020-10-24T17:06:38Z", "author": {"login": "mdvx"}, "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/BitmexExchange.java", "diffHunk": "@@ -27,8 +27,8 @@\n \n public class BitmexExchange extends BaseExchange implements Exchange {\n \n-  private final SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);\n   protected RateLimitUpdateListener rateLimitUpdateListener;\n+  private SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk3NA=="}, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzE0Mw==", "bodyText": "found it on another change list", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r511493143", "createdAt": "2020-10-24T17:09:07Z", "author": {"login": "mdvx"}, "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/BitmexExchange.java", "diffHunk": "@@ -27,8 +27,8 @@\n \n public class BitmexExchange extends BaseExchange implements Exchange {\n \n-  private final SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);\n   protected RateLimitUpdateListener rateLimitUpdateListener;\n+  private SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk3NA=="}, "originalCommit": {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzMyMTc3OnYy", "diffSide": "RIGHT", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoyNjoyM1rOHmLOqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1NToyN1rOHmou-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MTkxMg==", "bodyText": "should we have NPE protection here given ConcurrentHashMap throws them on null keys and same on handleChannelError and subscribeChannel", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509791912", "createdAt": "2020-10-21T23:26:23Z", "author": {"login": "earce"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {\n+      channels\n+          .forEach((k, v) ->\n+              v.emitter.onNext(message));\n+\n+    } else {\n+      NettyStreamingService<T>.Subscription subscription = channels.get(channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3NTMyMw==", "bodyText": "NettyStreamingService handleMessage/handleError already check before passing to handleChannelMessage/handleChannelError\nwith !StringUtil.isNullOrEmpty(channel)", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510275323", "createdAt": "2020-10-22T15:55:27Z", "author": {"login": "mdvx"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {\n+      channels\n+          .forEach((k, v) ->\n+              v.emitter.onNext(message));\n+\n+    } else {\n+      NettyStreamingService<T>.Subscription subscription = channels.get(channel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MTkxMg=="}, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzMzODIyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzozNDo0OVrOHmLYqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1OToxMFrOHmmI3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDQ3NQ==", "bodyText": "ALL seems to be a constant associated only with CoinbasePro should we either pull it out of CoinbasePro and make it a Netty constant or override in the CoinbasePro handleChannelMessage?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509794475", "createdAt": "2020-10-21T23:34:49Z", "author": {"login": "earce"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwOTk1OQ==", "bodyText": "yes, this is in the wrong place, It should be specific to coinbase", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510209959", "createdAt": "2020-10-22T14:30:31Z", "author": {"login": "mdvx"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDQ3NQ=="}, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMjc5OA==", "bodyText": "moved to CoinbaseProStreamingService", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510232798", "createdAt": "2020-10-22T14:59:10Z", "author": {"login": "mdvx"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDQ3NQ=="}, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzM0NjU3OnYy", "diffSide": "RIGHT", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzozODo1MlrOHmLddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDozMjo0MVrOHmk2WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NTcwMQ==", "bodyText": "would this make more sense as an atomic reference? I would imagine if more states are introduced you may want updates to this to happen atomically no?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509795701", "createdAt": "2020-10-21T23:38:52Z", "author": {"login": "earce"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package info.bitrich.xchangestream.service.netty;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n+\n+/**\n+ * The simplest Connection state model possible (maybe someone wants to add authenticated,\n+ * connecting, etc...)\n+ */\n+public final class ConnectionStateModel {\n+\n+  public enum State {\n+    closed,\n+    open\n+  }\n+\n+  private volatile State state = State.closed;  // start with a closed state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIxMTY3Mg==", "bodyText": "I think volatile achieves the same thing as Atomic, in this case, but maybe i can use Atomic.getAndSet for the old value", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510211672", "createdAt": "2020-10-22T14:32:41Z", "author": {"login": "mdvx"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package info.bitrich.xchangestream.service.netty;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n+\n+/**\n+ * The simplest Connection state model possible (maybe someone wants to add authenticated,\n+ * connecting, etc...)\n+ */\n+public final class ConnectionStateModel {\n+\n+  public enum State {\n+    closed,\n+    open\n+  }\n+\n+  private volatile State state = State.closed;  // start with a closed state", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NTcwMQ=="}, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzM1MjMyOnYy", "diffSide": "RIGHT", "path": "xchange-stream-gemini/src/main/java/info/bitrich/xchangestream/gemini/GeminiStreamingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo0MTozOVrOHmLg0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzo0MTozOVrOHmLg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NjU2Mg==", "bodyText": "should these be concurrent?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509796562", "createdAt": "2020-10-21T23:41:39Z", "author": {"login": "earce"}, "path": "xchange-stream-gemini/src/main/java/info/bitrich/xchangestream/gemini/GeminiStreamingService.java", "diffHunk": "@@ -1,26 +1,33 @@\n package info.bitrich.xchangestream.gemini;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.service.netty.ConnectionStateModel.State;\n import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n import java.util.HashMap;\n import java.util.Map;\n import org.knowm.xchange.currency.CurrencyPair;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/** Created by Lukas Zaoralek on 15.11.17. */\n+/**\n+ * Created by Lukas Zaoralek on 15.11.17.\n+ */\n public class GeminiStreamingService {\n+\n   private static final Logger LOG = LoggerFactory.getLogger(GeminiStreamingService.class);\n \n   private final String baseUri;\n \n-  private Map<CurrencyPair, GeminiProductStreamingService> productStreamingServices;\n-  private Map<CurrencyPair, Observable<JsonNode>> productSubscriptions;\n+  private final Map<CurrencyPair, GeminiProductStreamingService> productStreamingServices =\n+      new HashMap<>();\n+  private final Map<CurrencyPair, Observable<JsonNode>> productSubscriptions = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzA0NDE4OnYy", "diffSide": "RIGHT", "path": "xchange-stream-kraken/src/test/java/info/bitrich/xchangestream/kraken/KrakenManualExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozMzo0M1rOHmuxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozMzo0M1rOHmuxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3NDM0Nw==", "bodyText": "why are we leaving this commented out like this?", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510374347", "createdAt": "2020-10-22T18:33:43Z", "author": {"login": "walec51"}, "path": "xchange-stream-kraken/src/test/java/info/bitrich/xchangestream/kraken/KrakenManualExample.java", "diffHunk": "@@ -24,40 +24,40 @@ public static void main(String[] args) throws InterruptedException {\n     krakenExchange.connect().blockingAwait();\n \n     CurrencyPair bchUsdt = new CurrencyPair(Currency.BCH, Currency.getInstance(\"USD\"));\n-    Disposable btcEurOrderBookDis =\n-        krakenExchange\n-            .getStreamingMarketDataService()\n-            .getOrderBook(bchUsdt, 100)\n-            .subscribe(\n-                s -> {\n-                  LOG.info(\n-                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n-                      bchUsdt,\n-                      s.getAsks().size(),\n-                      s.getBids().size(),\n-                      s.getAsks().get(0),\n-                      s.getBids().get(0));\n-                },\n-                throwable -> {\n-                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n-                });\n-    Disposable btcUsdOrderBookDis =\n-        krakenExchange\n-            .getStreamingMarketDataService()\n-            .getOrderBook(CurrencyPair.BCH_EUR, 10)\n-            .subscribe(\n-                s -> {\n-                  LOG.info(\n-                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n-                      CurrencyPair.BCH_EUR,\n-                      s.getAsks().size(),\n-                      s.getBids().size(),\n-                      s.getAsks().get(0),\n-                      s.getBids().get(0));\n-                },\n-                throwable -> {\n-                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n-                });\n+//    Disposable btcEurOrderBookDis =\n+//        krakenExchange\n+//            .getStreamingMarketDataService()\n+//            .getOrderBook(bchUsdt, 100)\n+//            .subscribe(\n+//                s -> {\n+//                  LOG.info(\n+//                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n+//                      bchUsdt,\n+//                      s.getAsks().size(),\n+//                      s.getBids().size(),\n+//                      s.getAsks().get(0),\n+//                      s.getBids().get(0));\n+//                },\n+//                throwable -> {\n+//                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n+//                });\n+//    Disposable btcUsdOrderBookDis =\n+//        krakenExchange\n+//            .getStreamingMarketDataService()\n+//            .getOrderBook(CurrencyPair.BCH_EUR, 10)\n+//            .subscribe(\n+//                s -> {\n+//                  LOG.info(\n+//                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n+//                      CurrencyPair.BCH_EUR,\n+//                      s.getAsks().size(),\n+//                      s.getBids().size(),\n+//                      s.getAsks().get(0),\n+//                      s.getBids().get(0));\n+//                },\n+//                throwable -> {\n+//                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n+//                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69359db3ebeadc4623d78a996a6f03622b725bc6"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzA1Mjk3OnYy", "diffSide": "RIGHT", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozNjoxNFrOHmu3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozNjoxNFrOHmu3WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3NTc2OA==", "bodyText": "enum values should be uppercased", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510375768", "createdAt": "2020-10-22T18:36:14Z", "author": {"login": "walec51"}, "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package info.bitrich.xchangestream.service.netty;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * The simplest Connection state model possible (maybe someone wants to add authenticated,\n+ * connecting, etc...)\n+ */\n+public final class ConnectionStateModel {\n+\n+  public enum State {\n+    closed,\n+    open", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69359db3ebeadc4623d78a996a6f03622b725bc6"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3798, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}