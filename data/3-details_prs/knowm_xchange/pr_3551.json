{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDUyNzI0", "number": 3551, "title": "[Streaming][Coinjar] - Added streaming implementation", "bodyText": "Initial commit of streaming exchange code for coinjar.", "createdAt": "2020-06-08T23:41:25Z", "url": "https://github.com/knowm/XChange/pull/3551", "merged": true, "mergeCommit": {"oid": "534a789f4cd18817cb9754e6030170da07905b88"}, "closed": true, "closedAt": "2020-11-17T23:43:21Z", "author": {"login": "nielsdraaisma"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpZOVwAH2gAyNDMxNDUyNzI0OmJkMDE2ZDA1ZWI0OWVjOGY1N2NjYWY3NTAzYmI4OTU5ZDAyODc5Yzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddiVSoAH2gAyNDMxNDUyNzI0OjZkZGEwNGMxNzYyNDJiOTMyMzAwM2NiZTc3MTJiOGVhNGJkYzg5YmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "committedDate": "2020-06-08T23:40:16Z", "message": "[Coinjar] - Added streaming implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTA1NjUy", "url": "https://github.com/knowm/XChange/pull/3551#pullrequestreview-434505652", "createdAt": "2020-06-21T14:23:00Z", "commit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyMzowMVrOGmsRfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTowMzozMFrOGmsgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNDQ0Nw==", "bodyText": "Always safer to use LimitOrder.Builder for this. The constructors aren't particularly stable.", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443224447", "createdAt": "2020-06-21T14:23:01Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.knowm.xchange.currency.Currency;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+\n+class CoinjarStreamingAdapters {\n+\n+  public static CurrencyPair adaptTopicToCurrencyPair(String topic) {\n+    if (topic.startsWith(\"book\")) {\n+      topic = topic.substring(5);\n+      Currency base = new Currency(topic.substring(0, 3));\n+      Currency counter = new Currency(topic.substring(3, 6));\n+      return new CurrencyPair(base, counter);\n+    } else throw new IllegalArgumentException(\"Cannot determine topic from topic name \" + topic);\n+  }\n+\n+  public static String adaptCurrencyPairToBookTopic(CurrencyPair pair) {\n+    return \"book:\" + pair.base.toString() + pair.counter.toString();\n+  }\n+\n+  public static LimitOrder toLimitOrder(\n+      CoinjarWebSocketBookEvent.Payload.Order order,\n+      CurrencyPair currencyPair,\n+      Order.OrderType orderType) {\n+    return new LimitOrder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjA3NA==", "bodyText": "What's the reason for this difference between the default specification from CoinjarExchange and CoinjarStreamingExchange?", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443226074", "createdAt": "2020-06-21T14:39:31Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.core.ProductSubscription;\n+import info.bitrich.xchangestream.core.StreamingExchange;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import org.knowm.xchange.ExchangeSpecification;\n+import org.knowm.xchange.coinjar.CoinjarExchange;\n+\n+public class CoinjarStreamingExchange extends CoinjarExchange implements StreamingExchange {\n+\n+  private static final String API_URI = \"wss://feed.exchange.coinjar.com/socket/websocket\";\n+\n+  private CoinjarStreamingService streamingService;\n+  private CoinjarStreamingMarketDataService streamingMarketDataService;\n+\n+  @Override\n+  protected void initServices() {\n+    super.initServices();\n+\n+    this.streamingService = createStreamingService();\n+    this.streamingMarketDataService = new CoinjarStreamingMarketDataService(streamingService);\n+  }\n+\n+  private CoinjarStreamingService createStreamingService() {\n+    return new CoinjarStreamingService(API_URI, this.exchangeSpecification.getApiKey());\n+  }\n+\n+  @Override\n+  public Completable connect(ProductSubscription... args) {\n+    return streamingService.connect();\n+  }\n+\n+  @Override\n+  public Completable disconnect() {\n+    return streamingService.disconnect();\n+  }\n+\n+  @Override\n+  public boolean isAlive() {\n+    return streamingService.isSocketOpen();\n+  }\n+\n+  @Override\n+  public Observable<Throwable> reconnectFailure() {\n+    return streamingService.subscribeReconnectFailure();\n+  }\n+\n+  @Override\n+  public Observable<Object> connectionSuccess() {\n+    return streamingService.subscribeConnectionSuccess();\n+  }\n+\n+  @Override\n+  public ExchangeSpecification getDefaultExchangeSpecification() {\n+    ExchangeSpecification spec = super.getDefaultExchangeSpecification();\n+    spec.setShouldLoadRemoteMetaData(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjk0Nw==", "bodyText": "Capital \"I\" on Integration - not sure if it's needed to prevent Surefire picking up this test, but best practice anyway.", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443226947", "createdAt": "2020-06-21T14:47:40Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinjar/src/test/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataServiceintegration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.core.StreamingExchange;\n+import info.bitrich.xchangestream.core.StreamingExchangeFactory;\n+import info.bitrich.xchangestream.core.StreamingMarketDataService;\n+import io.reactivex.disposables.Disposable;\n+import org.junit.Test;\n+import org.knowm.xchange.ExchangeSpecification;\n+import org.knowm.xchange.currency.CurrencyPair;\n+\n+public class CoinjarStreamingMarketDataServiceintegration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODA5NA==", "bodyText": "Should this be NotYetImplementedForExchangeException, or does Coinjar actually not support tickers or trades?", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443228094", "createdAt": "2020-06-21T15:00:35Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import info.bitrich.xchangestream.core.StreamingMarketDataService;\n+import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper;\n+import io.reactivex.Observable;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.marketdata.OrderBook;\n+import org.knowm.xchange.dto.marketdata.Ticker;\n+import org.knowm.xchange.dto.marketdata.Trade;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.exceptions.NotAvailableFromExchangeException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class CoinjarStreamingMarketDataService implements StreamingMarketDataService {\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(CoinjarStreamingMarketDataService.class);\n+\n+  private final ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n+\n+  private final CoinjarStreamingService service;\n+\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> bids = Maps.newConcurrentMap();\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> asks = Maps.newConcurrentMap();\n+\n+  public CoinjarStreamingMarketDataService(CoinjarStreamingService service) {\n+    this.service = service;\n+  }\n+\n+  private static void updateOrderbook(Map<BigDecimal, LimitOrder> book, List<LimitOrder> orders) {\n+    orders.forEach(\n+        order -> {\n+          if (order.getOriginalAmount().compareTo(BigDecimal.ZERO) > 0) {\n+            book.put(order.getLimitPrice(), order);\n+          } else {\n+            book.remove(order.getLimitPrice());\n+          }\n+        });\n+  }\n+\n+  private OrderBook handleOrderbookEvent(CoinjarWebSocketBookEvent event) {\n+    final CurrencyPair pairFromEvent =\n+        CoinjarStreamingAdapters.adaptTopicToCurrencyPair(event.topic);\n+    switch (event.event) {\n+      case CoinjarWebSocketBookEvent.UPDATE:\n+      case CoinjarWebSocketBookEvent.INIT:\n+        updateOrderbook(\n+            bids.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.bids, pairFromEvent, Order.OrderType.BID));\n+        updateOrderbook(\n+            asks.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.asks, pairFromEvent, Order.OrderType.ASK));\n+        break;\n+    }\n+    return new OrderBook(\n+        null,\n+        Lists.newArrayList(asks.get(pairFromEvent).values()),\n+        Lists.newArrayList(bids.get(pairFromEvent).values()));\n+  }\n+\n+  @Override\n+  public Observable<OrderBook> getOrderBook(CurrencyPair currencyPair, Object... args) {\n+    String channelName = CoinjarStreamingAdapters.adaptCurrencyPairToBookTopic(currencyPair);\n+    this.asks.put(currencyPair, Maps.newTreeMap(BigDecimal::compareTo));\n+    this.bids.put(currencyPair, Maps.newTreeMap((o1, o2) -> Math.negateExact(o1.compareTo(o2))));\n+    return service\n+        .subscribeChannel(channelName)\n+        .doOnError(\n+            throwable -> {\n+              logger.warn(\n+                  \"encoutered error while subscribing to channel \" + channelName, throwable);\n+            })\n+        .map(\n+            node -> {\n+              CoinjarWebSocketBookEvent orderEvent =\n+                  mapper.treeToValue(node, CoinjarWebSocketBookEvent.class);\n+              return this.handleOrderbookEvent(orderEvent);\n+            })\n+        .filter(orderbook -> !orderbook.getBids().isEmpty() && !orderbook.getAsks().isEmpty());\n+  }\n+\n+  @Override\n+  public Observable<Ticker> getTicker(CurrencyPair currencyPair, Object... args) {\n+    throw new NotAvailableFromExchangeException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODMzNA==", "bodyText": "This doesn't look like it will play well with two concurrent subscriptions to the same currency pair.", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443228334", "createdAt": "2020-06-21T15:03:30Z", "author": {"login": "badgerwithagun"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import info.bitrich.xchangestream.core.StreamingMarketDataService;\n+import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper;\n+import io.reactivex.Observable;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.marketdata.OrderBook;\n+import org.knowm.xchange.dto.marketdata.Ticker;\n+import org.knowm.xchange.dto.marketdata.Trade;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.exceptions.NotAvailableFromExchangeException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class CoinjarStreamingMarketDataService implements StreamingMarketDataService {\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(CoinjarStreamingMarketDataService.class);\n+\n+  private final ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n+\n+  private final CoinjarStreamingService service;\n+\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> bids = Maps.newConcurrentMap();\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> asks = Maps.newConcurrentMap();\n+\n+  public CoinjarStreamingMarketDataService(CoinjarStreamingService service) {\n+    this.service = service;\n+  }\n+\n+  private static void updateOrderbook(Map<BigDecimal, LimitOrder> book, List<LimitOrder> orders) {\n+    orders.forEach(\n+        order -> {\n+          if (order.getOriginalAmount().compareTo(BigDecimal.ZERO) > 0) {\n+            book.put(order.getLimitPrice(), order);\n+          } else {\n+            book.remove(order.getLimitPrice());\n+          }\n+        });\n+  }\n+\n+  private OrderBook handleOrderbookEvent(CoinjarWebSocketBookEvent event) {\n+    final CurrencyPair pairFromEvent =\n+        CoinjarStreamingAdapters.adaptTopicToCurrencyPair(event.topic);\n+    switch (event.event) {\n+      case CoinjarWebSocketBookEvent.UPDATE:\n+      case CoinjarWebSocketBookEvent.INIT:\n+        updateOrderbook(\n+            bids.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.bids, pairFromEvent, Order.OrderType.BID));\n+        updateOrderbook(\n+            asks.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.asks, pairFromEvent, Order.OrderType.ASK));\n+        break;\n+    }\n+    return new OrderBook(\n+        null,\n+        Lists.newArrayList(asks.get(pairFromEvent).values()),\n+        Lists.newArrayList(bids.get(pairFromEvent).values()));\n+  }\n+\n+  @Override\n+  public Observable<OrderBook> getOrderBook(CurrencyPair currencyPair, Object... args) {\n+    String channelName = CoinjarStreamingAdapters.adaptCurrencyPairToBookTopic(currencyPair);\n+    this.asks.put(currencyPair, Maps.newTreeMap(BigDecimal::compareTo));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "committedDate": "2020-07-28T06:26:29Z", "message": "[Streaming][Coinjar] - Review comments, added userTrades and orderChanges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429f2416d39a48a0306f919e022b4eaf3599abcb", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/429f2416d39a48a0306f919e022b4eaf3599abcb", "committedDate": "2020-07-28T06:29:02Z", "message": "[Streaming][Coinjar] - Fixed pom file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "484749dafe6be98a44e2567d8b17dd8d8851f67b", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/484749dafe6be98a44e2567d8b17dd8d8851f67b", "committedDate": "2020-07-28T06:30:50Z", "message": "[Streaming][Coinjar] - Fixed pom file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a8266e3167cf55f6e3fba0882ba739a80d21cbb", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/5a8266e3167cf55f6e3fba0882ba739a80d21cbb", "committedDate": "2020-07-28T07:05:41Z", "message": "Rename CoinjarStreamingMarketDataServiceintegration.java to CoinjarStreamingMarketDataServiceIntegration.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de2b640a2ab3cf38b2043d98284d57ff69b114d", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/3de2b640a2ab3cf38b2043d98284d57ff69b114d", "committedDate": "2020-07-28T07:13:26Z", "message": "[Streaming][Coinjar] - Fixed imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48405add0c84da525d8421060c564a77d1fff1f2", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/48405add0c84da525d8421060c564a77d1fff1f2", "committedDate": "2020-07-28T07:14:46Z", "message": "Merge branch 'add-coinjar-stream' of github.com:nielsdraaisma/XChange into add-coinjar-stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762921cb03895d8e0ebe7c0bd7f3a87da03f6c58", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/762921cb03895d8e0ebe7c0bd7f3a87da03f6c58", "committedDate": "2020-11-17T03:39:44Z", "message": "Merged develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc408ba09208f980b01692738862996b48a4fe2b", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/cc408ba09208f980b01692738862996b48a4fe2b", "committedDate": "2020-11-17T04:24:51Z", "message": "Removed invalid manual example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTk0NjA5", "url": "https://github.com/knowm/XChange/pull/3551#pullrequestreview-532594609", "createdAt": "2020-11-17T17:05:39Z", "commit": {"oid": "cc408ba09208f980b01692738862996b48a4fe2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowNTozOVrOH0_rWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowNTozOVrOH0_rWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMTI4OA==", "bodyText": "does this work with LINK?", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525331288", "createdAt": "2020-11-17T17:05:39Z", "author": {"login": "earce"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketOrderEvent;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketUserTradeEvent;\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.knowm.xchange.coinjar.CoinjarAdapters;\n+import org.knowm.xchange.currency.Currency;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.dto.trade.MarketOrder;\n+import org.knowm.xchange.dto.trade.UserTrade;\n+\n+class CoinjarStreamingAdapters {\n+\n+  public static CurrencyPair adaptTopicToCurrencyPair(String topic) {\n+    if (topic.startsWith(\"book\")) {\n+      topic = topic.substring(5);\n+      Currency base = new Currency(topic.substring(0, 3));\n+      Currency counter = new Currency(topic.substring(3, 6));\n+      return new CurrencyPair(base, counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc408ba09208f980b01692738862996b48a4fe2b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjAzNDMy", "url": "https://github.com/knowm/XChange/pull/3551#pullrequestreview-532603432", "createdAt": "2020-11-17T17:14:27Z", "commit": {"oid": "cc408ba09208f980b01692738862996b48a4fe2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoxNDoyN1rOH1AI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoxNDoyN1rOH1AI9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzODg2OQ==", "bodyText": "I don't this is is the right way to set this up because if you have disconnect and reconnect this will publish a message for every reconnect you have had during the course of your application. So if you disconnect 2 times and reconnect a 3rd this will publish your message 3 times a second when you reconnect.\nYou can test this by breaking internet connection deliberately and seeing how many time the message gets published. Something like (with your parameters and ping message):\n    Observable.interval(1, TimeUnit.SECONDS) .subscribe( t -> { if (isSocketOpen()) webSocketChannel.writeAndFlush(new PingWebSocketFrame()); });\nShould accomplish what you want", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525338869", "createdAt": "2020-11-17T17:14:27Z", "author": {"login": "earce"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingService.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarHeartbeat;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketSubscribeMessage;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketUnsubscribeMessage;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+class CoinjarStreamingService extends JsonNettyStreamingService {\n+\n+  private final AtomicInteger refCount = new AtomicInteger();\n+\n+  private String apiKey;\n+\n+  public CoinjarStreamingService(String apiUrl, String apiKey) {\n+    super(apiUrl);\n+    this.apiKey = apiKey;\n+    this.subscribeConnectionSuccess()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc408ba09208f980b01692738862996b48a4fe2b"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "committedDate": "2020-11-17T22:58:40Z", "message": "Fixed heartbeat schedule, fixed currency mapping for currencies with  more than 3 chars"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODkyNjU1", "url": "https://github.com/knowm/XChange/pull/3551#pullrequestreview-532892655", "createdAt": "2020-11-17T23:17:59Z", "commit": {"oid": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoxNzo1OVrOH1Pbvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoxNzo1OVrOH1Pbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4OTQzOQ==", "bodyText": "sorry to nitpick but is this declaration necessary since core already has it?", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525589439", "createdAt": "2020-11-17T23:17:59Z", "author": {"login": "earce"}, "path": "xchange-stream-coinjar/pom.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.knowm.xchange</groupId>\n+        <artifactId>xchange-parent</artifactId>\n+        <version>5.0.4-SNAPSHOT</version>\n+    </parent>\n+\n+    <name>XChange Coinjar Stream</name>\n+    <artifactId>xchange-stream-coinjar</artifactId>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.knowm.xchange</groupId>\n+            <artifactId>xchange-stream-core</artifactId>\n+            <version>${project.parent.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.knowm.xchange</groupId>\n+            <artifactId>xchange-stream-service-netty</artifactId>\n+            <version>${project.parent.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODkzOTA2", "url": "https://github.com/knowm/XChange/pull/3551#pullrequestreview-532893906", "createdAt": "2020-11-17T23:20:41Z", "commit": {"oid": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyMDo0MVrOH1PgMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyMDo0MVrOH1PgMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDU3OA==", "bodyText": "being pedantic here but can you just inline this?", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525590578", "createdAt": "2020-11-17T23:20:41Z", "author": {"login": "earce"}, "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.core.ProductSubscription;\n+import info.bitrich.xchangestream.core.StreamingExchange;\n+import info.bitrich.xchangestream.core.StreamingTradeService;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import org.knowm.xchange.coinjar.CoinjarExchange;\n+\n+public class CoinjarStreamingExchange extends CoinjarExchange implements StreamingExchange {\n+\n+  private static final String API_URI = \"wss://feed.exchange.coinjar.com/socket/websocket\";\n+\n+  private CoinjarStreamingService streamingService;\n+  private CoinjarStreamingMarketDataService streamingMarketDataService;\n+  private CoinjarStreamingTradeService streamingTradeService;\n+\n+  @Override\n+  protected void initServices() {\n+    super.initServices();\n+\n+    this.streamingService = createStreamingService();\n+    this.streamingMarketDataService = new CoinjarStreamingMarketDataService(streamingService);\n+    this.streamingTradeService = new CoinjarStreamingTradeService(streamingService);\n+  }\n+\n+  private CoinjarStreamingService createStreamingService() {\n+    return new CoinjarStreamingService(API_URI, this.exchangeSpecification.getApiKey());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a7d8d1ea51eec60c540ff104a007ddad1e3ce6", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/66a7d8d1ea51eec60c540ff104a007ddad1e3ce6", "committedDate": "2020-11-17T23:30:48Z", "message": "Removed pom dependency, inlined coinjar streamingService creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dda04c176242b9323003cbe7712b8ea4bdc89be", "author": {"user": {"login": "nielsdraaisma", "name": "Niels Draaisma"}}, "url": "https://github.com/knowm/XChange/commit/6dda04c176242b9323003cbe7712b8ea4bdc89be", "committedDate": "2020-11-17T23:41:04Z", "message": "Fixed coinjar streaming adapter for four character markets"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}