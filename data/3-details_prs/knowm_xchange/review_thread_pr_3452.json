{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MzU1NjE0", "number": 3452, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMDoxMTowNFrODoEtjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxNToyMlrODoiukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQ2ODI5OnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMDoxMTowNFrOF2bXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMDoxMTowNFrOF2bXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxNTgxOA==", "bodyText": "use brackets", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r392615818", "createdAt": "2020-03-14T20:11:04Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "diffHunk": "@@ -134,15 +141,18 @@ public static LimitOrder adaptOrder(BithumbOrder order) {\n         new CurrencyPair(order.getOrderCurrency(), order.getPaymentCurrency());\n     final Order.OrderType orderType = adaptOrderType(order.getType());\n \n+    Order.OrderStatus status = Order.OrderStatus.UNKNOWN;\n+    if (order.getUnitsRemaining().compareTo(order.getUnits()) == 0) status = Order.OrderStatus.NEW;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff58f094b15b3aab7ad7d159fe357c628644e48"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkxMzM2OnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1Mjo1M1rOF3FXIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzowMDo1M1rOF3Ijog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzg0Mw==", "bodyText": "this is not an id at will not be unique if many orders get filled at the same time - its better to leave id as null then to have a not unique id", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393303843", "createdAt": "2020-03-16T20:52:53Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "diffHunk": "@@ -162,13 +177,14 @@ private static UserTrade adaptUserTrade(\n \n     final String units = StringUtils.remove(bithumbTransaction.getUnits(), ' ');\n     return new UserTrade.Builder()\n+        .id(Long.toString(bithumbTransaction.getTransferDate()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833198e2f6df7f86667065580e538edcabdd9f6e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NjE5NA==", "bodyText": "ok", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393356194", "createdAt": "2020-03-16T23:00:53Z", "author": {"login": "mdvx"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "diffHunk": "@@ -162,13 +177,14 @@ private static UserTrade adaptUserTrade(\n \n     final String units = StringUtils.remove(bithumbTransaction.getUnits(), ' ');\n     return new UserTrade.Builder()\n+        .id(Long.toString(bithumbTransaction.getTransferDate()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzg0Mw=="}, "originalCommit": {"oid": "833198e2f6df7f86667065580e538edcabdd9f6e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkzODg2OnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/test/resources/org/knowm/xchange/bithumb/dto/account/example-order.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTowMDo1NVrOF3FnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxODowM1rOF3J_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzk0NA==", "bodyText": "is this actually something they are returning?\nin the documentation I can only see:  send\uff0cpending\uff0csuccess\uff0ccancel", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393307944", "createdAt": "2020-03-16T21:00:55Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/test/resources/org/knowm/xchange/bithumb/dto/account/example-order.json", "diffHunk": "@@ -1,10 +1,10 @@\n {\n-  \"order_id\": \"1546705688665840\",\n+  \"order_id\": \"C01040000000000000000\",\n   \"order_currency\": \"XRP\",\n   \"order_date\": \"1546705688665840\",\n   \"payment_currency\": \"KRW\",\n   \"type\": \"ask\",\n-  \"status\": \"placed\",\n+  \"status\": \"0000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833198e2f6df7f86667065580e538edcabdd9f6e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1ODYxMg==", "bodyText": "\"status\": \"0000\" is the top level (did the rest call work)\n\"order_status\": \"Completed\" is see on orderDetails\nsend\uff0cpending\uff0csuccess\uff0ccancel i dont see in docs\nit is clear that the code we had was written for an API that changed drastically, but remained on the same endpoints", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393358612", "createdAt": "2020-03-16T23:04:44Z", "author": {"login": "mdvx"}, "path": "xchange-bithumb/src/test/resources/org/knowm/xchange/bithumb/dto/account/example-order.json", "diffHunk": "@@ -1,10 +1,10 @@\n {\n-  \"order_id\": \"1546705688665840\",\n+  \"order_id\": \"C01040000000000000000\",\n   \"order_currency\": \"XRP\",\n   \"order_date\": \"1546705688665840\",\n   \"payment_currency\": \"KRW\",\n   \"type\": \"ask\",\n-  \"status\": \"placed\",\n+  \"status\": \"0000\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzk0NA=="}, "originalCommit": {"oid": "833198e2f6df7f86667065580e538edcabdd9f6e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTY1NQ==", "bodyText": "ok", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393379655", "createdAt": "2020-03-17T00:18:03Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/test/resources/org/knowm/xchange/bithumb/dto/account/example-order.json", "diffHunk": "@@ -1,10 +1,10 @@\n {\n-  \"order_id\": \"1546705688665840\",\n+  \"order_id\": \"C01040000000000000000\",\n   \"order_currency\": \"XRP\",\n   \"order_date\": \"1546705688665840\",\n   \"payment_currency\": \"KRW\",\n   \"type\": \"ask\",\n-  \"status\": \"placed\",\n+  \"status\": \"0000\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzk0NA=="}, "originalCommit": {"oid": "833198e2f6df7f86667065580e538edcabdd9f6e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODMzODU0OnYy", "diffSide": "LEFT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzo0Nzo1MFrOF3JgbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowMjowN1rOF3bLjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MTc1Nw==", "bodyText": "are you sure that old transactions don't have spaces and minus sign?", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393371757", "createdAt": "2020-03-16T23:47:50Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "diffHunk": "@@ -123,60 +130,112 @@ public static Trade adaptTrade(BithumbTransactionHistory trade, CurrencyPair cur\n     return orderType == OrderType.bid ? Order.OrderType.BID : Order.OrderType.ASK;\n   }\n \n-  public static OpenOrders adaptOrders(List<BithumbOrder> bithumbOrders) {\n+  public static OpenOrders adaptOrders(List<BithumbOrderResponse.BithumbOrder> bithumbOrders) {\n     final List<LimitOrder> orders =\n         bithumbOrders.stream().map(BithumbAdapters::adaptOrder).collect(Collectors.toList());\n     return new OpenOrders(orders);\n   }\n \n-  public static LimitOrder adaptOrder(BithumbOrder order) {\n+  public static LimitOrder adaptOrder(BithumbOrderResponse.BithumbOrder order) {\n     final CurrencyPair currencyPair =\n-        new CurrencyPair(order.getOrderCurrency(), order.getPaymentCurrency());\n+        adaptCurrencyPair(order.getOrderCurrency(), order.getPaymentCurrency());\n     final Order.OrderType orderType = adaptOrderType(order.getType());\n \n+    Order.OrderStatus status = Order.OrderStatus.UNKNOWN;\n+    if (order.getUnitsRemaining().compareTo(order.getUnits()) == 0) {\n+      status = Order.OrderStatus.NEW;\n+    } else if (order.getUnitsRemaining().compareTo(BigDecimal.ZERO) == 0) {\n+      status = Order.OrderStatus.FILLED;\n+    } else {\n+      status = Order.OrderStatus.PARTIALLY_FILLED;\n+    }\n+\n     return new LimitOrder.Builder(orderType, currencyPair)\n         .id(String.valueOf(order.getOrderId()))\n         .limitPrice(order.getPrice())\n         .originalAmount(order.getUnits())\n         .remainingAmount(order.getUnitsRemaining())\n-        .orderStatus(\n-            StringUtils.equals(order.getStatus(), \"placed\")\n-                ? Order.OrderStatus.NEW\n-                : Order.OrderStatus.UNKNOWN)\n+        .orderStatus(status)\n         .timestamp(new Date(order.getOrderDate() / 1000L))\n         .build();\n   }\n \n   public static UserTrades adaptUserTrades(\n-      List<BithumbTransaction> transactions, CurrencyPair currencyPair) {\n+      List<BithumbUserTransactionResponse.BithumbUserTransaction> transactions,\n+      CurrencyPair currencyPair) {\n     final List<UserTrade> userTrades =\n         transactions.stream()\n-            .filter(BithumbTransaction::isBuyOrSell)\n+            .filter(BithumbUserTransactionResponse.BithumbUserTransaction::isBuyOrSell)\n             .map(transaction -> adaptUserTrade(transaction, currencyPair))\n             .collect(Collectors.toList());\n     return new UserTrades(userTrades, Trades.TradeSortType.SortByTimestamp);\n   }\n \n   private static UserTrade adaptUserTrade(\n-      BithumbTransaction bithumbTransaction, CurrencyPair currencyPair) {\n+      BithumbUserTransactionResponse.BithumbUserTransaction bithumbTransaction,\n+      CurrencyPair currencyPair) {\n \n-    final String units = StringUtils.remove(bithumbTransaction.getUnits(), ' ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MTMyNA==", "bodyText": "good point, check moved to BithumbUserTransaction()", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393661324", "createdAt": "2020-03-17T13:02:07Z", "author": {"login": "mdvx"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/BithumbAdapters.java", "diffHunk": "@@ -123,60 +130,112 @@ public static Trade adaptTrade(BithumbTransactionHistory trade, CurrencyPair cur\n     return orderType == OrderType.bid ? Order.OrderType.BID : Order.OrderType.ASK;\n   }\n \n-  public static OpenOrders adaptOrders(List<BithumbOrder> bithumbOrders) {\n+  public static OpenOrders adaptOrders(List<BithumbOrderResponse.BithumbOrder> bithumbOrders) {\n     final List<LimitOrder> orders =\n         bithumbOrders.stream().map(BithumbAdapters::adaptOrder).collect(Collectors.toList());\n     return new OpenOrders(orders);\n   }\n \n-  public static LimitOrder adaptOrder(BithumbOrder order) {\n+  public static LimitOrder adaptOrder(BithumbOrderResponse.BithumbOrder order) {\n     final CurrencyPair currencyPair =\n-        new CurrencyPair(order.getOrderCurrency(), order.getPaymentCurrency());\n+        adaptCurrencyPair(order.getOrderCurrency(), order.getPaymentCurrency());\n     final Order.OrderType orderType = adaptOrderType(order.getType());\n \n+    Order.OrderStatus status = Order.OrderStatus.UNKNOWN;\n+    if (order.getUnitsRemaining().compareTo(order.getUnits()) == 0) {\n+      status = Order.OrderStatus.NEW;\n+    } else if (order.getUnitsRemaining().compareTo(BigDecimal.ZERO) == 0) {\n+      status = Order.OrderStatus.FILLED;\n+    } else {\n+      status = Order.OrderStatus.PARTIALLY_FILLED;\n+    }\n+\n     return new LimitOrder.Builder(orderType, currencyPair)\n         .id(String.valueOf(order.getOrderId()))\n         .limitPrice(order.getPrice())\n         .originalAmount(order.getUnits())\n         .remainingAmount(order.getUnitsRemaining())\n-        .orderStatus(\n-            StringUtils.equals(order.getStatus(), \"placed\")\n-                ? Order.OrderStatus.NEW\n-                : Order.OrderStatus.UNKNOWN)\n+        .orderStatus(status)\n         .timestamp(new Date(order.getOrderDate() / 1000L))\n         .build();\n   }\n \n   public static UserTrades adaptUserTrades(\n-      List<BithumbTransaction> transactions, CurrencyPair currencyPair) {\n+      List<BithumbUserTransactionResponse.BithumbUserTransaction> transactions,\n+      CurrencyPair currencyPair) {\n     final List<UserTrade> userTrades =\n         transactions.stream()\n-            .filter(BithumbTransaction::isBuyOrSell)\n+            .filter(BithumbUserTransactionResponse.BithumbUserTransaction::isBuyOrSell)\n             .map(transaction -> adaptUserTrade(transaction, currencyPair))\n             .collect(Collectors.toList());\n     return new UserTrades(userTrades, Trades.TradeSortType.SortByTimestamp);\n   }\n \n   private static UserTrade adaptUserTrade(\n-      BithumbTransaction bithumbTransaction, CurrencyPair currencyPair) {\n+      BithumbUserTransactionResponse.BithumbUserTransaction bithumbTransaction,\n+      CurrencyPair currencyPair) {\n \n-    final String units = StringUtils.remove(bithumbTransaction.getUnits(), ' ');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MTc1Nw=="}, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM1NTkwOnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/account/BithumbOrderDetailResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzo1NjozOVrOF3JqbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzo1NjozOVrOF3JqbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NDMxNg==", "bodyText": "to me this looks worse then the previous code\nif BithumbResponse changes then a lot of classes will get affected because they now must override its constructor\nthen name of the class  its self suggests that details for one order will be returned", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393374316", "createdAt": "2020-03-16T23:56:39Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/account/BithumbOrderDetailResponse.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package org.knowm.xchange.bithumb.dto.account;\n+\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.knowm.xchange.bithumb.BithumbAdapters;\n+import org.knowm.xchange.bithumb.dto.BithumbResponse;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BithumbOrderDetailResponse\n+    extends BithumbResponse<List<BithumbOrderDetailResponse.BithumbOrderDetail>> {\n+\n+  public BithumbOrderDetailResponse(\n+      @JsonProperty(\"status\") String status,\n+      @JsonProperty(\"message\") String message,\n+      @JsonProperty(\"data\") List<BithumbOrderDetailResponse.BithumbOrderDetail> data) {\n+    super(status, message, data);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM2MzUyOnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/trade/BithumbTradeResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDowMToxNlrOF3JvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxMjowOFrOF3bjjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NTUxMA==", "bodyText": "if this does not have the data field then it should not extend from BithumbResponse\nbesides it this now does not return a list of trades then there is no sense in calling it a Trade response", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393375510", "createdAt": "2020-03-17T00:01:16Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/trade/BithumbTradeResponse.java", "diffHunk": "@@ -1,82 +1,21 @@\n package org.knowm.xchange.bithumb.dto.trade;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.math.BigDecimal;\n-import java.util.List;\n import org.knowm.xchange.bithumb.dto.BithumbResponse;\n \n-public class BithumbTradeResponse extends BithumbResponse<List<BithumbTradeResponse.BithumbTrade>> {\n+public class BithumbTradeResponse extends BithumbResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NzQ2OQ==", "bodyText": "This is only used to return the orderId of newly placed orders, so it is the REST response to place, marketBuy, marketsell.\nI have removed dependency on BithumbResponse", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393667469", "createdAt": "2020-03-17T13:12:08Z", "author": {"login": "mdvx"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/trade/BithumbTradeResponse.java", "diffHunk": "@@ -1,82 +1,21 @@\n package org.knowm.xchange.bithumb.dto.trade;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.math.BigDecimal;\n-import java.util.List;\n import org.knowm.xchange.bithumb.dto.BithumbResponse;\n \n-public class BithumbTradeResponse extends BithumbResponse<List<BithumbTradeResponse.BithumbTrade>> {\n+public class BithumbTradeResponse extends BithumbResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NTUxMA=="}, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM2OTUzOnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/marketdata/BithumbTransactionHistoryResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDowNToxMlrOF3Jy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDowNToxMlrOF3Jy4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NjQ4Mg==", "bodyText": "silent errors are pure evil\nuse Jackson annotations to parse make it parse the date in the desired format", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393376482", "createdAt": "2020-03-17T00:05:12Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/dto/marketdata/BithumbTransactionHistoryResponse.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.knowm.xchange.bithumb.dto.marketdata;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.knowm.xchange.bithumb.BithumbAdapters;\n+import org.knowm.xchange.bithumb.dto.BithumbResponse;\n+\n+import java.math.BigDecimal;\n+import java.text.ParseException;\n+import java.util.Date;\n+import java.util.List;\n+\n+public class BithumbTransactionHistoryResponse\n+    extends BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>> {\n+  public static final FastDateFormat TRANSACTION_DATE_FORMAT =\n+      FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss\");\n+\n+  public BithumbTransactionHistoryResponse(\n+      @JsonProperty(\"status\") String status,\n+      @JsonProperty(\"message\") String message,\n+      @JsonProperty(\"data\") List<BithumbTransactionHistory> data) {\n+    super(status, message, data);\n+  }\n+\n+  public static class BithumbTransactionHistory {\n+    private final String transactionDate;\n+    private final BithumbAdapters.OrderType type;\n+    private final BigDecimal unitsTraded;\n+    private final BigDecimal price;\n+    private final BigDecimal total;\n+\n+    public BithumbTransactionHistory(\n+        @JsonProperty(\"transaction_date\") String transactionDate,\n+        @JsonProperty(\"type\") BithumbAdapters.OrderType type,\n+        @JsonProperty(\"units_traded\") BigDecimal unitsTraded,\n+        @JsonProperty(\"price\") BigDecimal price,\n+        @JsonProperty(\"total\") BigDecimal total) {\n+      this.transactionDate = transactionDate;\n+      this.type = type;\n+      this.unitsTraded = unitsTraded;\n+      this.price = price;\n+      this.total = total;\n+    }\n+\n+    public String getTransactionDate() {\n+      return transactionDate;\n+    }\n+\n+    public BithumbAdapters.OrderType getType() {\n+      return type;\n+    }\n+\n+    public BigDecimal getUnitsTraded() {\n+      return unitsTraded;\n+    }\n+\n+    public BigDecimal getPrice() {\n+      return price;\n+    }\n+\n+    public BigDecimal getTotal() {\n+      return total;\n+    }\n+\n+    public Date getTimestamp() {\n+      try {\n+        return TRANSACTION_DATE_FORMAT.parse(transactionDate);\n+      } catch (ParseException e) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM3MzA0OnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/service/BithumbMarketDataServiceRaw.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDowNjo1MFrOF3J0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDowNjo1MFrOF3J0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3Njk3Mg==", "bodyText": "those inner classes make reading all of this much worse", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393376972", "createdAt": "2020-03-17T00:06:50Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/service/BithumbMarketDataServiceRaw.java", "diffHunk": "@@ -34,10 +35,10 @@ public BithumbOrderbook getBithumbOrderBook(CurrencyPair currencyPair) throws IO\n     return orderbook.getData();\n   }\n \n-  public List<BithumbTransactionHistory> getBithumbTrades(CurrencyPair currencyPair)\n-      throws IOException {\n-    final BithumbResponse<List<BithumbTransactionHistory>> transactionHistory =\n-        bithumb.transactionHistory(BithumbUtils.getBaseCurrency(currencyPair));\n+  public List<BithumbTransactionHistoryResponse.BithumbTransactionHistory> getBithumbTrades(\n+      CurrencyPair currencyPair) throws IOException {\n+    final BithumbResponse<List<BithumbTransactionHistoryResponse.BithumbTransactionHistory>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODM4NjExOnYy", "diffSide": "RIGHT", "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/service/BithumbTradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxNToyMlrOF3J8pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoxNToyMlrOF3J8pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3ODk4MQ==", "bodyText": "silent errors are pure evil\nIOException  should be thrown out", "url": "https://github.com/knowm/XChange/pull/3452#discussion_r393378981", "createdAt": "2020-03-17T00:15:22Z", "author": {"login": "walec51"}, "path": "xchange-bithumb/src/main/java/org/knowm/xchange/bithumb/service/BithumbTradeService.java", "diffHunk": "@@ -89,12 +100,36 @@ public UserTrades getTradeHistory(TradeHistoryParams params) throws IOException\n             .map(p -> ((TradeHistoryParamCurrencyPair) p).getCurrencyPair())\n             .orElse(null);\n     try {\n-      return BithumbAdapters.adaptUserTrades(bithumbTransactions(currencyPair), currencyPair);\n+      return BithumbAdapters.adaptUserTrades(\n+          getBithumbUserTransactions(currencyPair).getData(), currencyPair);\n     } catch (BithumbException e) {\n       throw BithumbErrorAdapter.adapt(e);\n     }\n   }\n \n+  @Override\n+  public Collection<Order> getOrder(OrderQueryParams... orderQueryParams) throws IOException {\n+    /* This only works for executed orders */\n+    return Arrays.stream(orderQueryParams)\n+        .filter(oq -> oq instanceof OrderQueryParamCurrencyPair)\n+        .map(oq -> (OrderQueryParamCurrencyPair) oq)\n+        .flatMap(\n+            oq -> {\n+              try {\n+                return getBithumbOrderDetail(oq.getOrderId(), oq.getCurrencyPair()).getData()\n+                    .stream()\n+                    .map(detail -> BithumbAdapters.adaptOrderDetail(detail, oq.getOrderId()));\n+\n+              } catch (IOException e) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950b4793976fc7fc304a9d3df9fa961122566099"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3805, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}