{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDExODcw", "number": 3295, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo0Nzo0MVrOEtQ3hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToxNToxMlrOEtoCzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk3NzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo0Nzo0MVrOHg9TGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo1NTo1NlrOHmE_OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMDc5Mw==", "bodyText": "Add a brief motivating comment for startsWith(\"1.\")?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504320793", "createdAt": "2020-10-13T23:47:41Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -100,6 +100,12 @@\n   @Nullable\n   public abstract String getConfigSchemaVersion();\n \n+  public boolean isDiscogapic() {\n+    return (getTransportProtocol() == TransportProtocol.HTTP\n+        && getConfigSchemaVersion() != null\n+        && getConfigSchemaVersion().startsWith(\"1.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY4OTY1Nw==", "bodyText": "Both DIREGAPIC and DISCOGAPIC have TransportProtocol as HTTP, but discogapic is always gapic yaml v1, while DIREGAPIC is always gapic yaml v2 or no gapic yaml at all. This is the most reliable way to distinguish between the two without introducing a new \"transport protocol\". Also discogapic and diregapic share significant portion of logic, that is why I'm reusing TransportProtocol.HTTP in DIREGAPIC..", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r509689657", "createdAt": "2020-10-21T20:55:56Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -100,6 +100,12 @@\n   @Nullable\n   public abstract String getConfigSchemaVersion();\n \n+  public boolean isDiscogapic() {\n+    return (getTransportProtocol() == TransportProtocol.HTTP\n+        && getConfigSchemaVersion() != null\n+        && getConfigSchemaVersion().startsWith(\"1.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMDc5Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk4MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/TestCaseTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo0OTo0N1rOHg9VXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1OTowN1rOHnUA0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTM3NA==", "bodyText": "Add a brief comment that only the first map or repeated (list) field is used? This may not be obvious to folks who have not read the design doc.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504321374", "createdAt": "2020-10-13T23:49:47Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/transformer/TestCaseTransformer.java", "diffHunk": "@@ -384,7 +384,11 @@ private InitCodeContext createResponseInitCodeContext(\n       FieldModel field = config.getResourcesField();\n       InitCodeNode initCodeNode;\n       if (field.isRepeated()) {\n-        initCodeNode = InitCodeNode.createSingletonList(config.getResourcesFieldName());\n+        if (field.isMap()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MzcyOA==", "bodyText": "+1", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510483728", "createdAt": "2020-10-22T22:02:20Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/TestCaseTransformer.java", "diffHunk": "@@ -384,7 +384,11 @@ private InitCodeContext createResponseInitCodeContext(\n       FieldModel field = config.getResourcesField();\n       InitCodeNode initCodeNode;\n       if (field.isRepeated()) {\n-        initCodeNode = InitCodeNode.createSingletonList(config.getResourcesFieldName());\n+        if (field.isMap()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTM3NA=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4NDQwMQ==", "bodyText": "(If you look at the PR in conversation view, you may not see [I don't, for sure] that I am +1 Mira's PR comment, where she suggests a code comment. If you go the file view, you'll see the whole comment thread. The GH review system has its issues....)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510984401", "createdAt": "2020-10-23T15:59:07Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/TestCaseTransformer.java", "diffHunk": "@@ -384,7 +384,11 @@ private InitCodeContext createResponseInitCodeContext(\n       FieldModel field = config.getResourcesField();\n       InitCodeNode initCodeNode;\n       if (field.isRepeated()) {\n-        initCodeNode = InitCodeNode.createSingletonList(config.getResourcesFieldName());\n+        if (field.isMap()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTM3NA=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk4MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo1MDoxOVrOHg9WHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjoyNjo1M1rOHmSVPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTU2Ng==", "bodyText": "Do we need something similar for !type.isMap() && type.isRepeated()?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504321566", "createdAt": "2020-10-13T23:50:19Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "diffHunk": "@@ -146,6 +146,9 @@ private TypeName getTypeNameForElementType(TypeRef type, boolean shouldBoxPrimit\n     }\n     switch (type.getKind()) {\n       case TYPE_MESSAGE:\n+        if (type.isMap() && type.isMessage() && type.isRepeated()) {\n+          return getMapTypeName(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwODI4Nw==", "bodyText": "Actually if isMap() == true  then isMessage() == true and isRepeated() == true automatically (just checked the implementation of those method in api-compiler). Removed the other 2 conditions from the if statement as they are 100% redundant.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r509908287", "createdAt": "2020-10-22T06:26:53Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "diffHunk": "@@ -146,6 +146,9 @@ private TypeName getTypeNameForElementType(TypeRef type, boolean shouldBoxPrimit\n     }\n     switch (type.getKind()) {\n       case TYPE_MESSAGE:\n+        if (type.isMap() && type.isMessage() && type.isRepeated()) {\n+          return getMapTypeName(type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTU2Ng=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk4NTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/viewmodel/PageStreamingDescriptorClassView.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo1MTo0OVrOHg9X4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjoyMzo1MVrOHm19gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMjAxNg==", "bodyText": "Nit: Did you mean IsEntrySet? When a reader sees \"as,\" they may expect this method to convert resourcesField into an entry set.\nConsider adding a comment with a sample resourceTypeName value.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504322016", "createdAt": "2020-10-13T23:51:49Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/viewmodel/PageStreamingDescriptorClassView.java", "diffHunk": "@@ -45,6 +45,10 @@\n \n   public abstract boolean resourcesFieldIsMap();\n \n+  public boolean resourcesFieldAsEntrySet() {\n+    return resourceTypeName() != null && resourceTypeName().contains(\"<\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwOTI4NQ==", "bodyText": "Agree, no idea why I called that resourceFieldAsEntrySet instead of resourceFieldIsEntrySet. Renamed.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r509909285", "createdAt": "2020-10-22T06:29:20Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/viewmodel/PageStreamingDescriptorClassView.java", "diffHunk": "@@ -45,6 +45,10 @@\n \n   public abstract boolean resourcesFieldIsMap();\n \n+  public boolean resourcesFieldAsEntrySet() {\n+    return resourceTypeName() != null && resourceTypeName().contains(\"<\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMjAxNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4NTQ3NQ==", "bodyText": "This still says As", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510485475", "createdAt": "2020-10-22T22:06:46Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/viewmodel/PageStreamingDescriptorClassView.java", "diffHunk": "@@ -45,6 +45,10 @@\n \n   public abstract boolean resourcesFieldIsMap();\n \n+  public boolean resourcesFieldAsEntrySet() {\n+    return resourceTypeName() != null && resourceTypeName().contains(\"<\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMjAxNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MjAzMw==", "bodyText": "Opps, forgot to push =) Thanks!", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510492033", "createdAt": "2020-10-22T22:23:51Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/viewmodel/PageStreamingDescriptorClassView.java", "diffHunk": "@@ -45,6 +45,10 @@\n \n   public abstract boolean resourcesFieldIsMap();\n \n+  public boolean resourcesFieldAsEntrySet() {\n+    return resourceTypeName() != null && resourceTypeName().contains(\"<\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMjAxNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQxMDMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzozNjo1N1rOHhd7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzozNjo1N1rOHhd7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NTQyNQ==", "bodyText": "Thanks for having this function! It will make understanding the code easier.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504855425", "createdAt": "2020-10-14T17:36:57Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -100,6 +100,12 @@\n   @Nullable\n   public abstract String getConfigSchemaVersion();\n \n+  public boolean isDiscogapic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ3NDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/config/PageStreamingConfig.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1NDoxN1rOHhejvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1MTo1N1rOHneHSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NTcyNg==", "bodyText": "As per the open discussion in the design doc, let's decide whether we want the generators aware of \"diregapic mode\", which is essentially what you're doing here. The assumption so far has been generators would not be aware of the provenance of the protos, and that's something I still want to keep if possible (though I'm certainly open to counter-arguments).\nIn the meantime, in the interest of being able to generate testing clients soon, please add (just inside the outermost if) something like TODO: Conform to design doc spec, once approved, for using non-standard paging fields,", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504865726", "createdAt": "2020-10-14T17:54:17Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/config/PageStreamingConfig.java", "diffHunk": "@@ -237,10 +240,16 @@ static PageStreamingConfig createPageStreamingConfig(\n \n     // Toggle pagination based on presence of paging params.\n     // See https://cloud.google.com/apis/design/design_patterns for API pagination pattern.\n-    ProtoField tokenField = methodModel.getInputField(ProtoPagingParameters.nameForPageToken());\n-    ProtoField pageSizeField = methodModel.getInputField(ProtoPagingParameters.nameForPageSize());\n+    ProtoPagingParameters pagingParams = new ProtoPagingParameters();\n+    ProtoField tokenField = methodModel.getInputField(pagingParams.getNameForPageToken());\n+    ProtoField pageSizeField = methodModel.getInputField(pagingParams.getNameForPageSize());\n+    if (pageSizeField == null) {\n+      if (language == TargetLanguage.JAVA && transportProtocol == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNDMxMw==", "bodyText": "The generators cannot not know which client they generated. The number of places where it is needed is limited, but is still present. It is easy for me to remove this check, but I'm afraid of breaking some of the existing clients OnePlatform clients", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r508814313", "createdAt": "2020-10-20T20:22:54Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/config/PageStreamingConfig.java", "diffHunk": "@@ -237,10 +240,16 @@ static PageStreamingConfig createPageStreamingConfig(\n \n     // Toggle pagination based on presence of paging params.\n     // See https://cloud.google.com/apis/design/design_patterns for API pagination pattern.\n-    ProtoField tokenField = methodModel.getInputField(ProtoPagingParameters.nameForPageToken());\n-    ProtoField pageSizeField = methodModel.getInputField(ProtoPagingParameters.nameForPageSize());\n+    ProtoPagingParameters pagingParams = new ProtoPagingParameters();\n+    ProtoField tokenField = methodModel.getInputField(pagingParams.getNameForPageToken());\n+    ProtoField pageSizeField = methodModel.getInputField(pagingParams.getNameForPageSize());\n+    if (pageSizeField == null) {\n+      if (language == TargetLanguage.JAVA && transportProtocol == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NTcyNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MjUzNw==", "bodyText": "(qq: \"where it is needed\" -> what does \"it\" refer to? this check?)\nWe shouldn't have this check in the final product unless it turns out we really need it (eg breaking the current clients---which I don't think we will since the cascading rules you formulated should prevent that). When we remove the check, yes, it makes sense to regenerate existing clients to make sure there are no changes, or, if there are, that they be additive.\nFor now, for this MValpha, I'm fine keeping this check as long as we include a TODO flagging it prominently wherever it appears.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510482537", "createdAt": "2020-10-22T21:59:33Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/config/PageStreamingConfig.java", "diffHunk": "@@ -237,10 +240,16 @@ static PageStreamingConfig createPageStreamingConfig(\n \n     // Toggle pagination based on presence of paging params.\n     // See https://cloud.google.com/apis/design/design_patterns for API pagination pattern.\n-    ProtoField tokenField = methodModel.getInputField(ProtoPagingParameters.nameForPageToken());\n-    ProtoField pageSizeField = methodModel.getInputField(ProtoPagingParameters.nameForPageSize());\n+    ProtoPagingParameters pagingParams = new ProtoPagingParameters();\n+    ProtoField tokenField = methodModel.getInputField(pagingParams.getNameForPageToken());\n+    ProtoField pageSizeField = methodModel.getInputField(pagingParams.getNameForPageSize());\n+    if (pageSizeField == null) {\n+      if (language == TargetLanguage.JAVA && transportProtocol == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NTcyNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3OTE0OA==", "bodyText": "Thanks for the TODO, but please make it a bit stronger. (I'm concerned about people copying this as a reference implementation when we may decide something else in the design doc).\nHow about TODO: Conform to design doc spec, once approved, for using non-standard paging fields (such as max_results for page_size)?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510979148", "createdAt": "2020-10-23T15:50:28Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/config/PageStreamingConfig.java", "diffHunk": "@@ -237,10 +240,16 @@ static PageStreamingConfig createPageStreamingConfig(\n \n     // Toggle pagination based on presence of paging params.\n     // See https://cloud.google.com/apis/design/design_patterns for API pagination pattern.\n-    ProtoField tokenField = methodModel.getInputField(ProtoPagingParameters.nameForPageToken());\n-    ProtoField pageSizeField = methodModel.getInputField(ProtoPagingParameters.nameForPageSize());\n+    ProtoPagingParameters pagingParams = new ProtoPagingParameters();\n+    ProtoField tokenField = methodModel.getInputField(pagingParams.getNameForPageToken());\n+    ProtoField pageSizeField = methodModel.getInputField(pagingParams.getNameForPageSize());\n+    if (pageSizeField == null) {\n+      if (language == TargetLanguage.JAVA && transportProtocol == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NTcyNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0OTg5OQ==", "bodyText": "Added.\nI noticed you almost always ask for reformulating my original comments/todos. I don't have a strong opinion about wording of these things. For those comments which you have strong opinion about please consider providing the exact wording you want it to be in the original review comment, this will let us save some review cycles.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r511149899", "createdAt": "2020-10-23T20:51:57Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/config/PageStreamingConfig.java", "diffHunk": "@@ -237,10 +240,16 @@ static PageStreamingConfig createPageStreamingConfig(\n \n     // Toggle pagination based on presence of paging params.\n     // See https://cloud.google.com/apis/design/design_patterns for API pagination pattern.\n-    ProtoField tokenField = methodModel.getInputField(ProtoPagingParameters.nameForPageToken());\n-    ProtoField pageSizeField = methodModel.getInputField(ProtoPagingParameters.nameForPageSize());\n+    ProtoPagingParameters pagingParams = new ProtoPagingParameters();\n+    ProtoField tokenField = methodModel.getInputField(pagingParams.getNameForPageToken());\n+    ProtoField pageSizeField = methodModel.getInputField(pagingParams.getNameForPageSize());\n+    if (pageSizeField == null) {\n+      if (language == TargetLanguage.JAVA && transportProtocol == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NTcyNg=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ4NTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1NzoxNVrOHheq4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1MzoyNVrOHneJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzU1Mw==", "bodyText": "Wouldn't we want PARAMETER_MAX_RESULTS in here as well? (I might be miunderstanding how this is used)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504867553", "createdAt": "2020-10-14T17:57:15Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "diffHunk": "@@ -21,10 +21,11 @@\n public class ProtoPagingParameters implements PagingParameters {\n   private static final String PARAMETER_PAGE_TOKEN = \"page_token\";\n   private static final String PARAMETER_NEXT_PAGE_TOKEN = \"next_page_token\";\n-  private static final String PARAMETER_MAX_RESULTS = \"page_size\";\n+  private static final String PARAMETER_PAGE_SIZE = \"page_size\";\n+  private static final String PARAMETER_MAX_RESULTS = \"max_results\";\n \n   private static final ImmutableList<String> IGNORED_PARAMETERS =\n-      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_MAX_RESULTS);\n+      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_PAGE_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODc4Nw==", "bodyText": "This logic is used only in gapic config generation, i.e. in basically dead code not used anywhere now. We can add it there but it will not affect anything (I just did not want to touch dead code if not necessary).", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r508818787", "createdAt": "2020-10-20T20:29:27Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "diffHunk": "@@ -21,10 +21,11 @@\n public class ProtoPagingParameters implements PagingParameters {\n   private static final String PARAMETER_PAGE_TOKEN = \"page_token\";\n   private static final String PARAMETER_NEXT_PAGE_TOKEN = \"next_page_token\";\n-  private static final String PARAMETER_MAX_RESULTS = \"page_size\";\n+  private static final String PARAMETER_PAGE_SIZE = \"page_size\";\n+  private static final String PARAMETER_MAX_RESULTS = \"max_results\";\n \n   private static final ImmutableList<String> IGNORED_PARAMETERS =\n-      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_MAX_RESULTS);\n+      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_PAGE_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzU1Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MzU2OQ==", "bodyText": "Oh, OK. Right, we're in configgen. But you are changing/adding PARAMETER_PAGE_SIZE and PARAMETER_MAX_RESULTS, so then it's not really dead?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510483569", "createdAt": "2020-10-22T22:01:55Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "diffHunk": "@@ -21,10 +21,11 @@\n public class ProtoPagingParameters implements PagingParameters {\n   private static final String PARAMETER_PAGE_TOKEN = \"page_token\";\n   private static final String PARAMETER_NEXT_PAGE_TOKEN = \"next_page_token\";\n-  private static final String PARAMETER_MAX_RESULTS = \"page_size\";\n+  private static final String PARAMETER_PAGE_SIZE = \"page_size\";\n+  private static final String PARAMETER_MAX_RESULTS = \"max_results\";\n \n   private static final ImmutableList<String> IGNORED_PARAMETERS =\n-      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_MAX_RESULTS);\n+      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_PAGE_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzU1Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MTM1Ng==", "bodyText": "This was just a queer coincidence. the java constant for the \"page_size\" string literal was called PARAMETER_MAX_RESULTS. So to add \"max_results\" parameter and that code to keep making sense I had to rename the old constant to PARAMETER_PAGE_SIZE first =)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510491356", "createdAt": "2020-10-22T22:21:57Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "diffHunk": "@@ -21,10 +21,11 @@\n public class ProtoPagingParameters implements PagingParameters {\n   private static final String PARAMETER_PAGE_TOKEN = \"page_token\";\n   private static final String PARAMETER_NEXT_PAGE_TOKEN = \"next_page_token\";\n-  private static final String PARAMETER_MAX_RESULTS = \"page_size\";\n+  private static final String PARAMETER_PAGE_SIZE = \"page_size\";\n+  private static final String PARAMETER_MAX_RESULTS = \"max_results\";\n \n   private static final ImmutableList<String> IGNORED_PARAMETERS =\n-      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_MAX_RESULTS);\n+      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_PAGE_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzU1Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MjU3Mw==", "bodyText": "Yeah, that part I saw. But my point is that those PARAMETER_* are being used elsewhere, so they're not dead code. But you're saying IGNORED_PARAMETERS is dead code, yet you changed the parameter name without adding the new parameter. So it seems to me that for consistency, you would add the new parameter here, since it would also be ignored if we were generating a config file. I would either add it or add a comment saying it would be added if it mattered....\nBut this is totally minor and not a blocker.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510982573", "createdAt": "2020-10-23T15:56:08Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "diffHunk": "@@ -21,10 +21,11 @@\n public class ProtoPagingParameters implements PagingParameters {\n   private static final String PARAMETER_PAGE_TOKEN = \"page_token\";\n   private static final String PARAMETER_NEXT_PAGE_TOKEN = \"next_page_token\";\n-  private static final String PARAMETER_MAX_RESULTS = \"page_size\";\n+  private static final String PARAMETER_PAGE_SIZE = \"page_size\";\n+  private static final String PARAMETER_MAX_RESULTS = \"max_results\";\n \n   private static final ImmutableList<String> IGNORED_PARAMETERS =\n-      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_MAX_RESULTS);\n+      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_PAGE_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzU1Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MDQ1MQ==", "bodyText": "It is dead code but it may be still used in discogapic (i'm not sure if it is, but discogapic depends on gapic yaml generation). I did not want to touch that if not necessary. Discogapic is essentially dead code at this point.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r511150451", "createdAt": "2020-10-23T20:53:25Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/configgen/ProtoPagingParameters.java", "diffHunk": "@@ -21,10 +21,11 @@\n public class ProtoPagingParameters implements PagingParameters {\n   private static final String PARAMETER_PAGE_TOKEN = \"page_token\";\n   private static final String PARAMETER_NEXT_PAGE_TOKEN = \"next_page_token\";\n-  private static final String PARAMETER_MAX_RESULTS = \"page_size\";\n+  private static final String PARAMETER_PAGE_SIZE = \"page_size\";\n+  private static final String PARAMETER_MAX_RESULTS = \"max_results\";\n \n   private static final ImmutableList<String> IGNORED_PARAMETERS =\n-      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_MAX_RESULTS);\n+      ImmutableList.of(PARAMETER_PAGE_TOKEN, PARAMETER_PAGE_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzU1Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjUyNzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowODo1OFrOHhfE9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1MzowMVrOHmTB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3NDIzMQ==", "bodyText": "The structure in the previous file led me to conclude that isMap \u21d2 isRepeated. Is that true (making the last condition redundant)?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504874231", "createdAt": "2020-10-14T18:08:58Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "diffHunk": "@@ -146,6 +146,9 @@ private TypeName getTypeNameForElementType(TypeRef type, boolean shouldBoxPrimit\n     }\n     switch (type.getKind()) {\n       case TYPE_MESSAGE:\n+        if (type.isMap() && type.isMessage() && type.isRepeated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxOTA3NQ==", "bodyText": "Probably, but I was not sure, so made it as rigorous as possible.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r508819075", "createdAt": "2020-10-20T20:29:56Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "diffHunk": "@@ -146,6 +146,9 @@ private TypeName getTypeNameForElementType(TypeRef type, boolean shouldBoxPrimit\n     }\n     switch (type.getKind()) {\n       case TYPE_MESSAGE:\n+        if (type.isMap() && type.isMessage() && type.isRepeated()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3NDIzMQ=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxOTcyMQ==", "bodyText": "I confirmed by checking the implementation of the isMessage() and isRepeated() and isMap() method that if isMap() is true than the other two are guaranteed to be true as well. Removed the other method calls since they are redundant.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r509919721", "createdAt": "2020-10-22T06:53:01Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaModelTypeNameConverter.java", "diffHunk": "@@ -146,6 +146,9 @@ private TypeName getTypeNameForElementType(TypeRef type, boolean shouldBoxPrimit\n     }\n     switch (type.getKind()) {\n       case TYPE_MESSAGE:\n+        if (type.isMap() && type.isMessage() && type.isRepeated()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3NDIzMQ=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjUzMDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowOTo0MlrOHhfGsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODowOTo0MlrOHhfGsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3NDY3Mg==", "bodyText": "Love this! Much clearer ;-)\nYou can remove the comment in the previous line now, because the code is self-explanatory now (and the comment is now confusing).", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504874672", "createdAt": "2020-10-14T18:09:42Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -933,7 +933,7 @@ private void addRpcStubImports(InterfaceContext context) {\n         typeTable.saveNicknameFor(\"com.google.api.pathtemplate.PathTemplate\");\n         String configSchemaVersion = context.getProductConfig().getConfigSchemaVersion();\n         // Discogapic always uses gapic yaml of version 1.0\n-        if (configSchemaVersion != null && configSchemaVersion.startsWith(\"1.\")) {\n+        if (context.getProductConfig().isDiscogapic()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjYxNzEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODozMjoxN1rOHhf8GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1NDozNVrOHmTEuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4ODM0NA==", "bodyText": "For consistency and easy, could you move this message below ListShelvesResponse, so that ListShelves{Request,Response} are adjacent, and AggregatedListShelves{Request,Response} are adjacent?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504888344", "createdAt": "2020-10-14T18:32:17Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -669,6 +675,15 @@ message ListShelvesRequest {\n   // not be treated as a paged method unless there is a GAPIC config override.\n }\n \n+// Request message for LibraryService.ListAggregatedShelves.\n+message AggregatedListShelvesRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyMDQ0Mw==", "bodyText": "This is not as easy, because I'll have to update all the baseline files and it is pain.\n[Edit] It turned out the change of the order affected only ruby and nodejs baselines, so I moved the messages and updated the baselines.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r509920443", "createdAt": "2020-10-22T06:54:35Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -669,6 +675,15 @@ message ListShelvesRequest {\n   // not be treated as a paged method unless there is a GAPIC config override.\n }\n \n+// Request message for LibraryService.ListAggregatedShelves.\n+message AggregatedListShelvesRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4ODM0NA=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjYyMTU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODozMzoyNlrOHhf-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1NjowM1rOHmTHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4OTA1NQ==", "bodyText": "For consistency with the other message pairs, could your rename this AggregatedListShelvesResponse to match the request?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504889055", "createdAt": "2020-10-14T18:33:26Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -682,6 +697,15 @@ message ListShelvesResponse {\n   string next_page_token = 2;\n }\n \n+// Response message for LibraryService.ListAggregatedShelves.\n+message ListShelvesAggregatedResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyMTE2MA==", "bodyText": "Renamed it to match the other similar method/request/response:\n// existing sample\nrpc ListShelves(ListShelvesRequest) returns (ListShelvesResponse)\n\n// Renamed the aggregated one to\nrpc ListAggregatedShelves(ListAggregatedShelvesRequest) returns (ListAggregatedShelvesResponse)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r509921160", "createdAt": "2020-10-22T06:56:03Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -682,6 +697,15 @@ message ListShelvesResponse {\n   string next_page_token = 2;\n }\n \n+// Response message for LibraryService.ListAggregatedShelves.\n+message ListShelvesAggregatedResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4OTA1NQ=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjYyOTI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODozNTozMFrOHhgDtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODozNTozMFrOHhgDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDI5NQ==", "bodyText": "I suggest AggregatedListShelves for similarity with GCE. Or better yet, a more descriptive name, like MapPageListShelves (not that I like that particular one).\nWhatever you choose, make sure the request and response names are consistent with this (currently they're not): rpc Foo(FooRequest) returns (FooResponse)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504890295", "createdAt": "2020-10-14T18:35:30Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.\n+  rpc ListAggregatedShelves(AggregatedListShelvesRequest) returns (ListShelvesAggregatedResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjYzMjAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODozNjoxN1rOHhgFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0OToxNVrOHneC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDc0Mw==", "bodyText": "Could you add a brief comment as to why we have this since we already have ListShelves?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504890743", "createdAt": "2020-10-14T18:36:17Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MTYyNA==", "bodyText": "This is to have a paginated method with map<> resource in it. ListShelves is a regular paginated method with repeated resource in it.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510471624", "createdAt": "2020-10-22T21:34:50Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDc0Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4NTg4OQ==", "bodyText": "Could you add that to the comment?", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510485889", "createdAt": "2020-10-22T22:07:52Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDc0Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzMTkwMA==", "bodyText": "Please lets not do it. All of the comments in the proto become the generated docs in the generated clients.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510531900", "createdAt": "2020-10-23T00:28:11Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDc0Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4NzM0Ng==", "bodyText": "And the problem with that is what? More changes to the baseline files? Anything else?\nHow about if you create the comment separated from the proto by a newline? I'd be happy with that, as it would explain things for someone reading the .proto, and maybe that wouldn't change the baseline files?\n\n// ListAggregatedShelves tests paged calls that return maps of lists paged in parallel.\n\n// Lists shelves.\nrpc ListAggregatedShelves.(...) returns (...) {\n  ...\n}", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510987346", "createdAt": "2020-10-23T16:04:07Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDc0Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0ODc5OQ==", "bodyText": "Added the comment. You are right, if there is a blank line it is not recognized as the method comment.\nOn a side note this is not what is done i the rest of the library.proto. All the documentation/comments ther is API-specific, not gapic-generator specific.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r511148799", "createdAt": "2020-10-23T20:49:15Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -84,6 +84,12 @@ service LibraryService {\n     option (google.api.method_signature) = \"\";\n   }\n \n+  // Lists shelves.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5MDc0Mw=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mjc1NjA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/java_library.baseline", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToxMDowNVrOHhhQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0MDoyNVrOHlQNXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMDA3Ng==", "bodyText": "I'm a bit confused.\n\nThis looks very similar to the comment for  UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse>, which is sensible, but it does not have the  for (Shelf element : future.get().iterateAll()). Why not?\nExpanding on the above: IIUC, the AggregatedListShelvesRequest method tests the non-standard paged response, but we want that to be transparent to the user. So just like ListShelves causes listShelves() and listShelvedPagedCallable() to be generated in the client, I would expect AggregatedListShelves() and AggregatedListShelvesPageable() to be generated. We want the surface to be be what they would have if they were using standard pagination fields.\n\n(I realize GCE does not have a previous GAPIC to compare to, and that AIP-compliant APIs won't have this issue, but  we should still do this, particularly as allowing both patterns is a GAPIC feature.)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504910076", "createdAt": "2020-10-14T19:10:05Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/java_library.baseline", "diffHunk": "@@ -8608,6 +8608,62 @@ public class LibraryClient implements BackgroundResource {\n     return stub.testOptionalRequiredFlatteningParamsCallable();\n   }\n \n+  // AUTO-GENERATED DOCUMENTATION AND METHOD\n+  /**\n+   * Lists shelves.\n+   *\n+   * Sample code:\n+   * <pre><code>\n+   * try (LibraryClient libraryClient = LibraryClient.create()) {\n+   *\n+   *   ListShelvesAggregatedResponse response = libraryClient.listAggregatedShelves();\n+   * }\n+   * </code></pre>\n+   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n+   */\n+  public final ListShelvesAggregatedResponse listAggregatedShelves() {\n+    AggregatedListShelvesRequest request =\n+        AggregatedListShelvesRequest.newBuilder().build();\n+    return listAggregatedShelves(request);\n+  }\n+\n+  // AUTO-GENERATED DOCUMENTATION AND METHOD\n+  /**\n+   * Lists shelves.\n+   *\n+   * Sample code:\n+   * <pre><code>\n+   * try (LibraryClient libraryClient = LibraryClient.create()) {\n+   *   AggregatedListShelvesRequest request = AggregatedListShelvesRequest.newBuilder().build();\n+   *   ListShelvesAggregatedResponse response = libraryClient.listAggregatedShelves(request);\n+   * }\n+   * </code></pre>\n+   *\n+   * @param request The request object containing all of the parameters for the API call.\n+   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n+   */\n+  public final ListShelvesAggregatedResponse listAggregatedShelves(AggregatedListShelvesRequest request) {\n+    return listAggregatedShelvesCallable().call(request);\n+  }\n+\n+  // AUTO-GENERATED DOCUMENTATION AND METHOD\n+  /**\n+   * Lists shelves.\n+   *\n+   * Sample code:\n+   * <pre><code>\n+   * try (LibraryClient libraryClient = LibraryClient.create()) {\n+   *   AggregatedListShelvesRequest request = AggregatedListShelvesRequest.newBuilder().build();\n+   *   ApiFuture&lt;ListShelvesAggregatedResponse&gt; future = libraryClient.listAggregatedShelvesCallable().futureCall(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNDkyNA==", "bodyText": "Nothing in this file is expected to have new logic in it. It is gRPC-based GAPIC expected output, which is shielded from the new logic by line 247 in PageStreamingConfig (i.e. the same controversial check). The only reason why this file (and most of the other baseline files except java_library_no_gapic_config_http.baseline) was changed is because new messages were added in the library.proto file used for testing.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r508824924", "createdAt": "2020-10-20T20:40:25Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/java_library.baseline", "diffHunk": "@@ -8608,6 +8608,62 @@ public class LibraryClient implements BackgroundResource {\n     return stub.testOptionalRequiredFlatteningParamsCallable();\n   }\n \n+  // AUTO-GENERATED DOCUMENTATION AND METHOD\n+  /**\n+   * Lists shelves.\n+   *\n+   * Sample code:\n+   * <pre><code>\n+   * try (LibraryClient libraryClient = LibraryClient.create()) {\n+   *\n+   *   ListShelvesAggregatedResponse response = libraryClient.listAggregatedShelves();\n+   * }\n+   * </code></pre>\n+   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n+   */\n+  public final ListShelvesAggregatedResponse listAggregatedShelves() {\n+    AggregatedListShelvesRequest request =\n+        AggregatedListShelvesRequest.newBuilder().build();\n+    return listAggregatedShelves(request);\n+  }\n+\n+  // AUTO-GENERATED DOCUMENTATION AND METHOD\n+  /**\n+   * Lists shelves.\n+   *\n+   * Sample code:\n+   * <pre><code>\n+   * try (LibraryClient libraryClient = LibraryClient.create()) {\n+   *   AggregatedListShelvesRequest request = AggregatedListShelvesRequest.newBuilder().build();\n+   *   ListShelvesAggregatedResponse response = libraryClient.listAggregatedShelves(request);\n+   * }\n+   * </code></pre>\n+   *\n+   * @param request The request object containing all of the parameters for the API call.\n+   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n+   */\n+  public final ListShelvesAggregatedResponse listAggregatedShelves(AggregatedListShelvesRequest request) {\n+    return listAggregatedShelvesCallable().call(request);\n+  }\n+\n+  // AUTO-GENERATED DOCUMENTATION AND METHOD\n+  /**\n+   * Lists shelves.\n+   *\n+   * Sample code:\n+   * <pre><code>\n+   * try (LibraryClient libraryClient = LibraryClient.create()) {\n+   *   AggregatedListShelvesRequest request = AggregatedListShelvesRequest.newBuilder().build();\n+   *   ApiFuture&lt;ListShelvesAggregatedResponse&gt; future = libraryClient.listAggregatedShelvesCallable().futureCall(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMDA3Ng=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mjc3NDU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/go_library.baseline", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToxNToxMlrOHhhb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjowOTo0MVrOHm1oOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjg4NQ==", "bodyText": "I would expect that (if we were still using the monolith for Go), this would have a similar structure to func (c *LibClient) ListShelves(...){...}, dealing with NextPageToken, etc. Is that right? Is the only reason that's not the case simply that real Go generation is happening in the \u00b5generator? (That's totally fine; I just want to make sure I'm not missing anything.)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r504912885", "createdAt": "2020-10-14T19:15:12Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/go_library.baseline", "diffHunk": "@@ -2205,6 +2241,18 @@ func (s *mockLibraryServer) ListShelves(ctx context.Context, req *librarypb.List\n     return s.resps[0].(*librarypb.ListShelvesResponse), nil\n }\n \n+func (s *mockLibraryServer) ListAggregatedShelves(ctx context.Context, req *librarypb.AggregatedListShelvesRequest) (*librarypb.ListShelvesAggregatedResponse, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMjE3NA==", "bodyText": "Line 247 in PageStreamingConfig.java explicitly asks to use the new logic for Java only. It is important, because it will start breaking other languages in monolith (most importantly PHP). I.e. only java gax supports ma-typed pagination, that is why only Java gapic generation does it.", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r508822174", "createdAt": "2020-10-20T20:35:26Z", "author": {"login": "vam-google"}, "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/go_library.baseline", "diffHunk": "@@ -2205,6 +2241,18 @@ func (s *mockLibraryServer) ListShelves(ctx context.Context, req *librarypb.List\n     return s.resps[0].(*librarypb.ListShelvesResponse), nil\n }\n \n+func (s *mockLibraryServer) ListAggregatedShelves(ctx context.Context, req *librarypb.AggregatedListShelvesRequest) (*librarypb.ListShelvesAggregatedResponse, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjg4NQ=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4NjU4NQ==", "bodyText": "Ah, got it. So this is a monolith-only problem. ;-)", "url": "https://github.com/googleapis/gapic-generator/pull/3295#discussion_r510486585", "createdAt": "2020-10-22T22:09:41Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/protoannotations/testdata/go_library.baseline", "diffHunk": "@@ -2205,6 +2241,18 @@ func (s *mockLibraryServer) ListShelves(ctx context.Context, req *librarypb.List\n     return s.resps[0].(*librarypb.ListShelvesResponse), nil\n }\n \n+func (s *mockLibraryServer) ListAggregatedShelves(ctx context.Context, req *librarypb.AggregatedListShelvesRequest) (*librarypb.ListShelvesAggregatedResponse, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjg4NQ=="}, "originalCommit": {"oid": "f837a026b96f235e3de71de25e06868ef09fadc8"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3615, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}