{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODAzMzkx", "number": 3305, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo1ODozNVrOE5rHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0MzozNlrOE6MNzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTEwNjEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo1ODozNVrOH0RS4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMDo0NFrOH03FXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3MTM2MA==", "bodyText": "I would add a comment before this if block making it explicitly that we're generating GAPICs that support only one transport for now.", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r524571360", "createdAt": "2020-11-16T20:58:35Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -191,14 +195,19 @@ private ViewModel buildGapicClientViewModel(GapicInterfaceContext context) {\n     apiImplClass.clientConfigPath(namer.getClientConfigPath(context.getInterfaceConfig()));\n     apiImplClass.clientConfigName(namer.getClientConfigName(context.getInterfaceConfig()));\n     apiImplClass.interfaceKey(context.getInterface().getFullName());\n-    String grpcClientTypeName =\n-        namer.getAndSaveNicknameForGrpcClientTypeName(\n-            context.getImportTypeTable(), context.getInterfaceModel());\n-    apiImplClass.grpcClientTypeName(grpcClientTypeName);\n+    if (supportsGrpcTransport()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e0fd512c7fd5dc7649ef46360ca742e4f3d60a8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4NzQ0MQ==", "bodyText": "For PHP, this block generates a GAPIC that supports both.", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r525187441", "createdAt": "2020-11-17T14:16:43Z", "author": {"login": "bshaffer"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -191,14 +195,19 @@ private ViewModel buildGapicClientViewModel(GapicInterfaceContext context) {\n     apiImplClass.clientConfigPath(namer.getClientConfigPath(context.getInterfaceConfig()));\n     apiImplClass.clientConfigName(namer.getClientConfigName(context.getInterfaceConfig()));\n     apiImplClass.interfaceKey(context.getInterface().getFullName());\n-    String grpcClientTypeName =\n-        namer.getAndSaveNicknameForGrpcClientTypeName(\n-            context.getImportTypeTable(), context.getInterfaceModel());\n-    apiImplClass.grpcClientTypeName(grpcClientTypeName);\n+    if (supportsGrpcTransport()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3MTM2MA=="}, "originalCommit": {"oid": "9e0fd512c7fd5dc7649ef46360ca742e4f3d60a8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MDQ5NA==", "bodyText": "I've added comments to clarify, let me know if this is sufficient!", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r525190494", "createdAt": "2020-11-17T14:20:44Z", "author": {"login": "bshaffer"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -191,14 +195,19 @@ private ViewModel buildGapicClientViewModel(GapicInterfaceContext context) {\n     apiImplClass.clientConfigPath(namer.getClientConfigPath(context.getInterfaceConfig()));\n     apiImplClass.clientConfigName(namer.getClientConfigName(context.getInterfaceConfig()));\n     apiImplClass.interfaceKey(context.getInterface().getFullName());\n-    String grpcClientTypeName =\n-        namer.getAndSaveNicknameForGrpcClientTypeName(\n-            context.getImportTypeTable(), context.getInterfaceModel());\n-    apiImplClass.grpcClientTypeName(grpcClientTypeName);\n+    if (supportsGrpcTransport()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3MTM2MA=="}, "originalCommit": {"oid": "9e0fd512c7fd5dc7649ef46360ca742e4f3d60a8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTEyOTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowMjoxNVrOH0Ri9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowMjoxNVrOH0Ri9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3NTQ3Nw==", "bodyText": "tiny nit: What about: \"Streaming methods only valid for gRPC transport\"", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r524575477", "createdAt": "2020-11-16T21:02:15Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -426,6 +435,9 @@ private RestPlaceholderConfigView generateRestPlaceholderConfigView(\n     List<GrpcStreamingDetailView> result = new ArrayList<>();\n \n     for (MethodModel method : context.getGrpcStreamingMethods()) {\n+      if (!supportsGrpcTransport()) {\n+        throw new RuntimeException(\"Streaming methods invalid for REST-only transport\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e0fd512c7fd5dc7649ef46360ca742e4f3d60a8"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTE0MjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowNDoyNlrOH0RsRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMTowOFrOH03GjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3Nzg2MA==", "bodyText": "tiny nit: Does order matter here? If not, I would move this to be the least one, for readability.", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r524577860", "createdAt": "2020-11-16T21:04:26Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -453,7 +465,9 @@ private void addApiImports(GapicInterfaceContext context) {\n     typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\CredentialsWrapper\");\n     typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\GapicClientTrait\");\n     typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\PathTemplate\");\n-    typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\RequestParamsHeaderDescriptor\");\n+    if (supportsGrpcTransport()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e0fd512c7fd5dc7649ef46360ca742e4f3d60a8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MDc5Nw==", "bodyText": "I agree! Order doesn't matter! Moved for readability.", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r525190797", "createdAt": "2020-11-17T14:21:08Z", "author": {"login": "bshaffer"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -453,7 +465,9 @@ private void addApiImports(GapicInterfaceContext context) {\n     typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\CredentialsWrapper\");\n     typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\GapicClientTrait\");\n     typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\PathTemplate\");\n-    typeTable.saveNicknameFor(\"\\\\Google\\\\ApiCore\\\\RequestParamsHeaderDescriptor\");\n+    if (supportsGrpcTransport()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3Nzg2MA=="}, "originalCommit": {"oid": "9e0fd512c7fd5dc7649ef46360ca742e4f3d60a8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDUwNjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0MDowM1rOH1GW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0MDowM1rOH1GW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MDczNQ==", "bodyText": "nit: probably Collections.emptyList() is what you need here.", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r525440735", "createdAt": "2020-11-17T19:40:03Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -191,15 +195,22 @@ private ViewModel buildGapicClientViewModel(GapicInterfaceContext context) {\n     apiImplClass.clientConfigPath(namer.getClientConfigPath(context.getInterfaceConfig()));\n     apiImplClass.clientConfigName(namer.getClientConfigName(context.getInterfaceConfig()));\n     apiImplClass.interfaceKey(context.getInterface().getFullName());\n-    String grpcClientTypeName =\n-        namer.getAndSaveNicknameForGrpcClientTypeName(\n-            context.getImportTypeTable(), context.getInterfaceModel());\n-    apiImplClass.grpcClientTypeName(grpcClientTypeName);\n+    if (supportsGrpcTransport()) {\n+      // PHP generates a client that supports both gRPC and REST\n+      String grpcClientTypeName =\n+          namer.getAndSaveNicknameForGrpcClientTypeName(\n+              context.getImportTypeTable(), context.getInterfaceModel());\n+      apiImplClass.grpcClientTypeName(grpcClientTypeName);\n+\n+      apiImplClass.stubs(grpcStubTransformer.generateGrpcStubs(context));\n+    } else {\n+      // PHP generates a client that only supports REST\n+      apiImplClass.grpcClientTypeName(\"\");\n+      apiImplClass.stubs(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8daae83eec821dafb993d5793018d484f11b1156"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDUzMDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0MzozNlrOH1GnhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0MzozNlrOH1GnhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NDk5Ng==", "bodyText": "How will this behave for existing APIs? There are many APIs that PHP generates the multitransport client and those have streaming methods. I believe in that case PHP still creates a client, just the streaming methods are no-op, but the generation itself does not fail and all the non-streaming methods are present in the generated surface. Will make gapic-generator throwing exception for such APIs and failing the whole generation process as a result?\nAlso, please do not use RuntimeException directly. It is an exception designed to be a base for the other specific exceptions. Please pick something more specific (UnsupportedOperation or something like that)", "url": "https://github.com/googleapis/gapic-generator/pull/3305#discussion_r525444996", "createdAt": "2020-11-17T19:43:36Z", "author": {"login": "vam-google"}, "path": "src/main/java/com/google/api/codegen/transformer/php/PhpGapicSurfaceTransformer.java", "diffHunk": "@@ -426,6 +437,9 @@ private RestPlaceholderConfigView generateRestPlaceholderConfigView(\n     List<GrpcStreamingDetailView> result = new ArrayList<>();\n \n     for (MethodModel method : context.getGrpcStreamingMethods()) {\n+      if (!supportsGrpcTransport()) {\n+        throw new RuntimeException(\"Streaming methods only valid for gRPC transport\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8daae83eec821dafb993d5793018d484f11b1156"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3618, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}