{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjE5Mzcx", "number": 3275, "title": "feat: REST GAPIC (REGAPIC) Support for Java", "bodyText": "This PR depends on googleapis/gax-java#1177 and provides MVP for generating rest gapic clients. It was tested on real GCE API and was able to produce a valid client.", "createdAt": "2020-09-10T00:05:02Z", "url": "https://github.com/googleapis/gapic-generator/pull/3275", "merged": true, "mergeCommit": {"oid": "782d11a44761e4329349cfeba4e9d1ed494a984b"}, "closed": true, "closedAt": "2020-10-12T20:16:19Z", "author": {"login": "vam-google"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9B-6UgH2gAyNDgzMjE5MzcxOjc2NjZiZGZhMjc1ZjU3ZmRmYjU0MmFmZDBmZDQyYjY0Y2Q0NTAwYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR46H1gH2gAyNDgzMjE5MzcxOjkyMTlhY2Y2ZDZkOGU2ZDNjMTI1MjIyZThlYWQ1MDQ5NDRhMWI3ZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7666bdfa275f57fdfb542afd0fd42b64cd4500c7", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/7666bdfa275f57fdfb542afd0fd42b64cd4500c7", "committedDate": "2020-08-08T23:54:05Z", "message": "feat: Implement rest-gapic prototype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c36da5f820cae6055439eafe4c5118bd9d86a1", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/59c36da5f820cae6055439eafe4c5118bd9d86a1", "committedDate": "2020-08-08T23:54:05Z", "message": "fix: Fix DIREGAPIC path elements name format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45022ca750851ec66ad60bf2321f2d7f52642e7c", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/45022ca750851ec66ad60bf2321f2d7f52642e7c", "committedDate": "2020-08-09T06:44:38Z", "message": "fix: Add transport_protocol parameter to java assembly pkg rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b32072e58757249cadfb4bf06c801a49ecb8a33", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/7b32072e58757249cadfb4bf06c801a49ecb8a33", "committedDate": "2020-08-18T07:21:25Z", "message": "fix: Fix pathTemplate issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2b56c08699624fde004ba1b4c0a33eb9e7a7411", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/e2b56c08699624fde004ba1b4c0a33eb9e7a7411", "committedDate": "2020-09-08T22:33:44Z", "message": "Merge remote-tracking branch 'upstream/master' into rest-gapic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bae1fc2fc8d1b1e98e848dad3c74e1a390821b6", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/0bae1fc2fc8d1b1e98e848dad3c74e1a390821b6", "committedDate": "2020-09-08T23:17:58Z", "message": "fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/676b82cb22c0a81e46a4d7959bf9b1fe44aa8478", "committedDate": "2020-09-10T00:01:51Z", "message": "Add rest transport tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTgzOTA0", "url": "https://github.com/googleapis/gapic-generator/pull/3275#pullrequestreview-487183904", "createdAt": "2020-09-12T00:24:46Z", "commit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDoyNDo0NlrOHQxAkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDoyOTo0M1rOHQxDiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MjIyNg==", "bodyText": "Could we please document the valid values of transport_protocol somewhere?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r487342226", "createdAt": "2020-09-12T00:24:46Z", "author": {"login": "miraleung"}, "path": "rules_gapic/gapic.bzl", "diffHunk": "@@ -40,11 +40,13 @@ def _gapic_srcjar_impl(ctx):\n         _set_args(attr.service_yaml, \"--service_yaml=\", arguments, inputs)\n         _set_args(attr.package_yaml2, \"--package_yaml2=\", arguments, inputs)\n         _set_args(attr.grpc_service_config, \"--grpc_service_config=\", arguments, inputs)\n+        _set_args(attr.transport_protocol, \"--transport_protocol=\", arguments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MjM5OA==", "bodyText": "It looks like either HTTP or gRPC will be generated, not both. Would it make sense to make transport_protocol a boolean flag that indicates whether it's HTTP or not?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r487342398", "createdAt": "2020-09-12T00:25:36Z", "author": {"login": "miraleung"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -175,6 +176,17 @@ def java_gapic_library(\n         \"@javax_annotation_javax_annotation_api//jar\",\n     ]\n \n+    if transport_protocol == \"http\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw==", "bodyText": "Since only one of HTTP or gRPC will be generated, would it make sense to split the template into grpc_stub.snip and http_stub.snip? As a reader, I would prefer duplicate code to parsing the diffs (which is less clear without doing a deep dive).\nDitto for test.snip.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r487342987", "createdAt": "2020-09-12T00:29:43Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaGapicSurfaceTransformer.java", "diffHunk": "@@ -42,9 +43,11 @@\n   private static final String SETTINGS_TEMPLATE_FILENAME = \"java/settings.snip\";\n   private static final String STUB_SETTINGS_TEMPLATE_FILENAME = \"java/stub_settings.snip\";\n   private static final String STUB_INTERFACE_TEMPLATE_FILENAME = \"java/stub_interface.snip\";\n-  private static final String GRPC_STUB_TEMPLATE_FILENAME = \"java/grpc_stub.snip\";\n+  private static final String STUB_TEMPLATE_FILENAME = \"java/stub.snip\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63d4e38676ba8d2658b0139ce72fdc29a4bab0ba", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/63d4e38676ba8d2658b0139ce72fdc29a4bab0ba", "committedDate": "2020-09-12T06:47:55Z", "message": "Adjust to the corresponding gax-java PR feedback changes (toQueryParam -> putQueryParam, toPathParam -> putPathParam)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4eee3fe065e3940fdd30f3ccc43e062a32cf30", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/0f4eee3fe065e3940fdd30f3ccc43e062a32cf30", "committedDate": "2020-09-16T07:07:43Z", "message": "Address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/4395976346735e58cd9555fdf5962954c79ae238", "committedDate": "2020-09-17T06:06:34Z", "message": "increase test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "committedDate": "2020-09-22T21:49:34Z", "message": "Merge remote-tracking branch 'upstream/master' into rest-gapic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODQ0Nzgx", "url": "https://github.com/googleapis/gapic-generator/pull/3275#pullrequestreview-493844781", "createdAt": "2020-09-22T21:03:09Z", "commit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTowMzowOVrOHWMStw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo1MzozN1rOHWQONQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMjExOQ==", "bodyText": "How about doing these additively?\nall_transports=transport.split(\"+\") if transport else [\"grpc\",\"rest\"]  # [2]\n# [1]\nif \"rest\" in all_transports:\n  # add rest deps\nif \"grpc\" in all_transports:\n  # add grpc deps\n\nIf you don't want to support rest+grpc for now, in #[1] you can add\nall_transports = all_transports[0:1] # TODO: remove when we generate multi-transport GAPIC\n(Maybe you can factor out #[1] and #[2] into a helper function, since this conditional appears another time below.)", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493032119", "createdAt": "2020-09-22T21:03:09Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -175,6 +176,17 @@ def java_gapic_library(\n         \"@javax_annotation_javax_annotation_api//jar\",\n     ]\n \n+    if transport == \"rest\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNzU3MA==", "bodyText": "See comment above.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493037570", "createdAt": "2020-09-22T21:14:22Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -183,16 +195,24 @@ def java_gapic_library(\n     )\n \n     actual_test_deps = test_deps + [\n-        \"@com_google_api_gax_java//gax-grpc:gax_grpc_testlib\",\n         \"@com_google_api_gax_java//gax:gax_testlib\",\n         \"@com_google_code_gson_gson//jar\",\n-        \"@io_grpc_grpc_java//auth:auth\",\n-        \"@io_grpc_grpc_netty_shaded//jar\",\n-        \"@io_grpc_grpc_java//stub:stub\",\n-        \"@io_opencensus_opencensus_contrib_grpc_metrics//jar\",\n         \"@junit_junit//jar\",\n     ]\n \n+    if transport == \"rest\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTA5NA==", "bodyText": "I would use a similar construct to above to get all the transports, and then be explicit about the special casing if we're not yet generating multi-transport GAPICs.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493039094", "createdAt": "2020-09-22T21:17:25Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic_pkg.bzl", "diffHunk": "@@ -206,9 +207,14 @@ def java_gapic_assembly_gradle_pkg(\n         grpc_target_dep = [\"%s\" % grpc_target]\n \n     if client_deps:\n+        if transport == \"rest\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTMzNg==", "bodyText": "If/when we were to support multi-transport GAPICs, would the templates be additive, or would there be a third template?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493039336", "createdAt": "2020-09-22T21:17:57Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic_pkg.bzl", "diffHunk": "@@ -206,9 +207,14 @@ def java_gapic_assembly_gradle_pkg(\n         grpc_target_dep = [\"%s\" % grpc_target]\n \n     if client_deps:\n+        if transport == \"rest\":\n+            template_label = Label(\"//rules_gapic/java:resources/gradle/client_disco.gradle.tmpl\")\n+        else:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MTUyNA==", "bodyText": "I suggest removing the comment above and including the info in the description:\n\"List of transports the GAPIC should support. Valid transport names ('grpc' or 'rest') are separated by '+'. Default is 'grpc+rest'. NOTE: for now, GAPICs support only the first transport in the list.\"", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493041524", "createdAt": "2020-09-22T21:22:24Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/GeneratorMain.java", "diffHunk": "@@ -149,6 +149,14 @@\n           .argName(\"GRPC-SERVICE-CONFIG\")\n           .required(false)\n           .build();\n+  private static final Option TRANSPORT =\n+      Option.builder()\n+          .longOpt(\"transport\") // Possible values: grpc, rest or grpc+rest (not supported yet).\n+          .desc(\"Transport used by the generated clients.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDE3OA==", "bodyText": "cruft?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493044178", "createdAt": "2020-09-22T21:28:23Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -305,7 +306,7 @@ public static GapicProductConfig create(\n       return null;\n     }\n \n-    TransportProtocol transportProtocol = TransportProtocol.GRPC;\n+    // TransportProtocol transportProtocol = TransportProtocol.GRPC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDgzNA==", "bodyText": "Could you please add transportProtocol (and grpcServiceConfig) to the javadoc for this method?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493044834", "createdAt": "2020-09-22T21:29:50Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -159,7 +159,8 @@ public static GapicProductConfig create(\n       @Nullable String protoPackage,\n       @Nullable String clientPackage,\n       TargetLanguage language,\n-      @Nullable ServiceConfig grpcServiceConfig) {\n+      @Nullable ServiceConfig grpcServiceConfig,\n+      TransportProtocol transportProtocol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NjU5Mw==", "bodyText": "Let's change the description to\n\"List of transports the GAPIC can use ('rest' or 'grpc') separated by '+'. NOTE: For now we only support the first transport in the list\"\nand the default to\n\"grpc+rest\"", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493046593", "createdAt": "2020-09-22T21:33:36Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -112,6 +113,10 @@\n           \"The filepath of the JSON gRPC Service Config file.\",\n           \"\");\n \n+  public static final Option<String> TRANSPORT =\n+      ToolOptions.createOption(\n+          String.class, \"transport\", \"The generated client transport.\", \"grpc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0ODQ5MA==", "bodyText": "Let's use a construct like I suggested for the Bazel file, taking just the first element in the transport list (with a TODO that this is not the intended ultimate behavior).\nLet's also add a TODO that when we do support multiple transports, we'll have to change the code below. (If we were to do it in the monolith, what would be your approach? Having multiple productConfig or refactoring deeply so that either transport can be used from a single client? I assume from previous discussions it would be the latter....)", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493048490", "createdAt": "2020-09-22T21:37:56Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -208,6 +213,16 @@ protected void process() throws Exception {\n     }\n \n     String clientPackage = Strings.emptyToNull(options.get(CLIENT_PACKAGE));\n+    String transport = options.get(TRANSPORT).toLowerCase();\n+\n+    TransportProtocol tp;\n+    if (transport.equals(\"grpc\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjMxNg==", "bodyText": "Just to make sure I'm following along:\nthis else is what is used for REGAPIC, and the corresponding if above is what is used for DiscoGapic, which we will deprecate. Correct?  If so, it might be helpful to add a comment to the effect of \"This section is only for DiscoGapic and will be deleted once the generator stops ingesting Discovery files\"", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493052316", "createdAt": "2020-09-22T21:46:42Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/ApiCallableTransformer.java", "diffHunk": "@@ -212,39 +220,91 @@ private void setCommonApiCallableFields(\n \n   private HttpMethodView generateHttpFields(MethodContext context) {\n     if (context.getProductConfig().getTransportProtocol().equals(TransportProtocol.HTTP)) {\n-      Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n-      HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n-      httpMethodView.fullMethodName(method.id());\n-      httpMethodView.httpMethod(method.httpMethod());\n-      List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n-      List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n-      Collections.sort(pathParams);\n-      Collections.sort(queryParams);\n-      httpMethodView.pathParams(pathParams);\n-      httpMethodView.queryParams(queryParams);\n-      httpMethodView.pathTemplate(method.path());\n-\n-      // TODO(andrealin): handle multiple resource names.\n-      DiscoGapicInterfaceConfig interfaceConfig =\n-          (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n-      SingleResourceNameConfig nameConfig =\n-          interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n-      httpMethodView.resourceNameTypeName(\n-          context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n-      // Find the field with the resource name config.\n-      for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n-        if (fieldConfig.getResourceNameConfig() != null\n-            && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n-          httpMethodView.resourceNameFieldName(\n-              context\n-                  .getNamer()\n-                  .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+      if (context.getMethodModel() instanceof DiscoveryMethodModel) {\n+        Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.fullMethodName(method.id());\n+        httpMethodView.httpMethod(method.httpMethod());\n+        List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n+        List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n+        Collections.sort(pathParams);\n+        Collections.sort(queryParams);\n+        httpMethodView.pathParams(pathParams);\n+        httpMethodView.queryParams(queryParams);\n+        httpMethodView.pathTemplate(method.path());\n+\n+        // TODO(andrealin): handle multiple resource names.\n+        DiscoGapicInterfaceConfig interfaceConfig =\n+            (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n+        SingleResourceNameConfig nameConfig =\n+            interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n+        httpMethodView.resourceNameTypeName(\n+            context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n+        // Find the field with the resource name config.\n+        for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n+          if (fieldConfig.getResourceNameConfig() != null\n+              && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n+            httpMethodView.resourceNameFieldName(\n+                context\n+                    .getNamer()\n+                    .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+          }\n         }\n+        return httpMethodView.build();\n+      } else if (context.getMethodModel() instanceof ProtoMethodModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg==", "bodyText": "nit: Suggest a \\n before populateMethodSelectors to highlight the parallelism with the previous two calls.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493085662", "createdAt": "2020-09-22T23:18:05Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/ApiCallableTransformer.java", "diffHunk": "@@ -212,39 +220,91 @@ private void setCommonApiCallableFields(\n \n   private HttpMethodView generateHttpFields(MethodContext context) {\n     if (context.getProductConfig().getTransportProtocol().equals(TransportProtocol.HTTP)) {\n-      Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n-      HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n-      httpMethodView.fullMethodName(method.id());\n-      httpMethodView.httpMethod(method.httpMethod());\n-      List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n-      List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n-      Collections.sort(pathParams);\n-      Collections.sort(queryParams);\n-      httpMethodView.pathParams(pathParams);\n-      httpMethodView.queryParams(queryParams);\n-      httpMethodView.pathTemplate(method.path());\n-\n-      // TODO(andrealin): handle multiple resource names.\n-      DiscoGapicInterfaceConfig interfaceConfig =\n-          (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n-      SingleResourceNameConfig nameConfig =\n-          interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n-      httpMethodView.resourceNameTypeName(\n-          context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n-      // Find the field with the resource name config.\n-      for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n-        if (fieldConfig.getResourceNameConfig() != null\n-            && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n-          httpMethodView.resourceNameFieldName(\n-              context\n-                  .getNamer()\n-                  .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+      if (context.getMethodModel() instanceof DiscoveryMethodModel) {\n+        Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.fullMethodName(method.id());\n+        httpMethodView.httpMethod(method.httpMethod());\n+        List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n+        List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n+        Collections.sort(pathParams);\n+        Collections.sort(queryParams);\n+        httpMethodView.pathParams(pathParams);\n+        httpMethodView.queryParams(queryParams);\n+        httpMethodView.pathTemplate(method.path());\n+\n+        // TODO(andrealin): handle multiple resource names.\n+        DiscoGapicInterfaceConfig interfaceConfig =\n+            (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n+        SingleResourceNameConfig nameConfig =\n+            interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n+        httpMethodView.resourceNameTypeName(\n+            context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n+        // Find the field with the resource name config.\n+        for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n+          if (fieldConfig.getResourceNameConfig() != null\n+              && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n+            httpMethodView.resourceNameFieldName(\n+                context\n+                    .getNamer()\n+                    .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+          }\n         }\n+        return httpMethodView.build();\n+      } else if (context.getMethodModel() instanceof ProtoMethodModel) {\n+        com.google.api.tools.framework.model.Method method =\n+            ((ProtoMethodModel) context.getMethodModel()).getProtoMethod();\n+        HttpAttribute httpAttr = method.getAttribute(HttpAttribute.KEY);\n+\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.httpMethod(httpAttr.getMethodKind().toString());\n+        httpMethodView.fullMethodName(httpAttr.getRestMethod().getFullName());\n+\n+        SurfaceNamer namer = context.getNamer();\n+        httpMethodView.pathTemplate(\n+            httpAttr\n+                .getPath()\n+                .stream()\n+                .map(pathSegment -> normalizePathSegment(pathSegment.toString()))\n+                .collect(Collectors.joining(\"/\", \"/\", \"\")));\n+\n+        httpMethodView.pathParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getPathSelectors()));\n+        httpMethodView.queryParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getParamSelectors()));\n+        httpMethodView.bodySelectors(populateMethodSelectors(namer, httpAttr.getBodySelectors()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTkzOA==", "bodyText": "The deleted lines are just cleanup?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493085938", "createdAt": "2020-09-22T23:19:02Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaFeatureConfig.java", "diffHunk": "@@ -19,22 +19,26 @@\n import com.google.api.codegen.config.MethodContext;\n import com.google.api.codegen.config.ResourceNameMessageConfigs;\n import com.google.api.codegen.config.ResourceNameType;\n+import com.google.api.codegen.config.TransportProtocol;\n import com.google.api.codegen.transformer.DefaultFeatureConfig;\n import com.google.auto.value.AutoValue;\n \n @AutoValue\n public abstract class JavaFeatureConfig extends DefaultFeatureConfig {\n+  @Override\n+  public abstract boolean resourceNameTypesEnabled();\n \n   @Override\n-  public abstract boolean enableStringFormatFunctions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzIwNg==", "bodyText": "nit: This is fine, but I'd consider a look-up table here.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493087206", "createdAt": "2020-09-22T23:23:19Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -635,6 +635,15 @@ private StaticLangRpcStubView generateRpcStubClass(\n     stubClass.hasDefaultInstance(interfaceConfig.hasDefaultInstance());\n     stubClass.hasLongRunningOperations(interfaceConfig.hasLongRunningOperations());\n \n+    stubClass.transportProtocol(productConfig.getTransportProtocol());\n+    if (productConfig.getTransportProtocol() == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzY1Mg==", "bodyText": "Is this also to distinguish between DiscoGAPIC and REGAPIC? If so, add a comment to make that explicit.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493087652", "createdAt": "2020-09-22T23:24:53Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -922,8 +931,17 @@ private void addRpcStubImports(InterfaceContext context) {\n         typeTable.saveNicknameFor(\"com.google.api.client.http.HttpMethods\");\n         typeTable.saveNicknameFor(\"com.google.api.core.InternalApi\");\n         typeTable.saveNicknameFor(\"com.google.api.pathtemplate.PathTemplate\");\n-        typeTable.saveNicknameFor(\"com.google.api.gax.httpjson.ApiMessageHttpRequestFormatter\");\n-        typeTable.saveNicknameFor(\"com.google.api.gax.httpjson.ApiMessageHttpResponseParser\");\n+        String configSchemaVersion = context.getProductConfig().getConfigSchemaVersion();\n+        if (configSchemaVersion != null && configSchemaVersion.startsWith(\"1.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4OTQyMg==", "bodyText": "This is used in the templates, right? Maybe we need to translate HTTP to REST, which is what we're exposing externally....", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493089422", "createdAt": "2020-09-22T23:30:30Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/viewmodel/StaticLangRpcStubView.java", "diffHunk": "@@ -45,6 +46,19 @@\n \n   public abstract String parentName();\n \n+  public abstract TransportProtocol transportProtocol();\n+\n+  public String transportProtocolName() {\n+    if (transportProtocol() == TransportProtocol.GRPC) {\n+      return \"gRPC\";\n+    }\n+    return transportProtocol().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MDYyNQ==", "bodyText": "nit: I'd lean towards s/http/rest/ but if you think this is better for consistency with existing internal code, that's fine.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493090625", "createdAt": "2020-09-22T23:34:36Z", "author": {"login": "vchudnov-g"}, "path": "src/main/resources/com/google/api/codegen/java/stub.snip", "diffHunk": "@@ -58,6 +62,79 @@\n           .build();\n @end\n \n+@private httpMethodDescriptor(methodDescriptor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzI3Ng==", "bodyText": "Could we also add equivalent tests for HTTP?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493093276", "createdAt": "2020-09-22T23:42:33Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/gapic/GapicCodeGeneratorTest.java", "diffHunk": "@@ -64,19 +67,22 @@ public GapicCodeGeneratorTest(\n             null,\n             \"library\",\n             null,\n+            TransportProtocol.GRPC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw==", "bodyText": "can we also test for transport=rest?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493093823", "createdAt": "2020-09-22T23:44:24Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/gapic/ProtocGapicPluginGeneratorTest.java", "diffHunk": "@@ -53,7 +53,7 @@ public void testGenerator() {\n                 model.getFiles().stream().map(ProtoFile::getProto).collect(Collectors.toList()))\n             // Only the file to generate a client for (don't generate dependencies)\n             .addFileToGenerate(\"multiple_services.proto\")\n-            .setParameter(\"language=java\")\n+            .setParameter(\"language=java,transport=grpc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjUwMQ==", "bodyText": "So we're supporting both /{name=bookShelves/*} and /bookShelves/{name}? It looks from https://google.aip.dev/127 that only the former is that standard. What am I overlooking?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493096501", "createdAt": "2020-09-22T23:53:37Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -86,7 +86,7 @@ service LibraryService {\n \n   // Deletes a shelf.\n   rpc DeleteShelf(DeleteShelfRequest) returns (google.protobuf.Empty) {\n-    option (google.api.http) = { delete: \"/v1/{name=bookShelves/*}\" };\n+    option (google.api.http) = { delete: \"/v1/bookShelves/{name}\" };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60456126af698742039eb57416de3d0383a12835", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/60456126af698742039eb57416de3d0383a12835", "committedDate": "2020-09-23T07:50:44Z", "message": "Address PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDI3NTkw", "url": "https://github.com/googleapis/gapic-generator/pull/3275#pullrequestreview-496027590", "createdAt": "2020-09-25T00:06:20Z", "commit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDowNjoyMFrOHXwmJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDowODo1NVrOHXwpGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NTQ5NA==", "bodyText": "+1 to backwards-compatibility.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r494675494", "createdAt": "2020-09-25T00:06:20Z", "author": {"login": "miraleung"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -175,6 +176,17 @@ def java_gapic_library(\n         \"@javax_annotation_javax_annotation_api//jar\",\n     ]\n \n+    if transport == \"rest\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMjExOQ=="}, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjA1Mw==", "bodyText": "Should this just be \"Transport to use\" since it's not a List option?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r494676053", "createdAt": "2020-09-25T00:08:04Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -112,6 +113,14 @@\n           \"The filepath of the JSON gRPC Service Config file.\",\n           \"\");\n \n+  public static final Option<String> TRANSPORT =\n+      ToolOptions.createOption(\n+          String.class,\n+          \"transport\",\n+          \"List of transports to use ('rest' or 'grpc') separated by '+'. NOTE: For now\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjI1MA==", "bodyText": "SGTM.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r494676250", "createdAt": "2020-09-25T00:08:55Z", "author": {"login": "miraleung"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaGapicSurfaceTransformer.java", "diffHunk": "@@ -42,9 +43,11 @@\n   private static final String SETTINGS_TEMPLATE_FILENAME = \"java/settings.snip\";\n   private static final String STUB_SETTINGS_TEMPLATE_FILENAME = \"java/stub_settings.snip\";\n   private static final String STUB_INTERFACE_TEMPLATE_FILENAME = \"java/stub_interface.snip\";\n-  private static final String GRPC_STUB_TEMPLATE_FILENAME = \"java/grpc_stub.snip\";\n+  private static final String STUB_TEMPLATE_FILENAME = \"java/stub.snip\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw=="}, "originalCommit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODA0Njcz", "url": "https://github.com/googleapis/gapic-generator/pull/3275#pullrequestreview-497804673", "createdAt": "2020-09-28T18:48:38Z", "commit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0ODozOFrOHZLTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTozMjo1M1rOHZMtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MTY0MQ==", "bodyText": "The code I suggest above is backwards-compatible (if you include the line I suggest for #[1]). It does everything your existing code does, but makes it clear that the intent is to support both protocols eventually. The line I suggest for #[1] above makes it clear that dual protocols are not supported yet (and as you say, may never be in the monolith).\nI strongly urge you to consider this because it's only a hair less simple than what you have now and it makes the project intention very clear by putting in the structure that we would have in a full implementation. In my experience, this is a good principle because of that clarity and because it diminishes the technical debt should, say, the monolith be in use longer than we're planning now.\n(I'm not going to block on this, but do consider it)", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496161641", "createdAt": "2020-09-28T18:48:38Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -175,6 +176,17 @@ def java_gapic_library(\n         \"@javax_annotation_javax_annotation_api//jar\",\n     ]\n \n+    if transport == \"rest\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMjExOQ=="}, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MjgyMg==", "bodyText": "I fully agree with YAGNI, but I think the structure I propose is only a hair less simple and makes this part just work, increasing clarity.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496162822", "createdAt": "2020-09-28T18:50:46Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -183,16 +195,24 @@ def java_gapic_library(\n     )\n \n     actual_test_deps = test_deps + [\n-        \"@com_google_api_gax_java//gax-grpc:gax_grpc_testlib\",\n         \"@com_google_api_gax_java//gax:gax_testlib\",\n         \"@com_google_code_gson_gson//jar\",\n-        \"@io_grpc_grpc_java//auth:auth\",\n-        \"@io_grpc_grpc_netty_shaded//jar\",\n-        \"@io_grpc_grpc_java//stub:stub\",\n-        \"@io_opencensus_opencensus_contrib_grpc_metrics//jar\",\n         \"@junit_junit//jar\",\n     ]\n \n+    if transport == \"rest\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNzU3MA=="}, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NDE3OA==", "bodyText": "I was aiming to have the interface (the rules) have the desired surface, and then provide stubs for what is not implemented (ie dual transport fails for now)", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496164178", "createdAt": "2020-09-28T18:53:20Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic_pkg.bzl", "diffHunk": "@@ -206,9 +207,14 @@ def java_gapic_assembly_gradle_pkg(\n         grpc_target_dep = [\"%s\" % grpc_target]\n \n     if client_deps:\n+        if transport == \"rest\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTA5NA=="}, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NDg1Ng==", "bodyText": "But you can list more than one, separated by \"+\". It's a string representation of a +-separated list.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496164856", "createdAt": "2020-09-28T18:54:34Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -112,6 +113,14 @@\n           \"The filepath of the JSON gRPC Service Config file.\",\n           \"\");\n \n+  public static final Option<String> TRANSPORT =\n+      ToolOptions.createOption(\n+          String.class,\n+          \"transport\",\n+          \"List of transports to use ('rest' or 'grpc') separated by '+'. NOTE: For now\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjA1Mw=="}, "originalCommit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NjY3OQ==", "bodyText": "OK. My own preference, as I said above, is to have the right outer structure and just stubs for the unimplemented parts (ie multi-transport). It's just as simple and clearer. But I feel more strongly about it in the outermost surface (Bazel) than in the generator.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496166679", "createdAt": "2020-09-28T18:57:54Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -208,6 +213,16 @@ protected void process() throws Exception {\n     }\n \n     String clientPackage = Strings.emptyToNull(options.get(CLIENT_PACKAGE));\n+    String transport = options.get(TRANSPORT).toLowerCase();\n+\n+    TransportProtocol tp;\n+    if (transport.equals(\"grpc\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0ODQ5MA=="}, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2Nzg4MQ==", "bodyText": "Don't see it. I think maybe you added the \\n in the previous line rather than just inside the outer parenthesis?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496167881", "createdAt": "2020-09-28T19:00:09Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/ApiCallableTransformer.java", "diffHunk": "@@ -212,39 +220,91 @@ private void setCommonApiCallableFields(\n \n   private HttpMethodView generateHttpFields(MethodContext context) {\n     if (context.getProductConfig().getTransportProtocol().equals(TransportProtocol.HTTP)) {\n-      Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n-      HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n-      httpMethodView.fullMethodName(method.id());\n-      httpMethodView.httpMethod(method.httpMethod());\n-      List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n-      List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n-      Collections.sort(pathParams);\n-      Collections.sort(queryParams);\n-      httpMethodView.pathParams(pathParams);\n-      httpMethodView.queryParams(queryParams);\n-      httpMethodView.pathTemplate(method.path());\n-\n-      // TODO(andrealin): handle multiple resource names.\n-      DiscoGapicInterfaceConfig interfaceConfig =\n-          (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n-      SingleResourceNameConfig nameConfig =\n-          interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n-      httpMethodView.resourceNameTypeName(\n-          context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n-      // Find the field with the resource name config.\n-      for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n-        if (fieldConfig.getResourceNameConfig() != null\n-            && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n-          httpMethodView.resourceNameFieldName(\n-              context\n-                  .getNamer()\n-                  .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+      if (context.getMethodModel() instanceof DiscoveryMethodModel) {\n+        Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.fullMethodName(method.id());\n+        httpMethodView.httpMethod(method.httpMethod());\n+        List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n+        List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n+        Collections.sort(pathParams);\n+        Collections.sort(queryParams);\n+        httpMethodView.pathParams(pathParams);\n+        httpMethodView.queryParams(queryParams);\n+        httpMethodView.pathTemplate(method.path());\n+\n+        // TODO(andrealin): handle multiple resource names.\n+        DiscoGapicInterfaceConfig interfaceConfig =\n+            (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n+        SingleResourceNameConfig nameConfig =\n+            interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n+        httpMethodView.resourceNameTypeName(\n+            context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n+        // Find the field with the resource name config.\n+        for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n+          if (fieldConfig.getResourceNameConfig() != null\n+              && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n+            httpMethodView.resourceNameFieldName(\n+                context\n+                    .getNamer()\n+                    .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+          }\n         }\n+        return httpMethodView.build();\n+      } else if (context.getMethodModel() instanceof ProtoMethodModel) {\n+        com.google.api.tools.framework.model.Method method =\n+            ((ProtoMethodModel) context.getMethodModel()).getProtoMethod();\n+        HttpAttribute httpAttr = method.getAttribute(HttpAttribute.KEY);\n+\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.httpMethod(httpAttr.getMethodKind().toString());\n+        httpMethodView.fullMethodName(httpAttr.getRestMethod().getFullName());\n+\n+        SurfaceNamer namer = context.getNamer();\n+        httpMethodView.pathTemplate(\n+            httpAttr\n+                .getPath()\n+                .stream()\n+                .map(pathSegment -> normalizePathSegment(pathSegment.toString()))\n+                .collect(Collectors.joining(\"/\", \"/\", \"\")));\n+\n+        httpMethodView.pathParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getPathSelectors()));\n+        httpMethodView.queryParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getParamSelectors()));\n+        httpMethodView.bodySelectors(populateMethodSelectors(namer, httpAttr.getBodySelectors()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2ODQ4Ng==", "bodyText": "oops. I missed that!", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496168486", "createdAt": "2020-09-28T19:01:16Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaFeatureConfig.java", "diffHunk": "@@ -19,22 +19,26 @@\n import com.google.api.codegen.config.MethodContext;\n import com.google.api.codegen.config.ResourceNameMessageConfigs;\n import com.google.api.codegen.config.ResourceNameType;\n+import com.google.api.codegen.config.TransportProtocol;\n import com.google.api.codegen.transformer.DefaultFeatureConfig;\n import com.google.auto.value.AutoValue;\n \n @AutoValue\n public abstract class JavaFeatureConfig extends DefaultFeatureConfig {\n+  @Override\n+  public abstract boolean resourceNameTypesEnabled();\n \n   @Override\n-  public abstract boolean enableStringFormatFunctions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTkzOA=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2ODg1MQ==", "bodyText": "+1", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496168851", "createdAt": "2020-09-28T19:01:57Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaGapicSurfaceTransformer.java", "diffHunk": "@@ -42,9 +43,11 @@\n   private static final String SETTINGS_TEMPLATE_FILENAME = \"java/settings.snip\";\n   private static final String STUB_SETTINGS_TEMPLATE_FILENAME = \"java/stub_settings.snip\";\n   private static final String STUB_INTERFACE_TEMPLATE_FILENAME = \"java/stub_interface.snip\";\n-  private static final String GRPC_STUB_TEMPLATE_FILENAME = \"java/grpc_stub.snip\";\n+  private static final String STUB_TEMPLATE_FILENAME = \"java/stub.snip\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw=="}, "originalCommit": {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2ODk5OA==", "bodyText": "sgtm", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496168998", "createdAt": "2020-09-28T19:02:16Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -635,6 +635,15 @@ private StaticLangRpcStubView generateRpcStubClass(\n     stubClass.hasDefaultInstance(interfaceConfig.hasDefaultInstance());\n     stubClass.hasLongRunningOperations(interfaceConfig.hasLongRunningOperations());\n \n+    stubClass.transportProtocol(productConfig.getTransportProtocol());\n+    if (productConfig.getTransportProtocol() == TransportProtocol.HTTP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzIwNg=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2OTkyNA==", "bodyText": "Yeah. The comment is very helpful! (As in the other file where you also added it.) Thanks!", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496169924", "createdAt": "2020-09-28T19:04:05Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -922,8 +931,17 @@ private void addRpcStubImports(InterfaceContext context) {\n         typeTable.saveNicknameFor(\"com.google.api.client.http.HttpMethods\");\n         typeTable.saveNicknameFor(\"com.google.api.core.InternalApi\");\n         typeTable.saveNicknameFor(\"com.google.api.pathtemplate.PathTemplate\");\n-        typeTable.saveNicknameFor(\"com.google.api.gax.httpjson.ApiMessageHttpRequestFormatter\");\n-        typeTable.saveNicknameFor(\"com.google.api.gax.httpjson.ApiMessageHttpResponseParser\");\n+        String configSchemaVersion = context.getProductConfig().getConfigSchemaVersion();\n+        if (configSchemaVersion != null && configSchemaVersion.startsWith(\"1.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzY1Mg=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MTI3OA==", "bodyText": "ok", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496171278", "createdAt": "2020-09-28T19:06:42Z", "author": {"login": "vchudnov-g"}, "path": "src/main/resources/com/google/api/codegen/java/stub.snip", "diffHunk": "@@ -58,6 +62,79 @@\n           .build();\n @end\n \n+@private httpMethodDescriptor(methodDescriptor)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MDYyNQ=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzYwMw==", "bodyText": "But we are providing the functionality in the generator, even if we ourselves don't use it, so it should be tested. Line 76 tests the failing case.\nAll that said, it's only worth doing if it exercises additional code. I think this will test that the high-level transport selection doesn't error out, right? So it might be worth including. Can you simply copy this existing test case and change the transport (and maybe check for the presence of a REST-specific string, if that's simple).", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496177603", "createdAt": "2020-09-28T19:19:13Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/gapic/ProtocGapicPluginGeneratorTest.java", "diffHunk": "@@ -53,7 +53,7 @@ public void testGenerator() {\n                 model.getFiles().stream().map(ProtoFile::getProto).collect(Collectors.toList()))\n             // Only the file to generate a client for (don't generate dependencies)\n             .addFileToGenerate(\"multiple_services.proto\")\n-            .setParameter(\"language=java\")\n+            .setParameter(\"language=java,transport=grpc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MDg4MQ==", "bodyText": "But if it's not in the AIP, we want to NOT support it. We don't want people annotating their gRPC APIs incorrectly, so we need to fail when they do. If the unapproved pattern is something that the converter is outputting into the synthetic protos, let's fix that. At the very least, could you file a bug in the converter repo and one in this repo, and add a TODO here to restrict to the supported pattern?", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496180881", "createdAt": "2020-09-28T19:25:31Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -86,7 +86,7 @@ service LibraryService {\n \n   // Deletes a shelf.\n   rpc DeleteShelf(DeleteShelfRequest) returns (google.protobuf.Empty) {\n-    option (google.api.http) = { delete: \"/v1/{name=bookShelves/*}\" };\n+    option (google.api.http) = { delete: \"/v1/bookShelves/{name}\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjUwMQ=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NDc1MA==", "bodyText": "This comment as phrased makes sense with the code changes I suggested in the last pass, where (a) the default list is grpc+rest and (b) because we're not yet implementing dual transport, we then look at only the first element in the list as per my #[1] comment: all_transports = all_transports[0:1]", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496184750", "createdAt": "2020-09-28T19:32:53Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/GeneratorMain.java", "diffHunk": "@@ -149,6 +149,17 @@\n           .argName(\"GRPC-SERVICE-CONFIG\")\n           .required(false)\n           .build();\n+  private static final Option TRANSPORT =\n+      Option.builder()\n+          .longOpt(\"transport\")\n+          .desc(\n+              \"List of transports to support. Valid transport names ('grpc' or 'rest') are\"\n+                  + \" separated by '+'. Default is 'grpc'. NOTE: for now, GAPICs support only\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzc0MjY1", "url": "https://github.com/googleapis/gapic-generator/pull/3275#pullrequestreview-503374265", "createdAt": "2020-10-06T21:31:26Z", "commit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTozMToyNlrOHdasVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTo0ODo0NlrOHdbKJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwODA4Nw==", "bodyText": "It's a very simple change that increases clarity, IMO. My preference would be to add it. But as I said, I'm not going to block on this.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500608087", "createdAt": "2020-10-06T21:31:26Z", "author": {"login": "vchudnov-g"}, "path": "rules_gapic/java/java_gapic.bzl", "diffHunk": "@@ -175,6 +176,17 @@ def java_gapic_library(\n         \"@javax_annotation_javax_annotation_api//jar\",\n     ]\n \n+    if transport == \"rest\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMjExOQ=="}, "originalCommit": {"oid": "4395976346735e58cd9555fdf5962954c79ae238"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwODk1NQ==", "bodyText": "Please update the comment if you're not handling the list option: you're not handling the \"+\" separated list unless you make changes like the ones I suggested,.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500608955", "createdAt": "2020-10-06T21:33:21Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/GeneratorMain.java", "diffHunk": "@@ -149,6 +149,17 @@\n           .argName(\"GRPC-SERVICE-CONFIG\")\n           .required(false)\n           .build();\n+  private static final Option TRANSPORT =\n+      Option.builder()\n+          .longOpt(\"transport\")\n+          .desc(\n+              \"List of transports to support. Valid transport names ('grpc' or 'rest') are\"\n+                  + \" separated by '+'. Default is 'grpc'. NOTE: for now, GAPICs support only\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NDc1MA=="}, "originalCommit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwOTI4NA==", "bodyText": "Again, change the NOTE to be accurate: for now, we only support a single transport.", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500609284", "createdAt": "2020-10-06T21:34:08Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -112,6 +113,14 @@\n           \"The filepath of the JSON gRPC Service Config file.\",\n           \"\");\n \n+  public static final Option<String> TRANSPORT =\n+      ToolOptions.createOption(\n+          String.class,\n+          \"transport\",\n+          \"List of transports to use ('rest' or 'grpc') separated by '+'. NOTE: For now\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjA1Mw=="}, "originalCommit": {"oid": "60456126af698742039eb57416de3d0383a12835"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwOTc0MQ==", "bodyText": "ping", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500609741", "createdAt": "2020-10-06T21:35:05Z", "author": {"login": "vchudnov-g"}, "path": "src/main/java/com/google/api/codegen/transformer/ApiCallableTransformer.java", "diffHunk": "@@ -212,39 +220,91 @@ private void setCommonApiCallableFields(\n \n   private HttpMethodView generateHttpFields(MethodContext context) {\n     if (context.getProductConfig().getTransportProtocol().equals(TransportProtocol.HTTP)) {\n-      Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n-      HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n-      httpMethodView.fullMethodName(method.id());\n-      httpMethodView.httpMethod(method.httpMethod());\n-      List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n-      List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n-      Collections.sort(pathParams);\n-      Collections.sort(queryParams);\n-      httpMethodView.pathParams(pathParams);\n-      httpMethodView.queryParams(queryParams);\n-      httpMethodView.pathTemplate(method.path());\n-\n-      // TODO(andrealin): handle multiple resource names.\n-      DiscoGapicInterfaceConfig interfaceConfig =\n-          (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n-      SingleResourceNameConfig nameConfig =\n-          interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n-      httpMethodView.resourceNameTypeName(\n-          context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n-      // Find the field with the resource name config.\n-      for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n-        if (fieldConfig.getResourceNameConfig() != null\n-            && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n-          httpMethodView.resourceNameFieldName(\n-              context\n-                  .getNamer()\n-                  .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+      if (context.getMethodModel() instanceof DiscoveryMethodModel) {\n+        Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.fullMethodName(method.id());\n+        httpMethodView.httpMethod(method.httpMethod());\n+        List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n+        List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n+        Collections.sort(pathParams);\n+        Collections.sort(queryParams);\n+        httpMethodView.pathParams(pathParams);\n+        httpMethodView.queryParams(queryParams);\n+        httpMethodView.pathTemplate(method.path());\n+\n+        // TODO(andrealin): handle multiple resource names.\n+        DiscoGapicInterfaceConfig interfaceConfig =\n+            (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n+        SingleResourceNameConfig nameConfig =\n+            interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n+        httpMethodView.resourceNameTypeName(\n+            context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n+        // Find the field with the resource name config.\n+        for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n+          if (fieldConfig.getResourceNameConfig() != null\n+              && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n+            httpMethodView.resourceNameFieldName(\n+                context\n+                    .getNamer()\n+                    .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+          }\n         }\n+        return httpMethodView.build();\n+      } else if (context.getMethodModel() instanceof ProtoMethodModel) {\n+        com.google.api.tools.framework.model.Method method =\n+            ((ProtoMethodModel) context.getMethodModel()).getProtoMethod();\n+        HttpAttribute httpAttr = method.getAttribute(HttpAttribute.KEY);\n+\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.httpMethod(httpAttr.getMethodKind().toString());\n+        httpMethodView.fullMethodName(httpAttr.getRestMethod().getFullName());\n+\n+        SurfaceNamer namer = context.getNamer();\n+        httpMethodView.pathTemplate(\n+            httpAttr\n+                .getPath()\n+                .stream()\n+                .map(pathSegment -> normalizePathSegment(pathSegment.toString()))\n+                .collect(Collectors.joining(\"/\", \"/\", \"\")));\n+\n+        httpMethodView.pathParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getPathSelectors()));\n+        httpMethodView.queryParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getParamSelectors()));\n+        httpMethodView.bodySelectors(populateMethodSelectors(namer, httpAttr.getBodySelectors()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxMDQ3Mg==", "bodyText": "ping", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500610472", "createdAt": "2020-10-06T21:36:42Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/gapic/ProtocGapicPluginGeneratorTest.java", "diffHunk": "@@ -53,7 +53,7 @@ public void testGenerator() {\n                 model.getFiles().stream().map(ProtoFile::getProto).collect(Collectors.toList()))\n             // Only the file to generate a client for (don't generate dependencies)\n             .addFileToGenerate(\"multiple_services.proto\")\n-            .setParameter(\"language=java\")\n+            .setParameter(\"language=java,transport=grpc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNTcxOQ==", "bodyText": "Short version: OK, but add a note.\nLong version:\nIn our discussion today we said that the HTTP annotation is independent of resource name formatting. It just says how to substitute the fields into an HTTP pattern, not how that pattern should look like,\nI think that's wrong, though: from the AIP:\nURIs must use the {foo=bar/*} syntax to represent a variable that should be populated in the request proto. When extracting a resource name, the variable must include the entire resource name, not just the ID component.\n\nThat said: it's OK for the monolith to accept this input for now. I don't think microgenerators should. I would put a TODO here noting that this is non-standard, even though we won't fix it in the monolith\n(And the converter emits protos in the correct format, right?)", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500615719", "createdAt": "2020-10-06T21:48:46Z", "author": {"login": "vchudnov-g"}, "path": "src/test/java/com/google/api/codegen/testsrc/protoannotations/library.proto", "diffHunk": "@@ -86,7 +86,7 @@ service LibraryService {\n \n   // Deletes a shelf.\n   rpc DeleteShelf(DeleteShelfRequest) returns (google.protobuf.Empty) {\n-    option (google.api.http) = { delete: \"/v1/{name=bookShelves/*}\" };\n+    option (google.api.http) = { delete: \"/v1/bookShelves/{name}\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjUwMQ=="}, "originalCommit": {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9219acf6d6d8e6d3c125222e8ead504944a1b7d6", "author": {"user": {"login": "vam-google", "name": "Vadym Matsishevskyi"}}, "url": "https://github.com/googleapis/gapic-generator/commit/9219acf6d6d8e6d3c125222e8ead504944a1b7d6", "committedDate": "2020-10-12T19:12:07Z", "message": "Merge remote-tracking branch 'upstream/master' into rest-gapic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1350, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}