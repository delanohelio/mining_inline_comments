{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NjI2MzU2", "number": 3237, "title": "feat: preserve some values when regenerating BUILD.bazel", "bodyText": "In this (surprisingly large) PR I'm adding some code to preserve values of some manually edited attributes in the generated BUILD.bazel files.\nThe initial generation of build files is not changed, but if a file exists, I use buildozer (which is an official tool for manipulating BUILD.bazel files and has a proper syntax parser inside) and save the values we want to preserve. When the file is regenerated, I use buildozer again to set those preserved values.\nList of preserved values:\n\nname of all the *_gapic_assembly_pkg rules (which is useful for non-cloud library owners who want to remove cloud from the rule name; also, this is the only user-facing rules so making it possible to change their names make sense;\nthe following parameters of all the *_gapic_library rules:\n\nextra_protoc_parameters\nextra_protoc_file_parameters\npackage_name\nmain_service\nbundle_config\niam_service\n(the last four make sense for TypeScript; other languages can add their parameters-to-be-preserved to the list)\n\n\n\nNow this all looks wonderful, until we realize that buildozer is written in Go and does not have any API other than its CLI, so to make it all bazel friendly, apparently the only way is to include the buildozer binary dependency to the .jar as a resource. This indeed makes .jar non-portable (because it would build buildozer for the current platform only), but since we only use this build file generator as bazel run, it should be fine. If you bazel run on Linux, your .jar will contain a Linux buildozer binary; if you're on Mac, it will be a Mac binary; if you're on Windows, it's very unlikely it will work at all but who cares.\nbuildozer, which is a Go dependency, is now a data dependency of the java_binary task.\nThis is my second Java PR in a few years, I have no idea how to write Java code properly, so please forgive me :)", "createdAt": "2020-06-18T16:51:42Z", "url": "https://github.com/googleapis/gapic-generator/pull/3237", "merged": true, "mergeCommit": {"oid": "ba34baefc8ce09ac5e1b1bf454b928e63b144dd9"}, "closed": true, "closedAt": "2020-06-24T00:33:04Z", "author": {"login": "alexander-fenster"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcshH43AH2gAyNDM2NjI2MzU2OjQ1YWZhNGVhNTI0ZGI1NzE2ZDA0OTgzNTIyMGNiNDEwMDMxZjUzNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuOt2agH2gAyNDM2NjI2MzU2OjJiYzExOGQwOTFiMjUyYWU4Y2IzOGI2NmMyYTE2MWNjYmU1M2E0ZGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45afa4ea524db5716d049835220cb410031f536f", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/45afa4ea524db5716d049835220cb410031f536f", "committedDate": "2020-06-18T16:34:14Z", "message": "feat: preserve some values when regenerating BUILD.bazel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTAyOTky", "url": "https://github.com/googleapis/gapic-generator/pull/3237#pullrequestreview-433502992", "createdAt": "2020-06-18T17:33:35Z", "commit": {"oid": "45afa4ea524db5716d049835220cb410031f536f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMzozNVrOGl5c0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1MDo0OVrOGl6BWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTc2MA==", "bodyText": "Can we use v0.23.3 instead?\nIn v0.23.x there were many changes for Go protobuf stuff and while we are overriding it in googleapis/WORKSPACE, its probably better to reduce the possibility of an accidental implicit change.", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442391760", "createdAt": "2020-06-18T17:33:35Z", "author": {"login": "noahdietz"}, "path": "repositories.bzl", "diffHunk": "@@ -100,6 +100,26 @@ def com_google_api_codegen_repositories():\n         actual = \"@error_prone_annotations_maven//jar\",\n     )\n \n+    ## Dependencies for buildozer\n+    _maybe(\n+        http_archive,\n+        name = \"io_bazel_rules_go\",\n+        sha256 = \"b27e55d2dcc9e6020e17614ae6e0374818a3e3ce6f2024036e688ada24110444\",\n+        urls = [\n+            \"https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.21.0/rules_go-v0.21.0.tar.gz\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45afa4ea524db5716d049835220cb410031f536f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NDA3NQ==", "bodyText": "I don't think this will match the java_gapic_assembly_gradle_pkg (example). Maybe kind.contains(\"_gapic_assembly_\") instead?", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442394075", "createdAt": "2020-06-18T17:37:56Z", "author": {"login": "noahdietz"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -285,6 +320,49 @@ void parseJsonFile(String fileName, String fileBody) {\n     }\n   }\n \n+  void parseBazelBuildFile(Path file) {\n+    try {\n+      Buildozer buildozer = Buildozer.getInstance();\n+\n+      // We cannot and we do not want to preserve all the content of the file.\n+      // We will let the user edit just the following:\n+      // - names of the final targets (*_gapic_assembly_pkg) because they are user-facing;\n+      // - extra protoc plugin parameters for *_gapic_library rules.\n+      List<String> allRules = buildozer.execute(file, \"print kind name\", \":*\");\n+      for (String rule : allRules) {\n+        String[] split = rule.split(\" \");\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        String kind = split[0];\n+        String name = split[1];\n+        if (kind.endsWith(\"_gapic_assembly_pkg\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45afa4ea524db5716d049835220cb410031f536f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NzE4MQ==", "bodyText": "Does this work with multi-line lists? i.e.\ndeps = [\n  \"foo\",\n  \"bar\",\n  \"baz\",\n],\n\nI wonder if the representation buildozer supplies the code is stripped of such whitespace/formatting.", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442397181", "createdAt": "2020-06-18T17:43:54Z", "author": {"login": "noahdietz"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -285,6 +320,49 @@ void parseJsonFile(String fileName, String fileBody) {\n     }\n   }\n \n+  void parseBazelBuildFile(Path file) {\n+    try {\n+      Buildozer buildozer = Buildozer.getInstance();\n+\n+      // We cannot and we do not want to preserve all the content of the file.\n+      // We will let the user edit just the following:\n+      // - names of the final targets (*_gapic_assembly_pkg) because they are user-facing;\n+      // - extra protoc plugin parameters for *_gapic_library rules.\n+      List<String> allRules = buildozer.execute(file, \"print kind name\", \":*\");\n+      for (String rule : allRules) {\n+        String[] split = rule.split(\" \");\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        String kind = split[0];\n+        String name = split[1];\n+        if (kind.endsWith(\"_gapic_assembly_pkg\")) {\n+          this.assemblyPkgRulesNames.put(kind, name);\n+        } else if (kind.endsWith(\"_gapic_library\")) {\n+          this.overriddenStringAttributes.put(name, new HashMap<String, String>());\n+          this.overriddenListAttributes.put(name, new HashMap<String, List<String>>());\n+          for (String attr : ApiVersionedDir.PRESERVED_PROTO_LIBRARY_STRING_ATTRIBUTES) {\n+            String value = buildozer.getAttribute(file, name, attr);\n+            if (value != null) {\n+              this.overriddenStringAttributes.get(name).put(attr, value);\n+            }\n+          }\n+          for (String attr : ApiVersionedDir.PRESERVED_PROTO_LIBRARY_LIST_ATTRIBUTES) {\n+            String value = buildozer.getAttribute(file, name, attr);\n+            if (value != null && value.startsWith(\"[\") && value.endsWith(\"]\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45afa4ea524db5716d049835220cb410031f536f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NzgwMQ==", "bodyText": "Does buildozer express a list as space-delimited and strip the comma-separators we have?", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442397801", "createdAt": "2020-06-18T17:44:58Z", "author": {"login": "noahdietz"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -285,6 +320,49 @@ void parseJsonFile(String fileName, String fileBody) {\n     }\n   }\n \n+  void parseBazelBuildFile(Path file) {\n+    try {\n+      Buildozer buildozer = Buildozer.getInstance();\n+\n+      // We cannot and we do not want to preserve all the content of the file.\n+      // We will let the user edit just the following:\n+      // - names of the final targets (*_gapic_assembly_pkg) because they are user-facing;\n+      // - extra protoc plugin parameters for *_gapic_library rules.\n+      List<String> allRules = buildozer.execute(file, \"print kind name\", \":*\");\n+      for (String rule : allRules) {\n+        String[] split = rule.split(\" \");\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        String kind = split[0];\n+        String name = split[1];\n+        if (kind.endsWith(\"_gapic_assembly_pkg\")) {\n+          this.assemblyPkgRulesNames.put(kind, name);\n+        } else if (kind.endsWith(\"_gapic_library\")) {\n+          this.overriddenStringAttributes.put(name, new HashMap<String, String>());\n+          this.overriddenListAttributes.put(name, new HashMap<String, List<String>>());\n+          for (String attr : ApiVersionedDir.PRESERVED_PROTO_LIBRARY_STRING_ATTRIBUTES) {\n+            String value = buildozer.getAttribute(file, name, attr);\n+            if (value != null) {\n+              this.overriddenStringAttributes.get(name).put(attr, value);\n+            }\n+          }\n+          for (String attr : ApiVersionedDir.PRESERVED_PROTO_LIBRARY_LIST_ATTRIBUTES) {\n+            String value = buildozer.getAttribute(file, name, attr);\n+            if (value != null && value.startsWith(\"[\") && value.endsWith(\"]\")) {\n+              value = value.substring(1, value.length() - 1);\n+              String[] values = value.split(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45afa4ea524db5716d049835220cb410031f536f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTExNA==", "bodyText": "One can hope! But alas... \ud83d\ude09", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442401114", "createdAt": "2020-06-18T17:50:49Z", "author": {"login": "noahdietz"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApisVisitor.java", "diffHunk": "@@ -98,9 +98,7 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO\n     } else if (fileName.endsWith(\".proto\")) {\n       bp.parseProtoFile(fileName, readFile(file));\n     } else if (fileName.endsWith(\".bazel\")) {\n-      // Consider merging BUILD.bazel files if it becomes necessary (i.e. people will be doing many\n-      // valuable manual edits in their BUILD.bazel files). This will complicate the whole logic\n-      // so not doing it for now, hoping it will not be required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45afa4ea524db5716d049835220cb410031f536f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5977c0bc5dce7b2d985459744b17dcc4290ff98e", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/5977c0bc5dce7b2d985459744b17dcc4290ff98e", "committedDate": "2020-06-18T22:34:52Z", "message": "pr feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88252e7c1d6d8cffa2450c8aaf7b0752ae4f9a8b", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/88252e7c1d6d8cffa2450c8aaf7b0752ae4f9a8b", "committedDate": "2020-06-18T22:45:53Z", "message": "use bazel version v2.2.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/a30ed2f04186e27975349ef3b9a2ce0be3b2ca16", "committedDate": "2020-06-18T23:10:05Z", "message": "added comment to the generated BUILD.bazel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a07063f5b4a9495a586e0e53bcbe07bb7efcaa3c", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/a07063f5b4a9495a586e0e53bcbe07bb7efcaa3c", "committedDate": "2020-06-18T23:08:53Z", "message": "added comment to the generated BUILD.bazel"}, "afterCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/a30ed2f04186e27975349ef3b9a2ce0be3b2ca16", "committedDate": "2020-06-18T23:10:05Z", "message": "added comment to the generated BUILD.bazel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODU4NTY5", "url": "https://github.com/googleapis/gapic-generator/pull/3237#pullrequestreview-433858569", "createdAt": "2020-06-19T07:24:52Z", "commit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "state": "APPROVED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyNDo1MlrOGmK0cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMDoxMTo1MFrOGmjmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NjMzOA==", "bodyText": "Since you are already updating it, can you please update it to the latest bazel version? (3.3.0).", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442676338", "createdAt": "2020-06-19T07:24:52Z", "author": {"login": "vam-google"}, "path": ".circleci/config.yml", "diffHunk": "@@ -342,7 +342,7 @@ jobs:\n     working_directory: /tmp/\n     environment:\n       TEST_REPORTS_DIR: /tmp/workspace/bazel/reports/gapic-generator\n-      BAZEL_VERSION: 2.0.0\n+      BAZEL_VERSION: 2.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTEwNA==", "bodyText": "Please make all container fields (maps, lists, etc) final. It will make only the reference itself final (the map itself will still be modifiable).", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442681104", "createdAt": "2020-06-19T07:35:27Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -123,6 +139,13 @@\n   //         https://www.googleapis.com/auth/cloud-platform\n   private boolean cloudScope;\n \n+  // Names of *_gapic_assembly_* rules (since they may be overridden by the user)\n+  private Map<String, String> assemblyPkgRulesNames = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MjQ1Nw==", "bodyText": "Is this possible (length != 2)? If yes, what would be an example?", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442682457", "createdAt": "2020-06-19T07:38:22Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -285,6 +320,49 @@ void parseJsonFile(String fileName, String fileBody) {\n     }\n   }\n \n+  void parseBazelBuildFile(Path file) {\n+    try {\n+      Buildozer buildozer = Buildozer.getInstance();\n+\n+      // We cannot and we do not want to preserve all the content of the file.\n+      // We will let the user edit just the following:\n+      // - names of the final targets (*_gapic_assembly_*) because they are user-facing;\n+      // - extra protoc plugin parameters for *_gapic_library rules.\n+      List<String> allRules = buildozer.execute(file, \"print kind name\", \":*\");\n+      for (String rule : allRules) {\n+        String[] split = rule.split(\" \");\n+        if (split.length != 2) {\n+          continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NDA0Nw==", "bodyText": "You should be able to use diamond syntax (i.e. just 'new HashMap<>()' without specifying parametrized types explicitly) in arguments too (not only in assignments).", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442684047", "createdAt": "2020-06-19T07:41:45Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -285,6 +320,49 @@ void parseJsonFile(String fileName, String fileBody) {\n     }\n   }\n \n+  void parseBazelBuildFile(Path file) {\n+    try {\n+      Buildozer buildozer = Buildozer.getInstance();\n+\n+      // We cannot and we do not want to preserve all the content of the file.\n+      // We will let the user edit just the following:\n+      // - names of the final targets (*_gapic_assembly_*) because they are user-facing;\n+      // - extra protoc plugin parameters for *_gapic_library rules.\n+      List<String> allRules = buildozer.execute(file, \"print kind name\", \":*\");\n+      for (String rule : allRules) {\n+        String[] split = rule.split(\" \");\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        String kind = split[0];\n+        String name = split[1];\n+        if (kind.contains(\"_gapic_assembly_\")) {\n+          this.assemblyPkgRulesNames.put(kind, name);\n+        } else if (kind.endsWith(\"_gapic_library\")) {\n+          this.overriddenStringAttributes.put(name, new HashMap<String, String>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NDY5Mg==", "bodyText": "How will this logic work if there is more than one instance of the same rule type in build file? (i.e. like two java_gapic_library targets in the same BUIDL.bazel file?)", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442684692", "createdAt": "2020-06-19T07:43:04Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -285,6 +320,49 @@ void parseJsonFile(String fileName, String fileBody) {\n     }\n   }\n \n+  void parseBazelBuildFile(Path file) {\n+    try {\n+      Buildozer buildozer = Buildozer.getInstance();\n+\n+      // We cannot and we do not want to preserve all the content of the file.\n+      // We will let the user edit just the following:\n+      // - names of the final targets (*_gapic_assembly_*) because they are user-facing;\n+      // - extra protoc plugin parameters for *_gapic_library rules.\n+      List<String> allRules = buildozer.execute(file, \"print kind name\", \":*\");\n+      for (String rule : allRules) {\n+        String[] split = rule.split(\" \");\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        String kind = split[0];\n+        String name = split[1];\n+        if (kind.contains(\"_gapic_assembly_\")) {\n+          this.assemblyPkgRulesNames.put(kind, name);\n+        } else if (kind.endsWith(\"_gapic_library\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4ODE3OA==", "bodyText": "argNameVal.length will still be !=2, so line 22 will give true and then continue on line 24", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442688178", "createdAt": "2020-06-19T07:50:15Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ArgsParser.java", "diffHunk": "@@ -15,6 +15,10 @@\n   ArgsParser(String[] args) {\n     for (String arg : args) {\n       String[] argNameVal = arg.split(\"=\");\n+      if (argNameVal.length == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4OTAyNg==", "bodyText": "When executed from googleapis (the actual workflow people use), the target is called //:build_gen (not //rules_gapic/bazel:build_file_generator), which makes this help very confusing.", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442689026", "createdAt": "2020-06-19T07:52:01Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ArgsParser.java", "diffHunk": "@@ -29,15 +33,37 @@\n               + \"The required arguments are: \"\n               + required;\n       System.out.println(msg);\n+      ArgsParser.printUsage();\n       throw new IllegalArgumentException(msg);\n     }\n   }\n \n+  static void printUsage() {\n+    String helpMessage =\n+        \"Usage:\\n\"\n+            + \"  bazel run //rules_gapic/bazel:build_file_generator -- \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4OTQ0Nw==", "bodyText": "There is also --dest argument (which is equal to --src if not specified explicitly)", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r442689447", "createdAt": "2020-06-19T07:52:53Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ArgsParser.java", "diffHunk": "@@ -29,15 +33,37 @@\n               + \"The required arguments are: \"\n               + required;\n       System.out.println(msg);\n+      ArgsParser.printUsage();\n       throw new IllegalArgumentException(msg);\n     }\n   }\n \n+  static void printUsage() {\n+    String helpMessage =\n+        \"Usage:\\n\"\n+            + \"  bazel run //rules_gapic/bazel:build_file_generator -- \\n\"\n+            + \"    --src=rules_gapic/bazel/src/test/data/googleapis\\n\"\n+            + \"\\n\"\n+            + \"Command line options:\\n\"\n+            + \"  --src=path: location of googleapis directory\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzE1Nw==", "bodyText": "Given stuff like this, I'm leaning towards making bazel-merge logic an \"opt-in\" (now it is \"opt-out\") by command line argument. It seems not flexible enough to be the default behavior.", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443027157", "createdAt": "2020-06-19T20:17:37Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/BazelBuildFileTemplate.java", "diffHunk": "@@ -32,7 +38,71 @@ private String expand(Map<String, String> tokens) {\n     return builder.toString();\n   }\n \n-  String expand(BazelBuildFileView bpv) {\n-    return this.expand(bpv.getTokens());\n+  String expand(BazelBuildFileView bpv) throws IOException {\n+    String expandedTemplate = this.expand(bpv.getTokens());\n+\n+    // Apply overrides\n+    Map<String, Map<String, String>> overriddenStringAttributes =\n+        bpv.getOverriddenStringAttributes();\n+    Map<String, Map<String, List<String>>> overriddenListAttributes =\n+        bpv.getOverriddenListAttributes();\n+    Map<String, String> assemblyPkgRulesNames = bpv.getAssemblyPkgRulesNames();\n+    if (overriddenStringAttributes.size() == 0\n+        && overriddenListAttributes.size() == 0\n+        && assemblyPkgRulesNames.size() == 0) {\n+      // nothing to override\n+      return expandedTemplate;\n+    }\n+\n+    // write the content of the build file to a temporary directory and fix it with Buildozer\n+    File tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    File buildBazel = new File(tempdir, \"BUILD.bazel\");\n+    Path buildBazelPath = buildBazel.toPath();\n+    Files.write(buildBazelPath, expandedTemplate.getBytes(StandardCharsets.UTF_8));\n+\n+    Buildozer buildozer = Buildozer.getInstance();\n+\n+    // First of all, rename the rules\n+    for (Map.Entry<String, String> entry : assemblyPkgRulesNames.entrySet()) {\n+      String kind = entry.getKey();\n+      String newName = entry.getValue();\n+      // Note: if there are multiple *_gapic_assembly_pkg rules for the same language,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDY4NA==", "bodyText": "Please make these final", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443030684", "createdAt": "2020-06-19T20:27:44Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/BazelBuildFileView.java", "diffHunk": "@@ -12,6 +12,9 @@\n class BazelBuildFileView {\n   private static final Pattern LABEL_NAME = Pattern.compile(\":\\\\w+$\");\n   private final Map<String, String> tokens = new HashMap<>();\n+  private Map<String, Map<String, String>> overriddenStringAttributes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzNzkzNw==", "bodyText": "Is there any reason why these are all final? If no, please remove final modifier as it is not idiomatic for java to declare local variables final unless they are a part of a closure (which  is still very uncommon, unlike in js).", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443037937", "createdAt": "2020-06-19T20:48:02Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";\n+    final InputStream inputStream = (getClass().getResourceAsStream(resourcePath));\n+    buildozerBinary = new File(tempdir, \"buildozer.bin\");\n+    Files.copy(inputStream, buildozerBinary.getAbsoluteFile().toPath());\n+    buildozerBinary.setExecutable(true, false);\n+    buildozerBinary.deleteOnExit();\n+    tempdir.deleteOnExit();\n+    batch = new ArrayList<String>();\n+  }\n+\n+  // General purpose execute method. Runs buildozer with the given command line\n+  // arguments\n+  public List<String> execute(final String[] args, final String[] stdin) throws IOException {\n+    final ArrayList<String> cmdList = new ArrayList<String>(Arrays.asList(args));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0MDIxOA==", "bodyText": "Unless you need something specific from BufferedReader, please declare references as the interface type (Reader in this particular case)", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443040218", "createdAt": "2020-06-19T20:55:25Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";\n+    final InputStream inputStream = (getClass().getResourceAsStream(resourcePath));\n+    buildozerBinary = new File(tempdir, \"buildozer.bin\");\n+    Files.copy(inputStream, buildozerBinary.getAbsoluteFile().toPath());\n+    buildozerBinary.setExecutable(true, false);\n+    buildozerBinary.deleteOnExit();\n+    tempdir.deleteOnExit();\n+    batch = new ArrayList<String>();\n+  }\n+\n+  // General purpose execute method. Runs buildozer with the given command line\n+  // arguments\n+  public List<String> execute(final String[] args, final String[] stdin) throws IOException {\n+    final ArrayList<String> cmdList = new ArrayList<String>(Arrays.asList(args));\n+    cmdList.add(0, buildozerBinary.toString());\n+    final ProcessBuilder processBuilder = new ProcessBuilder(cmdList);\n+    final Process process = processBuilder.start();\n+    final BufferedWriter processStdin =\n+        new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));\n+    final BufferedReader processStdout =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2ODQ3MQ==", "bodyText": "is it really necessary? If it is, why not just make it a requirement, instead of trying to fix users's input silently?", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443068471", "createdAt": "2020-06-19T22:41:41Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";\n+    final InputStream inputStream = (getClass().getResourceAsStream(resourcePath));\n+    buildozerBinary = new File(tempdir, \"buildozer.bin\");\n+    Files.copy(inputStream, buildozerBinary.getAbsoluteFile().toPath());\n+    buildozerBinary.setExecutable(true, false);\n+    buildozerBinary.deleteOnExit();\n+    tempdir.deleteOnExit();\n+    batch = new ArrayList<String>();\n+  }\n+\n+  // General purpose execute method. Runs buildozer with the given command line\n+  // arguments\n+  public List<String> execute(final String[] args, final String[] stdin) throws IOException {\n+    final ArrayList<String> cmdList = new ArrayList<String>(Arrays.asList(args));\n+    cmdList.add(0, buildozerBinary.toString());\n+    final ProcessBuilder processBuilder = new ProcessBuilder(cmdList);\n+    final Process process = processBuilder.start();\n+    final BufferedWriter processStdin =\n+        new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));\n+    final BufferedReader processStdout =\n+        new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+    if (stdin != null) {\n+      for (String line : stdin) {\n+        processStdin.write(line + \"\\n\");\n+      }\n+    }\n+    processStdin.close();\n+\n+    final List<String> result = new ArrayList<String>();\n+    String line = null;\n+    while ((line = processStdout.readLine()) != null) {\n+      result.add(line);\n+    }\n+\n+    return result;\n+  }\n+\n+  // Execute buildozer command for the given target\n+  public List<String> execute(final Path bazelBuildFile, final String command, String target)\n+      throws IOException {\n+    if (!target.startsWith(\":\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2ODg0Mw==", "bodyText": "Subjective, but String.format(\"%s%s\", bazelBuildFile, target) looks unnecessary,  bazelBuildFile + target  is looks shorter and cleaner.Using plus for string concatenation is still very idiomatic in java.", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443068843", "createdAt": "2020-06-19T22:43:24Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";\n+    final InputStream inputStream = (getClass().getResourceAsStream(resourcePath));\n+    buildozerBinary = new File(tempdir, \"buildozer.bin\");\n+    Files.copy(inputStream, buildozerBinary.getAbsoluteFile().toPath());\n+    buildozerBinary.setExecutable(true, false);\n+    buildozerBinary.deleteOnExit();\n+    tempdir.deleteOnExit();\n+    batch = new ArrayList<String>();\n+  }\n+\n+  // General purpose execute method. Runs buildozer with the given command line\n+  // arguments\n+  public List<String> execute(final String[] args, final String[] stdin) throws IOException {\n+    final ArrayList<String> cmdList = new ArrayList<String>(Arrays.asList(args));\n+    cmdList.add(0, buildozerBinary.toString());\n+    final ProcessBuilder processBuilder = new ProcessBuilder(cmdList);\n+    final Process process = processBuilder.start();\n+    final BufferedWriter processStdin =\n+        new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));\n+    final BufferedReader processStdout =\n+        new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+    if (stdin != null) {\n+      for (String line : stdin) {\n+        processStdin.write(line + \"\\n\");\n+      }\n+    }\n+    processStdin.close();\n+\n+    final List<String> result = new ArrayList<String>();\n+    String line = null;\n+    while ((line = processStdout.readLine()) != null) {\n+      result.add(line);\n+    }\n+\n+    return result;\n+  }\n+\n+  // Execute buildozer command for the given target\n+  public List<String> execute(final Path bazelBuildFile, final String command, String target)\n+      throws IOException {\n+    if (!target.startsWith(\":\")) {\n+      target = \":\" + target;\n+    }\n+    return execute(new String[] {command, String.format(\"%s%s\", bazelBuildFile, target)}, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2OTQ4NQ==", "bodyText": "Please use try with resources block for these things try (BufferedWriter process = ...) {}. It will automatically close the streams (notice that processStdout not even closed explicitly in the code here and has to fallback to closing itself in finalize() method which is the last resort) .\nAlso it seems that processStdout is used only after processStdin is already closed. Please declare new variables as needed, not upfront (especially if they open new i/o streams) .", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443069485", "createdAt": "2020-06-19T22:46:32Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";\n+    final InputStream inputStream = (getClass().getResourceAsStream(resourcePath));\n+    buildozerBinary = new File(tempdir, \"buildozer.bin\");\n+    Files.copy(inputStream, buildozerBinary.getAbsoluteFile().toPath());\n+    buildozerBinary.setExecutable(true, false);\n+    buildozerBinary.deleteOnExit();\n+    tempdir.deleteOnExit();\n+    batch = new ArrayList<String>();\n+  }\n+\n+  // General purpose execute method. Runs buildozer with the given command line\n+  // arguments\n+  public List<String> execute(final String[] args, final String[] stdin) throws IOException {\n+    final ArrayList<String> cmdList = new ArrayList<String>(Arrays.asList(args));\n+    cmdList.add(0, buildozerBinary.toString());\n+    final ProcessBuilder processBuilder = new ProcessBuilder(cmdList);\n+    final Process process = processBuilder.start();\n+    final BufferedWriter processStdin =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3NjgxMA==", "bodyText": "This looks weird. Looks like this array is needed to only pass it to execute() as an argument, while execute simply reads it line by line (it can do the same with the list). Also it is generally considered a good practice to use collection types instead of using arrays directly in java. I.e. please accept collection directly in you execute method, it will make it more idiomatic and there will be no need in converting the collection to an array.\nThe same is true for the args argument for execute() - please consider using a map instead of an array.\n(if it is inspired by main(String[] args), main has to do it, because it is an entry point to the program and it must stick to the very basic stuff).", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443076810", "createdAt": "2020-06-19T23:28:52Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";\n+    final InputStream inputStream = (getClass().getResourceAsStream(resourcePath));\n+    buildozerBinary = new File(tempdir, \"buildozer.bin\");\n+    Files.copy(inputStream, buildozerBinary.getAbsoluteFile().toPath());\n+    buildozerBinary.setExecutable(true, false);\n+    buildozerBinary.deleteOnExit();\n+    tempdir.deleteOnExit();\n+    batch = new ArrayList<String>();\n+  }\n+\n+  // General purpose execute method. Runs buildozer with the given command line\n+  // arguments\n+  public List<String> execute(final String[] args, final String[] stdin) throws IOException {\n+    final ArrayList<String> cmdList = new ArrayList<String>(Arrays.asList(args));\n+    cmdList.add(0, buildozerBinary.toString());\n+    final ProcessBuilder processBuilder = new ProcessBuilder(cmdList);\n+    final Process process = processBuilder.start();\n+    final BufferedWriter processStdin =\n+        new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));\n+    final BufferedReader processStdout =\n+        new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+    if (stdin != null) {\n+      for (String line : stdin) {\n+        processStdin.write(line + \"\\n\");\n+      }\n+    }\n+    processStdin.close();\n+\n+    final List<String> result = new ArrayList<String>();\n+    String line = null;\n+    while ((line = processStdout.readLine()) != null) {\n+      result.add(line);\n+    }\n+\n+    return result;\n+  }\n+\n+  // Execute buildozer command for the given target\n+  public List<String> execute(final Path bazelBuildFile, final String command, String target)\n+      throws IOException {\n+    if (!target.startsWith(\":\")) {\n+      target = \":\" + target;\n+    }\n+    return execute(new String[] {command, String.format(\"%s%s\", bazelBuildFile, target)}, null);\n+  }\n+\n+  // Get the value of the given attribute of the given target\n+  public String getAttribute(final Path bazelBuildFile, String target, final String attribute)\n+      throws IOException {\n+    List<String> executeResult;\n+    try {\n+      executeResult = execute(bazelBuildFile, String.format(\"print %s\", attribute), target);\n+      String value = executeResult.get(0);\n+      if (value.equals(\"(missing)\")) {\n+        return null;\n+      }\n+      return value;\n+    } catch (IndexOutOfBoundsException ignored) {\n+      return null;\n+    }\n+  }\n+\n+  // Set the value to the given attribute of the given target. Apply changes\n+  // immediately.\n+  public void setAttribute(\n+      final Path bazelBuildFile, final String target, final String attribute, final String value)\n+      throws IOException {\n+    execute(bazelBuildFile, String.format(\"set %s \\\"%s\\\"\", attribute, value), target);\n+  }\n+\n+  // Remove the given attribute of the given target. Apply changes immediately.\n+  public void removeAttribute(\n+      final Path bazelBuildFile, final String target, final String attribute) throws IOException {\n+    execute(bazelBuildFile, String.format(\"remove %s\", attribute), target);\n+  }\n+\n+  // Add the value to the given list attribute of the given target. Apply changes\n+  // immediately.\n+  public void addAttribute(\n+      final Path bazelBuildFile, final String target, final String attribute, final String value)\n+      throws IOException {\n+    execute(bazelBuildFile, String.format(\"add %s \\\"%s\\\"\", attribute, value), target);\n+  }\n+\n+  // Set the value to the given attribute of the given target.\n+  // The changes will be applied when the whole batch is committed with .commit().\n+  public void batchSetAttribute(\n+      final Path bazelBuildFile, String target, final String attribute, final String value)\n+      throws IOException {\n+    if (!target.startsWith(\":\")) {\n+      target = \":\" + target;\n+    }\n+    batch.add(\n+        String.format(\"set %s \\\"%s\\\"|%s%s\", attribute, value, bazelBuildFile.toString(), target));\n+  }\n+\n+  // Remove the given attribute of the given target. Apply changes immediately.\n+  public void batchRemoveAttribute(final Path bazelBuildFile, String target, final String attribute)\n+      throws IOException {\n+    if (!target.startsWith(\":\")) {\n+      target = \":\" + target;\n+    }\n+    batch.add(String.format(\"remove %s|%s%s\", attribute, bazelBuildFile.toString(), target));\n+  }\n+\n+  // Add the value to the given list attribute of the given target.\n+  // The changes will be applied when the whole batch is committed with .commit().\n+  public void batchAddAttribute(\n+      final Path bazelBuildFile, String target, final String attribute, final String value)\n+      throws IOException {\n+    if (!target.startsWith(\":\")) {\n+      target = \":\" + target;\n+    }\n+    batch.add(\n+        String.format(\"add %s \\\"%s\\\"|%s%s\", attribute, value, bazelBuildFile.toString(), target));\n+  }\n+\n+  // Make all changes that are waiting in the batch.\n+  public void commit() throws IOException {\n+    if (batch.size() == 0) {\n+      return;\n+    }\n+    String[] stdin = new String[batch.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4MTM5Ng==", "bodyText": "As we discussed offline plese try using classpath_resoruce in java_binary, maybe it will let your avoid copying the binary from java jar resoruce.", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443081396", "createdAt": "2020-06-20T00:02:29Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/Buildozer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.google.api.codegen.bazel;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Buildozer {\n+  private static Buildozer instance = null;\n+  private File tempdir = null;\n+  private File buildozerBinary = null;\n+  private List<String> batch = null;\n+\n+  private Buildozer() throws IOException {\n+    tempdir = Files.createTempDirectory(\"build_file_generator_\").toFile();\n+    final String resourcePath = \"/rules_gapic/bazel/buildozer.bin\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4MjQzNQ==", "bodyText": "How hard would it be to make this stuff configurable (probably to the extent of passing it from command line)?", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443082435", "createdAt": "2020-06-20T00:11:50Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ApiVersionedDir.java", "diffHunk": "@@ -40,6 +44,18 @@\n \n   private static String CLOUD_AUTH_SCOPE = \"https://www.googleapis.com/auth/cloud-platform\";\n \n+  private static final String[] PRESERVED_PROTO_LIBRARY_STRING_ATTRIBUTES = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ed2f04186e27975349ef3b9a2ce0be3b2ca16"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97f2411dfab482459d720447c9b5228184746ac5", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/97f2411dfab482459d720447c9b5228184746ac5", "committedDate": "2020-06-20T11:24:47Z", "message": "pr feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78099453b18dddb9e66536c9316c38508a0feda0", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/78099453b18dddb9e66536c9316c38508a0feda0", "committedDate": "2020-06-20T10:51:19Z", "message": "pr feedback"}, "afterCommit": {"oid": "97f2411dfab482459d720447c9b5228184746ac5", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/97f2411dfab482459d720447c9b5228184746ac5", "committedDate": "2020-06-20T11:24:47Z", "message": "pr feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzAxOTM1", "url": "https://github.com/googleapis/gapic-generator/pull/3237#pullrequestreview-435301935", "createdAt": "2020-06-22T21:56:46Z", "commit": {"oid": "97f2411dfab482459d720447c9b5228184746ac5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTo1Njo0NlrOGnSXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTo1Njo0NlrOGnSXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0ODU4OA==", "bodyText": "Now the help became specific to googleapis context... That was kind of the reason why I did nto want to include any helps at all. Notice, the tool in its help speaks about how it must be executed from bazel (the java tool does not have to be bazel specific).", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r443848588", "createdAt": "2020-06-22T21:56:46Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/main/java/com/google/api/codegen/bazel/ArgsParser.java", "diffHunk": "@@ -29,15 +33,37 @@\n               + \"The required arguments are: \"\n               + required;\n       System.out.println(msg);\n+      ArgsParser.printUsage();\n       throw new IllegalArgumentException(msg);\n     }\n   }\n \n+  static void printUsage() {\n+    String helpMessage =\n+        \"Usage (when running from googleapis folder):\\n\"\n+            + \"  bazel run //:build_gen -- --src=rules_gapic/bazel/src/test/data/googleapis\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f2411dfab482459d720447c9b5228184746ac5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6dcf9015197aca7fb0748c6d04462df954c5a0", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/7f6dcf9015197aca7fb0748c6d04462df954c5a0", "committedDate": "2020-06-23T23:58:32Z", "message": "fix: accept buildozer path as a parameter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4037a2ee25b61ccb95e3eb0194169565f65fd628", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/4037a2ee25b61ccb95e3eb0194169565f65fd628", "committedDate": "2020-06-23T23:50:13Z", "message": "fix: accept buildozer path as a parameter"}, "afterCommit": {"oid": "7f6dcf9015197aca7fb0748c6d04462df954c5a0", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/7f6dcf9015197aca7fb0748c6d04462df954c5a0", "committedDate": "2020-06-23T23:58:32Z", "message": "fix: accept buildozer path as a parameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjQwOTE1", "url": "https://github.com/googleapis/gapic-generator/pull/3237#pullrequestreview-436240915", "createdAt": "2020-06-24T00:10:20Z", "commit": {"oid": "7f6dcf9015197aca7fb0748c6d04462df954c5a0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDoxMDoyMFrOGn-qqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDoxMDoyMFrOGn-qqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3NDM3Ng==", "bodyText": "toString() is called automatically for all objects participating in string cancatenation. Please remove it (here and below)", "url": "https://github.com/googleapis/gapic-generator/pull/3237#discussion_r444574376", "createdAt": "2020-06-24T00:10:20Z", "author": {"login": "vam-google"}, "path": "rules_gapic/bazel/src/test/java/com/google/api/codegen/bazel/BuildFileGeneratorTest.java", "diffHunk": "@@ -46,8 +48,11 @@ public void testRegeneration() throws IOException, InterruptedException {\n         .start()\n         .waitFor();\n \n+    String buildozerPath = getBuildozerPath();\n     Path copiedGoogleapis = Paths.get(tempDirPath.toString(), \"googleapis\");\n-    ArgsParser args = new ArgsParser(new String[] {\"--src=\" + copiedGoogleapis.toString()});\n+    ArgsParser args =\n+        new ArgsParser(\n+            new String[] {\"--buildozer=\" + buildozerPath, \"--src=\" + copiedGoogleapis.toString()});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6dcf9015197aca7fb0748c6d04462df954c5a0"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bc118d091b252ae8cb38b66c2a161ccbe53a4da", "author": {"user": {"login": "alexander-fenster", "name": "Alexander Fenster"}}, "url": "https://github.com/googleapis/gapic-generator/commit/2bc118d091b252ae8cb38b66c2a161ccbe53a4da", "committedDate": "2020-06-24T00:15:21Z", "message": "pr feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1398, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}