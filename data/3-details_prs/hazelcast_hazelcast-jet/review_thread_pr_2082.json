{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTMxNjI4", "number": 2082, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNjozNVrODspepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNjozNVrODspepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQzNTI0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNjozNVrOF9nP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjozNDo1NFrOF9njCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDQ4MQ==", "bodyText": "did we really need both data iterator and sublist here? seems unnecessary. you can just get sublist(0, size) when size <= FETCH_SIZE", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2082#discussion_r400150481", "createdAt": "2020-03-30T12:26:35Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java", "diffHunk": "@@ -52,18 +64,40 @@ public boolean isCooperative() {\n     @Override\n     protected void init(@Nonnull Context context) {\n         HazelcastInstance instance;\n+        SerializationService serializationService;\n         if (isRemote()) {\n             instance = client = newHazelcastClient(asClientConfig(clientXml));\n+            serializationService = ((HazelcastClientProxy) instance).getSerializationService();\n         } else {\n             instance = context.jetInstance().getHazelcastInstance();\n+            serializationService = ((ProcCtx) context).serializationService();\n         }\n-        IList<Object> list = instance.getList(name);\n-        final int size = list.size();\n-        traverser = size <= FETCH_SIZE ?\n-                traverseIterable(list)\n-                :\n+        traverser = createTraverser(instance, name).map(serializationService::toObject);\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private Traverser<Data> createTraverser(HazelcastInstance instance, String name) {\n+        IList<Data> list = instance.getList(name);\n+        int size = list.size();\n+\n+        if (list instanceof ClientListProxy) {\n+            ClientListProxy proxy = (ClientListProxy) list;\n+            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+        } else if (list instanceof ListProxyImpl) {\n+            ListProxyImpl proxy = (ListProxyImpl) list;\n+            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+        } else {\n+            throw new RuntimeException(\"Unexpected list class: \" + list.getClass().getName());\n+        }\n+    }\n+\n+    private Traverser<Data> createTraverser(int size,\n+                                            Supplier<Iterator<Data>> iteratorSupplier,\n+                                            BiFunction<Integer, Integer, List<Data>> subListSupplier) {\n+        return size <= FETCH_SIZE ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a07420aba42d0fcdad11b9149d15a252d05ff2e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NTQwMA==", "bodyText": "I wanted to keep the existing behavior but maybe it could be simplified indeed.... \ud83e\udd14", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2082#discussion_r400155400", "createdAt": "2020-03-30T12:34:54Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java", "diffHunk": "@@ -52,18 +64,40 @@ public boolean isCooperative() {\n     @Override\n     protected void init(@Nonnull Context context) {\n         HazelcastInstance instance;\n+        SerializationService serializationService;\n         if (isRemote()) {\n             instance = client = newHazelcastClient(asClientConfig(clientXml));\n+            serializationService = ((HazelcastClientProxy) instance).getSerializationService();\n         } else {\n             instance = context.jetInstance().getHazelcastInstance();\n+            serializationService = ((ProcCtx) context).serializationService();\n         }\n-        IList<Object> list = instance.getList(name);\n-        final int size = list.size();\n-        traverser = size <= FETCH_SIZE ?\n-                traverseIterable(list)\n-                :\n+        traverser = createTraverser(instance, name).map(serializationService::toObject);\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private Traverser<Data> createTraverser(HazelcastInstance instance, String name) {\n+        IList<Data> list = instance.getList(name);\n+        int size = list.size();\n+\n+        if (list instanceof ClientListProxy) {\n+            ClientListProxy proxy = (ClientListProxy) list;\n+            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+        } else if (list instanceof ListProxyImpl) {\n+            ListProxyImpl proxy = (ListProxyImpl) list;\n+            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+        } else {\n+            throw new RuntimeException(\"Unexpected list class: \" + list.getClass().getName());\n+        }\n+    }\n+\n+    private Traverser<Data> createTraverser(int size,\n+                                            Supplier<Iterator<Data>> iteratorSupplier,\n+                                            BiFunction<Integer, Integer, List<Data>> subListSupplier) {\n+        return size <= FETCH_SIZE ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDQ4MQ=="}, "originalCommit": {"oid": "0a07420aba42d0fcdad11b9149d15a252d05ff2e"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4739, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}