{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjU4MTU5", "number": 1917, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowMjozMFrODdl3Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowODo1M1rODdl9GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzU1Njc5OnYy", "diffSide": "RIGHT", "path": "examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowMjozMFrOFmSCUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowMjozMFrOFmSCUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NTcxNQ==", "bodyText": "I think we should say what the pipeline does, rather than just \"process data\". It's better to lead by describing the actual processing that is done", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375685715", "createdAt": "2020-02-06T08:02:30Z", "author": {"login": "cangencer"}, "path": "examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.python;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.jet.python.PythonServiceConfig;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n+import static com.hazelcast.jet.python.PythonTransforms.mapUsingPython;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * This example shows you how to invoke a Python function to process the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81968012762b65cd0c2c965e1552d12baa81c28"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzU1ODMzOnYy", "diffSide": "RIGHT", "path": "examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowMzoxMFrOFmSDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowMzoxMFrOFmSDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NTk0MA==", "bodyText": "This seem rather like boilerplate and a lot of code.. could we move it somewhere else perhaps? as a util method on Python?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375685940", "createdAt": "2020-02-06T08:03:10Z", "author": {"login": "cangencer"}, "path": "examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.python;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.jet.python.PythonServiceConfig;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n+import static com.hazelcast.jet.python.PythonTransforms.mapUsingPython;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * This example shows you how to invoke a Python function to process the\n+ * data in the Jet pipeline. The function gets a batch of items in a list\n+ * and must return a list of result items.\n+ * <p>\n+ * The provided code uses {@code src/main/resources/python} in this project\n+ * as the Python project directory. There are two files there:\n+ * {@code requirements.txt} that declares NumPy as a dependency and\n+ * {@code take_sqrt.py} that defines the {@code transform_list} function\n+ * that Jet will call with the pipeline data. The function uses uses the\n+ * NumPy library to transform the input list by taking the square root of\n+ * each element.\n+ */\n+public class Python {\n+\n+    private static final String RESULTS = \"python_results\";\n+\n+    private static Pipeline buildPipeline(String baseDir) {\n+        Pipeline p = Pipeline.create();\n+        p.readFrom(TestSources.itemStream(10, (ts, seq) -> bigRandomNumberAsString()))\n+         .withoutTimestamps()\n+         .apply(mapUsingPython(new PythonServiceConfig()\n+                 .setBaseDir(baseDir)\n+                 .setHandlerModule(\"take_sqrt\")))\n+         .setLocalParallelism(1) // controls how many Python processes will be used\n+         .writeTo(Sinks.observable(RESULTS));\n+        return p;\n+    }\n+\n+    private static String bigRandomNumberAsString() {\n+        ThreadLocalRandom rnd = ThreadLocalRandom.current();\n+        return \"\" + rnd.nextLong(Long.MAX_VALUE) + rnd.nextLong(Long.MAX_VALUE)\n+                + rnd.nextLong(Long.MAX_VALUE) + rnd.nextLong(Long.MAX_VALUE);\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        Path baseDir = Files.createTempDirectory(\"jet-python-sample-\");\n+        copyClasspathResourcesToDirectory(\"python\", baseDir);\n+        Pipeline p = buildPipeline(baseDir.toString());\n+\n+        JetInstance jet = Jet.bootstrappedInstance();\n+        try {\n+            Observable<String> observable = jet.getObservable(RESULTS);\n+            observable.addObserver(Observer.of(System.out::println));\n+            JobConfig config = new JobConfig().setName(\"python-mapping\");\n+            jet.newJobIfAbsent(p, config).join();\n+        } finally {\n+            IOUtil.delete(baseDir);\n+            Jet.shutdownAll();\n+        }\n+    }\n+\n+    private static void copyClasspathResourcesToDirectory(String sourcePath, Path destPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81968012762b65cd0c2c965e1552d12baa81c28"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzU2MDMzOnYy", "diffSide": "RIGHT", "path": "examples/python/src/main/resources/python/take_sqrt.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowNDowM1rOFmSEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowNDowM1rOFmSEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjI1NQ==", "bodyText": "I would add some python style docs here describing the input parameters etc as standard in python", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375686255", "createdAt": "2020-02-06T08:04:03Z", "author": {"login": "cangencer"}, "path": "examples/python/src/main/resources/python/take_sqrt.py", "diffHunk": "@@ -0,0 +1,7 @@\n+import numpy as np\n+\n+\n+def transform_list(input_list):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81968012762b65cd0c2c965e1552d12baa81c28"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzU3MTQ0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowODo1M1rOFmSK7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowODo1M1rOFmSK7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NzkxNw==", "bodyText": "this one is missing a test", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375687917", "createdAt": "2020-02-06T08:08:53Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -688,6 +689,32 @@ public JobConfig attachDirectory(@Nonnull File file, @Nonnull String id) {\n         return attachDirectory(fileToUrl(file), id);\n     }\n \n+    /**\n+     * Attaches all the files/directories in the supplied map, as if by calling\n+     * {@link #attachDirectory(File, String) attachDirectory(dir, id)} for every\n+     * entry that resolves to a directory and {@link #attachFile(File, String)\n+     * attachFile(file, id)} for every entry that resolves to a regular file.\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    public JobConfig attachAll(@Nonnull Map<String, File> idToFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81968012762b65cd0c2c965e1552d12baa81c28"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}