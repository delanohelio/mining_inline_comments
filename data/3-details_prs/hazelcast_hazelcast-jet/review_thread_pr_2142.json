{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NTEyODI4", "number": 2142, "reviewThreads": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MDo0NVrODwT6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozOTowNVrOD7OKqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg0NDUwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mongodb/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MDo0NVrOGDPNRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MDo0NVrOGDPNRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODA3MA==", "bodyText": "${project.parent.version}", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406048070", "createdAt": "2020-04-09T08:40:45Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,119 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-mongodb</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-mongodb</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-mongodb</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-core</artifactId>\n+            <version>4.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg0NTE3OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MTowMFrOGDPNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MTowMFrOGDPNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODIwMQ==", "bodyText": "${project.parent.version}", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406048201", "createdAt": "2020-04-09T08:41:00Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mysql/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-mysql</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-mysql</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-core</artifactId>\n+            <version>4.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg0NjA4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MToxN1rOGDPOYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MToxN1rOGDPOYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODM1NA==", "bodyText": "${project.parent.version}", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406048354", "createdAt": "2020-04-09T08:41:17Z", "author": {"login": "eminn"}, "path": "extensions/cdc-postgres/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-postgres</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-postgres</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-postgres</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-core</artifactId>\n+            <version>4.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg0NzAzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-sqlserver/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MTozNlrOGDPPCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MTozNlrOGDPPCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODUyMA==", "bodyText": "${project.parent.version}", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406048520", "createdAt": "2020-04-09T08:41:36Z", "author": {"login": "eminn"}, "path": "extensions/cdc-sqlserver/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-sqlserver</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-sqlserver</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-sqlserver</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-core</artifactId>\n+            <version>4.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg1Mjc5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mongodb/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzowMFrOGDPSWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzowMFrOGDPSWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTM2OQ==", "bodyText": "These two properties are repeating for each module, maybe we can move them to a parent one to avoid repetition ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406049369", "createdAt": "2020-04-09T08:43:00Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,119 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-mongodb</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-mongodb</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg1NDgwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mongodb/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzozNFrOGDPTrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzozNFrOGDPTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTcwOA==", "bodyText": "property defined above but not used", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406049708", "createdAt": "2020-04-09T08:43:34Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,119 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-mongodb</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-mongodb</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-mongodb</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-core</artifactId>\n+            <version>4.1-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.mongodb</groupId>\n+            <artifactId>mongo-java-driver</artifactId>\n+            <version>3.12.2</version>\n+        </dependency>\n+\n+        <!-- TEST -->\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-core</artifactId>\n+            <version>${project.parent.version}</version>\n+            <scope>test</scope>\n+            <classifier>tests</classifier>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-connector-mongodb</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <version>1.13.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg1ODEyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NDoyNFrOGDPVqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NDoyNFrOGDPVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MDIxNg==", "bodyText": "pull to a property?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406050216", "createdAt": "2020-04-09T08:44:24Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mysql/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-mysql</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-mysql</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-core</artifactId>\n+            <version>4.1-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+\n+        <!-- TEST -->\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-core</artifactId>\n+            <version>${project.parent.version}</version>\n+            <scope>test</scope>\n+            <classifier>tests</classifier>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-connector-mysql</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>mysql</artifactId>\n+            <version>${testcontainers.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+            <version>1.7.26</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg2MjQyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NTozM1rOGDPYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NTozM1rOGDPYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MDg5MA==", "bodyText": "pull to a property? similar dependencies without version properties found below across multiple cdc modules. Not repeating the comment for each.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406050890", "createdAt": "2020-04-09T08:45:33Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-core</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-core</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-core</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-api</artifactId>\n+            <version>2.3.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2daa3030c7ffa6197ddbf5dddbde35bb78e24c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTkyMjM2OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/KafkaConnectSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTowMjowM1rOGDP90A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTowMjowM1rOGDP90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2MDQ5Ng==", "bodyText": "this can be package private", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406060496", "createdAt": "2020-04-09T09:02:03Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/KafkaConnectSource.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+public class KafkaConnectSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216a4c64b114a1dfd93efff29cefa5bd0879bcf6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDEyMDE0OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/JsonParsing.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1NjozNVrOGDR5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1NjozNVrOGDR5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MjA3Nw==", "bodyText": "I think we can inline these getXXX(JsonNode) methods", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406092077", "createdAt": "2020-04-09T09:56:35Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/JsonParsing.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.hazelcast.jet.cdc.ParsingException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class JsonParsing {\n+\n+    private static final ThreadLocal<ObjectMapper> OBJECT_MAPPER_TL = ThreadLocal.withInitial(() ->\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false));\n+\n+    private JsonParsing() {\n+    }\n+\n+    public static JsonNode parse(String json) throws ParsingException {\n+        try {\n+            ObjectMapper mapper = OBJECT_MAPPER_TL.get();\n+            return mapper.readTree(json);\n+        } catch (Exception e) {\n+            throw new ParsingException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public static Optional<JsonNode> getChild(JsonNode node, String key) {\n+        JsonNode subNode = node.get(key);\n+        if (subNode == null || subNode.isNull()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(subNode);\n+        }\n+    }\n+\n+    public static <T> T mapToObj(JsonNode node, Class<T> clazz) throws ParsingException {\n+        try {\n+            ObjectMapper mapper = OBJECT_MAPPER_TL.get();\n+            return mapper.treeToValue(node, clazz);\n+        } catch (Exception e) {\n+            throw new ParsingException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public static <T> Optional<List<Optional<T>>> getList(JsonNode node, String key, Class<T> clazz) {\n+        JsonNode value = node.get(key);\n+        return getList(clazz, value);\n+    }\n+\n+    public static Optional<Object> getObject(JsonNode node, String key) {\n+        Object value = node.get(key);\n+        return getObject(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f89fb362c8f0dde6f4f51540b54bfcd9a7c7dbec"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDE5NDYzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxNzowOFrOGDSm1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxNzowOFrOGDSm1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzc2NA==", "bodyText": "orz -> or", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406103764", "createdAt": "2020-04-09T10:17:08Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body orz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f89fb362c8f0dde6f4f51540b54bfcd9a7c7dbec"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDE5NTQ3OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxNzoyOVrOGDSnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxNzoyOVrOGDSnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzkxMg==", "bodyText": "ducument -> document", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406103912", "createdAt": "2020-04-09T10:17:29Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record\n+ * (in the case of relational databases) or document (in the case of\n+ * NoSQL databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular\n+ * record or document being affected, and a <i>value</i>, which\n+ * describes the actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value.\n+ * <p>\n+ * There is also a <i>timestamp</i> which specifies the moment in time when\n+ * the event happened. This timestamp is \"real\" in the sense that it\n+ * comes from the database change-log, so it's not \"processing time\",\n+ * it's not the moment when the event was observed by our system. Keep\n+ * in mind though that not all events come from the change-log. The\n+ * change-log goes back in time only to a limited extent, all older\n+ * events are parts of a database snapshot constructed when we start\n+ * monitoring the database and their timestamps are accordingly\n+ * artificial. Identifying snapshot events is possible most of the time,\n+ * because their operation will be {@link Operation#SYNC} instead of\n+ * {@link Operation#INSERT} (one notable exception being MySQL).\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEvent extends Serializable  { //todo: use better serialization\n+\n+    /**\n+     * Convenience method, see {@link ChangeEventValue#timestamp()} for\n+     * details.\n+     */\n+    default long timestamp() throws ParsingException {\n+        return value().timestamp();\n+    }\n+\n+    /**\n+     * Convenience method, see {@link ChangeEventValue#operation()} for\n+     * details.\n+     */\n+    @Nonnull\n+    default Operation operation() throws ParsingException {\n+        return value().operation();\n+    }\n+\n+    /**\n+     * Identifies the particular record or document being affected\n+     * by the change event.\n+     */\n+    @Nonnull\n+    ChangeEventKey key();\n+\n+    /**\n+     * Describes the actual change affected on the record or ducument", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f89fb362c8f0dde6f4f51540b54bfcd9a7c7dbec"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTE2MDU2OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo0NTowM1rOGDb_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToxNTo1N1rOGE-h4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NzQ4OA==", "bodyText": "MySql -> Mysql", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406257488", "createdAt": "2020-04-09T14:45:03Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlIntegrationTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.accumulator.LongAccumulator;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.cdc.ChangeEventElement;\n+import com.hazelcast.jet.cdc.ChangeEventValue;\n+import com.hazelcast.jet.cdc.Operation;\n+import com.hazelcast.jet.cdc.ParsingException;\n+import com.hazelcast.jet.cdc.mysql.data.Customer;\n+import com.hazelcast.jet.cdc.mysql.data.Order;\n+import com.hazelcast.jet.cdc.mysql.data.OrderPrimaryKey;\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.core.JobStatus;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.jet.pipeline.test.AssertionCompletedException;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import javax.annotation.Nonnull;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Date;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static com.hazelcast.jet.cdc.Operation.DELETE;\n+import static com.hazelcast.jet.pipeline.test.AssertionSinks.assertCollectedEventually;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class MySqlIntegrationTest extends AbstractIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MTk3MQ==", "bodyText": "Same as below.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r407871971", "createdAt": "2020-04-14T05:15:57Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlIntegrationTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.accumulator.LongAccumulator;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.cdc.ChangeEventElement;\n+import com.hazelcast.jet.cdc.ChangeEventValue;\n+import com.hazelcast.jet.cdc.Operation;\n+import com.hazelcast.jet.cdc.ParsingException;\n+import com.hazelcast.jet.cdc.mysql.data.Customer;\n+import com.hazelcast.jet.cdc.mysql.data.Order;\n+import com.hazelcast.jet.cdc.mysql.data.OrderPrimaryKey;\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.core.JobStatus;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.jet.pipeline.test.AssertionCompletedException;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import javax.annotation.Nonnull;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Date;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static com.hazelcast.jet.cdc.Operation.DELETE;\n+import static com.hazelcast.jet.pipeline.test.AssertionSinks.assertCollectedEventually;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class MySqlIntegrationTest extends AbstractIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NzQ4OA=="}, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTE2MTM5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo0NToxNlrOGDb_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToxNTozOFrOGE-hmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NzYzNA==", "bodyText": "MySql -> Mysql, even though I'm not sure, JDBC connector uses this way internally.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406257634", "createdAt": "2020-04-09T14:45:16Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.cdc.impl.AbstractSourceBuilder;\n+import com.hazelcast.jet.cdc.impl.ChangeEventJsonImpl;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import org.apache.kafka.connect.data.Values;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on MySQL databases.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public final class MySqlCdcSources {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MTg5OA==", "bodyText": "Seems harder to read to me... MySQL would be the perfectly correct version, but that doesn't work with the camel-hump format, so MySql seems a good compromise. If you don't have strong feelings/arguments about it, I won't change it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r407871898", "createdAt": "2020-04-14T05:15:38Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.cdc.impl.AbstractSourceBuilder;\n+import com.hazelcast.jet.cdc.impl.ChangeEventJsonImpl;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import org.apache.kafka.connect.data.Values;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on MySQL databases.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public final class MySqlCdcSources {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NzYzNA=="}, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTE5NDEyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/GenericDebeziumIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MjowM1rOGDcUCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MjowM1rOGDcUCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2Mjc5NQ==", "bodyText": "I think this should be in the CDC core module along with the base class.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406262795", "createdAt": "2020-04-09T14:52:03Z", "author": {"login": "eminn"}, "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/GenericDebeziumIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.accumulator.LongAccumulator;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.cdc.ChangeEventElement;\n+import com.hazelcast.jet.cdc.ChangeEventValue;\n+import com.hazelcast.jet.cdc.DebeziumCdcSources;\n+import com.hazelcast.jet.cdc.Operation;\n+import com.hazelcast.jet.cdc.mysql.data.Customer;\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.core.JobStatus;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.jet.pipeline.test.AssertionCompletedException;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.concurrent.CompletionException;\n+\n+import static com.hazelcast.jet.cdc.Operation.DELETE;\n+import static com.hazelcast.jet.pipeline.test.AssertionSinks.assertCollectedEventually;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class GenericDebeziumIntegrationTest extends AbstractIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTM0OTY5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyODoxMlrOGDd37w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1MTozNVrOGDzyPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4ODM2Nw==", "bodyText": "Do we really want to make this MongoDb specific concern first class citizen of the API ? Also given the fact that we are not including it in this round.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406288367", "createdAt": "2020-04-09T15:28:12Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventValue.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Value (body) portion of a {@link ChangeEvent}, describes the actual\n+ * change that has been done to the affected database record or\n+ * document.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventValue extends ChangeEventElement {\n+\n+    /**\n+     * Specifies the moment in time when the event happened. This\n+     * timestamp is \"real\" in the sense that it comes from the database\n+     * change-log, so it's not \"processing time\", it's not the moment\n+     * when the event was observed by our system. Keep in mind though\n+     * that not all events come from the change-log. The change-log goes\n+     * back in time only to a limited extent, all older events are parts\n+     * of a database snapshot constructed when we start monitoring the\n+     * database and their timestamps are accordingly artificial.\n+     * Identifying snapshot events is possible most of the time, because\n+     * their operation will be {@link Operation#SYNC} instead of\n+     * {@link Operation#INSERT} (one notable exception being MySQL).\n+     *\n+     * @throws ParsingException if no parsable timestamp field present\n+     */\n+    long timestamp() throws ParsingException;\n+\n+    /**\n+     * Specifies the type of change being described (insertion, delete or\n+     * update). Only some special events, like heartbeats don't have an\n+     * operation value.\n+     *\n+     * @return {@link Operation#UNSPECIFIED} if this {@code ChangeEventValue}\n+     * doesn't have an operation field or appropriate {@link Operation}\n+     * that matches what's found in the operation field\n+     * @throws ParsingException if there is an operation field, but it's\n+     *                          value is not among the handled ones.\n+     */\n+    @Nonnull\n+    Operation operation() throws ParsingException;\n+\n+    /**\n+     * Describes how the database record or document looked like BEFORE\n+     * applying the change event. Not provided for MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have a 'before' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement before() throws ParsingException;\n+\n+    /**\n+     * Describes how the database record or document looks like AFTER\n+     * the change event has been applied. Not provided for MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have an 'after' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement after() throws ParsingException;\n+\n+    /**\n+     * Describes the change being done by the event. Only used by\n+     * MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have an 'patch' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement change() throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk3Mg==", "bodyText": "Assuming I remove it, what will I do when I do want to include Mongo later? Just add the method then, would that be ok?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406629972", "createdAt": "2020-04-10T06:57:23Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventValue.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Value (body) portion of a {@link ChangeEvent}, describes the actual\n+ * change that has been done to the affected database record or\n+ * document.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventValue extends ChangeEventElement {\n+\n+    /**\n+     * Specifies the moment in time when the event happened. This\n+     * timestamp is \"real\" in the sense that it comes from the database\n+     * change-log, so it's not \"processing time\", it's not the moment\n+     * when the event was observed by our system. Keep in mind though\n+     * that not all events come from the change-log. The change-log goes\n+     * back in time only to a limited extent, all older events are parts\n+     * of a database snapshot constructed when we start monitoring the\n+     * database and their timestamps are accordingly artificial.\n+     * Identifying snapshot events is possible most of the time, because\n+     * their operation will be {@link Operation#SYNC} instead of\n+     * {@link Operation#INSERT} (one notable exception being MySQL).\n+     *\n+     * @throws ParsingException if no parsable timestamp field present\n+     */\n+    long timestamp() throws ParsingException;\n+\n+    /**\n+     * Specifies the type of change being described (insertion, delete or\n+     * update). Only some special events, like heartbeats don't have an\n+     * operation value.\n+     *\n+     * @return {@link Operation#UNSPECIFIED} if this {@code ChangeEventValue}\n+     * doesn't have an operation field or appropriate {@link Operation}\n+     * that matches what's found in the operation field\n+     * @throws ParsingException if there is an operation field, but it's\n+     *                          value is not among the handled ones.\n+     */\n+    @Nonnull\n+    Operation operation() throws ParsingException;\n+\n+    /**\n+     * Describes how the database record or document looked like BEFORE\n+     * applying the change event. Not provided for MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have a 'before' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement before() throws ParsingException;\n+\n+    /**\n+     * Describes how the database record or document looks like AFTER\n+     * the change event has been applied. Not provided for MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have an 'after' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement after() throws ParsingException;\n+\n+    /**\n+     * Describes the change being done by the event. Only used by\n+     * MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have an 'patch' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement change() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4ODM2Nw=="}, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzM1OQ==", "bodyText": "No, maybe from scratch mongo source can emit a different event which contains patch and filter fields in case of an update event.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406647359", "createdAt": "2020-04-10T07:51:35Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventValue.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Value (body) portion of a {@link ChangeEvent}, describes the actual\n+ * change that has been done to the affected database record or\n+ * document.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventValue extends ChangeEventElement {\n+\n+    /**\n+     * Specifies the moment in time when the event happened. This\n+     * timestamp is \"real\" in the sense that it comes from the database\n+     * change-log, so it's not \"processing time\", it's not the moment\n+     * when the event was observed by our system. Keep in mind though\n+     * that not all events come from the change-log. The change-log goes\n+     * back in time only to a limited extent, all older events are parts\n+     * of a database snapshot constructed when we start monitoring the\n+     * database and their timestamps are accordingly artificial.\n+     * Identifying snapshot events is possible most of the time, because\n+     * their operation will be {@link Operation#SYNC} instead of\n+     * {@link Operation#INSERT} (one notable exception being MySQL).\n+     *\n+     * @throws ParsingException if no parsable timestamp field present\n+     */\n+    long timestamp() throws ParsingException;\n+\n+    /**\n+     * Specifies the type of change being described (insertion, delete or\n+     * update). Only some special events, like heartbeats don't have an\n+     * operation value.\n+     *\n+     * @return {@link Operation#UNSPECIFIED} if this {@code ChangeEventValue}\n+     * doesn't have an operation field or appropriate {@link Operation}\n+     * that matches what's found in the operation field\n+     * @throws ParsingException if there is an operation field, but it's\n+     *                          value is not among the handled ones.\n+     */\n+    @Nonnull\n+    Operation operation() throws ParsingException;\n+\n+    /**\n+     * Describes how the database record or document looked like BEFORE\n+     * applying the change event. Not provided for MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have a 'before' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement before() throws ParsingException;\n+\n+    /**\n+     * Describes how the database record or document looks like AFTER\n+     * the change event has been applied. Not provided for MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have an 'after' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement after() throws ParsingException;\n+\n+    /**\n+     * Describes the change being done by the event. Only used by\n+     * MongoDB updates.\n+     *\n+     * @throws ParsingException if this {@code ChangeEventValue} doesn't\n+     *                          have an 'patch' sub-element\n+     */\n+    @Nonnull\n+    ChangeEventElement change() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4ODM2Nw=="}, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjM5MTkwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNTozMlrOGDoKYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNTozMlrOGDoKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NjkzMQ==", "bodyText": "effort", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406456931", "createdAt": "2020-04-09T20:25:32Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * For databases providing standard JSON syntax, parsing it is based\n+     * on <a href=\"https://github.com/FasterXML/jackson-databind\">Jackson Databind</a>,\n+     * in particular on the Jackson {@code ObjectMapper}, so the\n+     * parameter class needs to be annotated accordingly.\n+     * <p>\n+     * Certain databases have limitations, for example MongoDB, which\n+     * uses an extended JSON syntax, mapping is only supported to\n+     * instances of the {@code org.bson.Document} class.\n+     *\n+     * @return optional {@code Object} value, which is empty only if\n+     * the specified key is not found or if it's value is null\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T mapToObj(Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Best effor method for finding the specified (top level) key in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjM5NzcwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/HazelcastListDatabaseHistory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNzoyMVrOGDoOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo1ODowMFrOGE_Tgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1Nzg2Mg==", "bodyText": "I think we can move this to impl package and make it package private", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r406457862", "createdAt": "2020-04-09T20:27:21Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.internal.util.Preconditions;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.1\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NDY3NQ==", "bodyText": "Have moved it, but it has to remain public (I think it's is being used via reflection).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r407884675", "createdAt": "2020-04-14T05:58:00Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.internal.util.Preconditions;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.1\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1Nzg2Mg=="}, "originalCommit": {"oid": "5859544b4557013d8ac2bf5c067c517d60e0483a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTc4MjI0OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozMjo1MVrOGNRrrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTowNzo0MFrOGOggIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NDM4MA==", "bodyText": "Could you please explain what is the heartbeat events ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r416574380", "createdAt": "2020-04-28T12:32:51Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record\n+ * (in the case of relational databases) or document (in the case of\n+ * NoSQL databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular\n+ * record or document being affected, and a <i>value</i>, which\n+ * describes the actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MTYwNg==", "bodyText": "If you set heartbeat.interval.ms in the Debezium connectors' config (not just the MySQL one, but in general), they will produce periodic heartbeat events. I haven't exposed this in our sources, but it's possible to enable (via com.hazelcast.jet.cdc.impl.AbstractSourceBuilder.setCustomProperty) and encounter them while using CDC via Jet. But is it worth a more than cursory mention in our Javadoc? Don't know. They get some mention, because they are the reason Operation.UNSPECIFIED exists... What would you like me to change?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417071606", "createdAt": "2020-04-29T05:17:31Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record\n+ * (in the case of relational databases) or document (in the case of\n+ * NoSQL databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular\n+ * record or document being affected, and a <i>value</i>, which\n+ * describes the actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NDM4MA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyNjAwOA==", "bodyText": "I see, I mean we can at least provide a link to it's definition and configuration ? I'm also fine if the explanation above present in Javadoc", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417126008", "createdAt": "2020-04-29T07:46:01Z", "author": {"login": "eminn"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record\n+ * (in the case of relational databases) or document (in the case of\n+ * NoSQL databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular\n+ * record or document being affected, and a <i>value</i>, which\n+ * describes the actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NDM4MA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg2NTc2MQ==", "bodyText": "Ok. I don't want to explain too much, because I don't want to encourage anybody to use the heartbeats in Jet, but will add some clarifications.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417865761", "createdAt": "2020-04-30T09:07:40Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record\n+ * (in the case of relational databases) or document (in the case of\n+ * NoSQL databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular\n+ * record or document being affected, and a <i>value</i>, which\n+ * describes the actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NDM4MA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk5NjczOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToxODoxMVrOGNwCgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTo0NzozOVrOGNwhfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MTc0NQ==", "bodyText": "should be called just debezium I think", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417071745", "createdAt": "2020-04-29T05:18:11Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/pom.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-core</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NzU3Mw==", "bodyText": "Why? Isn't Debezium an implementation detail which we might replace in the future? Or at least aren't we striving towards that goal?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417077573", "createdAt": "2020-04-29T05:40:08Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/pom.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-core</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-core</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MTc0NQ=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3OTY3Nw==", "bodyText": "Ok, so as discussed will change this to cdc-debezium.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417079677", "createdAt": "2020-04-29T05:47:39Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/pom.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-core</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-core</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MTc0NQ=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk5NzU4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToxODo0M1rOGNwDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToxODo0M1rOGNwDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MTg3NQ==", "bodyText": "I don't think hypens are allowed in module names", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417071875", "createdAt": "2020-04-29T05:18:43Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/pom.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-core</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-core</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.2-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <jackson.databind.version>2.10.3</jackson.databind.version>\n+        <kafka.connect.version>2.3.1</kafka.connect.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+        <slf4j.version>1.7.26</slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-core</Automatic-Module-Name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk5OTMzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToxOTo0MVrOGNwD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToxOTo0MVrOGNwD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MjEwOA==", "bodyText": "we could probably move this to extensions/pom.xml , since all extensions depend on it", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417072108", "createdAt": "2020-04-29T05:19:41Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/pom.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-core</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-core</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.2-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <jackson.databind.version>2.10.3</jackson.databind.version>\n+        <kafka.connect.version>2.3.1</kafka.connect.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+        <slf4j.version>1.7.26</slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc-core</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-api</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-transforms</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-core</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${jackson.databind.version}</version>\n+        </dependency>\n+\n+        <!-- TEST -->\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAwNTYyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyMjoxN1rOGNwHJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1NTozMFrOGOgD8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MjkzNA==", "bodyText": "how is ChangeEventElement different than JsonNode? I don't see anything specific to a ChangeEvent in this interface", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417072934", "createdAt": "2020-04-29T05:22:17Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NjY5MQ==", "bodyText": "Made more sense when we didn't yet exclude MongoDB. There it had nothing to do with JsonNode. But even now, do we really want to have JsonNode in our API? Even if we do the same thing?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417076691", "createdAt": "2020-04-29T05:36:42Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MjkzNA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NzE5Mw==", "bodyText": "I don't see an issue, it's well documented and has more capabilities? I believe we are going to be shading Jackson as part of our public API?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417077193", "createdAt": "2020-04-29T05:38:42Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MjkzNA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1ODU0NA==", "bodyText": "This is not exactly how I ended up, JsonNode is gone too now, since moving to Jackson jr, but ChangeEventElement is greatly simplified now, we no longer implement parsing shenanigans, everything is in Jackson code. Take a look if you can.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417858544", "createdAt": "2020-04-30T08:55:30Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MjkzNA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAwNzgxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/AbstractSourceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyMzozOVrOGNwIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozODo1MlrOGNwX6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MzI3MA==", "bodyText": "why you would need this?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417073270", "createdAt": "2020-04-29T05:23:39Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/AbstractSourceBuilder.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Properties;\n+\n+public abstract class AbstractSourceBuilder<SELF extends AbstractSourceBuilder<SELF>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NzIyNg==", "bodyText": "Initially I was expecting a lot of common functionality in the builders of the various sources, but it wasn't so, due to lots of subtle differences. But, the generic method for setting any kind of Debezium property is common and some other internal code. Do you think it would be better not to have it?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417077226", "createdAt": "2020-04-29T05:38:52Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/AbstractSourceBuilder.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Properties;\n+\n+public abstract class AbstractSourceBuilder<SELF extends AbstractSourceBuilder<SELF>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MzI3MA=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAwOTcwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyNDoyOFrOGNwJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToyOTo0NVrOGOhS1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MzUyMw==", "bodyText": "how do these lists get cleaned up?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417073523", "createdAt": "2020-04-29T05:24:28Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.internal.util.Preconditions;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.1\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3OTg4Nw==", "bodyText": "No idea, this was code I inherited and never thought of checking. Will do so now.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417079887", "createdAt": "2020-04-29T05:48:33Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.internal.util.Preconditions;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.1\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MzUyMw=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3ODc0MA==", "bodyText": "Fixed clean-up in it (has a stop() method, which is called by the connector and the list will be destroyed there).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417878740", "createdAt": "2020-04-30T09:29:45Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.internal.util.Preconditions;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.1\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MzUyMw=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAxMjMyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/PropertyRules.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyNjowNFrOGNwK9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNToyNjowNFrOGNwK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MzkwOA==", "bodyText": "should be required", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417073908", "createdAt": "2020-04-29T05:26:04Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/impl/PropertyRules.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class PropertyRules {\n+\n+    private final Set<String> mandatories = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAxOTc4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMDoxM1rOGNwPEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1Njo1NVrOGOgHjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDk2MQ==", "bodyText": "keep in mind when you return Optional, it's creating more garbage", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417074961", "createdAt": "2020-04-29T05:30:13Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * For databases providing standard JSON syntax, parsing it is based\n+     * on <a\n+     * href=\"https://github.com/FasterXML/jackson-databind\">Jackson\n+     * Databind</a>, in particular on the Jackson {@code ObjectMapper},\n+     * so the parameter class needs to be annotated accordingly.\n+     *\n+     * @return optional {@code Object} value, which is empty only if the\n+     * specified key is not found or if it's value is null\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T mapToObj(Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Returns the value of the specified (top level) key in the\n+     * underlying JSON message as a child {@code ChangeEventElement}.\n+     *\n+     * @return optional {@code ChangeEventElement}, which is empty if\n+     * the specified key is not found or if the value is null.\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    Optional<ChangeEventElement> getChild(String key) throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA4MDY1OQ==", "bodyText": "I know, but I wanted to keep ParsingException for actual parsing errors... maybe use NoSuchElementException instead of some Optionals + some hasXXX where absolutely necessary? will give it a try", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417080659", "createdAt": "2020-04-29T05:51:19Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * For databases providing standard JSON syntax, parsing it is based\n+     * on <a\n+     * href=\"https://github.com/FasterXML/jackson-databind\">Jackson\n+     * Databind</a>, in particular on the Jackson {@code ObjectMapper},\n+     * so the parameter class needs to be annotated accordingly.\n+     *\n+     * @return optional {@code Object} value, which is empty only if the\n+     * specified key is not found or if it's value is null\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T mapToObj(Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Returns the value of the specified (top level) key in the\n+     * underlying JSON message as a child {@code ChangeEventElement}.\n+     *\n+     * @return optional {@code ChangeEventElement}, which is empty if\n+     * the specified key is not found or if the value is null.\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    Optional<ChangeEventElement> getChild(String key) throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDk2MQ=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1OTQ2OQ==", "bodyText": "All Optionals are gone now, together with any parsing code of our own.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417859469", "createdAt": "2020-04-30T08:56:55Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * For databases providing standard JSON syntax, parsing it is based\n+     * on <a\n+     * href=\"https://github.com/FasterXML/jackson-databind\">Jackson\n+     * Databind</a>, in particular on the Jackson {@code ObjectMapper},\n+     * so the parameter class needs to be annotated accordingly.\n+     *\n+     * @return optional {@code Object} value, which is empty only if the\n+     * specified key is not found or if it's value is null\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T mapToObj(Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Returns the value of the specified (top level) key in the\n+     * underlying JSON message as a child {@code ChangeEventElement}.\n+     *\n+     * @return optional {@code ChangeEventElement}, which is empty if\n+     * the specified key is not found or if the value is null.\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    Optional<ChangeEventElement> getChild(String key) throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDk2MQ=="}, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAyMTE3OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMTowNlrOGNwP6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMTowNlrOGNwP6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NTE3OA==", "bodyText": "missing annotations (same for other methods)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417075178", "createdAt": "2020-04-29T05:31:06Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * For databases providing standard JSON syntax, parsing it is based\n+     * on <a\n+     * href=\"https://github.com/FasterXML/jackson-databind\">Jackson\n+     * Databind</a>, in particular on the Jackson {@code ObjectMapper},\n+     * so the parameter class needs to be annotated accordingly.\n+     *\n+     * @return optional {@code Object} value, which is empty only if the\n+     * specified key is not found or if it's value is null\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T mapToObj(Class<T> clazz) throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAyMTg5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/DebeziumCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMToyMFrOGNwQSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMToyMFrOGNwQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NTI3Mw==", "bodyText": "missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417075273", "createdAt": "2020-04-29T05:31:20Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/DebeziumCdcSources.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.impl.AbstractSourceBuilder;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ *\n+ * @since 4.1\n+ */\n+@EvolvingApi\n+public final class DebeziumCdcSources {\n+\n+    private DebeziumCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from your Debezium\n+     * supported database to the Hazelcast Jet pipeline.\n+     *\n+     * @param name       name of this source, needs to be unique, will be\n+     *                   passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    public static Builder debezium(String name, String connectorClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTAyMjMyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/Operation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMTozNlrOGNwQjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozMTozNlrOGNwQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NTM0MQ==", "bodyText": "4.2", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r417075341", "createdAt": "2020-04-29T05:31:36Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-core/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfbf3c2d3912de73ede62bbb70747382608db9f8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUxODkyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0NDoxM1rOGOvP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoyMjozOVrOGP6frg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNzM0OA==", "bodyText": "wouldn't it be better to just use toString() here?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418107348", "createdAt": "2020-04-30T15:44:13Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;\n+\n+    /**\n+     * Returns raw JSON string which the content of this event element\n+     * is based on. To be used when parsing fails for some reason (for\n+     * example on some untested DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0ODQ0NQ==", "bodyText": "In my opinion no, because a separate method can provide a clear contract and format of the String it returns, while people would not expect that much from toString(). As far as I know it's good design not to rely on any particular format of what toString() provides. I would not use toString() for this, even though we could.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419248445", "createdAt": "2020-05-04T07:15:38Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;\n+\n+    /**\n+     * Returns raw JSON string which the content of this event element\n+     * is based on. To be used when parsing fails for some reason (for\n+     * example on some untested DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNzM0OA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0ODc2NQ==", "bodyText": "I would even prefer to remove the asJson method completely to using toString().", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419248765", "createdAt": "2020-05-04T07:16:27Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;\n+\n+    /**\n+     * Returns raw JSON string which the content of this event element\n+     * is based on. To be used when parsing fails for some reason (for\n+     * example on some untested DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNzM0OA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1MDg4MQ==", "bodyText": "If JSON is the primary representation, it can be OK to use toString for it. An overriding method can narrow down the contract of toString, there are precedents for this in the JDK. toString can also delegate to asJson.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419250881", "createdAt": "2020-05-04T07:21:28Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;\n+\n+    /**\n+     * Returns raw JSON string which the content of this event element\n+     * is based on. To be used when parsing fails for some reason (for\n+     * example on some untested DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNzM0OA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMyMDM4NA==", "bodyText": "Ok. toString() already delegates to asJson(). Beyond that I prefer to keep asJson(), but am ok with both versions. Pls. decide.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419320384", "createdAt": "2020-05-04T09:42:29Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;\n+\n+    /**\n+     * Returns raw JSON string which the content of this event element\n+     * is based on. To be used when parsing fails for some reason (for\n+     * example on some untested DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNzM0OA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM0MDIwNg==", "bodyText": "I'm OK with both methods.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419340206", "createdAt": "2020-05-04T10:22:39Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;\n+\n+    /**\n+     * Returns raw JSON string which the content of this event element\n+     * is based on. To be used when parsing fails for some reason (for\n+     * example on some untested DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNzM0OA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUzMTUxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0NzoxN1rOGOvYFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzozODo1M1rOGP1gYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwOTQ2Mw==", "bodyText": "javadoc seems outdated", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418109463", "createdAt": "2020-04-30T15:47:17Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1ODQ2Ng==", "bodyText": "Yes, seems like I forgot about a few javadoc, changing.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419258466", "createdAt": "2020-05-04T07:38:53Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwOTQ2Mw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUzNDYxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0ODowNFrOGOvaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0ODowNFrOGOvaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwOTk5MQ==", "bodyText": "I would prefer ChangeRecord", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418109991", "createdAt": "2020-04-30T15:48:04Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record (in the\n+ * case of relational databases) or document (in the case of NoSQL\n+ * databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular record\n+ * or document being affected, and a <i>value</i>, which describes the\n+ * actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value. (Heartbeat events are not\n+ * something we encourage the usage of, but since no functionality of\n+ * the underlying Debezium connectors is disabled they are still\n+ * theoretically possible to enable and be observed in Jet.)\n+ * <p>\n+ * There is also a <i>timestamp</i> which specifies the moment in time\n+ * when the event happened. This timestamp is \"real\" in the sense that\n+ * it comes from the database change-log, so it's not \"processing time\",\n+ * it's not the moment when the event was observed by our system. Keep\n+ * in mind though that not all events come from the change-log. The\n+ * change-log goes back in time only to a limited extent, all older\n+ * events are parts of a database snapshot constructed when we start\n+ * monitoring the database and their timestamps are accordingly\n+ * artificial. Identifying snapshot events is possible most of the time,\n+ * because their operation will be {@link Operation#SYNC} instead of\n+ * {@link Operation#INSERT} (one notable exception being MySQL).\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU1MzUxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1MjoxNVrOGOvl0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1MjoxNVrOGOvl0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMjk3Ng==", "bodyText": "this name should be changed to. something like RecordPart ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418112976", "createdAt": "2020-04-30T15:52:15Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU1NjY0OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeEventElementJsonImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1Mjo1NlrOGOvnyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzozODoyMVrOGP1feg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzQ4Mw==", "bodyText": "what's the point of rethrowing here? what's wrong with IOException?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418113483", "createdAt": "2020-04-30T15:52:56Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeEventElementJsonImpl.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.fasterxml.jackson.jr.annotationsupport.JacksonAnnotationExtension;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.hazelcast.jet.cdc.ChangeEventElement;\n+import com.hazelcast.jet.cdc.ParsingException;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+class ChangeEventElementJsonImpl implements ChangeEventElement, IdentifiedDataSerializable {\n+\n+    private static final JSON J = JSON.builder().register(JacksonAnnotationExtension.std).build();\n+\n+    private String json;\n+    private Map<String, Object> content;\n+\n+    ChangeEventElementJsonImpl() { //needed for deserialization\n+    }\n+\n+    ChangeEventElementJsonImpl(@Nonnull String json) {\n+        this.json = Objects.requireNonNull(json);\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException {\n+        Objects.requireNonNull(clazz, \"class\");\n+        try {\n+            return J.beanFrom(clazz, json);\n+        } catch (IOException e) {\n+            throw new ParsingException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1ODIzNA==", "bodyText": "I use ParsingException to signal various failures in parsing, which in my mind is not I/O (failing to receive the JSON string from somewhere, that would be I/O, parsing it after it's in memory, that doesn't seem to be... arguable).\nAnyways, beyond my rumblings, IOException is too generic, even Jackson jr have their own JsonProcessingException.\nI can change it if you feel strongly about it, I don't mind, just wanted to clarify my reasoning.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419258234", "createdAt": "2020-05-04T07:38:21Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeEventElementJsonImpl.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.fasterxml.jackson.jr.annotationsupport.JacksonAnnotationExtension;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.hazelcast.jet.cdc.ChangeEventElement;\n+import com.hazelcast.jet.cdc.ParsingException;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+class ChangeEventElementJsonImpl implements ChangeEventElement, IdentifiedDataSerializable {\n+\n+    private static final JSON J = JSON.builder().register(JacksonAnnotationExtension.std).build();\n+\n+    private String json;\n+    private Map<String, Object> content;\n+\n+    ChangeEventElementJsonImpl() { //needed for deserialization\n+    }\n+\n+    ChangeEventElementJsonImpl(@Nonnull String json) {\n+        this.json = Objects.requireNonNull(json);\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException {\n+        Objects.requireNonNull(clazz, \"class\");\n+        try {\n+            return J.beanFrom(clazz, json);\n+        } catch (IOException e) {\n+            throw new ParsingException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzQ4Mw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU3OTc4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/AbstractSourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1ODozOFrOGOv3GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1ODozOFrOGOv3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzQwMA==", "bodyText": "this is a private class but extended by a public one. You can just convert this class to non-abstract and use it inside the actual builders, then you don't need this SELF either.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418117400", "createdAt": "2020-04-30T15:58:38Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/AbstractSourceBuilder.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+public abstract class AbstractSourceBuilder<SELF extends AbstractSourceBuilder<SELF>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU3MTI5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NjowOFrOGO5toQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NjowOFrOGO5toQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3ODgxNw==", "bodyText": "toObject", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418278817", "createdAt": "2020-04-30T20:46:08Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU3MTY4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NjoxNFrOGO5t2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0NjoxNFrOGO5t2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3ODg3NQ==", "bodyText": "toMap", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418278875", "createdAt": "2020-04-30T20:46:14Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEventElement.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Map;\n+\n+/**\n+ * Arbitrary part of a {@link ChangeEvent}, as big as the whole body or\n+ * as small as a single patch expression, based on a complete JSON\n+ * expression. Contains various methods for retrieving component values\n+ * or for mapping itself to data objects.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEventElement {\n+\n+    /**\n+     * Maps the entire element to an instance of the specified class.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * with <a href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">annotation support</a>,\n+     * so the parameter class can be annotated accordingly.\n+     *\n+     * @return object of type {@code T}, obtained as the result of the\n+     * mapping\n+     * @throws ParsingException if the whole structure containing this\n+     *                          element is unparsable or the mapping\n+     *                          fails to produce a result\n+     */\n+    @Nonnull\n+    <T> T asPojo(@Nonnull Class<T> clazz) throws ParsingException;\n+\n+    /**\n+     * Presents a parsed form of the underlying JSON message, as a\n+     * {@code Map}. The keys in the map are the top level fields from\n+     * the JSON and the values can range from simple strings, numbers,\n+     * collections and sub-maps.\n+     * <p>\n+     * Parsing it is based on <a href=\"https://github.com/FasterXML/jackson-jr\">Jackson jr</a>,\n+     * that's where further details can be found.\n+     *\n+     * @return {@code Map} representation of the JSON data\n+     * @throws ParsingException if the underlying JSON message, or any\n+     *                          of its parent messages are unparsable\n+     */\n+    @Nonnull\n+    Map<String, Object> asMap() throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU3ODQxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo0ODozM1rOGO5yLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoxNjo0N1rOGP6U0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3OTk4Mw==", "bodyText": "probably non-issue for now, but doesn't this mean we always force conversion to JSON rather than being able to access the Struct directly?  maybe worth thinking about in the future.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418279983", "createdAt": "2020-04-30T20:48:33Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> smt;\n+\n+    /**\n+     * Key represents the partition which the record originated from. Value\n+     * represents the offset within that partition. Kafka Connect represents\n+     * the partition and offset as arbitrary values so that is why it is\n+     * stored as map.\n+     * See {@link SourceRecord} for more information regarding the format.\n+     */\n+    private Map<Map<String, ?>, Map<String, ?>> partitionsToOffset = new HashMap<>();\n+    private boolean taskInit;\n+\n+    CdcSource(Processor.Context ctx, Properties properties) {\n+        try {\n+            String connectorClazz = properties.getProperty(\"connector.class\");\n+            Class<?> connectorClass = Thread.currentThread().getContextClassLoader().loadClass(connectorClazz);\n+            connector = (SourceConnector) connectorClass.getConstructor().newInstance();\n+            connector.initialize(new JetConnectorContext());\n+            connector.start((Map) injectHazelcastInstanceNameProperty(ctx, properties));\n+\n+            smt = initSmt();\n+\n+            taskConfig = connector.taskConfigs(1).get(0);\n+            task = (SourceTask) connector.taskClass().getConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<ChangeEvent> buf) {\n+        if (!taskInit) {\n+            task.initialize(new JetSourceTaskContext());\n+            task.start(taskConfig);\n+            taskInit = true;\n+        }\n+        try {\n+            List<SourceRecord> records = task.poll();\n+            if (records == null) {\n+                return;\n+            }\n+\n+            for (SourceRecord record : records) {\n+                boolean added = addToBuffer(record, buf);\n+                if (added) {\n+                    partitionsToOffset.put(record.sourcePartition(), record.sourceOffset());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    private boolean addToBuffer(SourceRecord record, SourceBuilder.TimestampedSourceBuffer<ChangeEvent> buf) {\n+        record = smt.apply(record);\n+        if (record != null) {\n+            ChangeEvent event = extractEvent(record);\n+            long timestamp = extractTimestamp(record);\n+            buf.add(event, timestamp);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void destroy() {\n+        try {\n+            task.stop();\n+        } finally {\n+            connector.stop();\n+        }\n+    }\n+\n+    public Map<Map<String, ?>, Map<String, ?>> createSnapshot() {\n+        return partitionsToOffset;\n+    }\n+\n+    public void restoreSnapshot(List<Map<Map<String, ?>, Map<String, ?>>> snapshots) {\n+        this.partitionsToOffset = snapshots.get(0);\n+    }\n+\n+    private static ExtractNewRecordState<SourceRecord> initSmt() {\n+        ExtractNewRecordState<SourceRecord> smt = new ExtractNewRecordState<>();\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"add.fields\", \"op, ts_ms\");\n+        config.put(\"delete.handling.mode\", \"rewrite\");\n+        smt.configure(config);\n+\n+        return smt;\n+    }\n+\n+    private static ChangeEvent extractEvent(SourceRecord record) {\n+        String keyJson = Values.convertToString(record.keySchema(), record.key());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzNzQyNg==", "bodyText": "Yes, it does. But Struct is on hand Kafka Connect code and on the other hand terribly hard to work with. So I don't think we will ever want to directly work with it. But if we will at some point, we can change this and other implementation stuff, it's not exposed.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419337426", "createdAt": "2020-05-04T10:16:47Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> smt;\n+\n+    /**\n+     * Key represents the partition which the record originated from. Value\n+     * represents the offset within that partition. Kafka Connect represents\n+     * the partition and offset as arbitrary values so that is why it is\n+     * stored as map.\n+     * See {@link SourceRecord} for more information regarding the format.\n+     */\n+    private Map<Map<String, ?>, Map<String, ?>> partitionsToOffset = new HashMap<>();\n+    private boolean taskInit;\n+\n+    CdcSource(Processor.Context ctx, Properties properties) {\n+        try {\n+            String connectorClazz = properties.getProperty(\"connector.class\");\n+            Class<?> connectorClass = Thread.currentThread().getContextClassLoader().loadClass(connectorClazz);\n+            connector = (SourceConnector) connectorClass.getConstructor().newInstance();\n+            connector.initialize(new JetConnectorContext());\n+            connector.start((Map) injectHazelcastInstanceNameProperty(ctx, properties));\n+\n+            smt = initSmt();\n+\n+            taskConfig = connector.taskConfigs(1).get(0);\n+            task = (SourceTask) connector.taskClass().getConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<ChangeEvent> buf) {\n+        if (!taskInit) {\n+            task.initialize(new JetSourceTaskContext());\n+            task.start(taskConfig);\n+            taskInit = true;\n+        }\n+        try {\n+            List<SourceRecord> records = task.poll();\n+            if (records == null) {\n+                return;\n+            }\n+\n+            for (SourceRecord record : records) {\n+                boolean added = addToBuffer(record, buf);\n+                if (added) {\n+                    partitionsToOffset.put(record.sourcePartition(), record.sourceOffset());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    private boolean addToBuffer(SourceRecord record, SourceBuilder.TimestampedSourceBuffer<ChangeEvent> buf) {\n+        record = smt.apply(record);\n+        if (record != null) {\n+            ChangeEvent event = extractEvent(record);\n+            long timestamp = extractTimestamp(record);\n+            buf.add(event, timestamp);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void destroy() {\n+        try {\n+            task.stop();\n+        } finally {\n+            connector.stop();\n+        }\n+    }\n+\n+    public Map<Map<String, ?>, Map<String, ?>> createSnapshot() {\n+        return partitionsToOffset;\n+    }\n+\n+    public void restoreSnapshot(List<Map<Map<String, ?>, Map<String, ?>>> snapshots) {\n+        this.partitionsToOffset = snapshots.get(0);\n+    }\n+\n+    private static ExtractNewRecordState<SourceRecord> initSmt() {\n+        ExtractNewRecordState<SourceRecord> smt = new ExtractNewRecordState<>();\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"add.fields\", \"op, ts_ms\");\n+        config.put(\"delete.handling.mode\", \"rewrite\");\n+        smt.configure(config);\n+\n+        return smt;\n+    }\n+\n+    private static ChangeEvent extractEvent(SourceRecord record) {\n+        String keyJson = Values.convertToString(record.keySchema(), record.key());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3OTk4Mw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU4NDc2OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MDoxMVrOGO51ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoyNTo1NFrOGQdZlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MDg5OQ==", "bodyText": "does this mean we lose the history once the job stops / is suspended? how is this used?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418280899", "createdAt": "2020-04-30T20:50:11Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    /**\n+     * Hazelcast IList {@link IList} name property.\n+     */\n+    public static final String LIST_NAME_PROPERTY = \"database.history.hazelcast.list.name\";\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;\n+\n+    @Override\n+    public void configure(Configuration config, HistoryRecordComparator comparator,\n+                          DatabaseHistoryListener listener, boolean useCatalogBeforeSchema) {\n+        super.configure(config, comparator, listener, useCatalogBeforeSchema);\n+\n+        instanceName = config.getString(\"database.history.hazelcast.instance.name\");\n+        Objects.requireNonNull(instanceName, \"instance name\");\n+\n+        listName = config.getString(LIST_NAME_PROPERTY);\n+        Objects.requireNonNull(listName, \"list name\");\n+    }\n+\n+    @Override\n+    public void start() {\n+        super.start();\n+\n+        HazelcastInstance instance = HazelcastInstanceFactory.getHazelcastInstance(instanceName);\n+        list = instance.getList(listName);\n+    }\n+\n+\n+    @Override\n+    protected void storeRecord(HistoryRecord historyRecord) throws DatabaseHistoryException {\n+        list.add(DocumentWriter.defaultWriter().writeAsBytes(historyRecord.document()));\n+    }\n+\n+    @Override\n+    protected void recoverRecords(Consumer<HistoryRecord> consumer) {\n+        try {\n+            for (byte[] r : list) {\n+                Document doc = DocumentReader.defaultReader().read(r);\n+                consumer.accept(new HistoryRecord(doc));\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        super.stop();\n+        list.destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MjY1Ng==", "bodyText": "Yeah, this was wrong. I've lost test I had for job restart when I've split the PR branch in two. Have put it back now. For now I've removed the list.destroy() from the above stop() method. It works properly now, but there is again no clean-up for the list. Have to think about that a bit more, figure out what to do.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419382656", "createdAt": "2020-05-04T11:56:41Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    /**\n+     * Hazelcast IList {@link IList} name property.\n+     */\n+    public static final String LIST_NAME_PROPERTY = \"database.history.hazelcast.list.name\";\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;\n+\n+    @Override\n+    public void configure(Configuration config, HistoryRecordComparator comparator,\n+                          DatabaseHistoryListener listener, boolean useCatalogBeforeSchema) {\n+        super.configure(config, comparator, listener, useCatalogBeforeSchema);\n+\n+        instanceName = config.getString(\"database.history.hazelcast.instance.name\");\n+        Objects.requireNonNull(instanceName, \"instance name\");\n+\n+        listName = config.getString(LIST_NAME_PROPERTY);\n+        Objects.requireNonNull(listName, \"list name\");\n+    }\n+\n+    @Override\n+    public void start() {\n+        super.start();\n+\n+        HazelcastInstance instance = HazelcastInstanceFactory.getHazelcastInstance(instanceName);\n+        list = instance.getList(listName);\n+    }\n+\n+\n+    @Override\n+    protected void storeRecord(HistoryRecord historyRecord) throws DatabaseHistoryException {\n+        list.add(DocumentWriter.defaultWriter().writeAsBytes(historyRecord.document()));\n+    }\n+\n+    @Override\n+    protected void recoverRecords(Consumer<HistoryRecord> consumer) {\n+        try {\n+            for (byte[] r : list) {\n+                Document doc = DocumentReader.defaultReader().read(r);\n+                consumer.accept(new HistoryRecord(doc));\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        super.stop();\n+        list.destroy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MDg5OQ=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MzM1NQ==", "bodyText": "I think I'll have to give these lists a job specific name and clean them up the same way snapshot maps are cleaned up in JobRepository.cleanup(). Let's see, will reexamine with a fresh mind.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419393355", "createdAt": "2020-05-04T12:18:18Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    /**\n+     * Hazelcast IList {@link IList} name property.\n+     */\n+    public static final String LIST_NAME_PROPERTY = \"database.history.hazelcast.list.name\";\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;\n+\n+    @Override\n+    public void configure(Configuration config, HistoryRecordComparator comparator,\n+                          DatabaseHistoryListener listener, boolean useCatalogBeforeSchema) {\n+        super.configure(config, comparator, listener, useCatalogBeforeSchema);\n+\n+        instanceName = config.getString(\"database.history.hazelcast.instance.name\");\n+        Objects.requireNonNull(instanceName, \"instance name\");\n+\n+        listName = config.getString(LIST_NAME_PROPERTY);\n+        Objects.requireNonNull(listName, \"list name\");\n+    }\n+\n+    @Override\n+    public void start() {\n+        super.start();\n+\n+        HazelcastInstance instance = HazelcastInstanceFactory.getHazelcastInstance(instanceName);\n+        list = instance.getList(listName);\n+    }\n+\n+\n+    @Override\n+    protected void storeRecord(HistoryRecord historyRecord) throws DatabaseHistoryException {\n+        list.add(DocumentWriter.defaultWriter().writeAsBytes(historyRecord.document()));\n+    }\n+\n+    @Override\n+    protected void recoverRecords(Consumer<HistoryRecord> consumer) {\n+        try {\n+            for (byte[] r : list) {\n+                Document doc = DocumentReader.defaultReader().read(r);\n+                consumer.accept(new HistoryRecord(doc));\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        super.stop();\n+        list.destroy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MDg5OQ=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMjA4Ng==", "bodyText": "I have implemented the above solution (based on the assumption that the source should have the same life-cycle as the Jet job): the lists have a job specific name now and will be cleaned up by the periodic scan implemented in JobRepository.cleanup(), once the job is no longer active. Pls. review this specifically (last commit).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419912086", "createdAt": "2020-05-05T07:25:54Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    /**\n+     * Hazelcast IList {@link IList} name property.\n+     */\n+    public static final String LIST_NAME_PROPERTY = \"database.history.hazelcast.list.name\";\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;\n+\n+    @Override\n+    public void configure(Configuration config, HistoryRecordComparator comparator,\n+                          DatabaseHistoryListener listener, boolean useCatalogBeforeSchema) {\n+        super.configure(config, comparator, listener, useCatalogBeforeSchema);\n+\n+        instanceName = config.getString(\"database.history.hazelcast.instance.name\");\n+        Objects.requireNonNull(instanceName, \"instance name\");\n+\n+        listName = config.getString(LIST_NAME_PROPERTY);\n+        Objects.requireNonNull(listName, \"list name\");\n+    }\n+\n+    @Override\n+    public void start() {\n+        super.start();\n+\n+        HazelcastInstance instance = HazelcastInstanceFactory.getHazelcastInstance(instanceName);\n+        list = instance.getList(listName);\n+    }\n+\n+\n+    @Override\n+    protected void storeRecord(HistoryRecord historyRecord) throws DatabaseHistoryException {\n+        list.add(DocumentWriter.defaultWriter().writeAsBytes(historyRecord.document()));\n+    }\n+\n+    @Override\n+    protected void recoverRecords(Consumer<HistoryRecord> consumer) {\n+        try {\n+            for (byte[] r : list) {\n+                Document doc = DocumentReader.defaultReader().read(r);\n+                consumer.accept(new HistoryRecord(doc));\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        super.stop();\n+        list.destroy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MDg5OQ=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU4ODg3OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MTozMlrOGO54QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoxODo0MVrOGP6YHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MTUzNw==", "bodyText": "whats smt?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418281537", "createdAt": "2020-04-30T20:51:32Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> smt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzODI3MA==", "bodyText": "Single Message Transform (https://docs.confluent.io/current/connect/transforms/index.html), but yeah, I see what you mean, no point in being cryptic in the code. Will rename it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419338270", "createdAt": "2020-05-04T10:18:41Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.cdc.ChangeEvent;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> smt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MTUzNw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc0NTE3OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODowNTo1M1rOGPEeMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNjozNlrOGP2lRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NTA4OA==", "bodyText": "is this going to be shaded in jet-core? can we sync changes with JSON PR?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418455088", "createdAt": "2020-05-01T08:05:53Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/pom.xml", "diffHunk": "@@ -0,0 +1,139 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-debezium</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.2-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <jackson.jr.version>2.11.0</jackson.jr.version>\n+        <kafka.connect.version>2.3.1</kafka.connect.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+        <slf4j.version>1.7.26</slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc.debezium</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-api</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-transforms</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-core</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.jr</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NjEwMQ==", "bodyText": "I am planning on using Ali's Json Convenience, once it's merged in and that does chade Jackson jr. I just moved to Jackson jr as an intermediary state, because that will make the final adoption quite simple.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419276101", "createdAt": "2020-05-04T08:16:36Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/pom.xml", "diffHunk": "@@ -0,0 +1,139 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-debezium</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.2-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <jackson.jr.version>2.11.0</jackson.jr.version>\n+        <kafka.connect.version>2.3.1</kafka.connect.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+        <slf4j.version>1.7.26</slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc.debezium</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-api</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-transforms</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-core</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.jr</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NTA4OA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc0NjkzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODowNjo1N1rOGPEfQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0ODozMVrOGP7N2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NTM2MA==", "bodyText": "we don't use log4j12 anymore", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418455360", "createdAt": "2020-05-01T08:06:57Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/pom.xml", "diffHunk": "@@ -0,0 +1,139 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-debezium</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.2-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <jackson.jr.version>2.11.0</jackson.jr.version>\n+        <kafka.connect.version>2.3.1</kafka.connect.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+        <slf4j.version>1.7.26</slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc.debezium</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-api</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-transforms</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-core</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.jr</groupId>\n+            <artifactId>jackson-jr-objects</artifactId>\n+            <version>${jackson.jr.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.jr</groupId>\n+            <artifactId>jackson-jr-annotation-support</artifactId>\n+            <version>${jackson.jr.version}</version>\n+        </dependency>\n+\n+        <!-- TEST -->\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-connector-mysql</artifactId>\n+            <version>${debezium.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>mysql</artifactId>\n+            <version>${testcontainers.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MjAyNw==", "bodyText": "Ok, changed to use Log4j 2 SLF4J Binding for the Debezium connectors' logging.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419352027", "createdAt": "2020-05-04T10:48:31Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/pom.xml", "diffHunk": "@@ -0,0 +1,139 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Hazelcast Inc.\n+  ~\n+  ~ Licensed under the Hazelcast Community License (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://hazelcast.com/hazelcast-community-license\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>jar</packaging>\n+    <name>hazelcast-jet-cdc-debezium</name>\n+    <description>Change Data Capture support for Hazelcast Jet</description>\n+    <url>http://www.hazelcast.com/</url>\n+\n+    <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+\n+    <parent>\n+        <groupId>com.hazelcast.jet</groupId>\n+        <artifactId>hazelcast-jet-extensions</artifactId>\n+        <version>4.2-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <debezium.version>1.1.0.Final</debezium.version>\n+        <jackson.jr.version>2.11.0</jackson.jr.version>\n+        <kafka.connect.version>2.3.1</kafka.connect.version>\n+        <testcontainers.version>1.13.0</testcontainers.version>\n+        <slf4j.version>1.7.26</slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>com.hazelcast.jet.cdc.debezium</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>${maven.assembly.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>distro-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptorRefs>\n+                                <descriptorRef>jar-with-dependencies</descriptorRef>\n+                            </descriptorRefs>\n+                            <tarLongFileMode>posix</tarLongFileMode>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-api</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>connect-transforms</artifactId>\n+            <version>${kafka.connect.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-core</artifactId>\n+            <version>${debezium.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.jr</groupId>\n+            <artifactId>jackson-jr-objects</artifactId>\n+            <version>${jackson.jr.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.jr</groupId>\n+            <artifactId>jackson-jr-annotation-support</artifactId>\n+            <version>${jackson.jr.version}</version>\n+        </dependency>\n+\n+        <!-- TEST -->\n+        <dependency>\n+            <groupId>io.debezium</groupId>\n+            <artifactId>debezium-connector-mysql</artifactId>\n+            <version>${debezium.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>mysql</artifactId>\n+            <version>${testcontainers.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NTM2MA=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc3NjI3OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyNToyMlrOGPEw4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODoyNToyMlrOGPEw4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1OTg3Mw==", "bodyText": "we can keep this as toString()", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418459873", "createdAt": "2020-05-01T08:25:22Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Information pertaining to a single data change event (insertion,\n+ * delete or update), affecting either a single database record (in the\n+ * case of relational databases) or document (in the case of NoSQL\n+ * databases).\n+ * <p>\n+ * Each event has a <i>key</i>, which identifies the particular record\n+ * or document being affected, and a <i>value</i>, which describes the\n+ * actual change itself.\n+ * <p>\n+ * Most events have an <i>operation</i> associated with them which\n+ * specifies the type of change being described (insertion, delete or\n+ * update). This is really a property of the value, it's only replicated\n+ * at this level for convenience. Only some special events, like\n+ * heartbeats don't have an operation value. (Heartbeat events are not\n+ * something we encourage the usage of, but since no functionality of\n+ * the underlying Debezium connectors is disabled they are still\n+ * theoretically possible to enable and be observed in Jet.)\n+ * <p>\n+ * There is also a <i>timestamp</i> which specifies the moment in time\n+ * when the event happened. This timestamp is \"real\" in the sense that\n+ * it comes from the database change-log, so it's not \"processing time\",\n+ * it's not the moment when the event was observed by our system. Keep\n+ * in mind though that not all events come from the change-log. The\n+ * change-log goes back in time only to a limited extent, all older\n+ * events are parts of a database snapshot constructed when we start\n+ * monitoring the database and their timestamps are accordingly\n+ * artificial. Identifying snapshot events is possible most of the time,\n+ * because their operation will be {@link Operation#SYNC} instead of\n+ * {@link Operation#INSERT} (one notable exception being MySQL).\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public interface ChangeEvent {\n+\n+    /**\n+     * Specifies the moment in time when the event happened. This\n+     * timestamp is \"real\" in the sense that it comes from the database\n+     * change-log, so it's not \"processing time\", it's not the moment\n+     * when the event was observed by our system. Keep in mind though\n+     * that not all events come from the change-log. The change-log goes\n+     * back in time only to a limited extent, all older events are parts\n+     * of a database snapshot constructed when we start monitoring the\n+     * database and their timestamps are accordingly artificial.\n+     * Identifying snapshot events is possible most of the time, because\n+     * their operation will be {@link Operation#SYNC} instead of\n+     * {@link Operation#INSERT} (one notable exception being MySQL).\n+     *\n+     * @throws ParsingException if no parsable timestamp field present\n+     */\n+    long timestamp() throws ParsingException;\n+\n+    /**\n+     * Specifies the type of change being described (insertion, delete or\n+     * update). Only some special events, like heartbeats don't have an\n+     * operation value.\n+     *\n+     * @return {@link Operation#UNSPECIFIED} if this {@code ChangeEventValue}\n+     * doesn't have an operation field or appropriate {@link Operation}\n+     * that matches what's found in the operation field\n+     * @throws ParsingException if there is an operation field, but it's\n+     *                          value is not among the handled ones.\n+     */\n+    @Nonnull\n+    Operation operation() throws ParsingException;\n+\n+    /**\n+     * Identifies the particular record or document being affected\n+     * by the change event.\n+     */\n+    @Nonnull\n+    ChangeEventElement key();\n+\n+    /**\n+     * Describes the actual change affected on the record or document\n+     * by the change event.\n+     */\n+    @Nonnull\n+    ChangeEventElement value();\n+\n+    /**\n+     * Returns raw JSON string which the content of this event is\n+     * based on. Mean to be used when higher level parsing (see other\n+     * methods) fails for some reason (for example on some untested\n+     * DB-connector version combination).\n+     */\n+    @Nonnull\n+    String asJson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc4NTcxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozMTowN1rOGPE2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1MzowOVrOGRHv_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTM0Mw==", "bodyText": "seems now you have to pay cost of comparison twice: once per figuring out the string mapping, and then the other conditional operation you will do for the operation. Why not just publish it as string and refer to constants?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r418461343", "createdAt": "2020-05-01T08:31:07Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * Change event doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC(\"r\"),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT(\"c\"),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE(\"u\"),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE(\"d\");\n+\n+    private final String id;\n+\n+    Operation(String id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String id) throws ParsingException {\n+        Operation[] values = values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4ODk1MA==", "bodyText": "I've tried a couple of versions, but I couldn't find one that I liked... Considering that the calls in questions will be made only on demand and that the operation values doesn't play any part in serde either, I'm leaning towards keeping it as is, for the moment. Will give it another look tomorrow, with a fresh mind.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r419388950", "createdAt": "2020-05-04T12:09:43Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * Change event doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC(\"r\"),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT(\"c\"),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE(\"u\"),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE(\"d\");\n+\n+    private final String id;\n+\n+    Operation(String id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String id) throws ParsingException {\n+        Operation[] values = values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTM0Mw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NDE1NA==", "bodyText": "What was about it that you didn't like? I think you'll be creating more garbage by creating the extra Operation objects, without adding much value. When used with the map sink for example you'll need to do conditional operations on it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420044154", "createdAt": "2020-05-05T11:39:28Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * Change event doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC(\"r\"),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT(\"c\"),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE(\"u\"),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE(\"d\");\n+\n+    private final String id;\n+\n+    Operation(String id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String id) throws ParsingException {\n+        Operation[] values = values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTM0Mw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNTk0OA==", "bodyText": "Index based lookup in array type of solution is pushed (and benchmarked).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420605948", "createdAt": "2020-05-06T07:53:09Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * Change event doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC(\"r\"),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT(\"c\"),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE(\"u\"),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE(\"d\");\n+\n+    private final String id;\n+\n+    Operation(String id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String id) throws ParsingException {\n+        Operation[] values = values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2MTM0Mw=="}, "originalCommit": {"oid": "3231a8abfab24e8bbb632e748f45add4a94ba39b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc3MzAwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcJsonDataSerializerHook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0MDowM1rOGQleyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0MDowM1rOGQleyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NDQ4OQ==", "bodyText": "the names here don't seem aligned with the actual types", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420044489", "createdAt": "2020-05-05T11:40:03Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcJsonDataSerializerHook.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.internal.serialization.DataSerializerHook;\n+import com.hazelcast.internal.serialization.impl.FactoryIdHelper;\n+import com.hazelcast.nio.serialization.DataSerializableFactory;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import static com.hazelcast.jet.impl.JetFactoryIdHelper.JET_CDC_JSON_DS_FACTORY;\n+import static com.hazelcast.jet.impl.JetFactoryIdHelper.JET_CDC_JSON_DS_FACTORY_ID;\n+\n+public class CdcJsonDataSerializerHook implements DataSerializerHook {\n+\n+    public static final int ELEMENT = 1;\n+    public static final int EVENT = 2;\n+\n+    public static final int FACTORY_ID = FactoryIdHelper.getFactoryId(JET_CDC_JSON_DS_FACTORY, JET_CDC_JSON_DS_FACTORY_ID);\n+\n+    @Override\n+    public int getFactoryId() {\n+        return FACTORY_ID;\n+    }\n+\n+    @Override\n+    public DataSerializableFactory createFactory() {\n+        return new Factory();\n+    }\n+\n+    private static class Factory implements DataSerializableFactory {\n+        @Override\n+        public IdentifiedDataSerializable create(int typeId) {\n+            switch (typeId) {\n+                case ELEMENT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDgyMTIwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-distribution/pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1NDo1NFrOGQl8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDowNzozMVrOGR3qMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjAxNQ==", "bodyText": "how big is each JAR? would it make sense to require two JARs for MySQL, rather than duplicating the content in each?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420052015", "createdAt": "2020-05-05T11:54:54Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-distribution/pom.xml", "diffHunk": "@@ -208,6 +208,18 @@\n             <version>${project.version}</version>\n             <classifier>jar-with-dependencies</classifier>\n         </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2OTY4MQ==", "bodyText": "12M (debezium) & 18M (mysql), quite similar to the other ones: 14M (grpc), 14M (python), 10M (s3); it's convenient to need a single jar, but it's not that big of a deal; should I remove the duplication or leave it?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420569681", "createdAt": "2020-05-06T06:28:19Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-distribution/pom.xml", "diffHunk": "@@ -208,6 +208,18 @@\n             <version>${project.version}</version>\n             <classifier>jar-with-dependencies</classifier>\n         </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjAxNQ=="}, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MDQyMQ==", "bodyText": "Let's leave it for now, but we may revisit in the future.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420570421", "createdAt": "2020-05-06T06:30:20Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-distribution/pom.xml", "diffHunk": "@@ -208,6 +208,18 @@\n             <version>${project.version}</version>\n             <classifier>jar-with-dependencies</classifier>\n         </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjAxNQ=="}, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MTMwMg==", "bodyText": "Actually... we will have at least 2 more like the mysql one (postgres, sqlserver). Unlikely that we're going to leave them like this. Maybe bite the bullet and do it now?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420571302", "createdAt": "2020-05-06T06:33:04Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-distribution/pom.xml", "diffHunk": "@@ -208,6 +208,18 @@\n             <version>${project.version}</version>\n             <classifier>jar-with-dependencies</classifier>\n         </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjAxNQ=="}, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNjQzNg==", "bodyText": "fair point, we can address this now I think.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420816436", "createdAt": "2020-05-06T14:02:42Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-distribution/pom.xml", "diffHunk": "@@ -208,6 +208,18 @@\n             <version>${project.version}</version>\n             <classifier>jar-with-dependencies</classifier>\n         </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjAxNQ=="}, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5MDg5Ng==", "bodyText": "Done, mysql jar is now 6.8K (and works).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r421390896", "createdAt": "2020-05-07T10:07:31Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-distribution/pom.xml", "diffHunk": "@@ -208,6 +208,18 @@\n             <version>${project.version}</version>\n             <classifier>jar-with-dependencies</classifier>\n         </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-debezium</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hazelcast.jet</groupId>\n+            <artifactId>hazelcast-jet-cdc-mysql</artifactId>\n+            <version>${project.version}</version>\n+            <classifier>jar-with-dependencies</classifier>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjAxNQ=="}, "originalCommit": {"oid": "7a0ccab3892a1a2897411e041e52ab06acafb4a3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMzMDIyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0MTo0MVrOGRHZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1Mzo0NlrOGRHxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMDI1MA==", "bodyText": "I think you don't need offset here, just use an array of size [max] and you can skip the subtraction altogether, simplifying the code.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420600250", "createdAt": "2020-05-06T07:41:41Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * {@code ChangeRecord} doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC('r'),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT('c'),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE('u'),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE('d');\n+\n+    private static final int OFFSET;\n+    private static final Operation[] ARRAY;\n+\n+    static {\n+        int min = Character.MAX_VALUE;\n+        int max = Character.MIN_VALUE;\n+        for (Operation op : values()) {\n+            if (op.id == null) {\n+                continue;\n+            }\n+            min = op.id < min ? op.id : min;\n+            max = op.id > max ? op.id : max;\n+        }\n+\n+        OFFSET = min;\n+\n+        ARRAY = new Operation[max - min + 1];\n+        for (Operation op : values()) {\n+            if (op.id == null) {\n+                continue;\n+            }\n+            ARRAY[op.id - OFFSET] = op;\n+        }\n+    }\n+\n+    private final Character id;\n+\n+    Operation(Character id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String string) throws ParsingException {\n+        if (string == null) {\n+            return UNSPECIFIED;\n+        }\n+\n+        if (string.length() == 1) {\n+            char id = string.charAt(0);\n+            Operation op = ARRAY[id - OFFSET];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b3f873cfad238c82b8dae21b19aa0eb038261"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNjI4MQ==", "bodyText": "Ok", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420606281", "createdAt": "2020-05-06T07:53:46Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * {@code ChangeRecord} doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC('r'),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT('c'),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE('u'),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE('d');\n+\n+    private static final int OFFSET;\n+    private static final Operation[] ARRAY;\n+\n+    static {\n+        int min = Character.MAX_VALUE;\n+        int max = Character.MIN_VALUE;\n+        for (Operation op : values()) {\n+            if (op.id == null) {\n+                continue;\n+            }\n+            min = op.id < min ? op.id : min;\n+            max = op.id > max ? op.id : max;\n+        }\n+\n+        OFFSET = min;\n+\n+        ARRAY = new Operation[max - min + 1];\n+        for (Operation op : values()) {\n+            if (op.id == null) {\n+                continue;\n+            }\n+            ARRAY[op.id - OFFSET] = op;\n+        }\n+    }\n+\n+    private final Character id;\n+\n+    Operation(Character id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String string) throws ParsingException {\n+        if (string == null) {\n+            return UNSPECIFIED;\n+        }\n+\n+        if (string.length() == 1) {\n+            char id = string.charAt(0);\n+            Operation op = ARRAY[id - OFFSET];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMDI1MA=="}, "originalCommit": {"oid": "142b3f873cfad238c82b8dae21b19aa0eb038261"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMzNTEzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0MzoxOFrOGRHczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjoxMDowN1rOGRP8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMTAzOA==", "bodyText": "does these need to be volatile? probably not?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420601038", "createdAt": "2020-05-06T07:43:18Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142b3f873cfad238c82b8dae21b19aa0eb038261"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MzYyNQ==", "bodyText": "Is read and written by different threads and not safely published. But anyways, let's see if we can move this whole thing into the snapshot.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420643625", "createdAt": "2020-05-06T09:02:45Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMTAzOA=="}, "originalCommit": {"oid": "142b3f873cfad238c82b8dae21b19aa0eb038261"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0MDM1MA==", "bodyText": "Have made the schema history part of the snapshot. There are two relatively shady parts in the change, I would be thankful if you would take a look at those:\n\n\nsee how I use DatabaseHistoryImpl.container().setHistory(...) to pass the right record list to DatabaseHistoryImpl; DatabaseHistoryImpl gets initilized by the surrounded SourceTask.start(...) and this happens on a blocking worker thread\n\n\nin CdcSource.State I've used a CopyOnWriteArrayList for the schema history; the reasoning here was that items get added to this list on some internal debezium snapshot thread, while restore and our snapshotting reads it on a blocking worker thread, so I need to ensure proper visibility + the list is written only on schema changes, which should be a rare event after the initial db snapshot so the garbage created should be a one-time hit; I think it's correct, but doesn't feel right so I'm open to suggestions...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420740350", "createdAt": "2020-05-06T12:10:07Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/HazelcastListDatabaseHistory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import io.debezium.config.Configuration;\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.DatabaseHistoryListener;\n+import io.debezium.relational.history.HistoryRecord;\n+import io.debezium.relational.history.HistoryRecordComparator;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Database history implementation backed by Hazelcast IList {@link IList}.\n+ *\n+ * @since 4.2\n+ */\n+public class HazelcastListDatabaseHistory extends AbstractDatabaseHistory {\n+\n+    private volatile String instanceName;\n+    private volatile String listName;\n+\n+    private volatile IList<byte[]> list;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMTAzOA=="}, "originalCommit": {"oid": "142b3f873cfad238c82b8dae21b19aa0eb038261"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODQ4NDg4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoyOTo0OVrOGRI6ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoyOTo0OVrOGRI6ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNTA1NA==", "bodyText": "Maybe some nicer name instead of string? Like a name for the field in CDC terminology.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420625054", "createdAt": "2020-05-06T08:29:49Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * {@code ChangeRecord} doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC('r'),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT('c'),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE('u'),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE('d');\n+\n+    private final Character id;\n+\n+    Operation(Character id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String string) throws ParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511993f0bd20b804e8fbf195312815cdb33e2478"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODUxNjY4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozOTowNFrOGRJPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozOTowNFrOGRJPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMDMyOA==", "bodyText": "This can throw ArrayIndexOutOfBoundsException. We should have a unit test that catches these problems.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420630328", "createdAt": "2020-05-06T08:39:04Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/Operation.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Describes the nature of the event in CDC data. Equivalent to various\n+ * actions that can affect a database record: insertion, update and\n+ * deletion. Has some extra special values like \"sync\" which is just\n+ * like an insert, but originates from a database snapshot (as opposed\n+ * database changelog) and \"unspecified\" which is used for a few special\n+ * CDC events, like heartbeats.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public enum Operation {\n+    /**\n+     * {@code ChangeRecord} doesn't have an operation field, for example\n+     * heartbeats.\n+     */\n+    UNSPECIFIED(null),\n+    /**\n+     * Just like {@link #INSERT}, but coming from the DB snapshot (as\n+     * opposed to trailing the DB changelog).\n+     */\n+    SYNC('r'),\n+    /**\n+     * Record insertion, sourced from the DB changelog.\n+     */\n+    INSERT('c'),\n+    /**\n+     * Record update, sourced from the DB changelog.\n+     */\n+    UPDATE('u'),\n+    /**\n+     * Record deletion, sourced from the DB changelog.\n+     */\n+    DELETE('d');\n+\n+    private final Character id;\n+\n+    Operation(Character id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Parses the string constants used in CDC messages for describing\n+     * operations into enum instances.\n+     * <p>\n+     * Null will be parsed as {@link #UNSPECIFIED}.\n+     *\n+     * @throws ParsingException if the input string doesn't represent\n+     * an expected value.\n+     */\n+    public static Operation get(@Nullable String string) throws ParsingException {\n+        if (string == null) {\n+            return UNSPECIFIED;\n+        }\n+\n+        if (string.length() == 1) {\n+            char id = string.charAt(0);\n+            Operation op = Lookup.get(id);\n+            if (op != null) {\n+                return op;\n+            }\n+        }\n+\n+        throw new ParsingException(\"'\" + string + \"' is not a valid operation id\");\n+    }\n+\n+    private static class Lookup {\n+\n+        private static final int OFFSET;\n+        private static final Operation[] ARRAY;\n+\n+        static {\n+            int min = Character.MAX_VALUE;\n+            int max = Character.MIN_VALUE;\n+            for (Operation op : values()) {\n+                if (op.id == null) {\n+                    continue;\n+                }\n+                min = op.id < min ? op.id : min;\n+                max = op.id > max ? op.id : max;\n+            }\n+\n+            OFFSET = min;\n+\n+            ARRAY = new Operation[max - min + 1];\n+            for (Operation op : values()) {\n+                if (op.id == null) {\n+                    continue;\n+                }\n+                ARRAY[op.id - OFFSET] = op;\n+            }\n+        }\n+\n+        static Operation get(char id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511993f0bd20b804e8fbf195312815cdb33e2478"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTI5MjYzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjozNTo1OFrOGRQ3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo1MDoxNVrOGRRYsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NTI5MQ==", "bodyText": "you can use writeObject to write a List.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420755291", "createdAt": "2020-05-06T12:35:58Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+public class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> transform;\n+\n+    private State state = new State();\n+    private boolean taskInit;\n+\n+    CdcSource(Properties properties) {\n+        try {\n+            String connectorClazz = properties.getProperty(\"connector.class\");\n+            Class<?> connectorClass = Thread.currentThread().getContextClassLoader().loadClass(connectorClazz);\n+            connector = (SourceConnector) connectorClass.getConstructor().newInstance();\n+            connector.initialize(new JetConnectorContext());\n+            connector.start((Map) properties);\n+\n+            transform = initTransform();\n+\n+            taskConfig = connector.taskConfigs(1).get(0);\n+            task = (SourceTask) connector.taskClass().getConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<ChangeRecord> buf) {\n+        if (!taskInit) {\n+            task.initialize(new JetSourceTaskContext());\n+            DatabaseHistoryImpl.container().setHistory(state.getHistoryRecords());\n+            task.start(taskConfig);\n+            DatabaseHistoryImpl.container().setHistory(null);\n+            taskInit = true;\n+        }\n+        try {\n+            List<SourceRecord> records = task.poll();\n+            if (records == null) {\n+                return;\n+            }\n+\n+            for (SourceRecord record : records) {\n+                boolean added = addToBuffer(record, buf);\n+                if (added) {\n+                    state.setOffset(record.sourcePartition(), record.sourceOffset());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    private boolean addToBuffer(SourceRecord sourceRecord, SourceBuilder.TimestampedSourceBuffer<ChangeRecord> buf) {\n+        sourceRecord = transform.apply(sourceRecord);\n+        if (sourceRecord != null) {\n+            ChangeRecord changeRecord = toChangeRecord(sourceRecord);\n+            long timestamp = extractTimestamp(sourceRecord);\n+            buf.add(changeRecord, timestamp);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void destroy() {\n+        try {\n+            task.stop();\n+        } finally {\n+            connector.stop();\n+        }\n+    }\n+\n+    public State createSnapshot() {\n+        return state;\n+    }\n+\n+    public void restoreSnapshot(List<State> snapshots) {\n+        this.state = snapshots.get(0);\n+    }\n+\n+    private static ExtractNewRecordState<SourceRecord> initTransform() {\n+        ExtractNewRecordState<SourceRecord> transform = new ExtractNewRecordState<>();\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"add.fields\", \"op, ts_ms\");\n+        config.put(\"delete.handling.mode\", \"rewrite\");\n+        transform.configure(config);\n+\n+        return transform;\n+    }\n+\n+    private static ChangeRecord toChangeRecord(SourceRecord record) {\n+        String keyJson = Values.convertToString(record.keySchema(), record.key());\n+        String valueJson = Values.convertToString(record.valueSchema(), record.value());\n+        return new ChangeRecordImpl(keyJson, valueJson);\n+    }\n+\n+    private static long extractTimestamp(SourceRecord record) {\n+        if (record.valueSchema().field(\"__ts_ms\") == null) {\n+            return 0L;\n+        } else {\n+            return ((Struct) record.value()).getInt64(\"__ts_ms\");\n+        }\n+    }\n+\n+    private class JetSourceTaskContext implements SourceTaskContext {\n+        @Override\n+        public Map<String, String> configs() {\n+            return taskConfig;\n+        }\n+\n+        @Override\n+        public OffsetStorageReader offsetStorageReader() {\n+            return new SourceOffsetStorageReader();\n+        }\n+    }\n+\n+    private class SourceOffsetStorageReader implements OffsetStorageReader {\n+        @Override\n+        public <V> Map<String, Object> offset(Map<String, V> partition) {\n+            return offsets(Collections.singletonList(partition)).get(partition);\n+        }\n+\n+        @Override\n+        public <V> Map<Map<String, V>, Map<String, Object>> offsets(Collection<Map<String, V>> partitions) {\n+            Map<Map<String, V>, Map<String, Object>> map = new HashMap<>();\n+            for (Map<String, V> partition : partitions) {\n+                Map<String, Object> offset = (Map<String, Object>) state.getOffset(partition);\n+                map.put(partition, offset);\n+            }\n+            return map;\n+        }\n+    }\n+\n+    private static class JetConnectorContext implements ConnectorContext {\n+        @Override\n+        public void requestTaskReconfiguration() {\n+            // no-op since it is not supported\n+        }\n+\n+        @Override\n+        public void raiseError(Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public static final class State implements IdentifiedDataSerializable {\n+\n+        /**\n+         * Key represents the partition which the record originated from. Value\n+         * represents the offset within that partition. Kafka Connect represents\n+         * the partition and offset as arbitrary values so that is why it is\n+         * stored as map.\n+         * See {@link SourceRecord} for more information regarding the format.\n+         */\n+        private final Map<Map<String, ?>, Map<String, ?>> partitionsToOffset = new HashMap<>();\n+        private final List<byte[]> historyRecords = new CopyOnWriteArrayList<>();\n+\n+        public Map<String, ?> getOffset(Map<String, ?> partition) {\n+            return partitionsToOffset.get(partition);\n+        }\n+\n+        public void setOffset(Map<String, ?> partition, Map<String, ?> offset) {\n+            partitionsToOffset.put(partition, offset);\n+        }\n+\n+        public List<byte[]> getHistoryRecords() {\n+            return historyRecords;\n+        }\n+\n+        @Override\n+        public int getFactoryId() {\n+            return CdcJsonDataSerializerHook.FACTORY_ID;\n+        }\n+\n+        @Override\n+        public int getClassId() {\n+            return CdcJsonDataSerializerHook.SOURCE_STATE;\n+        }\n+\n+        @Override\n+        public void writeData(ObjectDataOutput out) throws IOException {\n+            out.writeObject(partitionsToOffset);\n+\n+            List<byte[]> records = historyRecords;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035b8e3a37961616a6609b15de87408eba879a0f"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2MzgyNA==", "bodyText": "For some reason I though this would be more space-efficient, but I should have checked. Will revisit.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420763824", "createdAt": "2020-05-06T12:50:15Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+public class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> transform;\n+\n+    private State state = new State();\n+    private boolean taskInit;\n+\n+    CdcSource(Properties properties) {\n+        try {\n+            String connectorClazz = properties.getProperty(\"connector.class\");\n+            Class<?> connectorClass = Thread.currentThread().getContextClassLoader().loadClass(connectorClazz);\n+            connector = (SourceConnector) connectorClass.getConstructor().newInstance();\n+            connector.initialize(new JetConnectorContext());\n+            connector.start((Map) properties);\n+\n+            transform = initTransform();\n+\n+            taskConfig = connector.taskConfigs(1).get(0);\n+            task = (SourceTask) connector.taskClass().getConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<ChangeRecord> buf) {\n+        if (!taskInit) {\n+            task.initialize(new JetSourceTaskContext());\n+            DatabaseHistoryImpl.container().setHistory(state.getHistoryRecords());\n+            task.start(taskConfig);\n+            DatabaseHistoryImpl.container().setHistory(null);\n+            taskInit = true;\n+        }\n+        try {\n+            List<SourceRecord> records = task.poll();\n+            if (records == null) {\n+                return;\n+            }\n+\n+            for (SourceRecord record : records) {\n+                boolean added = addToBuffer(record, buf);\n+                if (added) {\n+                    state.setOffset(record.sourcePartition(), record.sourceOffset());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    private boolean addToBuffer(SourceRecord sourceRecord, SourceBuilder.TimestampedSourceBuffer<ChangeRecord> buf) {\n+        sourceRecord = transform.apply(sourceRecord);\n+        if (sourceRecord != null) {\n+            ChangeRecord changeRecord = toChangeRecord(sourceRecord);\n+            long timestamp = extractTimestamp(sourceRecord);\n+            buf.add(changeRecord, timestamp);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void destroy() {\n+        try {\n+            task.stop();\n+        } finally {\n+            connector.stop();\n+        }\n+    }\n+\n+    public State createSnapshot() {\n+        return state;\n+    }\n+\n+    public void restoreSnapshot(List<State> snapshots) {\n+        this.state = snapshots.get(0);\n+    }\n+\n+    private static ExtractNewRecordState<SourceRecord> initTransform() {\n+        ExtractNewRecordState<SourceRecord> transform = new ExtractNewRecordState<>();\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"add.fields\", \"op, ts_ms\");\n+        config.put(\"delete.handling.mode\", \"rewrite\");\n+        transform.configure(config);\n+\n+        return transform;\n+    }\n+\n+    private static ChangeRecord toChangeRecord(SourceRecord record) {\n+        String keyJson = Values.convertToString(record.keySchema(), record.key());\n+        String valueJson = Values.convertToString(record.valueSchema(), record.value());\n+        return new ChangeRecordImpl(keyJson, valueJson);\n+    }\n+\n+    private static long extractTimestamp(SourceRecord record) {\n+        if (record.valueSchema().field(\"__ts_ms\") == null) {\n+            return 0L;\n+        } else {\n+            return ((Struct) record.value()).getInt64(\"__ts_ms\");\n+        }\n+    }\n+\n+    private class JetSourceTaskContext implements SourceTaskContext {\n+        @Override\n+        public Map<String, String> configs() {\n+            return taskConfig;\n+        }\n+\n+        @Override\n+        public OffsetStorageReader offsetStorageReader() {\n+            return new SourceOffsetStorageReader();\n+        }\n+    }\n+\n+    private class SourceOffsetStorageReader implements OffsetStorageReader {\n+        @Override\n+        public <V> Map<String, Object> offset(Map<String, V> partition) {\n+            return offsets(Collections.singletonList(partition)).get(partition);\n+        }\n+\n+        @Override\n+        public <V> Map<Map<String, V>, Map<String, Object>> offsets(Collection<Map<String, V>> partitions) {\n+            Map<Map<String, V>, Map<String, Object>> map = new HashMap<>();\n+            for (Map<String, V> partition : partitions) {\n+                Map<String, Object> offset = (Map<String, Object>) state.getOffset(partition);\n+                map.put(partition, offset);\n+            }\n+            return map;\n+        }\n+    }\n+\n+    private static class JetConnectorContext implements ConnectorContext {\n+        @Override\n+        public void requestTaskReconfiguration() {\n+            // no-op since it is not supported\n+        }\n+\n+        @Override\n+        public void raiseError(Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public static final class State implements IdentifiedDataSerializable {\n+\n+        /**\n+         * Key represents the partition which the record originated from. Value\n+         * represents the offset within that partition. Kafka Connect represents\n+         * the partition and offset as arbitrary values so that is why it is\n+         * stored as map.\n+         * See {@link SourceRecord} for more information regarding the format.\n+         */\n+        private final Map<Map<String, ?>, Map<String, ?>> partitionsToOffset = new HashMap<>();\n+        private final List<byte[]> historyRecords = new CopyOnWriteArrayList<>();\n+\n+        public Map<String, ?> getOffset(Map<String, ?> partition) {\n+            return partitionsToOffset.get(partition);\n+        }\n+\n+        public void setOffset(Map<String, ?> partition, Map<String, ?> offset) {\n+            partitionsToOffset.put(partition, offset);\n+        }\n+\n+        public List<byte[]> getHistoryRecords() {\n+            return historyRecords;\n+        }\n+\n+        @Override\n+        public int getFactoryId() {\n+            return CdcJsonDataSerializerHook.FACTORY_ID;\n+        }\n+\n+        @Override\n+        public int getClassId() {\n+            return CdcJsonDataSerializerHook.SOURCE_STATE;\n+        }\n+\n+        @Override\n+        public void writeData(ObjectDataOutput out) throws IOException {\n+            out.writeObject(partitionsToOffset);\n+\n+            List<byte[]> records = historyRecords;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NTI5MQ=="}, "originalCommit": {"oid": "035b8e3a37961616a6609b15de87408eba879a0f"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTMwNDczOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/DatabaseHistoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjozOToyMFrOGRQ-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjozOToyMFrOGRQ-3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NzIxNQ==", "bodyText": "should be clear this is a concurrentlist I think", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420757215", "createdAt": "2020-05-06T12:39:20Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/DatabaseHistoryImpl.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import io.debezium.document.Document;\n+import io.debezium.document.DocumentReader;\n+import io.debezium.document.DocumentWriter;\n+import io.debezium.relational.history.AbstractDatabaseHistory;\n+import io.debezium.relational.history.DatabaseHistoryException;\n+import io.debezium.relational.history.HistoryRecord;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+public class DatabaseHistoryImpl extends AbstractDatabaseHistory {\n+\n+    private static final ThreadLocal<Container> CONTEXT = ThreadLocal.withInitial(Container::new);\n+\n+    private final List<byte[]> history;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035b8e3a37961616a6609b15de87408eba879a0f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTMxNzcxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0Mjo0M1rOGRRGzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0Mjo0M1rOGRRGzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1OTI0Nw==", "bodyText": "you don't need this method because it's nested class", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r420759247", "createdAt": "2020-05-06T12:42:43Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.pipeline.SourceBuilder;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import io.debezium.transforms.ExtractNewRecordState;\n+import org.apache.kafka.connect.connector.ConnectorContext;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.source.SourceConnector;\n+import org.apache.kafka.connect.source.SourceRecord;\n+import org.apache.kafka.connect.source.SourceTask;\n+import org.apache.kafka.connect.source.SourceTaskContext;\n+import org.apache.kafka.connect.storage.OffsetStorageReader;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.rethrow;\n+\n+public class CdcSource {\n+\n+    private final SourceConnector connector;\n+    private final SourceTask task;\n+    private final Map<String, String> taskConfig;\n+    private final ExtractNewRecordState<SourceRecord> transform;\n+\n+    private State state = new State();\n+    private boolean taskInit;\n+\n+    CdcSource(Properties properties) {\n+        try {\n+            String connectorClazz = properties.getProperty(\"connector.class\");\n+            Class<?> connectorClass = Thread.currentThread().getContextClassLoader().loadClass(connectorClazz);\n+            connector = (SourceConnector) connectorClass.getConstructor().newInstance();\n+            connector.initialize(new JetConnectorContext());\n+            connector.start((Map) properties);\n+\n+            transform = initTransform();\n+\n+            taskConfig = connector.taskConfigs(1).get(0);\n+            task = (SourceTask) connector.taskClass().getConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<ChangeRecord> buf) {\n+        if (!taskInit) {\n+            task.initialize(new JetSourceTaskContext());\n+            DatabaseHistoryImpl.container().setHistory(state.getHistoryRecords());\n+            task.start(taskConfig);\n+            DatabaseHistoryImpl.container().setHistory(null);\n+            taskInit = true;\n+        }\n+        try {\n+            List<SourceRecord> records = task.poll();\n+            if (records == null) {\n+                return;\n+            }\n+\n+            for (SourceRecord record : records) {\n+                boolean added = addToBuffer(record, buf);\n+                if (added) {\n+                    state.setOffset(record.sourcePartition(), record.sourceOffset());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    private boolean addToBuffer(SourceRecord sourceRecord, SourceBuilder.TimestampedSourceBuffer<ChangeRecord> buf) {\n+        sourceRecord = transform.apply(sourceRecord);\n+        if (sourceRecord != null) {\n+            ChangeRecord changeRecord = toChangeRecord(sourceRecord);\n+            long timestamp = extractTimestamp(sourceRecord);\n+            buf.add(changeRecord, timestamp);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void destroy() {\n+        try {\n+            task.stop();\n+        } finally {\n+            connector.stop();\n+        }\n+    }\n+\n+    public State createSnapshot() {\n+        return state;\n+    }\n+\n+    public void restoreSnapshot(List<State> snapshots) {\n+        this.state = snapshots.get(0);\n+    }\n+\n+    private static ExtractNewRecordState<SourceRecord> initTransform() {\n+        ExtractNewRecordState<SourceRecord> transform = new ExtractNewRecordState<>();\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"add.fields\", \"op, ts_ms\");\n+        config.put(\"delete.handling.mode\", \"rewrite\");\n+        transform.configure(config);\n+\n+        return transform;\n+    }\n+\n+    private static ChangeRecord toChangeRecord(SourceRecord record) {\n+        String keyJson = Values.convertToString(record.keySchema(), record.key());\n+        String valueJson = Values.convertToString(record.valueSchema(), record.value());\n+        return new ChangeRecordImpl(keyJson, valueJson);\n+    }\n+\n+    private static long extractTimestamp(SourceRecord record) {\n+        if (record.valueSchema().field(\"__ts_ms\") == null) {\n+            return 0L;\n+        } else {\n+            return ((Struct) record.value()).getInt64(\"__ts_ms\");\n+        }\n+    }\n+\n+    private class JetSourceTaskContext implements SourceTaskContext {\n+        @Override\n+        public Map<String, String> configs() {\n+            return taskConfig;\n+        }\n+\n+        @Override\n+        public OffsetStorageReader offsetStorageReader() {\n+            return new SourceOffsetStorageReader();\n+        }\n+    }\n+\n+    private class SourceOffsetStorageReader implements OffsetStorageReader {\n+        @Override\n+        public <V> Map<String, Object> offset(Map<String, V> partition) {\n+            return offsets(Collections.singletonList(partition)).get(partition);\n+        }\n+\n+        @Override\n+        public <V> Map<Map<String, V>, Map<String, Object>> offsets(Collection<Map<String, V>> partitions) {\n+            Map<Map<String, V>, Map<String, Object>> map = new HashMap<>();\n+            for (Map<String, V> partition : partitions) {\n+                Map<String, Object> offset = (Map<String, Object>) state.getOffset(partition);\n+                map.put(partition, offset);\n+            }\n+            return map;\n+        }\n+    }\n+\n+    private static class JetConnectorContext implements ConnectorContext {\n+        @Override\n+        public void requestTaskReconfiguration() {\n+            // no-op since it is not supported\n+        }\n+\n+        @Override\n+        public void raiseError(Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    public static final class State implements IdentifiedDataSerializable {\n+\n+        /**\n+         * Key represents the partition which the record originated from. Value\n+         * represents the offset within that partition. Kafka Connect represents\n+         * the partition and offset as arbitrary values so that is why it is\n+         * stored as map.\n+         * See {@link SourceRecord} for more information regarding the format.\n+         */\n+        private final Map<Map<String, ?>, Map<String, ?>> partitionsToOffset = new HashMap<>();\n+        private final List<byte[]> historyRecords = new CopyOnWriteArrayList<>();\n+\n+        public Map<String, ?> getOffset(Map<String, ?> partition) {\n+            return partitionsToOffset.get(partition);\n+        }\n+\n+        public void setOffset(Map<String, ?> partition, Map<String, ?> offset) {\n+            partitionsToOffset.put(partition, offset);\n+        }\n+\n+        public List<byte[]> getHistoryRecords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035b8e3a37961616a6609b15de87408eba879a0f"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzIzNDg2OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/CdcSinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzo1Mjo1OVrOGTQvCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzo1Mjo1OVrOGTQvCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1MDMxNQ==", "bodyText": "typo, remote", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r422850315", "createdAt": "2020-05-11T07:52:59Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/CdcSinks.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.function.BiFunctionEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.impl.connector.HazelcastWriters;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.Sinks;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static com.hazelcast.jet.cdc.Operation.DELETE;\n+\n+/**\n+ * Contains factory methods for change data capture specific pipeline\n+ * sinks. As a consequence these sinks take {@link ChangeRecord} items\n+ * as their input.\n+ * <p>\n+ * The local parallelism for these sinks in this class is typically 1,\n+ * check the documentation of individual methods.\n+ *\n+ * @since 4.2\n+ */\n+public final class CdcSinks {\n+\n+    private static final int PREFERRED_LOCAL_PARALLELISM = 1;\n+\n+    private CdcSinks() {\n+    }\n+\n+    /**\n+     * Returns a sink which maintains an up-to-date image of a change\n+     * data capture stream in the form of an {@code IMap}. By image we\n+     * mean that the map should always escribe the end result of merging\n+     * all the change events seen so far.\n+     * <p>\n+     * For each item the sink receives it uses the {@code keyFn} to\n+     * determine which map key the change event applies to. Then, based\n+     * on the {@code ChangeRecord}'s {@code Operation} it determines\n+     * eiher to:\n+     * <ul>\n+     *   <li>delete the key from the map\n+     *          ({@link Operation#DELETE})</li>\n+     *   <li>insert a new value for the key\n+     *          ({@link Operation#SYNC} & {@link Operation#INSERT})</li>\n+     *   <li>update the current value for the key\n+     *          ({@link Operation#UPDATE})</li>\n+     * </ul>\n+     * For insert and update operations the new value to use is\n+     * determined from the input record by using the provided\n+     * {@code valueFn}. <strong>IMPORTANT</strong> to note that if the\n+     * {@code valueFn} returns {@code null}, then the key will be\n+     * deleted from the map no matter the operation (ie. even for update\n+     * and insert records).\n+     * <p>\n+     * For the functionality of this sink it is vital that the order of\n+     * the input items is preserved so the sink is non-distributed and\n+     * its local parallelism is forced to 1. This way only a single\n+     * instance will be created for each pipeline.\n+     *\n+     * @since 4.2\n+     */\n+    @Nonnull\n+    public static <K, V> Sink<ChangeRecord> map(\n+            @Nonnull String map,\n+            @Nonnull FunctionEx<ChangeRecord, K> keyFn,\n+            @Nonnull FunctionEx<ChangeRecord, V> valueFn\n+    ) {\n+        return Sinks.fromProcessor(\"localMapCdcSink(\" + map + ')',\n+                metaSupplier(map, null, keyFn, valueFn));\n+    }\n+\n+    /**\n+     * Returns a sink equivalent to {@link #map}, but for a map in a\n+     * remote Hazelcast cluster identified by the supplied {@code\n+     * ClientConfig}.\n+     * <p>\n+     * Due to the used API, the remote cluster must be at least 3.11.\n+     *\n+     * @since 4.2\n+     */\n+    @Nonnull\n+    public static <K, V> Sink<ChangeRecord> removeMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5024333d501a5ad1b030d2ee204981877ce58550"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzIzNTUzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/CdcSinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzo1MzoxMVrOGTQvcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzo1MzoxMVrOGTQvcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1MDQxNw==", "bodyText": "should also take a variant with IMap<K,V>", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r422850417", "createdAt": "2020-05-11T07:53:11Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/CdcSinks.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.function.BiFunctionEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.impl.connector.HazelcastWriters;\n+import com.hazelcast.jet.pipeline.Sink;\n+import com.hazelcast.jet.pipeline.Sinks;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static com.hazelcast.jet.cdc.Operation.DELETE;\n+\n+/**\n+ * Contains factory methods for change data capture specific pipeline\n+ * sinks. As a consequence these sinks take {@link ChangeRecord} items\n+ * as their input.\n+ * <p>\n+ * The local parallelism for these sinks in this class is typically 1,\n+ * check the documentation of individual methods.\n+ *\n+ * @since 4.2\n+ */\n+public final class CdcSinks {\n+\n+    private static final int PREFERRED_LOCAL_PARALLELISM = 1;\n+\n+    private CdcSinks() {\n+    }\n+\n+    /**\n+     * Returns a sink which maintains an up-to-date image of a change\n+     * data capture stream in the form of an {@code IMap}. By image we\n+     * mean that the map should always escribe the end result of merging\n+     * all the change events seen so far.\n+     * <p>\n+     * For each item the sink receives it uses the {@code keyFn} to\n+     * determine which map key the change event applies to. Then, based\n+     * on the {@code ChangeRecord}'s {@code Operation} it determines\n+     * eiher to:\n+     * <ul>\n+     *   <li>delete the key from the map\n+     *          ({@link Operation#DELETE})</li>\n+     *   <li>insert a new value for the key\n+     *          ({@link Operation#SYNC} & {@link Operation#INSERT})</li>\n+     *   <li>update the current value for the key\n+     *          ({@link Operation#UPDATE})</li>\n+     * </ul>\n+     * For insert and update operations the new value to use is\n+     * determined from the input record by using the provided\n+     * {@code valueFn}. <strong>IMPORTANT</strong> to note that if the\n+     * {@code valueFn} returns {@code null}, then the key will be\n+     * deleted from the map no matter the operation (ie. even for update\n+     * and insert records).\n+     * <p>\n+     * For the functionality of this sink it is vital that the order of\n+     * the input items is preserved so the sink is non-distributed and\n+     * its local parallelism is forced to 1. This way only a single\n+     * instance will be created for each pipeline.\n+     *\n+     * @since 4.2\n+     */\n+    @Nonnull\n+    public static <K, V> Sink<ChangeRecord> map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5024333d501a5ad1b030d2ee204981877ce58550"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDE4NzMxOnYy", "diffSide": "RIGHT", "path": "site/docs/api/sources-sinks.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMDo1NFrOGTZ03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMDo1NFrOGTZ03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTI2Mg==", "bodyText": "should say Change Data Capture (CDC)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r422999262", "createdAt": "2020-05-11T12:20:54Z", "author": {"login": "cangencer"}, "path": "site/docs/api/sources-sinks.md", "diffHunk": "@@ -949,6 +949,74 @@ tests](https://github.com/hazelcast/hazelcast-jet-contrib/tree/master/xa-test)\n to get more information. This only applies to the JDBC sink, the source\n doesn't use XA transactions.\n \n+### CDC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b444d50aa6b9753044d1a5411a149580550dfd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDE5MzMwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcJsonDataSerializerHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMjo0OFrOGTZ4yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo0NTozMVrOGTapEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwMDI2Ng==", "bodyText": "when do we use IdentifiedDataSerializable and when just SerializerHook? seems for data types we use SerializerHook?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r423000266", "createdAt": "2020-05-11T12:22:48Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcJsonDataSerializerHook.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.internal.serialization.DataSerializerHook;\n+import com.hazelcast.internal.serialization.impl.FactoryIdHelper;\n+import com.hazelcast.nio.serialization.DataSerializableFactory;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import static com.hazelcast.jet.impl.JetFactoryIdHelper.JET_CDC_JSON_DS_FACTORY;\n+import static com.hazelcast.jet.impl.JetFactoryIdHelper.JET_CDC_JSON_DS_FACTORY_ID;\n+\n+public class CdcJsonDataSerializerHook implements DataSerializerHook {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b444d50aa6b9753044d1a5411a149580550dfd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMjYyNQ==", "bodyText": "I wasn't really understanding what I was doing... will cover/fix in separate PR.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r423012625", "createdAt": "2020-05-11T12:45:31Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcJsonDataSerializerHook.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.impl;\n+\n+import com.hazelcast.internal.serialization.DataSerializerHook;\n+import com.hazelcast.internal.serialization.impl.FactoryIdHelper;\n+import com.hazelcast.nio.serialization.DataSerializableFactory;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import static com.hazelcast.jet.impl.JetFactoryIdHelper.JET_CDC_JSON_DS_FACTORY;\n+import static com.hazelcast.jet.impl.JetFactoryIdHelper.JET_CDC_JSON_DS_FACTORY_ID;\n+\n+public class CdcJsonDataSerializerHook implements DataSerializerHook {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwMDI2Ng=="}, "originalCommit": {"oid": "70b444d50aa6b9753044d1a5411a149580550dfd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDI0NjA1OnYy", "diffSide": "RIGHT", "path": "site/docs/api/sources-sinks.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozODo1M1rOGTaaYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozODo1M1rOGTaaYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwODg2NQ==", "bodyText": "is this intentional ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r423008865", "createdAt": "2020-05-11T12:38:53Z", "author": {"login": "eminn"}, "path": "site/docs/api/sources-sinks.md", "diffHunk": "@@ -949,6 +949,74 @@ tests](https://github.com/hazelcast/hazelcast-jet-contrib/tree/master/xa-test)\n to get more information. This only applies to the JDBC sink, the source\n doesn't use XA transactions.\n \n+### CDC\n+\n+Change Data Capture (CDC) refers to the process of observing changes\n+made to a database and extracting them in a form usable by other\n+systems, for the purposes of replication, analysis and many many more.\n+\n+Change Data Capture is especially important to Jet, because it allows\n+for the _integration with legacy systems_. Database changes form a\n+stream of events which can be efficiently processed by Jet.\n+\n+Implementation of CDC in Jet is based on\n+[Debezium](https://debezium.io/). Jet offers a generic Debezium source\n+which can handle CDC events from [any database supported by\n+Debezium](https://debezium.io/documentation/reference/1.1/connectors/index.html),\n+but we're also striving to make CDC sources first class citizens in Jet.\n+The one for MySQL is already one (since Jet version 4.2).\n+\n+Setting up a streaming source of CDC data is just the matter of pointing\n+it at the right database via configuration:\n+\n+```java\n+Pipeline pipeline = Pipeline.create();\n+pipeline.readFrom(\n+    MySqlCdcSources.mysql(\"customers\")\n+            .setDatabaseAddress(\"127.0.0.1\")\n+            .setDatabasePort(3306)\n+            .setDatabaseUser(\"debezium\")\n+            .setDatabasePassword(\"dbz\")\n+            .setClusterName(\"dbserver1\")\n+            .setDatabaseWhitelist(\"inventory\")\n+            .setTableWhitelist(\"inventory.\" + \"customers\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b444d50aa6b9753044d1a5411a149580550dfd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDI0NjgwOnYy", "diffSide": "RIGHT", "path": "site/docs/tutorials/cdc.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozOTowNVrOGTaa4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozOTowNVrOGTaa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwODk5NA==", "bodyText": "same here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2142#discussion_r423008994", "createdAt": "2020-05-11T12:39:05Z", "author": {"login": "eminn"}, "path": "site/docs/tutorials/cdc.md", "diffHunk": "@@ -325,57 +320,31 @@ package org.example;\n \n import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.Util;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.MySqlCdcSources;\n import com.hazelcast.jet.config.JobConfig;\n-import com.hazelcast.jet.contrib.debezium.DebeziumSources;\n import com.hazelcast.jet.pipeline.Pipeline;\n-import com.hazelcast.jet.pipeline.ServiceFactories;\n-import com.hazelcast.jet.pipeline.ServiceFactory;\n import com.hazelcast.jet.pipeline.Sinks;\n-import io.debezium.config.Configuration;\n-import io.debezium.serde.DebeziumSerdes;\n-import org.apache.kafka.common.serialization.Serde;\n-import org.apache.kafka.connect.data.Values;\n-\n-import java.util.Collections;\n+import com.hazelcast.jet.pipeline.StreamSource;\n \n public class JetJob {\n \n     public static void main(String[] args) {\n-        Configuration configuration = Configuration\n-                .create()\n-                .with(\"name\", \"mysql-inventory-connector\")\n-                .with(\"connector.class\", \"io.debezium.connector.mysql.MySqlConnector\")\n-                .with(\"database.hostname\", \"127.0.0.1\")\n-                .with(\"database.port\", 3306)\n-                .with(\"database.user\", \"debezium\")\n-                .with(\"database.password\", \"dbz\")\n-                .with(\"database.server.id\", \"184054\")\n-                .with(\"database.server.name\", \"dbserver1\")\n-                .with(\"database.whitelist\", \"inventory\")\n-                .with(\"table.whitelist\", \"inventory.customers\")\n-                .with(\"include.schema.changes\", \"false\")\n-                .with(\"database.history.hazelcast.list.name\", \"test\")\n+        StreamSource<ChangeRecord> source = MySqlCdcSources.mysql(\"source\")\n+                .setDatabaseAddress(\"127.0.0.1\")\n+                .setDatabasePort(3306)\n+                .setDatabaseUser(\"debezium\")\n+                .setDatabasePassword(\"dbz\")\n+                .setClusterName(\"dbserver1\")\n+                .setDatabaseWhitelist(\"inventory\")\n+                .setTableWhitelist(\"inventory.\" + \"customers\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b444d50aa6b9753044d1a5411a149580550dfd"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4790, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}