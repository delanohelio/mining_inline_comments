{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NTI0NjA0", "number": 2469, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo1MTo0NlrOEePRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToxNTo0NlrOEg2xZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQyODYwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo1MTo0NlrOHJyC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTo1OToyM1rOHJ-zUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxOTE5Mg==", "bodyText": "You may already have made progress by consuming some items in previous while loop iterations.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480019192", "createdAt": "2020-08-31T09:51:46Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "diffHunk": "@@ -165,6 +177,51 @@ public ProgressState drainTo(Predicate<Object> dest) {\n         return tracker.toProgressState();\n     }\n \n+    private ProgressState drainToWithComparator(Predicate<Object> dest) {\n+        int batchSize = -1;\n+        while (true) {\n+            int minIndex = 0;\n+            Object minItem = null;\n+            for (int queueIndex = 0; queueIndex < conveyor.queueCount(); queueIndex++) {\n+                final QueuedPipe<Object> q = conveyor.queue(queueIndex);\n+                if (q == null) {\n+                    continue;\n+                }\n+                Object headObject = q.peek();\n+                Object headItem;\n+                if (headObject instanceof ObjectWithPartitionId) {\n+                    headItem = ((ObjectWithPartitionId) headObject).getItem();\n+                } else {\n+                    headItem = headObject;\n+                }\n+                if (headItem == null) {\n+                    return NO_PROGRESS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e488d574d325209c632adc4e4d4ee480ca53e4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyODE3Ng==", "bodyText": "Done", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480228176", "createdAt": "2020-08-31T15:59:23Z", "author": {"login": "MohamedMandouh"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "diffHunk": "@@ -165,6 +177,51 @@ public ProgressState drainTo(Predicate<Object> dest) {\n         return tracker.toProgressState();\n     }\n \n+    private ProgressState drainToWithComparator(Predicate<Object> dest) {\n+        int batchSize = -1;\n+        while (true) {\n+            int minIndex = 0;\n+            Object minItem = null;\n+            for (int queueIndex = 0; queueIndex < conveyor.queueCount(); queueIndex++) {\n+                final QueuedPipe<Object> q = conveyor.queue(queueIndex);\n+                if (q == null) {\n+                    continue;\n+                }\n+                Object headObject = q.peek();\n+                Object headItem;\n+                if (headObject instanceof ObjectWithPartitionId) {\n+                    headItem = ((ObjectWithPartitionId) headObject).getItem();\n+                } else {\n+                    headItem = headObject;\n+                }\n+                if (headItem == null) {\n+                    return NO_PROGRESS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxOTE5Mg=="}, "originalCommit": {"oid": "a1e488d574d325209c632adc4e4d4ee480ca53e4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzI2NTkzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxNTowNlrOHKDWTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxNTowNlrOHKDWTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMjY2OA==", "bodyText": "we could add a reference back to monoticOrder here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480302668", "createdAt": "2020-08-31T18:15:06Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -371,6 +373,27 @@ public Edge isolated() {\n         return partitioner;\n     }\n \n+    /**\n+     * Sets a comparator on this edge. The comparator is used by {@link ConcurrentInboundEdgeStream}\n+     * to determine which cluster member to receive the next item from over this edge.\n+     *\n+     * @since 4.3\n+     */\n+    public Edge monotonicOrder(@Nonnull ComparatorEx<Object> comparator) {\n+        this.comparator = comparator;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the comparator defined on this edge.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8897d18bf2616969b8edad54f30fab61a2c2b4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzI3MDc3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxNjoyOVrOHKDZMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxNjoyOVrOHKDZMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzQxMQ==", "bodyText": "should be ? super T", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480303411", "createdAt": "2020-08-31T18:16:29Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java", "diffHunk": "@@ -66,6 +67,22 @@\n     @Nonnull @Override\n     BatchStage<T> rebalance();\n \n+    /**\n+     * Attaches a stage that sorts items based on their natural ordering.\n+     *\n+     * @since 4.3\n+     */\n+    @Nonnull\n+    BatchStage<T> sort();\n+\n+    /**\n+     * Attaches a stage that sorts the items based on user-defined comparator.\n+     *\n+     * @since 4.3\n+     */\n+    @Nonnull\n+    BatchStage<T> sort(@Nonnull ComparatorEx<T> comparator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8897d18bf2616969b8edad54f30fab61a2c2b4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzI3MjU2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxNjo1NlrOHKDaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxNjo1NlrOHKDaKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzY1OQ==", "bodyText": "should use T here instead of V", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480303659", "createdAt": "2020-08-31T18:16:56Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.pipeline.transform;\n+\n+import com.hazelcast.function.ComparatorEx;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.core.processor.Processors;\n+import com.hazelcast.jet.impl.pipeline.Planner;\n+import com.hazelcast.jet.impl.pipeline.Planner.PlannerVertex;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static com.hazelcast.function.FunctionEx.identity;\n+import static com.hazelcast.jet.core.Edge.between;\n+import static com.hazelcast.jet.core.processor.Processors.sortPrepareP;\n+\n+\n+public class SortTransform<V> extends AbstractTransform {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8897d18bf2616969b8edad54f30fab61a2c2b4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzI3OTU3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxOTowMVrOHKDeNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoxOTowMVrOHKDeNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNDY5NQ==", "bodyText": "I don't think using SortedSet is correct here. It will skip duplicates. PriorityQueue would be more correct.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480304695", "createdAt": "2020-08-31T18:19:01Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.processor;\n+\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+public class SortPrepareP<V> extends AbstractProcessor {\n+    private final SortedSet<V> set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8897d18bf2616969b8edad54f30fab61a2c2b4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODY5MDQzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyOTo1NVrOHN1ygg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyOTo1NVrOHN1ygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDgxOA==", "bodyText": "Override annotation is missing here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484274818", "createdAt": "2020-09-07T08:29:55Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.processor;\n+\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Comparator;\n+import java.util.PriorityQueue;\n+\n+public class SortP<T> extends AbstractProcessor {\n+    private final PriorityQueue<T> priorityQueue;\n+    private final Traverser<T> resultTraverser;\n+\n+    public SortP(@Nullable Comparator<T> comparator) {\n+        this.priorityQueue = new PriorityQueue<>(comparator);\n+        this.resultTraverser = priorityQueue::poll;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODgxNDQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMTozNFrOHN28Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMjoyMToxNVrOHRB3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw==", "bodyText": "Can you explain which kind of input data this processor can effectively sort (It seems to me that it cannot sort the streaming data completely, but I'm not sure.)?\nIs this processor's only use case to sort the data completely or can it be used for other purposes such as partial sorting?\nAlso, could you document what the comparator parameter does and what the type parameter is?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484293643", "createdAt": "2020-09-07T09:01:34Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzMTM3Nw==", "bodyText": "Also, we should change V to T for consistency.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484331377", "createdAt": "2020-09-07T10:05:14Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NDMyMA==", "bodyText": "It's only meant for batch use cases, it's not meant to be available in StreamingStage interface.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r485054320", "createdAt": "2020-09-08T16:36:56Z", "author": {"login": "MohamedMandouh"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4OTM4Mw==", "bodyText": "I think we should add this information to this processor's javadoc.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r485189383", "createdAt": "2020-09-08T20:52:18Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQxOTI1Ng==", "bodyText": "Actually, this inspires adding a new Edge property that's a limit on the number of items allowed to travel over it.\nThis simple change introduces partial sorting to Jet!\nusage:\nitems.partialSort(10),\nitems.partialSort(ComparatorEx.reverseOrder(), 10)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r487419256", "createdAt": "2020-09-12T15:15:05Z", "author": {"login": "MohamedMandouh"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxODQ5Mg==", "bodyText": "I guess partial sorting could still be done using stage.sort().aggregate(topN()) or stage.sort().aggregate(bottomN()).\nBut that means sending all data first to the target member that does global sorting to complete the sorting stage then choosing top or bottom N items from them which should be cost more comparing to only retrieving the N items you want from other cluster members.\nAlso because topN() and bottomN() will sort the data again at the target member by inserting the already sorted data in a priority queue which is added cost.\nThat's why I suggested introducing stage.partialSort()", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r487618492", "createdAt": "2020-09-14T02:21:15Z", "author": {"login": "MohamedMandouh"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODg3MjY4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToxNTo0NlrOHN3eGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToxNTo0NlrOHN3eGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwMjM2MA==", "bodyText": "Public APIs should include a detailed explanation, sample usage, and parameter and return value descriptions. Could you add them? You can refer to the methods in the GeneralStage interface.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484302360", "createdAt": "2020-09-07T09:15:46Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java", "diffHunk": "@@ -66,6 +67,23 @@\n     @Nonnull @Override\n     BatchStage<T> rebalance();\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4550, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}