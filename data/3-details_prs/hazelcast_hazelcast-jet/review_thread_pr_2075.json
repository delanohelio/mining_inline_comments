{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzkwMjAx", "number": 2075, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1ODoxMlrODqSQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzowODo1NVrODqXorA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjY1ODM4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/HazelcastWriters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1ODoxMlrOF578Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1ODoxMlrOF578Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NTE3MA==", "bodyText": "It would be better to have the cache instance in the context. This is an unnecessary access to multiple concurrent maps.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2075#discussion_r396295170", "createdAt": "2020-03-23T08:58:12Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/HazelcastWriters.java", "diffHunk": "@@ -182,27 +178,36 @@ static RuntimeException handleInstanceNotActive(HazelcastInstanceNotActiveExcept\n         return isLocal ? new RestartableException(e) : e;\n     }\n \n-    /**\n-     * Wrapper class needed to conceal the JCache API while\n-     * serializing/deserializing other lambdas\n-     */\n-    private static class CacheFlush {\n+    private static class WriteCachePSupplier<K, V> extends AbstractHazelcastConnectorSupplier {\n \n-        static <K, V> FunctionEx<HazelcastInstance, ConsumerEx<ArrayMap<K, V>>> flushToCache(\n-                String name,\n-                boolean isLocal\n-        ) {\n-            return instance -> {\n-                ICache<K, V> cache = instance.getCacheManager().getCache(name);\n-                return buffer -> {\n-                    try {\n-                        cache.putAll(buffer);\n-                    } catch (HazelcastInstanceNotActiveException e) {\n-                        throw handleInstanceNotActive(e, isLocal);\n-                    }\n-                    buffer.clear();\n-                };\n+        static final long serialVersionUID = 1L;\n+\n+        private final String name;\n+\n+        WriteCachePSupplier(@Nullable ClientConfig clientConfig, @Nonnull String name) {\n+            super(asXmlString(clientConfig));\n+            this.name = name;\n+        }\n+\n+        @Override\n+        protected Processor createProcessor(HazelcastInstance instance, SerializationService serializationService) {\n+            FunctionEx<Context, ArrayMap<Data, Data>> bufferCreator = context -> new ArrayMap<>();\n+            BiConsumerEx<ArrayMap<Data, Data>, Entry<K, V>> entryReceiver = (buffer, entry) -> {\n+                Data key = serializationService.toData(entry.getKey());\n+                Data value = serializationService.toData(entry.getValue());\n+                buffer.add(new SimpleEntry<>(key, value));\n+            };\n+            ConsumerEx<ArrayMap<Data, Data>> bufferFlusher = buffer -> {\n+                ICache<Data, Data> cache = instance.getCacheManager().getCache(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defd23156d7b8a5f1410327619be415f78d4f796"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzU0MDI4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/SinksTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzowODo1NlrOF6ElTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzowODo1NlrOF6ElTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzNjgxNQ==", "bodyText": "This was done on purpose due to https://bugs.openjdk.java.net/browse/JDK-8154236", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2075#discussion_r396436815", "createdAt": "2020-03-23T13:08:56Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/SinksTest.java", "diffHunk": "@@ -244,7 +246,7 @@ public void mapWithMerging_byName() {\n                 srcName,\n                 Entry::getKey,\n                 Entry::getValue,\n-                (oldValue, newValue) -> oldValue + newValue);\n+                Integer::sum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15a64f142fd5f559e8b58f45f692428258f10ee"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4733, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}