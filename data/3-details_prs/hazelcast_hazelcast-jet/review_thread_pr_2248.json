{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2Njg0MDc5", "number": 2248, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoyMToxMFrOD9XoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0OTowM1rOD9YQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njc2ODQ5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoyMToxMFrOGW0ofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoyMToxMFrOGW0ofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NDE5MQ==", "bodyText": "should call this file ClassHeaderApache.txt perhaps", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426584191", "createdAt": "2020-05-18T12:21:10Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/pom.xml", "diffHunk": "@@ -34,12 +34,22 @@\n \n     <properties>\n         <debezium.version>1.1.0.Final</debezium.version>\n-        <jackson.jr.version>2.11.0</jackson.jr.version>\n         <kafka.connect.version>2.3.1</kafka.connect.version>\n         <testcontainers.version>1.13.0</testcontainers.version>\n         <log4j2.slf4j.binding.version>2.13.2</log4j2.slf4j.binding.version>\n+\n+        <!-- needed for CheckStyle -->\n+        <checkstyle.headerLocation>${maven.multiModuleProjectDirectory}/checkstyle/ClassHeader.txt</checkstyle.headerLocation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjgyMTQxOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjozNTo0M1rOGW1IgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoyMzoxOFrOGW5gTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjM4NA==", "bodyText": "this method can be inlined into the serializer", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426592384", "createdAt": "2020-05-18T12:35:43Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java", "diffHunk": "@@ -102,26 +98,15 @@ public String toString() {\n         return toJson();\n     }\n \n-    @Override\n-    public int getFactoryId() {\n-        return CdcJsonDataSerializerHook.FACTORY_ID;\n-    }\n-\n-    @Override\n-    public int getClassId() {\n-        return CdcJsonDataSerializerHook.CHANGE_RECORD;\n-    }\n-\n-    @Override\n-    public void writeData(ObjectDataOutput out) throws IOException {\n+    void writeData(ObjectDataOutput out) throws IOException {\n         out.writeUTF(keyJson);\n         out.writeUTF(valueJson);\n     }\n \n-    @Override\n-    public void readData(ObjectDataInput in) throws IOException {\n-        keyJson = in.readUTF();\n-        valueJson = in.readUTF();\n+    static ChangeRecordImpl readData(ObjectDataInput in) throws IOException {\n+        String keyJson = in.readUTF();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDAxNQ==", "bodyText": "The fields used are implementation details (to some extent) and I didn't want to add getters for them (that aren't part of the interface). The read/write methods seemed a better solution to me (they aren't the overriding ones from the other serialization, but are similar and confusing maybe) and I used them everywhere for consistency. Will inline them.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426664015", "createdAt": "2020-05-18T14:23:18Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java", "diffHunk": "@@ -102,26 +98,15 @@ public String toString() {\n         return toJson();\n     }\n \n-    @Override\n-    public int getFactoryId() {\n-        return CdcJsonDataSerializerHook.FACTORY_ID;\n-    }\n-\n-    @Override\n-    public int getClassId() {\n-        return CdcJsonDataSerializerHook.CHANGE_RECORD;\n-    }\n-\n-    @Override\n-    public void writeData(ObjectDataOutput out) throws IOException {\n+    void writeData(ObjectDataOutput out) throws IOException {\n         out.writeUTF(keyJson);\n         out.writeUTF(valueJson);\n     }\n \n-    @Override\n-    public void readData(ObjectDataInput in) throws IOException {\n-        keyJson = in.readUTF();\n-        valueJson = in.readUTF();\n+    static ChangeRecordImpl readData(ObjectDataInput in) throws IOException {\n+        String keyJson = in.readUTF();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjM4NA=="}, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjgyMjczOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjozNjowNVrOGW1JSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjozNjowNVrOGW1JSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjU4Ng==", "bodyText": "it would be better to inline the serialization methods if you're using StreamSerializer", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426592586", "createdAt": "2020-05-18T12:36:05Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -234,26 +233,16 @@ public void setOffset(Map<String, ?> partition, Map<String, ?> offset) {\n             partitionsToOffset.put(partition, offset);\n         }\n \n-        @Override\n-        public int getFactoryId() {\n-            return CdcJsonDataSerializerHook.FACTORY_ID;\n-        }\n-\n-        @Override\n-        public int getClassId() {\n-            return CdcJsonDataSerializerHook.SOURCE_STATE;\n-        }\n-\n-        @Override\n-        public void writeData(ObjectDataOutput out) throws IOException {\n+        void writeData(ObjectDataOutput out) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njg0ODU5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0MzowNVrOGW1ZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0MzowNVrOGW1ZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NjYzNw==", "bodyText": "again can be inlined", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426596637", "createdAt": "2020-05-18T12:43:05Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java", "diffHunk": "@@ -77,23 +79,13 @@ public String toString() {\n         return toJson();\n     }\n \n-    @Override\n-    public int getFactoryId() {\n-        return CdcJsonDataSerializerHook.FACTORY_ID;\n-    }\n-\n-    @Override\n-    public int getClassId() {\n-        return CdcJsonDataSerializerHook.RECORD_PART;\n-    }\n-\n-    @Override\n-    public void writeData(ObjectDataOutput out) throws IOException {\n+    void writeData(ObjectDataOutput out) throws IOException {\n         out.writeUTF(json);\n     }\n \n-    @Override\n-    public void readData(ObjectDataInput in) throws IOException {\n-        json = in.readUTF();\n+    static RecordPartImpl readData(ObjectDataInput in) throws IOException {\n+        String json = in.readUTF();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njg1OTc5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0NTo1OFrOGW1fvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo1ODowNFrOGW4aZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5ODMzNA==", "bodyText": "too much duplication with UpdateMapP", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426598334", "createdAt": "2020-05-18T12:45:58Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.connector;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.jet.core.Inbox;\n+import com.hazelcast.jet.core.JetDataSerializerHook;\n+import com.hazelcast.jet.core.Outbox;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.CheckReturnValue;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UpdateMapWithMaterializedValuesP<T, K, V> extends AsyncHazelcastWriterP {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0NjExOQ==", "bodyText": "My opinion was (and is) that forcing further reuse/code share would hurt understandability greatly, but on the other hand I can definitely give it one more try.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426646119", "createdAt": "2020-05-18T13:58:04Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.connector;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.jet.core.Inbox;\n+import com.hazelcast.jet.core.JetDataSerializerHook;\n+import com.hazelcast.jet.core.Outbox;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.CheckReturnValue;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UpdateMapWithMaterializedValuesP<T, K, V> extends AsyncHazelcastWriterP {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5ODMzNA=="}, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njg3MjM1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0OTowM1rOGW1nTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0OTowM1rOGW1nTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwMDI2OQ==", "bodyText": "would be better to call this PartitionService, and then you can initialize it in init() automatically and allow it to be used from subclasses automatically.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426600269", "createdAt": "2020-05-18T12:49:03Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java", "diffHunk": "@@ -158,4 +164,32 @@ private boolean asyncCallsDone() {\n         checkError();\n         return allWritten;\n     }\n+\n+    static class PartitionInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb771581dff407afb78761b76f47006964c1cf1"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4707, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}