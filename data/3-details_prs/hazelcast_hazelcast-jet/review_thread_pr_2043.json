{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzI4MDgw", "number": 2043, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMDoyNlrODl3vYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDozOTo0NlrODnBWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDM3MTU1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMDoyNlrOFzAOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0Mzo1MVrOFzuIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNTQ1NA==", "bodyText": "should we not offer a more convenient interface here? like Serializer or similar?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389025454", "createdAt": "2020-03-06T17:00:26Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -927,6 +923,44 @@ private static File urlToFile(@Nonnull URL url) {\n         return resourceConfigs;\n     }\n \n+    /**\n+     * Registers given serializer for a given class for the scope of the job.\n+     * Both will be accessible to all the code attached to the underlying\n+     * pipeline or DAG, but not to any other code. (An important example is\n+     * the {@code IMap} data source, which can instantiate only the classes\n+     * from the Jet instance's classpath.)\n+     *\n+     * Serializer must have no-arg constructor.\n+     *\n+     * @implNote Backing storage for this method is an {@link IMap} with a\n+     * default backup count of 1. When adding big files as a resource, size\n+     * the cluster accordingly in terms of memory, since each file will have 2\n+     * copies inside the cluster(primary + backup replica).\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    public <T, S extends StreamSerializer<?>> JobConfig addSerializer(Class<T> clazz, Class<S> serializerClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6739e82d1b8359e389842c05c5090fbeb55562dd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3NzQ1OA==", "bodyText": "agreed with @vbekiaris that StreamSerializer should be enough, ByteArraySerializer is more of a private thingy", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389777458", "createdAt": "2020-03-09T15:43:51Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -927,6 +923,44 @@ private static File urlToFile(@Nonnull URL url) {\n         return resourceConfigs;\n     }\n \n+    /**\n+     * Registers given serializer for a given class for the scope of the job.\n+     * Both will be accessible to all the code attached to the underlying\n+     * pipeline or DAG, but not to any other code. (An important example is\n+     * the {@code IMap} data source, which can instantiate only the classes\n+     * from the Jet instance's classpath.)\n+     *\n+     * Serializer must have no-arg constructor.\n+     *\n+     * @implNote Backing storage for this method is an {@link IMap} with a\n+     * default backup count of 1. When adding big files as a resource, size\n+     * the cluster accordingly in terms of memory, since each file will have 2\n+     * copies inside the cluster(primary + backup replica).\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    public <T, S extends StreamSerializer<?>> JobConfig addSerializer(Class<T> clazz, Class<S> serializerClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNTQ1NA=="}, "originalCommit": {"oid": "6739e82d1b8359e389842c05c5090fbeb55562dd"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTAwNTA5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ExecutionContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxMToxOVrOFzqKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNTo1MFrOF0FFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMjQ4OA==", "bodyText": "Maybe we can avoid this if there are no serializers configured.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389712488", "createdAt": "2020-03-09T14:11:19Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ExecutionContext.java", "diffHunk": "@@ -129,13 +137,19 @@ public ExecutionContext initialize(ExecutionPlan plan) {\n         snapshotContext = new SnapshotContext(nodeEngine.getLogger(SnapshotContext.class), jobNameAndExecutionId(),\n                 plan.lastSnapshotId(), jobConfig.getProcessingGuarantee());\n \n+        serializationService = new JetSerializationService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcafff002df2307dc46248803ad6ca3593bc3f2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MzYyMg==", "bodyText": "We need to call destroy() at job completion, that would require another if in completeExecution.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r390153622", "createdAt": "2020-03-10T08:25:50Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ExecutionContext.java", "diffHunk": "@@ -129,13 +137,19 @@ public ExecutionContext initialize(ExecutionPlan plan) {\n         snapshotContext = new SnapshotContext(nodeEngine.getLogger(SnapshotContext.class), jobNameAndExecutionId(),\n                 plan.lastSnapshotId(), jobConfig.getProcessingGuarantee());\n \n+        serializationService = new JetSerializationService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMjQ4OA=="}, "originalCommit": {"oid": "4dcafff002df2307dc46248803ad6ca3593bc3f2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTAxMTUyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxMjoxNlrOFzqObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxMjoxNlrOFzqObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMzUxNw==", "bodyText": "We should not add classes. We should just register the serializer and the user is responsible for having the classes on classpath. There are other ways to make the class available at runtime, this is the least common one.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389713517", "createdAt": "2020-03-09T14:12:16Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -927,6 +923,44 @@ private static File urlToFile(@Nonnull URL url) {\n         return resourceConfigs;\n     }\n \n+    /**\n+     * Registers given serializer for a given class for the scope of the job.\n+     * Both will be accessible to all the code attached to the underlying\n+     * pipeline or DAG, but not to any other code. (An important example is\n+     * the {@code IMap} data source, which can instantiate only the classes\n+     * from the Jet instance's classpath.)\n+     *\n+     * Serializer must have no-arg constructor.\n+     *\n+     * @implNote Backing storage for this method is an {@link IMap} with a\n+     * default backup count of 1. When adding big files as a resource, size\n+     * the cluster accordingly in terms of memory, since each file will have 2\n+     * copies inside the cluster(primary + backup replica).\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    public <T, S extends Serializer> JobConfig addSerializer(Class<T> clazz, Class<S> serializerClass) {\n+        addClass(clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcafff002df2307dc46248803ad6ca3593bc3f2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTA1OTQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyMjowMlrOFzqquQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyMjowMlrOFzqquQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMDc2MQ==", "bodyText": "This should be in JobConfigTest", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389720761", "createdAt": "2020-03-09T14:22:02Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1064,6 +1070,48 @@ public void when_attachAll() throws Exception {\n         assertEquals(dir.toURI().toURL(), dirConfig.getUrl());\n     }\n \n+    @Test\n+    public void when_addSerializer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ef9769855ef7810e23cfbbe27ce938e8f5d298"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTA2ODgxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/deployment/JobLevelSerializerIsAvailable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyNDowM1rOFzqwPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyNDowM1rOFzqwPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMjE3Mw==", "bodyText": "Remove the try-catch and just declare the exception.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389722173", "createdAt": "2020-03-09T14:24:03Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/deployment/JobLevelSerializerIsAvailable.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.deployment;\n+\n+import com.hazelcast.jet.core.AbstractProcessor;\n+import com.hazelcast.jet.impl.execution.init.Contexts.ProcCtx;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.fail;\n+\n+public class JobLevelSerializerIsAvailable extends AbstractProcessor {\n+\n+    static final String VALUE_CLASS_NAME = \"com.sample.serializer.Value\";\n+    static final String SERIALIZER_CLASS_NAME = \"com.sample.serializer.ValueSerializer\";\n+\n+    @Override\n+    protected void init(@Nonnull Context context) {\n+        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Class<?> clazz = cl.loadClass(VALUE_CLASS_NAME);\n+            Object value = clazz.getDeclaredConstructor().newInstance();\n+            // We serialize an object so the job level serializer is invoked.\n+            byte[] bytes = ((ProcCtx) context).serializationService().toBytes(value);\n+            assertArrayEquals(bytes, new byte[]{0, 0, 0, 0, 0, 0, 0, 42});\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ef9769855ef7810e23cfbbe27ce938e8f5d298"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTA5NDUwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/deployment/AbstractDeploymentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyOTo1MFrOFzq_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozNDoyNFrOFzygqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjE3NA==", "bodyText": "We should not test the addClass functionality, but that the Jet can actually use the serializer. The test could have 2 vertices connected by a distributed edge. The source will generate a non-serializable object for which a custom serializer is used. The cluster must have at least 2 members, otherwise serialization isn't used.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389726174", "createdAt": "2020-03-09T14:29:50Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/deployment/AbstractDeploymentTest.java", "diffHunk": "@@ -323,6 +328,23 @@ public void testDeployment_whenFileAddedAsResource_thenAvailableOnClassLoader()\n         executeAndPeel(getJetInstance().newJob(dag, jobConfig));\n     }\n \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDeployment_whenAddSerializer_thenAvailableOnJobContext() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ef9769855ef7810e23cfbbe27ce938e8f5d298"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0OTI1OA==", "bodyText": "I'd just remove this test. It only tests job class loading in a confusing way.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r389849258", "createdAt": "2020-03-09T17:34:24Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/deployment/AbstractDeploymentTest.java", "diffHunk": "@@ -323,6 +328,23 @@ public void testDeployment_whenFileAddedAsResource_thenAvailableOnClassLoader()\n         executeAndPeel(getJetInstance().newJob(dag, jobConfig));\n     }\n \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDeployment_whenAddSerializer_thenAvailableOnJobContext() throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjE3NA=="}, "originalCommit": {"oid": "a0ef9769855ef7810e23cfbbe27ce938e8f5d298"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODAzMjY1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToyODoxMVrOF0HDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToyODoxMVrOF0HDAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NTcyOA==", "bodyText": "can we rename method to registerSerializerFor and have the parameters reversed. JobConfig.registerSerializerFor(Value.class, ValueSerializer.class)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r390185728", "createdAt": "2020-03-10T09:28:11Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -927,6 +924,40 @@ private static File urlToFile(@Nonnull URL url) {\n         return resourceConfigs;\n     }\n \n+    /**\n+     * Registers the given serializer for the given class for the scope of the\n+     * job. It will be accessible to all the code attached to the underlying\n+     * pipeline or DAG, but not to any other code. (An important example is the\n+     * {@code IMap} data source, which can instantiate only the classes from\n+     * the Jet instance's classpath.)\n+     * <p>\n+     * Serializer must have no-arg constructor.\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    @EvolvingApi\n+    public <T, S extends StreamSerializer<?>> JobConfig registerStreamSerializer(@Nonnull Class<S> serializerClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a847c0d74fe8b460516dac72e160b34e28436bde"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjM3MTczOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoyMjo0MlrOF0w63A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoyMjo0MlrOF0w63A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MTc3Mg==", "bodyText": "Do we need to preserve the iteration order? HashMap is cheaper. For resourceConfigs it's probably important because two added JARs can have duplicate classes, and the first one should be used, but here we don't allow duplicates.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r390871772", "createdAt": "2020-03-11T10:22:42Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -65,6 +67,7 @@\n     private boolean storeMetricsAfterJobCompletion;\n \n     private Map<String, ResourceConfig> resourceConfigs = new LinkedHashMap<>();\n+    private Map<String, String> serializerConfigs = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86dba6b547af168541ef2d428b6716df629b2379"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjQzMTg2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDozOTo0NlrOF0xgcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDozOTo0NlrOF0xgcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4MTM5Mg==", "bodyText": "My opinion: can be named just registerSerializer. The \"for\" isn't needed.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2043#discussion_r390881392", "createdAt": "2020-03-11T10:39:46Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -927,6 +924,45 @@ private static File urlToFile(@Nonnull URL url) {\n         return resourceConfigs;\n     }\n \n+    /**\n+     * Registers the given serializer for the given class for the scope of the\n+     * job. It will be accessible to all the code attached to the underlying\n+     * pipeline or DAG, but not to any other code. (An important example is the\n+     * {@code IMap} data source, which can instantiate only the classes from\n+     * the Jet instance's classpath.)\n+     * <p>\n+     * Serializers registered on a job level have precedence over any serializer\n+     * registered on a cluster level.\n+     * <p>\n+     * Serializer must have no-arg constructor.\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    @EvolvingApi\n+    public <T, S extends StreamSerializer<?>> JobConfig registerSerializerFor(@Nonnull Class<T> clazz,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86dba6b547af168541ef2d428b6716df629b2379"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4893, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}