{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDcyOTE4", "number": 2754, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0OTozMVrOFFBTXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowNDowMVrOFFh2iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODA4NTQxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0OTozMVrOIFUDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyMToxNFrOIFeDRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MjM3NQ==", "bodyText": "This doesn't state which processor on each member. The PR mentions \"round robin\" so I guess it's a different processor every time?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542442375", "createdAt": "2020-12-14T14:49:31Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,12 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0OTk2Mg==", "bodyText": "Slightly reworded.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542449962", "createdAt": "2020-12-14T14:59:04Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,12 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MjM3NQ=="}, "originalCommit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NjQ4OQ==", "bodyText": "I think it would be better to describe the procedure made in a round-robin fashion in another sentence. Because it's a bit unclear what exactly is done in a round-robin fashion.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542466489", "createdAt": "2020-12-14T15:19:38Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,12 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MjM3NQ=="}, "originalCommit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1ODgwNw==", "bodyText": "Let's follow the lead of UNICAST, which says \"with no restriction on the choice.\" Here we can say \"sends each item to a single processor on every cluster member. Which exactly processor inside a member it chooses is arbitrary and may change with every item.\".", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542558807", "createdAt": "2020-12-14T17:15:29Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,12 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MjM3NQ=="}, "originalCommit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNjE0OQ==", "bodyText": "Currently, we can run a DAG containing a fanout edge only in a cluster containing multiple members. Is this expected behavior? I would expect it to act like unicast when it is running on single member because we can normally run a DAG with a distributed edge on a single member.\nOtherwise, failing the job in this case is the expected behavior, let's note it here. Also, I think that we should add tests to RoutingPolicyTest for distributed edge types to demonstrate the single member behavior of them (I am aware that currently other distributed edge types isn't tested for their single member behaviors either.)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542606149", "createdAt": "2020-12-14T18:21:14Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,12 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MjM3NQ=="}, "originalCommit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTMyNzgwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0Mzo1MVrOIFflLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0Mzo1MVrOIFflLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMTIxMg==", "bodyText": "This causes a job to be failed when it runs on a single member. If it is not intended, you can check this", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542631212", "createdAt": "2020-12-14T18:43:51Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -378,23 +379,160 @@ private void initDag(InternalSerializationService jobSerializationService) {\n         return processors;\n     }\n \n+    private List<OutboundEdgeStream> createOutboundEdgeStreams(\n+            VertexDef vertex,\n+            int processorIdx,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n+        for (EdgeDef edge : vertex.outboundEdges()) {\n+            OutboundCollector outboundCollector = createOutboundCollector(edge, processorIdx, jobSerializationService);\n+            OutboundEdgeStream outboundEdgeStream = new OutboundEdgeStream(edge.sourceOrdinal(), outboundCollector);\n+            outboundStreams.add(outboundEdgeStream);\n+        }\n+        return outboundStreams;\n+    }\n+\n     /**\n-     * Populates {@code localConveyorMap}, {@code edgeSenderConveyorMap}.\n-     * Populates {@link #senderMap} and {@link #tasklets} fields.\n+     * Each edge is represented by an array of conveyors between the producers and consumers.\n+     * There are as many conveyors as there are consumers.\n+     * Each conveyor has one queue per producer.\n+     *\n+     * For a distributed edge, there is one additional producer per member represented\n+     * by the ReceiverTasklet.\n      */\n-    private List<OutboundEdgeStream> createOutboundEdgeStreams(VertexDef srcVertex, int processorIdx,\n-                                                               InternalSerializationService jobSerializationService) {\n-        final List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n-        for (EdgeDef edge : srcVertex.outboundEdges()) {\n-            Map<Address, ConcurrentConveyor<Object>> memberToSenderConveyorMap = null;\n-            if (edge.getDistributedTo() != null) {\n-                memberToSenderConveyorMap =\n-                        memberToSenderConveyorMap(edgeSenderConveyorMap, edge, jobSerializationService);\n+    private OutboundCollector createOutboundCollector(\n+            EdgeDef edge,\n+            int processorIndex,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        if (edge.isDistributed() && edge.routingPolicy() == RoutingPolicy.ISOLATED) {\n+            throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n+        }\n+        if ((!edge.isDistributed() || !edge.getDistributedTo().equals(DISTRIBUTE_TO_ALL))\n+            && edge.routingPolicy() == RoutingPolicy.FANOUT) {\n+            throw new IllegalArgumentException(\"Fanout edges must be distributed: \" + edge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjQ5Mzg3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/OutboundCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozNjo1MVrOIF85XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozNjo1MVrOIF85XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMTUxNw==", "bodyText": "This method and the localCompositeCollector method are almost the same, except for the FANOUT case. It might be easier to follow if we have just one method, add boolean local argument, and in the FANOUT case do:\nlocal ? new RoundRobin(collectors) : new Broadcast(collectors);", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543111517", "createdAt": "2020-12-15T07:36:51Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/OutboundCollector.java", "diffHunk": "@@ -76,6 +77,26 @@ static OutboundCollector compositeCollector(\n         }\n     }\n \n+    static OutboundCollector distributedCompositeCollector(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjU5ODk4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowNDoxNFrOIF90ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowNDoxNFrOIF90ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNjYyOA==", "bodyText": "If the second condition is true, the first is always true:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((!edge.isDistributed() || !edge.getDistributedTo().equals(DISTRIBUTE_TO_ALL))\n          \n          \n            \n                    if (!DISTRIBUTE_TO_ALL.equals(edge.getDistributedTo())", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543126628", "createdAt": "2020-12-15T08:04:14Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -378,23 +379,160 @@ private void initDag(InternalSerializationService jobSerializationService) {\n         return processors;\n     }\n \n+    private List<OutboundEdgeStream> createOutboundEdgeStreams(\n+            VertexDef vertex,\n+            int processorIdx,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n+        for (EdgeDef edge : vertex.outboundEdges()) {\n+            OutboundCollector outboundCollector = createOutboundCollector(edge, processorIdx, jobSerializationService);\n+            OutboundEdgeStream outboundEdgeStream = new OutboundEdgeStream(edge.sourceOrdinal(), outboundCollector);\n+            outboundStreams.add(outboundEdgeStream);\n+        }\n+        return outboundStreams;\n+    }\n+\n     /**\n-     * Populates {@code localConveyorMap}, {@code edgeSenderConveyorMap}.\n-     * Populates {@link #senderMap} and {@link #tasklets} fields.\n+     * Each edge is represented by an array of conveyors between the producers and consumers.\n+     * There are as many conveyors as there are consumers.\n+     * Each conveyor has one queue per producer.\n+     *\n+     * For a distributed edge, there is one additional producer per member represented\n+     * by the ReceiverTasklet.\n      */\n-    private List<OutboundEdgeStream> createOutboundEdgeStreams(VertexDef srcVertex, int processorIdx,\n-                                                               InternalSerializationService jobSerializationService) {\n-        final List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n-        for (EdgeDef edge : srcVertex.outboundEdges()) {\n-            Map<Address, ConcurrentConveyor<Object>> memberToSenderConveyorMap = null;\n-            if (edge.getDistributedTo() != null) {\n-                memberToSenderConveyorMap =\n-                        memberToSenderConveyorMap(edgeSenderConveyorMap, edge, jobSerializationService);\n+    private OutboundCollector createOutboundCollector(\n+            EdgeDef edge,\n+            int processorIndex,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        if (edge.isDistributed() && edge.routingPolicy() == RoutingPolicy.ISOLATED) {\n+            throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n+        }\n+        if ((!edge.isDistributed() || !edge.getDistributedTo().equals(DISTRIBUTE_TO_ALL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjc3NzM4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/EdgeDef.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0NjozMFrOIF_arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0NjozMFrOIF_arA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1MjgxMg==", "bodyText": "I specifically didn't want to create this method because of the distributed-to-one edge type - it won't strike your eye that there are two types of distributed edges, especially when the distributed-to-one is rarely used. Maybe we can create isLocal method instead, it seems that there are more instances of !edge.isDistributed() than without the negation.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543152812", "createdAt": "2020-12-15T08:46:30Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/EdgeDef.java", "diffHunk": "@@ -114,6 +114,10 @@ Address getDistributedTo() {\n         return distributedTo;\n     }\n \n+    boolean isDistributed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjg3NTgxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo0MlrOIGAU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo0MlrOIGAU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NzcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /**\n          \n          \n            \n                     * This policy sends each item to a single processor on each of the\n          \n          \n            \n                     * cluster members in a round robin fashion. It is only available\n          \n          \n            \n                     * on a distributed edge.\n          \n          \n            \n                     */\n          \n          \n            \n                    /**\n          \n          \n            \n                     * This policy sends an item to all members, but only to one processor on\n          \n          \n            \n                     * each member. It's a combination of {@link #BROADCAST} and {@link\n          \n          \n            \n                     * #UNICAST}: an item is first <em>broadcast</em> to all members, and then,\n          \n          \n            \n                     * on each member, it is <em>unicast</em> to one processor.\n          \n          \n            \n                     * <p>\n          \n          \n            \n                     * If the destination local parallelism is 1, the behavior is equal to\n          \n          \n            \n                     * {@link #BROADCAST}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @since 4.4\n          \n          \n            \n                     */", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543167716", "createdAt": "2020-12-15T09:08:42Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,13 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the\n+         * cluster members in a round robin fashion. It is only available\n+         * on a distributed edge.\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzQxODMyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowNDowMVrOIGFTRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowNDowMVrOIGFTRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0OTIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * If the destination local parallelism is 1, the behavior is equal to\n          \n          \n            \n                     * {@link #BROADCAST}.\n          \n          \n            \n                     * If the destination local parallelism is 1, the behavior is equal to\n          \n          \n            \n                     * {@link #BROADCAST}. If the member count in the cluster is 1, the\n          \n          \n            \n                     * behavior is equal to {@link #UNICAST}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543249222", "createdAt": "2020-12-15T11:04:01Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +690,19 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends an item to all members, but only to one processor on\n+         * each member. It's a combination of {@link #BROADCAST} and {@link\n+         * #UNICAST}: an item is first <em>broadcast</em> to all members, and then,\n+         * on each member, it is <em>unicast</em> to one processor.\n+         * <p>\n+         * If the destination local parallelism is 1, the behavior is equal to\n+         * {@link #BROADCAST}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "308f600f232229acbfae271b58f5c1beffe9432d"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4371, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}