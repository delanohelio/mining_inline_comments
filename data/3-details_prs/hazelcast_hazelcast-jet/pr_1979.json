{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0ODc5Mjgz", "number": 1979, "title": "(de)serialization page draft.", "bodyText": "Draft of (de)serialization page.", "createdAt": "2020-02-13T13:51:10Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1979", "merged": true, "mergeCommit": {"oid": "3c9afedc7f4402d29dbb77e648d4da3b229b203a"}, "closed": true, "closedAt": "2020-02-14T16:13:15Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD69XzgH2gAyMzc0ODc5MjgzOjczYmZjOTJjZjQwOTY3YjY4ZWJmYmJkODZiMjRiNjk4Y2YzYWNjOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEQxUoAFqTM1ODk5NTcyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "73bfc92cf40967b68ebfbbd86b24b698cf3acc9e", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/73bfc92cf40967b68ebfbbd86b24b698cf3acc9e", "committedDate": "2020-02-13T13:29:23Z", "message": "(De)serialization docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37df40991d5b399eb7f2615110c2a82897585b13", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/37df40991d5b399eb7f2615110c2a82897585b13", "committedDate": "2020-02-13T14:01:58Z", "message": "Wrap each line to 72 chars."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab6a607d08defb31c3d830b9ebcd15ee95befcd", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/aab6a607d08defb31c3d830b9ebcd15ee95befcd", "committedDate": "2020-02-13T15:21:01Z", "message": "Add size comparison."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f7861642d1b831be206a1ab84d992f35b7eff8", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/47f7861642d1b831be206a1ab84d992f35b7eff8", "committedDate": "2020-02-13T15:48:12Z", "message": "Merge remote-tracking branch 'upstream/docs' into docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62471c8fb8b903642f0b1e287383b65e3df81a8d", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/62471c8fb8b903642f0b1e287383b65e3df81a8d", "committedDate": "2020-02-14T08:17:53Z", "message": "Add (de)serialization pros and cons."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODA1MTE0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1979#pullrequestreview-358805114", "createdAt": "2020-02-14T09:21:50Z", "commit": {"oid": "62471c8fb8b903642f0b1e287383b65e3df81a8d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToyMTo1MFrOFpwIfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToyNToxOFrOFpwOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyNDU0MA==", "bodyText": "WDYT  about crucial to efficient usage of Hazelcast Jet ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1979#discussion_r379324540", "createdAt": "2020-02-14T09:21:50Z", "author": {"login": "eminn"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -3,6 +3,87 @@ title: Serialization\n id: serialization\n ---\n \n-## How Data is serialized in Jet\n+## (De)Serialization in Jet\n \n-TODO\n+To be able to send object state over a network or store it in a file \n+one has to first serialize it into raw bytes. Similarly, to be able to \n+fetch an object state over a wire or read it from a persistent storage \n+one has to deserialize it from raw bytes first. As Hazelcast Jet is a \n+distributed system by nature (de)serialization is integral part of it. \n+Understanding, when it is involved, how does it support the pipelines \n+and knowing differences between each of the strategies is crucial to \n+efficient Jet usage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62471c8fb8b903642f0b1e287383b65e3df81a8d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyNDkzNg==", "bodyText": "Maybe a link to the DAG section if we have it atm or a javadoc link ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1979#discussion_r379324936", "createdAt": "2020-02-14T09:22:48Z", "author": {"login": "eminn"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -3,6 +3,87 @@ title: Serialization\n id: serialization\n ---\n \n-## How Data is serialized in Jet\n+## (De)Serialization in Jet\n \n-TODO\n+To be able to send object state over a network or store it in a file \n+one has to first serialize it into raw bytes. Similarly, to be able to \n+fetch an object state over a wire or read it from a persistent storage \n+one has to deserialize it from raw bytes first. As Hazelcast Jet is a \n+distributed system by nature (de)serialization is integral part of it. \n+Understanding, when it is involved, how does it support the pipelines \n+and knowing differences between each of the strategies is crucial to \n+efficient Jet usage.\n+\n+Hazelcast Jet closely integrates with Hazelcast IMDG exposing many of \n+its features to Jet users. In particular, one can use IMDG data \n+structure as Jet `Source` and/or `Sink`. Objects retrieved from and \n+stored in those have to be (de)serializable.\n+\n+Another case which might require (de)serializable objects is sending \n+computation results between remote vertices. Hazelcast Jet tries to \n+minimize network traffic as much as possible, nonetheless different \n+parts of a `DAG` can reside on separate cluster members. To catch ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62471c8fb8b903642f0b1e287383b65e3df81a8d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyNjA3MQ==", "bodyText": "Maybe a link to the benchmark source for reproducibility ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1979#discussion_r379326071", "createdAt": "2020-02-14T09:25:18Z", "author": {"login": "eminn"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -3,6 +3,87 @@ title: Serialization\n id: serialization\n ---\n \n-## How Data is serialized in Jet\n+## (De)Serialization in Jet\n \n-TODO\n+To be able to send object state over a network or store it in a file \n+one has to first serialize it into raw bytes. Similarly, to be able to \n+fetch an object state over a wire or read it from a persistent storage \n+one has to deserialize it from raw bytes first. As Hazelcast Jet is a \n+distributed system by nature (de)serialization is integral part of it. \n+Understanding, when it is involved, how does it support the pipelines \n+and knowing differences between each of the strategies is crucial to \n+efficient Jet usage.\n+\n+Hazelcast Jet closely integrates with Hazelcast IMDG exposing many of \n+its features to Jet users. In particular, one can use IMDG data \n+structure as Jet `Source` and/or `Sink`. Objects retrieved from and \n+stored in those have to be (de)serializable.\n+\n+Another case which might require (de)serializable objects is sending \n+computation results between remote vertices. Hazelcast Jet tries to \n+minimize network traffic as much as possible, nonetheless different \n+parts of a `DAG` can reside on separate cluster members. To catch \n+(de)serialization issues early on, we recommend using a 2-member local \n+Jet cluster for development and testing.\n+\n+Currently, Hazelcast Jet supports 6 interfaces to (de)serialize objects:\n+- [java.io.Serializable](https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html)\n+- [java.io.Externalizable](https://docs.oracle.com/javase/8/docs/api/java/io/Externalizable.html)\n+- [com.hazelcast.nio.serialization.DataSerializable](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/DataSerializable.html)\n+- [com.hazelcast.nio.serialization.IdentifiedDataSerializable](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/IdentifiedDataSerializable.html)\n+- [com.hazelcast.nio.serialization.Portable](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/Portable.html)\n+- [com.hazelcast.nio.serialization.StreamSerializer](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/StreamSerializer.html) &\n+  [com.hazelcast.nio.serialization.ByteArraySerializer](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/ByteArraySerializer.html)\n+\n+The following table provides a comparison between them to help you in \n+deciding which interface to use in your applications.\n+|      Serialization interface      |                                                                      Advantages                                                                      |                                               Drawbacks                                              |\n+|:---------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------:|\n+|            Serializable           | <ul><li>Easy to start with, requires no implementation</li></ul>                                                                                     | <ul><li>CPU intensive</li><li>Space inefficient</li></ul>                                            |\n+|           Externalizable          | <ul><li>Faster and more space efficient than Serializable</li></ul>                                                                                  | <ul><li>CPU intensive</li><li>Space inefficient</li><li>Requires implementation</li></ul>            |\n+|          DataSerializable         | <ul><li>Faster and more space efficient than java standard interfaces</li></ul>                                                                      | <ul><li>Requires implementation</li></ul>                                                            |\n+|     IdentifiedDataSerializable    | <ul><li>Relatively fast and space efficient</li></ul>                                                                                                | <ul><li>Requires implementation</li><li>Requires factory registration during cluster setup</li></ul> |\n+|              Portable             | <ul><li>Faster and more space efficient than java standard interfaces</li><li>Supports versioning</li><li>Supports partial deserialization</li></ul> | <ul><li>Requires implementation</li><li>Requires factory registration during cluster setup</li></ul> |\n+| [Stream&#124;ByteArray]Serializer | <ul><li>The fastest and lightest out of supported interfaces</li></ul>                                                                               | <ul><li>Requires implementation</li><li>Requires registration during cluster setup</li></ul>         |\n+\n+Below you can find rough performance numbers one can expect when \n+employing each of those strategies. A straightforward benchmark which continuously serializes and then ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62471c8fb8b903642f0b1e287383b65e3df81a8d"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b990ddf1fb76417c8a4f3cdffec7795cdfc1b299", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b990ddf1fb76417c8a4f3cdffec7795cdfc1b299", "committedDate": "2020-02-14T09:31:06Z", "message": "Address reviews."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d798703990dedb23fb5147ca22969aa0994d8984", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d798703990dedb23fb5147ca22969aa0994d8984", "committedDate": "2020-02-14T14:51:12Z", "message": "Amend numbers & add (not yet active) benchmark link."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTk1NzI5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1979#pullrequestreview-358995729", "createdAt": "2020-02-14T14:54:08Z", "commit": {"oid": "d798703990dedb23fb5147ca22969aa0994d8984"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}