{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjI0MzM3", "number": 2680, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMTozOFrOE6ni0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyNTo0NFrOE6nrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTAwNzU1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/extract/JsonQueryTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMTozOFrOH1y-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMTozOFrOH1y-AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MTY0OQ==", "bodyText": "Tests should be adjusted?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526171649", "createdAt": "2020-11-18T15:21:38Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/extract/JsonQueryTarget.java", "diffHunk": "@@ -33,14 +33,13 @@\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private ObjectNode json;\n+    private JsonNode json;\n \n     @Override\n     public void setTarget(Object target) {\n         try {\n-            json = (ObjectNode) (target instanceof ObjectNode ? target\n-                    : target instanceof String ? MAPPER.readTree((String) target)\n-                    : MAPPER.readTree((byte[]) target));\n+            json = target instanceof ObjectNode ? (ObjectNode) target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTAxMTQ1OnYy", "diffSide": "LEFT", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMjoyNVrOH1zAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyOTozNFrOH1zXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MjI5OQ==", "bodyText": "com.fasterxml.jackson.core:jackson-databind isn't needed anymore?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526172299", "createdAt": "2020-11-18T15:22:25Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "diffHunk": "@@ -16,25 +16,26 @@\n \n package com.hazelcast.jet.sql.impl.inject;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.hazelcast.sql.impl.QueryException;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n import javax.annotation.Nullable;\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n import static com.hazelcast.jet.sql.impl.inject.UpsertInjector.FAILING_TOP_LEVEL_INJECTOR;\n \n @NotThreadSafe\n class JsonUpsertTarget implements UpsertTarget {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NjE4OQ==", "bodyText": "It is, when reading. I only adapted writing.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526176189", "createdAt": "2020-11-18T15:27:06Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "diffHunk": "@@ -16,25 +16,26 @@\n \n package com.hazelcast.jet.sql.impl.inject;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.hazelcast.sql.impl.QueryException;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n import javax.annotation.Nullable;\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n import static com.hazelcast.jet.sql.impl.inject.UpsertInjector.FAILING_TOP_LEVEL_INJECTOR;\n \n @NotThreadSafe\n class JsonUpsertTarget implements UpsertTarget {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MjI5OQ=="}, "originalCommit": {"oid": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODE1Mw==", "bodyText": "after the last commit it's still needed when writing: we support OBJECT fields of type JsonNode, which is from jackson-databind", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526178153", "createdAt": "2020-11-18T15:29:34Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "diffHunk": "@@ -16,25 +16,26 @@\n \n package com.hazelcast.jet.sql.impl.inject;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.hazelcast.sql.impl.QueryException;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n import javax.annotation.Nullable;\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n import static com.hazelcast.jet.sql.impl.inject.UpsertInjector.FAILING_TOP_LEVEL_INJECTOR;\n \n @NotThreadSafe\n class JsonUpsertTarget implements UpsertTarget {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MjI5OQ=="}, "originalCommit": {"oid": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTAyODQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyNTo0NFrOH1zLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyNTo0NFrOH1zLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NTA3NQ==", "bodyText": "Simply json? It's not obvious without checking the type what gen is.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526175075", "createdAt": "2020-11-18T15:25:44Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "diffHunk": "@@ -16,25 +16,26 @@\n \n package com.hazelcast.jet.sql.impl.inject;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.hazelcast.sql.impl.QueryException;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n import javax.annotation.Nullable;\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n import static com.hazelcast.jet.sql.impl.inject.UpsertInjector.FAILING_TOP_LEVEL_INJECTOR;\n \n @NotThreadSafe\n class JsonUpsertTarget implements UpsertTarget {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonFactory JSON_FACTORY = new JsonFactory();\n \n-    private ObjectNode json;\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private JsonGenerator jsonGen;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4497, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}