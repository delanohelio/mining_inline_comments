{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDcyOTE4", "number": 2754, "title": "Add FANOUT routing policy", "bodyText": "Added FANOUT routing policy.\nFor distributed edge case it sends each item to a single processor on each of the cluster members - a combination of BROADCAST & ROUND_ROBIN. For a local edge case it behaves exactly as ROUND_ROBIN.\nUseful for optimized IMap (SQL) join implementations where single item is being joined with local IMap partitions.\nChecklist:\n\n Labels and Milestone set\n New public APIs have @Nonnull/@Nullable annotations\n New public APIs have @since tags in Javadoc", "createdAt": "2020-12-14T13:58:38Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754", "merged": true, "mergeCommit": {"oid": "a10edde961a82b905a74d2eadd400a758c4a551d"}, "closed": true, "closedAt": "2020-12-15T11:26:37Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmGBlTgH2gAyNTM5NDcyOTE4OmE3NjM3ODJkZWIyOTQ1ZWY2ZmIxYzEzNmRkMDI1ZjdjOTI2NjAyZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmYV1uAH2gAyNTM5NDcyOTE4OmY2MjhkMzYyOTVjNGMwODcyOTFjOThjZjE1ZTVkZTQxMWE3ZWY2MzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a763782deb2945ef6fb1c136dd025f7c926602f4", "committedDate": "2020-12-14T13:47:31Z", "message": "Add FANOUT routing policy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDQxMTA4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#pullrequestreview-551441108", "createdAt": "2020-12-14T14:49:30Z", "commit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0OTozMVrOIFUDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0OTozMVrOIFUDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MjM3NQ==", "bodyText": "This doesn't state which processor on each member. The PR mentions \"round robin\" so I guess it's a different processor every time?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542442375", "createdAt": "2020-12-14T14:49:31Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,12 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a763782deb2945ef6fb1c136dd025f7c926602f4"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7571af4155d3ecb84e1cb40f3b56f738e060ca0b", "committedDate": "2020-12-14T14:58:40Z", "message": "Improve javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzg4NTcx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#pullrequestreview-551788571", "createdAt": "2020-12-14T18:43:51Z", "commit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0Mzo1MVrOIFflLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0Mzo1MVrOIFflLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMTIxMg==", "bodyText": "This causes a job to be failed when it runs on a single member. If it is not intended, you can check this", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r542631212", "createdAt": "2020-12-14T18:43:51Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -378,23 +379,160 @@ private void initDag(InternalSerializationService jobSerializationService) {\n         return processors;\n     }\n \n+    private List<OutboundEdgeStream> createOutboundEdgeStreams(\n+            VertexDef vertex,\n+            int processorIdx,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n+        for (EdgeDef edge : vertex.outboundEdges()) {\n+            OutboundCollector outboundCollector = createOutboundCollector(edge, processorIdx, jobSerializationService);\n+            OutboundEdgeStream outboundEdgeStream = new OutboundEdgeStream(edge.sourceOrdinal(), outboundCollector);\n+            outboundStreams.add(outboundEdgeStream);\n+        }\n+        return outboundStreams;\n+    }\n+\n     /**\n-     * Populates {@code localConveyorMap}, {@code edgeSenderConveyorMap}.\n-     * Populates {@link #senderMap} and {@link #tasklets} fields.\n+     * Each edge is represented by an array of conveyors between the producers and consumers.\n+     * There are as many conveyors as there are consumers.\n+     * Each conveyor has one queue per producer.\n+     *\n+     * For a distributed edge, there is one additional producer per member represented\n+     * by the ReceiverTasklet.\n      */\n-    private List<OutboundEdgeStream> createOutboundEdgeStreams(VertexDef srcVertex, int processorIdx,\n-                                                               InternalSerializationService jobSerializationService) {\n-        final List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n-        for (EdgeDef edge : srcVertex.outboundEdges()) {\n-            Map<Address, ConcurrentConveyor<Object>> memberToSenderConveyorMap = null;\n-            if (edge.getDistributedTo() != null) {\n-                memberToSenderConveyorMap =\n-                        memberToSenderConveyorMap(edgeSenderConveyorMap, edge, jobSerializationService);\n+    private OutboundCollector createOutboundCollector(\n+            EdgeDef edge,\n+            int processorIndex,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        if (edge.isDistributed() && edge.routingPolicy() == RoutingPolicy.ISOLATED) {\n+            throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n+        }\n+        if ((!edge.isDistributed() || !edge.getDistributedTo().equals(DISTRIBUTE_TO_ALL))\n+            && edge.routingPolicy() == RoutingPolicy.FANOUT) {\n+            throw new IllegalArgumentException(\"Fanout edges must be distributed: \" + edge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTczMjEw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#pullrequestreview-552173210", "createdAt": "2020-12-15T07:36:51Z", "commit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozNjo1MVrOIF85XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0NjozMFrOIF_arA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMTUxNw==", "bodyText": "This method and the localCompositeCollector method are almost the same, except for the FANOUT case. It might be easier to follow if we have just one method, add boolean local argument, and in the FANOUT case do:\nlocal ? new RoundRobin(collectors) : new Broadcast(collectors);", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543111517", "createdAt": "2020-12-15T07:36:51Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/OutboundCollector.java", "diffHunk": "@@ -76,6 +77,26 @@ static OutboundCollector compositeCollector(\n         }\n     }\n \n+    static OutboundCollector distributedCompositeCollector(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNjYyOA==", "bodyText": "If the second condition is true, the first is always true:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((!edge.isDistributed() || !edge.getDistributedTo().equals(DISTRIBUTE_TO_ALL))\n          \n          \n            \n                    if (!DISTRIBUTE_TO_ALL.equals(edge.getDistributedTo())", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543126628", "createdAt": "2020-12-15T08:04:14Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -378,23 +379,160 @@ private void initDag(InternalSerializationService jobSerializationService) {\n         return processors;\n     }\n \n+    private List<OutboundEdgeStream> createOutboundEdgeStreams(\n+            VertexDef vertex,\n+            int processorIdx,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n+        for (EdgeDef edge : vertex.outboundEdges()) {\n+            OutboundCollector outboundCollector = createOutboundCollector(edge, processorIdx, jobSerializationService);\n+            OutboundEdgeStream outboundEdgeStream = new OutboundEdgeStream(edge.sourceOrdinal(), outboundCollector);\n+            outboundStreams.add(outboundEdgeStream);\n+        }\n+        return outboundStreams;\n+    }\n+\n     /**\n-     * Populates {@code localConveyorMap}, {@code edgeSenderConveyorMap}.\n-     * Populates {@link #senderMap} and {@link #tasklets} fields.\n+     * Each edge is represented by an array of conveyors between the producers and consumers.\n+     * There are as many conveyors as there are consumers.\n+     * Each conveyor has one queue per producer.\n+     *\n+     * For a distributed edge, there is one additional producer per member represented\n+     * by the ReceiverTasklet.\n      */\n-    private List<OutboundEdgeStream> createOutboundEdgeStreams(VertexDef srcVertex, int processorIdx,\n-                                                               InternalSerializationService jobSerializationService) {\n-        final List<OutboundEdgeStream> outboundStreams = new ArrayList<>();\n-        for (EdgeDef edge : srcVertex.outboundEdges()) {\n-            Map<Address, ConcurrentConveyor<Object>> memberToSenderConveyorMap = null;\n-            if (edge.getDistributedTo() != null) {\n-                memberToSenderConveyorMap =\n-                        memberToSenderConveyorMap(edgeSenderConveyorMap, edge, jobSerializationService);\n+    private OutboundCollector createOutboundCollector(\n+            EdgeDef edge,\n+            int processorIndex,\n+            InternalSerializationService jobSerializationService\n+    ) {\n+        if (edge.isDistributed() && edge.routingPolicy() == RoutingPolicy.ISOLATED) {\n+            throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n+        }\n+        if ((!edge.isDistributed() || !edge.getDistributedTo().equals(DISTRIBUTE_TO_ALL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1MjgxMg==", "bodyText": "I specifically didn't want to create this method because of the distributed-to-one edge type - it won't strike your eye that there are two types of distributed edges, especially when the distributed-to-one is rarely used. Maybe we can create isLocal method instead, it seems that there are more instances of !edge.isDistributed() than without the negation.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543152812", "createdAt": "2020-12-15T08:46:30Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/EdgeDef.java", "diffHunk": "@@ -114,6 +114,10 @@ Address getDistributedTo() {\n         return distributedTo;\n     }\n \n+    boolean isDistributed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjM5NTE4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#pullrequestreview-552239518", "createdAt": "2020-12-15T09:08:42Z", "commit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo0MlrOIGAU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo0MlrOIGAU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NzcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /**\n          \n          \n            \n                     * This policy sends each item to a single processor on each of the\n          \n          \n            \n                     * cluster members in a round robin fashion. It is only available\n          \n          \n            \n                     * on a distributed edge.\n          \n          \n            \n                     */\n          \n          \n            \n                    /**\n          \n          \n            \n                     * This policy sends an item to all members, but only to one processor on\n          \n          \n            \n                     * each member. It's a combination of {@link #BROADCAST} and {@link\n          \n          \n            \n                     * #UNICAST}: an item is first <em>broadcast</em> to all members, and then,\n          \n          \n            \n                     * on each member, it is <em>unicast</em> to one processor.\n          \n          \n            \n                     * <p>\n          \n          \n            \n                     * If the destination local parallelism is 1, the behavior is equal to\n          \n          \n            \n                     * {@link #BROADCAST}.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @since 4.4\n          \n          \n            \n                     */", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543167716", "createdAt": "2020-12-15T09:08:42Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +692,13 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends each item to a single processor on each of the\n+         * cluster members in a round robin fashion. It is only available\n+         * on a distributed edge.\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7571af4155d3ecb84e1cb40f3b56f738e060ca0b"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a99e679f74adfc05a64ee6fdf58230c92e1b71b4", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a99e679f74adfc05a64ee6fdf58230c92e1b71b4", "committedDate": "2020-12-15T09:09:40Z", "message": "Update hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a6547b76b190d1ffae894b046d5c019eeb12c3", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/14a6547b76b190d1ffae894b046d5c019eeb12c3", "committedDate": "2020-12-15T09:38:38Z", "message": "Allow FANOUT for local edges & fix it for single node clusters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjkyOTgx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#pullrequestreview-552292981", "createdAt": "2020-12-15T10:09:19Z", "commit": {"oid": "14a6547b76b190d1ffae894b046d5c019eeb12c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308f600f232229acbfae271b58f5c1beffe9432d", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/308f600f232229acbfae271b58f5c1beffe9432d", "committedDate": "2020-12-15T10:09:34Z", "message": "Update javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzM3OTE4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#pullrequestreview-552337918", "createdAt": "2020-12-15T11:04:01Z", "commit": {"oid": "308f600f232229acbfae271b58f5c1beffe9432d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowNDowMVrOIGFTRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowNDowMVrOIGFTRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0OTIyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * If the destination local parallelism is 1, the behavior is equal to\n          \n          \n            \n                     * {@link #BROADCAST}.\n          \n          \n            \n                     * If the destination local parallelism is 1, the behavior is equal to\n          \n          \n            \n                     * {@link #BROADCAST}. If the member count in the cluster is 1, the\n          \n          \n            \n                     * behavior is equal to {@link #UNICAST}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2754#discussion_r543249222", "createdAt": "2020-12-15T11:04:01Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -676,7 +690,19 @@ public int getClassId() {\n         /**\n          * This policy sends each item to all candidate processors.\n          */\n-        BROADCAST\n+        BROADCAST,\n+        /**\n+         * This policy sends an item to all members, but only to one processor on\n+         * each member. It's a combination of {@link #BROADCAST} and {@link\n+         * #UNICAST}: an item is first <em>broadcast</em> to all members, and then,\n+         * on each member, it is <em>unicast</em> to one processor.\n+         * <p>\n+         * If the destination local parallelism is 1, the behavior is equal to\n+         * {@link #BROADCAST}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "308f600f232229acbfae271b58f5c1beffe9432d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230e083200842104848aefcdb0793c1969acacfd", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/230e083200842104848aefcdb0793c1969acacfd", "committedDate": "2020-12-15T11:06:17Z", "message": "Update hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f628d36295c4c087291c98cf15e5de411a7ef631", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f628d36295c4c087291c98cf15e5de411a7ef631", "committedDate": "2020-12-15T11:07:56Z", "message": "Add EdgeDef.isLocal()"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3434, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}