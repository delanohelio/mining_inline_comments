{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDEwNDkz", "number": 2716, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo0Njo0NVrOFAzslA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo0Njo0NVrOFAzslA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzkxMzE2OnYy", "diffSide": "RIGHT", "path": "extensions/hadoop/src/test/java/com/hazelcast/jet/hadoop/file/ParquetFileFormatTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo0Njo0NVrOH_RlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo0Njo0NVrOH_RlgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMDQ2NA==", "bodyText": "Better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // we need to used read object to fail the job\n          \n          \n            \n            The type of the objects in the pipeline is not enforced at runtime. Adding a mapping step causes explicit cast, resulting in a failed job.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2716#discussion_r536110464", "createdAt": "2020-12-04T13:46:45Z", "author": {"login": "frant-hartm"}, "path": "extensions/hadoop/src/test/java/com/hazelcast/jet/hadoop/file/ParquetFileFormatTest.java", "diffHunk": "@@ -53,11 +62,73 @@ public void shouldReadParquetFile() throws Exception {\n         );\n     }\n \n+    @Test\n+    public void shouldReadEmptyParquetFile() throws Exception {\n+        createEmptyParquetFile();\n+\n+        FileSourceBuilder<User> source = FileSources.files(currentDir + \"/target/parquet\")\n+                                                    .glob(\"file-empty.parquet\")\n+                                                    .format(FileFormat.parquet());\n+\n+        assertItemsInSource(source, items -> assertThat(items).isEmpty());\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenInvalidFileType() throws Exception {\n+        FileSourceBuilder<SpecificUser> source = FileSources.files(currentDir + \"/src/test/resources\")\n+                                                            .glob(\"invalid-data.png\")\n+                                                            .format(FileFormat.parquet());\n+\n+        assertJobFailed(source, RuntimeException.class, \"is not a Parquet file\");\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenIncorrectSchema() throws Exception {\n+        createParquetFile();\n+\n+        FileSourceBuilder<IncorrectUser> source = FileSources.files(currentDir + \"/target/parquet\")\n+                                                             .glob(\"file.parquet\")\n+                                                             .format(FileFormat.parquet());\n+\n+        if (useHadoop) {\n+            source.useHadoopForLocalFiles(true);\n+        }\n+\n+        Pipeline p = Pipeline.create();\n+\n+        // we need to used read object to fail the job", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "903a425e48fe3014d61e66e796fbce0365f47092"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4517, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}