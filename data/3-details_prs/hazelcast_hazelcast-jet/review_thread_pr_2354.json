{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDgyNTY2", "number": 2354, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyMzoyM1rOEIwhLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1OTo0NFrOEIxg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjE4OTg5OnYy", "diffSide": "RIGHT", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyMzoyM1rOGo6djw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyMzoyM1rOGo6djw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDA2Mw==", "bodyText": "length of the lines are smaller than 72, but we use the this limit after *  so it is actually 80 :)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445554063", "createdAt": "2020-06-25T13:23:23Z", "author": {"login": "gurbuzali"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -166,6 +169,27 @@\n         return this;\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjE5MjA4OnYy", "diffSide": "RIGHT", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyMzo1MVrOGo6e3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyMzo1MVrOGo6e3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDM5OA==", "bodyText": "we can check for negative here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445554398", "createdAt": "2020-06-25T13:23:51Z", "author": {"login": "gurbuzali"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -166,6 +169,27 @@\n         return this;\n     }\n \n+    /**\n+     * Number of retries the connector will do in addition to Elastic\n+     * client retries\n+     *\n+     * Elastic client tries to connect to a node only once for each\n+     * request. When a request fails the node is marked dead and is\n+     * not retried again for the request. This causes problems with\n+     * single node clusters or in a situation where whole cluster\n+     * becomes unavailable at the same time (e.g. due to a network\n+     * issue).\n+     *\n+     * The initial delay is 2s, increasing by factor of 2 with each retry (4s, 8s, 16s, ..).\n+     *\n+     * @param retries number of retries, defaults to 5\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> retries(int retries) {\n+        this.retries = retries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjI3NjE4OnYy", "diffSide": "RIGHT", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo0Mjo1NVrOGo7Tvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo0Mjo1NVrOGo7Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU2NzkzNA==", "bodyText": "check for negative", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445567934", "createdAt": "2020-06-25T13:42:55Z", "author": {"login": "gurbuzali"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -229,4 +231,24 @@\n         return this;\n     }\n \n+    /**\n+     * Number of retries the connector will do in addition to Elastic\n+     * client retries\n+     *\n+     * Elastic client tries to connect to a node only once for each\n+     * request. When a request fails the node is marked dead and is\n+     * not retried again for the request. This causes problems with\n+     * single node clusters or in a situation where whole cluster\n+     * becomes unavailable at the same time (e.g. due to a network\n+     * issue).\n+     *\n+     * The initial delay is 2s, increasing by factor of 2 with each retry (4s, 8s, 16s, ..).\n+     *\n+     * @param retries number of retries, defaults to 5\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> retries(int retries) {\n+        this.retries = retries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjMwMjM3OnYy", "diffSide": "RIGHT", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo0ODo1MlrOGo7kWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDozMToxNVrOGo9d8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3MjE4Nw==", "bodyText": "we normally arrange parameters so that non-function parameters are at the beginning", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445572187", "createdAt": "2020-06-25T13:48:52Z", "author": {"login": "gurbuzali"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java", "diffHunk": "@@ -45,21 +45,24 @@\n     private final boolean slicing;\n     private final boolean coLocatedReading;\n     private final String scrollKeepAlive;\n-\n-    public ElasticSourceConfiguration(SupplierEx<RestHighLevelClient> clientFn,\n-                                      SupplierEx<SearchRequest> searchRequestFn,\n-                                      FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-                                      FunctionEx<? super SearchHit, T> mapToItemFn,\n-                                      boolean slicing, boolean coLocatedReading,\n-                                      String scrollKeepAlive) {\n-\n+    private final int retries;\n+\n+    public ElasticSourceConfiguration(\n+            SupplierEx<RestHighLevelClient> clientFn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMzMxNA==", "bodyText": "This is sorted by required/more important first, less important last.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445603314", "createdAt": "2020-06-25T14:31:15Z", "author": {"login": "frant-hartm"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java", "diffHunk": "@@ -45,21 +45,24 @@\n     private final boolean slicing;\n     private final boolean coLocatedReading;\n     private final String scrollKeepAlive;\n-\n-    public ElasticSourceConfiguration(SupplierEx<RestHighLevelClient> clientFn,\n-                                      SupplierEx<SearchRequest> searchRequestFn,\n-                                      FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-                                      FunctionEx<? super SearchHit, T> mapToItemFn,\n-                                      boolean slicing, boolean coLocatedReading,\n-                                      String scrollKeepAlive) {\n-\n+    private final int retries;\n+\n+    public ElasticSourceConfiguration(\n+            SupplierEx<RestHighLevelClient> clientFn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3MjE4Nw=="}, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjMyOTYzOnYy", "diffSide": "RIGHT", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1NDozOVrOGo71hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1NDozOVrOGo71hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NjU4MQ==", "bodyText": "how about naming this to executeWithRetry?\nyes it is longer and not so elegant but while reading the code when I see a retry I kind of think that previously a call made but failed and now I'm retrying it.\nanother point is to add a variant of this method which retries only for IOException. from what I gather we only check for IOException for now and this would simplify the code a bit.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445576581", "createdAt": "2020-06-25T13:54:39Z", "author": {"login": "gurbuzali"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.core.HazelcastException;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.concurrent.Callable;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n+\n+/**\n+ * Static utility class to retry operations related to connecting to AWS Services.\n+ */\n+public final class RetryUtils {\n+    static final long INITIAL_BACKOFF_MS = 2000L;\n+    static final long MAX_BACKOFF_MS = 5 * 60 * 1000L;\n+    static final double BACKOFF_MULTIPLIER = 2;\n+\n+    private static final ILogger LOGGER = Logger.getLogger(RetryUtils.class);\n+\n+    private static final long MS_IN_SECOND = 1000L;\n+\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Calls {@code callable.call()} until it does not throw an exception (but no more than {@code retries} times).\n+     * <p>\n+     * If {@code callable} throws an unchecked exception, it is wrapped into {@link HazelcastException}.\n+     */\n+    @SafeVarargs\n+    public static <T> T retry(Callable<T> callable, int retries, Class<? extends Exception> ... exceptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjM1MjgyOnYy", "diffSide": "RIGHT", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1OTo0NFrOGo8Elg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1OTo0NFrOGo8Elg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MDQzOA==", "bodyText": "how about calculating the backoff time with Math.min(MAX_BACKOFF_MS, 2<<retryCount) ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445580438", "createdAt": "2020-06-25T13:59:44Z", "author": {"login": "gurbuzali"}, "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.core.HazelcastException;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.concurrent.Callable;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n+\n+/**\n+ * Static utility class to retry operations related to connecting to AWS Services.\n+ */\n+public final class RetryUtils {\n+    static final long INITIAL_BACKOFF_MS = 2000L;\n+    static final long MAX_BACKOFF_MS = 5 * 60 * 1000L;\n+    static final double BACKOFF_MULTIPLIER = 2;\n+\n+    private static final ILogger LOGGER = Logger.getLogger(RetryUtils.class);\n+\n+    private static final long MS_IN_SECOND = 1000L;\n+\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Calls {@code callable.call()} until it does not throw an exception (but no more than {@code retries} times).\n+     * <p>\n+     * If {@code callable} throws an unchecked exception, it is wrapped into {@link HazelcastException}.\n+     */\n+    @SafeVarargs\n+    public static <T> T retry(Callable<T> callable, int retries, Class<? extends Exception> ... exceptions) {\n+        int retryCount = 0;\n+        while (true) {\n+            try {\n+                return callable.call();\n+            } catch (Exception e) {\n+                if (anyOf(e, exceptions)) {\n+                    retryCount++;\n+                    if (retryCount > retries) {\n+                        throw sneakyThrow(e);\n+                    }\n+                    long waitIntervalMs = backoffIntervalForRetry(retryCount);\n+                    LOGGER.fine(String.format(\"Couldn't connect to Elastic, [%s] retrying in %s seconds...\", retryCount,\n+                            waitIntervalMs / MS_IN_SECOND));\n+                    sleep(waitIntervalMs);\n+                } else {\n+                    throw sneakyThrow(e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean anyOf(Exception e, Class<? extends Exception>[] exceptions) {\n+        for (Class<? extends Exception> exception : exceptions) {\n+            if (exception.isAssignableFrom(e.getClass())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static long backoffIntervalForRetry(int retryCount) {\n+        long result = INITIAL_BACKOFF_MS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4640, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}