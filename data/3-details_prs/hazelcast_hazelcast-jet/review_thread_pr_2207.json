{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzMxODk4", "number": 2207, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoyNToxMlrOD09JJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoyNToxMlrOD09JJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODU0MzA4OnYy", "diffSide": "RIGHT", "path": "site/docs/design-docs/010-operator-framework.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoyNToxMlrOGKKHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoyNToxMlrOGKKHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwNDYxMg==", "bodyText": "could we elaborate on some of the possibilities here?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2207#discussion_r413304612", "createdAt": "2020-04-22T20:25:12Z", "author": {"login": "cangencer"}, "path": "site/docs/design-docs/010-operator-framework.md", "diffHunk": "@@ -0,0 +1,140 @@\n+---\n+title: 010 - Kubernetes Operators\n+description: Helm based operator implementation for Hazelcast Jet.\n+---\n+\n+## Summary\n+\n+Kubernetes is a portable, extensible, open-source platform for managing\n+containerized workloads and services, that facilitates both declarative\n+configuration and automation. It has a large, rapidly growing ecosystem.\n+Kubernetes services, support, and tools are widely available.\n+\n+An Operator extends Kubernetes to automate the management of the entire\n+lifecycle of a particular application. Operators serve as a packaging\n+mechanism for distributing applications on Kubernetes, and they monitor,\n+maintain, recover, and upgrade the software they deploy.\n+\n+## Terminology\n+\n+**Operator** - the custom controller installed on a Kubernetes cluster,\n+in our case Hazelcast Jet Operator.\n+\n+**Operand** - the managed workload provided by the Operator as a\n+service, in our case Hazelcast Jet cluster.\n+\n+**Custom Resource (CR)** - an instance of the\n+[`CustomResourceDefinition`](https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/)\n+the Operator ships that represents the Operand or an Operation on an\n+Operand (also known as primary resources)\n+\n+**Managed resources** - the Kubernetes objects or off-cluster services\n+the Operator uses to constitute an Operand (also known as secodary\n+resources)\n+\n+**Custom Resource Definition (CRD)** - an API of the Operator, providing\n+the blueprint and validation rules for **Custom Resources**.\n+\n+## Implementation Details\n+\n+### Operator SDK\n+\n+SDK for building Kubernetes applications. Provides high level APIs,\n+useful abstractions, and project scaffolding.\n+\n+The SDK provides workflows to develop operators in Go, Ansible, or Helm.\n+\n+Since we've already had Helm packages for Hazelcast Jet and Hazelcast\n+Jet Enterprise, it makes sense to create first version of the operator\n+based on Helm.\n+\n+Operator SDK provides a CLI tool to generate Operators from Helm charts,\n+however it is not sufficient to use to generated Operator as is, some\n+tweaks are needed to fine tune its permissions.\n+\n+### Operator Capability Levels\n+\n+Operators come in different maturity levels in regards to their\n+lifecycle management capabilities for the application or workload they\n+deliver. The capability models aims to provide guidance in terminology\n+to express what features users can expect from an operator.\n+\n+![Operator Capability Levels](/docs/assets/operator-capability-level.png)\n+\n+Hazelcast Jet Helm based operators currently categorized as Level 1\n+operator.\n+\n+### Operator Lifecycle Manager (OLM)\n+\n+OLM extends Kubernetes to provide a declarative way to install, manage,\n+and upgrade Operators and their dependencies in a cluster.\n+\n+OLM defines a schema for Operator metadata, called the Cluster Service\n+Version (CSV), for describing an Operator and its dependencies.\n+\n+Operators with a CSV can be listed as entries in a catalog (i.e\n+[OperatorHub.io](https://operatorhub.io/)) available to OLM running on a\n+Kubernetes cluster. Users then subscribe to an Operator from the catalog\n+to tell OLM to provision and manage a desired Operator. That Operator,\n+in turn, provisions and manages its application or service on the\n+cluster.\n+\n+Operator SDK CLI tool provides capability to generate CSVs but it's far\n+from catalog listing criteria so manual curation of CSVs needed in our\n+case. After creating the initial version of the CSV, making updates to\n+it is pretty straightforward.\n+\n+CSV for Hazelcast Jet Operator listed in [OperatorHub.io](https://operatorhub.io/operator/hazelcast-jet-operator)\n+can be viewed from [here](https://github.com/operator-framework/community-operators/blob/master/upstream-community-operators/hazelcast-jet-operator/0.0.2/hazelcast-jet-operator.v0.0.2.clusterserviceversion.yaml).\n+\n+## High Level Overview\n+\n+The image above shows interactions between and user after the Hazelcast\n+Jet Operator has been deployed to the cluster. User submits the custom\n+resource with the type of `HazelcastJet` and Hazelcast Jet Operator\n+handles the request.\n+\n+Based on the contents of the requests Operator either instantiates a new\n+cluster or reconciles the existing ones with the desired state.\n+\n+![High Level Overview](/docs/assets/operator.svg)\n+\n+## Certification\n+\n+### RedHat Certified Operators\n+\n+RedHat has a certification programme for Operators and certified\n+Operatorswill get published to the OpenShift catalog. The criteria for\n+certification can be found\n+[here](https://redhat-connect.gitbook.io/certified-operator-guide/what-if-ive-already-published-a-community-operator#certification-of-a-community-operator)\n+\n+We've passed through this process for Hazelcast Jet Enterprise Operator\n+and it can be installed directly from the OpenShift catalog from the UI.\n+\n+During the process we've created OpenShift specific docker images for\n+[Hazelcast Jet Enterprise](https://github.com/hazelcast/hazelcast-jet-docker/tree/master/openshift/hazelcast-jet-enterprise)\n+and [Hazelcast Jet Management Center](https://github.com/hazelcast/hazelcast-jet-management-center-docker/tree/master/openshift)\n+. Those images are built and published using RedHat Partner Connect\n+build service. Released versions of those images can be found in the\n+RedHat Container Catalog for [Hazelcast Jet Enterprise](https://access.redhat.com/containers/#/registry.connect.redhat.com/hazelcast/hazelcast-jet-enterprise-4)\n+and [Hazelcast Jet Management Center](https://access.redhat.com/containers/#/registry.connect.redhat.com/hazelcast/hazelcast-jet-management-center-4).\n+\n+## Testing Details\n+\n+Smoke testing has been done on our OpenShift on-premise test lab for the\n+certified operator.\n+\n+For community/non-certified versions of the operators which gets\n+published to the [OperatorHub.io](https://operatorhub.io/) are tested\n+automatically with a corresponding Jenkins pipeline which\n+deploys them to a regular Kubernetes cluster and verifies the cluster\n+formation.\n+\n+Automated test pipeline, which creates a Hazelcast Jet cluster with\n+Management Center using OpenShift specific images then verifies its\n+health, has been added to the Jenkins.\n+\n+## Future Improvements\n+\n+It is logical to extend capabilities of the operators to cover more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15e32034d26e401178c9aaece4651999c3e5b4ba"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4682, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}