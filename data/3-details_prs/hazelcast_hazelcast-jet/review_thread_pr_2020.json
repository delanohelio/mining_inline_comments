{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzUzNTYx", "number": 2020, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyNjo0MlrODjXswA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1Njo0N1rODjygJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDE1MDQwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyNjo0MlrOFvI9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyNjo0MlrOFvI9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDE2OQ==", "bodyText": "Don't use exclamation marks in exceptions :). No need to shout at the user. Also no trailing periods...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384974169", "createdAt": "2020-02-27T08:26:42Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.Bits;\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public class ByteArrayDataInput implements DataInput {\n+\n+    private byte[] buffer;\n+    private int position;\n+\n+    ByteArrayDataInput(byte[] buffer) {\n+        this.buffer = buffer;\n+        this.position = 0;\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        checkAvailable(Integer.BYTES);\n+        int value = Bits.readInt(buffer, position, false);\n+        position += Integer.BYTES;\n+        return value;\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        checkAvailable(Long.BYTES);\n+        long value = Bits.readLong(buffer, position, false);\n+        position += Long.BYTES;\n+        return value;\n+    }\n+\n+    private void checkAvailable(int length) {\n+        if (position + length > buffer.length) {\n+            throw new RuntimeException(\"Cannot read \" + length + \" bytes!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDE1MjI3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyNzoyOFrOFvI-gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyNzoyOFrOFvI-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDQ2NQ==", "bodyText": "Can't we reuse the buffer if position is 0? I guess it's common.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384974465", "createdAt": "2020-02-27T08:27:28Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.Bits;\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public class ByteArrayDataInput implements DataInput {\n+\n+    private byte[] buffer;\n+    private int position;\n+\n+    ByteArrayDataInput(byte[] buffer) {\n+        this.buffer = buffer;\n+        this.position = 0;\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        checkAvailable(Integer.BYTES);\n+        int value = Bits.readInt(buffer, position, false);\n+        position += Integer.BYTES;\n+        return value;\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        checkAvailable(Long.BYTES);\n+        long value = Bits.readLong(buffer, position, false);\n+        position += Long.BYTES;\n+        return value;\n+    }\n+\n+    private void checkAvailable(int length) {\n+        if (position + length > buffer.length) {\n+            throw new RuntimeException(\"Cannot read \" + length + \" bytes!\");\n+        }\n+    }\n+\n+    @Override\n+    public int position() {\n+        return position;\n+    }\n+\n+    @Override\n+    public BufferObjectDataInput toObjectInput(AbstractSerializationService serializationService) {\n+        byte[] bytes = new byte[buffer.length - position];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDE1ODQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DataInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyOTozMFrOFvJCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyOTozMFrOFvJCMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NTQwOQ==", "bodyText": "This is confusing with the standard java.io.DataInput. We should use different name, esp. when the purpose is similar. Maybe JetDataInput. I was confused how come you implement just few methods when DataInput has many more.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384975409", "createdAt": "2020-02-27T08:29:30Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DataInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public interface DataInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDE2Nzg3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInputTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMjo1NVrOFvJIIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMjo1NVrOFvJIIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjkzMA==", "bodyText": "We use when_AAA_then_BBB, the underscore is after when and then.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384976930", "createdAt": "2020-02-27T08:32:55Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInputTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class ByteArrayDataInputTest {\n+\n+    @Test\n+    public void whenNotEnoughBytesToRead_thenThrowsException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTUwMzUzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyNjoyNFrOFvVyHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyNjoyNFrOFvVyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NDI4NA==", "bodyText": "The default was 1 << 15... which seems a little bit excessive. Is there any sensible average I could default to?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385184284", "createdAt": "2020-02-27T15:26:24Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "diffHunk": "@@ -17,33 +17,35 @@\n package com.hazelcast.jet.impl;\n \n import com.hazelcast.cluster.Address;\n-import com.hazelcast.internal.nio.BufferObjectDataInput;\n-import com.hazelcast.internal.nio.BufferObjectDataOutput;\n import com.hazelcast.internal.nio.Connection;\n import com.hazelcast.internal.nio.Packet;\n import com.hazelcast.jet.impl.execution.ExecutionContext;\n import com.hazelcast.jet.impl.execution.SenderTasklet;\n+import com.hazelcast.jet.impl.serialization.MemoryDataInput;\n+import com.hazelcast.jet.impl.serialization.DataInputFactory;\n+import com.hazelcast.jet.impl.serialization.MemoryDataOutput;\n+import com.hazelcast.jet.impl.serialization.DataOutputFactory;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n \n-import java.io.IOException;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.ScheduledFuture;\n \n import static com.hazelcast.internal.nio.Packet.FLAG_JET_FLOW_CONTROL;\n import static com.hazelcast.internal.nio.Packet.FLAG_URGENT;\n import static com.hazelcast.jet.Util.idToString;\n-import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n-import static com.hazelcast.jet.impl.util.ImdgUtil.createObjectDataInput;\n-import static com.hazelcast.jet.impl.util.ImdgUtil.createObjectDataOutput;\n import static com.hazelcast.jet.impl.util.ImdgUtil.getMemberConnection;\n import static com.hazelcast.jet.impl.util.ImdgUtil.getRemoteMembers;\n import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class Networking {\n+\n+    private static final int PACKET_HEADER_SIZE = 16;\n+    private static final int FLOW_PACKET_INITIAL_SIZE = 128; // TODO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODE4MTk2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/internal/serialization/impl/CustomInputOutputFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1MzoxOVrOFvvQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoyMDoxOVrOFw6j6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMTU2NA==", "bodyText": "could you add the PR number?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385601564", "createdAt": "2020-02-28T09:53:19Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/internal/serialization/impl/CustomInputOutputFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+\n+import java.nio.ByteOrder;\n+\n+// remove when `InternalSerializationService.createObjectDataInput(byte[] data, int offset)` is there...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNTQzMw==", "bodyText": "what about a PR for 4.0.1-SNAPSHOT?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r386835433", "createdAt": "2020-03-03T07:20:19Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/internal/serialization/impl/CustomInputOutputFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+\n+import java.nio.ByteOrder;\n+\n+// remove when `InternalSerializationService.createObjectDataInput(byte[] data, int offset)` is there...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMTU2NA=="}, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODE4NTE3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1NDoxNlrOFvvR-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoxOTowOVrOFwWpjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjA0MQ==", "bodyText": "is this exception handled somewhere else?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385602041", "createdAt": "2020-02-28T09:54:16Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetService.java", "diffHunk": "@@ -232,11 +230,7 @@ public ClassLoader getClassLoader(long jobId) {\n     }\n \n     void handlePacket(Packet packet) {\n-        try {\n-            networking.handle(packet);\n-        } catch (IOException e) {\n-            throw sneakyThrow(e);\n-        }\n+        networking.handle(packet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NzA1NQ==", "bodyText": "The callee might throw RuntimeException.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r386247055", "createdAt": "2020-03-02T08:19:09Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetService.java", "diffHunk": "@@ -232,11 +230,7 @@ public ClassLoader getClassLoader(long jobId) {\n     }\n \n     void handlePacket(Packet packet) {\n-        try {\n-            networking.handle(packet);\n-        } catch (IOException e) {\n-            throw sneakyThrow(e);\n-        }\n+        networking.handle(packet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjA0MQ=="}, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODU0MTgwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1Njo0N1rOFvyoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1Njo0N1rOFvyoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1Njg1Mg==", "bodyText": "This is one additional allocation, if we are concerned about it we can use MemoryReader directly in trade of readability/maintainability... WDYT?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385656852", "createdAt": "2020-02-28T11:56:47Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "diffHunk": "@@ -63,33 +63,29 @@ void shutdown() {\n         flowControlSender.cancel(false);\n     }\n \n-    void handle(Packet packet) throws IOException {\n+    void handle(Packet packet) {\n         if (!packet.isFlagRaised(FLAG_JET_FLOW_CONTROL)) {\n             handleStreamPacket(packet);\n             return;\n         }\n         handleFlowControlPacket(packet.getConn().getEndPoint(), packet.toByteArray());\n     }\n \n-    private void handleStreamPacket(Packet packet) throws IOException {\n-        BufferObjectDataInput in = createObjectDataInput(nodeEngine, packet.toByteArray());\n-        long executionId = in.readLong();\n-        int vertexId = in.readInt();\n-        int ordinal = in.readInt();\n+    private void handleStreamPacket(Packet packet) {\n+        MemoryDataInput input = new MemoryDataInput(packet.toByteArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cb86e9aae490b3b282428fc9c94ad062c9849e"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4885, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}