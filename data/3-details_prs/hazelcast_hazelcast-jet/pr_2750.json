{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTc4ODU0", "number": 2750, "title": "Fix issue related to generalizing isolated edge", "bodyText": "We extended the definition of the isolated edge within the scope of event reordering PR:#2522 , but there was error in its implementation and it was breaking the pipelines where hashJoin*, innerJoin* etc. is used. This PR solves this issue.\nFixes #2744\nChecklist:\n\n Labels and Milestone set", "createdAt": "2020-12-10T14:32:18Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2750", "merged": true, "mergeCommit": {"oid": "203f871e856ac83fc5599a268d0334dd2aa38f38"}, "closed": true, "closedAt": "2020-12-11T11:57:20Z", "author": {"login": "ufukyilmaz"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk0GqbgH2gAyNTM1OTc4ODU0OjUzOWNiMDI3ZDdlZDY3ZGJjMmM4YWRiNjI4ZDAyNmVlMzYzNGJkOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlGarOAH2gAyNTM1OTc4ODU0OmI0Y2YzZTI3ODZjOWM1MDZkODc3MTQxMGViYWJkODQ0YWMxZWZmNWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "539cb027d7ed67dbc2c8adb628d026ee3634bd92", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/539cb027d7ed67dbc2c8adb628d026ee3634bd92", "committedDate": "2020-12-10T14:20:51Z", "message": "Fix issue related to generalized isolated edge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4451ea055497f722b6acaba68907a43912ac1597", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/4451ea055497f722b6acaba68907a43912ac1597", "committedDate": "2020-12-10T14:35:29Z", "message": "Remove empty lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMDAzODc0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2750#pullrequestreview-550003874", "createdAt": "2020-12-11T11:06:45Z", "commit": {"oid": "4451ea055497f722b6acaba68907a43912ac1597"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNjo0NVrOID0CPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNzowNFrOID0C6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (remainder == 0) {\n          \n          \n            \n                                        return createConveyorArray(downstreamParallelism, queueCount, queueSize);\n          \n          \n            \n                                    } else if (upstreamParallelism - remainder == 0) { // downstreamParallelism > upstreamParallelism\n          \n          \n            \n                                        return createConveyorArray(downstreamParallelism, queueCount + 1, queueSize);\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        return Stream.concat(\n          \n          \n            \n                                                Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n          \n          \n            \n                                                Arrays.stream(createConveyorArray(\n          \n          \n            \n                                                        downstreamParallelism - remainder, queueCount, queueSize\n          \n          \n            \n                                                ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    return Stream.concat(\n          \n          \n            \n                                            Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n          \n          \n            \n                                            Arrays.stream(createConveyorArray(\n          \n          \n            \n                                                    downstreamParallelism - remainder, Math.max(1, queueCount), queueSize\n          \n          \n            \n                                            ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2750#discussion_r540869182", "createdAt": "2020-12-11T11:06:45Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -472,13 +474,35 @@ private OutboundEdgeStream createOutboundEdgeStream(EdgeDef edge,\n                 throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n             }\n \n-            // there is only one producer per consumer for a one to many edge, so queueCount is always 1\n             ConcurrentConveyor<Object>[] localConveyors = localConveyorMap.computeIfAbsent(edge.edgeId(),\n-                    e -> createConveyorArray(downstreamParallelism, 1, queueSize));\n-            return IntStream.range(0, downstreamParallelism)\n-                            .filter(i -> i % upstreamParallelism == processorIndex)\n-                            .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n-                            .toArray(OutboundCollector[]::new);\n+                    e -> {\n+                        int queueCount = upstreamParallelism / downstreamParallelism;\n+                        int remainder = upstreamParallelism % downstreamParallelism;\n+                        if (remainder == 0) {\n+                            return createConveyorArray(downstreamParallelism, queueCount, queueSize);\n+                        } else if (upstreamParallelism - remainder == 0) { // downstreamParallelism > upstreamParallelism\n+                            return createConveyorArray(downstreamParallelism, queueCount + 1, queueSize);\n+                        } else {\n+                            return Stream.concat(\n+                                    Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n+                                    Arrays.stream(createConveyorArray(\n+                                            downstreamParallelism - remainder, queueCount, queueSize\n+                                    ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4451ea055497f722b6acaba68907a43912ac1597"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (downstreamParallelism >= upstreamParallelism) {\n          \n          \n            \n                            return IntStream.range(0, downstreamParallelism)\n          \n          \n            \n                                    .filter(i -> i % upstreamParallelism == processorIndex)\n          \n          \n            \n                                    .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n          \n          \n            \n                                    .toArray(OutboundCollector[]::new);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            return IntStream.range(0, downstreamParallelism)\n          \n          \n            \n                                    .filter(i -> processorIndex % downstreamParallelism == i)\n          \n          \n            \n                                    .mapToObj(i -> new ConveyorCollector(localConveyors[i],\n          \n          \n            \n                                            processorIndex / downstreamParallelism, null))\n          \n          \n            \n                                    .toArray(OutboundCollector[]::new);\n          \n          \n            \n                        }\n          \n          \n            \n                            return IntStream.range(0, downstreamParallelism)\n          \n          \n            \n                                    .filter(i -> i % upstreamParallelism == processorIndex % downstreamParallelism)\n          \n          \n            \n                                    .mapToObj(i -> new ConveyorCollector(localConveyors[i], processorIndex / downstreamParallelism, null))\n          \n          \n            \n                                    .toArray(OutboundCollector[]::new);", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2750#discussion_r540869355", "createdAt": "2020-12-11T11:07:04Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java", "diffHunk": "@@ -472,13 +474,35 @@ private OutboundEdgeStream createOutboundEdgeStream(EdgeDef edge,\n                 throw new IllegalArgumentException(\"Isolated edges must be local: \" + edge);\n             }\n \n-            // there is only one producer per consumer for a one to many edge, so queueCount is always 1\n             ConcurrentConveyor<Object>[] localConveyors = localConveyorMap.computeIfAbsent(edge.edgeId(),\n-                    e -> createConveyorArray(downstreamParallelism, 1, queueSize));\n-            return IntStream.range(0, downstreamParallelism)\n-                            .filter(i -> i % upstreamParallelism == processorIndex)\n-                            .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n-                            .toArray(OutboundCollector[]::new);\n+                    e -> {\n+                        int queueCount = upstreamParallelism / downstreamParallelism;\n+                        int remainder = upstreamParallelism % downstreamParallelism;\n+                        if (remainder == 0) {\n+                            return createConveyorArray(downstreamParallelism, queueCount, queueSize);\n+                        } else if (upstreamParallelism - remainder == 0) { // downstreamParallelism > upstreamParallelism\n+                            return createConveyorArray(downstreamParallelism, queueCount + 1, queueSize);\n+                        } else {\n+                            return Stream.concat(\n+                                    Arrays.stream(createConveyorArray(remainder, queueCount + 1, queueSize)),\n+                                    Arrays.stream(createConveyorArray(\n+                                            downstreamParallelism - remainder, queueCount, queueSize\n+                                    ))).toArray((IntFunction<ConcurrentConveyor<Object>[]>) ConcurrentConveyor[]::new);\n+                        }\n+                    });\n+\n+            if (downstreamParallelism >= upstreamParallelism) {\n+                return IntStream.range(0, downstreamParallelism)\n+                        .filter(i -> i % upstreamParallelism == processorIndex)\n+                        .mapToObj(i -> new ConveyorCollector(localConveyors[i], 0, null))\n+                        .toArray(OutboundCollector[]::new);\n+            } else {\n+                return IntStream.range(0, downstreamParallelism)\n+                        .filter(i -> processorIndex % downstreamParallelism == i)\n+                        .mapToObj(i -> new ConveyorCollector(localConveyors[i],\n+                                processorIndex / downstreamParallelism, null))\n+                        .toArray(OutboundCollector[]::new);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4451ea055497f722b6acaba68907a43912ac1597"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61be919b8f9b3609bc6822387ed8dda172537b09", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/61be919b8f9b3609bc6822387ed8dda172537b09", "committedDate": "2020-12-11T11:31:38Z", "message": "Merge remote-tracking branch 'upstream/master' into fix-2744"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a94e7b90f314004f4f3e9f3f8ff3b89609f50cc", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/2a94e7b90f314004f4f3e9f3f8ff3b89609f50cc", "committedDate": "2020-12-11T11:34:07Z", "message": "Update hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3965e0da009cf038ab6caa3804b0e2fab04d21a", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f3965e0da009cf038ab6caa3804b0e2fab04d21a", "committedDate": "2020-12-11T11:34:16Z", "message": "Update hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/ExecutionPlan.java\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28f5aa9a2ac79a286ce1b5106963934e307c6464", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/28f5aa9a2ac79a286ce1b5106963934e307c6464", "committedDate": "2020-12-11T11:37:41Z", "message": "Merge branch 'fix-2744' of https://github.com/ufukyilmaz/hazelcast-jet into fix-2744"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4cf3e2786c9c506d8771410ebabd844ac1eff5f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b4cf3e2786c9c506d8771410ebabd844ac1eff5f", "committedDate": "2020-12-11T11:41:00Z", "message": "Fix checkstyle: line length"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3425, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}