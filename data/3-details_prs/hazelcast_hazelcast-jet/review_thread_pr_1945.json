{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDg4MjY1", "number": 1945, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MDo0NlrODeFcfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjoyMVrODeFeYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczMDg3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/StreamJmsP.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MDo0NlrOFnDfww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNjo0M1rOFnD97w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NjA2Nw==", "bodyText": "can this throw?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1945#discussion_r376496067", "createdAt": "2020-02-07T16:50:46Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/StreamJmsP.java", "diffHunk": "@@ -230,8 +230,12 @@ protected void restoreFromSnapshot(@Nonnull Object key, @Nonnull Object value) {\n \n     @Override\n     public void close() throws Exception {\n-        consumer.close();\n-        session.close();\n+        if (consumer != null) {\n+            consumer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f151736bbbe7f1371f1370c0e3ea8c58d6c5edb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMzc5MQ==", "bodyText": "yes, \"due to some internal error\", as the javadoc says. If it throws, we won't throw the session, but we'll throw the connection in the PSupplier, which should close everything...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1945#discussion_r376503791", "createdAt": "2020-02-07T17:06:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/StreamJmsP.java", "diffHunk": "@@ -230,8 +230,12 @@ protected void restoreFromSnapshot(@Nonnull Object key, @Nonnull Object value) {\n \n     @Override\n     public void close() throws Exception {\n-        consumer.close();\n-        session.close();\n+        if (consumer != null) {\n+            consumer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NjA2Nw=="}, "originalCommit": {"oid": "9f151736bbbe7f1371f1370c0e3ea8c58d6c5edb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczNTY5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/connector/JmsIntegrationTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjoyMVrOFnDi3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjoyMVrOFnDi3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Njg2MQ==", "bodyText": "I frequently see that we always keep adding parameters to test in this way and it makes it harder to read the test with a lot of conditional logic inside. It would be better if they were refactored in a way that would avoid conditional test logic.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1945#discussion_r376496861", "createdAt": "2020-02-07T16:52:21Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/connector/JmsIntegrationTestBase.java", "diffHunk": "@@ -383,33 +384,50 @@ public void sinkTopic_whenBuilder_withParameters() throws JMSException {\n \n     @Test\n     public void stressTest_exactlyOnce_forceful() throws Exception {\n-        stressTest(false, EXACTLY_ONCE);\n+        stressTest(false, EXACTLY_ONCE, false);\n     }\n \n     @Test\n     public void stressTest_exactlyOnce_graceful() throws Exception {\n-        stressTest(true, EXACTLY_ONCE);\n+        stressTest(true, EXACTLY_ONCE, false);\n     }\n \n     @Test\n     public void stressTest_atLeastOnce_forceful() throws Exception {\n-        stressTest(false, AT_LEAST_ONCE);\n+        stressTest(false, AT_LEAST_ONCE, false);\n     }\n \n     @Test\n     public void stressTest_noGuarantee_forceful() throws Exception {\n-        stressTest(false, NONE);\n+        stressTest(false, NONE, false);\n     }\n \n-    private void stressTest(boolean graceful, ProcessingGuarantee maxGuarantee)\n+    @Test\n+    public void stressTest_exactlyOnce_forceful_durableTopic() throws Exception {\n+        stressTest(false, EXACTLY_ONCE, true);\n+    }\n+\n+    private void stressTest(boolean graceful, ProcessingGuarantee maxGuarantee, boolean useTopic)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f151736bbbe7f1371f1370c0e3ea8c58d6c5edb"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4977, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}