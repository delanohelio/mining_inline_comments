{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MjM2NDU2", "number": 2390, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDoxMlrOEOnx3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyNjo0MFrOEOn6fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY3MjYwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDoxMlrOGx3xlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDoxMlrOGx3xlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0NzIyMg==", "bodyText": "why not \"insert, delete or update\" (alternatively, \"insertion, deletion or updating\")", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2390#discussion_r454947222", "createdAt": "2020-07-15T10:20:12Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "diffHunk": "@@ -21,27 +21,34 @@\n import javax.annotation.Nonnull;\n \n /**\n- * Information pertaining to a single data change event (insertion,\n- * delete or update), affecting a single database record.\n+ * Information pertaining to a single data change event (insertion, delete or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06084f7b1fde22518215fccfe922ed5811a17ad6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY3NTIyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDo1MlrOGx3zJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMDo1MlrOGx3zJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0NzYyMw==", "bodyText": "same here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2390#discussion_r454947623", "createdAt": "2020-07-15T10:20:52Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "diffHunk": "@@ -21,27 +21,34 @@\n import javax.annotation.Nonnull;\n \n /**\n- * Information pertaining to a single data change event (insertion,\n- * delete or update), affecting a single database record.\n+ * Information pertaining to a single data change event (insertion, delete or\n+ * update), affecting a single database record.\n  * <p>\n  * Each event has a <em>key</em>, identifying the affected record, and a\n  * <em>value</em>, describing the change to that record.\n  * <p>\n- * Most events have an <em>operation</em> which specifies the type of\n- * change (insertion, delete or update). Events without an operation\n- * have specialized usage, for example heartbeats, and aren't supposed\n- * to affect the data model. You can observe and act upon them in a Jet\n- * CDC sink, but we discourage such usage.\n+ * Most events have an <em>operation</em> which specifies the type of change\n+ * (insertion, delete or update). Events without an operation have specialized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06084f7b1fde22518215fccfe922ed5811a17ad6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY3OTYzOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMjoxMVrOGx314w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMjoxMVrOGx314w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0ODMyMw==", "bodyText": "source-specific", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2390#discussion_r454948323", "createdAt": "2020-07-15T10:22:11Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "diffHunk": "@@ -21,27 +21,34 @@\n import javax.annotation.Nonnull;\n \n /**\n- * Information pertaining to a single data change event (insertion,\n- * delete or update), affecting a single database record.\n+ * Information pertaining to a single data change event (insertion, delete or\n+ * update), affecting a single database record.\n  * <p>\n  * Each event has a <em>key</em>, identifying the affected record, and a\n  * <em>value</em>, describing the change to that record.\n  * <p>\n- * Most events have an <em>operation</em> which specifies the type of\n- * change (insertion, delete or update). Events without an operation\n- * have specialized usage, for example heartbeats, and aren't supposed\n- * to affect the data model. You can observe and act upon them in a Jet\n- * CDC sink, but we discourage such usage.\n+ * Most events have an <em>operation</em> which specifies the type of change\n+ * (insertion, delete or update). Events without an operation have specialized\n+ * usage, for example heartbeats, and aren't supposed to affect the data model.\n+ * You can observe and act upon them in a Jet CDC sink, but we discourage such\n+ * usage.\n  * <p>\n- * All events have a <em>timestamp</em> specifying the moment when the\n- * change event occurred in the database. Normally this is the timestamp\n- * recorded in the database's change log, but since it has a finite size,\n- * the change stream begins with virtual events that reproduce the state of\n- * the table at the start of the change log. These events have an\n- * artificial timestamp. In principle, it should be easy to identify them\n- * because they have a separate {@code SYNC} operation instead of {@code\n- * INSERT}, however some databases emit {@code INSERT} events in both\n- * cases (a notable example is MySQL).\n+ * All events have a <em>timestamp</em> specifying the moment when the change\n+ * event occurred in the database. Normally this is the timestamp recorded in\n+ * the database's change log, but since it has a finite size, the change stream\n+ * begins with virtual events that reproduce the state of the table at the start\n+ * of the change log. These events have an artificial timestamp. In principle,\n+ * it should be easy to identify them because they have a separate {@code SYNC}\n+ * operation instead of {@code INSERT}, however some databases emit {@code INSERT}\n+ * events in both cases (a notable example is MySQL).\n+ * <p>\n+ * All events have a source specific <em>sequence</em> which can be used to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06084f7b1fde22518215fccfe922ed5811a17ad6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY4NDQyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMzozNFrOGx342g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyMzozNFrOGx342g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0OTA4Mg==", "bodyText": "... doesn't change, the values ...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2390#discussion_r454949082", "createdAt": "2020-07-15T10:23:34Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/ChangeRecord.java", "diffHunk": "@@ -63,6 +70,25 @@\n      */\n     long timestamp() throws ParsingException;\n \n+    /**\n+     * Specifies the numeric value part of the record's source sequence. As long\n+     * as the source sequence doesn't change the values will be monotonically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06084f7b1fde22518215fccfe922ed5811a17ad6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY5MjE0OnYy", "diffSide": "RIGHT", "path": "site/docs/tutorials/cdc-join.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyNTo0N1rOGx39aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyNTo0N1rOGx39aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1MDI0OQ==", "bodyText": "... and so can ...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2390#discussion_r454950249", "createdAt": "2020-07-15T10:25:47Z", "author": {"login": "mtopolnik"}, "path": "site/docs/tutorials/cdc-join.md", "diffHunk": "@@ -420,9 +420,10 @@ public class OrdersOfCustomer implements Serializable {\n \n There is also another element in the pipeline, an extra processing stage\n which handles and fixes event reordering that might happen due to\n-parallel processing. It's based on non-public classes because future\n-versions of Jet (4.3 most likely) will contain generic solutions for\n-the reordering problem and then this code will no longer be necessary:\n+parallel processing. It's based on sequence numbers specific to CDC\n+sources so can be used only for these kinds of pipelines. Hopefully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06084f7b1fde22518215fccfe922ed5811a17ad6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY5NDY5OnYy", "diffSide": "RIGHT", "path": "site/docs/tutorials/cdc-join.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyNjo0MFrOGx3_Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoyNjo0MFrOGx3_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1MDY2Mw==", "bodyText": "... a future version of Jet will introduce a generic solution ...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2390#discussion_r454950663", "createdAt": "2020-07-15T10:26:40Z", "author": {"login": "mtopolnik"}, "path": "site/docs/tutorials/cdc-join.md", "diffHunk": "@@ -420,9 +420,10 @@ public class OrdersOfCustomer implements Serializable {\n \n There is also another element in the pipeline, an extra processing stage\n which handles and fixes event reordering that might happen due to\n-parallel processing. It's based on non-public classes because future\n-versions of Jet (4.3 most likely) will contain generic solutions for\n-the reordering problem and then this code will no longer be necessary:\n+parallel processing. It's based on sequence numbers specific to CDC\n+sources so can be used only for these kinds of pipelines. Hopefully\n+future versions of Jet will contain generic solutions for the reoreding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06084f7b1fde22518215fccfe922ed5811a17ad6"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4667, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}