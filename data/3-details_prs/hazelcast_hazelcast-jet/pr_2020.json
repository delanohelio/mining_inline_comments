{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzUzNTYx", "number": 2020, "title": "Support job-level serializers in ReceiverTasklet", "bodyText": "This PR is part of the effort to add job level serialization support.\nIn current state of serialization API, BufferObjectDataInput encapsulates SerializationService. Every object is read from ObjectDataInput with the help of the service set at the time of creation of the input, in particular every nested object .\nReceiverTasklet implicitly, through BufferObjectDataInput uses global SerializationService. To be able to use job level serializers, the input should be created in ReceiverTasklet using job scoped SerializationService.\nNetworking has been decoupled from SerializationService - MemoryDataInput & MemoryDataOutput have been created to handle packets reading & writing, this part is Jet specific and we don't need to rely on IMDG here.\nAs a temporary measure, CustomInputOutputFactory has been created to give access to package protected IMDG inputs - a PR to remediate lack of proper API has been already submitted.\nChecklist\n\n Tags Set\n Milestone Set", "createdAt": "2020-02-26T15:36:54Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020", "merged": true, "mergeCommit": {"oid": "65c8156a2559ae0a6637a7a3c9edddf3c49b22f0"}, "closed": true, "closedAt": "2020-03-03T10:14:21Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIIkLbAH2gAyMzgwMzUzNTYxOmMyOWI5ZTVmYzA3NDZlMzMxMTBjYWQzNDY2NDI0ZGI1YzZjYWYxOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ9KC_gFqTM2Nzc0OTA1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c29b9e5fc0746e33110cad3466424db5c6caf197", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c29b9e5fc0746e33110cad3466424db5c6caf197", "committedDate": "2020-02-26T15:36:14Z", "message": "Add DataInput/DataOutput."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/6e6976eb21e40110c538fbc388b99faec472f52f", "committedDate": "2020-02-27T07:53:24Z", "message": "Add DataInput/DataOutput."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a177ca2125ef4aafc188c03886a88482e79fcd4a", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a177ca2125ef4aafc188c03886a88482e79fcd4a", "committedDate": "2020-02-27T08:22:43Z", "message": "Add DataInput/DataOutput."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDg3NzIz", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#pullrequestreview-365487723", "createdAt": "2020-02-27T08:26:42Z", "commit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoyNjo0MlrOFvI9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMjo1NVrOFvJIIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDE2OQ==", "bodyText": "Don't use exclamation marks in exceptions :). No need to shout at the user. Also no trailing periods...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384974169", "createdAt": "2020-02-27T08:26:42Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.Bits;\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public class ByteArrayDataInput implements DataInput {\n+\n+    private byte[] buffer;\n+    private int position;\n+\n+    ByteArrayDataInput(byte[] buffer) {\n+        this.buffer = buffer;\n+        this.position = 0;\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        checkAvailable(Integer.BYTES);\n+        int value = Bits.readInt(buffer, position, false);\n+        position += Integer.BYTES;\n+        return value;\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        checkAvailable(Long.BYTES);\n+        long value = Bits.readLong(buffer, position, false);\n+        position += Long.BYTES;\n+        return value;\n+    }\n+\n+    private void checkAvailable(int length) {\n+        if (position + length > buffer.length) {\n+            throw new RuntimeException(\"Cannot read \" + length + \" bytes!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDQ2NQ==", "bodyText": "Can't we reuse the buffer if position is 0? I guess it's common.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384974465", "createdAt": "2020-02-27T08:27:28Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.Bits;\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public class ByteArrayDataInput implements DataInput {\n+\n+    private byte[] buffer;\n+    private int position;\n+\n+    ByteArrayDataInput(byte[] buffer) {\n+        this.buffer = buffer;\n+        this.position = 0;\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        checkAvailable(Integer.BYTES);\n+        int value = Bits.readInt(buffer, position, false);\n+        position += Integer.BYTES;\n+        return value;\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        checkAvailable(Long.BYTES);\n+        long value = Bits.readLong(buffer, position, false);\n+        position += Long.BYTES;\n+        return value;\n+    }\n+\n+    private void checkAvailable(int length) {\n+        if (position + length > buffer.length) {\n+            throw new RuntimeException(\"Cannot read \" + length + \" bytes!\");\n+        }\n+    }\n+\n+    @Override\n+    public int position() {\n+        return position;\n+    }\n+\n+    @Override\n+    public BufferObjectDataInput toObjectInput(AbstractSerializationService serializationService) {\n+        byte[] bytes = new byte[buffer.length - position];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NTQwOQ==", "bodyText": "This is confusing with the standard java.io.DataInput. We should use different name, esp. when the purpose is similar. Maybe JetDataInput. I was confused how come you implement just few methods when DataInput has many more.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384975409", "createdAt": "2020-02-27T08:29:30Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DataInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public interface DataInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjkzMA==", "bodyText": "We use when_AAA_then_BBB, the underscore is after when and then.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384976930", "createdAt": "2020-02-27T08:32:55Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInputTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class ByteArrayDataInputTest {\n+\n+    @Test\n+    public void whenNotEnoughBytesToRead_thenThrowsException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "454306a55534826bd1147d9723604c3de060c41b", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/454306a55534826bd1147d9723604c3de060c41b", "committedDate": "2020-02-27T08:47:40Z", "message": "Add DataInput/DataOutput."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ffe5bf20b5a3158e222b36970094aa38f5d74b", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/34ffe5bf20b5a3158e222b36970094aa38f5d74b", "committedDate": "2020-02-27T09:01:33Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ab4bbac5dd2d1ba8484331afd6a8bc0385c3de", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e6ab4bbac5dd2d1ba8484331afd6a8bc0385c3de", "committedDate": "2020-02-27T09:07:51Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001bcabe6a38134b8487c0cf8ceabd93efb8c909", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/001bcabe6a38134b8487c0cf8ceabd93efb8c909", "committedDate": "2020-02-27T09:33:18Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3b4022e83d0d59f56dfdce20c69348905dfcec", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7b3b4022e83d0d59f56dfdce20c69348905dfcec", "committedDate": "2020-02-27T10:32:36Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b64f1f3709cc9fd93d4740164f76dd79cba76fdf", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b64f1f3709cc9fd93d4740164f76dd79cba76fdf", "committedDate": "2020-02-27T10:42:50Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95edf20891d1ebab490072fcac899e85c8d0ef82", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/95edf20891d1ebab490072fcac899e85c8d0ef82", "committedDate": "2020-02-27T11:06:42Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a3ac276c46b6cf8fd246df9e873e3cbc90c7da", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d3a3ac276c46b6cf8fd246df9e873e3cbc90c7da", "committedDate": "2020-02-27T11:46:41Z", "message": "Merge branch 'master' into serializness_networking\n\n# Conflicts:\n#\tpom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01aa369f5e6065ee52c6ea47d3b6bc3721701806", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/01aa369f5e6065ee52c6ea47d3b6bc3721701806", "committedDate": "2020-02-27T11:54:45Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "254fd66d3b3c3c4495471869ff308b604d3a82ca", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/254fd66d3b3c3c4495471869ff308b604d3a82ca", "committedDate": "2020-02-27T12:34:25Z", "message": "Merge branch 'master' into serializness_networking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec4d9c82eea8c86729364b40a042ff7c008f990", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/dec4d9c82eea8c86729364b40a042ff7c008f990", "committedDate": "2020-02-27T14:06:07Z", "message": "Add DataInput/DataOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/79bfadc3587c57b14263987eff2e50ae721c7191", "committedDate": "2020-02-27T14:41:10Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzU1NTMx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#pullrequestreview-365755531", "createdAt": "2020-02-27T15:25:12Z", "commit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyNjoyNFrOFvVyHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToyNjoyNFrOFvVyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NDI4NA==", "bodyText": "The default was 1 << 15... which seems a little bit excessive. Is there any sensible average I could default to?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385184284", "createdAt": "2020-02-27T15:26:24Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "diffHunk": "@@ -17,33 +17,35 @@\n package com.hazelcast.jet.impl;\n \n import com.hazelcast.cluster.Address;\n-import com.hazelcast.internal.nio.BufferObjectDataInput;\n-import com.hazelcast.internal.nio.BufferObjectDataOutput;\n import com.hazelcast.internal.nio.Connection;\n import com.hazelcast.internal.nio.Packet;\n import com.hazelcast.jet.impl.execution.ExecutionContext;\n import com.hazelcast.jet.impl.execution.SenderTasklet;\n+import com.hazelcast.jet.impl.serialization.MemoryDataInput;\n+import com.hazelcast.jet.impl.serialization.DataInputFactory;\n+import com.hazelcast.jet.impl.serialization.MemoryDataOutput;\n+import com.hazelcast.jet.impl.serialization.DataOutputFactory;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n \n-import java.io.IOException;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.ScheduledFuture;\n \n import static com.hazelcast.internal.nio.Packet.FLAG_JET_FLOW_CONTROL;\n import static com.hazelcast.internal.nio.Packet.FLAG_URGENT;\n import static com.hazelcast.jet.Util.idToString;\n-import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n-import static com.hazelcast.jet.impl.util.ImdgUtil.createObjectDataInput;\n-import static com.hazelcast.jet.impl.util.ImdgUtil.createObjectDataOutput;\n import static com.hazelcast.jet.impl.util.ImdgUtil.getMemberConnection;\n import static com.hazelcast.jet.impl.util.ImdgUtil.getRemoteMembers;\n import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class Networking {\n+\n+    private static final int PACKET_HEADER_SIZE = 16;\n+    private static final int FLOW_PACKET_INITIAL_SIZE = 128; // TODO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb2d4263aef1903a55396ad897991aceee3701b", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/4bb2d4263aef1903a55396ad897991aceee3701b", "committedDate": "2020-02-28T10:25:07Z", "message": "Simplify bytes writing & reading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91cb86e9aae490b3b282428fc9c94ad062c9849e", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/91cb86e9aae490b3b282428fc9c94ad062c9849e", "committedDate": "2020-02-28T11:54:36Z", "message": "Extract MemoryWriter & MemoryReader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzQ2NTE3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#pullrequestreview-366346517", "createdAt": "2020-02-28T11:56:47Z", "commit": {"oid": "91cb86e9aae490b3b282428fc9c94ad062c9849e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1Njo0N1rOFvyoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1Njo0N1rOFvyoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1Njg1Mg==", "bodyText": "This is one additional allocation, if we are concerned about it we can use MemoryReader directly in trade of readability/maintainability... WDYT?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385656852", "createdAt": "2020-02-28T11:56:47Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "diffHunk": "@@ -63,33 +63,29 @@ void shutdown() {\n         flowControlSender.cancel(false);\n     }\n \n-    void handle(Packet packet) throws IOException {\n+    void handle(Packet packet) {\n         if (!packet.isFlagRaised(FLAG_JET_FLOW_CONTROL)) {\n             handleStreamPacket(packet);\n             return;\n         }\n         handleFlowControlPacket(packet.getConn().getEndPoint(), packet.toByteArray());\n     }\n \n-    private void handleStreamPacket(Packet packet) throws IOException {\n-        BufferObjectDataInput in = createObjectDataInput(nodeEngine, packet.toByteArray());\n-        long executionId = in.readLong();\n-        int vertexId = in.readInt();\n-        int ordinal = in.readInt();\n+    private void handleStreamPacket(Packet packet) {\n+        MemoryDataInput input = new MemoryDataInput(packet.toByteArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cb86e9aae490b3b282428fc9c94ad062c9849e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Mjc1NjQ3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#pullrequestreview-366275647", "createdAt": "2020-02-28T09:53:18Z", "commit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1MzoxOVrOFvvQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1NDoxNlrOFvvR-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMTU2NA==", "bodyText": "could you add the PR number?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385601564", "createdAt": "2020-02-28T09:53:19Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/internal/serialization/impl/CustomInputOutputFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+\n+import java.nio.ByteOrder;\n+\n+// remove when `InternalSerializationService.createObjectDataInput(byte[] data, int offset)` is there...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjA0MQ==", "bodyText": "is this exception handled somewhere else?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385602041", "createdAt": "2020-02-28T09:54:16Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetService.java", "diffHunk": "@@ -232,11 +230,7 @@ public ClassLoader getClassLoader(long jobId) {\n     }\n \n     void handlePacket(Packet packet) {\n-        try {\n-            networking.handle(packet);\n-        } catch (IOException e) {\n-            throw sneakyThrow(e);\n-        }\n+        networking.handle(packet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f730dc3e06639647269cb6f6fbf786e4dbca95a", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/6f730dc3e06639647269cb6f6fbf786e4dbca95a", "committedDate": "2020-03-02T08:13:27Z", "message": "Add PR link to @Deprecated comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2f0290cf0877a8d4ad2ea7c59cec0e94ef9945", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3c2f0290cf0877a8d4ad2ea7c59cec0e94ef9945", "committedDate": "2020-03-02T08:50:27Z", "message": "Replace MemoryDataInput with MemoryReader to avoid allocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d09475761c52ecd34d222df9c28da3a68b04694", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5d09475761c52ecd34d222df9c28da3a68b04694", "committedDate": "2020-03-02T08:54:35Z", "message": "Replace MemoryDataInput with MemoryReader to avoid allocation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDc0MjU3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#pullrequestreview-367074257", "createdAt": "2020-03-02T10:01:21Z", "commit": {"oid": "6f730dc3e06639647269cb6f6fbf786e4dbca95a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48448109ac38d13610359f0caadb0aaa8f8451cb", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/48448109ac38d13610359f0caadb0aaa8f8451cb", "committedDate": "2020-03-02T11:17:09Z", "message": "Remember last flow packet size"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzQ5MDU3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#pullrequestreview-367749057", "createdAt": "2020-03-03T07:26:35Z", "commit": {"oid": "48448109ac38d13610359f0caadb0aaa8f8451cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2877, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}