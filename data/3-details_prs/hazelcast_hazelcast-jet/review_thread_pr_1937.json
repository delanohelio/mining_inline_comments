{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTk5MTA3", "number": 1937, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo0MjowOVrODd8syg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1OToxOFrODd-DRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI5ODAyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo0MjowOVrOFm1zJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1NToxOFrOFm2H-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3MTY1Mw==", "bodyText": "why don't we always leave the cleanup to the processor, looks like this will simplify the logic ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376271653", "createdAt": "2020-02-07T08:42:09Z", "author": {"login": "gurbuzali"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "diffHunk": "@@ -236,6 +248,33 @@ private void abortUnfinishedTransactions() {\n         try (Stream<Path> fileStream = Files.list(directory)) {\n             fileStream\n                     .filter(file -> file.getFileName().toString().endsWith(TEMP_FILE_SUFFIX))\n+                    .filter(file -> {\n+                        assert utility.usesTransactionLifecycle();\n+                        Matcher m = FILE_INDEX_WITH_SEQ.matcher(file.getFileName().toString());\n+                        if (!m.find() || m.groupCount() < 1) {\n+                            context.logger().warning(\"file with unknown name structure found in the directory: \" + file);\n+                            return false;\n+                        }\n+                        int index;\n+                        try {\n+                            index = Integer.parseInt(m.group(1));\n+                        } catch (NumberFormatException e) {\n+                            context.logger().warning(\n+                                    \"file with unknown name structure found in the directory: \" + file, e);\n+                            return false;\n+                        }\n+                        int localIndexLow = context.memberIndex() * context.localParallelism();\n+                        int localIndexHigh = localIndexLow + context.localParallelism();\n+                        boolean isLocalIndex = index >= localIndexLow && index < localIndexHigh;\n+                        if (sharedFileSystem || isLocalIndex) {\n+                            // If the file index belongs to one of the local processors (when directory is not shred)\n+                            // or when the directory is shared, we must leave that processor to do the cleanup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb7083dd61b232966753d8c566ed938cafb0b90"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3Njk4NA==", "bodyText": "Because there might be no local processor with that index. For example, if LP=1 and you have 2 members. Member 0 will fail and be restarted. After restart it will have index 1, no member on local machine will have index 0. Therefore the files with index 0 will not be handled.\nI agree it's quite complex and I was thinking about just ignoring it: the issue would be that some .tmp files will be left behind, but that's it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376276984", "createdAt": "2020-02-07T08:55:18Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "diffHunk": "@@ -236,6 +248,33 @@ private void abortUnfinishedTransactions() {\n         try (Stream<Path> fileStream = Files.list(directory)) {\n             fileStream\n                     .filter(file -> file.getFileName().toString().endsWith(TEMP_FILE_SUFFIX))\n+                    .filter(file -> {\n+                        assert utility.usesTransactionLifecycle();\n+                        Matcher m = FILE_INDEX_WITH_SEQ.matcher(file.getFileName().toString());\n+                        if (!m.find() || m.groupCount() < 1) {\n+                            context.logger().warning(\"file with unknown name structure found in the directory: \" + file);\n+                            return false;\n+                        }\n+                        int index;\n+                        try {\n+                            index = Integer.parseInt(m.group(1));\n+                        } catch (NumberFormatException e) {\n+                            context.logger().warning(\n+                                    \"file with unknown name structure found in the directory: \" + file, e);\n+                            return false;\n+                        }\n+                        int localIndexLow = context.memberIndex() * context.localParallelism();\n+                        int localIndexHigh = localIndexLow + context.localParallelism();\n+                        boolean isLocalIndex = index >= localIndexLow && index < localIndexHigh;\n+                        if (sharedFileSystem || isLocalIndex) {\n+                            // If the file index belongs to one of the local processors (when directory is not shred)\n+                            // or when the directory is shared, we must leave that processor to do the cleanup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3MTY1Mw=="}, "originalCommit": {"oid": "4bb7083dd61b232966753d8c566ed938cafb0b90"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzQ4NTc0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0Nzo1N1rOFm3l1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0Nzo1N1rOFm3l1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwMTAxNA==", "bodyText": "typo, \"shared\"", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376301014", "createdAt": "2020-02-07T09:47:57Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "diffHunk": "@@ -236,6 +248,33 @@ private void abortUnfinishedTransactions() {\n         try (Stream<Path> fileStream = Files.list(directory)) {\n             fileStream\n                     .filter(file -> file.getFileName().toString().endsWith(TEMP_FILE_SUFFIX))\n+                    .filter(file -> {\n+                        assert utility.usesTransactionLifecycle();\n+                        Matcher m = FILE_INDEX_WITH_SEQ.matcher(file.getFileName().toString());\n+                        if (!m.find() || m.groupCount() < 1) {\n+                            context.logger().warning(\"file with unknown name structure found in the directory: \" + file);\n+                            return false;\n+                        }\n+                        int index;\n+                        try {\n+                            index = Integer.parseInt(m.group(1));\n+                        } catch (NumberFormatException e) {\n+                            context.logger().warning(\n+                                    \"file with unknown name structure found in the directory: \" + file, e);\n+                            return false;\n+                        }\n+                        int localIndexLow = context.memberIndex() * context.localParallelism();\n+                        int localIndexHigh = localIndexLow + context.localParallelism();\n+                        boolean isLocalIndex = index >= localIndexLow && index < localIndexHigh;\n+                        if (sharedFileSystem || isLocalIndex) {\n+                            // If the file index belongs to one of the local processors (when directory is not shred)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzUwNjExOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1NDo1M1rOFm3y9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1NDo1M1rOFm3y9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNDM3NQ==", "bodyText": "can you add some comments here explaining what are these?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376304375", "createdAt": "2020-02-07T09:54:53Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteFileP.java", "diffHunk": "@@ -236,6 +248,33 @@ private void abortUnfinishedTransactions() {\n         try (Stream<Path> fileStream = Files.list(directory)) {\n             fileStream\n                     .filter(file -> file.getFileName().toString().endsWith(TEMP_FILE_SUFFIX))\n+                    .filter(file -> {\n+                        assert utility.usesTransactionLifecycle();\n+                        Matcher m = FILE_INDEX_WITH_SEQ.matcher(file.getFileName().toString());\n+                        if (!m.find() || m.groupCount() < 1) {\n+                            context.logger().warning(\"file with unknown name structure found in the directory: \" + file);\n+                            return false;\n+                        }\n+                        int index;\n+                        try {\n+                            index = Integer.parseInt(m.group(1));\n+                        } catch (NumberFormatException e) {\n+                            context.logger().warning(\n+                                    \"file with unknown name structure found in the directory: \" + file, e);\n+                            return false;\n+                        }\n+                        int localIndexLow = context.memberIndex() * context.localParallelism();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzUxMzk5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1NzoyNFrOFm33pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1NzoyNFrOFm33pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNTU3Mg==", "bodyText": "missing nonnull annotation (also check the rest)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376305572", "createdAt": "2020-02-07T09:57:24Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "diffHunk": "@@ -86,6 +87,8 @@\n      * The rolling is based on system time, not on event time. By default no\n      * rolling by date is done. If the system clock goes back, the outcome is\n      * unspecified and possibly corrupt.\n+     *\n+     * @since 4.0\n      */\n     public FileSinkBuilder<T> rollByDate(@Nullable String datePattern) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzUxNzMwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1ODozMlrOFm35vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNjowMVrOFm-UlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNjEwOA==", "bodyText": "wouldn't it be better to take primitive long? what good does it to do pass null? You could use Long.MAX_VALUE if you don't want rolling by size.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376306108", "createdAt": "2020-02-07T09:58:32Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "diffHunk": "@@ -96,6 +99,8 @@\n      * Enables rolling by file size. If the size after writing a batch of items\n      * exceeds the limit, a new file will be started. From this follows that\n      * the file will typically be larger than the given maximum.\n+     *\n+     * @since 4.0\n      */\n     public FileSinkBuilder<T> rollByFileSize(@Nullable Long maxFileSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxNzIyNw==", "bodyText": "You should then provide a constant for the user, the user has to know it or has to read the javadoc.\nAlso we add a suffix to the file name when we use rolling, Long.MAX_VALUE says \"roll when you reach this impossible to reach size\", and it's not the same as \"don't use rolline\".\nI'm not strictly against, but seems clearer to me in current shape.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376317227", "createdAt": "2020-02-07T10:23:01Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "diffHunk": "@@ -96,6 +99,8 @@\n      * Enables rolling by file size. If the size after writing a batch of items\n      * exceeds the limit, a new file will be started. From this follows that\n      * the file will typically be larger than the given maximum.\n+     *\n+     * @since 4.0\n      */\n     public FileSinkBuilder<T> rollByFileSize(@Nullable Long maxFileSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNjEwOA=="}, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTI4NQ==", "bodyText": "I just find it a bit strange to pass null, since you're not required to call the method?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376411285", "createdAt": "2020-02-07T14:16:01Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "diffHunk": "@@ -96,6 +99,8 @@\n      * Enables rolling by file size. If the size after writing a batch of items\n      * exceeds the limit, a new file will be started. From this follows that\n      * the file will typically be larger than the given maximum.\n+     *\n+     * @since 4.0\n      */\n     public FileSinkBuilder<T> rollByFileSize(@Nullable Long maxFileSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNjEwOA=="}, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzUxOTQzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1OToxOFrOFm37Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1OToxOFrOFm37Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNjQzNQ==", "bodyText": "can't we always assume it's shared, why require the user to specify it or not? It makes sense for source, but not for sink. Even if it's not shared, you want distinct files you can merge later.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1937#discussion_r376306435", "createdAt": "2020-02-07T09:59:18Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSinkBuilder.java", "diffHunk": "@@ -120,17 +125,41 @@\n      *      guarantee. If false, sink's guarantee will be at-least-once\n      *      even if job's is exactly-once\n      * @return this instance for fluent API\n+     *\n+     * @since 4.0\n      */\n     public FileSinkBuilder<T> exactlyOnce(boolean enable) {\n         exactlyOnce = enable;\n         return this;\n     }\n \n+    /**\n+     * Sets if files are in a shared storage visible to all members. Default\n+     * value is {@code false}.\n+     * <p>\n+     * If {@code sharedFileSystem} is {@code true}, Jet will assume all members\n+     * see the same files. Otherwise it will assume that only processors on the\n+     * local member them.\n+     * <p>\n+     * If you start all the members on a single machine (such as for\n+     * development), set this property to true. If you have multiple machines\n+     * with multiple members each and the directory is not a shared storage,\n+     * it's not possible to configure the file reader correctly - use only one\n+     * member per machine.\n+     *\n+     * @since 4.0\n+     */\n+    @Nonnull\n+    public FileSinkBuilder<T> sharedFileSystem(boolean sharedFileSystem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8fcc2a2dde039ca3ace5e62fc635ebad916c18"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4972, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}