{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Nzg1NDcx", "number": 2522, "title": "Prevent Event Reordering", "bodyText": "This PR aims to prevent event reordering in the pipelines where event reordering effects are visible.\nChecklist\n\n Tags Set\n Milestone Set (4.4)\n Any breaking changes are documented\n New public APIs have @Nonnull/@Nullable annotations\n New public APIs have @since tags in Javadoc\n For code samples, code sample main readme is updated", "createdAt": "2020-09-16T07:18:13Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522", "merged": true, "mergeCommit": {"oid": "59f1ced6a57c75bc717a27cc4ba53e2dfb30e77f"}, "closed": true, "closedAt": "2020-11-26T08:44:56Z", "author": {"login": "ufukyilmaz"}, "timelineItems": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG3wRSgH2gAyNDg3Nzg1NDcxOjNkMTMwMjYxNTZmNzUxZjU5ZmZhNGQ0OWIyZDU3OTM3MzczNDgwMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf6VA2AH2gAyNDg3Nzg1NDcxOjRlZWJmMTgyYmY2YTZlZjI4YzNlM2YxNGQ1MDYxOGI3OWQ5NzcxNmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3d13026156f751f59ffa4d49b2d5793737348018", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3d13026156f751f59ffa4d49b2d5793737348018", "committedDate": "2020-09-08T13:38:17Z", "message": "Introduce a context object (including defaultLP) to the job planning phase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74b959626ed58a1746e8b2a0cc26d24ed1de4130", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/74b959626ed58a1746e8b2a0cc26d24ed1de4130", "committedDate": "2020-09-16T07:04:58Z", "message": "Move the LP determination logic to Job Planning Phase\n\nMove the local parallelism determination logic of a Pipeline job to the Job\nplanning phase. Add this determination logic into the addToDag() method\nof the Transform classes. Remove the Vertex.determineLocalParallelism() calls.\nTo avoid reordering, most transforms had to match the local parallelism of\ntheir upstream transforms. Match the local parallelism of the upstream\ntransforms for these transforms. This could only be done during the Job\nplanning phase.\nNote: This is a partial commit, parallelism determination are not yet\ncompleted for some transforms that are hard to consider."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88e3418da9f4f631b6f777456231387a5ec13c9d", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/88e3418da9f4f631b6f777456231387a5ec13c9d", "committedDate": "2020-09-17T06:47:08Z", "message": "Add LP determination logic to a few more transforms\n\nAlso, bring back the vertex.determineLocalParallelism(int) calls to\nExecutionPlanBuilder because it should be used in jobs submitted\nas DAG."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a51060ff7ebc526748d02eb65da0a747bdb19fe3", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a51060ff7ebc526748d02eb65da0a747bdb19fe3", "committedDate": "2020-09-17T09:22:11Z", "message": "Merge branch 'master' of https://github.com/hazelcast/hazelcast-jet into prevent-reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a1831cdee5f0400ba3f34bb60327a37be3f1a9", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f0a1831cdee5f0400ba3f34bb60327a37be3f1a9", "committedDate": "2020-09-17T11:30:56Z", "message": "Add LP determination logic to SortTransform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553b79f1862bd670825ef9da1619466b6a645b30", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/553b79f1862bd670825ef9da1619466b6a645b30", "committedDate": "2020-09-21T06:57:06Z", "message": "Make rebalancing override isolated edge configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7aa1dcc62dd7c08abc75d9d9961e5fe0c8bb35", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1f7aa1dcc62dd7c08abc75d9d9961e5fe0c8bb35", "committedDate": "2020-09-21T07:22:36Z", "message": "Move Pipeline Context object into internal class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e80bb5041f28bc2335d46b30402a0fdc27c6c751", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e80bb5041f28bc2335d46b30402a0fdc27c6c751", "committedDate": "2020-10-01T07:17:06Z", "message": "Merge branch 'master' into prevent-reordering\n\n# Conflicts:\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/AggregateTransform.java\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07def24234d35cee00f4764eee3bdf4220a5aa9f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/07def24234d35cee00f4764eee3bdf4220a5aa9f", "committedDate": "2020-10-02T07:26:52Z", "message": "Add initial parallelism tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9928ba7d65f7915f6980392d22c829f4eed98c8e", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9928ba7d65f7915f6980392d22c829f4eed98c8e", "committedDate": "2020-10-02T08:06:19Z", "message": "Small Fixes\n\n- Issue in LP determination\n- Rename the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a15f3a6d6bc0aa3e394ef49035e4d56d7325ad92", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a15f3a6d6bc0aa3e394ef49035e4d56d7325ad92", "committedDate": "2020-10-05T07:23:32Z", "message": "Add LP tests for batch stage transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb0cc9b67cdb7501a2d4763d4025e73172c16de", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9eb0cc9b67cdb7501a2d4763d4025e73172c16de", "committedDate": "2020-10-05T07:27:50Z", "message": "Fix checkstyle error (License header)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bcb0b95c5c12526760ea5bc892e0b7662195b0", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/12bcb0b95c5c12526760ea5bc892e0b7662195b0", "committedDate": "2020-10-08T07:21:19Z", "message": "Add local parallelism tests for pipeline stages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72088f03e72a094387b815629d750282a2fe2b0c", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/72088f03e72a094387b815629d750282a2fe2b0c", "committedDate": "2020-10-12T06:53:14Z", "message": "Create Event Reordering TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7dcb4248045f8fc3438ff236cfd60abf89b726e", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b7dcb4248045f8fc3438ff236cfd60abf89b726e", "committedDate": "2020-10-13T07:28:05Z", "message": "Update Event Reordering TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e9fd0ed81ac995e38ea38a2c4b6a46328c536d", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b8e9fd0ed81ac995e38ea38a2c4b6a46328c536d", "committedDate": "2020-10-14T07:10:35Z", "message": "Decide where to preserve event order\n\nAdd OrderSensitiveTransform and SequencerTransform marker interfaces.\nMark the transforms with associated marker interfaces. Add determination\nlogic to PipelineImpl and Planner by traversing the DAG in a reverse\ntopological order. Update the parallelism determination tests wrt this\n change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ec2967ad33fbf39d924297d487dc6add8fe6f4", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/39ec2967ad33fbf39d924297d487dc6add8fe6f4", "committedDate": "2020-10-15T12:29:13Z", "message": "Merge branch 'event-reordering-tdd' into prevent-reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a3f4f06f2823cc05d776698793cc2bf1cc71e2", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e0a3f4f06f2823cc05d776698793cc2bf1cc71e2", "committedDate": "2020-10-16T07:03:15Z", "message": "Update the TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76b54f9ff7bbc728a0a3a7097ab92c86a454708", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a76b54f9ff7bbc728a0a3a7097ab92c86a454708", "committedDate": "2020-10-16T07:15:36Z", "message": "Update the TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82bacdbf6d41ab913d0625c0477a97f56166375d", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/82bacdbf6d41ab913d0625c0477a97f56166375d", "committedDate": "2020-10-16T07:17:36Z", "message": "Update the LP determinations of transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/675e1fada7f95e519fcf09d01e1571f1ed8398ae", "committedDate": "2020-10-16T07:24:14Z", "message": "Fix table format in the TDD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzI0OTE1", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#pullrequestreview-510324915", "createdAt": "2020-10-16T09:56:45Z", "commit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1Njo0NVrOHiyjcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNjo0MlrOHjFiOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MTkwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            description: Prevent events from getting reordered inside Jet jobs\n          \n          \n            \n            description: Avoid event reordering in unexpected cases", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r506241907", "createdAt": "2020-10-16T09:56:45Z", "author": {"login": "viliam-durina"}, "path": "site/docs/design-docs/015-event-reordering.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+title: 015 - Avoiding Event Reordering Effects\n+description: Prevent events from getting reordered inside Jet jobs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzAxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Remove the effects of event reordering in the Jet Jobs\n          \n          \n            \n            Avoid non-intuitive event reordering in Jet pipelines.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r506243013", "createdAt": "2020-10-16T09:57:46Z", "author": {"login": "viliam-durina"}, "path": "site/docs/design-docs/015-event-reordering.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+title: 015 - Avoiding Event Reordering Effects\n+description: Prevent events from getting reordered inside Jet jobs\n+---\n+\n+*Since*: 4.4\n+\n+## Goal\n+\n+Remove the effects of event reordering in the Jet Jobs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNjEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            out-of-order. If we especially avoid this situation that breaks the\n          \n          \n            \n            out of order. If we specifically avoid this situation that breaks the", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r506536126", "createdAt": "2020-10-16T15:18:40Z", "author": {"login": "viliam-durina"}, "path": "site/docs/design-docs/015-event-reordering.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+title: 015 - Avoiding Event Reordering Effects\n+description: Prevent events from getting reordered inside Jet jobs\n+---\n+\n+*Since*: 4.4\n+\n+## Goal\n+\n+Remove the effects of event reordering in the Jet Jobs\n+\n+## Problem statement\n+\n+Events are getting reordered inside Jet jobs. Thus, Jet only enables the\n+users to write jobs that are insensitive to the encounter order:\n+jobs including only stateless mapping and aggregation based on\n+commutative-associative functions etc. But, this out-of-order affects\n+the correctness of jobs including state.\n+\n+Jet execution engine tries to increase data parallelism as much as\n+possible while sending the events originating from one source DAG node\n+to multiple DAG nodes. This is why event disordering happens.\n+\n+![Events Getting Reordered](assets/events_getting_reordered.svg)\n+\n+After these events are distributed to multiple nodes, the occurrence\n+order of events is partially disrupted. After these disruption, if these\n+events encounter an order-sensitive transform(operator), they will cause\n+unexpected results.\n+\n+## Design\n+\n+There are two possible solutions for this problem:\n+\n+- To prevent event reordering from happening\n+- To sort the events in the same window before they encounter the\n+  order-sensitive transforms(operators)\n+\n+Both approaches have different effects on the performance. To make the\n+best of both of them, I drafted a design which is rather a hybrid\n+approach, in which we apply these approaches interchangeably during the\n+pipeline. We decide which one to use, according to the definition of the\n+associated part of the pipeline.\n+\n+The main tradeoff we need to consider when creating this design is\n+allowing event reordering vs performance.\n+\n+### Prevention of Event Reordering\n+\n+When distributing events from a one node to multiple nodes, events get\n+out-of-order. If we especially avoid this situation that breaks the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NDM1MQ==", "bodyText": "Do we use this anywhere? Or just describe it as an option that was considered?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r506544351", "createdAt": "2020-10-16T15:27:26Z", "author": {"login": "viliam-durina"}, "path": "site/docs/design-docs/015-event-reordering.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+title: 015 - Avoiding Event Reordering Effects\n+description: Prevent events from getting reordered inside Jet jobs\n+---\n+\n+*Since*: 4.4\n+\n+## Goal\n+\n+Remove the effects of event reordering in the Jet Jobs\n+\n+## Problem statement\n+\n+Events are getting reordered inside Jet jobs. Thus, Jet only enables the\n+users to write jobs that are insensitive to the encounter order:\n+jobs including only stateless mapping and aggregation based on\n+commutative-associative functions etc. But, this out-of-order affects\n+the correctness of jobs including state.\n+\n+Jet execution engine tries to increase data parallelism as much as\n+possible while sending the events originating from one source DAG node\n+to multiple DAG nodes. This is why event disordering happens.\n+\n+![Events Getting Reordered](assets/events_getting_reordered.svg)\n+\n+After these events are distributed to multiple nodes, the occurrence\n+order of events is partially disrupted. After these disruption, if these\n+events encounter an order-sensitive transform(operator), they will cause\n+unexpected results.\n+\n+## Design\n+\n+There are two possible solutions for this problem:\n+\n+- To prevent event reordering from happening\n+- To sort the events in the same window before they encounter the\n+  order-sensitive transforms(operators)\n+\n+Both approaches have different effects on the performance. To make the\n+best of both of them, I drafted a design which is rather a hybrid\n+approach, in which we apply these approaches interchangeably during the\n+pipeline. We decide which one to use, according to the definition of the\n+associated part of the pipeline.\n+\n+The main tradeoff we need to consider when creating this design is\n+allowing event reordering vs performance.\n+\n+### Prevention of Event Reordering\n+\n+When distributing events from a one node to multiple nodes, events get\n+out-of-order. If we especially avoid this situation that breaks the\n+order in the pipeline, the order of events will be preserved. But, this\n+comes with the loss of parallelism: The maximum number of nodes in one\n+stage is restricted by the predecessor stage (LP of the stage <= LP of\n+the previous stage). Applying this for the entire pipeline may not\n+always be feasible. E.g. If any stage of the pipeline contains only a\n+single node (LP=1), following stages have to contain a single node,\n+which is a suboptimal utilization of parallelism.\n+\n+### Implementation Details\n+\n+In order to prevent the order of events from changing, we avoid the use\n+of round-robin edge. The common pattern we've implemented in most\n+transforms to achieve this described below.\n+\n+If a transform does not use partitioned edge:\n+\n+- Ensure that the LP of the input vertex of the transform is equal to\n+  the PlannerVertex of the upstream transform.\n+- Connect these transform vertices with isolated edge.\n+\n+Otherwise:\n+\n+- do not change the properties of the transform if it already uses\n+  partitioned edge.\n+\n+To ensure such LP equality between transforms, we had to specify LP's in\n+job planning (pipeline.toDag()) stage. After that, we did this by\n+modifying pipeline stages (transforms) one-by-one. The changes applied\n+to the transforms listed below:\n+\n+|Transform or Operator|The summary of changes|\n+|------|------|\n+|Aggregate Transform (Both of Single and Two Stage)|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage (Without considering non commutative-associative aggregates). We mark the transform as SequencerTransform to understand that these aggregate transforms produce their own order during job planning.|\n+|Batch Source Transform|No changes have been made to the vertex's local parallelism of this transform.|\n+|Distinct Transform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage.|\n+|FlatMapTransform|If the preserve ordering is active, we determine the LP of the transform vertex to have the same LP as the PlannerVertex of the upstream transform and connect them with the isolated edge.|\n+|FlatMapStatefulTransform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage. We mark this transform as OrderSensitiveTransform.|\n+|GlobalMapStatefulTransform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage. We mark this transform as OrderSensitiveTransform. |\n+|GroupTransform(GroupAggregateTransform)|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage (Without considering non commutative-associative aggregates). We mark this transform as SequencerTransform.|\n+|HashJoinTransform|`TODO: Consider it in more detail.` With my little knowledge, I don't plan to make any changes to this transform.|\n+|MapTransform|If preserve ordering is active, we determine the LP of the transform vertex to have the same LP as the PlannerVertex of the upstream transform and connect them with the isolated edge.|\n+|KeyedMapStatefulTransform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage. We mark this transform as OrderSensitiveTransform.|\n+|MergeTransform|`TODO: Consider it in more detail.`|\n+|PartitionedProcessorTransform|No changes have been made to this transform.|\n+|PeekTransform|No changes have been made to this transform.|\n+|ProcessorTransform|If preserve ordering is active, we determine the LP of the transform vertex to have the same LP as the PlannerVertex of the upstream transform and connect them with the isolated edge.|\n+|SortTransform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage. We mark this transform as SequencerTransform. |\n+|SinkTransform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage.|\n+|Stream Source Transform|No changes have been made to the vertex's local parallelism of this transform.|\n+|TimestampTransform|We mark this transform as OrderSensitiveTransform to keep its current characteristics after the change in the job planning phase.|\n+|WindowAggregateTransform|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage(Without considering non commutative-associative aggregates). We mark this transform as SequencerTransform.|\n+|WindowGroupTransform(WindowedGroupAggregateTransform)|No changes have been made to the vertex's local parallelism of this transform and the configuration of the edge which connects it to the previous stage. We mark this transform as SequencerTransform.|\n+\n+### Sorting Events Between The Consecutive Watermarks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1Mjg5MA==", "bodyText": "WDYT about this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Events are getting reordered inside Jet jobs. Thus, Jet only enables the\n          \n          \n            \n            users to write jobs that are insensitive to the encounter order:\n          \n          \n            \n            jobs including only stateless mapping and aggregation based on\n          \n          \n            \n            commutative-associative functions etc. But, this out-of-order affects\n          \n          \n            \n            the correctness of jobs including state.\n          \n          \n            \n            \n          \n          \n            \n            Jet execution engine tries to increase data parallelism as much as\n          \n          \n            \n            possible while sending the events originating from one source DAG node\n          \n          \n            \n            to multiple DAG nodes. This is why event disordering happens.\n          \n          \n            \n            \n          \n          \n            \n            ![Events Getting Reordered](assets/events_getting_reordered.svg)\n          \n          \n            \n            \n          \n          \n            \n            After these events are distributed to multiple nodes, the occurrence\n          \n          \n            \n            order of events is partially disrupted. After these disruption, if these\n          \n          \n            \n            events encounter an order-sensitive transform(operator), they will cause\n          \n          \n            \n            unexpected results.\n          \n          \n            \n            Jet processes events in parallel, therefore a total order of events\n          \n          \n            \n            doesn't exist. However, in some use cases, users expect the order within\n          \n          \n            \n            a partition to be preserved, because the partition is a basic unit of\n          \n          \n            \n            parallelism and a single partition is always processed by a single\n          \n          \n            \n            processor.\n          \n          \n            \n            \n          \n          \n            \n            However, in previous versions, Jet used round-robin edges in places\n          \n          \n            \n            where no partitioning was required. For example before the stateless\n          \n          \n            \n            `map` operation. This caused that two events from the same partition\n          \n          \n            \n            could be handled by two parallel workers, and potentially overtake each\n          \n          \n            \n            other.\n          \n          \n            \n            \n          \n          \n            \n            ![Events Getting Reordered](assets/events_getting_reordered.svg)\n          \n          \n            \n            \n          \n          \n            \n            On the other hand, the round-robin edges have the benefit of maximizing\n          \n          \n            \n            the parallelism. Commonly, sources have lower than maximum parallelism\n          \n          \n            \n            and the round-robin edge ensured that the downstream transform could\n          \n          \n            \n            have more parallelism than the source.\n          \n          \n            \n            \n          \n          \n            \n            In this document we describe ways to avoid the usage of round-robin\n          \n          \n            \n            edges and still preserve the performance potential of the previous\n          \n          \n            \n            implementation.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r506552890", "createdAt": "2020-10-16T15:36:42Z", "author": {"login": "viliam-durina"}, "path": "site/docs/design-docs/015-event-reordering.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+title: 015 - Avoiding Event Reordering Effects\n+description: Prevent events from getting reordered inside Jet jobs\n+---\n+\n+*Since*: 4.4\n+\n+## Goal\n+\n+Remove the effects of event reordering in the Jet Jobs\n+\n+## Problem statement\n+\n+Events are getting reordered inside Jet jobs. Thus, Jet only enables the\n+users to write jobs that are insensitive to the encounter order:\n+jobs including only stateless mapping and aggregation based on\n+commutative-associative functions etc. But, this out-of-order affects\n+the correctness of jobs including state.\n+\n+Jet execution engine tries to increase data parallelism as much as\n+possible while sending the events originating from one source DAG node\n+to multiple DAG nodes. This is why event disordering happens.\n+\n+![Events Getting Reordered](assets/events_getting_reordered.svg)\n+\n+After these events are distributed to multiple nodes, the occurrence\n+order of events is partially disrupted. After these disruption, if these\n+events encounter an order-sensitive transform(operator), they will cause\n+unexpected results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e1fada7f95e519fcf09d01e1571f1ed8398ae"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5072ab01957b3d43521c28b0002b6639f362e23f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5072ab01957b3d43521c28b0002b6639f362e23f", "committedDate": "2020-10-18T19:30:28Z", "message": "Update site/docs/design-docs/015-event-reordering.md\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4634503b514235447b0cec18776318f4cad023", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ee4634503b514235447b0cec18776318f4cad023", "committedDate": "2020-10-18T19:30:41Z", "message": "Update site/docs/design-docs/015-event-reordering.md\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e00970a3f84393e3cb84b82a66a3c1c3f948d225", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e00970a3f84393e3cb84b82a66a3c1c3f948d225", "committedDate": "2020-10-18T19:30:51Z", "message": "Update site/docs/design-docs/015-event-reordering.md\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f419b539c707af341ccef93b3d3672bb1729ddb4", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f419b539c707af341ccef93b3d3672bb1729ddb4", "committedDate": "2020-10-19T06:33:23Z", "message": "Update site/docs/design-docs/015-event-reordering.md\n\nCo-authored-by: Viliam Durina <viliam-durina@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f44596bed0518c165f98197e08efe97765206f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e5f44596bed0518c165f98197e08efe97765206f", "committedDate": "2020-10-23T09:48:20Z", "message": "Update the TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a5e6ec27432662f75d2f36418d42cf5685f5ccc", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8a5e6ec27432662f75d2f36418d42cf5685f5ccc", "committedDate": "2020-10-26T06:33:41Z", "message": "Improve the image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce5ed61154692bdc733c671978509c07cc660c7c", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ce5ed61154692bdc733c671978509c07cc660c7c", "committedDate": "2020-10-26T13:29:32Z", "message": "Edit the TDD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ea15c524842e080306a184057ed32aefb5b88ef", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7ea15c524842e080306a184057ed32aefb5b88ef", "committedDate": "2020-10-26T13:28:23Z", "message": "Edit the TDD"}, "afterCommit": {"oid": "ce5ed61154692bdc733c671978509c07cc660c7c", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ce5ed61154692bdc733c671978509c07cc660c7c", "committedDate": "2020-10-26T13:29:32Z", "message": "Edit the TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09c9acfbdcf827a0534063479f4d45707396fcc", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c09c9acfbdcf827a0534063479f4d45707396fcc", "committedDate": "2020-10-26T13:39:44Z", "message": "Touch up TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c391e5cbf80052f2bcd9454024857a6b9e309c89", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c391e5cbf80052f2bcd9454024857a6b9e309c89", "committedDate": "2020-10-26T14:18:42Z", "message": "Improve the image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a9438ba897ea9aa85d69ce44fbbad7eece0f38", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b6a9438ba897ea9aa85d69ce44fbbad7eece0f38", "committedDate": "2020-10-27T10:21:22Z", "message": "Replace Marker Interfaces with Class Fields\n\nAlso, Add ordering preservation logic to HashJoinTransform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "595fd49ba11fa96fa58f49ce59ad8f353337c419", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/595fd49ba11fa96fa58f49ce59ad8f353337c419", "committedDate": "2020-10-27T10:35:03Z", "message": "Remove magic numbers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06ffb3441e6ac4fbb3079c35cbd3f0d7cc87c0b", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e06ffb3441e6ac4fbb3079c35cbd3f0d7cc87c0b", "committedDate": "2020-10-29T09:32:19Z", "message": "Rename the sequencer as orderCreator\n\nAlso, Mark SinkTransform as orderSensitive."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9afa742772ca7e6e5bddcf66a64c030a89ff50", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5b9afa742772ca7e6e5bddcf66a64c030a89ff50", "committedDate": "2020-10-29T11:36:20Z", "message": "Update isolated edge\n\nRemove the restriction on the isolated edge that the\n downstream's local parallelism cannot be less than\n upstream's.\nAlso, add the ordering preservation logic to MergeTransform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ffc4b2a33092beb57036e19089102ba91d6219", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d6ffc4b2a33092beb57036e19089102ba91d6219", "committedDate": "2020-10-29T15:00:37Z", "message": "Fix determinePreserveOrderFlags Algorithm\n\nFormerly, it would not work in pipelines containing multiple branches.\nThe problem was determining the flag of the stage where the pipeline\nsplit into two branches and suppose that the flag of one branch is false\nand the other's is true. Give priority to \"true\" value and propagate this\n true value to upstream transforms and fix the issue. Get this by not\npropagating false values, anyway the default value of these flags is\nfalse and if there is no downstream transform having true value, it\nwill remain false."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de475c26f24d2002f499314fbb3cd77cfa40feb", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8de475c26f24d2002f499314fbb3cd77cfa40feb", "committedDate": "2020-10-29T15:14:17Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edcd63c389249de5e3074f41a5302267aa1ec698", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/edcd63c389249de5e3074f41a5302267aa1ec698", "committedDate": "2020-10-29T16:07:30Z", "message": "Change the graphviz format to show LP values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7a206f2214425f0ac26ce3157ea703e35aea42", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9c7a206f2214425f0ac26ce3157ea703e35aea42", "committedDate": "2020-10-29T20:03:49Z", "message": "Update the TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a745b678f5fa05ee54400750bcb69117bcf37f1f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a745b678f5fa05ee54400750bcb69117bcf37f1f", "committedDate": "2020-11-02T07:45:23Z", "message": "Remove the preserveOrderFlag determination logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35e309b0863c0df25c759bccf651584e59b3f967", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/35e309b0863c0df25c759bccf651584e59b3f967", "committedDate": "2020-11-02T09:44:05Z", "message": "Add setPreserveOrder(boolean) to Pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c539b49d6b871ff3c5d71082cd0ca85c107d7c", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/66c539b49d6b871ff3c5d71082cd0ca85c107d7c", "committedDate": "2020-11-02T11:52:50Z", "message": "Add Javadoc for setPreserveOrder(boolean)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8933368305e6f03537ef70d80bbeecbaaa232e92", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8933368305e6f03537ef70d80bbeecbaaa232e92", "committedDate": "2020-11-02T12:02:15Z", "message": "Revert the change on toDotString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef27098564e34b16c8a6d7d0499bc16fcf9e372", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/bef27098564e34b16c8a6d7d0499bc16fcf9e372", "committedDate": "2020-11-03T07:10:49Z", "message": "Update TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ad3717c9d6d8b126924ea6622be33f012b3db1", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/28ad3717c9d6d8b126924ea6622be33f012b3db1", "committedDate": "2020-11-03T07:14:19Z", "message": "Merge remote-tracking branch 'upstream/master' into prevent-reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01847171cd549b4e50ea367ad034875506a176f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c01847171cd549b4e50ea367ad034875506a176f", "committedDate": "2020-11-04T08:27:16Z", "message": "Apply the preserve order policy on Sort and Aggregate Transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cea3a32e5abb5d8969c6417357aab72c10b1ee", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/45cea3a32e5abb5d8969c6417357aab72c10b1ee", "committedDate": "2020-11-04T08:59:47Z", "message": "Fix: Update the tests wrt. changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b236c55ff73167ff571907794eb4f952aaf3300", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7b236c55ff73167ff571907794eb4f952aaf3300", "committedDate": "2020-11-09T08:31:20Z", "message": "Add a parallel mock streaming source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "990e2bb9d857f64462b65a32706418fff95f124c", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/990e2bb9d857f64462b65a32706418fff95f124c", "committedDate": "2020-11-10T08:25:06Z", "message": "Add batch and streaming parallel mock sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55d4f978bd8aac440f33eff256d509c10010b0a1", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/55d4f978bd8aac440f33eff256d509c10010b0a1", "committedDate": "2020-11-10T08:25:36Z", "message": "Add tests for ordered stream processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4186283b08946818530eea842e838e00fb8f81c", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a4186283b08946818530eea842e838e00fb8f81c", "committedDate": "2020-11-10T09:50:14Z", "message": "Fix: Add cleanup to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f53ca9e6e3c45dd2280c92064068d7e6c6c8ccb", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/4f53ca9e6e3c45dd2280c92064068d7e6c6c8ccb", "committedDate": "2020-11-10T09:56:48Z", "message": "Merge remote-tracking branch 'upstream/master' into prevent-reordering\n\n# Conflicts:\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/test/TestSources.java\n#\thazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00a06ada3ff8d14f99565febe7173b8d575da8d", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d00a06ada3ff8d14f99565febe7173b8d575da8d", "committedDate": "2020-11-10T09:59:23Z", "message": "Small Fix: Add missing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0bbbb0730945a45bf979cb64d2450b8f2d9353d", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e0bbbb0730945a45bf979cb64d2450b8f2d9353d", "committedDate": "2020-11-11T08:18:56Z", "message": "Convert parallel source to private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a05bfa01d631aaf91f866afdd4e7164b836bc7", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/18a05bfa01d631aaf91f866afdd4e7164b836bc7", "committedDate": "2020-11-11T09:28:37Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad557f5663bee6f56bc9115783f92f6ebc15ab59", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ad557f5663bee6f56bc9115783f92f6ebc15ab59", "committedDate": "2020-11-11T15:05:59Z", "message": "Add stream stage tests for event reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd9cda0d50f85aed4d0caaee1b88998c63e505f5", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/dd9cda0d50f85aed4d0caaee1b88998c63e505f5", "committedDate": "2020-11-12T07:15:51Z", "message": "Merge remote-tracking branch 'upstream/master' into prevent-reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9cb22f42040c3f4d7dbe6f5d319d95eb15bf86", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1b9cb22f42040c3f4d7dbe6f5d319d95eb15bf86", "committedDate": "2020-11-12T07:19:43Z", "message": "Fix: Revert itemsDistributed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44232590c904e47189022414e13d35fd3379741", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b44232590c904e47189022414e13d35fd3379741", "committedDate": "2020-11-13T07:49:21Z", "message": "Update TDD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e7db64179ff55164d4837f4beceac5b6b6554b4", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/0e7db64179ff55164d4837f4beceac5b6b6554b4", "committedDate": "2020-11-13T13:22:39Z", "message": "Edit Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMDU2NDIw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#pullrequestreview-530056420", "createdAt": "2020-11-13T13:23:00Z", "commit": {"oid": "0e7db64179ff55164d4837f4beceac5b6b6554b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7d14717884963eae2583979938db5cfd0be563", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ad7d14717884963eae2583979938db5cfd0be563", "committedDate": "2020-11-24T07:55:17Z", "message": "Add docs to the programming guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b52859450dbe410be19b092c5e85375f1f8225", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d4b52859450dbe410be19b092c5e85375f1f8225", "committedDate": "2020-11-24T07:56:31Z", "message": "Small fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a93e22326d176bc147a28fd4fd18dbbd5d8e8fc0", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a93e22326d176bc147a28fd4fd18dbbd5d8e8fc0", "committedDate": "2020-11-24T08:07:12Z", "message": "Merge remote-tracking branch 'upstream/master' into prevent-reordering\n\n# Conflicts:\n#\tsite/website/sidebars.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e312113970133809ff27b7d8b1145a4b68cfd6b", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8e312113970133809ff27b7d8b1145a4b68cfd6b", "committedDate": "2020-11-24T08:08:21Z", "message": "Resolve name conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac34f9aaf0df912ae0d21a726352dc4e0bd20cfb", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ac34f9aaf0df912ae0d21a726352dc4e0bd20cfb", "committedDate": "2020-11-24T08:13:44Z", "message": "Add since tags to public apis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzgzMTkw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#pullrequestreview-537383190", "createdAt": "2020-11-24T11:07:42Z", "commit": {"oid": "ac34f9aaf0df912ae0d21a726352dc4e0bd20cfb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowNzo0MlrOH47yxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowODowNlrOH47ziQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2MTk1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `Pipeline` has a property named `preserveOrder` and enabling this\n          \n          \n            \n            `Pipeline` has a property named `preserveOrder` and enabling this", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r529461957", "createdAt": "2020-11-24T11:07:42Z", "author": {"login": "mtopolnik"}, "path": "site/docs/api/pipeline.md", "diffHunk": "@@ -85,6 +85,26 @@ events in every partition, or you can use `withIngestionTimestamps()`\n which doesn't have this issue because it's based on system clock on the\n member machines.\n \n+#### Preserving Event Order\n+\n+In some use cases, the order of events with the same key should be\n+preserved, in order to be able to apply stateful processing logic on\n+them.\n+\n+The `Pipeline` has a property named `preserveOrder` and enabling this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac34f9aaf0df912ae0d21a726352dc4e0bd20cfb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2MjE1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            property hints the Jet to keep the order of events with the same\n          \n          \n            \n            property instructs Jet to keep the order of events with the same", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#discussion_r529462153", "createdAt": "2020-11-24T11:08:06Z", "author": {"login": "mtopolnik"}, "path": "site/docs/api/pipeline.md", "diffHunk": "@@ -85,6 +85,26 @@ events in every partition, or you can use `withIngestionTimestamps()`\n which doesn't have this issue because it's based on system clock on the\n member machines.\n \n+#### Preserving Event Order\n+\n+In some use cases, the order of events with the same key should be\n+preserved, in order to be able to apply stateful processing logic on\n+them.\n+\n+The `Pipeline` has a property named `preserveOrder` and enabling this\n+property hints the Jet to keep the order of events with the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac34f9aaf0df912ae0d21a726352dc4e0bd20cfb"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3Mzg0ODMw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2522#pullrequestreview-537384830", "createdAt": "2020-11-24T11:09:51Z", "commit": {"oid": "ac34f9aaf0df912ae0d21a726352dc4e0bd20cfb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85af4ba2e36b40ed18997c6a753acfd3eb3b099f", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/85af4ba2e36b40ed18997c6a753acfd3eb3b099f", "committedDate": "2020-11-24T12:04:17Z", "message": "Update site/docs/api/pipeline.md\n\nCo-authored-by: Marko Topolnik <marko@hazelcast.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e507064f84640dd5ffe917cc1b5ee44a959bd78", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/2e507064f84640dd5ffe917cc1b5ee44a959bd78", "committedDate": "2020-11-24T12:04:27Z", "message": "Update site/docs/api/pipeline.md\n\nCo-authored-by: Marko Topolnik <marko@hazelcast.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9144fbcd03e70ee423fda5de8256f2d0cb606fd9", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9144fbcd03e70ee423fda5de8256f2d0cb606fd9", "committedDate": "2020-11-25T08:23:39Z", "message": "Throw an early exception when using rebalance without a key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eebf182bf6a6ef28c3e3f14d50618b79d97716a", "author": {"user": {"login": "ufukyilmaz", "name": null}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/4eebf182bf6a6ef28c3e3f14d50618b79d97716a", "committedDate": "2020-11-25T08:46:20Z", "message": "Fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3609, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}