{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Njc0MjM5", "number": 2394, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MTo1OFrOES0TNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyNjo1OFrOES1rYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY2NzExOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MTo1OFrOG4NJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MTo1OFrOG4NJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4ODkxNQ==", "bodyText": "This is a breaking change and possibly undesirable. The user could be checking if the edge already has a destination.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2394#discussion_r461588915", "createdAt": "2020-07-28T13:41:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -177,8 +198,9 @@ public int getSourceOrdinal() {\n     /**\n      * Returns the name of the destination vertex.\n      */\n+    @Nonnull\n     public String getDestName() {\n-        return destName;\n+        return requireNonNull(destName, \"destination not yet set on the edge\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfab85be3d15884d1e204a5cba23005fdb0d6c2e"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY4NzAwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConveyorCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0NjowNVrOG4NVzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDoxODowNlrOG4dROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MjAxMw==", "bodyText": "Why the double null check?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2394#discussion_r461592013", "createdAt": "2020-07-28T13:46:05Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConveyorCollector.java", "diffHunk": "@@ -19,16 +19,19 @@\n import com.hazelcast.internal.util.concurrent.ConcurrentConveyor;\n import com.hazelcast.jet.impl.util.ProgressState;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+import static java.util.Objects.requireNonNull;\n+\n public class ConveyorCollector implements OutboundCollector {\n \n     private final ConcurrentConveyor<Object> conveyor;\n     private final int queueIndex;\n     private final int[] partitions;\n \n-    public ConveyorCollector(ConcurrentConveyor<Object> conveyor, int queueIndex, @Nullable int[] partitions) {\n-        this.conveyor = conveyor;\n+    public ConveyorCollector(@Nonnull ConcurrentConveyor<Object> conveyor, int queueIndex, @Nullable int[] partitions) {\n+        this.conveyor = requireNonNull(conveyor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfab85be3d15884d1e204a5cba23005fdb0d6c2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg1Mjk4Ng==", "bodyText": "The @Nonnull is not a check, just an annotation which can be ignored.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2394#discussion_r461852986", "createdAt": "2020-07-28T20:18:06Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConveyorCollector.java", "diffHunk": "@@ -19,16 +19,19 @@\n import com.hazelcast.internal.util.concurrent.ConcurrentConveyor;\n import com.hazelcast.jet.impl.util.ProgressState;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+import static java.util.Objects.requireNonNull;\n+\n public class ConveyorCollector implements OutboundCollector {\n \n     private final ConcurrentConveyor<Object> conveyor;\n     private final int queueIndex;\n     private final int[] partitions;\n \n-    public ConveyorCollector(ConcurrentConveyor<Object> conveyor, int queueIndex, @Nullable int[] partitions) {\n-        this.conveyor = conveyor;\n+    public ConveyorCollector(@Nonnull ConcurrentConveyor<Object> conveyor, int queueIndex, @Nullable int[] partitions) {\n+        this.conveyor = requireNonNull(conveyor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MjAxMw=="}, "originalCommit": {"oid": "bfab85be3d15884d1e204a5cba23005fdb0d6c2e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTg5MjgwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/DAG.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyNjo1OFrOG4PULg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyNjo1OFrOG4PULg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNDM2Ng==", "bodyText": "String.valueOf(e.getDistributedTo()) is nicer than this \"append empty string\" idiom.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2394#discussion_r461624366", "createdAt": "2020-07-28T14:26:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/DAG.java", "diffHunk": "@@ -363,7 +361,7 @@ public JsonObject toJson(int defaultLocalParallelism) {\n             edge.add(\"to\", e.getDestName());\n             edge.add(\"toOrdinal\", e.getDestOrdinal());\n             edge.add(\"priority\", e.getPriority());\n-            edge.add(\"distributed\", e.isDistributed());\n+            edge.add(\"distributedTo\", e.getDistributedTo() + \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfab85be3d15884d1e204a5cba23005fdb0d6c2e"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4671, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}