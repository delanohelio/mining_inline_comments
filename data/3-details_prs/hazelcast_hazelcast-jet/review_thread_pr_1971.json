{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjgzNzE4", "number": 1971, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDozMjo1MVrODh1YrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDozMjo1MVrODh1YrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODA0MjY4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Processor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDozMjo1MVrOFsyg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDozMjo1MVrOFsyg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwOTI5OA==", "bodyText": "can you fix the formatting here? looks weird? See for example on Jet.bootstrappedInstance", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1971#discussion_r382509298", "createdAt": "2020-02-21T10:32:51Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Processor.java", "diffHunk": "@@ -99,24 +99,34 @@\n \n     /**\n      * Tells whether this processor is able to participate in cooperative\n-     * multithreading. This means that each invocation of a <em>processing\n-     * method</em> in this class will take a reasonably small amount of time\n-     * (up to a millisecond). Violations will manifest themselves as increased\n-     * latency due to slower switching of processors.\n-     * <p>\n-     * A cooperative processor should also not attempt any blocking operations,\n-     * such as I/O operations, waiting for locks/semaphores or sleep\n-     * operations. Violations of this rule will manifest as less than 100% CPU\n-     * usage under maximum load (note that this is possible for other reasons too,\n-     * for example if the network is the bottleneck or if {@linkplain\n-     * JetProperties#JET_IDLE_COOPERATIVE_MAX_MICROSECONDS parking time} is too high).\n-     * The processor must also return as soon as the outbox rejects an item\n-     * (that is when the {@link Outbox#offer(Object) offer()} method returns\n-     * {@code false}).\n-     * <p>\n-     * If this processor declares itself cooperative, it will share a thread\n-     * with other cooperative processors. Otherwise it will run in a dedicated\n-     * Java thread.\n+     * multithreading. If this processor declares itself cooperative, it will\n+     * share a thread with other cooperative processors. Otherwise it will run\n+     * in a dedicated Java thread.\n+     * <p>\n+     * There are specific requirements that all <em>processing methods</em> of\n+     * a cooperative processor must follow:<ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778c90bae73a0e19ec86a44a2b0b66a678998db1"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4855, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}