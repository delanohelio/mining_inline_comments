{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MTAzNzM5", "number": 2208, "title": "Grpc how to guide", "bodyText": "Updated the grpc example to use both unary and bidirectional service.\nAdded how to guide.", "createdAt": "2020-04-22T07:35:09Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208", "merged": true, "mergeCommit": {"oid": "94dd9ced16f464a202a67a9549b6480b3e453d7d"}, "closed": true, "closedAt": "2020-04-23T11:30:03Z", "author": {"login": "frant-hartm"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaDMHsAH2gAyNDA3MTAzNzM5OmRiYmU5NjJmYzE0MDQzZjM5ZGY4MGViNzIzNzE2NDNiN2FkZGU1ZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaZOK2gFqTM5ODkwNzgzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dbbe962fc14043f39df80eb72371643b7adde5d6", "author": {"user": {"login": "frant-hartm", "name": "Franti\u0161ek Hartman"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/dbbe962fc14043f39df80eb72371643b7adde5d6", "committedDate": "2020-04-22T07:31:04Z", "message": "Use bidirectional streaming service in gRPC example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12", "author": {"user": {"login": "frant-hartm", "name": "Franti\u0161ek Hartman"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a429cce8078fd521d90a0b06b751e0a03c84fe12", "committedDate": "2020-04-22T07:34:10Z", "message": "Create gRPC how to guide"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3OTIxNDU4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#pullrequestreview-397921458", "createdAt": "2020-04-22T07:38:49Z", "commit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozODo0OVrOGJn-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0MDoxN1rOGJoCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTQzNA==", "bodyText": "add dependency where? where do you get the module and put it on the classpath?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412745434", "createdAt": "2020-04-22T07:38:49Z", "author": {"login": "cangencer"}, "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTYzMQ==", "bodyText": "should use the placeholder version tag", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412745631", "createdAt": "2020-04-22T07:39:07Z", "author": {"login": "cangencer"}, "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTg4OQ==", "bodyText": "you also need definition of ProductInfoRequest and ProductionInfoReply", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412745889", "createdAt": "2020-04-22T07:39:34Z", "author": {"login": "cangencer"}, "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>\n+</dependency>\n+```\n+\n+## Unary service\n+\n+A unary service allows to send a single request and receive a response,\n+similar to a normal function call.\n+\n+For example, given the protobuf definition below\n+\n+```proto\n+service ProductService {\n+  rpc ProductInfo (ProductInfoRequest) returns (ProductInfoReply) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NjM5Mg==", "bodyText": "for bidirectional we may show the server-side implementation as well, because it's not immediately obvious perhaps? just as a snippet, we probably don't need the full code.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412746392", "createdAt": "2020-04-22T07:40:17Z", "author": {"login": "cangencer"}, "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>\n+</dependency>\n+```\n+\n+## Unary service\n+\n+A unary service allows to send a single request and receive a response,\n+similar to a normal function call.\n+\n+For example, given the protobuf definition below\n+\n+```proto\n+service ProductService {\n+  rpc ProductInfo (ProductInfoRequest) returns (ProductInfoReply) {}\n+}\n+```\n+\n+We can create the following service factory using\n+`GrpcServices.unaryService()` method:\n+\n+```java\n+ServiceFactory<?, ? extends GrpcService<ProductInfoRequest, ProductInfoReply>> productService = unaryService(\n+    () -> ManagedChannelBuilder.forAddress(\"localhost\", PORT).useTransportSecurity().usePlaintext(),\n+    channel -> ProductServiceGrpc.newStub(channel)::productInfo\n+);\n+```\n+\n+The first parameter is a supplier returning a channel builder. Modify\n+the builder settings as required, e.g. to enable TLS via\n+`io.grpc.ManagedChannelBuilder.useTransportSecurity()`.  \n+\n+The second parameter is a function which, given a channel, creates the\n+stub (the `ProductServiceGrpc` class is auto-generated by the protobuf\n+compiler) and returns a function that calls the stub given\n+the input item and the observer. Again you may modify the stub according\n+to your needs. The returned function will be called once per input item.\n+\n+The full type of the second parameter is as follows (with wildcards\n+omitted):\n+\n+```java\n+FunctionEx<ManagedChannel, BiConsumerEx<T, StreamObserver<R>>> callStubFn\n+```\n+\n+Now the service factory can be used in any of the `mapUsingService*`\n+methods, preferably the `mapUsingServiceAsync`.\n+\n+```java\n+StreamStage<Trade> trades = ...\n+trades.mapUsingServiceAsync(productService,\n+(service, trade) -> {\n+    ProductInfoRequest request = ProductInfoRequest.newBuilder().setId(trade.productId()).build();\n+    return service.call(request).thenApply(productReply -> tuple2(trade, productReply.getProductName()));\n+})\n+```\n+\n+## Bidirectional streaming service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8b32c5b8ddf9d1e9e81c6fefa39c11e85bc328", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/bc8b32c5b8ddf9d1e9e81c6fefa39c11e85bc328", "committedDate": "2020-04-22T14:13:01Z", "message": "Clean up code sample and other docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9de553fdb0e8d61ec5ce89771296952a6f5c9227", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9de553fdb0e8d61ec5ce89771296952a6f5c9227", "committedDate": "2020-04-22T14:13:13Z", "message": "Improve the gRPC howto"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTU0NjE3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#pullrequestreview-398554617", "createdAt": "2020-04-22T20:19:21Z", "commit": {"oid": "9de553fdb0e8d61ec5ce89771296952a6f5c9227"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoxOToyMVrOGKJ5ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoxOTozMVrOGKJ5_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMTE1MA==", "bodyText": "doesn't these two contradict each other? plaintext and transportSecurity?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r413301150", "createdAt": "2020-04-22T20:19:21Z", "author": {"login": "cangencer"}, "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,224 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless\n+Transforms](../api/stateless-transforms.md#mapusingservice) section\n+shows how to use external services to transform items in a Jet pipeline.\n+One way to expose a remote service is using [gRPC](https://grpc.io/)\n+&mdash; an open-source universal RPC framework available for many\n+platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a gRPC\n+service. We support two kinds of [gRPC service\n+methods](https://grpc.io/docs/guides/concepts/):\n+\n+- unary RPC\n+- bidirectional streaming RPC\n+\n+Here we'll show you how to use these services in your pipeline.\n+\n+## Dependencies\n+\n+Add this dependency to your Java project:\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>\n+</dependency>\n+```\n+\n+The Hazelcast Jet cluster must also have this module on the classpath.\n+It is in the `opt` directory of the distribution package so you can just\n+move it to the `lib` directory and restart the cluster.\n+\n+## Unary RPC\n+\n+The classical request-response RPC pattern is what gRPC calls \"unary\n+RPC\". You send a single request message and get a single response\n+message back, just like a plain function call.\n+\n+Let's use this protobuf definition as an example:\n+\n+```proto\n+service ProductService {\n+  rpc ProductInfo (ProductInfoRequest)\n+      returns (ProductInfoReply) {}\n+}\n+```\n+\n+To call this service, use `GrpcServices.unaryService()`:\n+\n+```java\n+ServiceFactory<?, ? extends GrpcService<ProductInfoRequest, ProductInfoReply>>\n+productService = unaryService(\n+    () -> ManagedChannelBuilder.forAddress(\"localhost\", PORT)\n+                               .useTransportSecurity()\n+                               .usePlaintext(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de553fdb0e8d61ec5ce89771296952a6f5c9227"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMTI0NQ==", "bodyText": "this is still unresolved. I believe we also show dependencies as gradle, so let's follow the standard there.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r413301245", "createdAt": "2020-04-22T20:19:31Z", "author": {"login": "cangencer"}, "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTYzMQ=="}, "originalCommit": {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd6e71efbbd1cd6c2e76227fd3e1e83d28d3ddf5", "author": {"user": {"login": "frant-hartm", "name": "Franti\u0161ek Hartman"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/fd6e71efbbd1cd6c2e76227fd3e1e83d28d3ddf5", "committedDate": "2020-04-23T05:55:03Z", "message": "Update grpc based on feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67f34d24123d8507c1c44137b27e5d235f1ae7b9", "author": {"user": {"login": "frant-hartm", "name": "Franti\u0161ek Hartman"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/67f34d24123d8507c1c44137b27e5d235f1ae7b9", "committedDate": "2020-04-23T06:01:26Z", "message": "Revert changes unrelated to grpc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTA3ODMx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#pullrequestreview-398907831", "createdAt": "2020-04-23T09:11:13Z", "commit": {"oid": "67f34d24123d8507c1c44137b27e5d235f1ae7b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3743, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}