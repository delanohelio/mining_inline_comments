{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjU5NjUx", "number": 2681, "title": "Infer Kafka (de)serializers", "bodyText": "Added Kafka (de)serializers inference when possible.\nChecklist:\n\n Labels and Milestone set", "createdAt": "2020-11-18T15:19:06Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2681", "merged": true, "mergeCommit": {"oid": "f66af111cbc9ed9f6bcab60cdb38485236b00143"}, "closed": true, "closedAt": "2020-11-18T16:14:36Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddvuk1gH2gAyNTIzMjU5NjUxOmQ2OTFlYmM5NTNmZDI5MDE4ZTk2YTllODg1M2ZjMDdhYTMyYzYwMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddwK1bgH2gAyNTIzMjU5NjUxOmEzMjY0MjMyMmRmODA1NzM0ZmI5YWJiNGQxNDczMDk0M2UxNTMwMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d691ebc953fd29018e96a9e8853fc07aa32c6021", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d691ebc953fd29018e96a9e8853fc07aa32c6021", "committedDate": "2020-11-18T15:17:27Z", "message": "Infer Kafka (de)serializers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNTc1NzA5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2681#pullrequestreview-533575709", "createdAt": "2020-11-18T15:40:32Z", "commit": {"oid": "d691ebc953fd29018e96a9e8853fc07aa32c6021"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDozMlrOH1z6Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0Mzo0MFrOH10ETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NzA3MA==", "bodyText": "I think we can use switch (format). Since java 7 it works for strings.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2681#discussion_r526187070", "createdAt": "2020-11-18T15:40:32Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/connector/kafka/PropertiesResolver.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.sql.impl.connector.kafka;\n+\n+import com.hazelcast.jet.sql.impl.connector.SqlConnector;\n+import org.apache.kafka.common.serialization.ByteArrayDeserializer;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.DoubleDeserializer;\n+import org.apache.kafka.common.serialization.DoubleSerializer;\n+import org.apache.kafka.common.serialization.FloatDeserializer;\n+import org.apache.kafka.common.serialization.FloatSerializer;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.LongDeserializer;\n+import org.apache.kafka.common.serialization.LongSerializer;\n+import org.apache.kafka.common.serialization.ShortDeserializer;\n+import org.apache.kafka.common.serialization.ShortSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static com.hazelcast.jet.sql.impl.connector.SqlConnector.AVRO_FORMAT;\n+import static com.hazelcast.jet.sql.impl.connector.SqlConnector.JAVA_FORMAT;\n+import static com.hazelcast.jet.sql.impl.connector.SqlConnector.JSON_FORMAT;\n+import static com.hazelcast.jet.sql.impl.connector.SqlConnector.OPTION_KEY_FORMAT;\n+import static com.hazelcast.jet.sql.impl.connector.SqlConnector.OPTION_VALUE_FORMAT;\n+\n+final class PropertiesResolver {\n+\n+    static final String KEY_SERIALIZER = \"key.serializer\";\n+    static final String KEY_DESERIALIZER = \"key.deserializer\";\n+    static final String VALUE_SERIALIZER = \"value.serializer\";\n+    static final String VALUE_DESERIALIZER = \"value.deserializer\";\n+\n+    static final String AVRO_SERIALIZER = \"io.confluent.kafka.serializers.KafkaAvroSerializer\";\n+    static final String AVRO_DESERIALIZER = \"io.confluent.kafka.serializers.KafkaAvroDeserializer\";\n+\n+    static final String JSON_SERIALIZER = ByteArraySerializer.class.getCanonicalName();\n+    static final String JSON_DESERIALIZER = ByteArrayDeserializer.class.getCanonicalName();\n+\n+    private PropertiesResolver() {\n+    }\n+\n+    static Properties resolveProperties(Map<String, String> options) {\n+        Properties properties = new Properties();\n+        properties.putAll(options);\n+\n+        properties(options, true).forEach(properties::putIfAbsent);\n+        properties(options, false).forEach(properties::putIfAbsent);\n+\n+        return properties;\n+    }\n+\n+    private static Map<String, String> properties(Map<String, String> options, boolean isKey) {\n+        Map<String, String> properties = new HashMap<>();\n+\n+        String serializer = isKey ? KEY_SERIALIZER : VALUE_SERIALIZER;\n+        String deserializer = isKey ? KEY_DESERIALIZER : VALUE_DESERIALIZER;\n+\n+        String format = options.get(isKey ? OPTION_KEY_FORMAT : OPTION_VALUE_FORMAT);\n+        if (JAVA_FORMAT.equals(format)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d691ebc953fd29018e96a9e8853fc07aa32c6021"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4ODEzNQ==", "bodyText": "This test would actually pass even if the option got replaced, because we use the default value. We can use some missing class and check that it fails not finding it.\nAgain in SqlJsonTest", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2681#discussion_r526188135", "createdAt": "2020-11-18T15:41:50Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-sql/src/test/java/com/hazelcast/jet/sql/impl/connector/kafka/SqlAvroTest.java", "diffHunk": "@@ -407,6 +379,40 @@ public void test_topLevelFieldExtraction() {\n         );\n     }\n \n+    @Test\n+    public void test_explicitKeyAndValueSerializers() {\n+        String name = createRandomTopic();\n+        sqlService.execute(\"CREATE MAPPING \" + name + \" (\"\n+                + \"key_name VARCHAR EXTERNAL NAME \\\"__key.name\\\"\"\n+                + \", value_name VARCHAR EXTERNAL NAME \\\"this.name\\\"\"\n+                + \") TYPE \" + KafkaSqlConnector.TYPE_NAME + ' '\n+                + \"OPTIONS ( \"\n+                + '\"' + OPTION_KEY_FORMAT + \"\\\" '\" + AVRO_FORMAT + '\\''\n+                + \", \\\"\" + OPTION_VALUE_FORMAT + \"\\\" '\" + AVRO_FORMAT + '\\''\n+                + \", \\\"key.serializer\\\" '\" + KafkaAvroSerializer.class.getCanonicalName() + '\\''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d691ebc953fd29018e96a9e8853fc07aa32c6021"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4OTY0Nw==", "bodyText": "Can't we remove these two lines?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2681#discussion_r526189647", "createdAt": "2020-11-18T15:43:40Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-sql/src/test/java/com/hazelcast/jet/sql/impl/connector/kafka/SqlPrimitiveTest.java", "diffHunk": "@@ -326,38 +294,67 @@ public void test_explicitKeyAndThis() {\n     }\n \n     @Test\n-    public void test_noValueFormat() {\n-        String topicName = randomName();\n-        assertThatThrownBy(\n-                () -> sqlService.execute(\"CREATE MAPPING \" + topicName + \" TYPE \" + KafkaSqlConnector.TYPE_NAME + \" \"\n-                        + \"OPTIONS (\"\n-                        + '\"' + OPTION_KEY_FORMAT + \"\\\" '\" + JAVA_FORMAT + \"',\"\n-                        + '\"' + OPTION_KEY_CLASS + \"\\\" '\" + String.class.getName() + \"'\"\n-                        + \")\"))\n-                .hasMessage(\"Missing 'valueFormat' option\");\n+    public void test_explicitKeyAndValueSerializers() {\n+        String name = createRandomTopic();\n+        sqlService.execute(\"CREATE MAPPING \" + name + ' '\n+                + \"TYPE \" + KafkaSqlConnector.TYPE_NAME + ' '\n+                + \"OPTIONS ( \"\n+                + '\"' + OPTION_KEY_FORMAT + \"\\\" '\" + JAVA_FORMAT + '\\''\n+                + \", \\\"\" + OPTION_KEY_CLASS + \"\\\" '\" + Integer.class.getName() + '\\''\n+                + \", \\\"\" + OPTION_VALUE_FORMAT + \"\\\" '\" + JAVA_FORMAT + '\\''\n+                + \", \\\"\" + OPTION_VALUE_CLASS + \"\\\" '\" + String.class.getName() + '\\''\n+                + \", \\\"key.serializer\\\" '\" + IntegerSerializer.class.getCanonicalName() + '\\''\n+                + \", \\\"key.deserializer\\\" '\" + IntegerDeserializer.class.getCanonicalName() + '\\''\n+                + \", \\\"value.serializer\\\" '\" + StringSerializer.class.getCanonicalName() + '\\''\n+                + \", \\\"value.deserializer\\\" '\" + StringDeserializer.class.getCanonicalName() + '\\''\n+                + \", \\\"bootstrap.servers\\\" '\" + kafkaTestSupport.getBrokerConnectionString() + '\\''\n+                + \", \\\"auto.offset.reset\\\" 'earliest'\"\n+                + \")\"\n+        );\n+\n+        assertTopicEventually(\n+                name,\n+                \"INSERT INTO \" + name + \" (__key, this) VALUES (1, '2')\",\n+                createMap(1, \"2\")\n+        );\n+        assertRowsEventuallyInAnyOrder(\n+                \"SELECT * FROM \" + name,\n+                singletonList(new Row(1, \"2\"))\n+        );\n     }\n \n     @Test\n     public void test_noKeyFormat() {\n         String topicName = createRandomTopic();\n         sqlService.execute(\"CREATE MAPPING \" + topicName + ' '\n-                + \"TYPE \" + KafkaSqlConnector.TYPE_NAME + ' '\n-                + \"OPTIONS (\"\n-                + '\"' + OPTION_VALUE_FORMAT + \"\\\" '\" + JAVA_FORMAT + \"',\"\n-                + '\"' + OPTION_VALUE_CLASS + \"\\\" '\" + Integer.class.getName() + \"'\"\n-                + \", \\\"bootstrap.servers\\\" '\" + kafkaTestSupport.getBrokerConnectionString() + '\\''\n-                + \", \\\"key.serializer\\\" '\" + IntegerSerializer.class.getCanonicalName() + '\\''\n-                + \", \\\"key.deserializer\\\" '\" + IntegerDeserializer.class.getCanonicalName() + '\\''\n-                + \", \\\"value.serializer\\\" '\" + IntegerSerializer.class.getCanonicalName() + '\\''\n-                + \", \\\"value.deserializer\\\" '\" + IntegerDeserializer.class.getCanonicalName() + '\\''\n-                + \", \\\"auto.offset.reset\\\" 'earliest'\"\n-                + \")\");\n+                           + \"TYPE \" + KafkaSqlConnector.TYPE_NAME + ' '\n+                           + \"OPTIONS (\"\n+                           + '\"' + OPTION_VALUE_FORMAT + \"\\\" '\" + JAVA_FORMAT + \"',\"\n+                           + '\"' + OPTION_VALUE_CLASS + \"\\\" '\" + Integer.class.getName() + \"'\"\n+                           + \", \\\"key.serializer\\\" '\" + IntegerSerializer.class.getCanonicalName() + '\\''\n+                           + \", \\\"key.deserializer\\\" '\" + IntegerDeserializer.class.getCanonicalName() + '\\''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d691ebc953fd29018e96a9e8853fc07aa32c6021"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32642322df805734fb9abb4d14730943e153009", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a32642322df805734fb9abb4d14730943e153009", "committedDate": "2020-11-18T15:48:19Z", "message": "More tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3545, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}