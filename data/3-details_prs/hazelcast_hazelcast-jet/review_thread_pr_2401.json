{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTcxNDk0", "number": 2401, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToyMjowMVrOEOmfDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxODo1M1rOEPdjzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQ2MDYwOnYy", "diffSide": "RIGHT", "path": "examples/cdc/src/main/java/com/hazelcast/jet/examples/cdc/Cache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToyMjowMVrOGx1vkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTozNTozM1rOGx2OrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMzkzNg==", "bodyText": "should there a be a .join() call here?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2401#discussion_r454913936", "createdAt": "2020-07-15T09:22:01Z", "author": {"login": "cangencer"}, "path": "examples/cdc/src/main/java/com/hazelcast/jet/examples/cdc/Cache.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.cdc;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.cdc.CdcSinks;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.mysql.MySqlCdcSources;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+/**\n+ * Demonstrates a simple cache which uses change data capture to monitor a\n+ * MySQL database and maintain an up-to-date cache of its content in memory.\n+ * <p>\n+ * To have a database to experiment with start one using following command:\n+ * <pre>\n+ *  docker run -it --rm --name mysql -p 3306:3306 \\\n+ *     -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser \\\n+ *     -e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:1.2\n+ * </pre>\n+ * <p>\n+ * To have a command line client to generate some database events manually use:\n+ * <pre>\n+ *     docker run -it --rm --name mysqlterm --link mysql --rm mysql:5.7 sh \\\n+ *     -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" \\\n+ *     -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n+ * </pre>\n+ * <p>\n+ * The map written into by this pipeline's sink can be read from other Jet jobs\n+ * or IMDG clients as any other {@code IMap}.\n+ */\n+public class Cache {\n+\n+    public static void main(String[] args) {\n+        StreamSource<ChangeRecord> source = MySqlCdcSources.mysql(\"source\")\n+                .setDatabaseAddress(\"127.0.0.1\")\n+                .setDatabasePort(3306)\n+                .setDatabaseUser(\"debezium\")\n+                .setDatabasePassword(\"dbz\")\n+                .setClusterName(\"dbserver1\")\n+                .setDatabaseWhitelist(\"inventory\")\n+                .setTableWhitelist(\"inventory.customers\")\n+                .build();\n+\n+        Pipeline pipeline = Pipeline.create();\n+        pipeline.readFrom(source)\n+                .withoutTimestamps()\n+                .peek()\n+                .writeTo(CdcSinks.map(\"customers\",\n+                        r -> r.key().toMap().get(\"id\"),\n+                        r -> r.value().toObject(Customer.class).toString()));\n+\n+        JobConfig cfg = new JobConfig().setName(\"mysql-monitor\");\n+        Jet.bootstrappedInstance().newJob(pipeline, cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b250fd5e31db8d8a0cc7f9d10329adbfda99e8e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyMTkwMA==", "bodyText": "Hmm... I guess if you run it stand-alone, then yes, you want to stick around, not like when you submit it to the cluster... So I guess, yes, safer to add the join. Will do.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2401#discussion_r454921900", "createdAt": "2020-07-15T09:35:33Z", "author": {"login": "jbartok"}, "path": "examples/cdc/src/main/java/com/hazelcast/jet/examples/cdc/Cache.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.cdc;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.cdc.CdcSinks;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.mysql.MySqlCdcSources;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+/**\n+ * Demonstrates a simple cache which uses change data capture to monitor a\n+ * MySQL database and maintain an up-to-date cache of its content in memory.\n+ * <p>\n+ * To have a database to experiment with start one using following command:\n+ * <pre>\n+ *  docker run -it --rm --name mysql -p 3306:3306 \\\n+ *     -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser \\\n+ *     -e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:1.2\n+ * </pre>\n+ * <p>\n+ * To have a command line client to generate some database events manually use:\n+ * <pre>\n+ *     docker run -it --rm --name mysqlterm --link mysql --rm mysql:5.7 sh \\\n+ *     -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" \\\n+ *     -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n+ * </pre>\n+ * <p>\n+ * The map written into by this pipeline's sink can be read from other Jet jobs\n+ * or IMDG clients as any other {@code IMap}.\n+ */\n+public class Cache {\n+\n+    public static void main(String[] args) {\n+        StreamSource<ChangeRecord> source = MySqlCdcSources.mysql(\"source\")\n+                .setDatabaseAddress(\"127.0.0.1\")\n+                .setDatabasePort(3306)\n+                .setDatabaseUser(\"debezium\")\n+                .setDatabasePassword(\"dbz\")\n+                .setClusterName(\"dbserver1\")\n+                .setDatabaseWhitelist(\"inventory\")\n+                .setTableWhitelist(\"inventory.customers\")\n+                .build();\n+\n+        Pipeline pipeline = Pipeline.create();\n+        pipeline.readFrom(source)\n+                .withoutTimestamps()\n+                .peek()\n+                .writeTo(CdcSinks.map(\"customers\",\n+                        r -> r.key().toMap().get(\"id\"),\n+                        r -> r.value().toObject(Customer.class).toString()));\n+\n+        JobConfig cfg = new JobConfig().setName(\"mysql-monitor\");\n+        Jet.bootstrappedInstance().newJob(pipeline, cfg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMzkzNg=="}, "originalCommit": {"oid": "4b250fd5e31db8d8a0cc7f9d10329adbfda99e8e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4Mzk5OnYy", "diffSide": "RIGHT", "path": "examples/cdc/src/main/java/com/hazelcast/jet/examples/cdc/Cache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxODo1M1rOGzL19g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxODo1M1rOGzL19g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDU5OA==", "bodyText": "very minor but the ); should be on next line", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2401#discussion_r456324598", "createdAt": "2020-07-17T09:18:53Z", "author": {"login": "cangencer"}, "path": "examples/cdc/src/main/java/com/hazelcast/jet/examples/cdc/Cache.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.cdc;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.cdc.CdcSinks;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.mysql.MySqlCdcSources;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+/**\n+ * Demonstrates a simple cache which uses change data capture to monitor a\n+ * MySQL database and maintain an up-to-date cache of its content in memory.\n+ * <p>\n+ * To have a database to experiment with start one using following command:\n+ * <pre>\n+ *  docker run -it --rm --name mysql -p 3306:3306 \\\n+ *     -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser \\\n+ *     -e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:1.2\n+ * </pre>\n+ * <p>\n+ * To have a command line client to generate some database events manually use:\n+ * <pre>\n+ *     docker run -it --rm --name mysqlterm --link mysql --rm mysql:5.7 sh \\\n+ *     -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" \\\n+ *     -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n+ * </pre>\n+ * <p>\n+ * The map written into by this pipeline's sink can be read from other Jet jobs\n+ * or IMDG clients as any other {@code IMap}.\n+ */\n+public class Cache {\n+\n+    public static void main(String[] args) {\n+        StreamSource<ChangeRecord> source = MySqlCdcSources.mysql(\"source\")\n+                .setDatabaseAddress(\"127.0.0.1\")\n+                .setDatabasePort(3306)\n+                .setDatabaseUser(\"debezium\")\n+                .setDatabasePassword(\"dbz\")\n+                .setClusterName(\"dbserver1\")\n+                .setDatabaseWhitelist(\"inventory\")\n+                .setTableWhitelist(\"inventory.customers\")\n+                .build();\n+\n+        Pipeline pipeline = Pipeline.create();\n+        pipeline.readFrom(source)\n+                .withoutTimestamps()\n+                .peek()\n+                .writeTo(CdcSinks.map(\"customers\",\n+                        r -> r.key().toMap().get(\"id\"),\n+                        r -> r.value().toObject(Customer.class).toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f244da6eba90897c66ac20fa0d44dc6067d4e091"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}