{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTMyMDg1", "number": 2120, "title": "Add job-level serializer & addClass/addPackage docs", "bodyText": "Added job-level serializer & addClass()/addPackage() docs.", "createdAt": "2020-03-31T07:29:01Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120", "merged": true, "mergeCommit": {"oid": "2a56113436fc93b38b9439e21476765346ccd8e2"}, "closed": true, "closedAt": "2020-03-31T16:08:47Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS99WGAH2gAyMzk2MTMyMDg1OjVjOTRjOGY4MmIxODVjNjA5YzA3NTRhOTYyNTkwOTJkMmY1MTExMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTFRzigFqTM4NDg3OTM4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c94c8f82b185c609c0754a96259092d2f511123", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5c94c8f82b185c609c0754a96259092d2f511123", "committedDate": "2020-03-31T07:27:56Z", "message": "Add job-level serializer & addClass/addPackage docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTQwNDA0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#pullrequestreview-384540404", "createdAt": "2020-03-31T09:08:10Z", "commit": {"oid": "5c94c8f82b185c609c0754a96259092d2f511123"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTowODoxMFrOF-MQOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTowODoxMFrOF-MQOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1Njc5NA==", "bodyText": "wouldn't it be better to mention this earlier in the document? It kind of contradicts the previous section which states all classes must be present on classpath. It must be made into a coherent overall story.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#discussion_r400756794", "createdAt": "2020-03-31T09:08:10Z", "author": {"login": "cangencer"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -294,3 +294,28 @@ hazelcast:\n All the classes - data types, serializers & hooks - should be present\n on the server classpath, ideally in server's `lib` directory packaged as\n a jar file.\n+\n+### Job-level Serializers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c94c8f82b185c609c0754a96259092d2f511123"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712e13ebe7ec4a8671a315b118838641366d47f4", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/712e13ebe7ec4a8671a315b118838641366d47f4", "committedDate": "2020-03-31T11:44:45Z", "message": "Improving serialization docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjU2MDIx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#pullrequestreview-384656021", "createdAt": "2020-03-31T11:52:24Z", "commit": {"oid": "712e13ebe7ec4a8671a315b118838641366d47f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo1MjoyNFrOF-SAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo1MjoyNFrOF-SAhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1MTA3OA==", "bodyText": "but it can still conflict with other global serializers, right?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#discussion_r400851078", "createdAt": "2020-03-31T11:52:24Z", "author": {"login": "cangencer"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -216,44 +214,68 @@ not to mention very wasteful of memory usage.\n ### Writing Custom Serializers\n \n For best performance and simplest implementation we recommend using\n-[com.hazelcast.nio.serialization.StreamSerializer](https://docs.hazelcast.org/docs/4.0/javadoc/com/hazelcast/nio/serialization/StreamSerializer.html)\n-or\n-[com.hazelcast.nio.serialization.ByteArraySerializer](https://docs.hazelcast.org/docs/4.0/javadoc/com/hazelcast/nio/serialization/ByteArraySerializer.html).\n+[com.hazelcast.nio.serialization.StreamSerializer](https://docs.hazelcast.org/docs/4.0/javadoc/com/hazelcast/nio/serialization/StreamSerializer.html).\n \n Below you can find a sample implementation of `StreamSerializer` for\n-`Person` (mind the type id which should be unique across all serializers):\n+`Person`:\n \n ```java\n class PersonSerializer implements StreamSerializer<Person> {\n \n-        private static final int TYPE_ID = 1;\n-\n-        @Override\n-        public int getTypeId() {\n-            return TYPE_ID;\n-        }\n-\n-        @Override\n-        public void write(ObjectDataOutput out, Person person) throws IOException {\n-            out.writeUTF(person.firstName);\n-            out.writeUTF(person.lastName);\n-            out.writeInt(person.age);\n-            out.writeFloat(person.height);\n-        }\n-\n-        @Override\n-        public Person read(ObjectDataInput in) throws IOException {\n-            return new Person(in.readUTF(), in.readUTF(), in.readInt(), in.readFloat());\n-        }\n+    private static final int TYPE_ID = 1;\n+\n+    @Override\n+    public int getTypeId() {\n+        return TYPE_ID;\n+    }\n+\n+    @Override\n+    public void write(ObjectDataOutput out, Person person) throws IOException {\n+        out.writeUTF(person.firstName);\n+        out.writeUTF(person.lastName);\n+        out.writeInt(person.age);\n+        out.writeFloat(person.height);\n     }\n+\n+    @Override\n+    public Person read(ObjectDataInput in) throws IOException {\n+        return new Person(in.readUTF(), in.readUTF(), in.readInt(), in.readFloat());\n+    }\n+}\n ```\n \n-Then the serializer should be registered with Jet up front on cluster\n-startup. The best way to do is to create a `SerializerHook` which can\n-automatically be registered on startup:\n+#### Registering serializer for the job\n+\n+One way of registering a custom serializer is to do that on a job\n+level. Assuming both, value and serializer classes are already added to\n+the [classpath](submitting-jobs.md), you can simply:\n+\n+```java\n+new JobConfig()\n+    .registerSerializer(Person.class, PersonSerializer.class)\n+```\n+\n+Such serializer is scoped - the type id does not have to be globally", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712e13ebe7ec4a8671a315b118838641366d47f4"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjU2NjE5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#pullrequestreview-384656619", "createdAt": "2020-03-31T11:53:18Z", "commit": {"oid": "712e13ebe7ec4a8671a315b118838641366d47f4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo1MzoxOFrOF-SCXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo1MzoxOFrOF-SCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1MTU0OA==", "bodyText": "we should mention this is required for supporting querying, projections and so on.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#discussion_r400851548", "createdAt": "2020-03-31T11:53:18Z", "author": {"login": "cangencer"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -292,5 +314,8 @@ hazelcast:\n ```\n \n All the classes - data types, serializers & hooks - should be present\n-on the server classpath, ideally in server's `lib` directory packaged as\n-a jar file.\n+on the cluster classpath, ideally in server's `lib` directory packaged as\n+a jar file. Moreover, used type ids have to be unique across all\n+serializers.\n+Despite those limitations cluster level serializers offer\n+full support for IMDG [sources and sinks](sources-sinks.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712e13ebe7ec4a8671a315b118838641366d47f4"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95e384aeb4ba5a05fa735259bb9938a96f03835", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d95e384aeb4ba5a05fa735259bb9938a96f03835", "committedDate": "2020-03-31T12:34:14Z", "message": "Improving serialization docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056e553d804db6f46bbf6185cb9c7c127ebd34d0", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/056e553d804db6f46bbf6185cb9c7c127ebd34d0", "committedDate": "2020-03-31T12:58:45Z", "message": "Improving serialization docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a1fbe6d56cbbdb4eb8682878cdd38f7e5060a40", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/6a1fbe6d56cbbdb4eb8682878cdd38f7e5060a40", "committedDate": "2020-03-31T15:53:32Z", "message": "Improving serialization docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7129a907dac3990f5d64aaaee8387b21803a87c6", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7129a907dac3990f5d64aaaee8387b21803a87c6", "committedDate": "2020-03-31T15:54:15Z", "message": "Improving serialization docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODc5Mzgz", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2120#pullrequestreview-384879383", "createdAt": "2020-03-31T15:59:37Z", "commit": {"oid": "7129a907dac3990f5d64aaaee8387b21803a87c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2758, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}