{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzcwNjA3", "number": 1932, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozOToxMFrODdrzWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxNzoxOFrODipH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDUyOTUzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozOToxMFrOFmbThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjo0MDozMlrOFmzjOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw==", "bodyText": "can we add a test with anonymous class too", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375837573", "createdAt": "2020-02-06T13:39:10Z", "author": {"login": "gurbuzali"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1024,4 +1033,9 @@ private File createDirectory(String path) {\n         assertTrue(\"Failed to create directory \" + dirFile, dirFile.mkdirs());\n         return dirFile;\n     }\n+\n+    private static class BaseClass {\n+        private static class NestedClass {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf398b66256802838dec2a6eceefbbdee3af2de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzODA1MQ==", "bodyText": "Actually, anonymous class case is not covered yet, I'm working on it right now - will do.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375838051", "createdAt": "2020-02-06T13:40:10Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1024,4 +1033,9 @@ private File createDirectory(String path) {\n         assertTrue(\"Failed to create directory \" + dirFile, dirFile.mkdirs());\n         return dirFile;\n     }\n+\n+    private static class BaseClass {\n+        private static class NestedClass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, "originalCommit": {"oid": "caf398b66256802838dec2a6eceefbbdee3af2de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1MTA3Mg==", "bodyText": "Could you also test with Kotlin - since Kotlin lambdas are always created as anonymous classes.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375851072", "createdAt": "2020-02-06T14:04:03Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1024,4 +1033,9 @@ private File createDirectory(String path) {\n         assertTrue(\"Failed to create directory \" + dirFile, dirFile.mkdirs());\n         return dirFile;\n     }\n+\n+    private static class BaseClass {\n+        private static class NestedClass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, "originalCommit": {"oid": "caf398b66256802838dec2a6eceefbbdee3af2de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5NTkzNA==", "bodyText": "Do you mean actually adding kotlin as test dependency or just make sure it works with it? Adding kotlin tests might further slow down the build?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375895934", "createdAt": "2020-02-06T15:18:29Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1024,4 +1033,9 @@ private File createDirectory(String path) {\n         assertTrue(\"Failed to create directory \" + dirFile, dirFile.mkdirs());\n         return dirFile;\n     }\n+\n+    private static class BaseClass {\n+        private static class NestedClass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, "originalCommit": {"oid": "caf398b66256802838dec2a6eceefbbdee3af2de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzNDgwOQ==", "bodyText": "Maybe just test it for now - I don't know how complicated it would be to add it as a full dependency and some tests. It's a nice to have.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376234809", "createdAt": "2020-02-07T06:40:32Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1024,4 +1033,9 @@ private File createDirectory(String path) {\n         assertTrue(\"Failed to create directory \" + dirFile, dirFile.mkdirs());\n         return dirFile;\n     }\n+\n+    private static class BaseClass {\n+        private static class NestedClass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, "originalCommit": {"oid": "caf398b66256802838dec2a6eceefbbdee3af2de"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzY2NzE2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo0OTozOVrOFm5URg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo0OTozOVrOFm5URg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyOTI4Ng==", "bodyText": "You can simplify this by first building a literal class string (no escaping) and then calling Pattern.quote() on it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376329286", "createdAt": "2020-02-07T10:49:39Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -232,10 +241,26 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes can not be null\");\n+        checkNotNull(classes, \"Classes cannot be null\");\n         for (Class<?> clazz : classes) {\n             ResourceConfig cfg = new ResourceConfig(clazz);\n             resourceConfigs.put(cfg.getId(), cfg);\n+\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            String packagePrefixPath = Optional.ofNullable(clazz.getPackage())\n+                                               .map(pakage -> pakage.getName().replace('.', '/') + \"/\")\n+                                               .orElse(\"\");\n+            Pattern nestedPattern = Pattern.compile(clazz.getName()\n+                                                         .replace(\".\", \"\\\\/\")\n+                                                         .replace(\"$\", \"\\\\$\") + \"\\\\$.+\" + \"\\\\.class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02e7e2eec2cbe74efb7c01014737b7b76955c55"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzY2OTUwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/kotlin/com/hazelcast/jet/config/KotlinResourceTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1MDozNlrOFm5Vqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1MDozNlrOFm5Vqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyOTY0Mw==", "bodyText": "Would you mind using static imports here? It would remove quite a lot of noise.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376329643", "createdAt": "2020-02-07T10:50:36Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/kotlin/com/hazelcast/jet/config/KotlinResourceTest.kt", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hazelcast.jet.config\n+\n+import org.hamcrest.Matchers\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+\n+class KotlinResourceTest {\n+\n+    private var config: JobConfig? = null\n+\n+    @Before\n+    fun setUp() {\n+        config = JobConfig()\n+    }\n+\n+    @Test\n+    fun shouldAddNestedAndAnonymousClasses() {\n+        // When\n+        config!!.addClass(OuterClass::class.java)\n+\n+        // Then\n+        val resourceConfigs: Collection<ResourceConfig> = config!!.resourceConfigs.values\n+        Assert.assertThat(resourceConfigs, Matchers.hasSize(4))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02e7e2eec2cbe74efb7c01014737b7b76955c55"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzc0OTQyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMToyMjozM1rOFm6GuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMToyMjozM1rOFm6GuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MjIwMA==", "bodyText": "minor, but Javadoc should be wrapped at 72 chars (net)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376342200", "createdAt": "2020-02-07T11:22:33Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -219,8 +228,8 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     }\n \n     /**\n-     * Adds the given classes to the Jet job's classpath. They will be\n-     * accessible to all the code attached to the underlying pipeline or DAG,\n+     * Adds the given classes and recursively all their nested classes to the Jet job's classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "692eab70cb6708f182e26bc2fedd4520a916a458"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg0NDA5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMjoxM1rOFm6-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMjoxM1rOFm6-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjU0Mw==", "bodyText": "this does not work if the class is coming from a dependency. I've created a jar which contains the OuterClass and added that jar as a dependency to my project. When I called addClass, the returned resource list is empty.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376356543", "createdAt": "2020-02-07T12:02:13Z", "author": {"login": "gurbuzali"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -232,10 +241,26 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes can not be null\");\n+        checkNotNull(classes, \"Classes cannot be null\");\n         for (Class<?> clazz : classes) {\n             ResourceConfig cfg = new ResourceConfig(clazz);\n             resourceConfigs.put(cfg.getId(), cfg);\n+\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            String packagePrefixPath = Optional.ofNullable(clazz.getPackage())\n+                                               .map(pakage -> pakage.getName().replace('.', '/') + \"/\")\n+                                               .orElse(\"\");\n+            Pattern nestedPattern = Pattern.compile(\n+                    Pattern.quote(clazz.getName().replace('.', '/')) + \"\\\\$.+\" + \"\\\\.class\"\n+            );\n+            resources(classLoader, packagePrefixPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ee78776bac6d808d02ad2e7ebeb41f758fec7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQ4MTU3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDowNjoxMFrOFt_8LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDowNjoxMFrOFt_8LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NzgzNg==", "bodyText": "Do we really have to double-check a @Nonnull parameter?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383777836", "createdAt": "2020-02-25T10:06:10Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -238,11 +240,40 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes can not be null\");\n-        for (Class<?> clazz : classes) {\n+        checkNotNull(classes, \"Classes cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjUxNzg2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxNjo1MlrOFuAS1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxNjo1MlrOFuAS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4MzYzOA==", "bodyText": "The when_<PRECONDITION>_then_<POSTCONDITION> name pattern is more useful. This name could be when_nestedClassesOf_then_returnsAllNestedClasses.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383783638", "createdAt": "2020-02-25T10:16:52Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjUxOTQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoxNzoxOFrOFuAT1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzoyNzozN1rOFuF9xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ==", "bodyText": "This should assert that the nested class is also there.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383783895", "createdAt": "2020-02-25T10:17:18Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+        // When\n+        Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n+\n+        // Then\n+        assertThat(classes, hasSize(3));\n+        assertThat(classes, containsInAnyOrder(\n+                OuterClass.class,\n+                OuterClass.NestedClass.class,\n+                Class.forName(\"com.hazelcast.jet.impl.util.ReflectionUtilsTest$OuterClass$1\")\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldDiscoverAllClassesAndResourcesInAPackage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4ODkxNg==", "bodyText": "Then we would actually test whether JVM creates nested classes in the same package as the root class which is not really the goal here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383788916", "createdAt": "2020-02-25T10:25:49Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+        // When\n+        Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n+\n+        // Then\n+        assertThat(classes, hasSize(3));\n+        assertThat(classes, containsInAnyOrder(\n+                OuterClass.class,\n+                OuterClass.NestedClass.class,\n+                Class.forName(\"com.hazelcast.jet.impl.util.ReflectionUtilsTest$OuterClass$1\")\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldDiscoverAllClassesAndResourcesInAPackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1NDkxMA==", "bodyText": "It definitely is in the same package, and if it's not included, then addPackages is broken, going back to the place we were before this PR.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383854910", "createdAt": "2020-02-25T12:43:22Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+        // When\n+        Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n+\n+        // Then\n+        assertThat(classes, hasSize(3));\n+        assertThat(classes, containsInAnyOrder(\n+                OuterClass.class,\n+                OuterClass.NestedClass.class,\n+                Class.forName(\"com.hazelcast.jet.impl.util.ReflectionUtilsTest$OuterClass$1\")\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldDiscoverAllClassesAndResourcesInAPackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1ODE2MQ==", "bodyText": "What I mean is - there are many more classes in this package, the nested class is just one of them, in the context of this test nested class is no different from the regular class, I guess to properly test it I should create a separate package with known classes in it and ensure all of them are listed, I was thinking about it but then didn't like the idea of creating yet another package... WDYT?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383858161", "createdAt": "2020-02-25T12:50:28Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+        // When\n+        Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n+\n+        // Then\n+        assertThat(classes, hasSize(3));\n+        assertThat(classes, containsInAnyOrder(\n+                OuterClass.class,\n+                OuterClass.NestedClass.class,\n+                Class.forName(\"com.hazelcast.jet.impl.util.ReflectionUtilsTest$OuterClass$1\")\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldDiscoverAllClassesAndResourcesInAPackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjU0OQ==", "bodyText": "My thinking was explicitly look for the nested classes that you already look for in addClass.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383876549", "createdAt": "2020-02-25T13:27:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+        // When\n+        Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n+\n+        // Then\n+        assertThat(classes, hasSize(3));\n+        assertThat(classes, containsInAnyOrder(\n+                OuterClass.class,\n+                OuterClass.NestedClass.class,\n+                Class.forName(\"com.hazelcast.jet.impl.util.ReflectionUtilsTest$OuterClass$1\")\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldDiscoverAllClassesAndResourcesInAPackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, "originalCommit": {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4966, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}