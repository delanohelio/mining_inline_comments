{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjAzMzU4", "number": 2170, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNjoxMFrODyA2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1MTowNVrODyZ0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY5MzYwOnYy", "diffSide": "LEFT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJetInstance.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNjoxMFrOGFzyeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1NDoyMlrOGGY_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDU2OA==", "bodyText": "this does some other logic like removing listeners, this will be done automatically when client shutdowns I assume?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2170#discussion_r408744568", "createdAt": "2020-04-15T10:36:10Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJetInstance.java", "diffHunk": "@@ -170,7 +170,6 @@ public JetCacheManager getCacheManager() {\n \n     @Override\n     public void shutdown() {\n-        observables.values().forEach(Observable::destroy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc03ecb5b7dfcdba95097269031340d8ede3d2f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMTk4Mw==", "bodyText": "No, listeners aren't killed on JetInstance.shutdown() now either, but indeed, they should be. Then the behaviour would be more consistent with what getObservables() is supposed to achieve too. I'll revisit this whole thing again and take care of the listeners.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2170#discussion_r408811983", "createdAt": "2020-04-15T12:43:38Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJetInstance.java", "diffHunk": "@@ -170,7 +170,6 @@ public JetCacheManager getCacheManager() {\n \n     @Override\n     public void shutdown() {\n-        observables.values().forEach(Observable::destroy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDU2OA=="}, "originalCommit": {"oid": "abc03ecb5b7dfcdba95097269031340d8ede3d2f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NDAzOA==", "bodyText": "You were right, listeners (even though they are local to the client) get killed on JetInstance shutdown (regardless if it's a client or a member), because they get a client/instance inactive exception and cancel themselves because of it.\nHave added a test for this.\nInitial change is enough, we don't need to do more.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2170#discussion_r409354038", "createdAt": "2020-04-16T07:54:22Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJetInstance.java", "diffHunk": "@@ -170,7 +170,6 @@ public JetCacheManager getCacheManager() {\n \n     @Override\n     public void shutdown() {\n-        observables.values().forEach(Observable::destroy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDU2OA=="}, "originalCommit": {"oid": "abc03ecb5b7dfcdba95097269031340d8ede3d2f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY3NzA5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableShutdownTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyNDoxNFrOGGaG_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyNDoxNFrOGGaG_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MjQxMg==", "bodyText": "why not use JetTestSupport ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2170#discussion_r409372412", "createdAt": "2020-04-16T08:24:14Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableShutdownTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.JetTestInstanceFactory;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.pipeline.test.SimpleEvent;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.core.JetTestSupport.assertJobStatusEventually;\n+import static com.hazelcast.test.HazelcastTestSupport.assertTrueEventually;\n+import static com.hazelcast.test.HazelcastTestSupport.spawn;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class ObservableShutdownTest {\n+\n+    private static final int MEMBER_COUNT = 3;\n+\n+    private JetTestInstanceFactory factory;\n+\n+    private JetInstance[] members;\n+    private JetInstance client;\n+\n+    private Observable<Long> memberObservable;\n+    private Observable<Long> clientObservable;\n+\n+    private TestObserver memberObserver;\n+    private TestObserver clientObserver;\n+\n+    @Before\n+    public void before() {\n+        factory = new JetTestInstanceFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd53557685e205b9cab963f22df78aa94bb05fc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTc4MzQ0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableShutdownTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1MDo0M1rOGGbJ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1MDo0M1rOGGbJ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTU1Mg==", "bodyText": "can we have a more descriptive test name.. when_then etc", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2170#discussion_r409389552", "createdAt": "2020-04-16T08:50:43Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableShutdownTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.pipeline.test.SimpleEvent;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class ObservableShutdownTest extends JetTestSupport {\n+\n+    private static final int MEMBER_COUNT = 3;\n+\n+    private JetInstance[] members;\n+    private JetInstance client;\n+\n+    private Observable<Long> memberObservable;\n+    private Observable<Long> clientObservable;\n+\n+    private TestObserver memberObserver;\n+    private TestObserver clientObserver;\n+\n+    @Before\n+    public void before() {\n+        members = createJetMembers(MEMBER_COUNT);\n+        client = createJetClient();\n+\n+        memberObserver = new TestObserver();\n+        memberObservable = members[members.length - 1].newObservable();\n+        memberObservable.addObserver(memberObserver);\n+\n+        clientObserver = new TestObserver();\n+        clientObservable = client.newObservable();\n+        clientObservable.addObserver(clientObserver);\n+    }\n+\n+    @Test\n+    public void cleanup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4624d3199526e0318a8de6afa2a805fab4732a62"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTc4NDYzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableShutdownTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1MTowNVrOGGbKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1MTowNVrOGGbKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTc1Nw==", "bodyText": "you can mark this to be used with ParallelRunner (although there is only one test currently, there are other benefits to using the HZ runner)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2170#discussion_r409389757", "createdAt": "2020-04-16T08:51:05Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableShutdownTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.pipeline.test.SimpleEvent;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class ObservableShutdownTest extends JetTestSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4624d3199526e0318a8de6afa2a805fab4732a62"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4807, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}