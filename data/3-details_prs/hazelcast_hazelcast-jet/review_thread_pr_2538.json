{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjc2MzAy", "number": 2538, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMjoxMVrOElt7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMjoxMVrOElt7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg1MzM4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/StreamSourceStageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMjoxMlrOHVWICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMjoxMlrOHVWICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0NDY1MA==", "bodyText": "This is time-sensitive. If it takes 5 secs to submit the job, this assert can fail.\nWe can instead start measuring before submitting the job and we can safely check that more than 15 seconds passed before the first event appeared.\nlong start = System.nanoTime();\nnewJob(p);\nassertTrueEventually( /* one item in sinkList */);\nassertTrue(System.nanoTime() - start > 15 seconds);", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2538#discussion_r492144650", "createdAt": "2020-09-21T15:22:12Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/StreamSourceStageTest.java", "diffHunk": "@@ -165,6 +167,29 @@ public void when_sparseItemsWithIngestionTimestamps_then_noExtraLatency() {\n         job.cancel();\n     }\n \n+    @Test\n+    @Category(NightlyTest.class)\n+    public void when_sparseItemsWithIngestionTimestamps_then_windowIsNotEmittedTooEarly() {\n+        IList<WindowResult<Long>> sinkList = instance.getList(randomMapName());\n+        IMap<Integer, Integer> map = instance.getMap(randomMapName());\n+\n+        Pipeline p = Pipeline.create();\n+        p.readFrom(Sources.mapJournal(map, START_FROM_OLDEST))\n+         .withIngestionTimestamps()\n+         .window(WindowDefinition.session(15_000))\n+         .aggregate(AggregateOperations.counting())\n+         .writeTo(Sinks.list(sinkList));\n+\n+        Job job = instance.newJob(p);\n+        assertEquals(0, sinkList.size());\n+        map.put(5, 5);\n+\n+        assertTrueAllTheTime(() -> assertEquals(0, sinkList.size()), 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b3c855dceff82cc8b652a8c0da08777d8295c9"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4578, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}