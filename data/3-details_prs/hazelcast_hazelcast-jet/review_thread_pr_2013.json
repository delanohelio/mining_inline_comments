{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTIzMDU4", "number": 2013, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMToyNVrODjbF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMjo0OVrODjbHwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcwNjQzOnYy", "diffSide": "LEFT", "path": "examples/early-window-results/src/main/java/com/hazelcast/jet/examples/earlyresults/TradingVolumeOverTime.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMToyNVrOFvOQeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0ODo1OFrOFvPSOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MDk4Ng==", "bodyText": "Is the change in the logic intended ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2013#discussion_r385060986", "createdAt": "2020-02-27T11:11:25Z", "author": {"login": "eminn"}, "path": "examples/early-window-results/src/main/java/com/hazelcast/jet/examples/earlyresults/TradingVolumeOverTime.java", "diffHunk": "@@ -53,17 +53,18 @@\n \n     private static final String VOLUME_LIST_NAME = \"trading-volume\";\n     private static final int TRADES_PER_SEC = 3_000;\n+    private static final int MAX_LAG = 5000;\n     private static final int DURATION_SECONDS = 60;\n \n     private static Pipeline buildPipeline() {\n         Pipeline p = Pipeline.create();\n-        p.readFrom(TradeGenerator.tradeSource(TRADES_PER_SEC, DURATION_SECONDS))\n-         .withNativeTimestamps(TradeGenerator.MAX_LAG)\n+        p.readFrom(TradeGenerator.tradeSource(1, TRADES_PER_SEC, MAX_LAG, DURATION_SECONDS))\n+         .withNativeTimestamps(MAX_LAG)\n          .window(tumbling(SECONDS.toMillis(2))\n                  // comment out this line to see how the chart behaves without early results:\n                  .setEarlyResultsPeriod(20)\n          )\n-         .aggregate(summingLong(trade -> trade.getQuantity() * trade.getPrice()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6dce0165ee8183739751557ea225368f8710a82"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NzgxOA==", "bodyText": "Yes. Since the original TradeGenerators emitted different kinds of trades I had to modify the examples to show the same TYPE of behaviour as before, even when moved to the new, common generator.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2013#discussion_r385077818", "createdAt": "2020-02-27T11:48:58Z", "author": {"login": "jbartok"}, "path": "examples/early-window-results/src/main/java/com/hazelcast/jet/examples/earlyresults/TradingVolumeOverTime.java", "diffHunk": "@@ -53,17 +53,18 @@\n \n     private static final String VOLUME_LIST_NAME = \"trading-volume\";\n     private static final int TRADES_PER_SEC = 3_000;\n+    private static final int MAX_LAG = 5000;\n     private static final int DURATION_SECONDS = 60;\n \n     private static Pipeline buildPipeline() {\n         Pipeline p = Pipeline.create();\n-        p.readFrom(TradeGenerator.tradeSource(TRADES_PER_SEC, DURATION_SECONDS))\n-         .withNativeTimestamps(TradeGenerator.MAX_LAG)\n+        p.readFrom(TradeGenerator.tradeSource(1, TRADES_PER_SEC, MAX_LAG, DURATION_SECONDS))\n+         .withNativeTimestamps(MAX_LAG)\n          .window(tumbling(SECONDS.toMillis(2))\n                  // comment out this line to see how the chart behaves without early results:\n                  .setEarlyResultsPeriod(20)\n          )\n-         .aggregate(summingLong(trade -> trade.getQuantity() * trade.getPrice()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MDk4Ng=="}, "originalCommit": {"oid": "c6dce0165ee8183739751557ea225368f8710a82"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcxMTA1OnYy", "diffSide": "RIGHT", "path": "examples/rolling-aggregation/src/main/java/com/hazelcast/jet/examples/rollingaggregation/TradingVolume.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMjo0OVrOFvOTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0OTo1OFrOFvPTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MTY5Mg==", "bodyText": "same here ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2013#discussion_r385061692", "createdAt": "2020-02-27T11:12:49Z", "author": {"login": "eminn"}, "path": "examples/rolling-aggregation/src/main/java/com/hazelcast/jet/examples/rollingaggregation/TradingVolume.java", "diffHunk": "@@ -18,34 +18,36 @@\n \n import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.examples.tradesource.Trade;\n import com.hazelcast.jet.pipeline.Pipeline;\n import com.hazelcast.jet.pipeline.Sinks;\n \n import static com.hazelcast.jet.aggregate.AggregateOperations.summingLong;\n-import static com.hazelcast.jet.examples.rollingaggregation.TradeGenerator.tradeSource;\n+import static com.hazelcast.jet.examples.tradesource.TradeGenerator.tradeSource;\n \n /**\n  * Showcases the Rolling Aggregation operator of the Pipeline API.\n  * <p>\n  * The sample Jet pipeline uses a mock data source that generates random\n  * trade events. It calculates for each stock the rolling sum of the amount\n- * of money that changed hands trading it (i.e., the current traded volume\n+ * of stock that changed hands trading it (i.e., the current traded volume\n  * on that stock). The sample also starts a GUI window that visualizes the\n  * rising traded volume of all stocks.\n  */\n public class TradingVolume {\n \n     private static final String VOLUME_MAP_NAME = \"volume-by-stock\";\n     private static final int TRADES_PER_SEC = 3_000;\n+    private static final int MAX_LAG = 1000;\n     private static final int NUMBER_OF_TICKERS = 20;\n     private static final int DURATION_SECONDS = 60;\n \n     private static Pipeline buildPipeline() {\n         Pipeline p = Pipeline.create();\n-        p.readFrom(tradeSource(NUMBER_OF_TICKERS, TRADES_PER_SEC, DURATION_SECONDS))\n+        p.readFrom(tradeSource(NUMBER_OF_TICKERS, TRADES_PER_SEC, MAX_LAG, DURATION_SECONDS))\n          .withoutTimestamps()\n          .groupingKey(Trade::getTicker)\n-         .rollingAggregate(summingLong(Trade::getPrice))\n+         .rollingAggregate(summingLong(Trade::getQuantity))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6dce0165ee8183739751557ea225368f8710a82"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3ODE5Ng==", "bodyText": "Yes, same. Change done to preserve overall behaviour and GUI looks.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2013#discussion_r385078196", "createdAt": "2020-02-27T11:49:58Z", "author": {"login": "jbartok"}, "path": "examples/rolling-aggregation/src/main/java/com/hazelcast/jet/examples/rollingaggregation/TradingVolume.java", "diffHunk": "@@ -18,34 +18,36 @@\n \n import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.examples.tradesource.Trade;\n import com.hazelcast.jet.pipeline.Pipeline;\n import com.hazelcast.jet.pipeline.Sinks;\n \n import static com.hazelcast.jet.aggregate.AggregateOperations.summingLong;\n-import static com.hazelcast.jet.examples.rollingaggregation.TradeGenerator.tradeSource;\n+import static com.hazelcast.jet.examples.tradesource.TradeGenerator.tradeSource;\n \n /**\n  * Showcases the Rolling Aggregation operator of the Pipeline API.\n  * <p>\n  * The sample Jet pipeline uses a mock data source that generates random\n  * trade events. It calculates for each stock the rolling sum of the amount\n- * of money that changed hands trading it (i.e., the current traded volume\n+ * of stock that changed hands trading it (i.e., the current traded volume\n  * on that stock). The sample also starts a GUI window that visualizes the\n  * rising traded volume of all stocks.\n  */\n public class TradingVolume {\n \n     private static final String VOLUME_MAP_NAME = \"volume-by-stock\";\n     private static final int TRADES_PER_SEC = 3_000;\n+    private static final int MAX_LAG = 1000;\n     private static final int NUMBER_OF_TICKERS = 20;\n     private static final int DURATION_SECONDS = 60;\n \n     private static Pipeline buildPipeline() {\n         Pipeline p = Pipeline.create();\n-        p.readFrom(tradeSource(NUMBER_OF_TICKERS, TRADES_PER_SEC, DURATION_SECONDS))\n+        p.readFrom(tradeSource(NUMBER_OF_TICKERS, TRADES_PER_SEC, MAX_LAG, DURATION_SECONDS))\n          .withoutTimestamps()\n          .groupingKey(Trade::getTicker)\n-         .rollingAggregate(summingLong(Trade::getPrice))\n+         .rollingAggregate(summingLong(Trade::getQuantity))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MTY5Mg=="}, "originalCommit": {"oid": "c6dce0165ee8183739751557ea225368f8710a82"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4882, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}