{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDIxMDEw", "number": 2030, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNzoxOVrODj1YJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozODoyNVrODj1ZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxMjg2OnYy", "diffSide": "RIGHT", "path": "examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNzoxOVrOFv3DJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNzoxOVrOFv3DJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTMxOQ==", "bodyText": "Is there any await() available? Forced sleeps don't provide best experience.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2030#discussion_r385729319", "createdAt": "2020-02-28T14:37:19Z", "author": {"login": "gierlachg"}, "path": "examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java", "diffHunk": "@@ -72,18 +72,19 @@ public static void main(String[] args) throws Exception {\n     /**\n      * This code illustrates a few more things about Jet, new in 0.5. See comments.\n      */\n-    private void go() {\n+    private void go() throws InterruptedException {\n         try {\n             setup();\n-            System.out.print(\"\\nCounting words... \");\n+            System.out.println(\"\\nCounting words... \");\n             long start = System.nanoTime();\n             Pipeline p = buildPipeline();\n             Observable<Entry<String, Long>> observable = jet.getObservable(COUNTS);\n             observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)))\n                     .thenApply(WordCount::checkResults)\n                     .thenAccept(WordCount::printResults);\n             jet.newJob(p).join();\n-            System.out.print(\"done in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) + \" milliseconds.\");\n+            System.out.println(\"done in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) + \" milliseconds.\");\n+            Thread.sleep(5_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a10492703f8451fac4e2f6f21b3ae6bcf908c3b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTAxNjM2OnYy", "diffSide": "RIGHT", "path": "examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozODoyNVrOFv3FSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozODoyNVrOFv3FSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTg2NA==", "bodyText": "it would be better to take the future, and then just print the values, rather than calling thenAccept\nyou can just do\nFuture f = observable.toFuture(..);\n..\njet.submitJob(..)\n..\nMap<> results = f.get()\ncheckResults(results);\nprintResults(results);", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2030#discussion_r385729864", "createdAt": "2020-02-28T14:38:25Z", "author": {"login": "cangencer"}, "path": "examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java", "diffHunk": "@@ -72,18 +72,19 @@ public static void main(String[] args) throws Exception {\n     /**\n      * This code illustrates a few more things about Jet, new in 0.5. See comments.\n      */\n-    private void go() {\n+    private void go() throws InterruptedException {\n         try {\n             setup();\n-            System.out.print(\"\\nCounting words... \");\n+            System.out.println(\"\\nCounting words... \");\n             long start = System.nanoTime();\n             Pipeline p = buildPipeline();\n             Observable<Entry<String, Long>> observable = jet.getObservable(COUNTS);\n             observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a10492703f8451fac4e2f6f21b3ae6bcf908c3b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4889, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}