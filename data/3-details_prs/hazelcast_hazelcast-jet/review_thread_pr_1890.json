{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTUyMTI5", "number": 1890, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0Mjo0MlrODbmGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0MTozNVrODbpFRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjYyNDQxOnYy", "diffSide": "RIGHT", "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0Mjo0MlrOFjK0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0Mjo0MlrOFjK0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyMTc2Mg==", "bodyText": "UTF-8 is required for JSON data, not the platform encoding.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1890#discussion_r372421762", "createdAt": "2020-01-29T14:42:42Z", "author": {"login": "viliam-durina"}, "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.files;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.stream.JsonReader;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.FileReader;\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Demonstrates the usage of the file {@link Sources#filesBuilder sources}\n+ * in a job that reads a sales records in a JSON file, filters possible contactless\n+ * transactions, aggregates transaction counts per payment type and prints\n+ * the results to standard output.\n+ * <p>\n+ * The sample JSON file is in {@code {module.dir}/data/sales.json}.\n+ */\n+public class SalesJsonAnalyzer {\n+\n+    private static Pipeline buildPipeline(String sourceDir) {\n+        Pipeline p = Pipeline.create();\n+\n+        BatchSource<SalesRecord> source = Sources.filesBuilder(sourceDir)\n+                                                 .glob(\"*.json\")\n+                                                 .build(path -> {\n+                                                         Gson gson = new Gson();\n+                                                         JsonReader reader = new JsonReader(new FileReader(path.toFile()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee718c260fbcce2fe192a9ee842219591631053"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzExMjM3OnYy", "diffSide": "RIGHT", "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0MTozNVrOFjPgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo1NTo0N1rOFjQAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODQzOA==", "bodyText": "do we need to close the file?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1890#discussion_r372498438", "createdAt": "2020-01-29T16:41:35Z", "author": {"login": "cangencer"}, "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.files;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.stream.JsonReader;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.lang.reflect.Type;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Demonstrates the usage of the file {@link Sources#filesBuilder sources}\n+ * in a job that reads a sales records in a JSON file, filters possible contactless\n+ * transactions, aggregates transaction counts per payment type and prints\n+ * the results to standard output.\n+ * <p>\n+ * The sample JSON file is in {@code {module.dir}/data/sales.json}.\n+ */\n+public class SalesJsonAnalyzer {\n+\n+    private static Pipeline buildPipeline(String sourceDir) {\n+        Pipeline p = Pipeline.create();\n+\n+        BatchSource<SalesRecord> source = Sources.filesBuilder(sourceDir)\n+            .glob(\"*.json\")\n+            .build(path -> readJsonArray(path, SalesRecord.class));\n+        p.readFrom(source)\n+         .filter(record -> record.getPrice() < 30)\n+         .groupingKey(SalesRecord::getPaymentType)\n+         .aggregate(AggregateOperations.counting())\n+         .writeTo(Sinks.logger());\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Read a file denoted by the given {@code filePath} that contains a single\n+     * JSON array of objects of type {@code type}. Returns the file contents as\n+     * a {@code Stream}.\n+     */\n+    private static <T> Stream<T> readJsonArray(Path filePath, Type type) throws IOException {\n+        Gson gson = new Gson();\n+        JsonReader reader = new JsonReader(Files.newBufferedReader(filePath, UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e57471928a06174b67878461ff7a7da774c6d28a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUwNjcxMw==", "bodyText": "Good point, fixed", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1890#discussion_r372506713", "createdAt": "2020-01-29T16:55:47Z", "author": {"login": "viliam-durina"}, "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.files;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.stream.JsonReader;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.lang.reflect.Type;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Demonstrates the usage of the file {@link Sources#filesBuilder sources}\n+ * in a job that reads a sales records in a JSON file, filters possible contactless\n+ * transactions, aggregates transaction counts per payment type and prints\n+ * the results to standard output.\n+ * <p>\n+ * The sample JSON file is in {@code {module.dir}/data/sales.json}.\n+ */\n+public class SalesJsonAnalyzer {\n+\n+    private static Pipeline buildPipeline(String sourceDir) {\n+        Pipeline p = Pipeline.create();\n+\n+        BatchSource<SalesRecord> source = Sources.filesBuilder(sourceDir)\n+            .glob(\"*.json\")\n+            .build(path -> readJsonArray(path, SalesRecord.class));\n+        p.readFrom(source)\n+         .filter(record -> record.getPrice() < 30)\n+         .groupingKey(SalesRecord::getPaymentType)\n+         .aggregate(AggregateOperations.counting())\n+         .writeTo(Sinks.logger());\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Read a file denoted by the given {@code filePath} that contains a single\n+     * JSON array of objects of type {@code type}. Returns the file contents as\n+     * a {@code Stream}.\n+     */\n+    private static <T> Stream<T> readJsonArray(Path filePath, Type type) throws IOException {\n+        Gson gson = new Gson();\n+        JsonReader reader = new JsonReader(Files.newBufferedReader(filePath, UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODQzOA=="}, "originalCommit": {"oid": "e57471928a06174b67878461ff7a7da774c6d28a"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4949, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}