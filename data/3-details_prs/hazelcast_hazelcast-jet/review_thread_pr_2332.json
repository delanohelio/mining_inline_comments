{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTA0NzMz", "number": 2332, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo1MDozM1rOEGaSrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo1MDozM1rOEGaSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTU3Njc4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AbstractUpdateMapP.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo1MDozM1rOGlMK9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyNDoxM1rOGlk2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0OTkwOQ==", "bodyText": "this will decrease performance for existing UpdateMapP, we should only do this for the CDCSink.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2332#discussion_r441649909", "createdAt": "2020-06-17T15:50:33Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AbstractUpdateMapP.java", "diffHunk": "@@ -54,6 +55,15 @@\n  */\n public abstract class AbstractUpdateMapP<T, K, V> extends AsyncHazelcastWriterP {\n \n+    /**\n+     * This processor uses {@link IMap#submitToKeys(Set, EntryProcessor)}, which\n+     * if used from multiple parallel async operations can end up reordering\n+     * the changes done to the map and this in turn can result in unforseen\n+     * consequences. For this reason we need to limit ourselves to a single\n+     * in-flight operation at a time.\n+     */\n+    private static final int MAX_PARALLEL_ASYNC_OPS = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36cf878e7bd042a8fe861eec6fa68950370a055e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMjI2Nw==", "bodyText": "Ok, I can change that, but aren't  we worried about correctness in that processor too?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2332#discussion_r442022267", "createdAt": "2020-06-18T07:27:50Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AbstractUpdateMapP.java", "diffHunk": "@@ -54,6 +55,15 @@\n  */\n public abstract class AbstractUpdateMapP<T, K, V> extends AsyncHazelcastWriterP {\n \n+    /**\n+     * This processor uses {@link IMap#submitToKeys(Set, EntryProcessor)}, which\n+     * if used from multiple parallel async operations can end up reordering\n+     * the changes done to the map and this in turn can result in unforseen\n+     * consequences. For this reason we need to limit ourselves to a single\n+     * in-flight operation at a time.\n+     */\n+    private static final int MAX_PARALLEL_ASYNC_OPS = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0OTkwOQ=="}, "originalCommit": {"oid": "36cf878e7bd042a8fe861eec6fa68950370a055e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NDIyOQ==", "bodyText": "The other processor doesn't expect ordered items, so it's fine to keep as it is.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2332#discussion_r442054229", "createdAt": "2020-06-18T08:24:13Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AbstractUpdateMapP.java", "diffHunk": "@@ -54,6 +55,15 @@\n  */\n public abstract class AbstractUpdateMapP<T, K, V> extends AsyncHazelcastWriterP {\n \n+    /**\n+     * This processor uses {@link IMap#submitToKeys(Set, EntryProcessor)}, which\n+     * if used from multiple parallel async operations can end up reordering\n+     * the changes done to the map and this in turn can result in unforseen\n+     * consequences. For this reason we need to limit ourselves to a single\n+     * in-flight operation at a time.\n+     */\n+    private static final int MAX_PARALLEL_ASYNC_OPS = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0OTkwOQ=="}, "originalCommit": {"oid": "36cf878e7bd042a8fe861eec6fa68950370a055e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4618, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}