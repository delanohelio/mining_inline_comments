{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzY0ODIx", "number": 2272, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxNzoxNFrOD_iPqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoyMzoxNFrOEC9Cxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ3OTQ2OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/jdk-gc-choice.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxNzoxNFrOGaP-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxNzoxNFrOGaP-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3Nzk0Nw==", "bodyText": "\"to THE test\" maybe?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r430177947", "createdAt": "2020-05-26T06:17:14Z", "author": {"login": "jbartok"}, "path": "site/docs/operations/jdk-gc-choice.md", "diffHunk": "@@ -0,0 +1,68 @@\n+---\n+title: Choice of JDK and GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+The Java runtime has been evolving more rapidly in recent years and,\n+after two decades, we finally got a new default garbage collector: the\n+G1. Two more GCs are on their way to production and are available as\n+experimental features: Oracle's Z and OpenJDK's Shenandoah. We at\n+Hazelcast thought it was time to put all these new options to test and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f19970a9f633f9850a46c83b0c6595c81f7d4e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ4NDI3OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/jdk-gc-choice.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxOToyNlrOGaQBpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxOToyNlrOGaQBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODcyNA==", "bodyText": "\"A monster of a collector\" maybe?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r430178724", "createdAt": "2020-05-26T06:19:26Z", "author": {"login": "jbartok"}, "path": "site/docs/operations/jdk-gc-choice.md", "diffHunk": "@@ -0,0 +1,68 @@\n+---\n+title: Choice of JDK and GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+The Java runtime has been evolving more rapidly in recent years and,\n+after two decades, we finally got a new default garbage collector: the\n+G1. Two more GCs are on their way to production and are available as\n+experimental features: Oracle's Z and OpenJDK's Shenandoah. We at\n+Hazelcast thought it was time to put all these new options to test and\n+find which choices work well with distributed stream processing in\n+Hazelcast Jet.\n+\n+Jet is being used for a broad spectrum of use cases, with different\n+latency and throughput requirements. Here are three important\n+categories:\n+\n+1. Low-latency unbounded stream processing, with moderate state. Example:\n+  detecting trends in 500 Hz sensor data from 100,000 devices, and\n+  sending corrective feedback within 10-20 milliseconds.\n+2. High-throughput, large-state unbounded stream processing. Example:\n+  tracking GPS locations of millions of users, inferring their velocity\n+  vectors.\n+3. Old-school batch processing of big data volumes. The relevant measure\n+  is time to complete, which implies a high throughput demand. Example:\n+  analyzing a day's worth of stock trading data to update the risk\n+  exposure of a given portfolio.\n+\n+At the outset, we can observe the following:\n+\n+- in scenario 1 the latency requirements enter the danger zone of GC\n+  pauses: 100 milliseconds, something traditionally considered as an\n+  excellent result for a worst-case GC pause, may be a showstopper for\n+  many use cases\n+- scenarios 2 and 3 are similar in terms of demands on the garbage\n+  collector. Less strict latency, but large pressure on the tenured\n+  generation\n+- scenario 2 is tougher because latency, even if less so than in\n+  scenario 1, is still relevant\n+\n+We tried the following combinations:\n+\n+1. JDK 8 with the default Parallel collector and the optional G1\n+2. JDK 11 with the default G1 collector\n+3. JDK 14 with the default G1 as well as the experimental Z and\n+  Shenandoah\n+\n+And here are our overall conclusions:\n+\n+1. JDK 8 is an antiquated runtime. The Parallel collector enters huge\n+   Major GC pauses and the G1, although better than that, is stuck in an\n+   old version that uses just one thread when falling back to Full GC,\n+   again entering very long pauses. Even on a moderate heap of 12 GB,\n+   the pauses were exceeding 20 seconds.\n+2. On more modern JDK versions, the G1 is one monster of a collector. It", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f19970a9f633f9850a46c83b0c6595c81f7d4e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ5NjA2OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/jdk-gc-choice.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNDoyMVrOGaQIzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNDoyMVrOGaQIzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MDU1Nw==", "bodyText": "Very nice, clean and concise, but maybe would be good to have a \"where to go next\" for some details for people who are interested. Anybody who finds any of your conclusions odd or doesn't agree with something has no way to \"dig deeper\" to see that you are actually right. Ie all the work and thoroughness you've put into these clean conclusions doesn't show. I know the conclusions are solid, because I've seen what's behind them, but simple readers won't.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r430180557", "createdAt": "2020-05-26T06:24:21Z", "author": {"login": "jbartok"}, "path": "site/docs/operations/jdk-gc-choice.md", "diffHunk": "@@ -0,0 +1,68 @@\n+---\n+title: Choice of JDK and GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+The Java runtime has been evolving more rapidly in recent years and,\n+after two decades, we finally got a new default garbage collector: the\n+G1. Two more GCs are on their way to production and are available as\n+experimental features: Oracle's Z and OpenJDK's Shenandoah. We at\n+Hazelcast thought it was time to put all these new options to test and\n+find which choices work well with distributed stream processing in\n+Hazelcast Jet.\n+\n+Jet is being used for a broad spectrum of use cases, with different\n+latency and throughput requirements. Here are three important\n+categories:\n+\n+1. Low-latency unbounded stream processing, with moderate state. Example:\n+  detecting trends in 500 Hz sensor data from 100,000 devices, and\n+  sending corrective feedback within 10-20 milliseconds.\n+2. High-throughput, large-state unbounded stream processing. Example:\n+  tracking GPS locations of millions of users, inferring their velocity\n+  vectors.\n+3. Old-school batch processing of big data volumes. The relevant measure\n+  is time to complete, which implies a high throughput demand. Example:\n+  analyzing a day's worth of stock trading data to update the risk\n+  exposure of a given portfolio.\n+\n+At the outset, we can observe the following:\n+\n+- in scenario 1 the latency requirements enter the danger zone of GC\n+  pauses: 100 milliseconds, something traditionally considered as an\n+  excellent result for a worst-case GC pause, may be a showstopper for\n+  many use cases\n+- scenarios 2 and 3 are similar in terms of demands on the garbage\n+  collector. Less strict latency, but large pressure on the tenured\n+  generation\n+- scenario 2 is tougher because latency, even if less so than in\n+  scenario 1, is still relevant\n+\n+We tried the following combinations:\n+\n+1. JDK 8 with the default Parallel collector and the optional G1\n+2. JDK 11 with the default G1 collector\n+3. JDK 14 with the default G1 as well as the experimental Z and\n+  Shenandoah\n+\n+And here are our overall conclusions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f19970a9f633f9850a46c83b0c6595c81f7d4e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjAzMjQ0OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/gc-related-concerns.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0NToxOVrOGbRGhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoyOTo0M1rOGbo7_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NDkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Due to the large improvements in the later versions, JDK version 8\n          \n          \n            \n            1. Due to the large improvements in the latter versions, JDK version 8", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r431244935", "createdAt": "2020-05-27T15:45:19Z", "author": {"login": "viliam-durina"}, "path": "site/docs/operations/gc-related-concerns.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+title: Concerns Related to Garbage Collection\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+## Choice of JDK and GC\n+\n+In May 2020 we did extensive testing of Hazelcast Jet with several\n+combinations of JDK and garbage collector. We tried the following JDK/GC\n+combinations:\n+\n+1. JDK 8 with the default Parallel collector and the optional\n+   ConcurrentMarkSweep and G1\n+2. JDK 11 with the default G1 collector\n+3. JDK 14 with the default G1 as well as the experimental Z and\n+  Shenandoah\n+\n+These are our key findings:\n+\n+1. Due to the large improvements in the later versions, JDK version 8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51be107651b517652cc679e078a6374472fb1aa4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4NzA2OA==", "bodyText": "\"Later\" is appropriate, \"latter\" implies a former-latter distinction which we aren't making here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r431287068", "createdAt": "2020-05-27T16:40:55Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/gc-related-concerns.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+title: Concerns Related to Garbage Collection\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+## Choice of JDK and GC\n+\n+In May 2020 we did extensive testing of Hazelcast Jet with several\n+combinations of JDK and garbage collector. We tried the following JDK/GC\n+combinations:\n+\n+1. JDK 8 with the default Parallel collector and the optional\n+   ConcurrentMarkSweep and G1\n+2. JDK 11 with the default G1 collector\n+3. JDK 14 with the default G1 as well as the experimental Z and\n+  Shenandoah\n+\n+These are our key findings:\n+\n+1. Due to the large improvements in the later versions, JDK version 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NDkzNQ=="}, "originalCommit": {"oid": "51be107651b517652cc679e078a6374472fb1aa4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMzkyOQ==", "bodyText": "I'm not sure. I thought \"latter\" here means \"recent\". See definitions 2 and 3 here. When \"later\" is used, it's later than what? Maybe it could be \"late versions\".", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r431603929", "createdAt": "2020-05-28T06:16:15Z", "author": {"login": "viliam-durina"}, "path": "site/docs/operations/gc-related-concerns.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+title: Concerns Related to Garbage Collection\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+## Choice of JDK and GC\n+\n+In May 2020 we did extensive testing of Hazelcast Jet with several\n+combinations of JDK and garbage collector. We tried the following JDK/GC\n+combinations:\n+\n+1. JDK 8 with the default Parallel collector and the optional\n+   ConcurrentMarkSweep and G1\n+2. JDK 11 with the default G1 collector\n+3. JDK 14 with the default G1 as well as the experimental Z and\n+  Shenandoah\n+\n+These are our key findings:\n+\n+1. Due to the large improvements in the later versions, JDK version 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NDkzNQ=="}, "originalCommit": {"oid": "51be107651b517652cc679e078a6374472fb1aa4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTQ1Mw==", "bodyText": "Versions later than 8. \"Latter\" could possibly still mean something, like the versions I mention above, after 8. But saying that wasn't my intention. \"Later\" conveys exactly the meaning I intended. See here for more examples.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r431635453", "createdAt": "2020-05-28T07:29:43Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/gc-related-concerns.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+title: Concerns Related to Garbage Collection\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+## Choice of JDK and GC\n+\n+In May 2020 we did extensive testing of Hazelcast Jet with several\n+combinations of JDK and garbage collector. We tried the following JDK/GC\n+combinations:\n+\n+1. JDK 8 with the default Parallel collector and the optional\n+   ConcurrentMarkSweep and G1\n+2. JDK 11 with the default G1 collector\n+3. JDK 14 with the default G1 as well as the experimental Z and\n+  Shenandoah\n+\n+These are our key findings:\n+\n+1. Due to the large improvements in the later versions, JDK version 8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NDkzNQ=="}, "originalCommit": {"oid": "51be107651b517652cc679e078a6374472fb1aa4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzgxNjgzOnYy", "diffSide": "RIGHT", "path": "site/docs/operations/gc-related-concerns.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODoyMjo0OVrOGdCj3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODoyMjo0OVrOGdCj3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMzgzNw==", "bodyText": "this will probably look a little too long on the sidebar? also having the document just named \"garbage-collection\" or \"gc\" will make a shorter, more concise url", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r433103837", "createdAt": "2020-06-01T08:22:49Z", "author": {"login": "cangencer"}, "path": "site/docs/operations/gc-related-concerns.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+title: Concerns Related to Garbage Collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5f80083c87179989178106b57090e87acc8051"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDg4MDc3OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/gc-concerns.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo1OTowOVrOGfqAJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo1OTowOVrOGfqAJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg0NzIwNw==", "bodyText": "a link to the blog posts somewhere in the article would make sense too", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r435847207", "createdAt": "2020-06-05T10:59:09Z", "author": {"login": "cangencer"}, "path": "site/docs/operations/gc-concerns.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Concerns Related to GC\n+description: Choosing the right JDK-GC combination is important.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92121960695006f2a9cbcd3a7d3e3231d5a4395c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTMyNzQyOnYy", "diffSide": "RIGHT", "path": "site/docs/operations/gc-concerns.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoyMzoxNFrOGfuRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMjo1OVrOGgcrCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNzIzNQ==", "bodyText": "Maybe we should quantify what's moderate or large state.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r435917235", "createdAt": "2020-06-05T13:23:14Z", "author": {"login": "viliam-durina"}, "path": "site/docs/operations/gc-concerns.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Concerns Related to GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+With the introduction of the modern, fast-paced JDK release schedule the\n+JVM landscape has undergone a phase change. In May 2020 we did an\n+extensive test with various combinations of old and new JDK/GC\n+combinations and we bring you the most important conclusions that should\n+impact your Hazelcast Jet setup:\n+\n+1. As far as Hazelcast Jet is concerned, JDK version 8 is an antiquated\n+   runtime and shouldn't be used. None of its garbage collectors have\n+   satisfactory performance and their long GC pauses even result in\n+   nodes being kicked out of the cluster.\n+2. JDK 11 is the current Long-Term Support (LTS) version by Oracle and\n+   it is the lowest version of JDK we recommend. We found that its\n+   version of the G1, without any fine-tuning, already delivers\n+   next-generation GC performance. The default maximum GC pause target\n+   is 200 ms, which it meets in a very broad range of scenarios. By\n+   configuring a single JVM option (`-XX:MaxGCPauseMillis`), you can\n+   confine the maximum GC pause to 20-25 ms, which it can maintain at\n+   lower GC pressure levels.\n+4. There are two more GCs that are relevant, but as of this writing are\n+   in the experimental phase. They are the low-latency collectors:\n+   Oracle's Z and OpenJDK's Shenandoah. Testing on JDK 14, we found Z to\n+   be the better of the two and a viable replacement for G1 in scenarios\n+   that have low GC pressure, but very strict GC pause requirements. Z\n+   was able to keep the maximum pause within 10 milliseconds. Since the\n+   Z is available in OpenJDK as well, we recommend it for scenarios\n+   where G1's GC pauses are too long. The version of Z in JDK 14 has\n+   crude ergonomics to decide on a good background GC thread count, in\n+   some cases you can improve the throughput by using\n+   `-XX:ConcGCThreads`.\n+\n+Here are some more details, organized by the type of workload you are\n+using Jet for.\n+\n+## Moderate State, Low-Latency Stream Processing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92121960695006f2a9cbcd3a7d3e3231d5a4395c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNzE4Ng==", "bodyText": "I think the example below, 100,000 devices, quantifies it. The large-state scenario mentions millions of users.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r436017186", "createdAt": "2020-06-05T16:01:51Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/gc-concerns.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Concerns Related to GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+With the introduction of the modern, fast-paced JDK release schedule the\n+JVM landscape has undergone a phase change. In May 2020 we did an\n+extensive test with various combinations of old and new JDK/GC\n+combinations and we bring you the most important conclusions that should\n+impact your Hazelcast Jet setup:\n+\n+1. As far as Hazelcast Jet is concerned, JDK version 8 is an antiquated\n+   runtime and shouldn't be used. None of its garbage collectors have\n+   satisfactory performance and their long GC pauses even result in\n+   nodes being kicked out of the cluster.\n+2. JDK 11 is the current Long-Term Support (LTS) version by Oracle and\n+   it is the lowest version of JDK we recommend. We found that its\n+   version of the G1, without any fine-tuning, already delivers\n+   next-generation GC performance. The default maximum GC pause target\n+   is 200 ms, which it meets in a very broad range of scenarios. By\n+   configuring a single JVM option (`-XX:MaxGCPauseMillis`), you can\n+   confine the maximum GC pause to 20-25 ms, which it can maintain at\n+   lower GC pressure levels.\n+4. There are two more GCs that are relevant, but as of this writing are\n+   in the experimental phase. They are the low-latency collectors:\n+   Oracle's Z and OpenJDK's Shenandoah. Testing on JDK 14, we found Z to\n+   be the better of the two and a viable replacement for G1 in scenarios\n+   that have low GC pressure, but very strict GC pause requirements. Z\n+   was able to keep the maximum pause within 10 milliseconds. Since the\n+   Z is available in OpenJDK as well, we recommend it for scenarios\n+   where G1's GC pauses are too long. The version of Z in JDK 14 has\n+   crude ergonomics to decide on a good background GC thread count, in\n+   some cases you can improve the throughput by using\n+   `-XX:ConcGCThreads`.\n+\n+Here are some more details, organized by the type of workload you are\n+using Jet for.\n+\n+## Moderate State, Low-Latency Stream Processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNzIzNQ=="}, "originalCommit": {"oid": "92121960695006f2a9cbcd3a7d3e3231d5a4395c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5OTIyMQ==", "bodyText": "It's much easier to quantify in GBs of heap data. I tried to calculate the state size for your example and there's a missing piece: the window size and lag. I guess it's a window of N seconds, sliding by 10-20ms and 100k keys. The 500Hz is irrelevant, it doesn't increase the state size. So if I assume 5-second lag and 5-second window and 32 bytes per entry, the formula is 100,000 * 1000/15 * 10 * 32, so the state is 2GB, which is moderate. But if you use 1-minute smoothing window, the state is 13GB. And both answers are correct, because the window size isn't given. Maybe I also misestimated the per-element state: if you use string-encoded UUID for device ID, it will be much more...\nWhat I think most people would do is to run jvisualvm, do a GC and see how much heap they need.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r436499221", "createdAt": "2020-06-08T07:19:03Z", "author": {"login": "viliam-durina"}, "path": "site/docs/operations/gc-concerns.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Concerns Related to GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+With the introduction of the modern, fast-paced JDK release schedule the\n+JVM landscape has undergone a phase change. In May 2020 we did an\n+extensive test with various combinations of old and new JDK/GC\n+combinations and we bring you the most important conclusions that should\n+impact your Hazelcast Jet setup:\n+\n+1. As far as Hazelcast Jet is concerned, JDK version 8 is an antiquated\n+   runtime and shouldn't be used. None of its garbage collectors have\n+   satisfactory performance and their long GC pauses even result in\n+   nodes being kicked out of the cluster.\n+2. JDK 11 is the current Long-Term Support (LTS) version by Oracle and\n+   it is the lowest version of JDK we recommend. We found that its\n+   version of the G1, without any fine-tuning, already delivers\n+   next-generation GC performance. The default maximum GC pause target\n+   is 200 ms, which it meets in a very broad range of scenarios. By\n+   configuring a single JVM option (`-XX:MaxGCPauseMillis`), you can\n+   confine the maximum GC pause to 20-25 ms, which it can maintain at\n+   lower GC pressure levels.\n+4. There are two more GCs that are relevant, but as of this writing are\n+   in the experimental phase. They are the low-latency collectors:\n+   Oracle's Z and OpenJDK's Shenandoah. Testing on JDK 14, we found Z to\n+   be the better of the two and a viable replacement for G1 in scenarios\n+   that have low GC pressure, but very strict GC pause requirements. Z\n+   was able to keep the maximum pause within 10 milliseconds. Since the\n+   Z is available in OpenJDK as well, we recommend it for scenarios\n+   where G1's GC pauses are too long. The version of Z in JDK 14 has\n+   crude ergonomics to decide on a good background GC thread count, in\n+   some cases you can improve the throughput by using\n+   `-XX:ConcGCThreads`.\n+\n+Here are some more details, organized by the type of workload you are\n+using Jet for.\n+\n+## Moderate State, Low-Latency Stream Processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNzIzNQ=="}, "originalCommit": {"oid": "92121960695006f2a9cbcd3a7d3e3231d5a4395c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2ODgwOQ==", "bodyText": "GB is not a good quantification either because these costs scale with object count and not size. If you have GBs of large strings, it will slow down the GC about the same as MBs of small objects.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r436568809", "createdAt": "2020-06-08T09:31:15Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/gc-concerns.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Concerns Related to GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+With the introduction of the modern, fast-paced JDK release schedule the\n+JVM landscape has undergone a phase change. In May 2020 we did an\n+extensive test with various combinations of old and new JDK/GC\n+combinations and we bring you the most important conclusions that should\n+impact your Hazelcast Jet setup:\n+\n+1. As far as Hazelcast Jet is concerned, JDK version 8 is an antiquated\n+   runtime and shouldn't be used. None of its garbage collectors have\n+   satisfactory performance and their long GC pauses even result in\n+   nodes being kicked out of the cluster.\n+2. JDK 11 is the current Long-Term Support (LTS) version by Oracle and\n+   it is the lowest version of JDK we recommend. We found that its\n+   version of the G1, without any fine-tuning, already delivers\n+   next-generation GC performance. The default maximum GC pause target\n+   is 200 ms, which it meets in a very broad range of scenarios. By\n+   configuring a single JVM option (`-XX:MaxGCPauseMillis`), you can\n+   confine the maximum GC pause to 20-25 ms, which it can maintain at\n+   lower GC pressure levels.\n+4. There are two more GCs that are relevant, but as of this writing are\n+   in the experimental phase. They are the low-latency collectors:\n+   Oracle's Z and OpenJDK's Shenandoah. Testing on JDK 14, we found Z to\n+   be the better of the two and a viable replacement for G1 in scenarios\n+   that have low GC pressure, but very strict GC pause requirements. Z\n+   was able to keep the maximum pause within 10 milliseconds. Since the\n+   Z is available in OpenJDK as well, we recommend it for scenarios\n+   where G1's GC pauses are too long. The version of Z in JDK 14 has\n+   crude ergonomics to decide on a good background GC thread count, in\n+   some cases you can improve the throughput by using\n+   `-XX:ConcGCThreads`.\n+\n+Here are some more details, organized by the type of workload you are\n+using Jet for.\n+\n+## Moderate State, Low-Latency Stream Processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNzIzNQ=="}, "originalCommit": {"oid": "92121960695006f2a9cbcd3a7d3e3231d5a4395c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NzM4Ng==", "bodyText": "Still it gives a better idea IMO. Ppl have no idea how much memory or how many objects are needed for \"100,000 devices at 500Hz\".", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2272#discussion_r436677386", "createdAt": "2020-06-08T13:02:59Z", "author": {"login": "viliam-durina"}, "path": "site/docs/operations/gc-concerns.md", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: Concerns Related to GC\n+description: Choosing the right JDK-GC combination is important.\n+---\n+\n+With the introduction of the modern, fast-paced JDK release schedule the\n+JVM landscape has undergone a phase change. In May 2020 we did an\n+extensive test with various combinations of old and new JDK/GC\n+combinations and we bring you the most important conclusions that should\n+impact your Hazelcast Jet setup:\n+\n+1. As far as Hazelcast Jet is concerned, JDK version 8 is an antiquated\n+   runtime and shouldn't be used. None of its garbage collectors have\n+   satisfactory performance and their long GC pauses even result in\n+   nodes being kicked out of the cluster.\n+2. JDK 11 is the current Long-Term Support (LTS) version by Oracle and\n+   it is the lowest version of JDK we recommend. We found that its\n+   version of the G1, without any fine-tuning, already delivers\n+   next-generation GC performance. The default maximum GC pause target\n+   is 200 ms, which it meets in a very broad range of scenarios. By\n+   configuring a single JVM option (`-XX:MaxGCPauseMillis`), you can\n+   confine the maximum GC pause to 20-25 ms, which it can maintain at\n+   lower GC pressure levels.\n+4. There are two more GCs that are relevant, but as of this writing are\n+   in the experimental phase. They are the low-latency collectors:\n+   Oracle's Z and OpenJDK's Shenandoah. Testing on JDK 14, we found Z to\n+   be the better of the two and a viable replacement for G1 in scenarios\n+   that have low GC pressure, but very strict GC pause requirements. Z\n+   was able to keep the maximum pause within 10 milliseconds. Since the\n+   Z is available in OpenJDK as well, we recommend it for scenarios\n+   where G1's GC pauses are too long. The version of Z in JDK 14 has\n+   crude ergonomics to decide on a good background GC thread count, in\n+   some cases you can improve the throughput by using\n+   `-XX:ConcGCThreads`.\n+\n+Here are some more details, organized by the type of workload you are\n+using Jet for.\n+\n+## Moderate State, Low-Latency Stream Processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNzIzNQ=="}, "originalCommit": {"oid": "92121960695006f2a9cbcd3a7d3e3231d5a4395c"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4730, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}