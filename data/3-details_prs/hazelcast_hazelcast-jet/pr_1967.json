{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjAwMzE3", "number": 1967, "title": "Added a section regarding ML model prediction", "bodyText": "Add description here\nChecklist\n\n Tags Set\n Milestone Set", "createdAt": "2020-02-12T09:33:16Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967", "merged": true, "mergeCommit": {"oid": "ce97a96850e0499eb335170d6e3d371c288ee5b9"}, "closed": true, "closedAt": "2020-02-13T11:35:45Z", "author": {"login": "eminn"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDi9nuAH2gAyMzc0MjAwMzE3OmU0ZWVhMDQyYTUxMzhkYzgwYTM1ZGExNWFjNzM3NWZlOTk3ZTVlMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcD4kijgH2gAyMzc0MjAwMzE3OjFhMWFmOTQwNjgyMjUwZGU3NWRkYjEyNmQxOGZmNmM4NWNhYmIwZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e4eea042a5138dc80a35da15ac7375fe997e5e23", "committedDate": "2020-02-12T09:31:56Z", "message": "Added a section regarding ML model prediction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDczOTc0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#pullrequestreview-357473974", "createdAt": "2020-02-12T14:02:36Z", "commit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowMjozNlrOFovqcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNDo0OVrOFovvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2ODI3Mg==", "bodyText": "You can use ServiceFactories.sharedService and you won't need the withCreateServiceFn", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378268272", "createdAt": "2020-02-12T14:02:36Z", "author": {"login": "viliam-durina"}, "path": "reference-manual/src/main/java/MLModelPrediction.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+\n+import hex.genmodel.MojoModel;\n+import hex.genmodel.easy.EasyPredictModelWrapper;\n+import hex.genmodel.easy.RowData;\n+import hex.genmodel.easy.prediction.BinomialModelPrediction;;\n+\n+public class MLModelPrediction {\n+    static void s1() {\n+        //tag::s1[]\n+        String modelFileLocation = \"/path/to/gbm_model.zip\";\n+        JetInstance jet = Jet.newJetInstance();\n+\n+        JobConfig jobConfig = new JobConfig();\n+        jobConfig.setName(\"H20 Classification Example\");\n+        jobConfig.attachFile(modelFileLocation, \"gbm_mojo\");\n+        Job job = jet.newJob(buildPipeline(), jobConfig);\n+        //end::s1[]\n+    }\n+\n+    static void s2() {\n+        //tag::s2[]\n+        StreamStage<ItemToBeClassified> sourceStage = sourceStage();\n+        sourceStage.mapUsingService(ServiceFactory.withCreateContextFn(context -> {\n+            String model = context.attachedFile(\"gbm_mojo\").toString();\n+            return new EasyPredictModelWrapper(MojoModel.load(model));\n+        }).withCreateServiceFn((context, easyPredictModelWrapper) -> easyPredictModelWrapper), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2ODY2OA==", "bodyText": "Might be clearer to assign the result of attachedFile to a File and do the tostring later when using it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378268668", "createdAt": "2020-02-12T14:03:20Z", "author": {"login": "viliam-durina"}, "path": "reference-manual/src/main/java/MLModelPrediction.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+\n+import hex.genmodel.MojoModel;\n+import hex.genmodel.easy.EasyPredictModelWrapper;\n+import hex.genmodel.easy.RowData;\n+import hex.genmodel.easy.prediction.BinomialModelPrediction;;\n+\n+public class MLModelPrediction {\n+    static void s1() {\n+        //tag::s1[]\n+        String modelFileLocation = \"/path/to/gbm_model.zip\";\n+        JetInstance jet = Jet.newJetInstance();\n+\n+        JobConfig jobConfig = new JobConfig();\n+        jobConfig.setName(\"H20 Classification Example\");\n+        jobConfig.attachFile(modelFileLocation, \"gbm_mojo\");\n+        Job job = jet.newJob(buildPipeline(), jobConfig);\n+        //end::s1[]\n+    }\n+\n+    static void s2() {\n+        //tag::s2[]\n+        StreamStage<ItemToBeClassified> sourceStage = sourceStage();\n+        sourceStage.mapUsingService(ServiceFactory.withCreateContextFn(context -> {\n+            String model = context.attachedFile(\"gbm_mojo\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2OTAwOA==", "bodyText": "implement -> execute", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378269008", "createdAt": "2020-02-12T14:03:57Z", "author": {"login": "viliam-durina"}, "path": "reference-manual/src/main/asciidoc/pipeline-api/pipeline-api.adoc", "diffHunk": "@@ -422,6 +422,43 @@ include::{javasource}/BuildComputation.java[tag=s16a]\n In a similar fashion you can integrate other external systems with a\n Jet pipeline.\n \n+== Machine Learning Model Prediction\n+Usage of pre-trained Machine Learning models are common to see in the\n+pipelines as an external scoring/classification mechanisms. \n+Hazelcast Jet comes with the facility that enables uploading files or \n+directories along with the job for later retrieval in the \n+service objects. The transformation step can take advantage of having a \n+local service instance with leveraging the uploaded resources to build the \n+model serving service. This eliminates the management cost of an\n+external model serving service. Below is an example of using pre-trained\n+http://docs.h2o.ai/h2o/latest-stable/h2o-docs/productionizing.html#what-is-a-mojo[H2O MOJO file] \n+for prediction on Hazelcast Jet pipeline:  \n+\n+[source]\n+----\n+include::{javasource}/MLModelPrediction.java[tag=s1]\n+----\n+\n+After configuring the job to include the MOJO file, it can be accessed\n+in the context object passed in to the service factory via the {jet-javadoc}/core/ProcessorSupplier.Context.html#attachedFile-java.lang.String-[`attachedFile()`]\n+or {jet-javadoc}/core/ProcessorSupplier.Context.html#attachedDirectory-java.lang.String-[`attachedDirectory()`]\n+method. That method returns the file or directory locally which has been \n+uploaded on the job submission. Then, depending on the use case and\n+selection of the Machine Learning library, user needs to build the \n+service required for serving the models. \n+\n+[source]\n+----\n+include::{javasource}/MLModelPrediction.java[tag=s2]\n+----\n+\n+The service will be passed in the next stage of the transformation along \n+with the stream where you can actually invoke methods on the service to \n+implement scoring/classification. In the example above, the binomial ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2OTQ5Nw==", "bodyText": "\"an\" must not be used with plural", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378269497", "createdAt": "2020-02-12T14:04:49Z", "author": {"login": "viliam-durina"}, "path": "reference-manual/src/main/asciidoc/pipeline-api/pipeline-api.adoc", "diffHunk": "@@ -422,6 +422,43 @@ include::{javasource}/BuildComputation.java[tag=s16a]\n In a similar fashion you can integrate other external systems with a\n Jet pipeline.\n \n+== Machine Learning Model Prediction\n+Usage of pre-trained Machine Learning models are common to see in the\n+pipelines as an external scoring/classification mechanisms. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDgyMTU5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#pullrequestreview-357482159", "createdAt": "2020-02-12T14:13:20Z", "commit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDoxMzoyMFrOFowDpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDoxMzoyMFrOFowDpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3NDcyNw==", "bodyText": "We should mention that this file/directory is stored in /tmp locally.\nShould not we also mention some information about attaching big files? Even if handling big files can be from user PoV only technical detail (like that they are split into 128k chunks and store into maps) users still need some information about how many memory is needed for cluster which will be used for it (i.e. - without implementation knowledge it is not intuitive that with default Jet configuration where each map has 1 backup you actually need 3 nodes with 1GB memory to load 1GB file; I think that it can be confusing why just not only 2 nodes with 1GB memory are not enough).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378274727", "createdAt": "2020-02-12T14:13:20Z", "author": {"login": "olukas"}, "path": "reference-manual/src/main/asciidoc/pipeline-api/pipeline-api.adoc", "diffHunk": "@@ -422,6 +422,43 @@ include::{javasource}/BuildComputation.java[tag=s16a]\n In a similar fashion you can integrate other external systems with a\n Jet pipeline.\n \n+== Machine Learning Model Prediction\n+Usage of pre-trained Machine Learning models are common to see in the\n+pipelines as an external scoring/classification mechanisms. \n+Hazelcast Jet comes with the facility that enables uploading files or \n+directories along with the job for later retrieval in the \n+service objects. The transformation step can take advantage of having a \n+local service instance with leveraging the uploaded resources to build the \n+model serving service. This eliminates the management cost of an\n+external model serving service. Below is an example of using pre-trained\n+http://docs.h2o.ai/h2o/latest-stable/h2o-docs/productionizing.html#what-is-a-mojo[H2O MOJO file] \n+for prediction on Hazelcast Jet pipeline:  \n+\n+[source]\n+----\n+include::{javasource}/MLModelPrediction.java[tag=s1]\n+----\n+\n+After configuring the job to include the MOJO file, it can be accessed\n+in the context object passed in to the service factory via the {jet-javadoc}/core/ProcessorSupplier.Context.html#attachedFile-java.lang.String-[`attachedFile()`]\n+or {jet-javadoc}/core/ProcessorSupplier.Context.html#attachedDirectory-java.lang.String-[`attachedDirectory()`]\n+method. That method returns the file or directory locally which has been ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40d3e616934ad9316692c02411eb1b8b815ca036", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/40d3e616934ad9316692c02411eb1b8b815ca036", "committedDate": "2020-02-12T14:53:09Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab40ec42bd12ff8aec53e4e91ab841165421448", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3ab40ec42bd12ff8aec53e4e91ab841165421448", "committedDate": "2020-02-13T10:25:24Z", "message": "Fixed search on the Javadocs and added support for newly introduced tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55d41a1114e531d8e7206b504df32847604fc78", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e55d41a1114e531d8e7206b504df32847604fc78", "committedDate": "2020-02-13T10:26:01Z", "message": "Added implementation note regarding backing IMap for the methods which uploads job resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTEwNjQ4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#pullrequestreview-358110648", "createdAt": "2020-02-13T10:35:03Z", "commit": {"oid": "e55d41a1114e531d8e7206b504df32847604fc78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a1af940682250de75ddb126d18ff6c85cabb0e4", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1a1af940682250de75ddb126d18ff6c85cabb0e4", "committedDate": "2020-02-13T10:42:27Z", "message": "Revert Javadoc search fix since java 8 doesn't provide it either"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2838, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}