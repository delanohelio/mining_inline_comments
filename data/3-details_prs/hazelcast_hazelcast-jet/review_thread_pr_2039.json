{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDcwNTU5", "number": 2039, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTowMDozOFrODk__jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozMTowMlrODlHXRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTIzNzg5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/ProcessorSupplier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTowMDozOFrOFxo2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTowMDozOFrOFxo2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5Mzc4MQ==", "bodyText": "This is a public API method and InternalSerializationService is an internal interface. We should not expose it to the user.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387593781", "createdAt": "2020-03-04T11:00:38Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/ProcessorSupplier.java", "diffHunk": "@@ -131,5 +132,11 @@ static ProcessorSupplier of(@Nonnull SupplierEx<? extends Processor> processorSu\n          */\n         @Nonnull\n         File attachedFile(@Nonnull String id);\n+\n+        /**\n+         * Returns serialization service associated with this job.\n+         */\n+        @Nonnull\n+        InternalSerializationService serializationService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679f334edf283edd6a9cd56a5bd2742e53b7ba2b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY3NTM1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ConvenientSourceP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyMjo0NVrOFxtA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyMjo0NVrOFxtA2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MjA0MA==", "bodyText": "We should get the MangedContext from context.jetInstance().hazelcastInstance() downcasted to HazelcastInstanceImpl", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387662040", "createdAt": "2020-03-04T13:22:45Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ConvenientSourceP.java", "diffHunk": "@@ -109,6 +105,7 @@ public boolean isCooperative() {\n     @Override\n     protected void init(@Nonnull Context context) {\n         // createFn is allowed to return null, we'll call `destroyFn` even for null `ctx`\n+        ManagedContext managedContext = context.serializationService().getManagedContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679f334edf283edd6a9cd56a5bd2742e53b7ba2b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY3NzMwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteBufferedP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyMzoxNFrOFxtCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyMzoxNFrOFxtCAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MjMzOQ==", "bodyText": "Same here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387662339", "createdAt": "2020-03-04T13:23:14Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteBufferedP.java", "diffHunk": "@@ -64,6 +61,7 @@ public void init(@Nonnull Outbox outbox, @Nonnull Context context) {\n         if (localBuff == null) {\n             throw new JetException(\"Null buffer created\");\n         }\n+        ManagedContext managedContext = context.serializationService().getManagedContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679f334edf283edd6a9cd56a5bd2742e53b7ba2b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQwMzQwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/ProcessorSupplier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMTozMlrOFx0HbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMTozMlrOFx0HbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3ODQxMg==", "bodyText": "ManagedContext is available also on ProcessorMetaSupplier level I think", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387778412", "createdAt": "2020-03-04T16:21:32Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/ProcessorSupplier.java", "diffHunk": "@@ -131,5 +132,11 @@ static ProcessorSupplier of(@Nonnull SupplierEx<? extends Processor> processorSu\n          */\n         @Nonnull\n         File attachedFile(@Nonnull String id);\n+\n+        /**\n+         * Returns {@link ManagedContext} associated with this job.\n+         */\n+        @Nonnull\n+        ManagedContext managedContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15caea71b28e6feff19a98b34ece5ffddc94adfb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQxMTk1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/test/TestProcessorSupplierContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMzoyNFrOFx0MxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyMzoyNFrOFx0MxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3OTc4MA==", "bodyText": "SerializationAware isn't public API. Public classes shouldn't implement non-public interfaces.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387779780", "createdAt": "2020-03-04T16:23:24Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/test/TestProcessorSupplierContext.java", "diffHunk": "@@ -34,10 +38,20 @@\n  */\n public class TestProcessorSupplierContext\n         extends TestProcessorMetaSupplierContext\n-        implements ProcessorSupplier.Context {\n+        implements ProcessorSupplier.Context, SerializationAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15caea71b28e6feff19a98b34ece5ffddc94adfb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQxNzk2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/test/TestSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyNDo1M1rOFx0QjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyNDo1M1rOFx0QjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MDc0OQ==", "bodyText": "We can use the no-arg constructor", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387780749", "createdAt": "2020-03-04T16:24:53Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/test/TestSupport.java", "diffHunk": "@@ -791,21 +791,22 @@ private void doCall(String methodName, boolean isCooperative, Runnable r) {\n     }\n \n     private void initProcessor(Processor processor, TestOutbox outbox) {\n-        TestProcessorContext context = new TestProcessorContext()\n+        InternalSerializationService serializationService;\n+        if (jetInstance != null && jetInstance.getHazelcastInstance() instanceof SerializationServiceSupport) {\n+            SerializationServiceSupport impl = (SerializationServiceSupport) jetInstance.getHazelcastInstance();\n+            serializationService = (InternalSerializationService) impl.getSerializationService();\n+        } else {\n+            serializationService = new DefaultSerializationServiceBuilder()\n+                    .setManagedContext(e -> e)\n+                    .build();\n+        }\n+\n+        TestProcessorContext context = new TestProcessorContext(serializationService)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15caea71b28e6feff19a98b34ece5ffddc94adfb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ0NTQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/Contexts.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozMTowMlrOFx0hnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozMTowMlrOFx0hnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NTExNg==", "bodyText": "It would be safer and easier to get the managed context from the jetInstance(). Theoretically the serializationService could have different managedContext. It's not the member's serialization service. IMO, the managedContext shouldn't be published by it. Maybe we can even use SerializationService instead of InternalSerializationService, do we use any other method than toObject and toData?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2039#discussion_r387785116", "createdAt": "2020-03-04T16:31:02Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/Contexts.java", "diffHunk": "@@ -225,6 +231,16 @@ private static String tempDirPrefix(String jetInstanceName, String jobId, String\n                     + \"-\" + jobId\n                     + \"-\" + resourceId.substring(0, min(32, resourceId.length())).replaceAll(\"[^\\\\w.\\\\-$]\", \"_\");\n         }\n+\n+        @Nonnull @Override\n+        public ManagedContext managedContext() {\n+            return serializationService.getManagedContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15caea71b28e6feff19a98b34ece5ffddc94adfb"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4890, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}