{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODExMjcw", "number": 2545, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo0NjoxNVrOEmZJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo0NjoxNVrOEmZJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjkzNDc4OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlCdcNetworkIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo0NjoxNVrOHWYqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo0NjoxNVrOHWYqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzNDgxMA==", "bodyText": "Better to use\nhttps://joel-costigliola.github.io/assertj/core/api/org/assertj/core/api/AbstractThrowableAssert.html#hasRootCauseInstanceOf(java.lang.Class)\nthan a shaded package org.testcontainers.shaded.com.google.common.base.Throwables from testcontainers", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2545#discussion_r493234810", "createdAt": "2020-09-23T06:46:15Z", "author": {"login": "frant-hartm"}, "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlCdcNetworkIntegrationTest.java", "diffHunk": "@@ -407,4 +404,27 @@ private static int findRandomOpenPortInRange(int fromInclusive, int toExclusive)\n         throw new IOException(\"No free port in range [\" + fromInclusive + \", \" +  toExclusive + \")\");\n     }\n \n+    @SuppressWarnings(\"StatementWithEmptyBody\")\n+    private static void assertJobFailsWithConnectException(Job job, boolean lenient) throws InterruptedException {\n+        try {\n+            //wait for job to finish w/ timeout\n+            job.getFuture().get(5, SECONDS);\n+        } catch (TimeoutException te) {\n+            //explicitly cancelling the job because it has not completed so far\n+            job.cancel();\n+\n+            if (lenient) {\n+                //ignore the timeout; not all tests are deterministic, sometimes we don't end up in the state\n+                //we actually want to test\n+            } else {\n+                fail(\"Connection failure not thrown\");\n+            }\n+        } catch (ExecutionException ee) {\n+            //job completed exceptionally, as expected, we check the details of it\n+            Throwable rootCause = Throwables.getRootCause(ee);\n+            assertEquals(JetException.class, rootCause.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe9700933b19a9d4c7b19908a1cec8e3a85ab0f5"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4583, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}