{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjQ1NjA4", "number": 2095, "title": "[007] Extended Support for calling to gRPC services", "bodyText": "This module adds extended support for calling high-performance gRPC services asynchronously. It provides convenience for calling unary and bidirectional streaming services from a Jet pipeline.\nChecklist\n\n Tags Set\n Milestone Set\n Any breaking changes are documented\n New public APIs have @Nonnull/@Nullable annotations\n New public APIs have @since tags in Javadoc\n For code samples, code sample main readme is updated", "createdAt": "2020-03-25T15:10:03Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095", "merged": true, "mergeCommit": {"oid": "c76b12110592857e4cf8330629c9f00fe0baa81e"}, "closed": true, "closedAt": "2020-04-08T14:12:54Z", "author": {"login": "cangencer"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRI_SrABqjMxNjQ0MTEzNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVoFjzAFqTM4OTk4NDUyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fc67163e06040d40b13d1028066db270119cab7", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/2fc67163e06040d40b13d1028066db270119cab7", "committedDate": "2020-03-25T15:08:51Z", "message": "add bidir gRPC prototype"}, "afterCommit": {"oid": "152563cc5205dd0dfaafc9b53a9c95d79583b6a2", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/152563cc5205dd0dfaafc9b53a9c95d79583b6a2", "committedDate": "2020-03-25T15:11:13Z", "message": "add bidir gRPC prototype"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "152563cc5205dd0dfaafc9b53a9c95d79583b6a2", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/152563cc5205dd0dfaafc9b53a9c95d79583b6a2", "committedDate": "2020-03-25T15:11:13Z", "message": "add bidir gRPC prototype"}, "afterCommit": {"oid": "fea5f7b5fd52b5e5df52185855c255be9ac9b275", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/fea5f7b5fd52b5e5df52185855c255be9ac9b275", "committedDate": "2020-03-25T17:25:21Z", "message": "add bidir gRPC prototype"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fea5f7b5fd52b5e5df52185855c255be9ac9b275", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/fea5f7b5fd52b5e5df52185855c255be9ac9b275", "committedDate": "2020-03-25T17:25:21Z", "message": "add bidir gRPC prototype"}, "afterCommit": {"oid": "08d1cb2d6c9337602d88619fef492498c7f04a19", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/08d1cb2d6c9337602d88619fef492498c7f04a19", "committedDate": "2020-03-26T10:21:08Z", "message": "add bidir gRPC prototype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d1cb2d6c9337602d88619fef492498c7f04a19", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/08d1cb2d6c9337602d88619fef492498c7f04a19", "committedDate": "2020-03-26T10:21:08Z", "message": "add bidir gRPC prototype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7671b8edb07e7effbb11c73f798d35d92fca16f", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c7671b8edb07e7effbb11c73f798d35d92fca16f", "committedDate": "2020-03-26T14:26:27Z", "message": "Update examples to use new GRPC service, add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2dbdd275cd765199bfe6e2c4b1a59544b1f6721", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d2dbdd275cd765199bfe6e2c4b1a59544b1f6721", "committedDate": "2020-03-26T15:26:40Z", "message": "A few tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34c819cab42b04deb165e31b21e5ca284910080c", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/34c819cab42b04deb165e31b21e5ca284910080c", "committedDate": "2020-04-03T09:23:05Z", "message": "Merge remote-tracking branch 'upstream/master' into jet-grpc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5940328953a7e7964fe6afdb1cc141335a4c0f9f", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5940328953a7e7964fe6afdb1cc141335a4c0f9f", "committedDate": "2020-04-03T12:47:53Z", "message": "fix check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9706eeb6bbe23b4750959b389dbaabe2c0b85d1b", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9706eeb6bbe23b4750959b389dbaabe2c0b85d1b", "committedDate": "2020-04-03T13:48:57Z", "message": "improve tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32c7e73b235c23f924d52c16d91458fb982b0de6", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/32c7e73b235c23f924d52c16d91458fb982b0de6", "committedDate": "2020-04-03T14:05:21Z", "message": "clean up interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0b0698757935e05f40e5052794f1a6c8aeef41", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7f0b0698757935e05f40e5052794f1a6c8aeef41", "committedDate": "2020-04-03T14:12:43Z", "message": "some refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20bddc72222f14fb69eeae60cc559b01a997ce82", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/20bddc72222f14fb69eeae60cc559b01a997ce82", "committedDate": "2020-04-04T07:16:58Z", "message": "fix dependency issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9da29e0e0faa6b20a840122f6df967fdc6d731a3", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9da29e0e0faa6b20a840122f6df967fdc6d731a3", "committedDate": "2020-04-04T07:47:56Z", "message": "add javadoc"}, "afterCommit": {"oid": "9f83050fbc5220517694d61160f5eae56ffbe4c5", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9f83050fbc5220517694d61160f5eae56ffbe4c5", "committedDate": "2020-04-04T07:53:25Z", "message": "add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f83050fbc5220517694d61160f5eae56ffbe4c5", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9f83050fbc5220517694d61160f5eae56ffbe4c5", "committedDate": "2020-04-04T07:53:25Z", "message": "add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58731b54d50757430ecf246b7df8f6182176e41", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d58731b54d50757430ecf246b7df8f6182176e41", "committedDate": "2020-04-06T07:05:57Z", "message": "add to distribution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ce758a4c5beea0dae3c785614079f442a8d931", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/22ce758a4c5beea0dae3c785614079f442a8d931", "committedDate": "2020-04-06T14:22:40Z", "message": "Improve exception translation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85bd4b7945ed74b4d28144c908b006aa4f7012a9", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/85bd4b7945ed74b4d28144c908b006aa4f7012a9", "committedDate": "2020-04-06T14:25:14Z", "message": "Improve generic types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4cd0ce50b8e13312be2ea9a8268c0a24ba5e4bd", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c4cd0ce50b8e13312be2ea9a8268c0a24ba5e4bd", "committedDate": "2020-04-06T14:25:24Z", "message": "Simplify StreamObserver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a54e55f4e35dfd11aa2ad9ba68733d16f2c4720", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/0a54e55f4e35dfd11aa2ad9ba68733d16f2c4720", "committedDate": "2020-04-06T15:18:58Z", "message": "Rename exception-translating method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef8729ee6465d22d889c1ee1bb4fcd83240b66c", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8ef8729ee6465d22d889c1ee1bb4fcd83240b66c", "committedDate": "2020-04-06T15:19:01Z", "message": "Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzYzNTg4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#pullrequestreview-388363588", "createdAt": "2020-04-06T15:27:20Z", "commit": {"oid": "8ef8729ee6465d22d889c1ee1bb4fcd83240b66c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587", "author": {"user": {"login": "frant-hartm", "name": "Franti\u0161ek Hartman"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5a0f9fc1aaa438859ade7ba94d5f977acc4c4587", "committedDate": "2020-04-07T06:15:21Z", "message": "Fix tests and checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTk3OTYw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#pullrequestreview-387997960", "createdAt": "2020-04-06T07:36:05Z", "commit": {"oid": "d58731b54d50757430ecf246b7df8f6182176e41"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzozNjowNVrOGBLLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDozNTozN1rOGB9aNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4NDgyOA==", "bodyText": "Typo", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r403884828", "createdAt": "2020-04-06T07:36:05Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc;\n+\n+import com.hazelcast.function.BiConsumerEx;\n+import com.hazelcast.function.BiFunctionEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.grpc.impl.BidirectionalStreamingService;\n+import com.hazelcast.jet.grpc.impl.UnaryService;\n+import com.hazelcast.jet.pipeline.GeneralStage;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Provides {@link ServiceFactory} implementations for calling gRPC\n+ * endpoints. The {@code ServiceFactory} created are designed to be\n+ * used with the {@link GeneralStage#mapUsingServiceAsync(ServiceFactory, BiFunctionEx) mapUsingServiceAsync}\n+ * transform.\n+ * <p>\n+ * Currently two types of gRPC services are supported:\n+ * <oul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d58731b54d50757430ecf246b7df8f6182176e41"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MTQ5Nw==", "bodyText": "I would go with simple if else... it's 2 lines longer, but doesn't make my eyes turn back to my skull.\n        if (exception instanceof StatusException) {\n            return new StatusExceptionJet((StatusException) exception);\n        } else if (exception instanceof StatusRuntimeException) {\n            return new StatusRuntimeExceptionJet((StatusRuntimeException) exception);\n        } else {\n            return exception;\n        }", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r404581497", "createdAt": "2020-04-07T07:06:39Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/impl/GrpcUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc.impl;\n+\n+import io.grpc.StatusException;\n+import io.grpc.StatusRuntimeException;\n+\n+public final class GrpcUtil {\n+\n+    private GrpcUtil() {\n+    }\n+\n+    /**\n+     * {@link io.grpc.StatusException} and {@link io.grpc.StatusRuntimeException}\n+     * break the Serializable contract, see\n+     * <a href=\"https://github.com/grpc/grpc-java/issues/1913\">gRPC Issue #1913</a>.\n+     * This method replaces them with serializable ones.\n+     *\n+     * @param exception the exception to examine and possibly replace\n+     * @return the same exception or a replacement if needed\n+     */\n+    public static Throwable translateGrpcException(Throwable exception) {\n+        return (exception instanceof StatusException)\n+                ? new StatusExceptionJet((StatusException) exception)\n+                : (exception instanceof StatusRuntimeException)\n+                ? new StatusRuntimeExceptionJet((StatusRuntimeException) exception)\n+                : exception;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5NjM4NA==", "bodyText": "This means that for each service method defined in proto we need new instance of GrpcService, right?\nNot saying it's wrong, just checking it is conscious decision.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r404596384", "createdAt": "2020-04-07T07:33:09Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc;\n+\n+import com.hazelcast.function.BiFunctionEx;\n+import com.hazelcast.jet.pipeline.GeneralStage;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Represents a gRPC service that can be used as part of a {@link\n+ * GeneralStage#mapUsingServiceAsync(ServiceFactory, BiFunctionEx)\n+ * mapUsingServiceAsync} call. Use {@link GrpcServices} to create a service.\n+ *\n+ * @param <T> type of the request object\n+ * @param <R> type of the response object\n+ *\n+ * @since 4.1\n+ */\n+@FunctionalInterface\n+public interface GrpcService<T, R> {\n+\n+    /**\n+     * Calls the requested service and returns a future which will be\n+     * completed with the result once a response is received.\n+     */\n+    @Nonnull\n+    CompletableFuture<R> call(@Nonnull T input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5NzQzMQ==", "bodyText": "Is this ever going to be called? Should we check the future is completed when it is called or throw some exception if it shouldn't be called.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r404597431", "createdAt": "2020-04-07T07:34:52Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/impl/UnaryService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc.impl;\n+\n+import com.hazelcast.function.BiConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.grpc.GrpcService;\n+import io.grpc.ManagedChannel;\n+import io.grpc.stub.StreamObserver;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.CompletableFuture;\n+\n+public final class UnaryService<T, R> implements GrpcService<T, R> {\n+\n+    private final BiConsumerEx<? super T, ? super StreamObserver<R>> callFn;\n+\n+    public UnaryService(\n+            @Nonnull ManagedChannel channel,\n+            @Nonnull FunctionEx<? super ManagedChannel, ? extends BiConsumerEx<T, StreamObserver<R>>> callStubFn\n+    ) {\n+        callFn = callStubFn.apply(channel);\n+    }\n+\n+    @Override @Nonnull\n+    public CompletableFuture<R> call(@Nonnull T input) {\n+        Observer<R> o = new Observer<>();\n+        callFn.accept(input, o);\n+        return o.future;\n+    }\n+\n+    public void destroy() {\n+    }\n+\n+    private static class Observer<O> implements StreamObserver<O> {\n+        private final CompletableFuture<O> future;\n+\n+        Observer() {\n+            this.future = new CompletableFuture<>();\n+        }\n+\n+        @Override\n+        public void onNext(O value) {\n+            if (!future.complete(value)) {\n+                throw new JetException(\"UnaryService.Observer.onNext() called, but its future is already completed\");\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            future.completeExceptionally(GrpcUtil.translateGrpcException(t));\n+        }\n+\n+        @Override\n+        public void onCompleted() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NjcyMw==", "bodyText": "Can this be called while the future from call is waiting for completion?\nWould it be a problem?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r404696723", "createdAt": "2020-04-07T10:15:51Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/impl/UnaryService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc.impl;\n+\n+import com.hazelcast.function.BiConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.grpc.GrpcService;\n+import io.grpc.ManagedChannel;\n+import io.grpc.stub.StreamObserver;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.CompletableFuture;\n+\n+public final class UnaryService<T, R> implements GrpcService<T, R> {\n+\n+    private final BiConsumerEx<? super T, ? super StreamObserver<R>> callFn;\n+\n+    public UnaryService(\n+            @Nonnull ManagedChannel channel,\n+            @Nonnull FunctionEx<? super ManagedChannel, ? extends BiConsumerEx<T, StreamObserver<R>>> callStubFn\n+    ) {\n+        callFn = callStubFn.apply(channel);\n+    }\n+\n+    @Override @Nonnull\n+    public CompletableFuture<R> call(@Nonnull T input) {\n+        Observer<R> o = new Observer<>();\n+        callFn.accept(input, o);\n+        return o.future;\n+    }\n+\n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNjk0MQ==", "bodyText": "I think it is quite hard to work what happens when, what is input/output of what even on this toy example, the example with productInfo and brokerInfo is even harder to read.\nIMHO the main issue is that the logical flow jumps back and forth in the source code\n\nmapping from the pipeline to the request at line 84\nservice definition (including the actual operation on the stub) at line 76\nmapping the service response at line 85\n\nAnd the complicated functions returning consumers/functions etc.. don't help:\nFunctionEx<? super ManagedChannel, ? extends FunctionEx<StreamObserver<R>, StreamObserver<T>>>\n\nWe should provide more syntactic sugar so it's easier to use for a regular developer. Something along the lines of:\n        ServiceFactory<?, ? extends GrpcService<GreeterStub>> greeterService =\n                bidirectionalStreamingService(\n                        () -> ManagedChannelBuilder.forAddress(\"localhost\", port).usePlaintext()\n                );\n\n        Pipeline p = Pipeline.create();\n        BatchStage<String> stage = p.readFrom(TestSources.items(\"one\", \"two\", \"three\", \"four\"));\n\n        // When\n        BatchStage<String> mapped = stage.mapUsingServiceAsyncXXX(greeterService,\n                (item) -> HelloRequest.newBuilder().setName(item).build(),\n                GreeterStub::sayHelloBidirectional,\n                (response) -> response.getMessage() // Or just HelloReply::getMessage\n        );", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r404706941", "createdAt": "2020-04-07T10:33:54Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/test/java/com/hazelcast/jet/grpc/GrpcServiceTest.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc;\n+\n+import com.hazelcast.jet.SimpleTestInClusterSupport;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.grpc.greeter.GreeterGrpc;\n+import com.hazelcast.jet.grpc.greeter.GreeterOuterClass.HelloReply;\n+import com.hazelcast.jet.grpc.greeter.GreeterOuterClass.HelloRequest;\n+import com.hazelcast.jet.impl.util.ExceptionUtil;\n+import com.hazelcast.jet.pipeline.BatchStage;\n+import com.hazelcast.jet.pipeline.BatchStageWithKey;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.test.AssertionSinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import io.grpc.BindableService;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.stub.StreamObserver;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static com.hazelcast.jet.grpc.GrpcServices.bidirectionalStreamingService;\n+import static com.hazelcast.jet.grpc.GrpcServices.unaryService;\n+import static java.util.stream.Collectors.toList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class GrpcServiceTest extends SimpleTestInClusterSupport {\n+\n+    private static final int ITEM_COUNT = 10_000;\n+    Server server;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        initialize(2, new JetConfig());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (server != null) {\n+            server.shutdown() ;\n+        }\n+    }\n+\n+    @Test\n+    public void when_bidirectionalStreaming() throws IOException {\n+        // Given\n+        server = createServer(new GreeterServiceImpl());\n+        final int port = server.getPort();\n+\n+        ServiceFactory<?, ? extends GrpcService<HelloRequest, HelloReply>> greeterService =\n+                bidirectionalStreaming(port);\n+\n+        Pipeline p = Pipeline.create();\n+        BatchStage<String> stage = p.readFrom(TestSources.items(\"one\", \"two\", \"three\", \"four\"));\n+\n+        // When\n+        BatchStage<String> mapped = stage.mapUsingServiceAsync(greeterService, (service, item) -> {\n+            HelloRequest req = HelloRequest.newBuilder().setName(item).build();\n+            return service.call(req).thenApply(HelloReply::getMessage);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNzg5NQ==", "bodyText": "See the comment in GrpcServiceTest.java where this is used", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#discussion_r404707895", "createdAt": "2020-04-07T10:35:37Z", "author": {"login": "frant-hartm"}, "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.grpc;\n+\n+import com.hazelcast.function.BiConsumerEx;\n+import com.hazelcast.function.BiFunctionEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.function.SupplierEx;\n+import com.hazelcast.jet.grpc.impl.BidirectionalStreamingService;\n+import com.hazelcast.jet.grpc.impl.UnaryService;\n+import com.hazelcast.jet.pipeline.GeneralStage;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Provides {@link ServiceFactory} implementations for calling gRPC\n+ * endpoints. The {@code ServiceFactory} created are designed to be\n+ * used with the {@link GeneralStage#mapUsingServiceAsync(ServiceFactory, BiFunctionEx) mapUsingServiceAsync}\n+ * transform.\n+ * <p>\n+ * Currently two types of gRPC services are supported:\n+ * <oul>\n+ *     <li>{@link #unaryService(SupplierEx, FunctionEx) unary}</li>\n+ *     <li>{@link #bidirectionalStreamingService(SupplierEx, FunctionEx)} (SupplierEx, FunctionEx)\n+ *     bidirectionalStreaming}</li>\n+ * </ul>\n+ *\n+ * @since 4.1\n+ */\n+public final class GrpcServices {\n+\n+    private GrpcServices() {\n+    }\n+\n+    /**\n+     * Creates a {@link ServiceFactory} that calls out to a\n+     * <a href=\"https://grpc.io/docs/guides/concepts/#unary-rpc\">unary gRPC service</a>.\n+     * <p>\n+     * For example, given the protobuf definition below:\n+     * <pre>{@code\n+     * service Greeter {\n+     *   // Sends a greeting\n+     *   rpc SayHello (HelloRequest) returns (HelloReply) {}\n+     * }\n+     * }</pre>\n+     * We can create the following service factory:\n+     * <pre>{@code\n+     * ServiceFactory<?, ? extends GrpcService<HelloRequest, HelloResponse> greeterService = unaryService(\n+     *     () -> ManagedChannelBuilder.forAddress(\"localhost\", 5000).usePlaintext(),\n+     *     channel -> GreeterGrpc.newStub(channel)::sayHello\n+     * );\n+     * }</pre>\n+     * where {@code GreeterGrpc} is the class auto-generated by the protobuf\n+     * compiler.\n+     * <p>\n+     * The created {@link ServiceFactory} should be used with the\n+     * {@link GeneralStage#mapUsingServiceAsync(ServiceFactory, BiFunctionEx) mapUsingServiceAsync}\n+     * transform as follows:\n+     * <pre>{@code\n+     * Pipeline p = Pipeline.create();\n+     * p.readFrom(TestSources.items(\"one\", \"two\", \"three\", \"four\"))\n+     *     .mapUsingServiceAsync(greeterService, (service, input) -> {\n+     *         HelloRequest request = HelloRequest.newBuilder().setName(input).build();\n+     *        return service.call(request);\n+     * })\n+     *  .writeTo(Sinks.logger());\n+     * }</pre>\n+     * <p>\n+     * The remote end can signal an error for a given input item. In that case\n+     * the {@link CompletableFuture} returned from {@code service.call(request)}\n+     * will be completed with that exception. To catch and handle it, use the\n+     * {@code CompletableFuture} API.\n+     *\n+     * @param channelFn creates the channel builder. A single channel is created per Jet member\n+     *                  and shared among the processor instances.\n+     * @param callStubFn a function which, given a channel, creates the stub and returns a\n+     *                   function that calls the stub given the input item and the observer.\n+     *                   It will be called once per input item.\n+     * @param <T> type of the request object\n+     * @param <R> type of the response object\n+     */\n+    @Nonnull\n+    public static <T, R> ServiceFactory<?, ? extends GrpcService<T, R>> unaryService(\n+            @Nonnull SupplierEx<? extends ManagedChannelBuilder<?>> channelFn,\n+            @Nonnull FunctionEx<? super ManagedChannel, ? extends BiConsumerEx<T, StreamObserver<R>>> callStubFn\n+    ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0f9fc1aaa438859ade7ba94d5f977acc4c4587"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98df28989e7692b383aaec436fea39ec5296f59c", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/98df28989e7692b383aaec436fea39ec5296f59c", "committedDate": "2020-04-07T11:03:06Z", "message": "address some of the comments, remove todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a178ebc689ba5e6cfbe3a91a2c57d41502cecc5", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1a178ebc689ba5e6cfbe3a91a2c57d41502cecc5", "committedDate": "2020-04-08T11:53:21Z", "message": "minor tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99c4496015317b8a4d758e841bfade696456e6d5", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/99c4496015317b8a4d758e841bfade696456e6d5", "committedDate": "2020-04-08T12:51:23Z", "message": "Remove servicebuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "779951d9b3e9cddbb3915f1884276b29bcc3dd32", "author": {"user": {"login": "cangencer", "name": "Can Gencer"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/779951d9b3e9cddbb3915f1884276b29bcc3dd32", "committedDate": "2020-04-08T13:19:13Z", "message": "inline service creation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTg0NTI0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2095#pullrequestreview-389984524", "createdAt": "2020-04-08T13:40:46Z", "commit": {"oid": "98df28989e7692b383aaec436fea39ec5296f59c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2734, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}