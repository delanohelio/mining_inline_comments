{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODkyODY2", "number": 2090, "title": "Add job serializer IMDG Map, Cache & Observable tests", "bodyText": "Added job serializer IMDG Map, Cache & Observable tests.\nChecklist\n\n Tags Set\n Milestone Set", "createdAt": "2020-03-24T10:05:18Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090", "merged": true, "mergeCommit": {"oid": "25d5617106ace46c488f09c9d3eb446add88da90"}, "closed": true, "closedAt": "2020-03-25T06:58:27Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQv-pRAH2gAyMzkyODkyODY2OjE0ZDljYmFmZDFlYzgyYjFkZjA1ZjI4OWVmZjVmYjRhMzM3Yzg5NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ4M0EgH2gAyMzkyODkyODY2OmIxZjJlZjI0NzdjMWFlMTZlYzdkZWQ3MjQ2MzE3ZTdiMjZjODM0Y2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14d9cbafd1ec82b1df05f289eff5fb4a337c8975", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/14d9cbafd1ec82b1df05f289eff5fb4a337c8975", "committedDate": "2020-03-24T10:02:50Z", "message": "Add job serializer supporting IMDG Map, Cache & Observable tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4701651bf04c658d3e6c48125a42e7780f610079", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/4701651bf04c658d3e6c48125a42e7780f610079", "committedDate": "2020-03-24T10:06:15Z", "message": "Add job serializer supporting IMDG Map, Cache & Observable tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjkzMjU3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#pullrequestreview-380293257", "createdAt": "2020-03-24T13:12:49Z", "commit": {"oid": "4701651bf04c658d3e6c48125a42e7780f610079"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoxMjo1MFrOF6vhvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoxNTo0NVrOF6vosA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0MDQxNQ==", "bodyText": "This should be two tests. Or you can do map reading and writing in one pipeline, I think that's fine.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#discussion_r397140415", "createdAt": "2020-03-24T13:12:50Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/JobSerializerTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.SimpleTestInClusterSupport;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.jet.core.JobStatus.COMPLETED;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+public class JobSerializerTest extends SimpleTestInClusterSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final String CACHE_NAME = \"cache\";\n+    private static final String OBSERVABLE_NAME = \"observable\";\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        JetConfig config = new JetConfig();\n+        config.getHazelcastConfig()\n+              .addCacheConfig(new CacheSimpleConfig().setName(CACHE_NAME))\n+              .getSerializationConfig()\n+              .addSerializerConfig(new SerializerConfig().setTypeClass(Value.class).setClass(ValueSerializer.class));\n+        initializeWithClient(1, config, null);\n+    }\n+\n+    @Test\n+    public void when_serializerIsRegistered_then_itIsAvailableForLocalMapSourceAndSink() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4701651bf04c658d3e6c48125a42e7780f610079"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0MDY3MQ==", "bodyText": "Easier might be to do newJob(...).join().", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#discussion_r397140671", "createdAt": "2020-03-24T13:13:13Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/JobSerializerTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.SimpleTestInClusterSupport;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.jet.core.JobStatus.COMPLETED;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+public class JobSerializerTest extends SimpleTestInClusterSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final String CACHE_NAME = \"cache\";\n+    private static final String OBSERVABLE_NAME = \"observable\";\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        JetConfig config = new JetConfig();\n+        config.getHazelcastConfig()\n+              .addCacheConfig(new CacheSimpleConfig().setName(CACHE_NAME))\n+              .getSerializationConfig()\n+              .addSerializerConfig(new SerializerConfig().setTypeClass(Value.class).setClass(ValueSerializer.class));\n+        initializeWithClient(1, config, null);\n+    }\n+\n+    @Test\n+    public void when_serializerIsRegistered_then_itIsAvailableForLocalMapSourceAndSink() {\n+        // Given\n+        Pipeline sinkPipeline = Pipeline.create();\n+        sinkPipeline.readFrom(TestSources.items(13))\n+                    .map(i -> new SimpleEntry<>(i, new Value(i)))\n+                    .writeTo(Sinks.map(MAP_NAME));\n+\n+        // When\n+        // Then\n+        assertJobStatusEventually(instance().newJob(sinkPipeline, jobConfig()), COMPLETED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4701651bf04c658d3e6c48125a42e7780f610079"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0MjE5Mg==", "bodyText": "count() is simpler than reduce().", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#discussion_r397142192", "createdAt": "2020-03-24T13:15:45Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/JobSerializerTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.SimpleTestInClusterSupport;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.jet.core.JobStatus.COMPLETED;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+public class JobSerializerTest extends SimpleTestInClusterSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final String CACHE_NAME = \"cache\";\n+    private static final String OBSERVABLE_NAME = \"observable\";\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        JetConfig config = new JetConfig();\n+        config.getHazelcastConfig()\n+              .addCacheConfig(new CacheSimpleConfig().setName(CACHE_NAME))\n+              .getSerializationConfig()\n+              .addSerializerConfig(new SerializerConfig().setTypeClass(Value.class).setClass(ValueSerializer.class));\n+        initializeWithClient(1, config, null);\n+    }\n+\n+    @Test\n+    public void when_serializerIsRegistered_then_itIsAvailableForLocalMapSourceAndSink() {\n+        // Given\n+        Pipeline sinkPipeline = Pipeline.create();\n+        sinkPipeline.readFrom(TestSources.items(13))\n+                    .map(i -> new SimpleEntry<>(i, new Value(i)))\n+                    .writeTo(Sinks.map(MAP_NAME));\n+\n+        // When\n+        // Then\n+        assertJobStatusEventually(instance().newJob(sinkPipeline, jobConfig()), COMPLETED);\n+\n+        // Given\n+        Pipeline sourcePipeline = Pipeline.create();\n+        sourcePipeline.readFrom(Sources.<Integer, Value>map(MAP_NAME))\n+                      .map(Entry::getValue)\n+                      .writeTo(Sinks.logger());\n+\n+        // When\n+        // Then\n+        assertJobStatusEventually(instance().newJob(sourcePipeline, jobConfig()), COMPLETED);\n+    }\n+\n+    @Test\n+    public void when_serializerIsRegistered_then_itIsAvailableForLocalCacheSourceAndSink() {\n+        // Given\n+        Pipeline sinkPipeline = Pipeline.create();\n+        sinkPipeline.readFrom(TestSources.items(13))\n+                    .map(i -> new SimpleEntry<>(i, new Value(i)))\n+                    .writeTo(Sinks.cache(CACHE_NAME));\n+\n+        // When\n+        // Then\n+        assertJobStatusEventually(instance().newJob(sinkPipeline, jobConfig()), COMPLETED);\n+\n+        // Given\n+        Pipeline sourcePipeline = Pipeline.create();\n+        sourcePipeline.readFrom(Sources.<Integer, Value>cache(CACHE_NAME))\n+                      .map(Entry::getValue)\n+                      .writeTo(Sinks.logger());\n+\n+        // When\n+        // Then\n+        assertJobStatusEventually(instance().newJob(sourcePipeline, jobConfig()), COMPLETED);\n+    }\n+\n+    @Test\n+    public void when_serializerIsRegistered_then_itIsAvailableForLocalObservableSink() throws Exception {\n+        // Given\n+        Pipeline pipeline = Pipeline.create();\n+        pipeline.readFrom(TestSources.items(1, 2))\n+                .map(Value::new)\n+                .writeTo(Sinks.observable(OBSERVABLE_NAME));\n+\n+        // When\n+        Observable<Value> observable = instance().getObservable(OBSERVABLE_NAME);\n+        CompletableFuture<Integer> summer = observable\n+                .toFuture(values -> values.map(Value::value).reduce(0, Integer::sum));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4701651bf04c658d3e6c48125a42e7780f610079"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a9c5dd199b79783874164fcb57dd50aef6b2bcf", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7a9c5dd199b79783874164fcb57dd50aef6b2bcf", "committedDate": "2020-03-24T13:53:21Z", "message": "Refactor tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDE0MjM4", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#pullrequestreview-380414238", "createdAt": "2020-03-24T15:18:21Z", "commit": {"oid": "7a9c5dd199b79783874164fcb57dd50aef6b2bcf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxODoyMlrOF61SaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxODoyMlrOF61SaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNDc5Mw==", "bodyText": "We should not register the serializer for the cluster: the test is supposed to test that even if it's not set for the cluster, it works if it's set for the job.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#discussion_r397234793", "createdAt": "2020-03-24T15:18:22Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/JobSerializerTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.core;\n+\n+import com.hazelcast.cache.ICache;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.SimpleTestInClusterSupport;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+import com.hazelcast.jet.pipeline.test.AssertionSinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableSet;\n+\n+import javax.cache.Cache;\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+public class JobSerializerTest extends SimpleTestInClusterSupport {\n+\n+    private static final String SOURCE_MAP_NAME = \"source-map\";\n+    private static final String SINK_MAP_NAME = \"sink-map\";\n+    private static final String SOURCE_CACHE_NAME = \"source-cache\";\n+    private static final String SINK_CACHE_NAME = \"sink-cache\";\n+    private static final String OBSERVABLE_NAME = \"observable\";\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        JetConfig config = new JetConfig();\n+        config.getHazelcastConfig()\n+              .addCacheConfig(new CacheSimpleConfig().setName(SOURCE_CACHE_NAME))\n+              .addCacheConfig(new CacheSimpleConfig().setName(SINK_CACHE_NAME))\n+              .getSerializationConfig()\n+              .addSerializerConfig(new SerializerConfig().setTypeClass(Value.class).setClass(ValueSerializer.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a9c5dd199b79783874164fcb57dd50aef6b2bcf"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a77b3d3ff4f1f75ce365694353c1557d9933f9", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f8a77b3d3ff4f1f75ce365694353c1557d9933f9", "committedDate": "2020-03-24T15:39:33Z", "message": "Configure serializer on client instead of member"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDUwMTUw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2090#pullrequestreview-380450150", "createdAt": "2020-03-24T15:53:56Z", "commit": {"oid": "f8a77b3d3ff4f1f75ce365694353c1557d9933f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f2ef2477c1ae16ec7ded7246317e7b26c834cd", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b1f2ef2477c1ae16ec7ded7246317e7b26c834cd", "committedDate": "2020-03-24T19:37:33Z", "message": "Add job serializers map/cache negative scenarios"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2731, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}