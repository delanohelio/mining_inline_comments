{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTAzMzY1", "number": 1846, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1MDoxMlrODW10XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1MDoxMlrODW10XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mjc3MDIxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/IOUtilTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1MDoxMlrOFb0zYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzozMjo1NFrOFb15RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMDk5Mw==", "bodyText": "IIUIC, git also doesn't store empty directories. If you had an empty directory in /nested, they aren't there when you check out from git.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1846#discussion_r364720993", "createdAt": "2020-01-09T12:50:12Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/IOUtilTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.util;\n+\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.core.test.JetAssert;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.hazelcast.jet.impl.util.IOUtil.packDirectoryIntoZip;\n+import static com.hazelcast.jet.impl.util.IOUtil.unzip;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+public class IOUtilTest extends JetTestSupport {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void test_zipAndUnzipNestedFolder_then_contentsShouldBeSame() throws Exception {\n+        //Given\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(1000);\n+\n+        //When\n+        Path originalPath = Paths.get(this.getClass().getResource(\"/nested\").toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1aaabdaab84987bc598d2dd075220ae6eb03604"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyODA3OQ==", "bodyText": "Nope, there wasn't an empty directory under /nested folder", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1846#discussion_r364728079", "createdAt": "2020-01-09T13:08:12Z", "author": {"login": "eminn"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/IOUtilTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.util;\n+\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.core.test.JetAssert;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.hazelcast.jet.impl.util.IOUtil.packDirectoryIntoZip;\n+import static com.hazelcast.jet.impl.util.IOUtil.unzip;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+public class IOUtilTest extends JetTestSupport {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void test_zipAndUnzipNestedFolder_then_contentsShouldBeSame() throws Exception {\n+        //Given\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(1000);\n+\n+        //When\n+        Path originalPath = Paths.get(this.getClass().getResource(\"/nested\").toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMDk5Mw=="}, "originalCommit": {"oid": "c1aaabdaab84987bc598d2dd075220ae6eb03604"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDczODg4NQ==", "bodyText": "We should test empty directories though", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1846#discussion_r364738885", "createdAt": "2020-01-09T13:32:54Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/IOUtilTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.util;\n+\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.core.test.JetAssert;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.hazelcast.jet.impl.util.IOUtil.packDirectoryIntoZip;\n+import static com.hazelcast.jet.impl.util.IOUtil.unzip;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+public class IOUtilTest extends JetTestSupport {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void test_zipAndUnzipNestedFolder_then_contentsShouldBeSame() throws Exception {\n+        //Given\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(1000);\n+\n+        //When\n+        Path originalPath = Paths.get(this.getClass().getResource(\"/nested\").toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMDk5Mw=="}, "originalCommit": {"oid": "c1aaabdaab84987bc598d2dd075220ae6eb03604"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4909, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}