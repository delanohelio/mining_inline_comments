{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDUwMDIw", "number": 1849, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDowMjo1MFrODXKVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDowMjo1MFrODXKVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjEzMTE0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSourceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDowMjo1MFrOFcU6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDoyMjo0NFrOFcVcxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0NzA3NA==", "bodyText": "does it make sense that if you want to provide a mapping, you also have to implement reading the files?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1849#discussion_r365247074", "createdAt": "2020-01-10T14:02:50Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSourceBuilder.java", "diffHunk": "@@ -107,13 +111,17 @@ public FileSourceBuilder charset(@Nonnull Charset charset) {\n      * The default local parallelism for this processor is 2 (or 1 if just 1\n      * CPU is available).\n      *\n+     * @param readFileFn the function which reads line and emits immediate items from it.\n+     *                   Gets file {@code Path} as parameter and returns Stream of immediate items.\n      * @param mapOutputFn the function which creates output object from each\n      *                    line. Gets the filename and line as parameters\n+     * @param <I> the type of immediate items returned from file reading\n      * @param <T> the type of the items the source emits\n      */\n-    public <T> BatchSource<T> build(BiFunctionEx<String, String, ? extends T> mapOutputFn) {\n+    public <I, T> BatchSource<T> build(@Nonnull FunctionEx<? super Path, ? extends Stream<I>> readFileFn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07297045404a1311ed56220ee3fdeba72c474d6c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1NTg3OQ==", "bodyText": "I've left it for consistency with other methods. I don't see any specific benefit except user having some generic enrichment functions (which can be used inside readFileFn, so that's not a super-important argument)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1849#discussion_r365255879", "createdAt": "2020-01-10T14:22:44Z", "author": {"login": "TomaszGaweda"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/FileSourceBuilder.java", "diffHunk": "@@ -107,13 +111,17 @@ public FileSourceBuilder charset(@Nonnull Charset charset) {\n      * The default local parallelism for this processor is 2 (or 1 if just 1\n      * CPU is available).\n      *\n+     * @param readFileFn the function which reads line and emits immediate items from it.\n+     *                   Gets file {@code Path} as parameter and returns Stream of immediate items.\n      * @param mapOutputFn the function which creates output object from each\n      *                    line. Gets the filename and line as parameters\n+     * @param <I> the type of immediate items returned from file reading\n      * @param <T> the type of the items the source emits\n      */\n-    public <T> BatchSource<T> build(BiFunctionEx<String, String, ? extends T> mapOutputFn) {\n+    public <I, T> BatchSource<T> build(@Nonnull FunctionEx<? super Path, ? extends Stream<I>> readFileFn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0NzA3NA=="}, "originalCommit": {"oid": "07297045404a1311ed56220ee3fdeba72c474d6c"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4912, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}