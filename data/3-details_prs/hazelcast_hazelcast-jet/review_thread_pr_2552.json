{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTY5MDQ3", "number": 2552, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozMzoxOVrOEm_4dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0MjoyOFrOEnAEpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzI3OTkxOnYy", "diffSide": "RIGHT", "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3SinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozMzoxOVrOHXWECw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozMzoxOVrOHXWECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MDc3OQ==", "bodyText": "we can move this to a method for readibility and for re-use:\nclient.listObjectsV2(ListObjectsV2Request.builder().bucket(bucketName).build())", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2552#discussion_r494240779", "createdAt": "2020-09-24T11:33:19Z", "author": {"login": "gurbuzali"}, "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3SinkTest.java", "diffHunk": "@@ -51,6 +54,24 @@ public void deleteObjects() {\n         if (!identifiers.isEmpty()) {\n             client.deleteObjects(b -> b.bucket(bucketName).delete(d -> d.objects(identifiers)));\n         }\n+\n+        int sleepMillis = (int) (SECONDS.toMillis(WAIT_AFTER_CLEANUP_IN_SECS) / 10);\n+        long deadline = System.currentTimeMillis() + SECONDS.toMillis(WAIT_AFTER_CLEANUP_IN_SECS);\n+        int keyCount;\n+        while ((keyCount = client.listObjectsV2(ListObjectsV2Request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60288182fc15a0972263d45757d5f5b86835d9be"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzI4NjU3OnYy", "diffSide": "RIGHT", "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNToxNlrOHXWINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNToxNlrOHXWINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MTg0Nw==", "bodyText": "start method name with lower case", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2552#discussion_r494241847", "createdAt": "2020-09-24T11:35:16Z", "author": {"login": "gurbuzali"}, "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "diffHunk": "@@ -168,6 +170,23 @@ void deleteBucket(S3Client client, String bucket) {\n         }\n     }\n \n+    Stream<String> S3ObjectToLines(S3Object o, S3Client client, String bucketName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60288182fc15a0972263d45757d5f5b86835d9be"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzI5MzM5OnYy", "diffSide": "RIGHT", "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNzoxNVrOHXWMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNzoxNVrOHXWMOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0Mjg3Mg==", "bodyText": "the exception from the issue is NoSuchKeyException not NoSuchBucketException\nI think we can use the parent S3Exception here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2552#discussion_r494242872", "createdAt": "2020-09-24T11:37:15Z", "author": {"login": "gurbuzali"}, "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "diffHunk": "@@ -168,6 +170,23 @@ void deleteBucket(S3Client client, String bucket) {\n         }\n     }\n \n+    Stream<String> S3ObjectToLines(S3Object o, S3Client client, String bucketName) {\n+        try {\n+            ResponseInputStream<GetObjectResponse> is = client.getObject(req -> req.bucket(bucketName).key(o.key()), toInputStream());\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, CHARSET))) {\n+                // materialize the stream, since we can't read it afterwards\n+                return reader.lines().collect(Collectors.toList()).stream();\n+            } catch (IOException e) {\n+                throw new AssertionError(\"Error reading file \", e);\n+            }\n+        } catch (NoSuchBucketException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60288182fc15a0972263d45757d5f5b86835d9be"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzMwMDAwOnYy", "diffSide": "RIGHT", "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozOToxNVrOHXWQOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozOToxNVrOHXWQOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0Mzg5OQ==", "bodyText": "you can pass the exception to the logger.warning as an argument instead of print stacktrace", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2552#discussion_r494243899", "createdAt": "2020-09-24T11:39:15Z", "author": {"login": "gurbuzali"}, "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "diffHunk": "@@ -168,6 +170,23 @@ void deleteBucket(S3Client client, String bucket) {\n         }\n     }\n \n+    Stream<String> S3ObjectToLines(S3Object o, S3Client client, String bucketName) {\n+        try {\n+            ResponseInputStream<GetObjectResponse> is = client.getObject(req -> req.bucket(bucketName).key(o.key()), toInputStream());\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, CHARSET))) {\n+                // materialize the stream, since we can't read it afterwards\n+                return reader.lines().collect(Collectors.toList()).stream();\n+            } catch (IOException e) {\n+                throw new AssertionError(\"Error reading file \", e);\n+            }\n+        } catch (NoSuchBucketException e) {\n+            logger.warning(\"S3 side is having eventual consistency issue that it could not\" +\n+                    \" find the key that is listed before. We ignore this issue.\");\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60288182fc15a0972263d45757d5f5b86835d9be"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzMxMTA5OnYy", "diffSide": "RIGHT", "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0MjoyOFrOHXWW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0MjoyOFrOHXWW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0NTYwOQ==", "bodyText": "why copy/paste inputStreamToLines here ? we can just call it\nreturn inputStreamToLines(client.getObject(req -> req.bucket(bucketName).key(o.key()), toInputStream()));", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2552#discussion_r494245609", "createdAt": "2020-09-24T11:42:28Z", "author": {"login": "gurbuzali"}, "path": "extensions/s3/src/test/java/com/hazelcast/jet/s3/S3TestBase.java", "diffHunk": "@@ -168,6 +170,23 @@ void deleteBucket(S3Client client, String bucket) {\n         }\n     }\n \n+    Stream<String> S3ObjectToLines(S3Object o, S3Client client, String bucketName) {\n+        try {\n+            ResponseInputStream<GetObjectResponse> is = client.getObject(req -> req.bucket(bucketName).key(o.key()), toInputStream());\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, CHARSET))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60288182fc15a0972263d45757d5f5b86835d9be"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4585, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}