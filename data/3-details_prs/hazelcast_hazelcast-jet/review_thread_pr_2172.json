{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjc2NTg3", "number": 2172, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1Nzo0OVrODyYjZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyMDo1N1rODyedzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTU3NjY4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/TestInClusterSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1Nzo0OVrOGGZIEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoxMzoyN1rOGGZsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NjMwNQ==", "bodyText": "caps is only used for static final variables (i.e. constants?)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2172#discussion_r409356305", "createdAt": "2020-04-16T07:57:49Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/TestInClusterSupport.java", "diffHunk": "@@ -51,7 +51,7 @@\n     protected static final String JOURNALED_CACHE_PREFIX = \"journaledCache.\";\n     protected static final int MEMBER_COUNT = 2;\n \n-    protected static JetTestInstanceFactory factory = new JetTestInstanceFactory();\n+    protected static JetTestInstanceFactory FACTORY = new JetTestInstanceFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90925ba714ad79ec7899e3034183bda0b40f9d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NTU5OQ==", "bodyText": "Ok, will revert. Truth to be told I've not come across that many non-final static fields in the past and I've never stopped to consciously make this distinction.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2172#discussion_r409365599", "createdAt": "2020-04-16T08:13:27Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/TestInClusterSupport.java", "diffHunk": "@@ -51,7 +51,7 @@\n     protected static final String JOURNALED_CACHE_PREFIX = \"journaledCache.\";\n     protected static final int MEMBER_COUNT = 2;\n \n-    protected static JetTestInstanceFactory factory = new JetTestInstanceFactory();\n+    protected static JetTestInstanceFactory FACTORY = new JetTestInstanceFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NjMwNQ=="}, "originalCommit": {"oid": "b90925ba714ad79ec7899e3034183bda0b40f9d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTU4MDMyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableResultsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1ODo1MFrOGGZKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1ODo1MFrOGGZKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1Njg5Mg==", "bodyText": "method should have @Override if it's overriding, or you can just use another method name", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2172#discussion_r409356892", "createdAt": "2020-04-16T07:58:50Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableResultsTest.java", "diffHunk": "@@ -63,20 +63,19 @@\n     private TestObserver testObserver;\n     private Observable<Long> testObservable;\n     private UUID registrationId;\n-    private Set<Observable<?>> usedObservables;\n \n     @Before\n     public void before() {\n-        usedObservables = new HashSet<>();\n         observableName = randomName();\n         testObserver = new TestObserver();\n-        testObservable = getObservable(observableName);\n+        testObservable = jet().getObservable(observableName);\n         registrationId = testObservable.addObserver(testObserver);\n     }\n \n     @After\n-    public void after() {\n-        usedObservables.forEach(Observable::destroy);\n+    public void after() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90925ba714ad79ec7899e3034183bda0b40f9d7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjU0NTQwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableResultsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyMDo1N1rOGGil6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1MTo0N1rOGGjv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMTQwMw==", "bodyText": "We can do this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(activeObservables.contains(b.name()));\n          \n          \n            \n                    assertEquals(new HashSet<>(Arrays.asList(a.name(), c.name())), activeObservables);\n          \n      \n    \n    \n  \n\nThis way we'll see in the exception message what's the difference.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2172#discussion_r409511403", "createdAt": "2020-04-16T12:20:57Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableResultsTest.java", "diffHunk": "@@ -553,15 +553,19 @@ public void unnamedObservable() {\n     }\n \n     @Test\n-    public void getObservables() {\n+    public void onlyObservedObservablesGetActivated() {\n         //when\n-        getObservable(\"a\").addObserver(Observer.of(ConsumerEx.noop()));\n-        getObservable(\"b\");\n-        getObservable(\"c\").addObserver(Observer.of(ConsumerEx.noop()));\n+        Observable<Object> a = jet().newObservable();\n+        Observable<Object> b = jet().newObservable();\n+        Observable<Object> c = jet().newObservable();\n+\n+        a.addObserver(Observer.of(ConsumerEx.noop()));\n+        c.addObserver(Observer.of(ConsumerEx.noop()));\n \n         //then\n         Set<String> activeObservables = jet().getObservables().stream().map(Observable::name).collect(Collectors.toSet());\n-        assertTrue(activeObservables.containsAll(Arrays.asList(\"a\", \"c\")));\n+        assertTrue(activeObservables.containsAll(Arrays.asList(a.name(), c.name())));\n+        assertFalse(activeObservables.contains(b.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8431d3becbfdbcc799208eaca3c21f55ee4a25d6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMDMyNw==", "bodyText": "Not really, because they are not equal (there are other, extra names in there too). Plus it wouldn't really help. All it would tell us is if a or c is missing, but that wouldn't help. Anyways, I'll investigate further if it happens again.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2172#discussion_r409530327", "createdAt": "2020-04-16T12:51:47Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/core/ObservableResultsTest.java", "diffHunk": "@@ -553,15 +553,19 @@ public void unnamedObservable() {\n     }\n \n     @Test\n-    public void getObservables() {\n+    public void onlyObservedObservablesGetActivated() {\n         //when\n-        getObservable(\"a\").addObserver(Observer.of(ConsumerEx.noop()));\n-        getObservable(\"b\");\n-        getObservable(\"c\").addObserver(Observer.of(ConsumerEx.noop()));\n+        Observable<Object> a = jet().newObservable();\n+        Observable<Object> b = jet().newObservable();\n+        Observable<Object> c = jet().newObservable();\n+\n+        a.addObserver(Observer.of(ConsumerEx.noop()));\n+        c.addObserver(Observer.of(ConsumerEx.noop()));\n \n         //then\n         Set<String> activeObservables = jet().getObservables().stream().map(Observable::name).collect(Collectors.toSet());\n-        assertTrue(activeObservables.containsAll(Arrays.asList(\"a\", \"c\")));\n+        assertTrue(activeObservables.containsAll(Arrays.asList(a.name(), c.name())));\n+        assertFalse(activeObservables.contains(b.name()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMTQwMw=="}, "originalCommit": {"oid": "8431d3becbfdbcc799208eaca3c21f55ee4a25d6"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4812, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}