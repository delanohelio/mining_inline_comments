{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MjgzMTkw", "number": 1870, "title": "Call a Python Function from Jet Pipeline", "bodyText": "This PR adds a service factory that takes a directory with Python code and calls a function in that code to transform the data from the Jet pipeline. In the first iteration, we support only string data.\nThe mapUsingPython stage launches one or more Python processes (number determined by the stage's local parallelism), each of which starts a gRPC server, and for each of them there is a matching Jet processor that connects to it. Communication happens within a single gRPC request with bidirectional streaming. Each gRPC message is a list of strings and the list is formed through natural batching within the Jet processor, by picking up all the items available in the Inbox.\nYou can supply either a single Python file that declares the handling function, or a complete directory with arbitrary files, some of which have special meaning to Jet. You must explicitly name the Python module and function that Jet will call to transform the data. In addition, Jet looks for these optional files:\n\nrequirements.txt is assumed to list the dependencies of your Python code. Jet will automatically install them. You can also install the modules to the Jet servers' global Python environment in order to speed up job initialization. Jet reuses the global modules and adds the missing ones to the job-local virtual environment.\ninit.sh  is assumed to be a bash script that Jet will run before the job starts\ncleanup.sh is assumed to be a bash script that Jet will run when the job is completing\n\n\nAdds a GeneralStage.mapUsingServiceAsyncBatched transform that is to be used with the new service factory.\nAdds the ability to attach files to ServiceFactory. These will be picked up at job submission time and added to the JobConfig. This avoids the burden on the user to both declare file IDs in the service factory and add the actual files to JobConfig.\nAdds the (internal) ability to attach files to PipelineImpl. This is needed as an intermediate step to let the ServiceFactory propagate its attachments to JobConfig.\nChanges behavior of JobConfig.attachFile to use the actual filename instead of the supplied ID, which may not be a filename-compatible string.\nAdds fail-fast checks to JobConfig.add/attachX methods for the existence of files/directories being referred to. URLs are not checked, but are validate to include at least one path segment (it is used as the filename).\nThese items are still missing to complete this work:\n\nreference manual additions\na code sample\n\nThey will be added in a followup PR.\nChecklist\n\n Tags Set\n Milestone Set\n Any breaking changes are documented\n New public APIs have @Nonnull/@Nullable annotations\n New public APIs have @since tags in Javadoc\n\nBreaking changes:\n\nProcessors.flatMapUsingServiceAsyncP: added missing ? extends to flatMapAsyncFn", "createdAt": "2020-01-21T12:37:40Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870", "merged": true, "mergeCommit": {"oid": "eeca7c33464e95bec60128e08bd6166aa9904768"}, "closed": true, "closedAt": "2020-01-29T15:27:13Z", "author": {"login": "mtopolnik"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9LrTlABqjI5NzQwNTQxODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_HMjIABqjI5ODk4MjQxNTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f80585d98db37a560af8c919cbeaf4495a1b2ef9", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f80585d98db37a560af8c919cbeaf4495a1b2ef9", "committedDate": "2020-01-23T14:17:13Z", "message": "Simple Python echo test"}, "afterCommit": {"oid": "64818c486d05dcfb20b96ddcd313881f6e3c8f1a", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/64818c486d05dcfb20b96ddcd313881f6e3c8f1a", "committedDate": "2020-01-23T15:00:27Z", "message": "Simple Python echo test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64818c486d05dcfb20b96ddcd313881f6e3c8f1a", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/64818c486d05dcfb20b96ddcd313881f6e3c8f1a", "committedDate": "2020-01-23T15:00:27Z", "message": "Simple Python echo test"}, "afterCommit": {"oid": "f527e9bc4d6a7a047b5512b6d2ed39bdc6522aec", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f527e9bc4d6a7a047b5512b6d2ed39bdc6522aec", "committedDate": "2020-01-23T15:25:25Z", "message": "Simple Python echo test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cbe27c8405b1691f56f4db581e49a1efc3a4254", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1cbe27c8405b1691f56f4db581e49a1efc3a4254", "committedDate": "2020-01-24T14:41:45Z", "message": "Reuse method in Inbox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa9f41d79867e11b1f4d2129d04b70ee928c4c8", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/faa9f41d79867e11b1f4d2129d04b70ee928c4c8", "committedDate": "2020-01-24T14:42:13Z", "message": "Improve Javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f527e9bc4d6a7a047b5512b6d2ed39bdc6522aec", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f527e9bc4d6a7a047b5512b6d2ed39bdc6522aec", "committedDate": "2020-01-23T15:25:25Z", "message": "Simple Python echo test"}, "afterCommit": {"oid": "b6952e4c306c285a0965b76527ae5538ac8a9c33", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b6952e4c306c285a0965b76527ae5538ac8a9c33", "committedDate": "2020-01-24T14:49:16Z", "message": "hazelcast-jet-python module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6952e4c306c285a0965b76527ae5538ac8a9c33", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b6952e4c306c285a0965b76527ae5538ac8a9c33", "committedDate": "2020-01-24T14:49:16Z", "message": "hazelcast-jet-python module"}, "afterCommit": {"oid": "764759f9e41031514458eb5e9e196adb3c303592", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/764759f9e41031514458eb5e9e196adb3c303592", "committedDate": "2020-01-24T15:13:49Z", "message": "hazelcast-jet-python module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzM1MzUz", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-348335353", "createdAt": "2020-01-25T17:12:42Z", "commit": {"oid": "9c263f58fd3bc32b1c23b06ac1032fa11370b20d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzoxMjo0MlrOFhwqEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzoyMDo1OFrOFhwrhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NDUyOA==", "bodyText": "this would get serialized", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r370944528", "createdAt": "2020-01-25T17:12:42Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -102,37 +106,31 @@\n      */\n     public static final boolean ORDERED_ASYNC_RESPONSES_DEFAULT = true;\n \n-    private final boolean isCooperative;\n+    private boolean isCooperative = COOPERATIVE_DEFAULT;\n \n     // options for async\n-    private final int maxPendingCallsPerProcessor;\n-    private final boolean orderedAsyncResponses;\n+    private int maxPendingCallsPerProcessor = MAX_PENDING_CALLS_DEFAULT;\n+    private boolean orderedAsyncResponses = ORDERED_ASYNC_RESPONSES_DEFAULT;\n \n     @Nonnull\n-    private final FunctionEx<? super Context, ? extends C> createContextFn;\n+    private FunctionEx<? super Context, ? extends C> createContextFn;\n+\n     @Nonnull\n-    private final BiFunctionEx<? super Processor.Context, ? super C, ? extends S> createServiceFn;\n+    private BiFunctionEx<? super Processor.Context, ? super C, ? extends S> createServiceFn = (ctx, svcContext) -> {\n+        throw new IllegalStateException(\"This ServiceFactory is missing a createServiceFn\");\n+    };\n+\n     @Nonnull\n-    private final ConsumerEx<? super S> destroyServiceFn;\n+    private ConsumerEx<? super S> destroyServiceFn = ConsumerEx.noop();\n+\n     @Nonnull\n-    private final ConsumerEx<? super C> destroyContextFn;\n-\n-    private ServiceFactory(\n-            @Nonnull FunctionEx<? super ProcessorSupplier.Context, ? extends C> createContextFn,\n-            @Nonnull BiFunctionEx<? super Processor.Context, ? super C, ? extends S> createServiceFn,\n-            @Nonnull ConsumerEx<? super S> destroyServiceFn,\n-            @Nonnull ConsumerEx<? super C> destroyContextFn,\n-            boolean isCooperative,\n-            int maxPendingCallsPerProcessor,\n-            boolean orderedAsyncResponses\n-    ) {\n+    private ConsumerEx<? super C> destroyContextFn = ConsumerEx.noop();\n+\n+    @Nonnull\n+    private Set<File> filesToAttach = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c263f58fd3bc32b1c23b06ac1032fa11370b20d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NDU5NQ==", "bodyText": "we should do this another way - it's easy to miss in one place to add the files, and you don't have coverage for all the options. Maybe Pipeline.attachFiles() or stage.addFiles() ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r370944595", "createdAt": "2020-01-25T17:13:56Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/ComputeStageImplBase.java", "diffHunk": "@@ -223,6 +223,7 @@\n             @Nonnull BiFunctionEx<? super S, ? super T, ? extends R> mapFn\n     ) {\n         checkSerializable(mapFn, \"mapFn\");\n+        pipelineImpl.attachFiles(serviceFactory.attachedFiles());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c263f58fd3bc32b1c23b06ac1032fa11370b20d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NDgxMg==", "bodyText": "I wonder if it's better to represent these internally as Properties class or similar, so we don't have to add a method for every single option.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r370944812", "createdAt": "2020-01-25T17:18:58Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-python/src/main/java/com/hazelcast/jet/python/PythonServiceConfig.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Configuration object for the Python service factory.\n+ */\n+public class PythonServiceConfig implements Serializable {\n+    private File baseDir;\n+    private File handlerFile;\n+    private String handlerModule;\n+    private String handlerFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c263f58fd3bc32b1c23b06ac1032fa11370b20d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NDkwMQ==", "bodyText": "we should include an example python function here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r370944901", "createdAt": "2020-01-25T17:20:58Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-python/src/main/java/com/hazelcast/jet/python/PythonServiceConfig.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Configuration object for the Python service factory.\n+ */\n+public class PythonServiceConfig implements Serializable {\n+    private File baseDir;\n+    private File handlerFile;\n+    private String handlerModule;\n+    private String handlerFunction;\n+\n+    /**\n+     * Validates the configuration and throws an exception of\n+     * a mandatory config option is missing.\n+     */\n+    public void validate() {\n+        List<String> missingMandatoryFields = new ArrayList<>();\n+        if (baseDir == null) {\n+            if (handlerFile == null) {\n+                missingMandatoryFields.add(\"(baseDir or handlerFile)\");\n+            }\n+        } else if (handlerModule == null) {\n+            missingMandatoryFields.add(\"handlerModule\");\n+        }\n+        if (handlerFunction == null) {\n+            missingMandatoryFields.add(\"handlerFunction\");\n+        }\n+        if (!missingMandatoryFields.isEmpty()) {\n+            throw new InvalidPythonServiceConfigException(missingMandatoryFields);\n+        }\n+    }\n+\n+    /**\n+     * Returns the Python {@linkplain #setBaseDir base directory}.\n+     */\n+    @Nullable\n+    public File baseDir() {\n+        return baseDir;\n+    }\n+\n+    /**\n+     * Sets the base directory where the Python files reside. When you set this,\n+     * also set the name of the {@link #setHandlerModule handler module} to\n+     * identify the location of the handler function.\n+     * <p>\n+     * Jet also recognizes these special files in the base directory:\n+     * <ul><li>\n+     *     {@code requirements.txt} is assumed to list the <a href=\n+     *     \"https://pip.pypa.io/en/stable/user_guide/#requirements-files\">\n+     *     dependencies of your Python code</a>. Jet will automatically install\n+     *     them to a job-local virtual environment. You can also install the\n+     *     modules to the Jet servers' global Python environment in order to speed\n+     *     up job initialization. Jet reuses the global modules and adds the\n+     *     missing ones.\n+     * <li>\n+     *     {@code init.sh} is assumed to be a Bash script that Jet will run when\n+     *     initializing the job.\n+     * <li>\n+     *     {@code cleanup.sh} is assumed to be a Bash script that Jet will run\n+     *     when completing the job.\n+     * </ul>\n+     * <p>\n+     * If all you need to deploy to Jet is in a single file, you can call {@link\n+     * #setHandlerFile} instead.\n+     */\n+    public PythonServiceConfig setBaseDir(@Nonnull String baseDir) {\n+        if (handlerFile != null) {\n+            throw new IllegalArgumentException(\n+                    \"You already set handlerFile so you can't set baseDir.\" +\n+                    \" When using baseDir, set handlerModule instead.\");\n+        }\n+        String baseDirStr = requireNonBlank(baseDir, \"baseDir\");\n+        try {\n+            File dir = new File(baseDirStr).getCanonicalFile();\n+            if (!dir.isDirectory()) {\n+                throw new IOException(\"Not a directory: \" + dir);\n+            }\n+            this.baseDir = dir;\n+        } catch (IOException e) {\n+            throw new InvalidPythonServiceConfigException(\"Invalid baseDir argument\", e);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the Python {@linkplain #setHandlerFile handler file}.\n+     */\n+    @Nullable\n+    public File handlerFile() {\n+        return handlerFile;\n+    }\n+\n+    /**\n+     * Sets the Python handler file. It must contain the {@linkplain\n+     * #setHandlerFunction handler function}. If your Python work is in more\n+     * than one file, call {@link #setBaseDir} instead.\n+     */\n+    public PythonServiceConfig setHandlerFile(@Nonnull String handlerFile) {\n+        if (baseDir != null) {\n+            throw new IllegalStateException(\n+                    \"You already set baseDir so you can't set handlerFile.\" +\n+                    \" If you want to set the handler module, call setHandlerModule().\");\n+        }\n+        if (handlerModule != null) {\n+            throw new IllegalStateException(\n+                    \"You already set handlerModule, it would be overwritten by setting handlerFile\");\n+        }\n+        String handlerFileStr = requireNonBlank(handlerFile, \"handlerFile\");\n+        if (!handlerFileStr.toLowerCase().endsWith(\".py\")) {\n+            throw new IllegalArgumentException(\"The handler file must be a .py file\");\n+        }\n+        try {\n+            File file = new File(handlerFileStr).getCanonicalFile();\n+            if (!file.isFile()) {\n+                throw new IOException(\"Not a regular file: \" + file);\n+            }\n+            this.handlerFile = file;\n+            this.handlerModule = file.getName().replaceFirst(\"\\\\.py$\", \"\");\n+        } catch (IOException e) {\n+            throw new InvalidPythonServiceConfigException(\"Invalid handlerFile argument\", e);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the {@linkplain #setHandlerModule handler module} name.\n+     * */\n+    public String handlerModule() {\n+        return handlerModule;\n+    }\n+\n+    /**\n+     * Sets the name of the Python module that has the function that\n+     * transforms Jet pipeline data.\n+     */\n+    public PythonServiceConfig setHandlerModule(@Nonnull String handlerModule) {\n+        if (handlerFile != null) {\n+            throw new IllegalStateException(\n+                    \"You already set handlerFile, it would be overwritten by setting handlerModule\");\n+        }\n+        this.handlerModule = requireNonBlank(handlerModule, \"handlerModule\");\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the name of the {@linkplain #setHandlerFunction handler\n+     * function}.\n+     */\n+    public String handlerFunction() {\n+        return handlerFunction;\n+    }\n+\n+    /**\n+     * Sets the name of the Python function that transforms Jet pipeline data,\n+     * defined in the module you configured with {@link #setHandlerModule}.\n+     * The function must take a single argument that is a list of strings, and\n+     * return another list of strings which has the results of transforming each\n+     * item in the input list. There must be a strict one-to-one match between\n+     * the input and output lists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c263f58fd3bc32b1c23b06ac1032fa11370b20d"}, "originalPosition": 183}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzM2ODMz", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-348336833", "createdAt": "2020-01-25T17:45:46Z", "commit": {"oid": "1982dd31dcb13a4cd93b7cdbfebadbfbc742494c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzo0NTo0N1rOFhwwPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzo0NTo0N1rOFhwwPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NjExMA==", "bodyText": "we should delete this after the tests", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r370946110", "createdAt": "2020-01-25T17:45:47Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-python/src/test/java/com/hazelcast/jet/python/PythonServiceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import com.hazelcast.jet.SimpleTestInClusterSupport;\n+import com.hazelcast.jet.impl.util.IOUtil;\n+import com.hazelcast.jet.pipeline.BatchStage;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.pipeline.test.AssertionSinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static com.hazelcast.jet.python.PythonService.mapUsingPython;\n+import static com.hazelcast.jet.python.PythonService.mapUsingPythonBatch;\n+import static java.util.stream.Collectors.toList;\n+\n+public class PythonServiceTest extends SimpleTestInClusterSupport {\n+\n+    private static final int ITEM_COUNT = 10_000;\n+    private File baseDir;\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        initialize(2, null);\n+    }\n+\n+    @Before\n+    public void before() throws Exception {\n+        baseDir = createTempDirectory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1982dd31dcb13a4cd93b7cdbfebadbfbc742494c"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8d534299483aca851effcee07b5d1714352ffd9", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e8d534299483aca851effcee07b5d1714352ffd9", "committedDate": "2020-01-26T10:29:43Z", "message": "Address review"}, "afterCommit": {"oid": "804dd3e4243343d170b9633e5d57bc37fc15c955", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/804dd3e4243343d170b9633e5d57bc37fc15c955", "committedDate": "2020-01-26T10:34:25Z", "message": "Address review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzkxNjY1", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-348391665", "createdAt": "2020-01-26T16:48:12Z", "commit": {"oid": "804dd3e4243343d170b9633e5d57bc37fc15c955"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjo0ODoxMlrOFh03wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjo0ODoxMlrOFh03wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMzU2OQ==", "bodyText": "I mistakenly made this package-private, reverted now, also Nonnull / Nullable is missing for methods as well as the since tags", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371013569", "createdAt": "2020-01-26T16:48:12Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-python/src/main/java/com/hazelcast/jet/python/PythonService.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.core.Processor.Context;\n+import com.hazelcast.jet.pipeline.BatchStage;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.python.grpc.InputMessage;\n+import com.hazelcast.jet.python.grpc.InputMessage.Builder;\n+import com.hazelcast.jet.python.grpc.JetToPythonGrpc;\n+import com.hazelcast.jet.python.grpc.JetToPythonGrpc.JetToPythonStub;\n+import com.hazelcast.jet.python.grpc.OutputMessage;\n+import com.hazelcast.logging.ILogger;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.grpc.ManagedChannel;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * The service object used by the \"map using Python\" pipeline stage. As a\n+ * user you don't have to deal with this class directly. It is used when\n+ * you write {@link #mapUsingPython\n+ * stage.apply(PythonService.mapUsingPython(pyConfig))}\n+ */\n+class PythonService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804dd3e4243343d170b9633e5d57bc37fc15c955"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTQ2MDk3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-348546097", "createdAt": "2020-01-27T10:02:45Z", "commit": {"oid": "540af8585ecef9b1eef5179913e1cb996f8dbaf2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDowMjo0NlrOFh9LUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDowMjo0NlrOFh9LUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0OTY0OQ==", "bodyText": "we don't support ID here which is contradictory with how it works when doing it through JobConfig. Wouldn't it make sense to always require ID here, and then pythonService can add its own special id for these files?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371149649", "createdAt": "2020-01-27T10:02:46Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -315,10 +310,65 @@ private ServiceFactory(\n      */\n     @Nonnull\n     public ServiceFactory<C, S> withUnorderedAsyncResponses() {\n-        return new ServiceFactory<>(\n-                createContextFn, createServiceFn, destroyServiceFn, destroyContextFn,\n-                isCooperative, maxPendingCallsPerProcessor, false\n-        );\n+        ServiceFactory<C, S> copy = clone();\n+        copy.orderedAsyncResponses = false;\n+        return copy;\n+\n+    }\n+\n+    /**\n+     * Attaches a file to this service factory. It will become a part of the\n+     * Jet job and available to {@link #createContextFn()} as {@link\n+     * ProcessorSupplier.Context#attachedFile\n+     * procSupplierContext.attachedFile(file.toString())}.\n+     *\n+     * @return a copy of this factory with the file attached\n+     *\n+     * @since 4.0\n+     */\n+    @Nonnull\n+    public ServiceFactory<C, S> withAttachedFile(@Nonnull File file) {\n+        if (!file.isFile()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540af8585ecef9b1eef5179913e1cb996f8dbaf2"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTUwNzc5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-348550779", "createdAt": "2020-01-27T10:10:30Z", "commit": {"oid": "540af8585ecef9b1eef5179913e1cb996f8dbaf2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxMDozMVrOFh9ZgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxMDozMVrOFh9ZgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MzI4MQ==", "bodyText": "Isn't this method implementation is 1:1 copy of the one above ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371153281", "createdAt": "2020-01-27T10:10:31Z", "author": {"login": "eminn"}, "path": "hazelcast-jet-python/src/main/java/com/hazelcast/jet/python/PythonService.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.core.Processor.Context;\n+import com.hazelcast.jet.pipeline.BatchStage;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.python.grpc.InputMessage;\n+import com.hazelcast.jet.python.grpc.InputMessage.Builder;\n+import com.hazelcast.jet.python.grpc.JetToPythonGrpc;\n+import com.hazelcast.jet.python.grpc.JetToPythonGrpc.JetToPythonStub;\n+import com.hazelcast.jet.python.grpc.OutputMessage;\n+import com.hazelcast.logging.ILogger;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.grpc.ManagedChannel;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+/**\n+ * The service object used by the \"map using Python\" pipeline stage. As a\n+ * user you don't have to deal with this class directly. It is used when\n+ * you write {@link #mapUsingPython\n+ * stage.apply(PythonService.mapUsingPython(pyConfig))}\n+ *\n+ * @since 4.0\n+ */\n+public final class PythonService {\n+\n+    private static final String JET_TO_PYTHON_PREFIX = \"jet_to_python_\";\n+    static final String MAIN_SHELL_SCRIPT = JET_TO_PYTHON_PREFIX + \"main.sh\";\n+\n+    private final ILogger logger;\n+    private final JetToPythonServer server;\n+    private final ManagedChannel chan;\n+    private final StreamObserver<InputMessage> sink;\n+    private final Queue<CompletableFuture<List<String>>> futureQueue = new ConcurrentLinkedQueue<>();\n+\n+    private final CountDownLatch completionLatch = new CountDownLatch(1);\n+    private volatile Throwable exceptionInOutputObserver;\n+\n+    PythonService(Context procCtx, PythonServiceContext serviceContext) {\n+        logger = procCtx.logger();\n+        try {\n+            server = new JetToPythonServer(serviceContext.runtimeBaseDir(), logger);\n+            int serverPort = server.start();\n+            chan = NettyChannelBuilder.forAddress(\"127.0.0.1\", serverPort)\n+                                      .usePlaintext()\n+                                      .build();\n+            JetToPythonStub client = JetToPythonGrpc.newStub(chan);\n+            sink = client.streamingCall(new OutputMessageObserver());\n+        } catch (Exception e) {\n+            throw new JetException(\"PythonService initialization failed\", e);\n+        }\n+    }\n+\n+    /**\n+     * A stage-transforming method that adds a \"map using Python\" pipeline stage.\n+     * Use it with {@code stage.apply(PythonService.mapUsingPython(pyConfig))}.\n+     */\n+    @Nonnull\n+    public static FunctionEx<StreamStage<String>, StreamStage<String>> mapUsingPython(\n+            @Nonnull PythonServiceConfig cfg\n+    ) {\n+        return s -> s\n+                .mapUsingServiceAsyncBatched(factory(cfg), Integer.MAX_VALUE, PythonService::sendRequest)\n+                .setName(\"mapUsingPython\");\n+    }\n+\n+    /**\n+     * A stage-transforming method that adds a \"map using Python\" pipeline stage.\n+     * Use it with {@code stage.apply(PythonService.mapUsingPythonBatch(pyConfig))}.\n+     */\n+    @Nonnull\n+    public static FunctionEx<BatchStage<String>, BatchStage<String>> mapUsingPythonBatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540af8585ecef9b1eef5179913e1cb996f8dbaf2"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Mjg1Mjg5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-349285289", "createdAt": "2020-01-28T10:55:16Z", "commit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDo1NToxN1rOFigzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxMzoyOFrOFihSjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczMzMyMg==", "bodyText": "We can declare this exception, the superclass allows it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371733322", "createdAt": "2020-01-28T10:55:17Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -390,4 +439,31 @@ public int maxPendingCallsPerProcessor() {\n     public boolean hasOrderedAsyncResponses() {\n         return orderedAsyncResponses;\n     }\n+\n+    /**\n+     * Returns the files and directories attached to this service factory. They\n+     * will become a part of the Jet job and available to {@link\n+     * #createContextFn()} as {@link ProcessorSupplier.Context#attachedFile\n+     * procSupplierContext.attachedFile(file.toString())} or\n+     * {@link ProcessorSupplier.Context#attachedDirectory\n+     * procSupplierContext.attachedDirectory(directory.toString())}.\n+     *\n+     * @since 4.0\n+     */\n+    @Nonnull\n+    public Map<String, File> attachedFiles() {\n+        return Collections.unmodifiableMap(attachedFiles);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected ServiceFactory<C, S> clone() {\n+        try {\n+            ServiceFactory<C, S> copy = (ServiceFactory<C, S>) super.clone();\n+            copy.attachedFiles = new HashMap<>(attachedFiles);\n+            return copy;\n+        } catch (CloneNotSupportedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MTMyNA==", "bodyText": "This is rather confusing. If the user doesn't use the attachFile variant with id, then the file name and ID are always equal. If he does, then he does so for some reason. We should use the ID he asked for and not the one from the URL. The URL might even not contain a file name, but we require it here.\nIf we keep it like this, we should document at attachFile(URL, id) that we require the URL to contain a file name and that that file name will be the name of the file, the ID is just used to look up that file.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371741324", "createdAt": "2020-01-28T11:13:28Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JobRepository.java", "diffHunk": "@@ -211,11 +212,12 @@ long uploadJobResources(JobConfig jobConfig) {\n                         }\n                         break;\n                     case FILE:\n-                        try (\n-                                InputStream in = rc.getUrl().openStream();\n-                                IMapOutputStream os = new IMapOutputStream(jobFileStorage.get(), fileKeyName(rc.getId()))\n+                        Path fnamePath = Paths.get(Objects.requireNonNull(rc.getUrl().getPath())).getFileName();\n+                        assert fnamePath != null; // needed to silence SpotBugs\n+                        try (InputStream in = rc.getUrl().openStream();\n+                             IMapOutputStream os = new IMapOutputStream(jobFileStorage.get(), fileKeyName(rc.getId()))\n                         ) {\n-                            packStreamIntoZip(in, os, rc.getId());\n+                            packStreamIntoZip(in, os, fnamePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Mjk3MTc5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-349297179", "createdAt": "2020-01-28T11:16:45Z", "commit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxNjo0NVrOFihX6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxNjo0NVrOFihX6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MjY5Nw==", "bodyText": "This is a good idea. The id is user-supplied, it can be whatever. We should whitelist allowed characters and replace all others. Also maybe trim it to up to 20 chars or so.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371742697", "createdAt": "2020-01-28T11:16:45Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/Contexts.java", "diffHunk": "@@ -185,13 +188,17 @@ private File extractFileToDisk(String id) {\n             IMap<String, byte[]> map = jetInstance().getMap(jobResourcesMapName(jobId()));\n             try (IMapInputStream inputStream = new IMapInputStream(map, fileKeyName(id))) {\n                 String prefix = \"jet-\" + jetInstance().getName() + \"-\" + idToString(jobId()) + \"-\" + id;\n-                Path directory = Files.createTempDirectory(prefix);\n+                Path directory = Files.createTempDirectory(sanitizeFilename(prefix));\n                 unzip(inputStream, directory);\n                 return directory.toFile();\n             } catch (IOException e) {\n                 throw ExceptionUtil.rethrow(e);\n             }\n         }\n+\n+        private static String sanitizeFilename(String proposed) {\n+            return proposed.replace('/', '_');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzQ5MDI0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-349349024", "createdAt": "2020-01-28T12:52:04Z", "commit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1MjowNFrOFij1jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1MjowNFrOFij1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MzA1Mg==", "bodyText": "Why do we wait here? Isn't it just a query whether the process terminated? Then we can wait for 0 seconds.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371783052", "createdAt": "2020-01-28T12:52:04Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-python/src/main/java/com/hazelcast/jet/python/JetToPythonServer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import com.hazelcast.logging.ILogger;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.nio.file.Path;\n+\n+import static com.hazelcast.jet.python.PythonService.MAIN_SHELL_SCRIPT;\n+import static java.lang.ProcessBuilder.Redirect.PIPE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+class JetToPythonServer {\n+    private final File baseDir;\n+    private ILogger logger;\n+\n+    private Process pythonProcess;\n+    private String pythonProcessPid;\n+\n+    JetToPythonServer(Path baseDir, ILogger logger) {\n+        this.baseDir = baseDir.toFile();\n+        this.logger = logger;\n+    }\n+\n+    int start() throws IOException, InterruptedException {\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(null);\n+            InetSocketAddress endpoint = (InetSocketAddress) serverSocket.getLocalSocketAddress();\n+            ProcessBuilder builder = new ProcessBuilder(\n+                    \"/bin/sh\", \"-c\", \"./\" + MAIN_SHELL_SCRIPT\n+                    + \" \" + endpoint.getHostString() + \" \" + endpoint.getPort());\n+            pythonProcess = builder\n+                    .directory(baseDir)\n+                    .inheritIO()\n+                    .redirectInput(PIPE)\n+                    .start();\n+            pythonProcessPid = processPid(pythonProcess);\n+            logger.info(\"Started Python process: \" + pythonProcessPid);\n+            serverSocket.setSoTimeout((int) SECONDS.toMillis(1));\n+            while (true) {\n+                try (Socket clientSocket = serverSocket.accept()) {\n+                    int serverPort = Integer.parseInt(new BufferedReader(\n+                            new InputStreamReader(clientSocket.getInputStream(), UTF_8)).readLine());\n+                    logger.info(\"Python process \" + pythonProcessPid + \" listening on port \" + serverPort);\n+                    return serverPort;\n+                } catch (SocketTimeoutException e) {\n+                    if (pythonProcess.waitFor(1, SECONDS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDA4NzMw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-349408730", "createdAt": "2020-01-28T14:20:04Z", "commit": {"oid": "08ae06efad8678dcab5fa572f7c678117e0fa779"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzkxNjg2", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#pullrequestreview-349391686", "createdAt": "2020-01-28T13:57:34Z", "commit": {"oid": "b6deb54536bb8297a8465c19dbc9b52242e1e96e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzo1NzozNFrOFil3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozMzo1NVrOFinLXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNjIxMw==", "bodyText": "You could use Files.walk to process files recursively.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371816213", "createdAt": "2020-01-28T13:57:34Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-python/src/main/java/com/hazelcast/jet/python/PythonServiceContext.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.python;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.logging.ILogger;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.jet.impl.util.IOUtil.copyStream;\n+import static java.nio.file.LinkOption.NOFOLLOW_LINKS;\n+import static java.nio.file.attribute.PosixFilePermission.GROUP_WRITE;\n+import static java.nio.file.attribute.PosixFilePermission.OTHERS_WRITE;\n+import static java.nio.file.attribute.PosixFilePermission.OWNER_WRITE;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+\n+/**\n+ * The context object used by the \"map using Python\" pipeline stage. As a\n+ * user you don't have to deal with this class directly. It is used when\n+ * you write {@link PythonTransforms#mapUsingPython\n+ * stage.apply(PythonService.mapUsingPython(pyConfig))}\n+ */\n+class PythonServiceContext {\n+\n+    private static final String JET_TO_PYTHON_PREFIX = \"jet_to_python_\";\n+    private static final String MAIN_SHELL_SCRIPT = JET_TO_PYTHON_PREFIX + \"main.sh\";\n+    private static final String PARAMS_SCRIPT = JET_TO_PYTHON_PREFIX + \"params.sh\";\n+    private static final String INIT_SHELL_SCRIPT = JET_TO_PYTHON_PREFIX + \"init.sh\";\n+    private static final String CLEANUP_SHELL_SCRIPT = JET_TO_PYTHON_PREFIX + \"cleanup.sh\";\n+    private static final String USER_INIT_SHELL_SCRIPT = \"init.sh\";\n+    private static final String USER_CLEANUP_SHELL_SCRIPT = \"cleanup.sh\";\n+    private static final String PYTHON_GRPC_SCRIPT = JET_TO_PYTHON_PREFIX + \"grpc_server.py\";\n+    private static final List<String> EXECUTABLE_SCRIPTS = asList(\n+            INIT_SHELL_SCRIPT, MAIN_SHELL_SCRIPT, CLEANUP_SHELL_SCRIPT);\n+    private static final List<String> USER_EXECUTABLE_SCRIPTS = asList(\n+            USER_INIT_SHELL_SCRIPT, USER_CLEANUP_SHELL_SCRIPT);\n+    private static final EnumSet<PosixFilePermission> WRITE_PERMISSIONS =\n+            EnumSet.of(OWNER_WRITE, GROUP_WRITE, OTHERS_WRITE);\n+    private static final Object INIT_LOCK = new Object();\n+\n+    private final ILogger logger;\n+\n+    private Path runtimeBaseDir;\n+\n+    PythonServiceContext(ProcessorSupplier.Context context, PythonServiceConfig cfg) {\n+        this.logger = context.logger();\n+        try {\n+            long start = System.nanoTime();\n+            runtimeBaseDir = cfg.baseDir() != null\n+                    ? context.attachedDirectory(cfg.baseDir().toString()).toPath()\n+                    : context.attachedFile(cfg.handlerFile().toString()).toPath().getParent();\n+            setupBaseDir(cfg);\n+            synchronized (INIT_LOCK) {\n+                // synchronized: the script will run pip which is not concurrency-safe\n+                new ProcessBuilder(\"/bin/sh\", \"-c\", \"./\" + INIT_SHELL_SCRIPT)\n+                        .directory(runtimeBaseDir.toFile())\n+                        .inheritIO()\n+                        .start()\n+                        .waitFor();\n+            }\n+            makeFilesReadOnly(runtimeBaseDir);\n+            context.logger().info(String.format(\"Initialization script took %,d ms\",\n+                    TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)));\n+        } catch (Exception e) {\n+            throw new JetException(\"PythonService initialization failed\", e);\n+        }\n+    }\n+\n+    void destroy() {\n+        File runtimeBaseDirF = runtimeBaseDir.toFile();\n+        try {\n+            Path cleanupScriptPath = runtimeBaseDir.resolve(USER_CLEANUP_SHELL_SCRIPT);\n+            if (Files.exists(cleanupScriptPath)) {\n+                new ProcessBuilder(\"/bin/sh\", \"-c\", \"./\" + CLEANUP_SHELL_SCRIPT)\n+                        .directory(runtimeBaseDirF)\n+                        .inheritIO()\n+                        .start()\n+                        .waitFor();\n+            }\n+        } catch (Exception e) {\n+            throw new JetException(\"PythonService cleanup failed\", e);\n+        } finally {\n+            IOUtil.delete(runtimeBaseDir);\n+        }\n+    }\n+\n+    Path runtimeBaseDir() {\n+        return runtimeBaseDir;\n+    }\n+\n+    private void setupBaseDir(PythonServiceConfig cfg) throws IOException {\n+        createParamsScript(runtimeBaseDir.resolve(PARAMS_SCRIPT),\n+                \"HANDLER_MODULE\", cfg.handlerModule(),\n+                \"HANDLER_FUNCTION\", cfg.handlerFunction()\n+        );\n+        for (String fname : asList(\n+                JET_TO_PYTHON_PREFIX + \"pb2.py\",\n+                JET_TO_PYTHON_PREFIX + \"pb2_grpc.py\",\n+                INIT_SHELL_SCRIPT,\n+                MAIN_SHELL_SCRIPT,\n+                CLEANUP_SHELL_SCRIPT,\n+                PYTHON_GRPC_SCRIPT)\n+        ) {\n+            Path destPath = runtimeBaseDir.resolve(fname);\n+            try (InputStream in = Objects.requireNonNull(\n+                    PythonServiceContext.class.getClassLoader().getResourceAsStream(fname), fname);\n+                 OutputStream out = Files.newOutputStream(destPath)\n+            ) {\n+                copyStream(in, out);\n+            }\n+            if (EXECUTABLE_SCRIPTS.contains(fname)) {\n+                makeExecutable(destPath);\n+            }\n+            for (String userScript : USER_EXECUTABLE_SCRIPTS) {\n+                Path scriptPath = runtimeBaseDir.resolve(userScript);\n+                if (Files.exists(scriptPath)) {\n+                    makeExecutable(scriptPath);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void createParamsScript(Path paramsFile, String... namesAndVals) throws IOException {\n+        try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(paramsFile))) {\n+            String jetToPython = JET_TO_PYTHON_PREFIX.toUpperCase();\n+            for (int i = 0; i < namesAndVals.length; i += 2) {\n+                String name = namesAndVals[i];\n+                String value = namesAndVals[i + 1];\n+                if (value != null && !value.isEmpty()) {\n+                    out.println(jetToPython + name + \"='\" + value + '\\'');\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void makeExecutable(Path path) throws IOException {\n+        Set<PosixFilePermission> perms = Files.getPosixFilePermissions(path, NOFOLLOW_LINKS);\n+        if (perms.add(PosixFilePermission.OWNER_EXECUTE)) {\n+            Files.setPosixFilePermissions(path, perms);\n+        }\n+    }\n+\n+    private static void makeReadOnly(Path path) throws IOException {\n+        Set<PosixFilePermission> perms = Files.getPosixFilePermissions(path, NOFOLLOW_LINKS);\n+        if (perms.removeAll(WRITE_PERMISSIONS)) {\n+            Files.setPosixFilePermissions(path, perms);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\",\n+            justification = \"it's a false positive since java 11: https://github.com/spotbugs/spotbugs/issues/756\")\n+    private void makeFilesReadOnly(Path basePath) throws IOException {\n+        List<String> filesNotMarked = new ArrayList<>();\n+        Queue<Path> dirQueue = new ArrayDeque<>(singletonList(basePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6deb54536bb8297a8465c19dbc9b52242e1e96e"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzMzMzOQ==", "bodyText": "Maybe in the past, now we only use url.openStream(), so it has to be any URL that can be read.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371833339", "createdAt": "2020-01-28T14:27:02Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JobRepository.java", "diffHunk": "@@ -211,11 +212,12 @@ long uploadJobResources(JobConfig jobConfig) {\n                         }\n                         break;\n                     case FILE:\n-                        try (\n-                                InputStream in = rc.getUrl().openStream();\n-                                IMapOutputStream os = new IMapOutputStream(jobFileStorage.get(), fileKeyName(rc.getId()))\n+                        Path fnamePath = Paths.get(Objects.requireNonNull(rc.getUrl().getPath())).getFileName();\n+                        assert fnamePath != null; // needed to silence SpotBugs\n+                        try (InputStream in = rc.getUrl().openStream();\n+                             IMapOutputStream os = new IMapOutputStream(jobFileStorage.get(), fileKeyName(rc.getId()))\n                         ) {\n-                            packStreamIntoZip(in, os, rc.getId());\n+                            packStreamIntoZip(in, os, fnamePath.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MTMyNA=="}, "originalCommit": {"oid": "715272fcba52ce6e2bf268f27518690f7a8dee85"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzNzc5MA==", "bodyText": "isFile returns false if the file is in a directory which lacks the x attribute, see here. It's better to use canRead or to not check at all and rely when we try to read it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1870#discussion_r371837790", "createdAt": "2020-01-28T14:33:55Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/JetInstance.java", "diffHunk": "@@ -138,6 +141,17 @@ default Job newJob(@Nonnull Pipeline pipeline) {\n      */\n     @Nonnull\n     default Job newJob(@Nonnull Pipeline pipeline, @Nonnull JobConfig config) {\n+        PipelineImpl impl = (PipelineImpl) pipeline;\n+        for (Entry<String, File> e : impl.attachedFiles().entrySet()) {\n+            File file = e.getValue();\n+            if (file.isDirectory()) {\n+                config.attachDirectory(file, e.getKey());\n+            } else if (file.isFile()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d40ef2f0136c9a465f0471d6b120392ec5a2ef98"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c90a04f93e23c2638f3f7c9f732047ab9963b70", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9c90a04f93e23c2638f3f7c9f732047ab9963b70", "committedDate": "2020-01-29T09:29:11Z", "message": "Imports"}, "afterCommit": {"oid": "3c325141bbac3b396dd42a7b0584c54c399a3a0a", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3c325141bbac3b396dd42a7b0584c54c399a3a0a", "committedDate": "2020-01-29T11:12:21Z", "message": "hazelcast-jet-python module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e908e35f430b8ade524d6b6cf74ec317f73a280a", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e908e35f430b8ade524d6b6cf74ec317f73a280a", "committedDate": "2020-01-29T14:26:34Z", "message": "Fix test"}, "afterCommit": {"oid": "5be84eec7a5d0ed89397d8945b6d0ba50a147c98", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5be84eec7a5d0ed89397d8945b6d0ba50a147c98", "committedDate": "2020-01-29T14:30:59Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570e32c1e353106ca7d99f0692832b47c9ce9b9a", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/570e32c1e353106ca7d99f0692832b47c9ce9b9a", "committedDate": "2020-01-29T14:39:15Z", "message": "Use original filename when deploying resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a2a29c5b073d78675ed449057aed8b1cd59e58d", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/2a2a29c5b073d78675ed449057aed8b1cd59e58d", "committedDate": "2020-01-29T14:40:04Z", "message": "Check files/URLs for existence and well-formedness\n\nIn JobConfig."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "144db9b361896641bed1d468808f01145d5565d7", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/144db9b361896641bed1d468808f01145d5565d7", "committedDate": "2020-01-29T14:40:04Z", "message": "Support attaching files to PipelineImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fed77594f020808ca128268066292125ee93ecdf", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/fed77594f020808ca128268066292125ee93ecdf", "committedDate": "2020-01-29T14:40:04Z", "message": "Support attaching files to ServiceFactory\n\nAlso rewrite the class to use clone-and-update instead of a massive\nconstructor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74138289f7086bfb813f10142b3710a83b6479ae", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/74138289f7086bfb813f10142b3710a83b6479ae", "committedDate": "2020-01-29T14:40:04Z", "message": "hazelcast-jet-python module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5be84eec7a5d0ed89397d8945b6d0ba50a147c98", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5be84eec7a5d0ed89397d8945b6d0ba50a147c98", "committedDate": "2020-01-29T14:30:59Z", "message": "Fix test"}, "afterCommit": {"oid": "74138289f7086bfb813f10142b3710a83b6479ae", "author": {"user": {"login": "mtopolnik", "name": "Marko Topolnik"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/74138289f7086bfb813f10142b3710a83b6479ae", "committedDate": "2020-01-29T14:40:04Z", "message": "hazelcast-jet-python module"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2932, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}