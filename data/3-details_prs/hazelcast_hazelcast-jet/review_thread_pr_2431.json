{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODA3MDcy", "number": 2431, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDozNDo1NlrOEVB1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToxMDozNFrOEVC1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDg1NTUwOnYy", "diffSide": "RIGHT", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDozNDo1NlrOG7jU6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDozNDo1NlrOG7jU6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5Nzk2MQ==", "bodyText": "@nfrankel \"with the cache none the wiser\" - what's that??", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2431#discussion_r465097961", "createdAt": "2020-08-04T14:34:56Z", "author": {"login": "viliam-durina"}, "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -253,13 +255,15 @@ GitHub](https://github.com/hazelcast-demos/evergreen-cache).\n The repository is made of the following modules:\n \n - `app` is a Spring Boot application using Spring Data JDBC to access a\n-MySQL database.\n-It abstracts away Hazelcast by using a Spring Cache layer\n+  MySQL database. It abstracts away Hazelcast by using a Spring Cache\n+  layer\n+\n - `update` is a Spring Shell application.\n-It allows to update the data inside the database, with the cache none\n-the wiser\n+  It allows to update the data inside the database, with the cache none\n+  the wiser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5468a65a01332da041b961540fc625fff826933"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTAwMDA4OnYy", "diffSide": "RIGHT", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTowNjoxNlrOG7kvOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTowNjoxNlrOG7kvOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyMTA4Mw==", "bodyText": "@nfrankel What's this?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2431#discussion_r465121083", "createdAt": "2020-08-04T15:06:16Z", "author": {"login": "viliam-durina"}, "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -221,27 +222,28 @@ It\u2019s (finally!) time to assemble all the previous bits together.\n Here are the components and their responsibilities:\n \n 1. A MySQL database instance is where the data is stored.\n-It\u2019s accessed in read-only mode by the cache, and in write-only mode by\n-some external component\n-2. A Jet instance reads events to MySQL through the Debezium connector,\n-transforms them into cache-compatible key-value pairs, and updates the\n-cache accordingly.\n-Note that while Jet pipelines provide filtering capabilities, it\u2019s also\n-possible to filter items in the CDC connector to optimize load of the\n-pipeline\n+   It\u2019s accessed in read-only mode by the cache, and in write-only mode\n+   by some external component\n+\n+2. A Jet instance reads events from MySQL through the Debezium connector,\n+   transforms them into cache-compatible key-value pairs, and updates\n+   the cache accordingly. Note that while Jet pipelines provide\n+   filtering capabilities, it\u2019s also possible to filter items in the CDC\n+   connector to optimize the load of the pipeline\n+\n 3. The app uses the cache, which is always up-to-date with the database,\n- give or take the time it takes for the above to execute\n+   give or take the time it takes for the above to execute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a9aada1378973f4bd4326593938490d6996197"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTAxOTQ1OnYy", "diffSide": "RIGHT", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToxMDozNFrOG7k7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToxMDozNFrOG7k7DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyNDEwOQ==", "bodyText": "@nfrankel We have a specialized CDC sink. I think the above code doesn't handle deleted persons. I'm not sure what r.value.toObject() returns for a ChangeRecord that represents a deletion, but since it is marked as @Nonnull I guess it's the deleted person. But we don't remove that person from the target map, we put it there.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2431#discussion_r465124109", "createdAt": "2020-08-04T15:10:34Z", "author": {"login": "viliam-durina"}, "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -277,12 +281,17 @@ pipeline.readFrom(source)                                       //1\n ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a9aada1378973f4bd4326593938490d6996197"}, "originalPosition": 200}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4538, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}