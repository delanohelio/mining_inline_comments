{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTEyODg4", "number": 2247, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxMTowM1rOEGpS7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNDo0NVrOEIO8vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDAzNTAwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/RecordPart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxMTowM1rOGlkXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxMTowM1rOGlkXgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0NjMzOQ==", "bodyText": "we can drop the ...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442046339", "createdAt": "2020-06-18T08:11:03Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/RecordPart.java", "diffHunk": "@@ -40,6 +40,32 @@\n      * Jackson jr</a> with <a\n      * href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">\n      * annotation support</a>, so the supplied class can be annotated accordingly.\n+     * <p>\n+     * Note: there is a bug in jackson-jr's object mapping, where it doesn't\n+     * handle fields of type {@code Data} properly, if they are nullable.\n+     * The null values trigger exceptions and failure in the object mapping code...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf77381194522c816d756f76b9a256d5f44243b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDgzMzcyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNjozNlrOGlsSvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzowMzoxOFrOGmKRZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjE5MA==", "bodyText": "I wonder if this is relevant to us, since in Debezium it only affect the Kafka topic name? Can we just use a random name?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176190", "createdAt": "2020-06-18T12:06:36Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY2NzM2NQ==", "bodyText": "Yes, seems like we can.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442667365", "createdAt": "2020-06-19T07:03:18Z", "author": {"login": "jbartok"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjE5MA=="}, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDgzNDE5OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNjo0NlrOGlsTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNjo0NlrOGlsTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjI3Ng==", "bodyText": "missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176276", "createdAt": "2020-06-18T12:06:46Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {\n+            config.setProperty(\"database.server.name\", cluster);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be\n+         * monitored (\"schema\" is used here to denote logical groups of\n+         * tables). Any schema name not included in the whitelist will\n+         * be excluded from monitoring. By default all non-system schemas\n+         * will be monitored. May not be used with\n+         * {@link #setSchemaBlacklist(String...) schema blacklist}.\n+         */\n+        public Builder setSchemaWhitelist(String... schemaNameRegExps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDgzNTA0OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNjo1NVrOGlsThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNDozMVrOGoEhnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjM4OQ==", "bodyText": "missing annotations (check other places too)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176389", "createdAt": "2020-06-18T12:06:55Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MDM2Nw==", "bodyText": "still missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r444670367", "createdAt": "2020-06-24T06:24:31Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjM4OQ=="}, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDgzNjIwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNzoxOVrOGlsUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNzoxOVrOGlsUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjU3Mg==", "bodyText": "returns the source..", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176572", "createdAt": "2020-06-18T12:07:19Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {\n+            config.setProperty(\"database.server.name\", cluster);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be\n+         * monitored (\"schema\" is used here to denote logical groups of\n+         * tables). Any schema name not included in the whitelist will\n+         * be excluded from monitoring. By default all non-system schemas\n+         * will be monitored. May not be used with\n+         * {@link #setSchemaBlacklist(String...) schema blacklist}.\n+         */\n+        public Builder setSchemaWhitelist(String... schemaNameRegExps) {\n+            config.setProperty(\"schema.whitelist\", schemaNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be\n+         * excluded from monitoring (\"schema\" is used here to denote\n+         * logical groups of tables). Any schema name not included in\n+         * the blacklist will be monitored, with the exception of system\n+         * schemas. May not be used with\n+         * {@link #setSchemaWhitelist(String...) schema whitelist}.\n+         */\n+        public Builder setSchemaBlacklist(String... schemaNameRegExps) {\n+            config.setProperty(\"schema.blacklist\", schemaNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match fully-qualified table\n+         * identifiers for tables to be monitored; any table not\n+         * included in the whitelist will be excluded from monitoring.\n+         * Each identifier is of the form <i>schemaName.tableName</i>.\n+         * By default the connector will monitor every non-system table\n+         * in each monitored database. May not be used with\n+         * {@link #setTableBlacklist(String...) table blacklist}.\n+         */\n+        @Nonnull\n+        public Builder setTableWhitelist(@Nonnull String... tableNameRegExps) {\n+            config.setProperty(\"table.whitelist\", tableNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match fully-qualified table\n+         * identifiers for tables to be excluded from monitoring; any\n+         * table not included in the blacklist will be monitored. Each\n+         * identifier is of the form <i>schemaName.tableName</i>. May\n+         * not be used with\n+         * {@link #setTableWhitelist(String...) table whitelist}.\n+         */\n+        @Nonnull\n+        public Builder setTableBlacklist(@Nonnull String... tableNameRegExps) {\n+            config.setProperty(\"table.blacklist\", tableNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match the fully-qualified\n+         * names of columns that should be excluded from change event\n+         * message values. Fully-qualified names for columns are of the\n+         * form <i>schemaName.tableName.columnName</i>.\n+         */\n+        @Nonnull\n+        public Builder setColumnBlacklist(@Nonnull String... columnNameRegExps) {\n+            config.setProperty(\"column.blacklist\", columnNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the @see <a href=\"https://www.postgresql.org/docs/10/logicaldecoding.html\">\n+         * Postgres logical decoding plug-in</a> installed on the server.\n+         * Supported values are <i>decoderbufs</i>, <i>wal2json</i>,\n+         * <i>wal2json_rds</i>, <i>wal2json_streaming</i>,\n+         * <i>wal2json_rds_streaming</i> and <i>pgoutput</i>.\n+         * <p>\n+         * If not explicitly set, the property defaults to <i>decoderbufs</i>.\n+         * <p>\n+         * When the processed transactions are very large it is possible\n+         * that the JSON batch event with all changes in the transaction\n+         * will not fit into the hard-coded memory buffer of size 1 GB.\n+         * In such cases it is possible to switch to so-called streaming\n+         * mode when every change in transactions is sent as a separate\n+         * message from PostgreSQL.\n+         */\n+        @Nonnull\n+        public Builder setLogicalDecodingPlugIn(@Nonnull String pluginName) {\n+            config.setProperty(\"plugin.name\", pluginName);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the @see <a href=\"https://www.postgresql.org/docs/10/logicaldecoding-explanation.html\">\n+         * Postgres logical decoding slot</a> (also called \"replication\n+         * slot\") created for streaming changes from a plug-in and\n+         * database instance.\n+         * <p>\n+         * Values must conform to Postgres replication slot naming rules\n+         * which state: \"Each replication slot has a name, which can\n+         * contain lower-case letters, numbers, and the underscore\n+         * character.\"\n+         * <p>\n+         * Replication slots have to have an identifier that is unique\n+         * across all databases in a PostgreSQL cluster.\n+         * <p>\n+         * If not explicitly set, the property defaults to <i>debezium</i>.\n+         */\n+        @Nonnull\n+        public Builder setReplicationSlotName(@Nonnull String slotName) {\n+            config.setProperty(\"slot.name\", slotName);\n+            return this;\n+        }\n+\n+        /**\n+         * Whether or not to drop the logical replication slot when the\n+         * connector disconnects cleanly.\n+         * <p>\n+         * Defaults to <i>false</i>\n+         * <p>\n+         * Should only be set to <i>true</i> in testing or development\n+         * environments. Dropping the slot allows WAL segments to be\n+         * discarded by the database, so it may happen that after a\n+         * restart the connector cannot resume from the WAL position\n+         * where it left off before.\n+         */\n+        @Nonnull\n+        public Builder setReplicationSlotDropOnStop(boolean dropOnStop) {\n+            config.setProperty(\"slot.drop.on.stop\", dropOnStop);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the <a href=\"https://www.postgresql.org/docs/10/logical-replication-publication.html\">\n+         * Postgres publication</a> that will be used for CDC purposes.\n+         * <p>\n+         * If the publication does not exist when this source starts up,\n+         * then the source will create it (note: the database user of the\n+         * source must have superuser permissions to be able to do so).\n+         * If created this way the publication will include all tables\n+         * and the source itself must filter the data based on its\n+         * white-/blacklist configs. This is not efficient because the\n+         * database will still send all data to the connector, before\n+         * filtering is applied.\n+         * <p>\n+         * It's best to use a pre-defined publication (via the <code>CREATE\n+         * PUBLICATION</code> SQL command, specified via its name.\n+         * <p>\n+         * If not explicitly set, the property defaults to <i>dbz_publication</i>.\n+         */\n+        @Nonnull\n+        public Builder setPublicationName(@Nonnull String publicationName) {\n+            config.setProperty(\"publication.name\", publicationName);\n+            return this;\n+        }\n+\n+        /**\n+         * Can be used to set any property not explicitly covered by\n+         * other methods or to override properties we have hidden.\n+         */\n+        @Nonnull\n+        public Builder setCustomProperty(@Nonnull String key, @Nonnull String value) {\n+            config.setProperty(key, value);\n+            return this;\n+        }\n+\n+        /**\n+         * Returns an actual source based on the properties set so far.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDgzNzE2OnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNzozOFrOGlsUxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNzozOFrOGlsUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjcxMQ==", "bodyText": "missing @since tag", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176711", "createdAt": "2020-06-18T12:07:38Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/package-info.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Contains connectors for change data capture events from PostgreSQL\n+ * databases.\n+ */\n+package com.hazelcast.jet.cdc.postgres;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY0MzkwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/RecordPart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowMzowMVrOGm_o0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowMzowMVrOGm_o0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0MTcxNA==", "bodyText": "@{code Date}", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443541714", "createdAt": "2020-06-22T13:03:01Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/RecordPart.java", "diffHunk": "@@ -40,6 +40,32 @@\n      * Jackson jr</a> with <a\n      * href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">\n      * annotation support</a>, so the supplied class can be annotated accordingly.\n+     * <p>\n+     * Note: there is a bug in jackson-jr's object mapping, where it doesn't\n+     * handle fields of type {@code Data} properly, if they are nullable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY1MDEwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowNDo0MVrOGm_s1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowNDo0MVrOGm_s1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Mjc0Mw==", "bodyText": "This would be better in active voice.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443542743", "createdAt": "2020-06-22T13:04:41Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -43,6 +44,14 @@ private MySqlCdcSources() {\n     /**\n      * Creates a CDC source that streams change data from a MySQL\n      * database to Hazelcast Jet.\n+     * <p>\n+     * If the database is unreachable when this source is started by a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY1NjQyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowNjoxNFrOGm_wpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowNjoxNFrOGm_wpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0MzcxNw==", "bodyText": "Use <em> for emphasized text instead of <i>.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443543717", "createdAt": "2020-06-22T13:06:14Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -215,6 +226,88 @@ public Builder setColumnBlacklist(@Nonnull String... columnNameRegExps) {\n             return this;\n         }\n \n+        /**\n+         * Specifies whether to use an encrypted connection to the\n+         * database. The default is <i>disabled</i>, and specifies to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY2MzEyOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowODowNVrOGm_04A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowODowNVrOGm_04A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NDgwMA==", "bodyText": "These lines are too short, should be 72 chars after the initial * .", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443544800", "createdAt": "2020-06-22T13:08:05Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -215,6 +226,88 @@ public Builder setColumnBlacklist(@Nonnull String... columnNameRegExps) {\n             return this;\n         }\n \n+        /**\n+         * Specifies whether to use an encrypted connection to the\n+         * database. The default is <i>disabled</i>, and specifies to\n+         * use an unencrypted connection.\n+         * <p>\n+         * The <i>preferred</i> option establishes an encrypted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY4MTk4OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/cdc.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxMzoyMlrOGnAAyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxMzoyMlrOGnAAyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzg0OQ==", "bodyText": "This can use active voice", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443547849", "createdAt": "2020-06-22T13:13:22Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -108,6 +109,113 @@ On how to work with the MySQL config file consult the Reference Manual\n ([5.7](https://dev.mysql.com/doc/refman/5.7/en/option-files.html),\n [8.0](https://dev.mysql.com/doc/refman/8.0/en/option-files.html)).\n \n+### PostgreSQL\n+\n+#### Database version\n+\n+The PostgreSQL change data capture connector works by exploiting the\n+[logical\n+decoding](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html)\n+feature of the database, first introduced in version 9.4. This version\n+however is no longer supported. Debezium recommends running change data\n+capture on version [9.6](https://www.postgresql.org/docs/9.6/index.html)\n+or later.\n+\n+#### Output plug-in\n+\n+PostgreSQL's logical decoding feature is a mechanism which allows the\n+extraction of the changes which were committed to the transaction log\n+and the processing of these changes in a user-friendly manner via the\n+help of an [output\n+plug-in](https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html).\n+\n+The output plug-ins currently available are:\n+\n+* [`decoderbufs`](https://github.com/debezium/postgres-decoderbufs),\n+  maintained by the Debezium community, based on ProtoBuf\n+* [`wal2json`](https://github.com/eulerto/wal2json), maintained by the\n+  wal2json community, based on JSON\n+* `pgoutput`, the standard logical decoding plug-in in PostgreSQL 10 and\n+  later, maintained by the Postgres community\n+\n+The `pgoutput` plug-in is always present and requires no explicit\n+installation, for the other two follow the instructions provided by\n+their maintainers.\n+\n+Note: for simplicity Debezium also provides a Docker image based on a\n+vanilla [PostgreSQL server\n+image](https://github.com/debezium/docker-images/tree/master/postgres/9.6)\n+on top of which it compiles and installs all above mentioned plugins.\n+\n+#### Server config\n+\n+Running change data capture on a PostgreSQL server requires certain\n+configuration options to be set accordingly. This can be done either by\n+\n+* editing the `postgresql.conf` file, or by\n+* using the [ALTER\n+  SYSTEM](https://www.postgresql.org/docs/current/sql-altersystem.html)\n+  command\n+\n+The important properties to set are:\n+\n+```properties\n+# MODULES\n+shared_preload_libraries = 'decoderbufs,wal2json'\n+\n+# REPLICATION\n+wal_level = logical\n+max_wal_senders = 1\n+max_replication_slots = 1\n+```\n+\n+`shared_preload_libraries` contains a comma separated list of installed\n+output plug-ins. `wal_levels` is used to tell the server to use logical\n+decoding with the write-ahead log.\n+\n+Logical decoding uses [replication\n+slots](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html#LOGICALDECODING-REPLICATION-SLOTS).\n+Replication slots retain WAL data even during connector outages. For\n+this reason it is important to monitor and limit replication slots to\n+avoid too much disk consumption and other conditions that can happen,\n+such as catalog bloat if a slot stays unused for too long. This is why\n+the `max_wal_sender` and `max_replication_slots` parameters are set with\n+the smallest possible values.\n+\n+#### Replication permissions\n+\n+Replication can only be performed by a database user (specifically the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY4MzQ2OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/cdc.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxMzo1MFrOGnABtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxMzo1MFrOGnABtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0ODA4Nw==", "bodyText": "Active voice", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443548087", "createdAt": "2020-06-22T13:13:50Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -108,6 +109,113 @@ On how to work with the MySQL config file consult the Reference Manual\n ([5.7](https://dev.mysql.com/doc/refman/5.7/en/option-files.html),\n [8.0](https://dev.mysql.com/doc/refman/8.0/en/option-files.html)).\n \n+### PostgreSQL\n+\n+#### Database version\n+\n+The PostgreSQL change data capture connector works by exploiting the\n+[logical\n+decoding](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html)\n+feature of the database, first introduced in version 9.4. This version\n+however is no longer supported. Debezium recommends running change data\n+capture on version [9.6](https://www.postgresql.org/docs/9.6/index.html)\n+or later.\n+\n+#### Output plug-in\n+\n+PostgreSQL's logical decoding feature is a mechanism which allows the\n+extraction of the changes which were committed to the transaction log\n+and the processing of these changes in a user-friendly manner via the\n+help of an [output\n+plug-in](https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html).\n+\n+The output plug-ins currently available are:\n+\n+* [`decoderbufs`](https://github.com/debezium/postgres-decoderbufs),\n+  maintained by the Debezium community, based on ProtoBuf\n+* [`wal2json`](https://github.com/eulerto/wal2json), maintained by the\n+  wal2json community, based on JSON\n+* `pgoutput`, the standard logical decoding plug-in in PostgreSQL 10 and\n+  later, maintained by the Postgres community\n+\n+The `pgoutput` plug-in is always present and requires no explicit\n+installation, for the other two follow the instructions provided by\n+their maintainers.\n+\n+Note: for simplicity Debezium also provides a Docker image based on a\n+vanilla [PostgreSQL server\n+image](https://github.com/debezium/docker-images/tree/master/postgres/9.6)\n+on top of which it compiles and installs all above mentioned plugins.\n+\n+#### Server config\n+\n+Running change data capture on a PostgreSQL server requires certain\n+configuration options to be set accordingly. This can be done either by\n+\n+* editing the `postgresql.conf` file, or by\n+* using the [ALTER\n+  SYSTEM](https://www.postgresql.org/docs/current/sql-altersystem.html)\n+  command\n+\n+The important properties to set are:\n+\n+```properties\n+# MODULES\n+shared_preload_libraries = 'decoderbufs,wal2json'\n+\n+# REPLICATION\n+wal_level = logical\n+max_wal_senders = 1\n+max_replication_slots = 1\n+```\n+\n+`shared_preload_libraries` contains a comma separated list of installed\n+output plug-ins. `wal_levels` is used to tell the server to use logical\n+decoding with the write-ahead log.\n+\n+Logical decoding uses [replication\n+slots](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html#LOGICALDECODING-REPLICATION-SLOTS).\n+Replication slots retain WAL data even during connector outages. For\n+this reason it is important to monitor and limit replication slots to\n+avoid too much disk consumption and other conditions that can happen,\n+such as catalog bloat if a slot stays unused for too long. This is why\n+the `max_wal_sender` and `max_replication_slots` parameters are set with\n+the smallest possible values.\n+\n+#### Replication permissions\n+\n+Replication can only be performed by a database user (specifically the\n+one we set up our CDC connector with) only if the user has appropriate\n+permissions. The permissions needed are `REPLICATION` and `LOGIN`.\n+\n+For setting up database users/roles see the [PostgreSQL\n+documentation](https://www.postgresql.org/docs/9.6/user-manag.html), but\n+basically the essential command is:\n+\n+```text\n+CREATE ROLE name REPLICATION LOGIN;\n+```\n+\n+Note: database super-users already have all the permissions needed by\n+replication too.\n+\n+#### Client authentication\n+\n+Replication can only be performed for a configured number of hosts. The\n+PostgreSQL server needs to be told to allow access from the host the CDC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY5MDU1OnYy", "diffSide": "RIGHT", "path": "site/docs/operations/cdc.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxNTozNFrOGnAF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxNTozNFrOGnAF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0OTE2NQ==", "bodyText": "I feel this is a too colloquial mode of expression for Operations Guide.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443549165", "createdAt": "2020-06-22T13:15:34Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -167,3 +276,36 @@ options to \"ON\".\n On how to work with the MySQL config file consult the Reference Manual\n ([5.7](https://dev.mysql.com/doc/refman/5.7/en/option-files.html),\n [8.0](https://dev.mysql.com/doc/refman/8.0/en/option-files.html)).\n+\n+### PostgreSQL\n+\n+#### Primary-only replication\n+\n+As we've mentioned in the [PostgreSQL database setup\n+section](#postgresql) the connector uses logical decoding replication\n+slots. All PostgreSQL versions (up to 12) only support logical\n+replication slots on *primary* servers.\n+\n+This means that it's not possible to limit the performance impact of\n+running change data capture on replicas. This weakness is somewhat\n+offset by the fact that the logical replication process seems quite\n+limited as far as the amount of resources it can acquire. When measuring\n+its output it behaves quite like a single threaded process, which can't\n+saturate neither CPU nor the network.\n+\n+In our tests we didn't manage to make it output much more than 20,000\n+records/second, so on a powerful server running the database it\n+shouldn't affect normal operations too severely.\n+\n+#### Failure tolerance\n+\n+PostgreSQL failure tolerance associated with replication slot isn't that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDY4OTkwOnYy", "diffSide": "RIGHT", "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNDo0NVrOGoEh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNDo0NVrOGoEh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MDQ0OQ==", "bodyText": "missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r444670449", "createdAt": "2020-06-24T06:24:45Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.internal.util.UuidUtil;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.ChangeRecordCdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL database\n+     * to Hazelcast Jet.\n+     * <p>\n+     * If Jet can't reach the database when it attempts to start the source or\n+     * if it looses the connection to the database from an already running\n+     * source, it throws an exception and terminate the execution of the job.\n+     * This behaviour is not ideal, would be much better to try to reconnect,\n+     * at least for a certain amount of time. Future versions will address the\n+     * problem.\n+     *\n+     * @param name name of this source, needs to be unique, will be passed to\n+     *             the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also to\n+     * construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .inclusive(\"database.sslkey\", \"database.sslpassword\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique, will be passed to\n+         *             the underlying Kafka Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(ChangeRecordCdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+            config.setProperty(\"database.server.name\", UuidUtil.newUnsecureUuidString());\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified defaults\n+         * to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the changes.\n+         * Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white- and\n+         * black-listing configuration options for those.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be monitored\n+         * (\"schema\" is used here to denote logical groups of tables). Any\n+         * schema name not included in the whitelist will be excluded from\n+         * monitoring. By default all non-system schemas will be monitored. May\n+         * not be used with\n+         * {@link #setSchemaBlacklist(String...) schema blacklist}.\n+         */\n+        @Nonnull\n+        public Builder setSchemaWhitelist(String... schemaNameRegExps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143e495020b3db86eaaf410a6c7bc636d8b650a2"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4705, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}