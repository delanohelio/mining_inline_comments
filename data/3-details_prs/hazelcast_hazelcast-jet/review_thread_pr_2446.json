{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzEzMTQy", "number": 2446, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo0NzowNFrOEfcA6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NToyNFrOEg3dxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDAwMjk3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJetInstance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo0NzowNFrOHLtbTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo0NzowNFrOHLtbTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0MDY1Mw==", "bodyText": "Maybe we can create a JobDefinition interface that will be internal. Will have no methods and can extend Serializable. Then make DAG and PipelineImpl implement it. It can be more readable this way.\nThen we can have newJobInt method that will do the above switching.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482040653", "createdAt": "2020-09-02T12:47:04Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJetInstance.java", "diffHunk": "@@ -80,16 +92,30 @@ public Job newJobIfAbsent(@Nonnull DAG dag, @Nonnull JobConfig config) {\n                         return job;\n                     }\n                 }\n-\n                 try {\n-                    return newJob(dag, config);\n+                    if (jobDefinition instanceof PipelineImpl) {\n+                        return newJob((PipelineImpl) jobDefinition, config);\n+                    } else {\n+                        return newJob((DAG) jobDefinition, config);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDA0MzY0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/Transform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo1NzowOVrOHLt0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjo1NzowOVrOHLt0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA0NzEwNg==", "bodyText": "We never use these methods.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482047106", "createdAt": "2020-09-02T12:57:09Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/Transform.java", "diffHunk": "@@ -56,6 +58,12 @@\n     @Nonnull\n     List<Transform> upstream();\n \n+    boolean isLocalParallelismDetermined();\n+\n+    void setLocalParallelismDetermined(boolean localParallelismDetermined);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDA3MDUyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/AbstractTransform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzowMzoyNVrOHLuEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzowMzoyNVrOHLuEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MTI0MQ==", "bodyText": "The localParallelism parameter is always the localParallelism() method, we can remove this parameter.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482051241", "createdAt": "2020-09-02T13:03:25Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/AbstractTransform.java", "diffHunk": "@@ -115,4 +131,31 @@ protected final boolean shouldRebalanceAnyInput() {\n         }\n         return false;\n     }\n+\n+    /**\n+     * Determines the local parallelism value for the transform by looking\n+     * its local parallelism, preferred local parallelism, and the default\n+     * local parallelism provided in Pipeline.Context object.\n+     * <p>\n+     * If none of them is set, returns the default local parallelism\n+     * provided in Pipeline.Context object.\n+     */\n+    protected void determineLocalParallelism(int localParallelism, int preferredLocalParallelism, Pipeline.Context ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDA3MzE1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzowNDowN1rOHLuGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODowOTozOFrOHMbJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MTY4OQ==", "bodyText": "Do we need this as a public API?\nWe miss the @since tag here\nThe name Context suggests that there will be more methods in the future, but those methods will have to be default. Context object instances are normally provided by the environment, not by the user. Why don't we just use int defaultLocalParallelism argument?\nInstead of a new method we could maybe deprecate the toDag() method. It's not a supported way to use Jet.\nIf we don't provide this method, I think we can also remove the AbstractTransform.determineLocalParallelism, which is almost a clone of Vertex.determineLocalParallelism. We can keep just -1 for LP and the vertex will take care. But in this point maybe I missed something, I'm not sure.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482051689", "createdAt": "2020-09-02T13:04:07Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "diffHunk": "@@ -99,9 +100,24 @@ static Pipeline create() {\n     @Nonnull\n     DAG toDag();\n \n+    /**\n+     * Transforms the pipeline into a Jet DAG, which can be submitted for\n+     * execution to a Jet instance.\n+     */\n+    @Nonnull\n+    DAG toDag(Context context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5NDIyMw==", "bodyText": "Yes, this should be retracted from the public API. Then it will be easy to decide not to take a config object.\nHaving default implementations isn't necessary, I think, since Jet would be the only implementor. We wouldn't write examples with a lambda implementing the context.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482094223", "createdAt": "2020-09-02T14:03:22Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "diffHunk": "@@ -99,9 +100,24 @@ static Pipeline create() {\n     @Nonnull\n     DAG toDag();\n \n+    /**\n+     * Transforms the pipeline into a Jet DAG, which can be submitted for\n+     * execution to a Jet instance.\n+     */\n+    @Nonnull\n+    DAG toDag(Context context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MTY4OQ=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDY2Ng==", "bodyText": "For now, this LP determination process looks like the clone of the Vertex inside, but it will later be used to propagate the LP of a transform to its downstream and will be modified for it. The determineLocalParallelism() in Vertex did not allow such a change because it could not see LP of the upstream vertices. After adding this method to Transforms, I also tried to remove the determineLocalParallelism in Vertex, but the problem arises when the client directly submits a DAG containing -1 LP vertex as a job definition.\nFor the other items, I will apply the fix specified by Marko.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482740666", "createdAt": "2020-09-03T06:45:20Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "diffHunk": "@@ -99,9 +100,24 @@ static Pipeline create() {\n     @Nonnull\n     DAG toDag();\n \n+    /**\n+     * Transforms the pipeline into a Jet DAG, which can be submitted for\n+     * execution to a Jet instance.\n+     */\n+    @Nonnull\n+    DAG toDag(Context context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MTY4OQ=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MzExMQ==", "bodyText": "it will later be used to propagate the LP of a transform to its downstream\n\nWe don't need it now, will it be needed for some future feature?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482783111", "createdAt": "2020-09-03T07:58:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "diffHunk": "@@ -99,9 +100,24 @@ static Pipeline create() {\n     @Nonnull\n     DAG toDag();\n \n+    /**\n+     * Transforms the pipeline into a Jet DAG, which can be submitted for\n+     * execution to a Jet instance.\n+     */\n+    @Nonnull\n+    DAG toDag(Context context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MTY4OQ=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4OTc2NQ==", "bodyText": "yes, we don't need this for this relocation but it will be needed for the future feature.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482789765", "createdAt": "2020-09-03T08:09:38Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "diffHunk": "@@ -99,9 +100,24 @@ static Pipeline create() {\n     @Nonnull\n     DAG toDag();\n \n+    /**\n+     * Transforms the pipeline into a Jet DAG, which can be submitted for\n+     * execution to a Jet instance.\n+     */\n+    @Nonnull\n+    DAG toDag(Context context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MTY4OQ=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDE1NDAyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/SourceProcessors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyMjo1MFrOHLu3aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1OTozM1rOHMaxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2NDIzMg==", "bodyText": "We force the user to pass client XML as a string, but the conversion to string isn't public API. Also we change this overload of streamRemoteMapP, but not the other overload. I think we should stick with the original signature and convert to string for the user in the method body.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482064232", "createdAt": "2020-09-02T13:22:50Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/SourceProcessors.java", "diffHunk": "@@ -180,14 +182,14 @@ public static ProcessorSupplier readRemoteMapP(@Nonnull String mapName, @Nonnull\n     @Nonnull\n     public static <T, K, V> ProcessorMetaSupplier streamRemoteMapP(\n             @Nonnull String mapName,\n-            @Nonnull ClientConfig clientConfig,\n+            @Nonnull String clientXml,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MzY3NQ==", "bodyText": "I understand the problem and I am aware that we need to hide this internal usage inside our code but I couldn't manage to do it. When I move this conversion to one step deeper, I start having trouble serializing the Pipeline. I have not enough knowledge about the serialization of nested lambdas to solve this problem. Where should I look for reference?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482783675", "createdAt": "2020-09-03T07:59:33Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/SourceProcessors.java", "diffHunk": "@@ -180,14 +182,14 @@ public static ProcessorSupplier readRemoteMapP(@Nonnull String mapName, @Nonnull\n     @Nonnull\n     public static <T, K, V> ProcessorMetaSupplier streamRemoteMapP(\n             @Nonnull String mapName,\n-            @Nonnull ClientConfig clientConfig,\n+            @Nonnull String clientXml,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2NDIzMg=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDE4MzQwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyOToxN1rOHLvJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzoyNzowOVrOHQRf9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Mg==", "bodyText": "Here we mutate the pipeline. The following code will have unexpected behavior.\nPipeline p = ...\nDAG dagWithLp1 = p.toDag(() -> 1);\nDAG dagWithLp2 = p.toDag(() -> 2);\nBoth DAGs will use LP=1 where default LP was used.\nI also don't see a reason why do we need this. Can't we have the vertices with LP=1 and rely on the logic in Vertex class?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482068872", "createdAt": "2020-09-02T13:29:17Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "diffHunk": "@@ -111,6 +113,11 @@ DAG createDag() {\n             }\n         }\n \n+        // determine exact local parallelism of the transforms\n+        for (Transform transform : adjacencyMap.keySet()) {\n+            transform.determineLocalParallelism(ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjMzMw==", "bodyText": "You mean -1?  We have to propagate the parallelism from source to sink, i don't think that's something a Vertex should do.\nAs for mutating the pipeline, I think that's fine because it happens on the server side, on a deserialized copy.\nI think we are also storing the pipeline with the job, for this it would be important to serialize it before modification.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482106333", "createdAt": "2020-09-02T14:19:36Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "diffHunk": "@@ -111,6 +113,11 @@ DAG createDag() {\n             }\n         }\n \n+        // determine exact local parallelism of the transforms\n+        for (Transform transform : adjacencyMap.keySet()) {\n+            transform.determineLocalParallelism(ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Mg=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NDc2MQ==", "bodyText": "As for mutating the pipeline, I think that's fine because it happens on the server side, on a deserialized copy\n\nYou still can call pipeline.toDag() on the client. For what reason I don't know, but you can. It might not be an issue in practice, but it's not pure and it can be very surprising if you hit it. Methods like toDag shouldn't surprisingly change the local parallelism of all stages in the pipeline.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482784761", "createdAt": "2020-09-03T08:01:17Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "diffHunk": "@@ -111,6 +113,11 @@ DAG createDag() {\n             }\n         }\n \n+        // determine exact local parallelism of the transforms\n+        for (Transform transform : adjacencyMap.keySet()) {\n+            transform.determineLocalParallelism(ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Mg=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NjU3MA==", "bodyText": "I think we are also storing the pipeline with the job, for this it would be important to serialize it before modification.\n\nWe always store the DAG in the JobRecord.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482786570", "createdAt": "2020-09-03T08:04:14Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "diffHunk": "@@ -111,6 +113,11 @@ DAG createDag() {\n             }\n         }\n \n+        // determine exact local parallelism of the transforms\n+        for (Transform transform : adjacencyMap.keySet()) {\n+            transform.determineLocalParallelism(ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Mg=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNjkxMw==", "bodyText": "We always store the DAG in the JobRecord.\n\nJet could restart with a different default local parallelism, so this is going to become an issue.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r486816913", "createdAt": "2020-09-11T07:07:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "diffHunk": "@@ -111,6 +113,11 @@ DAG createDag() {\n             }\n         }\n \n+        // determine exact local parallelism of the transforms\n+        for (Transform transform : adjacencyMap.keySet()) {\n+            transform.determineLocalParallelism(ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Mg=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyNTk3Mw==", "bodyText": "We assume all members have equal hardware and same configuration, so the local parallelism should be same...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r486825973", "createdAt": "2020-09-11T07:27:09Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/Planner.java", "diffHunk": "@@ -111,6 +113,11 @@ DAG createDag() {\n             }\n         }\n \n+        // determine exact local parallelism of the transforms\n+        for (Transform transform : adjacencyMap.keySet()) {\n+            transform.determineLocalParallelism(ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Mg=="}, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDIwNjA2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNDoxOVrOHLvX4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNDoxOVrOHLvX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3MjU0NQ==", "bodyText": "This doesn't need to be serializable.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482072545", "createdAt": "2020-09-02T13:34:19Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -68,7 +69,7 @@\n      *\n      * @param <T> type of the emitted item\n      */\n-    public interface SourceBuffer<T> {\n+    public interface SourceBuffer<T> extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDIxNjQzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNjo0M1rOHLveeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNjo0M1rOHLveeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NDIzNA==", "bodyText": "This is a breaking change. But I'm not sure if we can do anything about it. We at least need to document it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r482074234", "createdAt": "2020-09-02T13:36:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -128,7 +128,7 @@ private Sources() {\n     public static <T> StreamSource<T> streamFromProcessorWithWatermarks(\n             @Nonnull String sourceName,\n             boolean supportsNativeTimestamps,\n-            @Nonnull Function<EventTimePolicy<? super T>, ProcessorMetaSupplier> metaSupplierFn\n+            @Nonnull FunctionEx<EventTimePolicy<? super T>, ProcessorMetaSupplier> metaSupplierFn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c304ebfa47570a65d2d10d11fbecdf54d71961be"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODYyMzg1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoxMjoyOVrOHN1Kxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoxMjoyOVrOHN1Kxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2NDY0Nw==", "bodyText": "We should mark the toDag() method as deprecated. It will be supported only for bw-compatibility and users should not use it. If they have a pipeline, they should submit a pipeline.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484264647", "createdAt": "2020-09-07T08:12:29Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Pipeline.java", "diffHunk": "@@ -42,7 +43,7 @@\n  *\n  * @since 3.0\n  */\n-public interface Pipeline {\n+public interface Pipeline extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODY3MjIxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyNToxOFrOHN1nvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyNToxOFrOHN1nvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MjA2MQ==", "bodyText": "We should use the terms MUST, SHOULD or MAY according to the documentation standards, see https://tools.ietf.org/html/rfc2119. Here we should use MUST.\nBut it's not strictly correct here. Every instance of FunctionEx is Serializable and in 4.3 we're changing the required type. Maybe it would be better to say:\n\"Since version Jet 4.3 this argument changed from Function to FunctionEx to support serializability.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484272061", "createdAt": "2020-09-07T08:25:18Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -120,15 +120,17 @@ private Sources() {\n      * If you are implementing a custom source processor, be sure to check out\n      * the {@link EventTimeMapper} class that will help you correctly implement\n      * watermark emission.\n-     *  @param sourceName user-friendly source name\n+     *\n+     * @param sourceName user-friendly source name\n      * @param supportsNativeTimestamps true, if the processor is able to work\n-     * @param metaSupplierFn factory of processor meta-suppliers\n+     * @param metaSupplierFn factory of processor meta-suppliers. Since version\n+     *                      4.3 this function should be Serializable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk3Njg0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJobProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0MzowMFrOHN4dgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjoxMzo1OVrOHN9Fog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxODU5Mw==", "bodyText": "Use JobDefinition", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484318593", "createdAt": "2020-09-07T09:43:00Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJobProxy.java", "diffHunk": "@@ -70,13 +69,13 @@\n         this.logger = loggingService().getLogger(Job.class);\n     }\n \n-    AbstractJobProxy(T container, long jobId, DAG dag, JobConfig config) {\n+    AbstractJobProxy(T container, long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5NDQwMg==", "bodyText": "Since we decided to remove JobDefinition, I am resolving this conversation.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484394402", "createdAt": "2020-09-07T12:13:59Z", "author": {"login": "ufukyilmaz"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/AbstractJobProxy.java", "diffHunk": "@@ -70,13 +69,13 @@\n         this.logger = loggingService().getLogger(Job.class);\n     }\n \n-    AbstractJobProxy(T container, long jobId, DAG dag, JobConfig config) {\n+    AbstractJobProxy(T container, long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxODU5Mw=="}, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk3Nzk2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/ClientJobProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0MzoyMlrOHN4eSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0MzoyMlrOHN4eSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxODc5Mg==", "bodyText": "Use JobDefinition", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484318792", "createdAt": "2020-09-07T09:43:22Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/ClientJobProxy.java", "diffHunk": "@@ -63,8 +62,8 @@\n         super(client, jobId);\n     }\n \n-    ClientJobProxy(JetClientInstanceImpl client, long jobId, DAG dag, JobConfig config) {\n-        super(client, jobId, dag, config);\n+    ClientJobProxy(JetClientInstanceImpl client, long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk3ODk3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetBootstrap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0MzozN1rOHN4e0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0MzozN1rOHN4e0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxODkyOQ==", "bodyText": "Use JobDefinition", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484318929", "createdAt": "2020-09-07T09:43:37Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetBootstrap.java", "diffHunk": "@@ -341,8 +341,8 @@ public Job newJobProxy(long jobId) {\n         }\n \n         @Override\n-        public Job newJobProxy(long jobId, DAG dag, JobConfig config) {\n-            return instance.newJobProxy(jobId, dag, config);\n+        public Job newJobProxy(long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk4MDQ3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetClientInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NDowMVrOHN4fvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NDowMVrOHN4fvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxOTE2NQ==", "bodyText": "Use JobDefinition", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484319165", "createdAt": "2020-09-07T09:44:01Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetClientInstanceImpl.java", "diffHunk": "@@ -108,8 +107,8 @@ public boolean existsDistributedObject(@Nonnull String serviceName, @Nonnull Str\n     }\n \n     @Override\n-    public Job newJobProxy(long jobId, DAG dag, JobConfig config) {\n-        return new ClientJobProxy(this, jobId, dag, config);\n+    public Job newJobProxy(long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk4MDg2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NDowNlrOHN4f9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NDowNlrOHN4f9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxOTIyMA==", "bodyText": "Use JobDefinition", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484319220", "createdAt": "2020-09-07T09:44:06Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetInstanceImpl.java", "diffHunk": "@@ -126,8 +125,8 @@ public Job newJobProxy(long jobId) {\n     }\n \n     @Override\n-    public Job newJobProxy(long jobId, DAG dag, JobConfig config) {\n-        return new JobProxy((NodeEngineImpl) nodeEngine, jobId, dag, config);\n+    public Job newJobProxy(long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk4NjMxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JobProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NToyNFrOHN4jGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0NToyNFrOHN4jGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMyMDAyNA==", "bodyText": "Use JobDefinition", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2446#discussion_r484320024", "createdAt": "2020-09-07T09:45:24Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JobProxy.java", "diffHunk": "@@ -58,8 +57,8 @@ public JobProxy(NodeEngineImpl nodeEngine, long jobId) {\n         super(nodeEngine, jobId);\n     }\n \n-    public JobProxy(NodeEngineImpl engine, long jobId, DAG dag, JobConfig config) {\n-        super(engine, jobId, dag, config);\n+    public JobProxy(NodeEngineImpl engine, long jobId, Object jobDefinition, JobConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf20d44cf259f811e5a85bca93f56a09e105fc"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4545, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}