{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTEyODg4", "number": 2247, "title": "[005] - Productionize Postgres CDC source", "bodyText": "Checklist\n\n Tags Set\n Milestone Set", "createdAt": "2020-05-11T13:40:57Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247", "merged": true, "mergeCommit": {"oid": "bfdc2a8afd717da6d18d1315c120f8b59baed5e6"}, "closed": true, "closedAt": "2020-06-24T07:09:13Z", "author": {"login": "jbartok"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclCWGpABqjMzNzI5NjI5ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuUIrrgH2gAyNDE2MTEyODg4OjEzZDViODg3YTE4MTY3ZTVmNjkwMzU1OGQ2YjJiM2Q5NjI4NWVkYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a6cafa8f4b48c8dfd2f8258338018fee7372be2", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1a6cafa8f4b48c8dfd2f8258338018fee7372be2", "committedDate": "2020-05-11T13:40:04Z", "message": "Put back CDC code for Postgres"}, "afterCommit": {"oid": "200a8be5e8c20b14d3821d7e42e630ea40156a16", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/200a8be5e8c20b14d3821d7e42e630ea40156a16", "committedDate": "2020-05-26T10:43:45Z", "message": "Put back CDC code for Postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06b00ef4c44c7582ebb9c80504887a017dc5f62", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f06b00ef4c44c7582ebb9c80504887a017dc5f62", "committedDate": "2020-06-02T07:28:51Z", "message": "Reword CDC related statements, fix links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10669f70e4dcbd8392d53bb580026ff46c0e9e7f", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/10669f70e4dcbd8392d53bb580026ff46c0e9e7f", "committedDate": "2020-06-02T07:47:26Z", "message": "Put back CDC code for Postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db818d0d7b81eedaf860b5577a6fd3338a1c215b", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/db818d0d7b81eedaf860b5577a6fd3338a1c215b", "committedDate": "2020-06-02T07:48:23Z", "message": "Sync with MySQL on master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f0d7f5bc54efc32002ca334edf1eb01b1bf78a", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/60f0d7f5bc54efc32002ca334edf1eb01b1bf78a", "committedDate": "2020-06-02T07:48:26Z", "message": "Handle license issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33aef0c27e21b8689f43ab8d6b10a80e889b1237", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/33aef0c27e21b8689f43ab8d6b10a80e889b1237", "committedDate": "2020-06-02T07:48:27Z", "message": "Move slow tests (with a few exceptions) to nightly run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4662b021785a04c0df339f15030ef252c29de39", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c4662b021785a04c0df339f15030ef252c29de39", "committedDate": "2020-06-02T10:07:20Z", "message": "Add sequence extractor and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a8e5f754182e93fbf379f3a073c05bc5f24b2f", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/25a8e5f754182e93fbf379f3a073c05bc5f24b2f", "committedDate": "2020-06-02T10:40:33Z", "message": "Remove copy-paste TODO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43ad880eb8598822231114c7d1678a33119413a3", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/43ad880eb8598822231114c7d1678a33119413a3", "committedDate": "2020-05-27T09:01:08Z", "message": "Move slow tests (with a few exceptions) to nightly run"}, "afterCommit": {"oid": "25a8e5f754182e93fbf379f3a073c05bc5f24b2f", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/25a8e5f754182e93fbf379f3a073c05bc5f24b2f", "committedDate": "2020-06-02T10:40:33Z", "message": "Remove copy-paste TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17c581fcab40b79738cefd19130714941e41d1dc", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/17c581fcab40b79738cefd19130714941e41d1dc", "committedDate": "2020-06-03T06:45:55Z", "message": "Add tutorial for Postgres CDC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea71084c3c8b6b28796eb201ceb4c407f623cbf3", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ea71084c3c8b6b28796eb201ceb4c407f623cbf3", "committedDate": "2020-06-03T06:52:59Z", "message": "Address review concerns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34b92fe141e65c9ec5f7cc0d92f473a4a2e4e111", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/34b92fe141e65c9ec5f7cc0d92f473a4a2e4e111", "committedDate": "2020-06-03T06:53:26Z", "message": "Merge branch 'cdc-wording' into cdc-postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c09d149f7f7b5df3fe62205f35b7f2090cd222", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b7c09d149f7f7b5df3fe62205f35b7f2090cd222", "committedDate": "2020-06-03T07:17:15Z", "message": "Update design document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3abc523804fc25aa150e6f8d50df418beea0c476", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3abc523804fc25aa150e6f8d50df418beea0c476", "committedDate": "2020-06-04T11:18:32Z", "message": "Add logical replication related source properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8341732ef2de29596da97f2da32edbf928b4c0c2", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8341732ef2de29596da97f2da32edbf928b4c0c2", "committedDate": "2020-06-05T06:58:20Z", "message": "Fix sidebar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "964e8cfab89cd36985867d555be573ef182354e9", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/964e8cfab89cd36985867d555be573ef182354e9", "committedDate": "2020-06-05T07:11:47Z", "message": "Remove comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d841799b15aa46f451004f9aaa61bb53be6e69dc", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d841799b15aa46f451004f9aaa61bb53be6e69dc", "committedDate": "2020-06-05T09:22:14Z", "message": "Add source table name to ChangeRecord"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b83d65ddb06b81c60d4bd96257e5ef59afbf178", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3b83d65ddb06b81c60d4bd96257e5ef59afbf178", "committedDate": "2020-06-05T11:14:53Z", "message": "Make checkstyle happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c625e9073995b95048b3e7a7af4e1d8b4c6250", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/08c625e9073995b95048b3e7a7af4e1d8b4c6250", "committedDate": "2020-06-12T07:15:14Z", "message": "Add \"db\" & \"schema\" fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc16606d3607c164816cf1c9ee60516f5d3bbfe", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/bbc16606d3607c164816cf1c9ee60516f5d3bbfe", "committedDate": "2020-06-12T08:36:50Z", "message": "Add \"db\" & \"schema\" fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "492687e209e32667946412701b35d8498d94111f", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/492687e209e32667946412701b35d8498d94111f", "committedDate": "2020-06-12T08:49:00Z", "message": "Add \"db\" & \"schema\" fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c992b84ad1740bd22b2ee550384fb64f40bc4631", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c992b84ad1740bd22b2ee550384fb64f40bc4631", "committedDate": "2020-06-12T10:03:54Z", "message": "Simplify previous changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de327666b901550e3ec18b5aa2ace961489c06a", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3de327666b901550e3ec18b5aa2ace961489c06a", "committedDate": "2020-06-15T11:00:07Z", "message": "Write deployment guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bcc9d2f43eb8e0ae4253131f9837daef1777309", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/6bcc9d2f43eb8e0ae4253131f9837daef1777309", "committedDate": "2020-06-15T12:23:01Z", "message": "Document parsing workaround"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b725cefaf91e68c4ffc6be77f4b3a48fd5814a0", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7b725cefaf91e68c4ffc6be77f4b3a48fd5814a0", "committedDate": "2020-06-16T06:25:42Z", "message": "Document sequence numbers a bit better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91fd52b37f94068aad38070ebe92f0c72dfa6c7", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e91fd52b37f94068aad38070ebe92f0c72dfa6c7", "committedDate": "2020-06-16T06:31:47Z", "message": "Merge branch 'master' into cdc-postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bc455112b211bb64882d32a1a1e3b853432bf51", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9bc455112b211bb64882d32a1a1e3b853432bf51", "committedDate": "2020-06-16T07:07:50Z", "message": "Rename test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75eaee356474e64ecc76c2ee36631cb4457a3678", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/75eaee356474e64ecc76c2ee36631cb4457a3678", "committedDate": "2020-06-16T07:12:35Z", "message": "Refactor minor things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dda4c6792945deff4a4e6ce50bf18d072c4480a4", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/dda4c6792945deff4a4e6ce50bf18d072c4480a4", "committedDate": "2020-06-16T07:49:18Z", "message": "Fix dependency versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf77381194522c816d756f76b9a256d5f44243b", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/caf77381194522c816d756f76b9a256d5f44243b", "committedDate": "2020-06-18T08:02:05Z", "message": "Add more integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5042713a53e8580671d50680b4b07695725d1b1", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d5042713a53e8580671d50680b4b07695725d1b1", "committedDate": "2020-06-18T08:47:12Z", "message": "Merge branch 'master' into cdc-postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c947285748540521f6857a5995cf534e708005b", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7c947285748540521f6857a5995cf534e708005b", "committedDate": "2020-06-18T10:55:54Z", "message": "Define raw debezium source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93", "committedDate": "2020-06-18T11:08:55Z", "message": "Remove nonsensical tests and some that are more trouble than they are worth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDQxMjEw", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#pullrequestreview-433041210", "createdAt": "2020-06-18T08:11:03Z", "commit": {"oid": "caf77381194522c816d756f76b9a256d5f44243b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxMTowM1rOGlkXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjowNzozOFrOGlsUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0NjMzOQ==", "bodyText": "we can drop the ...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442046339", "createdAt": "2020-06-18T08:11:03Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/RecordPart.java", "diffHunk": "@@ -40,6 +40,32 @@\n      * Jackson jr</a> with <a\n      * href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">\n      * annotation support</a>, so the supplied class can be annotated accordingly.\n+     * <p>\n+     * Note: there is a bug in jackson-jr's object mapping, where it doesn't\n+     * handle fields of type {@code Data} properly, if they are nullable.\n+     * The null values trigger exceptions and failure in the object mapping code...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf77381194522c816d756f76b9a256d5f44243b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjE5MA==", "bodyText": "I wonder if this is relevant to us, since in Debezium it only affect the Kafka topic name? Can we just use a random name?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176190", "createdAt": "2020-06-18T12:06:36Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjI3Ng==", "bodyText": "missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176276", "createdAt": "2020-06-18T12:06:46Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {\n+            config.setProperty(\"database.server.name\", cluster);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be\n+         * monitored (\"schema\" is used here to denote logical groups of\n+         * tables). Any schema name not included in the whitelist will\n+         * be excluded from monitoring. By default all non-system schemas\n+         * will be monitored. May not be used with\n+         * {@link #setSchemaBlacklist(String...) schema blacklist}.\n+         */\n+        public Builder setSchemaWhitelist(String... schemaNameRegExps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjM4OQ==", "bodyText": "missing annotations (check other places too)", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176389", "createdAt": "2020-06-18T12:06:55Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjU3Mg==", "bodyText": "returns the source..", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176572", "createdAt": "2020-06-18T12:07:19Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Logical name that identifies and provides a namespace for the\n+         * particular database server/cluster being monitored. The\n+         * logical name should be unique across all other connectors.\n+         * Only alphanumeric characters and underscores should be used.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setClusterName(@Nonnull String cluster) {\n+            config.setProperty(\"database.server.name\", cluster);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be\n+         * monitored (\"schema\" is used here to denote logical groups of\n+         * tables). Any schema name not included in the whitelist will\n+         * be excluded from monitoring. By default all non-system schemas\n+         * will be monitored. May not be used with\n+         * {@link #setSchemaBlacklist(String...) schema blacklist}.\n+         */\n+        public Builder setSchemaWhitelist(String... schemaNameRegExps) {\n+            config.setProperty(\"schema.whitelist\", schemaNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be\n+         * excluded from monitoring (\"schema\" is used here to denote\n+         * logical groups of tables). Any schema name not included in\n+         * the blacklist will be monitored, with the exception of system\n+         * schemas. May not be used with\n+         * {@link #setSchemaWhitelist(String...) schema whitelist}.\n+         */\n+        public Builder setSchemaBlacklist(String... schemaNameRegExps) {\n+            config.setProperty(\"schema.blacklist\", schemaNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match fully-qualified table\n+         * identifiers for tables to be monitored; any table not\n+         * included in the whitelist will be excluded from monitoring.\n+         * Each identifier is of the form <i>schemaName.tableName</i>.\n+         * By default the connector will monitor every non-system table\n+         * in each monitored database. May not be used with\n+         * {@link #setTableBlacklist(String...) table blacklist}.\n+         */\n+        @Nonnull\n+        public Builder setTableWhitelist(@Nonnull String... tableNameRegExps) {\n+            config.setProperty(\"table.whitelist\", tableNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match fully-qualified table\n+         * identifiers for tables to be excluded from monitoring; any\n+         * table not included in the blacklist will be monitored. Each\n+         * identifier is of the form <i>schemaName.tableName</i>. May\n+         * not be used with\n+         * {@link #setTableWhitelist(String...) table whitelist}.\n+         */\n+        @Nonnull\n+        public Builder setTableBlacklist(@Nonnull String... tableNameRegExps) {\n+            config.setProperty(\"table.blacklist\", tableNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match the fully-qualified\n+         * names of columns that should be excluded from change event\n+         * message values. Fully-qualified names for columns are of the\n+         * form <i>schemaName.tableName.columnName</i>.\n+         */\n+        @Nonnull\n+        public Builder setColumnBlacklist(@Nonnull String... columnNameRegExps) {\n+            config.setProperty(\"column.blacklist\", columnNameRegExps);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the @see <a href=\"https://www.postgresql.org/docs/10/logicaldecoding.html\">\n+         * Postgres logical decoding plug-in</a> installed on the server.\n+         * Supported values are <i>decoderbufs</i>, <i>wal2json</i>,\n+         * <i>wal2json_rds</i>, <i>wal2json_streaming</i>,\n+         * <i>wal2json_rds_streaming</i> and <i>pgoutput</i>.\n+         * <p>\n+         * If not explicitly set, the property defaults to <i>decoderbufs</i>.\n+         * <p>\n+         * When the processed transactions are very large it is possible\n+         * that the JSON batch event with all changes in the transaction\n+         * will not fit into the hard-coded memory buffer of size 1 GB.\n+         * In such cases it is possible to switch to so-called streaming\n+         * mode when every change in transactions is sent as a separate\n+         * message from PostgreSQL.\n+         */\n+        @Nonnull\n+        public Builder setLogicalDecodingPlugIn(@Nonnull String pluginName) {\n+            config.setProperty(\"plugin.name\", pluginName);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the @see <a href=\"https://www.postgresql.org/docs/10/logicaldecoding-explanation.html\">\n+         * Postgres logical decoding slot</a> (also called \"replication\n+         * slot\") created for streaming changes from a plug-in and\n+         * database instance.\n+         * <p>\n+         * Values must conform to Postgres replication slot naming rules\n+         * which state: \"Each replication slot has a name, which can\n+         * contain lower-case letters, numbers, and the underscore\n+         * character.\"\n+         * <p>\n+         * Replication slots have to have an identifier that is unique\n+         * across all databases in a PostgreSQL cluster.\n+         * <p>\n+         * If not explicitly set, the property defaults to <i>debezium</i>.\n+         */\n+        @Nonnull\n+        public Builder setReplicationSlotName(@Nonnull String slotName) {\n+            config.setProperty(\"slot.name\", slotName);\n+            return this;\n+        }\n+\n+        /**\n+         * Whether or not to drop the logical replication slot when the\n+         * connector disconnects cleanly.\n+         * <p>\n+         * Defaults to <i>false</i>\n+         * <p>\n+         * Should only be set to <i>true</i> in testing or development\n+         * environments. Dropping the slot allows WAL segments to be\n+         * discarded by the database, so it may happen that after a\n+         * restart the connector cannot resume from the WAL position\n+         * where it left off before.\n+         */\n+        @Nonnull\n+        public Builder setReplicationSlotDropOnStop(boolean dropOnStop) {\n+            config.setProperty(\"slot.drop.on.stop\", dropOnStop);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the <a href=\"https://www.postgresql.org/docs/10/logical-replication-publication.html\">\n+         * Postgres publication</a> that will be used for CDC purposes.\n+         * <p>\n+         * If the publication does not exist when this source starts up,\n+         * then the source will create it (note: the database user of the\n+         * source must have superuser permissions to be able to do so).\n+         * If created this way the publication will include all tables\n+         * and the source itself must filter the data based on its\n+         * white-/blacklist configs. This is not efficient because the\n+         * database will still send all data to the connector, before\n+         * filtering is applied.\n+         * <p>\n+         * It's best to use a pre-defined publication (via the <code>CREATE\n+         * PUBLICATION</code> SQL command, specified via its name.\n+         * <p>\n+         * If not explicitly set, the property defaults to <i>dbz_publication</i>.\n+         */\n+        @Nonnull\n+        public Builder setPublicationName(@Nonnull String publicationName) {\n+            config.setProperty(\"publication.name\", publicationName);\n+            return this;\n+        }\n+\n+        /**\n+         * Can be used to set any property not explicitly covered by\n+         * other methods or to override properties we have hidden.\n+         */\n+        @Nonnull\n+        public Builder setCustomProperty(@Nonnull String key, @Nonnull String value) {\n+            config.setProperty(key, value);\n+            return this;\n+        }\n+\n+        /**\n+         * Returns an actual source based on the properties set so far.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjcxMQ==", "bodyText": "missing @since tag", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r442176711", "createdAt": "2020-06-18T12:07:38Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/package-info.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Contains connectors for change data capture events from PostgreSQL\n+ * databases.\n+ */\n+package com.hazelcast.jet.cdc.postgres;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6950623b2e2b9f8db49ab5106163c81e8d60dba4", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/6950623b2e2b9f8db49ab5106163c81e8d60dba4", "committedDate": "2020-06-18T12:10:53Z", "message": "Make Checkstyle happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "273a4934cceab1c367eb90890104bc2d551fe5c0", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/273a4934cceab1c367eb90890104bc2d551fe5c0", "committedDate": "2020-06-19T04:00:10Z", "message": "Address review concerns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e3a7d1740490a1abf4146e261ba69f289b23ffe", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/6e3a7d1740490a1abf4146e261ba69f289b23ffe", "committedDate": "2020-06-19T07:14:05Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d713021c3faeb6136e5da422ecad0147c7dcf56", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3d713021c3faeb6136e5da422ecad0147c7dcf56", "committedDate": "2020-06-19T08:02:42Z", "message": "Add sidebar subcategories for cdc pages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43debc34899425312dd2b33fbe7413ef5e907d6f", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/43debc34899425312dd2b33fbe7413ef5e907d6f", "committedDate": "2020-06-19T08:52:22Z", "message": "Merge branch 'raw-debezium' into cdc-postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b3590de28a34b41739ab9261e95cda6edbd08af", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9b3590de28a34b41739ab9261e95cda6edbd08af", "committedDate": "2020-06-19T09:28:53Z", "message": "Add Postgres tests for generic sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "929146ad07c2e5060ae52a9f31e7c5a6d7c17aea", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/929146ad07c2e5060ae52a9f31e7c5a6d7c17aea", "committedDate": "2020-06-19T11:56:58Z", "message": "Merge branch 'master' into cdc-postgres"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49db6a215f77c9c57edbb5c428cfc394fb567d95", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/49db6a215f77c9c57edbb5c428cfc394fb567d95", "committedDate": "2020-06-22T08:19:12Z", "message": "Add SSL related config options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f95bd403d9cd5b8e750144ca6a201c4aed14ff55", "committedDate": "2020-06-22T10:26:11Z", "message": "Document behaviour when connection to DB is lost"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTAwMjc5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#pullrequestreview-434900279", "createdAt": "2020-06-22T13:03:01Z", "commit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzowMzowMVrOGm_o0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxNTozNFrOGnAF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0MTcxNA==", "bodyText": "@{code Date}", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443541714", "createdAt": "2020-06-22T13:03:01Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/RecordPart.java", "diffHunk": "@@ -40,6 +40,32 @@\n      * Jackson jr</a> with <a\n      * href=\"https://github.com/FasterXML/jackson-jr/tree/master/jr-annotation-support\">\n      * annotation support</a>, so the supplied class can be annotated accordingly.\n+     * <p>\n+     * Note: there is a bug in jackson-jr's object mapping, where it doesn't\n+     * handle fields of type {@code Data} properly, if they are nullable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Mjc0Mw==", "bodyText": "This would be better in active voice.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443542743", "createdAt": "2020-06-22T13:04:41Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -43,6 +44,14 @@ private MySqlCdcSources() {\n     /**\n      * Creates a CDC source that streams change data from a MySQL\n      * database to Hazelcast Jet.\n+     * <p>\n+     * If the database is unreachable when this source is started by a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0MzcxNw==", "bodyText": "Use <em> for emphasized text instead of <i>.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443543717", "createdAt": "2020-06-22T13:06:14Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -215,6 +226,88 @@ public Builder setColumnBlacklist(@Nonnull String... columnNameRegExps) {\n             return this;\n         }\n \n+        /**\n+         * Specifies whether to use an encrypted connection to the\n+         * database. The default is <i>disabled</i>, and specifies to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NDgwMA==", "bodyText": "These lines are too short, should be 72 chars after the initial * .", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443544800", "createdAt": "2020-06-22T13:08:05Z", "author": {"login": "mtopolnik"}, "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -215,6 +226,88 @@ public Builder setColumnBlacklist(@Nonnull String... columnNameRegExps) {\n             return this;\n         }\n \n+        /**\n+         * Specifies whether to use an encrypted connection to the\n+         * database. The default is <i>disabled</i>, and specifies to\n+         * use an unencrypted connection.\n+         * <p>\n+         * The <i>preferred</i> option establishes an encrypted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzg0OQ==", "bodyText": "This can use active voice", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443547849", "createdAt": "2020-06-22T13:13:22Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -108,6 +109,113 @@ On how to work with the MySQL config file consult the Reference Manual\n ([5.7](https://dev.mysql.com/doc/refman/5.7/en/option-files.html),\n [8.0](https://dev.mysql.com/doc/refman/8.0/en/option-files.html)).\n \n+### PostgreSQL\n+\n+#### Database version\n+\n+The PostgreSQL change data capture connector works by exploiting the\n+[logical\n+decoding](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html)\n+feature of the database, first introduced in version 9.4. This version\n+however is no longer supported. Debezium recommends running change data\n+capture on version [9.6](https://www.postgresql.org/docs/9.6/index.html)\n+or later.\n+\n+#### Output plug-in\n+\n+PostgreSQL's logical decoding feature is a mechanism which allows the\n+extraction of the changes which were committed to the transaction log\n+and the processing of these changes in a user-friendly manner via the\n+help of an [output\n+plug-in](https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html).\n+\n+The output plug-ins currently available are:\n+\n+* [`decoderbufs`](https://github.com/debezium/postgres-decoderbufs),\n+  maintained by the Debezium community, based on ProtoBuf\n+* [`wal2json`](https://github.com/eulerto/wal2json), maintained by the\n+  wal2json community, based on JSON\n+* `pgoutput`, the standard logical decoding plug-in in PostgreSQL 10 and\n+  later, maintained by the Postgres community\n+\n+The `pgoutput` plug-in is always present and requires no explicit\n+installation, for the other two follow the instructions provided by\n+their maintainers.\n+\n+Note: for simplicity Debezium also provides a Docker image based on a\n+vanilla [PostgreSQL server\n+image](https://github.com/debezium/docker-images/tree/master/postgres/9.6)\n+on top of which it compiles and installs all above mentioned plugins.\n+\n+#### Server config\n+\n+Running change data capture on a PostgreSQL server requires certain\n+configuration options to be set accordingly. This can be done either by\n+\n+* editing the `postgresql.conf` file, or by\n+* using the [ALTER\n+  SYSTEM](https://www.postgresql.org/docs/current/sql-altersystem.html)\n+  command\n+\n+The important properties to set are:\n+\n+```properties\n+# MODULES\n+shared_preload_libraries = 'decoderbufs,wal2json'\n+\n+# REPLICATION\n+wal_level = logical\n+max_wal_senders = 1\n+max_replication_slots = 1\n+```\n+\n+`shared_preload_libraries` contains a comma separated list of installed\n+output plug-ins. `wal_levels` is used to tell the server to use logical\n+decoding with the write-ahead log.\n+\n+Logical decoding uses [replication\n+slots](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html#LOGICALDECODING-REPLICATION-SLOTS).\n+Replication slots retain WAL data even during connector outages. For\n+this reason it is important to monitor and limit replication slots to\n+avoid too much disk consumption and other conditions that can happen,\n+such as catalog bloat if a slot stays unused for too long. This is why\n+the `max_wal_sender` and `max_replication_slots` parameters are set with\n+the smallest possible values.\n+\n+#### Replication permissions\n+\n+Replication can only be performed by a database user (specifically the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0ODA4Nw==", "bodyText": "Active voice", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443548087", "createdAt": "2020-06-22T13:13:50Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -108,6 +109,113 @@ On how to work with the MySQL config file consult the Reference Manual\n ([5.7](https://dev.mysql.com/doc/refman/5.7/en/option-files.html),\n [8.0](https://dev.mysql.com/doc/refman/8.0/en/option-files.html)).\n \n+### PostgreSQL\n+\n+#### Database version\n+\n+The PostgreSQL change data capture connector works by exploiting the\n+[logical\n+decoding](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html)\n+feature of the database, first introduced in version 9.4. This version\n+however is no longer supported. Debezium recommends running change data\n+capture on version [9.6](https://www.postgresql.org/docs/9.6/index.html)\n+or later.\n+\n+#### Output plug-in\n+\n+PostgreSQL's logical decoding feature is a mechanism which allows the\n+extraction of the changes which were committed to the transaction log\n+and the processing of these changes in a user-friendly manner via the\n+help of an [output\n+plug-in](https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html).\n+\n+The output plug-ins currently available are:\n+\n+* [`decoderbufs`](https://github.com/debezium/postgres-decoderbufs),\n+  maintained by the Debezium community, based on ProtoBuf\n+* [`wal2json`](https://github.com/eulerto/wal2json), maintained by the\n+  wal2json community, based on JSON\n+* `pgoutput`, the standard logical decoding plug-in in PostgreSQL 10 and\n+  later, maintained by the Postgres community\n+\n+The `pgoutput` plug-in is always present and requires no explicit\n+installation, for the other two follow the instructions provided by\n+their maintainers.\n+\n+Note: for simplicity Debezium also provides a Docker image based on a\n+vanilla [PostgreSQL server\n+image](https://github.com/debezium/docker-images/tree/master/postgres/9.6)\n+on top of which it compiles and installs all above mentioned plugins.\n+\n+#### Server config\n+\n+Running change data capture on a PostgreSQL server requires certain\n+configuration options to be set accordingly. This can be done either by\n+\n+* editing the `postgresql.conf` file, or by\n+* using the [ALTER\n+  SYSTEM](https://www.postgresql.org/docs/current/sql-altersystem.html)\n+  command\n+\n+The important properties to set are:\n+\n+```properties\n+# MODULES\n+shared_preload_libraries = 'decoderbufs,wal2json'\n+\n+# REPLICATION\n+wal_level = logical\n+max_wal_senders = 1\n+max_replication_slots = 1\n+```\n+\n+`shared_preload_libraries` contains a comma separated list of installed\n+output plug-ins. `wal_levels` is used to tell the server to use logical\n+decoding with the write-ahead log.\n+\n+Logical decoding uses [replication\n+slots](https://www.postgresql.org/docs/current/logicaldecoding-explanation.html#LOGICALDECODING-REPLICATION-SLOTS).\n+Replication slots retain WAL data even during connector outages. For\n+this reason it is important to monitor and limit replication slots to\n+avoid too much disk consumption and other conditions that can happen,\n+such as catalog bloat if a slot stays unused for too long. This is why\n+the `max_wal_sender` and `max_replication_slots` parameters are set with\n+the smallest possible values.\n+\n+#### Replication permissions\n+\n+Replication can only be performed by a database user (specifically the\n+one we set up our CDC connector with) only if the user has appropriate\n+permissions. The permissions needed are `REPLICATION` and `LOGIN`.\n+\n+For setting up database users/roles see the [PostgreSQL\n+documentation](https://www.postgresql.org/docs/9.6/user-manag.html), but\n+basically the essential command is:\n+\n+```text\n+CREATE ROLE name REPLICATION LOGIN;\n+```\n+\n+Note: database super-users already have all the permissions needed by\n+replication too.\n+\n+#### Client authentication\n+\n+Replication can only be performed for a configured number of hosts. The\n+PostgreSQL server needs to be told to allow access from the host the CDC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0OTE2NQ==", "bodyText": "I feel this is a too colloquial mode of expression for Operations Guide.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r443549165", "createdAt": "2020-06-22T13:15:34Z", "author": {"login": "mtopolnik"}, "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -167,3 +276,36 @@ options to \"ON\".\n On how to work with the MySQL config file consult the Reference Manual\n ([5.7](https://dev.mysql.com/doc/refman/5.7/en/option-files.html),\n [8.0](https://dev.mysql.com/doc/refman/8.0/en/option-files.html)).\n+\n+### PostgreSQL\n+\n+#### Primary-only replication\n+\n+As we've mentioned in the [PostgreSQL database setup\n+section](#postgresql) the connector uses logical decoding replication\n+slots. All PostgreSQL versions (up to 12) only support logical\n+replication slots on *primary* servers.\n+\n+This means that it's not possible to limit the performance impact of\n+running change data capture on replicas. This weakness is somewhat\n+offset by the fact that the logical replication process seems quite\n+limited as far as the amount of resources it can acquire. When measuring\n+its output it behaves quite like a single threaded process, which can't\n+saturate neither CPU nor the network.\n+\n+In our tests we didn't manage to make it output much more than 20,000\n+records/second, so on a powerful server running the database it\n+shouldn't affect normal operations too severely.\n+\n+#### Failure tolerance\n+\n+PostgreSQL failure tolerance associated with replication slot isn't that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95bd403d9cd5b8e750144ca6a201c4aed14ff55"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "143e495020b3db86eaaf410a6c7bc636d8b650a2", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/143e495020b3db86eaaf410a6c7bc636d8b650a2", "committedDate": "2020-06-23T07:49:48Z", "message": "Address review concerns"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzU1OTE5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#pullrequestreview-436355919", "createdAt": "2020-06-24T06:24:31Z", "commit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNDozMVrOGoEhnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyNDo0NVrOGoEh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MDM2Nw==", "bodyText": "still missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r444670367", "createdAt": "2020-06-24T06:24:31Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL\n+     * database to Hazelcast Jet.\n+     *\n+     * @param name name of this source, needs to be unique, will be\n+     *             passed to the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also\n+     * to construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .required(\"database.server.name\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique,\n+         *             will be passed to the underlying Kafka\n+         *             Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(CdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified\n+         * defaults to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server.\n+         * Has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the\n+         * changes. Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white-\n+         * and black-listing configuration options for those.\n+         */\n+        public Builder setDatabaseName(String dbName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3NjM4OQ=="}, "originalCommit": {"oid": "1cfd2a9b2b9dfb379ae7ffa9df989185c7da8f93"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MDQ0OQ==", "bodyText": "missing annotations", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2247#discussion_r444670449", "createdAt": "2020-06-24T06:24:45Z", "author": {"login": "cangencer"}, "path": "extensions/cdc-postgres/src/main/java/com/hazelcast/jet/cdc/postgres/PostgresCdcSources.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.hazelcast.internal.util.UuidUtil;\n+import com.hazelcast.jet.annotation.EvolvingApi;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource;\n+import com.hazelcast.jet.cdc.impl.ChangeRecordCdcSource;\n+import com.hazelcast.jet.cdc.impl.DebeziumConfig;\n+import com.hazelcast.jet.cdc.impl.PropertyRules;\n+import com.hazelcast.jet.cdc.postgres.impl.PostgresSequenceExtractor;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Contains factory methods for creating change data capture sources\n+ * based on PostgreSQL databases.\n+ *\n+ * @since 4.2\n+ */\n+@EvolvingApi\n+public final class PostgresCdcSources {\n+\n+    private PostgresCdcSources() {\n+    }\n+\n+    /**\n+     * Creates a CDC source that streams change data from a PostgreSQL database\n+     * to Hazelcast Jet.\n+     * <p>\n+     * If Jet can't reach the database when it attempts to start the source or\n+     * if it looses the connection to the database from an already running\n+     * source, it throws an exception and terminate the execution of the job.\n+     * This behaviour is not ideal, would be much better to try to reconnect,\n+     * at least for a certain amount of time. Future versions will address the\n+     * problem.\n+     *\n+     * @param name name of this source, needs to be unique, will be passed to\n+     *             the underlying Kafka Connect source\n+     * @return builder that can be used to set source properties and also to\n+     * construct the source once configuration is done\n+     */\n+    @Nonnull\n+    public static Builder postgres(@Nonnull String name) {\n+        return new Builder(name);\n+    }\n+\n+    /**\n+     * Builder for configuring a CDC source that streams change data\n+     * from a PostgreSQL database to Hazelcast Jet.\n+     */\n+    public static final class Builder {\n+\n+        private static final PropertyRules RULES = new PropertyRules()\n+                .required(\"database.hostname\")\n+                .required(\"database.user\")\n+                .required(\"database.password\")\n+                .required(\"database.dbname\")\n+                .inclusive(\"database.sslkey\", \"database.sslpassword\")\n+                .exclusive(\"schema.whitelist\", \"schema.blacklist\")\n+                .exclusive(\"table.whitelist\", \"table.blacklist\");\n+\n+        private final DebeziumConfig config;\n+\n+        /**\n+         * @param name name of the source, needs to be unique, will be passed to\n+         *             the underlying Kafka Connect source\n+         */\n+        private Builder(String name) {\n+            Objects.requireNonNull(name, \"name\");\n+\n+            config = new DebeziumConfig(name, \"io.debezium.connector.postgresql.PostgresConnector\");\n+            config.setProperty(CdcSource.SEQUENCE_EXTRACTOR_CLASS_PROPERTY, PostgresSequenceExtractor.class.getName());\n+            config.setProperty(ChangeRecordCdcSource.DB_SPECIFIC_EXTRA_FIELDS_PROPERTY, \"schema\");\n+            config.setProperty(\"database.server.name\", UuidUtil.newUnsecureUuidString());\n+        }\n+\n+        /**\n+         * IP address or hostname of the database server, has to be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseAddress(@Nonnull String address) {\n+            config.setProperty(\"database.hostname\", address);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional port number of the database server, if unspecified defaults\n+         * to the database specific default port (5432).\n+         */\n+        @Nonnull\n+        public Builder setDatabasePort(int port) {\n+            config.setProperty(\"database.port\", Integer.toString(port));\n+            return this;\n+        }\n+\n+        /**\n+         * Database user for connecting to the database server. Has to be\n+         * specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseUser(@Nonnull String user) {\n+            config.setProperty(\"database.user\", user);\n+            return this;\n+        }\n+\n+        /**\n+         * Database user password for connecting to the database server. Has to\n+         * be specified.\n+         */\n+        @Nonnull\n+        public Builder setDatabasePassword(@Nonnull String password) {\n+            config.setProperty(\"database.password\", password);\n+            return this;\n+        }\n+\n+        /**\n+         * The name of the PostgreSQL database from which to stream the changes.\n+         * Has to be set.\n+         * <p>\n+         * Currently this source is not capable of monitoring multiple\n+         * databases, only multiple schemas and/or tables. See white- and\n+         * black-listing configuration options for those.\n+         */\n+        @Nonnull\n+        public Builder setDatabaseName(String dbName) {\n+            config.setProperty(\"database.dbname\", dbName);\n+            return this;\n+        }\n+\n+        /**\n+         * Optional regular expressions that match schema names to be monitored\n+         * (\"schema\" is used here to denote logical groups of tables). Any\n+         * schema name not included in the whitelist will be excluded from\n+         * monitoring. By default all non-system schemas will be monitored. May\n+         * not be used with\n+         * {@link #setSchemaBlacklist(String...) schema blacklist}.\n+         */\n+        @Nonnull\n+        public Builder setSchemaWhitelist(String... schemaNameRegExps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143e495020b3db86eaaf410a6c7bc636d8b650a2"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d5b887a18167e5f6903558d6b2b3d96285eda0", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/13d5b887a18167e5f6903558d6b2b3d96285eda0", "committedDate": "2020-06-24T06:34:11Z", "message": "Add missing annotations"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3782, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}